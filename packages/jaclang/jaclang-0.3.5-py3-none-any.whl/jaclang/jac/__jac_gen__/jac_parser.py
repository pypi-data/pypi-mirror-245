# The file was automatically generated by Lark v1.1.8
__version__ = "1.1.8"

#
#
#   Lark Stand-alone Generator Tool
# ----------------------------------
# Generates a stand-alone LALR(1) parser
#
# Git:    https://github.com/erezsh/lark
# Author: Erez Shinan (erezshin@gmail.com)
#
#
#    >>> LICENSE
#
#    This tool and its generated code use a separate license from Lark,
#    and are subject to the terms of the Mozilla Public License, v. 2.0.
#    If a copy of the MPL was not distributed with this
#    file, You can obtain one at https://mozilla.org/MPL/2.0/.
#
#    If you wish to purchase a commercial license for this tool and its
#    generated code, you may contact me via email or otherwise.
#
#    If MPL2 is incompatible with your free or open-source project,
#    contact me and we'll work it out.
#
#

from copy import deepcopy
from abc import ABC, abstractmethod
from types import ModuleType
from typing import (
    TypeVar,
    Generic,
    Type,
    Tuple,
    List,
    Dict,
    Iterator,
    Collection,
    Callable,
    Optional,
    FrozenSet,
    Any,
    Union,
    Iterable,
    IO,
    TYPE_CHECKING,
    overload,
    Sequence,
    Pattern as REPattern,
    ClassVar,
    Set,
    Mapping,
)




class LarkError(Exception):
    pass


class ConfigurationError(LarkError, ValueError):
    pass


def assert_config(value, options: Collection, msg="Got %r, expected one of %s"):
    if value not in options:
        raise ConfigurationError(msg % (value, options))


class GrammarError(LarkError):
    pass


class ParseError(LarkError):
    pass


class LexError(LarkError):
    pass


T = TypeVar("T")


class UnexpectedInput(LarkError):
    #--

    line: int
    column: int
    pos_in_stream = None
    state: Any
    _terminals_by_name = None
    interactive_parser: "InteractiveParser"

    def get_context(self, text: str, span: int = 40) -> str:
        #--
        assert self.pos_in_stream is not None, self
        pos = self.pos_in_stream
        start = max(pos - span, 0)
        end = pos + span
        if not isinstance(text, bytes):
            before = text[start:pos].rsplit("\n", 1)[-1]
            after = text[pos:end].split("\n", 1)[0]
            return before + after + "\n" + " " * len(before.expandtabs()) + "^\n"
        else:
            before = text[start:pos].rsplit(b"\n", 1)[-1]
            after = text[pos:end].split(b"\n", 1)[0]
            return (
                before + after + b"\n" + b" " * len(before.expandtabs()) + b"^\n"
            ).decode("ascii", "backslashreplace")

    def match_examples(
        self,
        parse_fn: "Callable[[str], Tree]",
        examples: Union[Mapping[T, Iterable[str]], Iterable[Tuple[T, Iterable[str]]]],
        token_type_match_fallback: bool = False,
        use_accepts: bool = True,
    ) -> Optional[T]:
        #--
        assert self.state is not None, "Not supported for this exception"

        if isinstance(examples, Mapping):
            examples = examples.items()

        candidate = (None, False)
        for i, (label, example) in enumerate(examples):
            assert not isinstance(example, str), "Expecting a list"

            for j, malformed in enumerate(example):
                try:
                    parse_fn(malformed)
                except UnexpectedInput as ut:
                    if ut.state == self.state:
                        if (
                            use_accepts
                            and isinstance(self, UnexpectedToken)
                            and isinstance(ut, UnexpectedToken)
                            and ut.accepts != self.accepts
                        ):
                            logger.debug(
                                "Different accepts with same state[%d]: %s != %s at example [%s][%s]"
                                % (self.state, self.accepts, ut.accepts, i, j)
                            )
                            continue
                        if isinstance(
                            self, (UnexpectedToken, UnexpectedEOF)
                        ) and isinstance(ut, (UnexpectedToken, UnexpectedEOF)):
                            if ut.token == self.token:  ##

                                logger.debug("Exact Match at example [%s][%s]" % (i, j))
                                return label

                            if token_type_match_fallback:
                                ##

                                if (ut.token.type == self.token.type) and not candidate[
                                    -1
                                ]:
                                    logger.debug(
                                        "Token Type Fallback at example [%s][%s]"
                                        % (i, j)
                                    )
                                    candidate = label, True

                        if candidate[0] is None:
                            logger.debug(
                                "Same State match at example [%s][%s]" % (i, j)
                            )
                            candidate = label, False

        return candidate[0]

    def _format_expected(self, expected):
        if self._terminals_by_name:
            d = self._terminals_by_name
            expected = [
                d[t_name].user_repr() if t_name in d else t_name for t_name in expected
            ]
        return "Expected one of: \n\t* %s\n" % "\n\t* ".join(expected)


class UnexpectedEOF(ParseError, UnexpectedInput):
    #--

    expected: "List[Token]"

    def __init__(self, expected, state=None, terminals_by_name=None):
        super(UnexpectedEOF, self).__init__()

        self.expected = expected
        self.state = state
        from .lexer import Token

        self.token = Token("<EOF>", "")  ##

        self.pos_in_stream = -1
        self.line = -1
        self.column = -1
        self._terminals_by_name = terminals_by_name

    def __str__(self):
        message = "Unexpected end-of-input. "
        message += self._format_expected(self.expected)
        return message


class UnexpectedCharacters(LexError, UnexpectedInput):
    #--

    allowed: Set[str]
    considered_tokens: Set[Any]

    def __init__(
        self,
        seq,
        lex_pos,
        line,
        column,
        allowed=None,
        considered_tokens=None,
        state=None,
        token_history=None,
        terminals_by_name=None,
        considered_rules=None,
    ):
        super(UnexpectedCharacters, self).__init__()

        ##

        self.line = line
        self.column = column
        self.pos_in_stream = lex_pos
        self.state = state
        self._terminals_by_name = terminals_by_name

        self.allowed = allowed
        self.considered_tokens = considered_tokens
        self.considered_rules = considered_rules
        self.token_history = token_history

        if isinstance(seq, bytes):
            self.char = seq[lex_pos : lex_pos + 1].decode("ascii", "backslashreplace")
        else:
            self.char = seq[lex_pos]
        self._context = self.get_context(seq)

    def __str__(self):
        message = (
            "No terminal matches '%s' in the current parser context, at line %d col %d"
            % (self.char, self.line, self.column)
        )
        message += "\n\n" + self._context
        if self.allowed:
            message += self._format_expected(self.allowed)
        if self.token_history:
            message += "\nPrevious tokens: %s\n" % ", ".join(
                repr(t) for t in self.token_history
            )
        return message


class UnexpectedToken(ParseError, UnexpectedInput):
    #--

    expected: Set[str]
    considered_rules: Set[str]

    def __init__(
        self,
        token,
        expected,
        considered_rules=None,
        state=None,
        interactive_parser=None,
        terminals_by_name=None,
        token_history=None,
    ):
        super(UnexpectedToken, self).__init__()

        ##

        self.line = getattr(token, "line", "?")
        self.column = getattr(token, "column", "?")
        self.pos_in_stream = getattr(token, "start_pos", None)
        self.state = state

        self.token = token
        self.expected = expected  ##

        self._accepts = NO_VALUE
        self.considered_rules = considered_rules
        self.interactive_parser = interactive_parser
        self._terminals_by_name = terminals_by_name
        self.token_history = token_history

    @property
    def accepts(self) -> Set[str]:
        if self._accepts is NO_VALUE:
            self._accepts = (
                self.interactive_parser and self.interactive_parser.accepts()
            )
        return self._accepts

    def __str__(self):
        message = "Unexpected token %r at line %s, column %s.\n%s" % (
            self.token,
            self.line,
            self.column,
            self._format_expected(self.accepts or self.expected),
        )
        if self.token_history:
            message += "Previous tokens: %r\n" % self.token_history

        return message


class VisitError(LarkError):
    #--

    obj: "Union[Tree, Token]"
    orig_exc: Exception

    def __init__(self, rule, obj, orig_exc):
        message = 'Error trying to process rule "%s":\n\n%s' % (rule, orig_exc)
        super(VisitError, self).__init__(message)

        self.rule = rule
        self.obj = obj
        self.orig_exc = orig_exc


class MissingVariableError(LarkError):
    pass



import sys, re
import logging

logger: logging.Logger = logging.getLogger("lark")
logger.addHandler(logging.StreamHandler())
##

##

logger.setLevel(logging.CRITICAL)


NO_VALUE = object()

T = TypeVar("T")


def classify(
    seq: Iterable, key: Optional[Callable] = None, value: Optional[Callable] = None
) -> Dict:
    d: Dict[Any, Any] = {}
    for item in seq:
        k = key(item) if (key is not None) else item
        v = value(item) if (value is not None) else item
        try:
            d[k].append(v)
        except KeyError:
            d[k] = [v]
    return d


def _deserialize(data: Any, namespace: Dict[str, Any], memo: Dict) -> Any:
    if isinstance(data, dict):
        if "__type__" in data:  ##

            class_ = namespace[data["__type__"]]
            return class_.deserialize(data, memo)
        elif "@" in data:
            return memo[data["@"]]
        return {
            key: _deserialize(value, namespace, memo) for key, value in data.items()
        }
    elif isinstance(data, list):
        return [_deserialize(value, namespace, memo) for value in data]
    return data


_T = TypeVar("_T", bound="Serialize")


class Serialize:
    #--

    def memo_serialize(self, types_to_memoize: List) -> Any:
        memo = SerializeMemoizer(types_to_memoize)
        return self.serialize(memo), memo.serialize()

    def serialize(self, memo=None) -> Dict[str, Any]:
        if memo and memo.in_types(self):
            return {"@": memo.memoized.get(self)}

        fields = getattr(self, "__serialize_fields__")
        res = {f: _serialize(getattr(self, f), memo) for f in fields}
        res["__type__"] = type(self).__name__
        if hasattr(self, "_serialize"):
            self._serialize(res, memo)  ##

        return res

    @classmethod
    def deserialize(cls: Type[_T], data: Dict[str, Any], memo: Dict[int, Any]) -> _T:
        namespace = getattr(cls, "__serialize_namespace__", [])
        namespace = {c.__name__: c for c in namespace}

        fields = getattr(cls, "__serialize_fields__")

        if "@" in data:
            return memo[data["@"]]

        inst = cls.__new__(cls)
        for f in fields:
            try:
                setattr(inst, f, _deserialize(data[f], namespace, memo))
            except KeyError as e:
                raise KeyError("Cannot find key for class", cls, e)

        if hasattr(inst, "_deserialize"):
            inst._deserialize()  ##


        return inst


class SerializeMemoizer(Serialize):
    #--

    __serialize_fields__ = ("memoized",)

    def __init__(self, types_to_memoize: List) -> None:
        self.types_to_memoize = tuple(types_to_memoize)
        self.memoized = Enumerator()

    def in_types(self, value: Serialize) -> bool:
        return isinstance(value, self.types_to_memoize)

    def serialize(self) -> Dict[int, Any]:  ##

        return _serialize(self.memoized.reversed(), None)

    @classmethod
    def deserialize(cls, data: Dict[int, Any], namespace: Dict[str, Any], memo: Dict[Any, Any]) -> Dict[int, Any]:  ##

        return _deserialize(data, namespace, memo)


try:
    import regex

    _has_regex = True
except ImportError:
    _has_regex = False

if sys.version_info >= (3, 11):
    import re._parser as sre_parse
    import re._constants as sre_constants
else:
    import sre_parse
    import sre_constants

categ_pattern = re.compile(r"\\p{[A-Za-z_]+}")


def get_regexp_width(expr: str) -> Union[Tuple[int, int], List[int]]:
    if _has_regex:
        ##

        ##

        ##

        regexp_final = re.sub(categ_pattern, "A", expr)
    else:
        if re.search(categ_pattern, expr):
            raise ImportError(
                "`regex` module must be installed in order to use Unicode categories.",
                expr,
            )
        regexp_final = expr
    try:
        ##

        return [int(x) for x in sre_parse.parse(regexp_final).getwidth()]  ##

    except sre_constants.error:
        if not _has_regex:
            raise ValueError(expr)
        else:
            ##

            ##

            c = regex.compile(regexp_final)
            if c.match("") is None:
                ##

                return 1, int(sre_constants.MAXREPEAT)
            else:
                return 0, int(sre_constants.MAXREPEAT)



from collections import OrderedDict


class Meta:
    empty: bool
    line: int
    column: int
    start_pos: int
    end_line: int
    end_column: int
    end_pos: int
    orig_expansion: "List[TerminalDef]"
    match_tree: bool

    def __init__(self):
        self.empty = True


_Leaf_T = TypeVar("_Leaf_T")
Branch = Union[_Leaf_T, "Tree[_Leaf_T]"]


class Tree(Generic[_Leaf_T]):
    #--

    data: str
    children: "List[Branch[_Leaf_T]]"

    def __init__(
        self, data: str, children: "List[Branch[_Leaf_T]]", meta: Optional[Meta] = None
    ) -> None:
        self.data = data
        self.children = children
        self._meta = meta

    @property
    def meta(self) -> Meta:
        if self._meta is None:
            self._meta = Meta()
        return self._meta

    def __repr__(self):
        return "Tree(%r, %r)" % (self.data, self.children)

    def _pretty_label(self):
        return self.data

    def _pretty(self, level, indent_str):
        yield f"{indent_str*level}{self._pretty_label()}"
        if len(self.children) == 1 and not isinstance(self.children[0], Tree):
            yield f"\t{self.children[0]}\n"
        else:
            yield "\n"
            for n in self.children:
                if isinstance(n, Tree):
                    yield from n._pretty(level + 1, indent_str)
                else:
                    yield f"{indent_str*(level+1)}{n}\n"

    def pretty(self, indent_str: str = "  ") -> str:
        #--
        return "".join(self._pretty(0, indent_str))

    def __rich__(self, parent: Optional["rich.tree.Tree"] = None) -> "rich.tree.Tree":
        #--
        return self._rich(parent)

    def _rich(self, parent):
        if parent:
            tree = parent.add(f"[bold]{self.data}[/bold]")
        else:
            import rich.tree

            tree = rich.tree.Tree(self.data)

        for c in self.children:
            if isinstance(c, Tree):
                c._rich(tree)
            else:
                tree.add(f"[green]{c}[/green]")

        return tree

    def __eq__(self, other):
        try:
            return self.data == other.data and self.children == other.children
        except AttributeError:
            return False

    def __ne__(self, other):
        return not (self == other)

    def __hash__(self) -> int:
        return hash((self.data, tuple(self.children)))

    def iter_subtrees(self) -> "Iterator[Tree[_Leaf_T]]":
        #--
        queue = [self]
        subtrees = OrderedDict()
        for subtree in queue:
            subtrees[id(subtree)] = subtree
            ##

            queue += [
                c
                for c in reversed(subtree.children)  ##

                if isinstance(c, Tree) and id(c) not in subtrees
            ]

        del queue
        return reversed(list(subtrees.values()))

    def iter_subtrees_topdown(self):
        #--
        stack = [self]
        stack_append = stack.append
        stack_pop = stack.pop
        while stack:
            node = stack_pop()
            if not isinstance(node, Tree):
                continue
            yield node
            for child in reversed(node.children):
                stack_append(child)

    def find_pred(
        self, pred: "Callable[[Tree[_Leaf_T]], bool]"
    ) -> "Iterator[Tree[_Leaf_T]]":
        #--
        return filter(pred, self.iter_subtrees())

    def find_data(self, data: str) -> "Iterator[Tree[_Leaf_T]]":
        #--
        return self.find_pred(lambda t: t.data == data)


from functools import wraps, update_wrapper
from inspect import getmembers, getmro

_Return_T = TypeVar("_Return_T")
_Return_V = TypeVar("_Return_V")
_Leaf_T = TypeVar("_Leaf_T")
_Leaf_U = TypeVar("_Leaf_U")
_R = TypeVar("_R")
_FUNC = Callable[..., _Return_T]
_DECORATED = Union[_FUNC, type]


class _DiscardType:
    #--

    def __repr__(self):
        return "lark.visitors.Discard"


Discard = _DiscardType()

##



class _Decoratable:
    #--

    @classmethod
    def _apply_v_args(cls, visit_wrapper):
        mro = getmro(cls)
        assert mro[0] is cls
        libmembers = {name for _cls in mro[1:] for name, _ in getmembers(_cls)}
        for name, value in getmembers(cls):
            ##

            if name.startswith("_") or (
                name in libmembers and name not in cls.__dict__
            ):
                continue
            if not callable(value):
                continue

            ##

            if isinstance(cls.__dict__[name], _VArgsWrapper):
                continue

            setattr(cls, name, _VArgsWrapper(cls.__dict__[name], visit_wrapper))
        return cls

    def __class_getitem__(cls, _):
        return cls


class Transformer(_Decoratable, ABC, Generic[_Leaf_T, _Return_T]):
    #--

    __visit_tokens__ = True  ##


    def __init__(self, visit_tokens: bool = True) -> None:
        self.__visit_tokens__ = visit_tokens

    def _call_userfunc(self, tree, new_children=None):
        ##

        children = new_children if new_children is not None else tree.children
        try:
            f = getattr(self, tree.data)
        except AttributeError:
            return self.__default__(tree.data, children, tree.meta)
        else:
            try:
                wrapper = getattr(f, "visit_wrapper", None)
                if wrapper is not None:
                    return f.visit_wrapper(f, tree.data, children, tree.meta)
                else:
                    return f(children)
            except GrammarError:
                raise
            except Exception as e:
                raise VisitError(tree.data, tree, e)

    def _call_userfunc_token(self, token):
        try:
            f = getattr(self, token.type)
        except AttributeError:
            return self.__default_token__(token)
        else:
            try:
                return f(token)
            except GrammarError:
                raise
            except Exception as e:
                raise VisitError(token.type, token, e)

    def _transform_children(self, children):
        for c in children:
            if isinstance(c, Tree):
                res = self._transform_tree(c)
            elif self.__visit_tokens__ and isinstance(c, Token):
                res = self._call_userfunc_token(c)
            else:
                res = c

            if res is not Discard:
                yield res

    def _transform_tree(self, tree):
        children = list(self._transform_children(tree.children))
        return self._call_userfunc(tree, children)

    def transform(self, tree: Tree[_Leaf_T]) -> _Return_T:
        #--
        return self._transform_tree(tree)

    def __mul__(
        self: "Transformer[_Leaf_T, Tree[_Leaf_U]]",
        other: "Union[Transformer[_Leaf_U, _Return_V], TransformerChain[_Leaf_U, _Return_V,]]",
    ) -> "TransformerChain[_Leaf_T, _Return_V]":
        #--
        return TransformerChain(self, other)

    def __default__(self, data, children, meta):
        #--
        return Tree(data, children, meta)

    def __default_token__(self, token):
        #--
        return token


def merge_transformers(base_transformer=None, **transformers_to_merge):
    #--
    if base_transformer is None:
        base_transformer = Transformer()
    for prefix, transformer in transformers_to_merge.items():
        for method_name in dir(transformer):
            method = getattr(transformer, method_name)
            if not callable(method):
                continue
            if method_name.startswith("_") or method_name == "transform":
                continue
            prefixed_method = prefix + "__" + method_name
            if hasattr(base_transformer, prefixed_method):
                raise AttributeError(
                    "Cannot merge: method '%s' appears more than once" % prefixed_method
                )

            setattr(base_transformer, prefixed_method, method)

    return base_transformer


class InlineTransformer(Transformer):  ##

    def _call_userfunc(self, tree, new_children=None):
        ##

        children = new_children if new_children is not None else tree.children
        try:
            f = getattr(self, tree.data)
        except AttributeError:
            return self.__default__(tree.data, children, tree.meta)
        else:
            return f(*children)


class TransformerChain(Generic[_Leaf_T, _Return_T]):
    transformers: "Tuple[Union[Transformer, TransformerChain], ...]"

    def __init__(self, *transformers: "Union[Transformer, TransformerChain]") -> None:
        self.transformers = transformers

    def transform(self, tree: Tree[_Leaf_T]) -> _Return_T:
        for t in self.transformers:
            tree = t.transform(tree)
        return cast(_Return_T, tree)

    def __mul__(
        self: "TransformerChain[_Leaf_T, Tree[_Leaf_U]]",
        other: "Union[Transformer[_Leaf_U, _Return_V], TransformerChain[_Leaf_U, _Return_V]]",
    ) -> "TransformerChain[_Leaf_T, _Return_V]":
        return TransformerChain(*self.transformers + (other,))


class Transformer_InPlace(Transformer[_Leaf_T, _Return_T]):
    #--

    def _transform_tree(self, tree):  ##

        return self._call_userfunc(tree)

    def transform(self, tree: Tree[_Leaf_T]) -> _Return_T:
        for subtree in tree.iter_subtrees():
            subtree.children = list(self._transform_children(subtree.children))

        return self._transform_tree(tree)


class Transformer_NonRecursive(Transformer[_Leaf_T, _Return_T]):
    #--

    def transform(self, tree: Tree[_Leaf_T]) -> _Return_T:
        ##

        rev_postfix = []
        q: List[Branch[_Leaf_T]] = [tree]
        while q:
            t = q.pop()
            rev_postfix.append(t)
            if isinstance(t, Tree):
                q += t.children

        ##

        stack: List = []
        for x in reversed(rev_postfix):
            if isinstance(x, Tree):
                size = len(x.children)
                if size:
                    args = stack[-size:]
                    del stack[-size:]
                else:
                    args = []

                res = self._call_userfunc(x, args)
                if res is not Discard:
                    stack.append(res)

            elif self.__visit_tokens__ and isinstance(x, Token):
                res = self._call_userfunc_token(x)
                if res is not Discard:
                    stack.append(res)
            else:
                stack.append(x)

        (result,) = stack  ##

        ##

        ##

        ##

        return cast(_Return_T, result)


class Transformer_InPlaceRecursive(Transformer):
    #--

    def _transform_tree(self, tree):
        tree.children = list(self._transform_children(tree.children))
        return self._call_userfunc(tree)


##



class VisitorBase:
    def _call_userfunc(self, tree):
        return getattr(self, tree.data, self.__default__)(tree)

    def __default__(self, tree):
        #--
        return tree

    def __class_getitem__(cls, _):
        return cls


class Visitor(VisitorBase, ABC, Generic[_Leaf_T]):
    #--

    def visit(self, tree: Tree[_Leaf_T]) -> Tree[_Leaf_T]:
        #--
        for subtree in tree.iter_subtrees():
            self._call_userfunc(subtree)
        return tree

    def visit_topdown(self, tree: Tree[_Leaf_T]) -> Tree[_Leaf_T]:
        #--
        for subtree in tree.iter_subtrees_topdown():
            self._call_userfunc(subtree)
        return tree


class Visitor_Recursive(VisitorBase, Generic[_Leaf_T]):
    #--

    def visit(self, tree: Tree[_Leaf_T]) -> Tree[_Leaf_T]:
        #--
        for child in tree.children:
            if isinstance(child, Tree):
                self.visit(child)

        self._call_userfunc(tree)
        return tree

    def visit_topdown(self, tree: Tree[_Leaf_T]) -> Tree[_Leaf_T]:
        #--
        self._call_userfunc(tree)

        for child in tree.children:
            if isinstance(child, Tree):
                self.visit_topdown(child)

        return tree


class Interpreter(_Decoratable, ABC, Generic[_Leaf_T, _Return_T]):
    #--

    def visit(self, tree: Tree[_Leaf_T]) -> _Return_T:
        ##

        ##

        ##

        return self._visit_tree(tree)

    def _visit_tree(self, tree: Tree[_Leaf_T]):
        f = getattr(self, tree.data)
        wrapper = getattr(f, "visit_wrapper", None)
        if wrapper is not None:
            return f.visit_wrapper(f, tree.data, tree.children, tree.meta)
        else:
            return f(tree)

    def visit_children(self, tree: Tree[_Leaf_T]) -> List:
        return [
            self._visit_tree(child) if isinstance(child, Tree) else child
            for child in tree.children
        ]

    def __getattr__(self, name):
        return self.__default__

    def __default__(self, tree):
        return self.visit_children(tree)


_InterMethod = Callable[[Type[Interpreter], _Return_T], _R]


def visit_children_decor(func: _InterMethod) -> _InterMethod:
    #--

    @wraps(func)
    def inner(cls, tree):
        values = cls.visit_children(tree)
        return func(cls, values)

    return inner


##



def _apply_v_args(obj, visit_wrapper):
    try:
        _apply = obj._apply_v_args
    except AttributeError:
        return _VArgsWrapper(obj, visit_wrapper)
    else:
        return _apply(visit_wrapper)


class _VArgsWrapper:
    #--

    base_func: Callable

    def __init__(
        self, func: Callable, visit_wrapper: Callable[[Callable, str, list, Any], Any]
    ):
        if isinstance(func, _VArgsWrapper):
            func = func.base_func
        ##

        self.base_func = func  ##

        self.visit_wrapper = visit_wrapper
        update_wrapper(self, func)

    def __call__(self, *args, **kwargs):
        return self.base_func(*args, **kwargs)

    def __get__(self, instance, owner=None):
        try:
            ##

            ##

            g = type(self.base_func).__get__
        except AttributeError:
            return self
        else:
            return _VArgsWrapper(g(self.base_func, instance, owner), self.visit_wrapper)

    def __set_name__(self, owner, name):
        try:
            f = type(self.base_func).__set_name__
        except AttributeError:
            return
        else:
            f(self.base_func, owner, name)


def _vargs_inline(f, _data, children, _meta):
    return f(*children)


def _vargs_meta_inline(f, _data, children, meta):
    return f(meta, *children)


def _vargs_meta(f, _data, children, meta):
    return f(meta, children)


def _vargs_tree(f, data, children, meta):
    return f(Tree(data, children, meta))


def v_args(
    inline: bool = False,
    meta: bool = False,
    tree: bool = False,
    wrapper: Optional[Callable] = None,
) -> Callable[[_DECORATED], _DECORATED]:
    #--
    if tree and (meta or inline):
        raise ValueError(
            "Visitor functions cannot combine 'tree' with 'meta' or 'inline'."
        )

    func = None
    if meta:
        if inline:
            func = _vargs_meta_inline
        else:
            func = _vargs_meta
    elif inline:
        func = _vargs_inline
    elif tree:
        func = _vargs_tree

    if wrapper is not None:
        if func is not None:
            raise ValueError(
                "Cannot use 'wrapper' along with 'tree', 'meta' or 'inline'."
            )
        func = wrapper

    def _visitor_args_dec(obj):
        return _apply_v_args(obj, func)

    return _visitor_args_dec



TOKEN_DEFAULT_PRIORITY = 0


class Symbol(Serialize):
    __slots__ = ("name",)

    name: str
    is_term: ClassVar[bool] = NotImplemented

    def __init__(self, name: str) -> None:
        self.name = name

    def __eq__(self, other):
        assert isinstance(other, Symbol), other
        return self.is_term == other.is_term and self.name == other.name

    def __ne__(self, other):
        return not (self == other)

    def __hash__(self):
        return hash(self.name)

    def __repr__(self):
        return "%s(%r)" % (type(self).__name__, self.name)

    fullrepr = property(__repr__)

    def renamed(self, f):
        return type(self)(f(self.name))


class Terminal(Symbol):
    __serialize_fields__ = "name", "filter_out"

    is_term: ClassVar[bool] = True

    def __init__(self, name, filter_out=False):
        self.name = name
        self.filter_out = filter_out

    @property
    def fullrepr(self):
        return "%s(%r, %r)" % (type(self).__name__, self.name, self.filter_out)

    def renamed(self, f):
        return type(self)(f(self.name), self.filter_out)


class NonTerminal(Symbol):
    __serialize_fields__ = ("name",)

    is_term: ClassVar[bool] = False


class RuleOptions(Serialize):
    __serialize_fields__ = (
        "keep_all_tokens",
        "expand1",
        "priority",
        "template_source",
        "empty_indices",
    )

    keep_all_tokens: bool
    expand1: bool
    priority: Optional[int]
    template_source: Optional[str]
    empty_indices: Tuple[bool, ...]

    def __init__(
        self,
        keep_all_tokens: bool = False,
        expand1: bool = False,
        priority: Optional[int] = None,
        template_source: Optional[str] = None,
        empty_indices: Tuple[bool, ...] = (),
    ) -> None:
        self.keep_all_tokens = keep_all_tokens
        self.expand1 = expand1
        self.priority = priority
        self.template_source = template_source
        self.empty_indices = empty_indices

    def __repr__(self):
        return "RuleOptions(%r, %r, %r, %r)" % (
            self.keep_all_tokens,
            self.expand1,
            self.priority,
            self.template_source,
        )


class Rule(Serialize):
    #--

    __slots__ = ("origin", "expansion", "alias", "options", "order", "_hash")

    __serialize_fields__ = "origin", "expansion", "order", "alias", "options"
    __serialize_namespace__ = Terminal, NonTerminal, RuleOptions

    origin: NonTerminal
    expansion: Sequence[Symbol]
    order: int
    alias: Optional[str]
    options: RuleOptions
    _hash: int

    def __init__(
        self,
        origin: NonTerminal,
        expansion: Sequence[Symbol],
        order: int = 0,
        alias: Optional[str] = None,
        options: Optional[RuleOptions] = None,
    ):
        self.origin = origin
        self.expansion = expansion
        self.alias = alias
        self.order = order
        self.options = options or RuleOptions()
        self._hash = hash((self.origin, tuple(self.expansion)))

    def _deserialize(self):
        self._hash = hash((self.origin, tuple(self.expansion)))

    def __str__(self):
        return "<%s : %s>" % (
            self.origin.name,
            " ".join(x.name for x in self.expansion),
        )

    def __repr__(self):
        return "Rule(%r, %r, %r, %r)" % (
            self.origin,
            self.expansion,
            self.alias,
            self.options,
        )

    def __hash__(self):
        return self._hash

    def __eq__(self, other):
        if not isinstance(other, Rule):
            return False
        return self.origin == other.origin and self.expansion == other.expansion



from copy import copy

try:  ##

    has_interegular = bool(interegular)
except NameError:
    has_interegular = False


class Pattern(Serialize, ABC):
    #--

    value: str
    flags: Collection[str]
    raw: Optional[str]
    type: ClassVar[str]

    def __init__(
        self, value: str, flags: Collection[str] = (), raw: Optional[str] = None
    ) -> None:
        self.value = value
        self.flags = frozenset(flags)
        self.raw = raw

    def __repr__(self):
        return repr(self.to_regexp())

    ##

    def __hash__(self):
        return hash((type(self), self.value, self.flags))

    def __eq__(self, other):
        return (
            type(self) == type(other)
            and self.value == other.value
            and self.flags == other.flags
        )

    @abstractmethod
    def to_regexp(self) -> str:
        raise NotImplementedError()

    @property
    @abstractmethod
    def min_width(self) -> int:
        raise NotImplementedError()

    @property
    @abstractmethod
    def max_width(self) -> int:
        raise NotImplementedError()

    def _get_flags(self, value):
        for f in self.flags:
            value = "(?%s:%s)" % (f, value)
        return value


class PatternStr(Pattern):
    __serialize_fields__ = "value", "flags", "raw"

    type: ClassVar[str] = "str"

    def to_regexp(self) -> str:
        return self._get_flags(re.escape(self.value))

    @property
    def min_width(self) -> int:
        return len(self.value)

    @property
    def max_width(self) -> int:
        return len(self.value)


class PatternRE(Pattern):
    __serialize_fields__ = "value", "flags", "raw", "_width"

    type: ClassVar[str] = "re"

    def to_regexp(self) -> str:
        return self._get_flags(self.value)

    _width = None

    def _get_width(self):
        if self._width is None:
            self._width = get_regexp_width(self.to_regexp())
        return self._width

    @property
    def min_width(self) -> int:
        return self._get_width()[0]

    @property
    def max_width(self) -> int:
        return self._get_width()[1]


class TerminalDef(Serialize):
    #--
    __serialize_fields__ = "name", "pattern", "priority"
    __serialize_namespace__ = PatternStr, PatternRE

    name: str
    pattern: Pattern
    priority: int

    def __init__(
        self, name: str, pattern: Pattern, priority: int = TOKEN_DEFAULT_PRIORITY
    ) -> None:
        assert isinstance(pattern, Pattern), pattern
        self.name = name
        self.pattern = pattern
        self.priority = priority

    def __repr__(self):
        return "%s(%r, %r)" % (type(self).__name__, self.name, self.pattern)

    def user_repr(self) -> str:
        if self.name.startswith("__"):  ##

            return self.pattern.raw or self.name
        else:
            return self.name


_T = TypeVar("_T", bound="Token")


class Token(str):
    #--

    __slots__ = (
        "type",
        "start_pos",
        "value",
        "line",
        "column",
        "end_line",
        "end_column",
        "end_pos",
    )

    __match_args__ = ("type", "value")

    type: str
    start_pos: Optional[int]
    value: Any
    line: Optional[int]
    column: Optional[int]
    end_line: Optional[int]
    end_column: Optional[int]
    end_pos: Optional[int]

    @overload
    def __new__(
        cls,
        type: str,
        value: Any,
        start_pos: Optional[int] = None,
        line: Optional[int] = None,
        column: Optional[int] = None,
        end_line: Optional[int] = None,
        end_column: Optional[int] = None,
        end_pos: Optional[int] = None,
    ) -> "Token":
        ...

    @overload
    def __new__(
        cls,
        type_: str,
        value: Any,
        start_pos: Optional[int] = None,
        line: Optional[int] = None,
        column: Optional[int] = None,
        end_line: Optional[int] = None,
        end_column: Optional[int] = None,
        end_pos: Optional[int] = None,
    ) -> "Token":
        ...

    def __new__(cls, *args, **kwargs):
        if "type_" in kwargs:
            warnings.warn(
                "`type_` is deprecated use `type` instead", DeprecationWarning
            )

            if "type" in kwargs:
                raise TypeError(
                    "Error: using both 'type' and the deprecated 'type_' as arguments."
                )
            kwargs["type"] = kwargs.pop("type_")

        return cls._future_new(*args, **kwargs)

    @classmethod
    def _future_new(
        cls,
        type,
        value,
        start_pos=None,
        line=None,
        column=None,
        end_line=None,
        end_column=None,
        end_pos=None,
    ):
        inst = super(Token, cls).__new__(cls, value)

        inst.type = type
        inst.start_pos = start_pos
        inst.value = value
        inst.line = line
        inst.column = column
        inst.end_line = end_line
        inst.end_column = end_column
        inst.end_pos = end_pos
        return inst

    @overload
    def update(
        self, type: Optional[str] = None, value: Optional[Any] = None
    ) -> "Token":
        ...

    @overload
    def update(
        self, type_: Optional[str] = None, value: Optional[Any] = None
    ) -> "Token":
        ...

    def update(self, *args, **kwargs):
        if "type_" in kwargs:
            warnings.warn(
                "`type_` is deprecated use `type` instead", DeprecationWarning
            )

            if "type" in kwargs:
                raise TypeError(
                    "Error: using both 'type' and the deprecated 'type_' as arguments."
                )
            kwargs["type"] = kwargs.pop("type_")

        return self._future_update(*args, **kwargs)

    def _future_update(
        self, type: Optional[str] = None, value: Optional[Any] = None
    ) -> "Token":
        return Token.new_borrow_pos(
            type if type is not None else self.type,
            value if value is not None else self.value,
            self,
        )

    @classmethod
    def new_borrow_pos(cls: Type[_T], type_: str, value: Any, borrow_t: "Token") -> _T:
        return cls(
            type_,
            value,
            borrow_t.start_pos,
            borrow_t.line,
            borrow_t.column,
            borrow_t.end_line,
            borrow_t.end_column,
            borrow_t.end_pos,
        )

    def __reduce__(self):
        return (
            self.__class__,
            (self.type, self.value, self.start_pos, self.line, self.column),
        )

    def __repr__(self):
        return "Token(%r, %r)" % (self.type, self.value)

    def __deepcopy__(self, memo):
        return Token(self.type, self.value, self.start_pos, self.line, self.column)

    def __eq__(self, other):
        if isinstance(other, Token) and self.type != other.type:
            return False

        return str.__eq__(self, other)

    __hash__ = str.__hash__


class LineCounter:
    #--

    __slots__ = "char_pos", "line", "column", "line_start_pos", "newline_char"

    def __init__(self, newline_char):
        self.newline_char = newline_char
        self.char_pos = 0
        self.line = 1
        self.column = 1
        self.line_start_pos = 0

    def __eq__(self, other):
        if not isinstance(other, LineCounter):
            return NotImplemented

        return (
            self.char_pos == other.char_pos and self.newline_char == other.newline_char
        )

    def feed(self, token: Token, test_newline=True):
        #--
        if test_newline:
            newlines = token.count(self.newline_char)
            if newlines:
                self.line += newlines
                self.line_start_pos = (
                    self.char_pos + token.rindex(self.newline_char) + 1
                )

        self.char_pos += len(token)
        self.column = self.char_pos - self.line_start_pos + 1


class UnlessCallback:
    def __init__(self, scanner):
        self.scanner = scanner

    def __call__(self, t):
        res = self.scanner.match(t.value, 0)
        if res:
            _value, t.type = res
        return t


class CallChain:
    def __init__(self, callback1, callback2, cond):
        self.callback1 = callback1
        self.callback2 = callback2
        self.cond = cond

    def __call__(self, t):
        t2 = self.callback1(t)
        return self.callback2(t) if self.cond(t2) else t2


def _get_match(re_, regexp, s, flags):
    m = re_.match(regexp, s, flags)
    if m:
        return m.group(0)


def _create_unless(terminals, g_regex_flags, re_, use_bytes):
    tokens_by_type = classify(terminals, lambda t: type(t.pattern))
    assert len(tokens_by_type) <= 2, tokens_by_type.keys()
    embedded_strs = set()
    callback = {}
    for retok in tokens_by_type.get(PatternRE, []):
        unless = []
        for strtok in tokens_by_type.get(PatternStr, []):
            if strtok.priority != retok.priority:
                continue
            s = strtok.pattern.value
            if s == _get_match(re_, retok.pattern.to_regexp(), s, g_regex_flags):
                unless.append(strtok)
                if strtok.pattern.flags <= retok.pattern.flags:
                    embedded_strs.add(strtok)
        if unless:
            callback[retok.name] = UnlessCallback(
                Scanner(
                    unless, g_regex_flags, re_, match_whole=True, use_bytes=use_bytes
                )
            )

    new_terminals = [t for t in terminals if t not in embedded_strs]
    return new_terminals, callback


class Scanner:
    def __init__(self, terminals, g_regex_flags, re_, use_bytes, match_whole=False):
        self.terminals = terminals
        self.g_regex_flags = g_regex_flags
        self.re_ = re_
        self.use_bytes = use_bytes
        self.match_whole = match_whole

        self.allowed_types = {t.name for t in self.terminals}

        self._mres = self._build_mres(terminals, len(terminals))

    def _build_mres(self, terminals, max_size):
        ##

        ##

        ##

        postfix = "$" if self.match_whole else ""
        mres = []
        while terminals:
            pattern = "|".join(
                "(?P<%s>%s)" % (t.name, t.pattern.to_regexp() + postfix)
                for t in terminals[:max_size]
            )
            if self.use_bytes:
                pattern = pattern.encode("latin-1")
            try:
                mre = self.re_.compile(pattern, self.g_regex_flags)
            except AssertionError:  ##

                return self._build_mres(terminals, max_size // 2)

            mres.append(mre)
            terminals = terminals[max_size:]
        return mres

    def match(self, text, pos):
        for mre in self._mres:
            m = mre.match(text, pos)
            if m:
                return m.group(0), m.lastgroup


def _regexp_has_newline(r: str):
    #--
    return (
        "\n" in r or "\\n" in r or "\\s" in r or "[^" in r or ("(?s" in r and "." in r)
    )


class LexerState:
    #--

    __slots__ = "text", "line_ctr", "last_token"

    text: str
    line_ctr: LineCounter
    last_token: Optional[Token]

    def __init__(
        self,
        text: str,
        line_ctr: Optional[LineCounter] = None,
        last_token: Optional[Token] = None,
    ):
        self.text = text
        self.line_ctr = line_ctr or LineCounter(
            b"\n" if isinstance(text, bytes) else "\n"
        )
        self.last_token = last_token

    def __eq__(self, other):
        if not isinstance(other, LexerState):
            return NotImplemented

        return (
            self.text is other.text
            and self.line_ctr == other.line_ctr
            and self.last_token == other.last_token
        )

    def __copy__(self):
        return type(self)(self.text, copy(self.line_ctr), self.last_token)


class LexerThread:
    #--

    def __init__(self, lexer: "Lexer", lexer_state: LexerState):
        self.lexer = lexer
        self.state = lexer_state

    @classmethod
    def from_text(cls, lexer: "Lexer", text: str) -> "LexerThread":
        return cls(lexer, LexerState(text))

    def lex(self, parser_state):
        return self.lexer.lex(self.state, parser_state)

    def __copy__(self):
        return type(self)(self.lexer, copy(self.state))

    _Token = Token


_Callback = Callable[[Token], Token]


class Lexer(ABC):
    #--

    @abstractmethod
    def lex(self, lexer_state: LexerState, parser_state: Any) -> Iterator[Token]:
        return NotImplemented

    def make_lexer_state(self, text):
        #--
        return LexerState(text)


def _check_regex_collisions(
    terminal_to_regexp: Dict[TerminalDef, str],
    comparator,
    strict_mode,
    max_collisions_to_show=8,
):
    if not comparator:
        comparator = interegular.Comparator.from_regexes(terminal_to_regexp)

    ##

    ##

    max_time = 2 if strict_mode else 0.2

    ##

    if comparator.count_marked_pairs() >= max_collisions_to_show:
        return
    for group in classify(terminal_to_regexp, lambda t: t.priority).values():
        for a, b in comparator.check(group, skip_marked=True):
            assert a.priority == b.priority
            ##

            comparator.mark(a, b)

            ##

            message = f"Collision between Terminals {a.name} and {b.name}. "
            try:
                example = comparator.get_example_overlap(
                    a, b, max_time
                ).format_multiline()
            except ValueError:
                ##

                example = "No example could be found fast enough. However, the collision does still exists"
            if strict_mode:
                raise LexError(f"{message}\n{example}")
            logger.warning(
                "%s The lexer will choose between them arbitrarily.\n%s",
                message,
                example,
            )
            if comparator.count_marked_pairs() >= max_collisions_to_show:
                logger.warning("Found 8 regex collisions, will not check for more.")
                return


class AbstractBasicLexer(Lexer):
    terminals_by_name: Dict[str, TerminalDef]

    @abstractmethod
    def __init__(self, conf: "LexerConf", comparator=None) -> None:
        ...

    @abstractmethod
    def next_token(self, lex_state: LexerState, parser_state: Any = None) -> Token:
        ...

    def lex(self, state: LexerState, parser_state: Any) -> Iterator[Token]:
        with suppress(EOFError):
            while True:
                yield self.next_token(state, parser_state)


class BasicLexer(AbstractBasicLexer):
    terminals: Collection[TerminalDef]
    ignore_types: FrozenSet[str]
    newline_types: FrozenSet[str]
    user_callbacks: Dict[str, _Callback]
    callback: Dict[str, _Callback]
    re: ModuleType

    def __init__(self, conf: "LexerConf", comparator=None) -> None:
        terminals = list(conf.terminals)
        assert all(isinstance(t, TerminalDef) for t in terminals), terminals

        self.re = conf.re_module

        if not conf.skip_validation:
            ##

            terminal_to_regexp = {}
            for t in terminals:
                regexp = t.pattern.to_regexp()
                try:
                    self.re.compile(regexp, conf.g_regex_flags)
                except self.re.error:
                    raise LexError("Cannot compile token %s: %s" % (t.name, t.pattern))

                if t.pattern.min_width == 0:
                    raise LexError(
                        "Lexer does not allow zero-width terminals. (%s: %s)"
                        % (t.name, t.pattern)
                    )
                if t.pattern.type == "re":
                    terminal_to_regexp[t] = regexp

            if not (set(conf.ignore) <= {t.name for t in terminals}):
                raise LexError(
                    "Ignore terminals are not defined: %s"
                    % (set(conf.ignore) - {t.name for t in terminals})
                )

            if has_interegular:
                _check_regex_collisions(terminal_to_regexp, comparator, conf.strict)
            elif conf.strict:
                raise LexError(
                    "interegular must be installed for strict mode. Use `pip install 'lark[interegular]'`."
                )

        ##

        self.newline_types = frozenset(
            t.name for t in terminals if _regexp_has_newline(t.pattern.to_regexp())
        )
        self.ignore_types = frozenset(conf.ignore)

        terminals.sort(
            key=lambda x: (
                -x.priority,
                -x.pattern.max_width,
                -len(x.pattern.value),
                x.name,
            )
        )
        self.terminals = terminals
        self.user_callbacks = conf.callbacks
        self.g_regex_flags = conf.g_regex_flags
        self.use_bytes = conf.use_bytes
        self.terminals_by_name = conf.terminals_by_name

        self._scanner = None

    def _build_scanner(self):
        terminals, self.callback = _create_unless(
            self.terminals, self.g_regex_flags, self.re, self.use_bytes
        )
        assert all(self.callback.values())

        for type_, f in self.user_callbacks.items():
            if type_ in self.callback:
                ##

                self.callback[type_] = CallChain(
                    self.callback[type_], f, lambda t: t.type == type_
                )
            else:
                self.callback[type_] = f

        self._scanner = Scanner(terminals, self.g_regex_flags, self.re, self.use_bytes)

    @property
    def scanner(self):
        if self._scanner is None:
            self._build_scanner()
        return self._scanner

    def match(self, text, pos):
        return self.scanner.match(text, pos)

    def next_token(self, lex_state: LexerState, parser_state: Any = None) -> Token:
        line_ctr = lex_state.line_ctr
        while line_ctr.char_pos < len(lex_state.text):
            res = self.match(lex_state.text, line_ctr.char_pos)
            if not res:
                allowed = self.scanner.allowed_types - self.ignore_types
                if not allowed:
                    allowed = {"<END-OF-FILE>"}
                raise UnexpectedCharacters(
                    lex_state.text,
                    line_ctr.char_pos,
                    line_ctr.line,
                    line_ctr.column,
                    allowed=allowed,
                    token_history=lex_state.last_token and [lex_state.last_token],
                    state=parser_state,
                    terminals_by_name=self.terminals_by_name,
                )

            value, type_ = res

            ignored = type_ in self.ignore_types
            t = None
            if not ignored or type_ in self.callback:
                t = Token(
                    type_, value, line_ctr.char_pos, line_ctr.line, line_ctr.column
                )
            line_ctr.feed(value, type_ in self.newline_types)
            if t is not None:
                t.end_line = line_ctr.line
                t.end_column = line_ctr.column
                t.end_pos = line_ctr.char_pos
                if t.type in self.callback:
                    t = self.callback[t.type](t)
                if not ignored:
                    if not isinstance(t, Token):
                        raise LexError(
                            "Callbacks must return a token (returned %r)" % t
                        )
                    lex_state.last_token = t
                    return t

        ##

        raise EOFError(self)


class ContextualLexer(Lexer):
    lexers: Dict[int, AbstractBasicLexer]
    root_lexer: AbstractBasicLexer

    BasicLexer: Type[AbstractBasicLexer] = BasicLexer

    def __init__(
        self,
        conf: "LexerConf",
        states: Dict[int, Collection[str]],
        always_accept: Collection[str] = (),
    ) -> None:
        terminals = list(conf.terminals)
        terminals_by_name = conf.terminals_by_name

        trad_conf = copy(conf)
        trad_conf.terminals = terminals

        if has_interegular and not conf.skip_validation:
            comparator = interegular.Comparator.from_regexes(
                {t: t.pattern.to_regexp() for t in terminals}
            )
        else:
            comparator = None
        lexer_by_tokens: Dict[FrozenSet[str], AbstractBasicLexer] = {}
        self.lexers = {}
        for state, accepts in states.items():
            key = frozenset(accepts)
            try:
                lexer = lexer_by_tokens[key]
            except KeyError:
                accepts = set(accepts) | set(conf.ignore) | set(always_accept)
                lexer_conf = copy(trad_conf)
                lexer_conf.terminals = [
                    terminals_by_name[n] for n in accepts if n in terminals_by_name
                ]
                lexer = self.BasicLexer(lexer_conf, comparator)
                lexer_by_tokens[key] = lexer

            self.lexers[state] = lexer

        assert trad_conf.terminals is terminals
        trad_conf.skip_validation = True  ##

        self.root_lexer = self.BasicLexer(trad_conf, comparator)

    def lex(
        self, lexer_state: LexerState, parser_state: "ParserState"
    ) -> Iterator[Token]:
        try:
            while True:
                lexer = self.lexers[parser_state.position]
                yield lexer.next_token(lexer_state, parser_state)
        except EOFError:
            pass
        except UnexpectedCharacters as e:
            ##

            ##

            try:
                last_token = (
                    lexer_state.last_token
                )  ##

                token = self.root_lexer.next_token(lexer_state, parser_state)
                raise UnexpectedToken(
                    token,
                    e.allowed,
                    state=parser_state,
                    token_history=[last_token],
                    terminals_by_name=self.root_lexer.terminals_by_name,
                )
            except UnexpectedCharacters:
                raise e  ##





_ParserArgType: "TypeAlias" = 'Literal["earley", "lalr", "cyk", "auto"]'
_LexerArgType: "TypeAlias" = 'Union[Literal["auto", "basic", "contextual", "dynamic", "dynamic_complete"], Type[Lexer]]'
_LexerCallback = Callable[[Token], Token]
ParserCallbacks = Dict[str, Callable]


class LexerConf(Serialize):
    __serialize_fields__ = (
        "terminals",
        "ignore",
        "g_regex_flags",
        "use_bytes",
        "lexer_type",
    )
    __serialize_namespace__ = (TerminalDef,)

    terminals: Collection[TerminalDef]
    re_module: ModuleType
    ignore: Collection[str]
    postlex: "Optional[PostLex]"
    callbacks: Dict[str, _LexerCallback]
    g_regex_flags: int
    skip_validation: bool
    use_bytes: bool
    lexer_type: Optional[_LexerArgType]
    strict: bool

    def __init__(
        self,
        terminals: Collection[TerminalDef],
        re_module: ModuleType,
        ignore: Collection[str] = (),
        postlex: "Optional[PostLex]" = None,
        callbacks: Optional[Dict[str, _LexerCallback]] = None,
        g_regex_flags: int = 0,
        skip_validation: bool = False,
        use_bytes: bool = False,
        strict: bool = False,
    ):
        self.terminals = terminals
        self.terminals_by_name = {t.name: t for t in self.terminals}
        assert len(self.terminals) == len(self.terminals_by_name)
        self.ignore = ignore
        self.postlex = postlex
        self.callbacks = callbacks or {}
        self.g_regex_flags = g_regex_flags
        self.re_module = re_module
        self.skip_validation = skip_validation
        self.use_bytes = use_bytes
        self.strict = strict
        self.lexer_type = None

    def _deserialize(self):
        self.terminals_by_name = {t.name: t for t in self.terminals}

    def __deepcopy__(self, memo=None):
        return type(self)(
            deepcopy(self.terminals, memo),
            self.re_module,
            deepcopy(self.ignore, memo),
            deepcopy(self.postlex, memo),
            deepcopy(self.callbacks, memo),
            deepcopy(self.g_regex_flags, memo),
            deepcopy(self.skip_validation, memo),
            deepcopy(self.use_bytes, memo),
        )


class ParserConf(Serialize):
    __serialize_fields__ = "rules", "start", "parser_type"

    rules: List["Rule"]
    callbacks: ParserCallbacks
    start: List[str]
    parser_type: _ParserArgType

    def __init__(
        self, rules: List["Rule"], callbacks: ParserCallbacks, start: List[str]
    ):
        assert isinstance(start, list)
        self.rules = rules
        self.callbacks = callbacks
        self.start = start



from functools import partial, wraps
from itertools import product


class ExpandSingleChild:
    def __init__(self, node_builder):
        self.node_builder = node_builder

    def __call__(self, children):
        if len(children) == 1:
            return children[0]
        else:
            return self.node_builder(children)


class PropagatePositions:
    def __init__(self, node_builder, node_filter=None):
        self.node_builder = node_builder
        self.node_filter = node_filter

    def __call__(self, children):
        res = self.node_builder(children)

        if isinstance(res, Tree):
            ##

            ##

            ##

            ##


            res_meta = res.meta

            first_meta = self._pp_get_meta(children)
            if first_meta is not None:
                if not hasattr(res_meta, "line"):
                    ##

                    res_meta.line = getattr(
                        first_meta, "container_line", first_meta.line
                    )
                    res_meta.column = getattr(
                        first_meta, "container_column", first_meta.column
                    )
                    res_meta.start_pos = getattr(
                        first_meta, "container_start_pos", first_meta.start_pos
                    )
                    res_meta.empty = False

                res_meta.container_line = getattr(
                    first_meta, "container_line", first_meta.line
                )
                res_meta.container_column = getattr(
                    first_meta, "container_column", first_meta.column
                )
                res_meta.container_start_pos = getattr(
                    first_meta, "container_start_pos", first_meta.start_pos
                )

            last_meta = self._pp_get_meta(reversed(children))
            if last_meta is not None:
                if not hasattr(res_meta, "end_line"):
                    res_meta.end_line = getattr(
                        last_meta, "container_end_line", last_meta.end_line
                    )
                    res_meta.end_column = getattr(
                        last_meta, "container_end_column", last_meta.end_column
                    )
                    res_meta.end_pos = getattr(
                        last_meta, "container_end_pos", last_meta.end_pos
                    )
                    res_meta.empty = False

                res_meta.container_end_line = getattr(
                    last_meta, "container_end_line", last_meta.end_line
                )
                res_meta.container_end_column = getattr(
                    last_meta, "container_end_column", last_meta.end_column
                )
                res_meta.container_end_pos = getattr(
                    last_meta, "container_end_pos", last_meta.end_pos
                )

        return res

    def _pp_get_meta(self, children):
        for c in children:
            if self.node_filter is not None and not self.node_filter(c):
                continue
            if isinstance(c, Tree):
                if not c.meta.empty:
                    return c.meta
            elif isinstance(c, Token):
                return c
            elif hasattr(c, "__lark_meta__"):
                return c.__lark_meta__()


def make_propagate_positions(option):
    if callable(option):
        return partial(PropagatePositions, node_filter=option)
    elif option is True:
        return PropagatePositions
    elif option is False:
        return None

    raise ConfigurationError("Invalid option for propagate_positions: %r" % option)


class ChildFilter:
    def __init__(self, to_include, append_none, node_builder):
        self.node_builder = node_builder
        self.to_include = to_include
        self.append_none = append_none

    def __call__(self, children):
        filtered = []

        for i, to_expand, add_none in self.to_include:
            if add_none:
                filtered += [None] * add_none
            if to_expand:
                filtered += children[i].children
            else:
                filtered.append(children[i])

        if self.append_none:
            filtered += [None] * self.append_none

        return self.node_builder(filtered)


class ChildFilterLALR(ChildFilter):
    #--

    def __call__(self, children):
        filtered = []
        for i, to_expand, add_none in self.to_include:
            if add_none:
                filtered += [None] * add_none
            if to_expand:
                if filtered:
                    filtered += children[i].children
                else:  ##

                    filtered = children[i].children
            else:
                filtered.append(children[i])

        if self.append_none:
            filtered += [None] * self.append_none

        return self.node_builder(filtered)


class ChildFilterLALR_NoPlaceholders(ChildFilter):
    #--

    def __init__(self, to_include, node_builder):
        self.node_builder = node_builder
        self.to_include = to_include

    def __call__(self, children):
        filtered = []
        for i, to_expand in self.to_include:
            if to_expand:
                if filtered:
                    filtered += children[i].children
                else:  ##

                    filtered = children[i].children
            else:
                filtered.append(children[i])
        return self.node_builder(filtered)


def _should_expand(sym):
    return not sym.is_term and sym.name.startswith("_")


def maybe_create_child_filter(
    expansion, keep_all_tokens, ambiguous, _empty_indices: List[bool]
):
    ##

    if _empty_indices:
        assert _empty_indices.count(False) == len(expansion)
        s = "".join(str(int(b)) for b in _empty_indices)
        empty_indices = [len(ones) for ones in s.split("0")]
        assert len(empty_indices) == len(expansion) + 1, (empty_indices, len(expansion))
    else:
        empty_indices = [0] * (len(expansion) + 1)

    to_include = []
    nones_to_add = 0
    for i, sym in enumerate(expansion):
        nones_to_add += empty_indices[i]
        if keep_all_tokens or not (sym.is_term and sym.filter_out):
            to_include.append((i, _should_expand(sym), nones_to_add))
            nones_to_add = 0

    nones_to_add += empty_indices[len(expansion)]

    if (
        _empty_indices
        or len(to_include) < len(expansion)
        or any(to_expand for i, to_expand, _ in to_include)
    ):
        if _empty_indices or ambiguous:
            return partial(
                ChildFilter if ambiguous else ChildFilterLALR, to_include, nones_to_add
            )
        else:
            ##

            return partial(
                ChildFilterLALR_NoPlaceholders, [(i, x) for i, x, _ in to_include]
            )


class AmbiguousExpander:
    #--

    def __init__(self, to_expand, tree_class, node_builder):
        self.node_builder = node_builder
        self.tree_class = tree_class
        self.to_expand = to_expand

    def __call__(self, children):
        def _is_ambig_tree(t):
            return hasattr(t, "data") and t.data == "_ambig"

        ##

        ##

        ##

        ##

        ambiguous = []
        for i, child in enumerate(children):
            if _is_ambig_tree(child):
                if i in self.to_expand:
                    ambiguous.append(i)

                child.expand_kids_by_data("_ambig")

        if not ambiguous:
            return self.node_builder(children)

        expand = [
            child.children if i in ambiguous else (child,)
            for i, child in enumerate(children)
        ]
        return self.tree_class(
            "_ambig", [self.node_builder(list(f)) for f in product(*expand)]
        )


def maybe_create_ambiguous_expander(tree_class, expansion, keep_all_tokens):
    to_expand = [
        i
        for i, sym in enumerate(expansion)
        if keep_all_tokens
        or ((not (sym.is_term and sym.filter_out)) and _should_expand(sym))
    ]
    if to_expand:
        return partial(AmbiguousExpander, to_expand, tree_class)


class AmbiguousIntermediateExpander:
    #--

    def __init__(self, tree_class, node_builder):
        self.node_builder = node_builder
        self.tree_class = tree_class

    def __call__(self, children):
        def _is_iambig_tree(child):
            return hasattr(child, "data") and child.data == "_iambig"

        def _collapse_iambig(children):
            #--

            ##

            ##

            if children and _is_iambig_tree(children[0]):
                iambig_node = children[0]
                result = []
                for grandchild in iambig_node.children:
                    collapsed = _collapse_iambig(grandchild.children)
                    if collapsed:
                        for child in collapsed:
                            child.children += children[1:]
                        result += collapsed
                    else:
                        new_tree = self.tree_class(
                            "_inter", grandchild.children + children[1:]
                        )
                        result.append(new_tree)
                return result

        collapsed = _collapse_iambig(children)
        if collapsed:
            processed_nodes = [self.node_builder(c.children) for c in collapsed]
            return self.tree_class("_ambig", processed_nodes)

        return self.node_builder(children)


def inplace_transformer(func):
    @wraps(func)
    def f(children):
        ##

        tree = Tree(func.__name__, children)
        return func(tree)

    return f


def apply_visit_wrapper(func, name, wrapper):
    if wrapper is _vargs_meta or wrapper is _vargs_meta_inline:
        raise NotImplementedError("Meta args not supported for internal transformer")

    @wraps(func)
    def f(children):
        return wrapper(func, name, children, None)

    return f


class ParseTreeBuilder:
    def __init__(
        self,
        rules,
        tree_class,
        propagate_positions=False,
        ambiguous=False,
        maybe_placeholders=False,
    ):
        self.tree_class = tree_class
        self.propagate_positions = propagate_positions
        self.ambiguous = ambiguous
        self.maybe_placeholders = maybe_placeholders

        self.rule_builders = list(self._init_builders(rules))

    def _init_builders(self, rules):
        propagate_positions = make_propagate_positions(self.propagate_positions)

        for rule in rules:
            options = rule.options
            keep_all_tokens = options.keep_all_tokens
            expand_single_child = options.expand1

            wrapper_chain = list(
                filter(
                    None,
                    [
                        (expand_single_child and not rule.alias) and ExpandSingleChild,
                        maybe_create_child_filter(
                            rule.expansion,
                            keep_all_tokens,
                            self.ambiguous,
                            options.empty_indices if self.maybe_placeholders else None,
                        ),
                        propagate_positions,
                        self.ambiguous
                        and maybe_create_ambiguous_expander(
                            self.tree_class, rule.expansion, keep_all_tokens
                        ),
                        self.ambiguous
                        and partial(AmbiguousIntermediateExpander, self.tree_class),
                    ],
                )
            )

            yield rule, wrapper_chain

    def create_callback(self, transformer=None):
        callbacks = {}

        default_handler = getattr(transformer, "__default__", None)
        if default_handler:

            def default_callback(data, children):
                return default_handler(data, children, None)

        else:
            default_callback = self.tree_class

        for rule, wrapper_chain in self.rule_builders:
            user_callback_name = (
                rule.alias or rule.options.template_source or rule.origin.name
            )
            try:
                f = getattr(transformer, user_callback_name)
                wrapper = getattr(f, "visit_wrapper", None)
                if wrapper is not None:
                    f = apply_visit_wrapper(f, user_callback_name, wrapper)
                elif isinstance(transformer, Transformer_InPlace):
                    f = inplace_transformer(f)
            except AttributeError:
                f = partial(default_callback, user_callback_name)

            for w in wrapper_chain:
                f = w(f)

            if rule in callbacks:
                raise GrammarError("Rule '%s' already exists" % (rule,))

            callbacks[rule] = f

        return callbacks





class Action:
    def __init__(self, name):
        self.name = name

    def __str__(self):
        return self.name

    def __repr__(self):
        return str(self)


Shift = Action("Shift")
Reduce = Action("Reduce")

StateT = TypeVar("StateT")


class ParseTableBase(Generic[StateT]):
    states: Dict[StateT, Dict[str, Tuple]]
    start_states: Dict[str, StateT]
    end_states: Dict[str, StateT]

    def __init__(self, states, start_states, end_states):
        self.states = states
        self.start_states = start_states
        self.end_states = end_states

    def serialize(self, memo):
        tokens = Enumerator()

        states = {
            state: {
                tokens.get(token): (
                    (1, arg.serialize(memo)) if action is Reduce else (0, arg)
                )
                for token, (action, arg) in actions.items()
            }
            for state, actions in self.states.items()
        }

        return {
            "tokens": tokens.reversed(),
            "states": states,
            "start_states": self.start_states,
            "end_states": self.end_states,
        }

    @classmethod
    def deserialize(cls, data, memo):
        tokens = data["tokens"]
        states = {
            state: {
                tokens[token]: (
                    (Reduce, Rule.deserialize(arg, memo))
                    if action == 1
                    else (Shift, arg)
                )
                for token, (action, arg) in actions.items()
            }
            for state, actions in data["states"].items()
        }
        return cls(states, data["start_states"], data["end_states"])


class ParseTable(ParseTableBase["State"]):
    #--

    pass


class IntParseTable(ParseTableBase[int]):
    #--

    @classmethod
    def from_ParseTable(cls, parse_table: ParseTable):
        enum = list(parse_table.states)
        state_to_idx: Dict["State", int] = {s: i for i, s in enumerate(enum)}
        int_states = {}

        for s, la in parse_table.states.items():
            la = {
                k: (v[0], state_to_idx[v[1]]) if v[0] is Shift else v
                for k, v in la.items()
            }
            int_states[state_to_idx[s]] = la

        start_states = {
            start: state_to_idx[s] for start, s in parse_table.start_states.items()
        }
        end_states = {
            start: state_to_idx[s] for start, s in parse_table.end_states.items()
        }
        return cls(int_states, start_states, end_states)





class ParseConf(Generic[StateT]):
    __slots__ = (
        "parse_table",
        "callbacks",
        "start",
        "start_state",
        "end_state",
        "states",
    )

    parse_table: ParseTableBase[StateT]
    callbacks: ParserCallbacks
    start: str

    start_state: StateT
    end_state: StateT
    states: Dict[StateT, Dict[str, tuple]]

    def __init__(
        self,
        parse_table: ParseTableBase[StateT],
        callbacks: ParserCallbacks,
        start: str,
    ):
        self.parse_table = parse_table

        self.start_state = self.parse_table.start_states[start]
        self.end_state = self.parse_table.end_states[start]
        self.states = self.parse_table.states

        self.callbacks = callbacks
        self.start = start


class ParserState(Generic[StateT]):
    __slots__ = "parse_conf", "lexer", "state_stack", "value_stack"

    parse_conf: ParseConf[StateT]
    lexer: LexerThread
    state_stack: List[StateT]
    value_stack: list

    def __init__(
        self,
        parse_conf: ParseConf[StateT],
        lexer: LexerThread,
        state_stack=None,
        value_stack=None,
    ):
        self.parse_conf = parse_conf
        self.lexer = lexer
        self.state_stack = state_stack or [self.parse_conf.start_state]
        self.value_stack = value_stack or []

    @property
    def position(self) -> StateT:
        return self.state_stack[-1]

    ##

    def __eq__(self, other) -> bool:
        if not isinstance(other, ParserState):
            return NotImplemented
        return (
            len(self.state_stack) == len(other.state_stack)
            and self.position == other.position
        )

    def __copy__(self):
        return type(self)(
            self.parse_conf,
            self.lexer,  ##

            copy(self.state_stack),
            deepcopy(self.value_stack),
        )

    def copy(self) -> "ParserState[StateT]":
        return copy(self)

    def feed_token(self, token: Token, is_end=False) -> Any:
        state_stack = self.state_stack
        value_stack = self.value_stack
        states = self.parse_conf.states
        end_state = self.parse_conf.end_state
        callbacks = self.parse_conf.callbacks

        while True:
            state = state_stack[-1]
            try:
                action, arg = states[state][token.type]
            except KeyError:
                expected = {s for s in states[state].keys() if s.isupper()}
                raise UnexpectedToken(
                    token, expected, state=self, interactive_parser=None
                )

            assert arg != end_state

            if action is Shift:
                ##

                assert not is_end
                state_stack.append(arg)
                value_stack.append(
                    token
                    if token.type not in callbacks
                    else callbacks[token.type](token)
                )
                return
            else:
                ##

                rule = arg
                size = len(rule.expansion)
                if size:
                    s = value_stack[-size:]
                    del state_stack[-size:]
                    del value_stack[-size:]
                else:
                    s = []

                value = callbacks[rule](s) if callbacks else s

                _action, new_state = states[state_stack[-1]][rule.origin.name]
                assert _action is Shift
                state_stack.append(new_state)
                value_stack.append(value)

                if is_end and state_stack[-1] == end_state:
                    return value_stack[-1]





class LALR_Parser(Serialize):
    def __init__(
        self, parser_conf: ParserConf, debug: bool = False, strict: bool = False
    ):
        analysis = LALR_Analyzer(parser_conf, debug=debug, strict=strict)
        analysis.compute_lalr()
        callbacks = parser_conf.callbacks

        self._parse_table = analysis.parse_table
        self.parser_conf = parser_conf
        self.parser = _Parser(analysis.parse_table, callbacks, debug)

    @classmethod
    def deserialize(cls, data, memo, callbacks, debug=False):
        inst = cls.__new__(cls)
        inst._parse_table = IntParseTable.deserialize(data, memo)
        inst.parser = _Parser(inst._parse_table, callbacks, debug)
        return inst

    def serialize(self, memo: Any = None) -> Dict[str, Any]:
        return self._parse_table.serialize(memo)

    def parse_interactive(self, lexer: LexerThread, start: str):
        return self.parser.parse(lexer, start, start_interactive=True)

    def parse(self, lexer, start, on_error=None):
        try:
            return self.parser.parse(lexer, start)
        except UnexpectedInput as e:
            if on_error is None:
                raise

            while True:
                if isinstance(e, UnexpectedCharacters):
                    s = e.interactive_parser.lexer_thread.state
                    p = s.line_ctr.char_pos

                if not on_error(e):
                    raise e

                if isinstance(e, UnexpectedCharacters):
                    ##

                    if p == s.line_ctr.char_pos:
                        s.line_ctr.feed(s.text[p : p + 1])

                try:
                    return e.interactive_parser.resume_parse()
                except UnexpectedToken as e2:
                    if (
                        isinstance(e, UnexpectedToken)
                        and e.token.type == e2.token.type == "$END"
                        and e.interactive_parser == e2.interactive_parser
                    ):
                        ##

                        raise e2
                    e = e2
                except UnexpectedCharacters as e2:
                    e = e2


class _Parser:
    parse_table: ParseTableBase
    callbacks: ParserCallbacks
    debug: bool

    def __init__(
        self,
        parse_table: ParseTableBase,
        callbacks: ParserCallbacks,
        debug: bool = False,
    ):
        self.parse_table = parse_table
        self.callbacks = callbacks
        self.debug = debug

    def parse(
        self,
        lexer: LexerThread,
        start: str,
        value_stack=None,
        state_stack=None,
        start_interactive=False,
    ):
        parse_conf = ParseConf(self.parse_table, self.callbacks, start)
        parser_state = ParserState(parse_conf, lexer, state_stack, value_stack)
        if start_interactive:
            return InteractiveParser(self, parser_state, parser_state.lexer)
        return self.parse_from_state(parser_state)

    def parse_from_state(self, state: ParserState, last_token: Optional[Token] = None):
        #--
        try:
            token = last_token
            for token in state.lexer.lex(state):
                assert token is not None
                state.feed_token(token)

            end_token = (
                Token.new_borrow_pos("$END", "", token)
                if token
                else Token("$END", "", 0, 1, 1)
            )
            return state.feed_token(end_token, True)
        except UnexpectedInput as e:
            try:
                e.interactive_parser = InteractiveParser(self, state, state.lexer)
            except NameError:
                pass
            raise e
        except Exception as e:
            if self.debug:
                print("")
                print("STATE STACK DUMP")
                print("----------------")
                for i, s in enumerate(state.state_stack):
                    print("%d)" % i, s)
                print("")

            raise





class InteractiveParser:
    #--

    def __init__(self, parser, parser_state, lexer_thread: LexerThread):
        self.parser = parser
        self.parser_state = parser_state
        self.lexer_thread = lexer_thread
        self.result = None

    @property
    def lexer_state(self) -> LexerThread:
        warnings.warn(
            "lexer_state will be removed in subsequent releases. Use lexer_thread instead.",
            DeprecationWarning,
        )
        return self.lexer_thread

    def feed_token(self, token: Token):
        #--
        return self.parser_state.feed_token(token, token.type == "$END")

    def iter_parse(self) -> Iterator[Token]:
        #--
        for token in self.lexer_thread.lex(self.parser_state):
            yield token
            self.result = self.feed_token(token)

    def exhaust_lexer(self) -> List[Token]:
        #--
        return list(self.iter_parse())

    def feed_eof(self, last_token=None):
        #--
        eof = (
            Token.new_borrow_pos("$END", "", last_token)
            if last_token is not None
            else self.lexer_thread._Token("$END", "", 0, 1, 1)
        )
        return self.feed_token(eof)

    def __copy__(self):
        #--
        return type(self)(
            self.parser,
            copy(self.parser_state),
            copy(self.lexer_thread),
        )

    def copy(self):
        return copy(self)

    def __eq__(self, other):
        if not isinstance(other, InteractiveParser):
            return False

        return (
            self.parser_state == other.parser_state
            and self.lexer_thread == other.lexer_thread
        )

    def as_immutable(self):
        #--
        p = copy(self)
        return ImmutableInteractiveParser(p.parser, p.parser_state, p.lexer_thread)

    def pretty(self):
        #--
        out = ["Parser choices:"]
        for k, v in self.choices().items():
            out.append("\t- %s -> %r" % (k, v))
        out.append("stack size: %s" % len(self.parser_state.state_stack))
        return "\n".join(out)

    def choices(self):
        #--
        return self.parser_state.parse_conf.parse_table.states[
            self.parser_state.position
        ]

    def accepts(self):
        #--
        accepts = set()
        conf_no_callbacks = copy(self.parser_state.parse_conf)
        ##

        ##

        conf_no_callbacks.callbacks = {}
        for t in self.choices():
            if t.isupper():  ##

                new_cursor = copy(self)
                new_cursor.parser_state.parse_conf = conf_no_callbacks
                try:
                    new_cursor.feed_token(self.lexer_thread._Token(t, ""))
                except UnexpectedToken:
                    pass
                else:
                    accepts.add(t)
        return accepts

    def resume_parse(self):
        #--
        return self.parser.parse_from_state(
            self.parser_state, last_token=self.lexer_thread.state.last_token
        )


class ImmutableInteractiveParser(InteractiveParser):
    #--

    result = None

    def __hash__(self):
        return hash((self.parser_state, self.lexer_thread))

    def feed_token(self, token):
        c = copy(self)
        c.result = InteractiveParser.feed_token(c, token)
        return c

    def exhaust_lexer(self):
        #--
        cursor = self.as_mutable()
        cursor.exhaust_lexer()
        return cursor.as_immutable()

    def as_mutable(self):
        #--
        p = copy(self)
        return InteractiveParser(p.parser, p.parser_state, p.lexer_thread)





def _wrap_lexer(lexer_class):
    future_interface = getattr(lexer_class, "__future_interface__", False)
    if future_interface:
        return lexer_class
    else:

        class CustomLexerWrapper(Lexer):
            def __init__(self, lexer_conf):
                self.lexer = lexer_class(lexer_conf)

            def lex(self, lexer_state, parser_state):
                return self.lexer.lex(lexer_state.text)

        return CustomLexerWrapper


def _deserialize_parsing_frontend(data, memo, lexer_conf, callbacks, options):
    parser_conf = ParserConf.deserialize(data["parser_conf"], memo)
    cls = (options and options._plugins.get("LALR_Parser")) or LALR_Parser
    parser = cls.deserialize(data["parser"], memo, callbacks, options.debug)
    parser_conf.callbacks = callbacks
    return ParsingFrontend(lexer_conf, parser_conf, options, parser=parser)


_parser_creators: "Dict[str, Callable[[LexerConf, Any, Any], Any]]" = {}


class ParsingFrontend(Serialize):
    __serialize_fields__ = "lexer_conf", "parser_conf", "parser"

    lexer_conf: LexerConf
    parser_conf: ParserConf
    options: Any

    def __init__(
        self, lexer_conf: LexerConf, parser_conf: ParserConf, options, parser=None
    ):
        self.parser_conf = parser_conf
        self.lexer_conf = lexer_conf
        self.options = options

        ##

        if parser:  ##

            self.parser = parser
        else:
            create_parser = _parser_creators.get(parser_conf.parser_type)
            assert (
                create_parser is not None
            ), "{} is not supported in standalone mode".format(parser_conf.parser_type)
            self.parser = create_parser(lexer_conf, parser_conf, options)

        ##

        lexer_type = lexer_conf.lexer_type
        self.skip_lexer = False
        if lexer_type in ("dynamic", "dynamic_complete"):
            assert lexer_conf.postlex is None
            self.skip_lexer = True
            return

        if isinstance(lexer_type, type):
            assert issubclass(lexer_type, Lexer)
            self.lexer = _wrap_lexer(lexer_type)(lexer_conf)
        elif isinstance(lexer_type, str):
            create_lexer = {
                "basic": create_basic_lexer,
                "contextual": create_contextual_lexer,
            }[lexer_type]
            self.lexer = create_lexer(
                lexer_conf, self.parser, lexer_conf.postlex, options
            )
        else:
            raise TypeError("Bad value for lexer_type: {lexer_type}")

        if lexer_conf.postlex:
            self.lexer = PostLexConnector(self.lexer, lexer_conf.postlex)

    def _verify_start(self, start=None):
        if start is None:
            start_decls = self.parser_conf.start
            if len(start_decls) > 1:
                raise ConfigurationError(
                    "Lark initialized with more than 1 possible start rule. Must specify which start rule to parse",
                    start_decls,
                )
            (start,) = start_decls
        elif start not in self.parser_conf.start:
            raise ConfigurationError(
                "Unknown start rule %s. Must be one of %r"
                % (start, self.parser_conf.start)
            )
        return start

    def _make_lexer_thread(self, text: str) -> Union[str, LexerThread]:
        cls = (self.options and self.options._plugins.get("LexerThread")) or LexerThread
        return text if self.skip_lexer else cls.from_text(self.lexer, text)

    def parse(self, text: str, start=None, on_error=None):
        chosen_start = self._verify_start(start)
        kw = {} if on_error is None else {"on_error": on_error}
        stream = self._make_lexer_thread(text)
        return self.parser.parse(stream, chosen_start, **kw)

    def parse_interactive(self, text: Optional[str] = None, start=None):
        ##

        ##

        chosen_start = self._verify_start(start)
        if self.parser_conf.parser_type != "lalr":
            raise ConfigurationError(
                "parse_interactive() currently only works with parser='lalr' "
            )
        stream = self._make_lexer_thread(text)  ##

        return self.parser.parse_interactive(stream, chosen_start)


def _validate_frontend_args(parser, lexer) -> None:
    assert_config(parser, ("lalr", "earley", "cyk"))
    if not isinstance(lexer, type):  ##

        expected = {
            "lalr": ("basic", "contextual"),
            "earley": ("basic", "dynamic", "dynamic_complete"),
            "cyk": ("basic",),
        }[parser]
        assert_config(
            lexer,
            expected,
            "Parser %r does not support lexer %%r, expected one of %%s" % parser,
        )


def _get_lexer_callbacks(transformer, terminals):
    result = {}
    for terminal in terminals:
        callback = getattr(transformer, terminal.name, None)
        if callback is not None:
            result[terminal.name] = callback
    return result


class PostLexConnector:
    def __init__(self, lexer, postlexer):
        self.lexer = lexer
        self.postlexer = postlexer

    def lex(self, lexer_state, parser_state):
        i = self.lexer.lex(lexer_state, parser_state)
        return self.postlexer.process(i)


def create_basic_lexer(lexer_conf, parser, postlex, options) -> BasicLexer:
    cls = (options and options._plugins.get("BasicLexer")) or BasicLexer
    return cls(lexer_conf)


def create_contextual_lexer(
    lexer_conf: LexerConf, parser, postlex, options
) -> ContextualLexer:
    cls = (options and options._plugins.get("ContextualLexer")) or ContextualLexer
    parse_table: ParseTableBase[int] = parser._parse_table
    states: Dict[int, Collection[str]] = {
        idx: list(t.keys()) for idx, t in parse_table.states.items()
    }
    always_accept: Collection[str] = postlex.always_accept if postlex else ()
    return cls(lexer_conf, states, always_accept=always_accept)


def create_lalr_parser(
    lexer_conf: LexerConf, parser_conf: ParserConf, options=None
) -> LALR_Parser:
    debug = options.debug if options else False
    strict = options.strict if options else False
    cls = (options and options._plugins.get("LALR_Parser")) or LALR_Parser
    return cls(parser_conf, debug=debug, strict=strict)


_parser_creators["lalr"] = create_lalr_parser




class PostLex(ABC):
    @abstractmethod
    def process(self, stream: Iterator[Token]) -> Iterator[Token]:
        return stream

    always_accept: Iterable[str] = ()


class LarkOptions(Serialize):
    #--

    start: List[str]
    debug: bool
    strict: bool
    transformer: "Optional[Transformer]"
    propagate_positions: Union[bool, str]
    maybe_placeholders: bool
    cache: Union[bool, str]
    regex: bool
    g_regex_flags: int
    keep_all_tokens: bool
    tree_class: Optional[Callable[[str, List], Any]]
    parser: _ParserArgType
    lexer: _LexerArgType
    ambiguity: 'Literal["auto", "resolve", "explicit", "forest"]'
    postlex: Optional[PostLex]
    priority: 'Optional[Literal["auto", "normal", "invert"]]'
    lexer_callbacks: Dict[str, Callable[[Token], Token]]
    use_bytes: bool
    ordered_sets: bool
    edit_terminals: Optional[Callable[[TerminalDef], TerminalDef]]
    import_paths: "List[Union[str, Callable[[Union[None, str, PackageResource], str], Tuple[str, str]]]]"
    source_path: Optional[str]

    OPTIONS_DOC = r"""
    **===  General Options  ===**

    start
            The start symbol. Either a string, or a list of strings for multiple possible starts (Default: "start")
    debug
            Display debug information and extra warnings. Use only when debugging (Default: ``False``)
            When used with Earley, it generates a forest graph as "sppf.png", if 'dot' is installed.
    strict
            Throw an exception on any potential ambiguity, including shift/reduce conflicts, and regex collisions.
    transformer
            Applies the transformer to every parse tree (equivalent to applying it after the parse, but faster)
    propagate_positions
            Propagates positional attributes into the 'meta' attribute of all tree branches.
            Sets attributes: (line, column, end_line, end_column, start_pos, end_pos,
                              container_line, container_column, container_end_line, container_end_column)
            Accepts ``False``, ``True``, or a callable, which will filter which nodes to ignore when propagating.
    maybe_placeholders
            When ``True``, the ``[]`` operator returns ``None`` when not matched.
            When ``False``,  ``[]`` behaves like the ``?`` operator, and returns no value at all.
            (default= ``True``)
    cache
            Cache the results of the Lark grammar analysis, for x2 to x3 faster loading. LALR only for now.

            - When ``False``, does nothing (default)
            - When ``True``, caches to a temporary file in the local directory
            - When given a string, caches to the path pointed by the string
    regex
            When True, uses the ``regex`` module instead of the stdlib ``re``.
    g_regex_flags
            Flags that are applied to all terminals (both regex and strings)
    keep_all_tokens
            Prevent the tree builder from automagically removing "punctuation" tokens (Default: ``False``)
    tree_class
            Lark will produce trees comprised of instances of this class instead of the default ``lark.Tree``.

    **=== Algorithm Options ===**

    parser
            Decides which parser engine to use. Accepts "earley" or "lalr". (Default: "earley").
            (there is also a "cyk" option for legacy)
    lexer
            Decides whether or not to use a lexer stage

            - "auto" (default): Choose for me based on the parser
            - "basic": Use a basic lexer
            - "contextual": Stronger lexer (only works with parser="lalr")
            - "dynamic": Flexible and powerful (only with parser="earley")
            - "dynamic_complete": Same as dynamic, but tries *every* variation of tokenizing possible.
    ambiguity
            Decides how to handle ambiguity in the parse. Only relevant if parser="earley"

            - "resolve": The parser will automatically choose the simplest derivation
              (it chooses consistently: greedy for tokens, non-greedy for rules)
            - "explicit": The parser will return all derivations wrapped in "_ambig" tree nodes (i.e. a forest).
            - "forest": The parser will return the root of the shared packed parse forest.

    **=== Misc. / Domain Specific Options ===**

    postlex
            Lexer post-processing (Default: ``None``) Only works with the basic and contextual lexers.
    priority
            How priorities should be evaluated - "auto", ``None``, "normal", "invert" (Default: "auto")
    lexer_callbacks
            Dictionary of callbacks for the lexer. May alter tokens during lexing. Use with caution.
    use_bytes
            Accept an input of type ``bytes`` instead of ``str``.
    ordered_sets
            Should Earley use ordered-sets to achieve stable output (~10% slower than regular sets. Default: True)
    edit_terminals
            A callback for editing the terminals before parse.
    import_paths
            A List of either paths or loader functions to specify from where grammars are imported
    source_path
            Override the source of from where the grammar was loaded. Useful for relative imports and unconventional grammar loading
    **=== End of Options ===**
    """
    if __doc__:
        __doc__ += OPTIONS_DOC

    ##

    ##

    ##

    ##

    ##

    ##

    _defaults: Dict[str, Any] = {
        "debug": False,
        "strict": False,
        "keep_all_tokens": False,
        "tree_class": None,
        "cache": False,
        "postlex": None,
        "parser": "earley",
        "lexer": "auto",
        "transformer": None,
        "start": "start",
        "priority": "auto",
        "ambiguity": "auto",
        "regex": False,
        "propagate_positions": False,
        "lexer_callbacks": {},
        "maybe_placeholders": True,
        "edit_terminals": None,
        "g_regex_flags": 0,
        "use_bytes": False,
        "ordered_sets": True,
        "import_paths": [],
        "source_path": None,
        "_plugins": {},
    }

    def __init__(self, options_dict: Dict[str, Any]) -> None:
        o = dict(options_dict)

        options = {}
        for name, default in self._defaults.items():
            if name in o:
                value = o.pop(name)
                if isinstance(default, bool) and name not in (
                    "cache",
                    "use_bytes",
                    "propagate_positions",
                ):
                    value = bool(value)
            else:
                value = default

            options[name] = value

        if isinstance(options["start"], str):
            options["start"] = [options["start"]]

        self.__dict__["options"] = options

        assert_config(self.parser, ("earley", "lalr", "cyk", None))

        if self.parser == "earley" and self.transformer:
            raise ConfigurationError(
                "Cannot specify an embedded transformer when using the Earley algorithm. "
                "Please use your transformer on the resulting parse tree, or use a different algorithm (i.e. LALR)"
            )

        if o:
            raise ConfigurationError("Unknown options: %s" % o.keys())

    def __getattr__(self, name: str) -> Any:
        try:
            return self.__dict__["options"][name]
        except KeyError as e:
            raise AttributeError(e)

    def __setattr__(self, name: str, value: str) -> None:
        assert_config(
            name, self.options.keys(), "%r isn't a valid option. Expected one of: %s"
        )
        self.options[name] = value

    def serialize(self, memo=None) -> Dict[str, Any]:
        return self.options

    @classmethod
    def deserialize(
        cls, data: Dict[str, Any], memo: Dict[int, Union[TerminalDef, Rule]]
    ) -> "LarkOptions":
        return cls(data)


##

##

_LOAD_ALLOWED_OPTIONS = {
    "postlex",
    "transformer",
    "lexer_callbacks",
    "use_bytes",
    "debug",
    "g_regex_flags",
    "regex",
    "propagate_positions",
    "tree_class",
    "_plugins",
}

_VALID_PRIORITY_OPTIONS = ("auto", "normal", "invert", None)
_VALID_AMBIGUITY_OPTIONS = ("auto", "resolve", "explicit", "forest")


_T = TypeVar("_T", bound="Lark")


class Lark(Serialize):
    #--

    source_path: str
    source_grammar: str
    grammar: "Grammar"
    options: LarkOptions
    lexer: Lexer
    parser: "ParsingFrontend"
    terminals: Collection[TerminalDef]

    def __init__(self, grammar: "Union[Grammar, str, IO[str]]", **options) -> None:
        self.options = LarkOptions(options)
        re_module: types.ModuleType

        ##

        use_regex = self.options.regex
        if use_regex:
            if _has_regex:
                re_module = regex
            else:
                raise ImportError(
                    "`regex` module must be installed if calling `Lark(regex=True)`."
                )
        else:
            re_module = re

        ##

        if self.options.source_path is None:
            try:
                self.source_path = grammar.name  ##

            except AttributeError:
                self.source_path = "<string>"
        else:
            self.source_path = self.options.source_path

        ##

        try:
            read = grammar.read  ##

        except AttributeError:
            pass
        else:
            grammar = read()

        cache_fn = None
        cache_sha256 = None
        if isinstance(grammar, str):
            self.source_grammar = grammar
            if self.options.use_bytes:
                if not isascii(grammar):
                    raise ConfigurationError(
                        "Grammar must be ascii only, when use_bytes=True"
                    )

            if self.options.cache:
                if self.options.parser != "lalr":
                    raise ConfigurationError(
                        "cache only works with parser='lalr' for now"
                    )

                unhashable = (
                    "transformer",
                    "postlex",
                    "lexer_callbacks",
                    "edit_terminals",
                    "_plugins",
                )
                options_str = "".join(
                    k + str(v) for k, v in options.items() if k not in unhashable
                )
                from . import __version__

                s = grammar + options_str + __version__ + str(sys.version_info[:2])
                cache_sha256 = sha256_digest(s)

                if isinstance(self.options.cache, str):
                    cache_fn = self.options.cache
                else:
                    if self.options.cache is not True:
                        raise ConfigurationError("cache argument must be bool or str")

                    try:
                        username = getpass.getuser()
                    except Exception:
                        ##

                        ##

                        ##

                        username = "unknown"

                    cache_fn = (
                        tempfile.gettempdir()
                        + "/.lark_cache_%s_%s_%s_%s.tmp"
                        % (username, cache_sha256, *sys.version_info[:2])
                    )

                old_options = self.options
                try:
                    with FS.open(cache_fn, "rb") as f:
                        logger.debug("Loading grammar from cache: %s", cache_fn)
                        ##

                        for name in set(options) - _LOAD_ALLOWED_OPTIONS:
                            del options[name]
                        file_sha256 = f.readline().rstrip(b"\n")
                        cached_used_files = pickle.load(f)
                        if file_sha256 == cache_sha256.encode(
                            "utf8"
                        ) and verify_used_files(cached_used_files):
                            cached_parser_data = pickle.load(f)
                            self._load(cached_parser_data, **options)
                            return
                except FileNotFoundError:
                    ##

                    pass
                except (
                    Exception
                ):  ##

                    logger.exception(
                        "Failed to load Lark from cache: %r. We will try to carry on.",
                        cache_fn,
                    )

                    ##

                    ##

                    self.options = old_options

            ##

            self.grammar, used_files = load_grammar(
                grammar,
                self.source_path,
                self.options.import_paths,
                self.options.keep_all_tokens,
            )
        else:
            assert isinstance(grammar, Grammar)
            self.grammar = grammar

        if self.options.lexer == "auto":
            if self.options.parser == "lalr":
                self.options.lexer = "contextual"
            elif self.options.parser == "earley":
                if self.options.postlex is not None:
                    logger.info(
                        "postlex can't be used with the dynamic lexer, so we use 'basic' instead. "
                        "Consider using lalr with contextual instead of earley"
                    )
                    self.options.lexer = "basic"
                else:
                    self.options.lexer = "dynamic"
            elif self.options.parser == "cyk":
                self.options.lexer = "basic"
            else:
                assert False, self.options.parser
        lexer = self.options.lexer
        if isinstance(lexer, type):
            assert issubclass(
                lexer, Lexer
            )  ##

        else:
            assert_config(lexer, ("basic", "contextual", "dynamic", "dynamic_complete"))
            if self.options.postlex is not None and "dynamic" in lexer:
                raise ConfigurationError(
                    "Can't use postlex with a dynamic lexer. Use basic or contextual instead"
                )

        if self.options.ambiguity == "auto":
            if self.options.parser == "earley":
                self.options.ambiguity = "resolve"
        else:
            assert_config(
                self.options.parser,
                ("earley", "cyk"),
                "%r doesn't support disambiguation. Use one of these parsers instead: %s",
            )

        if self.options.priority == "auto":
            self.options.priority = "normal"

        if self.options.priority not in _VALID_PRIORITY_OPTIONS:
            raise ConfigurationError(
                "invalid priority option: %r. Must be one of %r"
                % (self.options.priority, _VALID_PRIORITY_OPTIONS)
            )
        if self.options.ambiguity not in _VALID_AMBIGUITY_OPTIONS:
            raise ConfigurationError(
                "invalid ambiguity option: %r. Must be one of %r"
                % (self.options.ambiguity, _VALID_AMBIGUITY_OPTIONS)
            )

        if self.options.parser is None:
            terminals_to_keep = "*"
        elif self.options.postlex is not None:
            terminals_to_keep = set(self.options.postlex.always_accept)
        else:
            terminals_to_keep = set()

        ##

        self.terminals, self.rules, self.ignore_tokens = self.grammar.compile(
            self.options.start, terminals_to_keep
        )

        if self.options.edit_terminals:
            for t in self.terminals:
                self.options.edit_terminals(t)

        self._terminals_dict = {t.name: t for t in self.terminals}

        ##

        if self.options.priority == "invert":
            for rule in self.rules:
                if rule.options.priority is not None:
                    rule.options.priority = -rule.options.priority
            for term in self.terminals:
                term.priority = -term.priority
        ##

        ##

        ##

        elif self.options.priority is None:
            for rule in self.rules:
                if rule.options.priority is not None:
                    rule.options.priority = None
            for term in self.terminals:
                term.priority = 0

        ##

        self.lexer_conf = LexerConf(
            self.terminals,
            re_module,
            self.ignore_tokens,
            self.options.postlex,
            self.options.lexer_callbacks,
            self.options.g_regex_flags,
            use_bytes=self.options.use_bytes,
            strict=self.options.strict,
        )

        if self.options.parser:
            self.parser = self._build_parser()
        elif lexer:
            self.lexer = self._build_lexer()

        if cache_fn:
            logger.debug("Saving grammar to cache: %s", cache_fn)
            try:
                with FS.open(cache_fn, "wb") as f:
                    assert cache_sha256 is not None
                    f.write(cache_sha256.encode("utf8") + b"\n")
                    pickle.dump(used_files, f)
                    self.save(f, _LOAD_ALLOWED_OPTIONS)
            except IOError as e:
                logger.exception("Failed to save Lark to cache: %r.", cache_fn, e)

    if __doc__:
        __doc__ += "\n\n" + LarkOptions.OPTIONS_DOC

    __serialize_fields__ = "parser", "rules", "options"

    def _build_lexer(self, dont_ignore: bool = False) -> BasicLexer:
        lexer_conf = self.lexer_conf
        if dont_ignore:
            from copy import copy

            lexer_conf = copy(lexer_conf)
            lexer_conf.ignore = ()
        return BasicLexer(lexer_conf)

    def _prepare_callbacks(self) -> None:
        self._callbacks = {}
        ##

        if self.options.ambiguity != "forest":
            self._parse_tree_builder = ParseTreeBuilder(
                self.rules,
                self.options.tree_class or Tree,
                self.options.propagate_positions,
                self.options.parser != "lalr" and self.options.ambiguity == "explicit",
                self.options.maybe_placeholders,
            )
            self._callbacks = self._parse_tree_builder.create_callback(
                self.options.transformer
            )
        self._callbacks.update(
            _get_lexer_callbacks(self.options.transformer, self.terminals)
        )

    def _build_parser(self) -> "ParsingFrontend":
        self._prepare_callbacks()
        _validate_frontend_args(self.options.parser, self.options.lexer)
        parser_conf = ParserConf(self.rules, self._callbacks, self.options.start)
        return _construct_parsing_frontend(
            self.options.parser,
            self.options.lexer,
            self.lexer_conf,
            parser_conf,
            options=self.options,
        )

    def save(self, f, exclude_options: Collection[str] = ()) -> None:
        #--
        if self.options.parser != "lalr":
            raise NotImplementedError(
                "Lark.save() is only implemented for the LALR(1) parser."
            )
        data, m = self.memo_serialize([TerminalDef, Rule])
        if exclude_options:
            data["options"] = {
                n: v for n, v in data["options"].items() if n not in exclude_options
            }
        pickle.dump({"data": data, "memo": m}, f, protocol=pickle.HIGHEST_PROTOCOL)

    @classmethod
    def load(cls: Type[_T], f) -> _T:
        #--
        inst = cls.__new__(cls)
        return inst._load(f)

    def _deserialize_lexer_conf(
        self,
        data: Dict[str, Any],
        memo: Dict[int, Union[TerminalDef, Rule]],
        options: LarkOptions,
    ) -> LexerConf:
        lexer_conf = LexerConf.deserialize(data["lexer_conf"], memo)
        lexer_conf.callbacks = options.lexer_callbacks or {}
        lexer_conf.re_module = regex if options.regex else re
        lexer_conf.use_bytes = options.use_bytes
        lexer_conf.g_regex_flags = options.g_regex_flags
        lexer_conf.skip_validation = True
        lexer_conf.postlex = options.postlex
        return lexer_conf

    def _load(self: _T, f: Any, **kwargs) -> _T:
        if isinstance(f, dict):
            d = f
        else:
            d = pickle.load(f)
        memo_json = d["memo"]
        data = d["data"]

        assert memo_json
        memo = SerializeMemoizer.deserialize(
            memo_json, {"Rule": Rule, "TerminalDef": TerminalDef}, {}
        )
        options = dict(data["options"])
        if (set(kwargs) - _LOAD_ALLOWED_OPTIONS) & set(LarkOptions._defaults):
            raise ConfigurationError(
                "Some options are not allowed when loading a Parser: {}".format(
                    set(kwargs) - _LOAD_ALLOWED_OPTIONS
                )
            )
        options.update(kwargs)
        self.options = LarkOptions.deserialize(options, memo)
        self.rules = [Rule.deserialize(r, memo) for r in data["rules"]]
        self.source_path = "<deserialized>"
        _validate_frontend_args(self.options.parser, self.options.lexer)
        self.lexer_conf = self._deserialize_lexer_conf(
            data["parser"], memo, self.options
        )
        self.terminals = self.lexer_conf.terminals
        self._prepare_callbacks()
        self._terminals_dict = {t.name: t for t in self.terminals}
        self.parser = _deserialize_parsing_frontend(
            data["parser"],
            memo,
            self.lexer_conf,
            self._callbacks,
            self.options,  ##

        )
        return self

    @classmethod
    def _load_from_dict(cls, data, memo, **kwargs):
        inst = cls.__new__(cls)
        return inst._load({"data": data, "memo": memo}, **kwargs)

    @classmethod
    def open(
        cls: Type[_T], grammar_filename: str, rel_to: Optional[str] = None, **options
    ) -> _T:
        #--
        if rel_to:
            basepath = os.path.dirname(rel_to)
            grammar_filename = os.path.join(basepath, grammar_filename)
        with open(grammar_filename, encoding="utf8") as f:
            return cls(f, **options)

    @classmethod
    def open_from_package(
        cls: Type[_T],
        package: str,
        grammar_path: str,
        search_paths: "Sequence[str]" = [""],
        **options
    ) -> _T:
        #--
        package_loader = FromPackageLoader(package, search_paths)
        full_path, text = package_loader(None, grammar_path)
        options.setdefault("source_path", full_path)
        options.setdefault("import_paths", [])
        options["import_paths"].append(package_loader)
        return cls(text, **options)

    def __repr__(self):
        return "Lark(open(%r), parser=%r, lexer=%r, ...)" % (
            self.source_path,
            self.options.parser,
            self.options.lexer,
        )

    def lex(self, text: str, dont_ignore: bool = False) -> Iterator[Token]:
        #--
        lexer: Lexer
        if not hasattr(self, "lexer") or dont_ignore:
            lexer = self._build_lexer(dont_ignore)
        else:
            lexer = self.lexer
        lexer_thread = LexerThread.from_text(lexer, text)
        stream = lexer_thread.lex(None)
        if self.options.postlex:
            return self.options.postlex.process(stream)
        return stream

    def get_terminal(self, name: str) -> TerminalDef:
        #--
        return self._terminals_dict[name]

    def parse_interactive(
        self, text: Optional[str] = None, start: Optional[str] = None
    ) -> "InteractiveParser":
        #--
        return self.parser.parse_interactive(text, start=start)

    def parse(
        self,
        text: str,
        start: Optional[str] = None,
        on_error: "Optional[Callable[[UnexpectedInput], bool]]" = None,
    ) -> "ParseTree":
        #--
        return self.parser.parse(text, start=start, on_error=on_error)





class DedentError(LarkError):
    pass


class Indenter(PostLex, ABC):
    paren_level: int
    indent_level: List[int]

    def __init__(self) -> None:
        self.paren_level = 0
        self.indent_level = [0]
        assert self.tab_len > 0

    def handle_NL(self, token: Token) -> Iterator[Token]:
        if self.paren_level > 0:
            return

        yield token

        indent_str = token.rsplit("\n", 1)[1]  ##

        indent = indent_str.count(" ") + indent_str.count("\t") * self.tab_len

        if indent > self.indent_level[-1]:
            self.indent_level.append(indent)
            yield Token.new_borrow_pos(self.INDENT_type, indent_str, token)
        else:
            while indent < self.indent_level[-1]:
                self.indent_level.pop()
                yield Token.new_borrow_pos(self.DEDENT_type, indent_str, token)

            if indent != self.indent_level[-1]:
                raise DedentError(
                    "Unexpected dedent to column %s. Expected dedent to %s"
                    % (indent, self.indent_level[-1])
                )

    def _process(self, stream):
        for token in stream:
            if token.type == self.NL_type:
                yield from self.handle_NL(token)
            else:
                yield token

            if token.type in self.OPEN_PAREN_types:
                self.paren_level += 1
            elif token.type in self.CLOSE_PAREN_types:
                self.paren_level -= 1
                assert self.paren_level >= 0

        while len(self.indent_level) > 1:
            self.indent_level.pop()
            yield Token(self.DEDENT_type, "")

        assert self.indent_level == [0], self.indent_level

    def process(self, stream):
        self.paren_level = 0
        self.indent_level = [0]
        return self._process(stream)

    ##

    @property
    def always_accept(self):
        return (self.NL_type,)

    @property
    @abstractmethod
    def NL_type(self) -> str:
        raise NotImplementedError()

    @property
    @abstractmethod
    def OPEN_PAREN_types(self) -> List[str]:
        raise NotImplementedError()

    @property
    @abstractmethod
    def CLOSE_PAREN_types(self) -> List[str]:
        raise NotImplementedError()

    @property
    @abstractmethod
    def INDENT_type(self) -> str:
        raise NotImplementedError()

    @property
    @abstractmethod
    def DEDENT_type(self) -> str:
        raise NotImplementedError()

    @property
    @abstractmethod
    def tab_len(self) -> int:
        raise NotImplementedError()


class PythonIndenter(Indenter):
    NL_type = "_NEWLINE"
    OPEN_PAREN_types = ["LPAR", "LSQB", "LBRACE"]
    CLOSE_PAREN_types = ["RPAR", "RSQB", "RBRACE"]
    INDENT_type = "_INDENT"
    DEDENT_type = "_DEDENT"
    tab_len = 8



import pickle, zlib, base64
DATA = (
b'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xyfHv+ioqfw0nztjlcJZ038i+tLfi4XZeAZpeAZJcgbZagb5cAaJcAZJawY5bwapdgYJZkY1wfx+5Y90TflPmKn+SdNvl4+88sxVfrX13eM2PS16VuLy6EPrq4m/pv/3o1/8H2Pfq8H343QR//s23U5NtT+Cw2w0qP+r2OAP71T7Zerheurheurheurheurheurheurheurheurheurheurheurheurheurheurheurheurheurheurheurheurheurheurh+mo9/ErlGzn5A3XPnxb+h51fLTp/UPmSqNg8UxtUzGoRfapyAecPY1PvTf6vY4PBe5N/lRr62VhYQ6t6CD2MHkGfQUvRAHoUbUf70A5UQI+hx9ETqIjuQ0+ieWgB2oyWoWZ0ED2FSqgNPY260B60CC1GS9BydBdaiZ5B09EW9Czaip5D29AMdAg9j2rRATSIXkD3ohfRLLQK7UQvoZfRLvQKmo12ozloCL2KDqP56AhqQkfRfvQaWo1eR2+gLDqG3kTDKIFG0FtoIRpFb6PjKIlOoJNoLzoVaiD9R5UCuLhcGJdMC467pxlwnmaT8XR13PljWtxaSsRaTq+1/IWspXys5fRayzd9LafXWk6otZwma2lxaymrazmF1lJW11Jy19Li1nJirOXgX0shXctfyFoO/rUUr7X8hayt/hX8SWzyNqS7ot40udz5Et/0L7Hg+BLT6Jf4y/oSK40vsSz7EmuZL1X/Ir9W+f0na+8f1IbnS1VPoIPoECqiYXQy1ED6P1V+28lm+0eVL/k0egbNQA+hQ+g59Dzajg6gHegx9DiahVahJ9AuVESz0W70JBpC89BhNB8dQUfRa+ggKqFhNIKeRqPoODqBFqE96CRagk6FGkj/aSzckS+qfMl5aDo6H12A6tAMdCG6CH0C1aOZqAFdjGah2egSNAfNRfPQpegyNB8tQI3ocnQFakJx1IxaUA1qRW2oHSVQB+pEV6KFqAt1o6tQEl2NrkGL0LXoOnQ9WoyWoKXoBnQjugndjJahW9BytAKtRLXoVhRDq9BtaDW6HfWgXrQG9aG1qB+tQ2m0EX0S3YlSaD3agO5Am9CnUAbdhbagrWgb2o52oJ1oF9qNNqMs2oP2hhpIfz02mR7/+btjdbq2suL+s9g330rZf2v08f9Mvd4bC+v1Xuauqs5HF6A6NANdiC5Cn0D1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1//9eabu7FHrUgalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalMQalseqgdNnHZPk71XWnlr9T7fej3vlOdc2pPvqD3fmetev95vb3V2/nG10PePhHc/k7v3JCTk7ov1w5Z1tRDboZLUOr0O1oKVqOYugm1INWolp0K7oB3YhuQ6tRL7oFrUErUF+ogfSC6DaG6GrYumnRbQyNle/y1F/l5LEyeY6eVRWiQ/BPwiegzhzbU1Vh6uR5vyd+36NuvN9jxJPFdPJUnqql79axgfTl3Nx7BX8bV5BZriClXEEuqSqPatHdaDvah3agA+hetBPtQveh3Wgz2o+WoRzKonvQAyiJ7kd70F70afQgehg9gj6DBtCjqIAeR0+gJ9E8tAA1o6dRF1qMlqBn0CB6Ec1Gc9AQehXNR03oNfQ6egO9iRJoBL2FFqIT6CG0FD2GiuggegqVUBtahJaj6ehZ9ByagQ6h59ELaBZahV5CL6NX0GF0BB1Fq9ExNIxG0dvoODqJToUaSF9RufK6LeoTl0X3T6SiV781rdKwatKrog+dX3l+clpwzg9xzg9xXAxRAYaoAENUgCGOoCHqwRD1YIhKPEQlHqISD1E5hjgqh6gjQ9SRIY7YIeryEDVmiBozRI0ZomYPUaWHqD9DnBNDnBNDnBNDnBND1K0h6tYQNXuIs2eImjZETRvizKrqLrQSPYOmoy3oWbQVPYe2oRnoEHoe1aIDaBC9gO5FL6JZaBXaiV5CL6Nd6BU0G+1Gc9AQehUdRvPREdSEjqL96DW0Gr2O3kBZdAy9iYZRAo2gt9BCNIreRsdREp1AJ9FedCrUQLrpffb73/r98irvddffOfg9eeO8H963y/vu3iRv8l3uvsvF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0FhoHDQeKoQmQBOhSVARVAxZoRJoMmSDpkCl0FSoEiqHGqEaqAlqhuqhBsgOTYOmQzOgmZADmgU5odlQGZQOzYHSIBdUAc2F5kHzoQWQG1oILYI80GJIg5ZAS6Fl0HJoBbQSWgWthtZAVVA1VAvVQV6oBVorpWuBxDuVco0bGCXJdyR9Lj1wXss2XhpoHA1K/uiazS85kcjfqfd7JO+sGO8EWSzfUNftTTvd3xHS/a0nr3oTpvt7UV7ttkzyPSrJd4+k3quSehtJ8NGbKx+9ufKhenPlQ/GeSuMdnpeNV37vb648iZbQipbQipbQipbQipbQipbQipbQipbQipbQipbQipbQipbQipbQipbQipbQipbQipbQipbQipbQipbQipbQipbQipbQipbQipbQipbQipbQipbQipbQipbQipbQipbQipbQipbQipbQipbQipbQipbQipbQipbQipbQipbQipbQipbQipbQipbQipbQipbQipbQipbQipbQipbQihbNihbNihbNihbNihbNihbNihbNihbNihbNihbNihbNihbNihbNitbViobNiobNiobNiobNiobNiobNiobNihbNihbNihbNihbNijbMijbMisbLipbQitbOitbOivbNiobNiobNiobNVCVUDdVAtVA91AB5oUaoCaqC6qBmqEVK106l3sz+wR6J89WitSRuLIUSHzCelrwnPXHSWbRnxNvdPbdFEkhA105jN8aL8hNeTHzCGfWWXIs2NC1wHlt1PJrxCWEUAw+KgQfFwINi4EEx8KAYeFAMPCgGHhQDD4qBB8XAg2LgQTHwoBh4UAw8KAYeFAMPioEHxcCDYuBBMfCgGHhQDDwoBh4UAw+KgQfFwINi4EEx8KAYeFAMPCgGHhQDD4qBB8XAg2LgQTHwoBh4UAw8KAYeFAMPioEHxcCDYuBBMfCgGHhQDDwoBh4UAw+KgQfFwINi4EEx8KAYeFAMPCgGHhQDD4qBB8XAg2LgQTHwoBh4UAw8KAYeFAMPioEHxcCDYuBBMfCgGHhQDDwoBh4UAw9StQelwYPS4EFp8KA0eJDiPUjxHpQND8qGB+nfgyLiQTHwoBh4UAw8KAYeJGcPSoMHpcGD0uBBGvegUHhQKDwoFB4UCg8KhQfFwINi4DGLwdmHZHGcWgqnFsep5fIfenHc/REjv9/FcXIt3G2R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'
)
DATA = pickle.loads(zlib.decompress(base64.b64decode(DATA)))
MEMO = (
b''
)
MEMO = pickle.loads(zlib.decompress(base64.b64decode(MEMO)))
Shift = 0
Reduce = 1
def Lark_StandAlone(**kwargs):
  return Lark._load_from_dict(DATA, MEMO, **kwargs)
