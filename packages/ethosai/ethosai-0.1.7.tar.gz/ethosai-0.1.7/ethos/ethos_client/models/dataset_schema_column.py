# coding: utf-8

"""
    Ethos

    API for Ethos AI

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional
from pydantic import BaseModel, Field, validator

class DatasetSchemaColumn(BaseModel):
    """
    DatasetSchemaColumn
    """
    object: Optional[Any] = Field(...)
    id: Optional[Any] = Field(...)
    dataset_schema: Optional[Any] = Field(...)
    name: Optional[Any] = Field(...)
    type: Optional[Any] = Field(...)
    dtype: Optional[Any] = Field(...)
    is_autodetected_dtype: Optional[Any] = Field(...)
    created_at: Optional[Any] = Field(...)
    __properties = ["object", "id", "dataset_schema", "name", "type", "dtype", "is_autodetected_dtype", "created_at"]

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('default', 'id', 'target', 'actual_values', 'predict', 'predict_proba', 'protected'):
            raise ValueError("must be one of enum values ('default', 'id', 'target', 'actual_values', 'predict', 'predict_proba', 'protected')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DatasetSchemaColumn:
        """Create an instance of DatasetSchemaColumn from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if object (nullable) is None
        # and __fields_set__ contains the field
        if self.object is None and "object" in self.__fields_set__:
            _dict['object'] = None

        # set to None if id (nullable) is None
        # and __fields_set__ contains the field
        if self.id is None and "id" in self.__fields_set__:
            _dict['id'] = None

        # set to None if dataset_schema (nullable) is None
        # and __fields_set__ contains the field
        if self.dataset_schema is None and "dataset_schema" in self.__fields_set__:
            _dict['dataset_schema'] = None

        # set to None if name (nullable) is None
        # and __fields_set__ contains the field
        if self.name is None and "name" in self.__fields_set__:
            _dict['name'] = None

        # set to None if type (nullable) is None
        # and __fields_set__ contains the field
        if self.type is None and "type" in self.__fields_set__:
            _dict['type'] = None

        # set to None if dtype (nullable) is None
        # and __fields_set__ contains the field
        if self.dtype is None and "dtype" in self.__fields_set__:
            _dict['dtype'] = None

        # set to None if is_autodetected_dtype (nullable) is None
        # and __fields_set__ contains the field
        if self.is_autodetected_dtype is None and "is_autodetected_dtype" in self.__fields_set__:
            _dict['is_autodetected_dtype'] = None

        # set to None if created_at (nullable) is None
        # and __fields_set__ contains the field
        if self.created_at is None and "created_at" in self.__fields_set__:
            _dict['created_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DatasetSchemaColumn:
        """Create an instance of DatasetSchemaColumn from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DatasetSchemaColumn.parse_obj(obj)

        _obj = DatasetSchemaColumn.parse_obj({
            "object": obj.get("object"),
            "id": obj.get("id"),
            "dataset_schema": obj.get("dataset_schema"),
            "name": obj.get("name"),
            "type": obj.get("type"),
            "dtype": obj.get("dtype"),
            "is_autodetected_dtype": obj.get("is_autodetected_dtype"),
            "created_at": obj.get("created_at")
        })
        return _obj


