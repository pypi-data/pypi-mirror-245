# coding: utf-8

"""
    Ethos

    API for Ethos AI

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional
from pydantic import BaseModel, Field

class ListWorkflowTemplate(BaseModel):
    """
    ListWorkflowTemplate
    """
    object: Optional[Any] = None
    has_more: Optional[Any] = Field(...)
    data: Optional[Any] = Field(...)
    __properties = ["object", "has_more", "data"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ListWorkflowTemplate:
        """Create an instance of ListWorkflowTemplate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if object (nullable) is None
        # and __fields_set__ contains the field
        if self.object is None and "object" in self.__fields_set__:
            _dict['object'] = None

        # set to None if has_more (nullable) is None
        # and __fields_set__ contains the field
        if self.has_more is None and "has_more" in self.__fields_set__:
            _dict['has_more'] = None

        # set to None if data (nullable) is None
        # and __fields_set__ contains the field
        if self.data is None and "data" in self.__fields_set__:
            _dict['data'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ListWorkflowTemplate:
        """Create an instance of ListWorkflowTemplate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ListWorkflowTemplate.parse_obj(obj)

        _obj = ListWorkflowTemplate.parse_obj({
            "object": obj.get("object"),
            "has_more": obj.get("has_more"),
            "data": obj.get("data")
        })
        return _obj


