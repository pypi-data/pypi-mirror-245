# coding: utf-8

"""
    Ethos

    API for Ethos AI

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional
from pydantic import BaseModel, Field

class DatasetSchema(BaseModel):
    """
    DatasetSchema
    """
    object: Optional[Any] = Field(...)
    id: Optional[Any] = Field(...)
    resource: Optional[Any] = Field(...)
    created_at: Optional[Any] = Field(...)
    created_by: Optional[Any] = Field(...)
    columns: Optional[Any] = Field(...)
    __properties = ["object", "id", "resource", "created_at", "created_by", "columns"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DatasetSchema:
        """Create an instance of DatasetSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if object (nullable) is None
        # and __fields_set__ contains the field
        if self.object is None and "object" in self.__fields_set__:
            _dict['object'] = None

        # set to None if id (nullable) is None
        # and __fields_set__ contains the field
        if self.id is None and "id" in self.__fields_set__:
            _dict['id'] = None

        # set to None if resource (nullable) is None
        # and __fields_set__ contains the field
        if self.resource is None and "resource" in self.__fields_set__:
            _dict['resource'] = None

        # set to None if created_at (nullable) is None
        # and __fields_set__ contains the field
        if self.created_at is None and "created_at" in self.__fields_set__:
            _dict['created_at'] = None

        # set to None if created_by (nullable) is None
        # and __fields_set__ contains the field
        if self.created_by is None and "created_by" in self.__fields_set__:
            _dict['created_by'] = None

        # set to None if columns (nullable) is None
        # and __fields_set__ contains the field
        if self.columns is None and "columns" in self.__fields_set__:
            _dict['columns'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DatasetSchema:
        """Create an instance of DatasetSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DatasetSchema.parse_obj(obj)

        _obj = DatasetSchema.parse_obj({
            "object": obj.get("object"),
            "id": obj.get("id"),
            "resource": obj.get("resource"),
            "created_at": obj.get("created_at"),
            "created_by": obj.get("created_by"),
            "columns": obj.get("columns")
        })
        return _obj


