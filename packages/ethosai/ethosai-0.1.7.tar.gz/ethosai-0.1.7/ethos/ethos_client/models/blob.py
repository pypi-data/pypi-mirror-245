# coding: utf-8

"""
    Ethos

    API for Ethos AI

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional
from pydantic import BaseModel, Field

class Blob(BaseModel):
    """
    Blob
    """
    object: Optional[Any] = Field(...)
    id: Optional[Any] = Field(...)
    datasource: Optional[Any] = Field(...)
    bucket_name: Optional[Any] = Field(...)
    filename: Optional[Any] = Field(...)
    mimetype: Optional[Any] = Field(...)
    state: Optional[Any] = Field(...)
    state_reason: Optional[Any] = Field(...)
    last_synced_at: Optional[Any] = Field(...)
    hash: Optional[Any] = Field(...)
    hash_type: Optional[Any] = Field(...)
    size: Optional[Any] = Field(...)
    created_by: Optional[Any] = Field(...)
    created_at: Optional[Any] = Field(...)
    signed_upload_url: Optional[Any] = None
    signed_download_url: Optional[Any] = None
    __properties = ["object", "id", "datasource", "bucket_name", "filename", "mimetype", "state", "state_reason", "last_synced_at", "hash", "hash_type", "size", "created_by", "created_at", "signed_upload_url", "signed_download_url"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Blob:
        """Create an instance of Blob from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if object (nullable) is None
        # and __fields_set__ contains the field
        if self.object is None and "object" in self.__fields_set__:
            _dict['object'] = None

        # set to None if id (nullable) is None
        # and __fields_set__ contains the field
        if self.id is None and "id" in self.__fields_set__:
            _dict['id'] = None

        # set to None if datasource (nullable) is None
        # and __fields_set__ contains the field
        if self.datasource is None and "datasource" in self.__fields_set__:
            _dict['datasource'] = None

        # set to None if bucket_name (nullable) is None
        # and __fields_set__ contains the field
        if self.bucket_name is None and "bucket_name" in self.__fields_set__:
            _dict['bucket_name'] = None

        # set to None if filename (nullable) is None
        # and __fields_set__ contains the field
        if self.filename is None and "filename" in self.__fields_set__:
            _dict['filename'] = None

        # set to None if mimetype (nullable) is None
        # and __fields_set__ contains the field
        if self.mimetype is None and "mimetype" in self.__fields_set__:
            _dict['mimetype'] = None

        # set to None if state (nullable) is None
        # and __fields_set__ contains the field
        if self.state is None and "state" in self.__fields_set__:
            _dict['state'] = None

        # set to None if state_reason (nullable) is None
        # and __fields_set__ contains the field
        if self.state_reason is None and "state_reason" in self.__fields_set__:
            _dict['state_reason'] = None

        # set to None if last_synced_at (nullable) is None
        # and __fields_set__ contains the field
        if self.last_synced_at is None and "last_synced_at" in self.__fields_set__:
            _dict['last_synced_at'] = None

        # set to None if hash (nullable) is None
        # and __fields_set__ contains the field
        if self.hash is None and "hash" in self.__fields_set__:
            _dict['hash'] = None

        # set to None if hash_type (nullable) is None
        # and __fields_set__ contains the field
        if self.hash_type is None and "hash_type" in self.__fields_set__:
            _dict['hash_type'] = None

        # set to None if size (nullable) is None
        # and __fields_set__ contains the field
        if self.size is None and "size" in self.__fields_set__:
            _dict['size'] = None

        # set to None if created_by (nullable) is None
        # and __fields_set__ contains the field
        if self.created_by is None and "created_by" in self.__fields_set__:
            _dict['created_by'] = None

        # set to None if created_at (nullable) is None
        # and __fields_set__ contains the field
        if self.created_at is None and "created_at" in self.__fields_set__:
            _dict['created_at'] = None

        # set to None if signed_upload_url (nullable) is None
        # and __fields_set__ contains the field
        if self.signed_upload_url is None and "signed_upload_url" in self.__fields_set__:
            _dict['signed_upload_url'] = None

        # set to None if signed_download_url (nullable) is None
        # and __fields_set__ contains the field
        if self.signed_download_url is None and "signed_download_url" in self.__fields_set__:
            _dict['signed_download_url'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Blob:
        """Create an instance of Blob from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Blob.parse_obj(obj)

        _obj = Blob.parse_obj({
            "object": obj.get("object"),
            "id": obj.get("id"),
            "datasource": obj.get("datasource"),
            "bucket_name": obj.get("bucket_name"),
            "filename": obj.get("filename"),
            "mimetype": obj.get("mimetype"),
            "state": obj.get("state"),
            "state_reason": obj.get("state_reason"),
            "last_synced_at": obj.get("last_synced_at"),
            "hash": obj.get("hash"),
            "hash_type": obj.get("hash_type"),
            "size": obj.get("size"),
            "created_by": obj.get("created_by"),
            "created_at": obj.get("created_at"),
            "signed_upload_url": obj.get("signed_upload_url"),
            "signed_download_url": obj.get("signed_download_url")
        })
        return _obj


