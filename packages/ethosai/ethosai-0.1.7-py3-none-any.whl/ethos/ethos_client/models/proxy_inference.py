# coding: utf-8

"""
    Ethos

    API for Ethos AI

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional
from pydantic import BaseModel, Field

class ProxyInference(BaseModel):
    """
    ProxyInference
    """
    object: Optional[Any] = None
    id: Optional[Any] = Field(...)
    white: Optional[Any] = Field(...)
    black: Optional[Any] = Field(...)
    api: Optional[Any] = Field(...)
    native: Optional[Any] = Field(...)
    multiple: Optional[Any] = Field(...)
    hispanic: Optional[Any] = Field(...)
    predicted_race: Optional[Any] = Field(...)
    prediction_method: Optional[Any] = Field(...)
    __properties = ["object", "id", "white", "black", "api", "native", "multiple", "hispanic", "predicted_race", "prediction_method"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ProxyInference:
        """Create an instance of ProxyInference from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if object (nullable) is None
        # and __fields_set__ contains the field
        if self.object is None and "object" in self.__fields_set__:
            _dict['object'] = None

        # set to None if id (nullable) is None
        # and __fields_set__ contains the field
        if self.id is None and "id" in self.__fields_set__:
            _dict['id'] = None

        # set to None if white (nullable) is None
        # and __fields_set__ contains the field
        if self.white is None and "white" in self.__fields_set__:
            _dict['white'] = None

        # set to None if black (nullable) is None
        # and __fields_set__ contains the field
        if self.black is None and "black" in self.__fields_set__:
            _dict['black'] = None

        # set to None if api (nullable) is None
        # and __fields_set__ contains the field
        if self.api is None and "api" in self.__fields_set__:
            _dict['api'] = None

        # set to None if native (nullable) is None
        # and __fields_set__ contains the field
        if self.native is None and "native" in self.__fields_set__:
            _dict['native'] = None

        # set to None if multiple (nullable) is None
        # and __fields_set__ contains the field
        if self.multiple is None and "multiple" in self.__fields_set__:
            _dict['multiple'] = None

        # set to None if hispanic (nullable) is None
        # and __fields_set__ contains the field
        if self.hispanic is None and "hispanic" in self.__fields_set__:
            _dict['hispanic'] = None

        # set to None if predicted_race (nullable) is None
        # and __fields_set__ contains the field
        if self.predicted_race is None and "predicted_race" in self.__fields_set__:
            _dict['predicted_race'] = None

        # set to None if prediction_method (nullable) is None
        # and __fields_set__ contains the field
        if self.prediction_method is None and "prediction_method" in self.__fields_set__:
            _dict['prediction_method'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ProxyInference:
        """Create an instance of ProxyInference from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ProxyInference.parse_obj(obj)

        _obj = ProxyInference.parse_obj({
            "object": obj.get("object"),
            "id": obj.get("id"),
            "white": obj.get("white"),
            "black": obj.get("black"),
            "api": obj.get("api"),
            "native": obj.get("native"),
            "multiple": obj.get("multiple"),
            "hispanic": obj.get("hispanic"),
            "predicted_race": obj.get("predicted_race"),
            "prediction_method": obj.get("prediction_method")
        })
        return _obj


