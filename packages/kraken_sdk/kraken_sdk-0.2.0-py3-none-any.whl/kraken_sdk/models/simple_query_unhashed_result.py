# coding: utf-8

"""
    kraken

    The core component of kraken-project

    The version of the OpenAPI document: 0.1.0
    Contact: git@omikron.dev
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class SimpleQueryUnhashedResult(BaseModel):
    """
    A simple representation of a query unhashed result
    """ # noqa: E501
    uuid: StrictStr = Field(description="The primary key")
    attack: StrictStr = Field(description="The attack which produced this result")
    created_at: datetime = Field(description="The point in time, this result was produced")
    dehashed_id: StrictInt = Field(description="ID of the entry")
    email: Optional[StrictStr] = Field(default=None, description="An email address")
    username: Optional[StrictStr] = Field(default=None, description="An username")
    password: Optional[StrictStr] = Field(default=None, description="A password")
    hashed_password: Optional[StrictStr] = Field(default=None, description="An hashed password")
    ip_address: StrictStr = Field(description="An ip address")
    name: Optional[StrictStr] = Field(default=None, description="A name")
    vin: Optional[StrictStr] = Field(default=None, description="A vin")
    address: Optional[StrictStr] = Field(default=None, description="An address")
    phone: Optional[StrictStr] = Field(default=None, description="A phone number")
    database_name: Optional[StrictStr] = Field(default=None, description="A database name")
    __properties: ClassVar[List[str]] = ["uuid", "attack", "created_at", "dehashed_id", "email", "username", "password", "hashed_password", "ip_address", "name", "vin", "address", "phone", "database_name"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of SimpleQueryUnhashedResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if email (nullable) is None
        # and model_fields_set contains the field
        if self.email is None and "email" in self.model_fields_set:
            _dict['email'] = None

        # set to None if username (nullable) is None
        # and model_fields_set contains the field
        if self.username is None and "username" in self.model_fields_set:
            _dict['username'] = None

        # set to None if password (nullable) is None
        # and model_fields_set contains the field
        if self.password is None and "password" in self.model_fields_set:
            _dict['password'] = None

        # set to None if hashed_password (nullable) is None
        # and model_fields_set contains the field
        if self.hashed_password is None and "hashed_password" in self.model_fields_set:
            _dict['hashed_password'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if vin (nullable) is None
        # and model_fields_set contains the field
        if self.vin is None and "vin" in self.model_fields_set:
            _dict['vin'] = None

        # set to None if address (nullable) is None
        # and model_fields_set contains the field
        if self.address is None and "address" in self.model_fields_set:
            _dict['address'] = None

        # set to None if phone (nullable) is None
        # and model_fields_set contains the field
        if self.phone is None and "phone" in self.model_fields_set:
            _dict['phone'] = None

        # set to None if database_name (nullable) is None
        # and model_fields_set contains the field
        if self.database_name is None and "database_name" in self.model_fields_set:
            _dict['database_name'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of SimpleQueryUnhashedResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uuid": obj.get("uuid"),
            "attack": obj.get("attack"),
            "created_at": obj.get("created_at"),
            "dehashed_id": obj.get("dehashed_id"),
            "email": obj.get("email"),
            "username": obj.get("username"),
            "password": obj.get("password"),
            "hashed_password": obj.get("hashed_password"),
            "ip_address": obj.get("ip_address"),
            "name": obj.get("name"),
            "vin": obj.get("vin"),
            "address": obj.get("address"),
            "phone": obj.get("phone"),
            "database_name": obj.get("database_name")
        })
        return _obj


