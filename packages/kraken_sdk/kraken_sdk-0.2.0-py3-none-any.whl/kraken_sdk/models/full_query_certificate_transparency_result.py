# coding: utf-8

"""
    kraken

    The core component of kraken-project

    The version of the OpenAPI document: 0.1.0
    Contact: git@omikron.dev
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class FullQueryCertificateTransparencyResult(BaseModel):
    """
    A simple representation of a query certificate transparency result
    """ # noqa: E501
    uuid: StrictStr = Field(description="The primary key")
    attack: StrictStr = Field(description="The attack which produced this result")
    created_at: datetime = Field(description="The point in time, this result was produced")
    issuer_name: StrictStr = Field(description="The name of the issuer")
    common_name: StrictStr = Field(description="The common name of the certificate")
    value_names: List[StrictStr] = Field(description="The values of the certificate")
    not_before: Optional[datetime] = Field(default=None, description="The start date of the certificate")
    not_after: Optional[datetime] = Field(default=None, description="The end date of the certificate")
    serial_number: StrictStr = Field(description="The serial number of the certificate")
    __properties: ClassVar[List[str]] = ["uuid", "attack", "created_at", "issuer_name", "common_name", "value_names", "not_before", "not_after", "serial_number"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of FullQueryCertificateTransparencyResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if not_before (nullable) is None
        # and model_fields_set contains the field
        if self.not_before is None and "not_before" in self.model_fields_set:
            _dict['not_before'] = None

        # set to None if not_after (nullable) is None
        # and model_fields_set contains the field
        if self.not_after is None and "not_after" in self.model_fields_set:
            _dict['not_after'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of FullQueryCertificateTransparencyResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uuid": obj.get("uuid"),
            "attack": obj.get("attack"),
            "created_at": obj.get("created_at"),
            "issuer_name": obj.get("issuer_name"),
            "common_name": obj.get("common_name"),
            "value_names": obj.get("value_names"),
            "not_before": obj.get("not_before"),
            "not_after": obj.get("not_after"),
            "serial_number": obj.get("serial_number")
        })
        return _obj


