# coding: utf-8

"""
    kraken

    The core component of kraken-project

    The version of the OpenAPI document: 0.1.0
    Contact: git@omikron.dev
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List
from pydantic import BaseModel, StrictStr
from pydantic import Field
from typing_extensions import Annotated
from kraken_sdk.models.port_protocol import PortProtocol
from kraken_sdk.models.simple_aggregation_source import SimpleAggregationSource
from kraken_sdk.models.simple_host import SimpleHost
from kraken_sdk.models.simple_tag import SimpleTag
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class FullPort(BaseModel):
    """
    The full representation of a port
    """ # noqa: E501
    uuid: StrictStr = Field(description="Uuid of the port")
    port: Annotated[int, Field(strict=True, ge=0)] = Field(description="Port number")
    protocol: PortProtocol
    host: SimpleHost
    comment: StrictStr = Field(description="A comment to the port")
    tags: List[SimpleTag] = Field(description="The tags this port is linked to")
    workspace: StrictStr = Field(description="The workspace this port is linked to")
    sources: SimpleAggregationSource
    created_at: datetime = Field(description="The point in time, the record was created")
    __properties: ClassVar[List[str]] = ["uuid", "port", "protocol", "host", "comment", "tags", "workspace", "sources", "created_at"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of FullPort from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of host
        if self.host:
            _dict['host'] = self.host.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item in self.tags:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tags'] = _items
        # override the default output from pydantic by calling `to_dict()` of sources
        if self.sources:
            _dict['sources'] = self.sources.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of FullPort from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uuid": obj.get("uuid"),
            "port": obj.get("port"),
            "protocol": obj.get("protocol"),
            "host": SimpleHost.from_dict(obj.get("host")) if obj.get("host") is not None else None,
            "comment": obj.get("comment"),
            "tags": [SimpleTag.from_dict(_item) for _item in obj.get("tags")] if obj.get("tags") is not None else None,
            "workspace": obj.get("workspace"),
            "sources": SimpleAggregationSource.from_dict(obj.get("sources")) if obj.get("sources") is not None else None,
            "created_at": obj.get("created_at")
        })
        return _obj


