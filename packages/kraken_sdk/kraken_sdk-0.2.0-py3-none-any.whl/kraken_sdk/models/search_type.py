# coding: utf-8

"""
    kraken

    The core component of kraken-project

    The version of the OpenAPI document: 0.1.0
    Contact: git@omikron.dev
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401

from typing import Any, List, Optional
from pydantic import BaseModel, Field, StrictStr, ValidationError, field_validator
from kraken_sdk.models.search_type_one_of import SearchTypeOneOf
from kraken_sdk.models.search_type_one_of1 import SearchTypeOneOf1
from kraken_sdk.models.search_type_one_of2 import SearchTypeOneOf2
from typing import Union, Any, List, TYPE_CHECKING, Optional, Dict
from typing_extensions import Literal
from pydantic import StrictStr, Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

SEARCHTYPE_ONE_OF_SCHEMAS = ["SearchTypeOneOf", "SearchTypeOneOf1", "SearchTypeOneOf2", "SearchTypeOneOf3", "SearchTypeOneOf4"]

class SearchType(BaseModel):
    """
    A specific search type
    """
    # data type: SearchTypeOneOf
    oneof_schema_1_validator: Optional[SearchTypeOneOf] = None
    # data type: SearchTypeOneOf1
    oneof_schema_2_validator: Optional[SearchTypeOneOf1] = None
    # data type: SearchTypeOneOf2
    oneof_schema_3_validator: Optional[SearchTypeOneOf2] = None
    # data type: SearchTypeOneOf3
    oneof_schema_4_validator: Optional[SearchTypeOneOf3] = None
    # data type: SearchTypeOneOf4
    oneof_schema_5_validator: Optional[SearchTypeOneOf4] = None
    actual_instance: Optional[Union[SearchTypeOneOf, SearchTypeOneOf1, SearchTypeOneOf2, SearchTypeOneOf3, SearchTypeOneOf4]] = None
    one_of_schemas: List[str] = Literal["SearchTypeOneOf", "SearchTypeOneOf1", "SearchTypeOneOf2", "SearchTypeOneOf3", "SearchTypeOneOf4"]

    model_config = {
        "validate_assignment": True
    }


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = SearchType.model_construct()
        error_messages = []
        match = 0
        # validate data type: SearchTypeOneOf
        if not isinstance(v, SearchTypeOneOf):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SearchTypeOneOf`")
        else:
            match += 1
        # validate data type: SearchTypeOneOf1
        if not isinstance(v, SearchTypeOneOf1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SearchTypeOneOf1`")
        else:
            match += 1
        # validate data type: SearchTypeOneOf2
        if not isinstance(v, SearchTypeOneOf2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SearchTypeOneOf2`")
        else:
            match += 1
        # validate data type: SearchTypeOneOf3
        if not isinstance(v, SearchTypeOneOf3):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SearchTypeOneOf3`")
        else:
            match += 1
        # validate data type: SearchTypeOneOf4
        if not isinstance(v, SearchTypeOneOf4):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SearchTypeOneOf4`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in SearchType with oneOf schemas: SearchTypeOneOf, SearchTypeOneOf1, SearchTypeOneOf2, SearchTypeOneOf3, SearchTypeOneOf4. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in SearchType with oneOf schemas: SearchTypeOneOf, SearchTypeOneOf1, SearchTypeOneOf2, SearchTypeOneOf3, SearchTypeOneOf4. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into SearchTypeOneOf
        try:
            instance.actual_instance = SearchTypeOneOf.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SearchTypeOneOf1
        try:
            instance.actual_instance = SearchTypeOneOf1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SearchTypeOneOf2
        try:
            instance.actual_instance = SearchTypeOneOf2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SearchTypeOneOf3
        try:
            instance.actual_instance = SearchTypeOneOf3.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SearchTypeOneOf4
        try:
            instance.actual_instance = SearchTypeOneOf4.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into SearchType with oneOf schemas: SearchTypeOneOf, SearchTypeOneOf1, SearchTypeOneOf2, SearchTypeOneOf3, SearchTypeOneOf4. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into SearchType with oneOf schemas: SearchTypeOneOf, SearchTypeOneOf1, SearchTypeOneOf2, SearchTypeOneOf3, SearchTypeOneOf4. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        to_dict = getattr(self.actual_instance, "to_dict", None)
        if callable(to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())

from kraken_sdk.models.search_type_one_of3 import SearchTypeOneOf3
from kraken_sdk.models.search_type_one_of4 import SearchTypeOneOf4
# TODO: Rewrite to not use raise_errors
SearchType.model_rebuild(raise_errors=False)

