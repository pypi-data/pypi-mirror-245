Metadata-Version: 2.1
Name: kraken_sdk
Version: 0.2.0
Summary: kraken
Home-page: https://github.com/myOmikron/kraken-project
License: AGPL-3.0
Keywords: OpenAPI,OpenAPI-Generator,kraken
Author: Niklas Pfister
Author-email: git@omikron.dev
Requires-Python: >=3.7,<4.0
Classifier: License :: OSI Approved :: GNU Affero General Public License v3
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Requires-Dist: aiohttp (>=3.8.4)
Requires-Dist: pydantic (>=2)
Requires-Dist: python-dateutil (>=2.8.2)
Requires-Dist: typing-extensions (>=4.7.1)
Requires-Dist: urllib3 (>=1.25.3)
Project-URL: Repository, https://github.com/myOmikron/kraken-project
Description-Content-Type: text/markdown

# kraken-sdk
The core component of kraken-project

This Python package is automatically generated by the [OpenAPI Generator](https://openapi-generator.tech) project:

- API version: 0.1.0
- Package version: 0.1.0
- Build package: org.openapitools.codegen.languages.PythonClientCodegen

## Requirements.

Python 3.7+

## Installation & Usage
### pip install

If the python package is hosted on a repository, you can install directly using:

```sh
pip install git+https://github.com/myOmikron/kraken-project.git
```
(you may need to run `pip` with root permission: `sudo pip install git+https://github.com/myOmikron/kraken-project.git`)

Then import the package:
```python
import kraken_sdk
```

### Setuptools

Install via [Setuptools](http://pypi.python.org/pypi/setuptools).

```sh
python setup.py install --user
```
(or `sudo python setup.py install` to install the package for all users)

Then import the package:
```python
import kraken_sdk
```

### Tests

Execute `pytest` to run the tests.

## Getting Started

Please follow the [installation procedure](#installation--usage) and then run the following:

```python

import time
import kraken_sdk
from kraken_sdk.rest import ApiException
from pprint import pprint

# Defining the host is optional and defaults to http://localhost
# See configuration.py for a list of all supported configuration parameters.
configuration = kraken_sdk.Configuration(
    host = "http://localhost"
)

# The client must configure the authentication and authorization parameters
# in accordance with the API server security policy.
# Examples for each auth method are provided below, use the example that
# satisfies your auth use case.

# Configure API key authorization: api_key
configuration.api_key['api_key'] = os.environ["API_KEY"]

# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed
# configuration.api_key_prefix['api_key'] = 'Bearer'


# Enter a context with an instance of the API client
async with kraken_sdk.ApiClient(configuration) as api_client:
    # Create an instance of the API class
    api_instance = kraken_sdk.AdminWorkspacesApi(api_client)

    try:
        # Retrieve all workspaces
        api_response = await api_instance.get_all_workspaces_admin()
        print("The response of AdminWorkspacesApi->get_all_workspaces_admin:\n")
        pprint(api_response)
    except ApiException as e:
        print("Exception when calling AdminWorkspacesApi->get_all_workspaces_admin: %s\n" % e)

```

## Documentation for API Endpoints

All URIs are relative to *http://localhost*

Class | Method | HTTP request | Description
------------ | ------------- | ------------- | -------------
*AdminWorkspacesApi* | [**get_all_workspaces_admin**](docs/AdminWorkspacesApi.md#get_all_workspaces_admin) | **GET** /api/v1/admin/workspaces | Retrieve all workspaces
*AdminWorkspacesApi* | [**get_workspace_admin**](docs/AdminWorkspacesApi.md#get_workspace_admin) | **GET** /api/v1/admin/workspaces/{uuid} | Retrieve a workspace by id
*ApiKeysApi* | [**create_api_key**](docs/ApiKeysApi.md#create_api_key) | **POST** /api/v1/apiKeys | Create new api key
*ApiKeysApi* | [**delete_api_key**](docs/ApiKeysApi.md#delete_api_key) | **DELETE** /api/v1/apiKeys/{uuid} | Delete an existing api key
*ApiKeysApi* | [**get_api_keys**](docs/ApiKeysApi.md#get_api_keys) | **GET** /api/v1/apiKeys | Retrieve all api keys
*ApiKeysApi* | [**update_api_key**](docs/ApiKeysApi.md#update_api_key) | **PUT** /api/v1/apiKeys/{uuid} | Update an api key by its id
*AttacksApi* | [**bruteforce_subdomains**](docs/AttacksApi.md#bruteforce_subdomains) | **POST** /api/v1/attacks/bruteforceSubdomains | Bruteforce subdomains through a DNS wordlist attack
*AttacksApi* | [**delete_attack**](docs/AttacksApi.md#delete_attack) | **DELETE** /api/v1/attacks/{uuid} | Delete an attack and its results
*AttacksApi* | [**dns_resolution**](docs/AttacksApi.md#dns_resolution) | **POST** /api/v1/attacks/dnsResolution | Perform domain name resolution
*AttacksApi* | [**get_all_attacks**](docs/AttacksApi.md#get_all_attacks) | **GET** /api/v1/attacks | Retrieve all attacks the user has access to
*AttacksApi* | [**get_attack**](docs/AttacksApi.md#get_attack) | **GET** /api/v1/attacks/{uuid} | Retrieve an attack by id
*AttacksApi* | [**get_bruteforce_subdomains_results**](docs/AttacksApi.md#get_bruteforce_subdomains_results) | **GET** /api/v1/attacks/{uuid}/bruteforceSubdomainsResults | Retrieve a bruteforce subdomains&#39; results by the attack&#39;s id
*AttacksApi* | [**get_dns_resolution_results**](docs/AttacksApi.md#get_dns_resolution_results) | **GET** /api/v1/attacks/{uuid}/dnsResolutionResults | Retrieve a dns resolution&#39;s results by the attack&#39;s id
*AttacksApi* | [**get_host_alive_results**](docs/AttacksApi.md#get_host_alive_results) | **GET** /api/v1/attacks/{uuid}/hostAliveResults | Retrieve a host alive&#39;s results by the attack&#39;s id
*AttacksApi* | [**get_query_certificate_transparency_results**](docs/AttacksApi.md#get_query_certificate_transparency_results) | **GET** /api/v1/attacks/{uuid}/queryCertificateTransparencyResults | Retrieve a query certificate transparency&#39;s results by the attack&#39;s id
*AttacksApi* | [**get_query_unhashed_results**](docs/AttacksApi.md#get_query_unhashed_results) | **GET** /api/v1/attacks/{uuid}/queryUnhashedResults | Retrieve a query dehashed&#39;s results by the attack&#39;s id
*AttacksApi* | [**get_service_detection_results**](docs/AttacksApi.md#get_service_detection_results) | **GET** /api/v1/attacks/{uuid}/serviceDetectionResults | Retrieve a detect service&#39;s results by the attack&#39;s id
*AttacksApi* | [**get_tcp_port_scan_results**](docs/AttacksApi.md#get_tcp_port_scan_results) | **GET** /api/v1/attacks/{uuid}/tcpPortScanResults | Retrieve a tcp port scan&#39;s results by the attack&#39;s id
*AttacksApi* | [**get_workspace_attacks**](docs/AttacksApi.md#get_workspace_attacks) | **GET** /api/v1/workspaces/{uuid}/attacks | Query all attacks of a workspace
*AttacksApi* | [**hosts_alive_check**](docs/AttacksApi.md#hosts_alive_check) | **POST** /api/v1/attacks/hostsAlive | Check if hosts are reachable
*AttacksApi* | [**query_certificate_transparency**](docs/AttacksApi.md#query_certificate_transparency) | **POST** /api/v1/attacks/queryCertificateTransparency | Query a certificate transparency log collector.
*AttacksApi* | [**query_dehashed**](docs/AttacksApi.md#query_dehashed) | **POST** /api/v1/attacks/queryDehashed | Query the [dehashed](https://dehashed.com/) API.
*AttacksApi* | [**scan_tcp_ports**](docs/AttacksApi.md#scan_tcp_ports) | **POST** /api/v1/attacks/scanTcpPorts | Start a tcp port scan
*AttacksApi* | [**service_detection**](docs/AttacksApi.md#service_detection) | **POST** /api/v1/attacks/serviceDetection | Perform service detection on a ip and port combination
*AuthenticationApi* | [**finish_auth**](docs/AuthenticationApi.md#finish_auth) | **POST** /api/v1/auth/finishAuth | Finishes the authentication with a security key
*AuthenticationApi* | [**finish_register**](docs/AuthenticationApi.md#finish_register) | **POST** /api/v1/auth/finishRegister | Finish the registration of a security key
*AuthenticationApi* | [**login**](docs/AuthenticationApi.md#login) | **POST** /api/v1/auth/login | Login to kraken
*AuthenticationApi* | [**logout**](docs/AuthenticationApi.md#logout) | **GET** /api/v1/auth/logout | Log out of this session
*AuthenticationApi* | [**start_auth**](docs/AuthenticationApi.md#start_auth) | **POST** /api/v1/auth/startAuth | Starts the authentication with a security key
*AuthenticationApi* | [**start_register**](docs/AuthenticationApi.md#start_register) | **POST** /api/v1/auth/startRegister | Start the registration of a security key
*AuthenticationApi* | [**test**](docs/AuthenticationApi.md#test) | **GET** /api/v1/auth/test | Test the current login state
*DomainsApi* | [**create_domain**](docs/DomainsApi.md#create_domain) | **POST** /api/v1/workspaces/{uuid}/domains | Manually add a domain
*DomainsApi* | [**get_all_domains**](docs/DomainsApi.md#get_all_domains) | **POST** /api/v1/workspaces/{uuid}/domains/all | Retrieve all domains of a specific workspace
*DomainsApi* | [**get_domain**](docs/DomainsApi.md#get_domain) | **GET** /api/v1/workspaces/{w_uuid}/domains/{d_uuid} | Retrieve all information about a single domain
*DomainsApi* | [**update_domain**](docs/DomainsApi.md#update_domain) | **PUT** /api/v1/workspaces/{w_uuid}/domains/{d_uuid} | Update a domain
*GlobalTagsApi* | [**create_global_tag**](docs/GlobalTagsApi.md#create_global_tag) | **POST** /api/v1/admin/globalTags | Create a global tag.
*GlobalTagsApi* | [**delete_global_tag**](docs/GlobalTagsApi.md#delete_global_tag) | **DELETE** /api/v1/admin/globalTags/{uuid} | Delete a global tag
*GlobalTagsApi* | [**get_all_global_tags**](docs/GlobalTagsApi.md#get_all_global_tags) | **GET** /api/v1/globalTags | Retrieve all global tags
*GlobalTagsApi* | [**update_global_tag**](docs/GlobalTagsApi.md#update_global_tag) | **PUT** /api/v1/admin/globalTags/{uuid} | Update a global tag
*HostsApi* | [**create_host**](docs/HostsApi.md#create_host) | **POST** /api/v1/workspaces/{uuid}/hosts | Manually add a host
*HostsApi* | [**get_all_hosts**](docs/HostsApi.md#get_all_hosts) | **POST** /api/v1/workspaces/{uuid}/hosts/all | Retrieve all hosts.
*HostsApi* | [**get_host**](docs/HostsApi.md#get_host) | **GET** /api/v1/workspaces/{w_uuid}/hosts/{h_uuid} | Retrieve all information about a single host
*HostsApi* | [**update_host**](docs/HostsApi.md#update_host) | **PUT** /api/v1/workspaces/{w_uuid}/hosts/{h_uuid} | Update a host
*LeechManagementApi* | [**create_leech**](docs/LeechManagementApi.md#create_leech) | **POST** /api/v1/admin/leeches | Create a leech
*LeechManagementApi* | [**delete_leech**](docs/LeechManagementApi.md#delete_leech) | **DELETE** /api/v1/admin/leeches/{uuid} | Delete a leech by its uuid
*LeechManagementApi* | [**gen_leech_config**](docs/LeechManagementApi.md#gen_leech_config) | **GET** /api/v1/admin/leeches/{uuid}/cert | Generate a new config for the leech
*LeechManagementApi* | [**get_all_leeches**](docs/LeechManagementApi.md#get_all_leeches) | **GET** /api/v1/admin/leeches | Retrieve all leeches
*LeechManagementApi* | [**get_leech**](docs/LeechManagementApi.md#get_leech) | **GET** /api/v1/admin/leeches/{uuid} | Retrieve a leech by its id
*LeechManagementApi* | [**update_leech**](docs/LeechManagementApi.md#update_leech) | **PUT** /api/v1/admin/leeches/{uuid} | Update a leech by its id
*OAuthApi* | [**accept**](docs/OAuthApi.md#accept) | **GET** /api/v1/oauth/accept/{uuid} | Endpoint visited by user to grant a requesting application access
*OAuthApi* | [**deny**](docs/OAuthApi.md#deny) | **GET** /api/v1/oauth/deny/{uuid} | Endpoint visited by user to deny a requesting application access
*OAuthApi* | [**info**](docs/OAuthApi.md#info) | **GET** /api/v1/oauth/info/{uuid} | Queried by the frontend to display information about the oauth request to the user
*OAuthApplicationApi* | [**create_oauth_app**](docs/OAuthApplicationApi.md#create_oauth_app) | **POST** /api/v1/admin/applications | Create a new application
*OAuthApplicationApi* | [**delete_oauth_app**](docs/OAuthApplicationApi.md#delete_oauth_app) | **DELETE** /api/v1/admin/applications/{uuid} | Delete an application
*OAuthApplicationApi* | [**get_all_oauth_apps**](docs/OAuthApplicationApi.md#get_all_oauth_apps) | **GET** /api/v1/admin/applications | 
*OAuthApplicationApi* | [**get_oauth_app**](docs/OAuthApplicationApi.md#get_oauth_app) | **GET** /api/v1/admin/applications/{uuid} | 
*OAuthApplicationApi* | [**update_oauth_app**](docs/OAuthApplicationApi.md#update_oauth_app) | **PUT** /api/v1/admin/applications/{uuid} | Update an application
*OAuthDecisionsApi* | [**get_decisions**](docs/OAuthDecisionsApi.md#get_decisions) | **GET** /api/v1/oauthDecisions | Retrieve a user&#39;s remembered oauth decisions
*OAuthDecisionsApi* | [**revoke_decision**](docs/OAuthDecisionsApi.md#revoke_decision) | **DELETE** /api/v1/oauthDecisions/{uuid} | Revoke a user&#39;s remembered oauth decision
*PortsApi* | [**create_port**](docs/PortsApi.md#create_port) | **POST** /api/v1/workspaces/{uuid}/ports | Manually add a port
*PortsApi* | [**get_all_ports**](docs/PortsApi.md#get_all_ports) | **POST** /api/v1/workspaces/{uuid}/ports/all | List the ports of a workspace
*PortsApi* | [**get_port**](docs/PortsApi.md#get_port) | **GET** /api/v1/workspaces/{w_uuid}/ports/{p_uuid} | Retrieve all information about a single port
*PortsApi* | [**update_port**](docs/PortsApi.md#update_port) | **PUT** /api/v1/workspaces/{w_uuid}/ports/{p_uuid} | Update a port
*ServicesApi* | [**create_service**](docs/ServicesApi.md#create_service) | **POST** /api/v1/workspaces/{uuid}/services | Manually add a service
*ServicesApi* | [**get_all_services**](docs/ServicesApi.md#get_all_services) | **POST** /api/v1/workspaces/{uuid}/services/all | List the services of a workspace
*ServicesApi* | [**get_service**](docs/ServicesApi.md#get_service) | **GET** /api/v1/workspaces/{w_uuid}/services/{s_uuid} | Retrieve all information about a single service
*ServicesApi* | [**update_service**](docs/ServicesApi.md#update_service) | **PUT** /api/v1/workspaces/{w_uuid}/services/{s_uuid} | Update a service
*SettingsManagementApi* | [**get_settings**](docs/SettingsManagementApi.md#get_settings) | **GET** /api/v1/admin/settings | Retrieve the currently active settings
*SettingsManagementApi* | [**update_settings**](docs/SettingsManagementApi.md#update_settings) | **PUT** /api/v1/admin/settings | Update the settings
*UserAdminManagementApi* | [**create_user**](docs/UserAdminManagementApi.md#create_user) | **POST** /api/v1/admin/users | Create a user
*UserAdminManagementApi* | [**delete_user**](docs/UserAdminManagementApi.md#delete_user) | **DELETE** /api/v1/admin/users/{uuid} | Delete a user by its uuid
*UserAdminManagementApi* | [**get_all_users_admin**](docs/UserAdminManagementApi.md#get_all_users_admin) | **GET** /api/v1/admin/users | Retrieve all users
*UserAdminManagementApi* | [**get_user**](docs/UserAdminManagementApi.md#get_user) | **GET** /api/v1/admin/users/{uuid} | Retrieve a user by its uuid
*UserManagementApi* | [**get_all_users**](docs/UserManagementApi.md#get_all_users) | **GET** /api/v1/users | Request all users
*UserManagementApi* | [**get_me**](docs/UserManagementApi.md#get_me) | **GET** /api/v1/users/me | Retrieve the own user
*UserManagementApi* | [**set_password**](docs/UserManagementApi.md#set_password) | **POST** /api/v1/users/setPassword | Set a new password
*UserManagementApi* | [**update_me**](docs/UserManagementApi.md#update_me) | **PUT** /api/v1/users/me | Updates the own user
*WebsocketApi* | [**websocket**](docs/WebsocketApi.md#websocket) | **GET** /api/v1/ws | Start a websocket connection
*WordlistApi* | [**get_all_wordlists**](docs/WordlistApi.md#get_all_wordlists) | **GET** /api/v1/wordlists | Get a list of all wordlist for the user to select from when starting an bruteforce subdomains attack
*WordlistManagementApi* | [**create_wordlist_admin**](docs/WordlistManagementApi.md#create_wordlist_admin) | **POST** /api/v1/admin/wordlists | Create a new wordlist
*WordlistManagementApi* | [**delete_wordlist_admin**](docs/WordlistManagementApi.md#delete_wordlist_admin) | **DELETE** /api/v1/admin/wordlists/{uuid} | Delete an existing wordlist
*WordlistManagementApi* | [**get_all_wordlists_admin**](docs/WordlistManagementApi.md#get_all_wordlists_admin) | **GET** /api/v1/admin/wordlists | Get a list of all wordlists including their paths
*WordlistManagementApi* | [**update_wordlist_admin**](docs/WordlistManagementApi.md#update_wordlist_admin) | **PUT** /api/v1/admin/wordlists/{uuid} | Update an existing wordlist
*WorkspaceInvitationsApi* | [**accept_invitation**](docs/WorkspaceInvitationsApi.md#accept_invitation) | **POST** /api/v1/invitations/{uuid}/accept | Accept an invitation to a workspace
*WorkspaceInvitationsApi* | [**decline_invitation**](docs/WorkspaceInvitationsApi.md#decline_invitation) | **POST** /api/v1/invitations/{uuid}/decline | Decline an invitation to a workspace
*WorkspaceInvitationsApi* | [**get_all_invitations**](docs/WorkspaceInvitationsApi.md#get_all_invitations) | **GET** /api/v1/invitations | Retrieve all open invitations to workspaces the currently logged-in user
*WorkspaceTagsApi* | [**create_workspace_tag**](docs/WorkspaceTagsApi.md#create_workspace_tag) | **POST** /api/v1/workspaces/{uuid}/tags | Create a workspace tag.
*WorkspaceTagsApi* | [**delete_workspace_tag**](docs/WorkspaceTagsApi.md#delete_workspace_tag) | **DELETE** /api/v1/workspaces/{w_uuid}/tags/{t_uuid} | Delete a workspace tag
*WorkspaceTagsApi* | [**get_all_workspace_tags**](docs/WorkspaceTagsApi.md#get_all_workspace_tags) | **GET** /api/v1/workspaces/{uuid}/tags | Retrieve all workspace tags
*WorkspaceTagsApi* | [**update_workspace_tag**](docs/WorkspaceTagsApi.md#update_workspace_tag) | **PUT** /api/v1/workspaces/{w_uuid}/tags/{t_uuid} | Update a workspace tag
*WorkspacesApi* | [**create_invitation**](docs/WorkspacesApi.md#create_invitation) | **POST** /api/v1/workspaces/{uuid}/invitations | Invite a user to the workspace
*WorkspacesApi* | [**create_workspace**](docs/WorkspacesApi.md#create_workspace) | **POST** /api/v1/workspaces | Create a new workspace
*WorkspacesApi* | [**delete_workspace**](docs/WorkspacesApi.md#delete_workspace) | **DELETE** /api/v1/workspaces/{uuid} | Delete a workspace by its id
*WorkspacesApi* | [**get_all_workspace_invitations**](docs/WorkspacesApi.md#get_all_workspace_invitations) | **GET** /api/v1/workspaces/{uuid}/invitations | Query all open invitations to a workspace
*WorkspacesApi* | [**get_all_workspaces**](docs/WorkspacesApi.md#get_all_workspaces) | **GET** /api/v1/workspaces | Retrieve all workspaces that the executing user has access to
*WorkspacesApi* | [**get_search_results**](docs/WorkspacesApi.md#get_search_results) | **GET** /api/v1/workspaces/{w_uuid}/search/{s_uuid} | Retrieve results for a search by it&#39;s uuid
*WorkspacesApi* | [**get_searches**](docs/WorkspacesApi.md#get_searches) | **GET** /api/v1/workspaces/{uuid}/search | Query all searches
*WorkspacesApi* | [**get_workspace**](docs/WorkspacesApi.md#get_workspace) | **GET** /api/v1/workspaces/{uuid} | Retrieve a workspace by id
*WorkspacesApi* | [**retract_invitation**](docs/WorkspacesApi.md#retract_invitation) | **DELETE** /api/v1/workspaces/{w_uuid}/invitations/{i_uuid} | Retract an invitation to the workspace
*WorkspacesApi* | [**search**](docs/WorkspacesApi.md#search) | **POST** /api/v1/workspaces/{uuid}/search | Search through a workspaces&#39; data
*WorkspacesApi* | [**transfer_ownership**](docs/WorkspacesApi.md#transfer_ownership) | **POST** /api/v1/workspaces/{uuid}/transfer | Transfer ownership to another account
*WorkspacesApi* | [**update_workspace**](docs/WorkspacesApi.md#update_workspace) | **PUT** /api/v1/workspaces/{uuid} | Updates a workspace by its id


## Documentation For Models

 - [ApiErrorResponse](docs/ApiErrorResponse.md)
 - [ApiStatusCode](docs/ApiStatusCode.md)
 - [AttackType](docs/AttackType.md)
 - [BruteforceSubdomainsRequest](docs/BruteforceSubdomainsRequest.md)
 - [BruteforceSubdomainsResultsPage](docs/BruteforceSubdomainsResultsPage.md)
 - [CertificateTransparencyEntry](docs/CertificateTransparencyEntry.md)
 - [Color](docs/Color.md)
 - [CreateApiKeyRequest](docs/CreateApiKeyRequest.md)
 - [CreateAppRequest](docs/CreateAppRequest.md)
 - [CreateDomainRequest](docs/CreateDomainRequest.md)
 - [CreateGlobalTagRequest](docs/CreateGlobalTagRequest.md)
 - [CreateHostRequest](docs/CreateHostRequest.md)
 - [CreateLeechRequest](docs/CreateLeechRequest.md)
 - [CreatePortRequest](docs/CreatePortRequest.md)
 - [CreateServiceRequest](docs/CreateServiceRequest.md)
 - [CreateUserRequest](docs/CreateUserRequest.md)
 - [CreateWordlistRequest](docs/CreateWordlistRequest.md)
 - [CreateWorkspaceRequest](docs/CreateWorkspaceRequest.md)
 - [CreateWorkspaceTagRequest](docs/CreateWorkspaceTagRequest.md)
 - [DnsResolutionRequest](docs/DnsResolutionRequest.md)
 - [DnsResolutionResultsPage](docs/DnsResolutionResultsPage.md)
 - [DomainCertainty](docs/DomainCertainty.md)
 - [DomainOrNetwork](docs/DomainOrNetwork.md)
 - [DomainResultsPage](docs/DomainResultsPage.md)
 - [FinishRegisterRequest](docs/FinishRegisterRequest.md)
 - [FullApiKey](docs/FullApiKey.md)
 - [FullDecision](docs/FullDecision.md)
 - [FullDomain](docs/FullDomain.md)
 - [FullGlobalTag](docs/FullGlobalTag.md)
 - [FullHost](docs/FullHost.md)
 - [FullOauthClient](docs/FullOauthClient.md)
 - [FullPort](docs/FullPort.md)
 - [FullQueryCertificateTransparencyResult](docs/FullQueryCertificateTransparencyResult.md)
 - [FullService](docs/FullService.md)
 - [FullServiceDetectionResult](docs/FullServiceDetectionResult.md)
 - [FullWordlist](docs/FullWordlist.md)
 - [FullWorkspace](docs/FullWorkspace.md)
 - [FullWorkspaceInvitation](docs/FullWorkspaceInvitation.md)
 - [FullWorkspaceTag](docs/FullWorkspaceTag.md)
 - [GetAllDomainsQuery](docs/GetAllDomainsQuery.md)
 - [GetAllHostsQuery](docs/GetAllHostsQuery.md)
 - [GetAllLeechesResponse](docs/GetAllLeechesResponse.md)
 - [GetAllPortsQuery](docs/GetAllPortsQuery.md)
 - [GetAllServicesQuery](docs/GetAllServicesQuery.md)
 - [GetAllUsersResponse](docs/GetAllUsersResponse.md)
 - [GetAllWordlistsAdminResponse](docs/GetAllWordlistsAdminResponse.md)
 - [GetAllWordlistsResponse](docs/GetAllWordlistsResponse.md)
 - [GetAllWorkspacesResponse](docs/GetAllWorkspacesResponse.md)
 - [GetApiKeysResponse](docs/GetApiKeysResponse.md)
 - [GetAppsResponse](docs/GetAppsResponse.md)
 - [GetGlobalTagsResponse](docs/GetGlobalTagsResponse.md)
 - [GetMyDecisionsResponse](docs/GetMyDecisionsResponse.md)
 - [GetUser](docs/GetUser.md)
 - [GetUserResponse](docs/GetUserResponse.md)
 - [GetWorkspaceTagsResponse](docs/GetWorkspaceTagsResponse.md)
 - [HostAliveResultsPage](docs/HostAliveResultsPage.md)
 - [HostCertainty](docs/HostCertainty.md)
 - [HostResultsPage](docs/HostResultsPage.md)
 - [HostsAliveRequest](docs/HostsAliveRequest.md)
 - [InviteToWorkspace](docs/InviteToWorkspace.md)
 - [LeechConfig](docs/LeechConfig.md)
 - [LeechTlsConfig](docs/LeechTlsConfig.md)
 - [ListAttacks](docs/ListAttacks.md)
 - [LoginRequest](docs/LoginRequest.md)
 - [ManualHostCertainty](docs/ManualHostCertainty.md)
 - [ManualPortCertainty](docs/ManualPortCertainty.md)
 - [ManualServiceCertainty](docs/ManualServiceCertainty.md)
 - [OpenRequestInfo](docs/OpenRequestInfo.md)
 - [OsType](docs/OsType.md)
 - [PageParams](docs/PageParams.md)
 - [PortCertainty](docs/PortCertainty.md)
 - [PortOrRange](docs/PortOrRange.md)
 - [PortProtocol](docs/PortProtocol.md)
 - [PortResultsPage](docs/PortResultsPage.md)
 - [Query](docs/Query.md)
 - [QueryCertificateTransparencyRequest](docs/QueryCertificateTransparencyRequest.md)
 - [QueryCertificateTransparencyResultsPage](docs/QueryCertificateTransparencyResultsPage.md)
 - [QueryDehashedRequest](docs/QueryDehashedRequest.md)
 - [QueryOneOf](docs/QueryOneOf.md)
 - [QueryOneOf1](docs/QueryOneOf1.md)
 - [QueryOneOf2](docs/QueryOneOf2.md)
 - [QueryOneOf3](docs/QueryOneOf3.md)
 - [QueryOneOf4](docs/QueryOneOf4.md)
 - [QueryOneOf5](docs/QueryOneOf5.md)
 - [QueryOneOf6](docs/QueryOneOf6.md)
 - [QueryOneOf7](docs/QueryOneOf7.md)
 - [QueryOneOf8](docs/QueryOneOf8.md)
 - [QueryOneOf9](docs/QueryOneOf9.md)
 - [QueryUnhashedResultsPage](docs/QueryUnhashedResultsPage.md)
 - [ScanTcpPortsRequest](docs/ScanTcpPortsRequest.md)
 - [SearchEntry](docs/SearchEntry.md)
 - [SearchResultEntry](docs/SearchResultEntry.md)
 - [SearchResultEntryOneOf](docs/SearchResultEntryOneOf.md)
 - [SearchResultEntryOneOf1](docs/SearchResultEntryOneOf1.md)
 - [SearchResultEntryOneOf2](docs/SearchResultEntryOneOf2.md)
 - [SearchResultEntryOneOf3](docs/SearchResultEntryOneOf3.md)
 - [SearchResultEntryOneOf4](docs/SearchResultEntryOneOf4.md)
 - [SearchResultEntryOneOf5](docs/SearchResultEntryOneOf5.md)
 - [SearchResultEntryOneOf6](docs/SearchResultEntryOneOf6.md)
 - [SearchResultEntryOneOf7](docs/SearchResultEntryOneOf7.md)
 - [SearchResultEntryOneOf8](docs/SearchResultEntryOneOf8.md)
 - [SearchResultEntryOneOf9](docs/SearchResultEntryOneOf9.md)
 - [SearchResultPage](docs/SearchResultPage.md)
 - [SearchType](docs/SearchType.md)
 - [SearchTypeOneOf](docs/SearchTypeOneOf.md)
 - [SearchTypeOneOf1](docs/SearchTypeOneOf1.md)
 - [SearchTypeOneOf2](docs/SearchTypeOneOf2.md)
 - [SearchTypeOneOf3](docs/SearchTypeOneOf3.md)
 - [SearchTypeOneOf4](docs/SearchTypeOneOf4.md)
 - [SearchWorkspaceRequest](docs/SearchWorkspaceRequest.md)
 - [SearchesResultPage](docs/SearchesResultPage.md)
 - [ServiceCertainty](docs/ServiceCertainty.md)
 - [ServiceDetectionRequest](docs/ServiceDetectionRequest.md)
 - [ServiceDetectionResultsPage](docs/ServiceDetectionResultsPage.md)
 - [ServiceResultsPage](docs/ServiceResultsPage.md)
 - [SetPasswordRequest](docs/SetPasswordRequest.md)
 - [SettingsFull](docs/SettingsFull.md)
 - [SimpleAggregationSource](docs/SimpleAggregationSource.md)
 - [SimpleAttack](docs/SimpleAttack.md)
 - [SimpleBruteforceSubdomainsResult](docs/SimpleBruteforceSubdomainsResult.md)
 - [SimpleDnsResolutionResult](docs/SimpleDnsResolutionResult.md)
 - [SimpleDomain](docs/SimpleDomain.md)
 - [SimpleHost](docs/SimpleHost.md)
 - [SimpleHostAliveResult](docs/SimpleHostAliveResult.md)
 - [SimpleLeech](docs/SimpleLeech.md)
 - [SimpleOauthClient](docs/SimpleOauthClient.md)
 - [SimplePort](docs/SimplePort.md)
 - [SimpleQueryUnhashedResult](docs/SimpleQueryUnhashedResult.md)
 - [SimpleService](docs/SimpleService.md)
 - [SimpleTag](docs/SimpleTag.md)
 - [SimpleTcpPortScanResult](docs/SimpleTcpPortScanResult.md)
 - [SimpleUser](docs/SimpleUser.md)
 - [SimpleWordlist](docs/SimpleWordlist.md)
 - [SimpleWorkspace](docs/SimpleWorkspace.md)
 - [TagType](docs/TagType.md)
 - [TcpPortScanResultsPage](docs/TcpPortScanResultsPage.md)
 - [TransferWorkspaceRequest](docs/TransferWorkspaceRequest.md)
 - [UpdateApiKeyRequest](docs/UpdateApiKeyRequest.md)
 - [UpdateAppRequest](docs/UpdateAppRequest.md)
 - [UpdateDomainRequest](docs/UpdateDomainRequest.md)
 - [UpdateGlobalTag](docs/UpdateGlobalTag.md)
 - [UpdateHostRequest](docs/UpdateHostRequest.md)
 - [UpdateLeechRequest](docs/UpdateLeechRequest.md)
 - [UpdateMeRequest](docs/UpdateMeRequest.md)
 - [UpdatePortRequest](docs/UpdatePortRequest.md)
 - [UpdateServiceRequest](docs/UpdateServiceRequest.md)
 - [UpdateSettingsRequest](docs/UpdateSettingsRequest.md)
 - [UpdateWordlistRequest](docs/UpdateWordlistRequest.md)
 - [UpdateWorkspaceRequest](docs/UpdateWorkspaceRequest.md)
 - [UpdateWorkspaceTag](docs/UpdateWorkspaceTag.md)
 - [UserPermission](docs/UserPermission.md)
 - [UuidResponse](docs/UuidResponse.md)
 - [WorkspaceInvitationList](docs/WorkspaceInvitationList.md)
 - [WsMessage](docs/WsMessage.md)
 - [WsMessageOneOf](docs/WsMessageOneOf.md)
 - [WsMessageOneOf1](docs/WsMessageOneOf1.md)
 - [WsMessageOneOf10](docs/WsMessageOneOf10.md)
 - [WsMessageOneOf11](docs/WsMessageOneOf11.md)
 - [WsMessageOneOf2](docs/WsMessageOneOf2.md)
 - [WsMessageOneOf3](docs/WsMessageOneOf3.md)
 - [WsMessageOneOf4](docs/WsMessageOneOf4.md)
 - [WsMessageOneOf5](docs/WsMessageOneOf5.md)
 - [WsMessageOneOf6](docs/WsMessageOneOf6.md)
 - [WsMessageOneOf7](docs/WsMessageOneOf7.md)
 - [WsMessageOneOf8](docs/WsMessageOneOf8.md)
 - [WsMessageOneOf9](docs/WsMessageOneOf9.md)


<a id="documentation-for-authorization"></a>
## Documentation For Authorization


Authentication schemes defined for the API:
<a id="api_key"></a>
### api_key

- **Type**: API key
- **API key parameter name**: id
- **Location**: 


## Author

git@omikron.dev



