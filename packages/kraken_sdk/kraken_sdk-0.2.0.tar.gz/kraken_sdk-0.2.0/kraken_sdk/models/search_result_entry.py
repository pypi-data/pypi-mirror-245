# coding: utf-8

"""
    kraken

    The core component of kraken-project

    The version of the OpenAPI document: 0.1.0
    Contact: git@omikron.dev
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401

from typing import Any, List, Optional
from pydantic import BaseModel, Field, StrictStr, ValidationError, field_validator
from kraken_sdk.models.search_result_entry_one_of import SearchResultEntryOneOf
from kraken_sdk.models.search_result_entry_one_of1 import SearchResultEntryOneOf1
from kraken_sdk.models.search_result_entry_one_of2 import SearchResultEntryOneOf2
from kraken_sdk.models.search_result_entry_one_of3 import SearchResultEntryOneOf3
from kraken_sdk.models.search_result_entry_one_of4 import SearchResultEntryOneOf4
from kraken_sdk.models.search_result_entry_one_of5 import SearchResultEntryOneOf5
from kraken_sdk.models.search_result_entry_one_of6 import SearchResultEntryOneOf6
from kraken_sdk.models.search_result_entry_one_of7 import SearchResultEntryOneOf7
from kraken_sdk.models.search_result_entry_one_of8 import SearchResultEntryOneOf8
from kraken_sdk.models.search_result_entry_one_of9 import SearchResultEntryOneOf9
from typing import Union, Any, List, TYPE_CHECKING, Optional, Dict
from typing_extensions import Literal
from pydantic import StrictStr, Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

SEARCHRESULTENTRY_ONE_OF_SCHEMAS = ["SearchResultEntryOneOf", "SearchResultEntryOneOf1", "SearchResultEntryOneOf2", "SearchResultEntryOneOf3", "SearchResultEntryOneOf4", "SearchResultEntryOneOf5", "SearchResultEntryOneOf6", "SearchResultEntryOneOf7", "SearchResultEntryOneOf8", "SearchResultEntryOneOf9"]

class SearchResultEntry(BaseModel):
    """
    Dynamic result
    """
    # data type: SearchResultEntryOneOf
    oneof_schema_1_validator: Optional[SearchResultEntryOneOf] = None
    # data type: SearchResultEntryOneOf1
    oneof_schema_2_validator: Optional[SearchResultEntryOneOf1] = None
    # data type: SearchResultEntryOneOf2
    oneof_schema_3_validator: Optional[SearchResultEntryOneOf2] = None
    # data type: SearchResultEntryOneOf3
    oneof_schema_4_validator: Optional[SearchResultEntryOneOf3] = None
    # data type: SearchResultEntryOneOf4
    oneof_schema_5_validator: Optional[SearchResultEntryOneOf4] = None
    # data type: SearchResultEntryOneOf5
    oneof_schema_6_validator: Optional[SearchResultEntryOneOf5] = None
    # data type: SearchResultEntryOneOf6
    oneof_schema_7_validator: Optional[SearchResultEntryOneOf6] = None
    # data type: SearchResultEntryOneOf7
    oneof_schema_8_validator: Optional[SearchResultEntryOneOf7] = None
    # data type: SearchResultEntryOneOf8
    oneof_schema_9_validator: Optional[SearchResultEntryOneOf8] = None
    # data type: SearchResultEntryOneOf9
    oneof_schema_10_validator: Optional[SearchResultEntryOneOf9] = None
    actual_instance: Optional[Union[SearchResultEntryOneOf, SearchResultEntryOneOf1, SearchResultEntryOneOf2, SearchResultEntryOneOf3, SearchResultEntryOneOf4, SearchResultEntryOneOf5, SearchResultEntryOneOf6, SearchResultEntryOneOf7, SearchResultEntryOneOf8, SearchResultEntryOneOf9]] = None
    one_of_schemas: List[str] = Literal["SearchResultEntryOneOf", "SearchResultEntryOneOf1", "SearchResultEntryOneOf2", "SearchResultEntryOneOf3", "SearchResultEntryOneOf4", "SearchResultEntryOneOf5", "SearchResultEntryOneOf6", "SearchResultEntryOneOf7", "SearchResultEntryOneOf8", "SearchResultEntryOneOf9"]

    model_config = {
        "validate_assignment": True
    }


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = SearchResultEntry.model_construct()
        error_messages = []
        match = 0
        # validate data type: SearchResultEntryOneOf
        if not isinstance(v, SearchResultEntryOneOf):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SearchResultEntryOneOf`")
        else:
            match += 1
        # validate data type: SearchResultEntryOneOf1
        if not isinstance(v, SearchResultEntryOneOf1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SearchResultEntryOneOf1`")
        else:
            match += 1
        # validate data type: SearchResultEntryOneOf2
        if not isinstance(v, SearchResultEntryOneOf2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SearchResultEntryOneOf2`")
        else:
            match += 1
        # validate data type: SearchResultEntryOneOf3
        if not isinstance(v, SearchResultEntryOneOf3):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SearchResultEntryOneOf3`")
        else:
            match += 1
        # validate data type: SearchResultEntryOneOf4
        if not isinstance(v, SearchResultEntryOneOf4):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SearchResultEntryOneOf4`")
        else:
            match += 1
        # validate data type: SearchResultEntryOneOf5
        if not isinstance(v, SearchResultEntryOneOf5):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SearchResultEntryOneOf5`")
        else:
            match += 1
        # validate data type: SearchResultEntryOneOf6
        if not isinstance(v, SearchResultEntryOneOf6):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SearchResultEntryOneOf6`")
        else:
            match += 1
        # validate data type: SearchResultEntryOneOf7
        if not isinstance(v, SearchResultEntryOneOf7):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SearchResultEntryOneOf7`")
        else:
            match += 1
        # validate data type: SearchResultEntryOneOf8
        if not isinstance(v, SearchResultEntryOneOf8):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SearchResultEntryOneOf8`")
        else:
            match += 1
        # validate data type: SearchResultEntryOneOf9
        if not isinstance(v, SearchResultEntryOneOf9):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SearchResultEntryOneOf9`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in SearchResultEntry with oneOf schemas: SearchResultEntryOneOf, SearchResultEntryOneOf1, SearchResultEntryOneOf2, SearchResultEntryOneOf3, SearchResultEntryOneOf4, SearchResultEntryOneOf5, SearchResultEntryOneOf6, SearchResultEntryOneOf7, SearchResultEntryOneOf8, SearchResultEntryOneOf9. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in SearchResultEntry with oneOf schemas: SearchResultEntryOneOf, SearchResultEntryOneOf1, SearchResultEntryOneOf2, SearchResultEntryOneOf3, SearchResultEntryOneOf4, SearchResultEntryOneOf5, SearchResultEntryOneOf6, SearchResultEntryOneOf7, SearchResultEntryOneOf8, SearchResultEntryOneOf9. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into SearchResultEntryOneOf
        try:
            instance.actual_instance = SearchResultEntryOneOf.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SearchResultEntryOneOf1
        try:
            instance.actual_instance = SearchResultEntryOneOf1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SearchResultEntryOneOf2
        try:
            instance.actual_instance = SearchResultEntryOneOf2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SearchResultEntryOneOf3
        try:
            instance.actual_instance = SearchResultEntryOneOf3.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SearchResultEntryOneOf4
        try:
            instance.actual_instance = SearchResultEntryOneOf4.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SearchResultEntryOneOf5
        try:
            instance.actual_instance = SearchResultEntryOneOf5.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SearchResultEntryOneOf6
        try:
            instance.actual_instance = SearchResultEntryOneOf6.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SearchResultEntryOneOf7
        try:
            instance.actual_instance = SearchResultEntryOneOf7.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SearchResultEntryOneOf8
        try:
            instance.actual_instance = SearchResultEntryOneOf8.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SearchResultEntryOneOf9
        try:
            instance.actual_instance = SearchResultEntryOneOf9.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into SearchResultEntry with oneOf schemas: SearchResultEntryOneOf, SearchResultEntryOneOf1, SearchResultEntryOneOf2, SearchResultEntryOneOf3, SearchResultEntryOneOf4, SearchResultEntryOneOf5, SearchResultEntryOneOf6, SearchResultEntryOneOf7, SearchResultEntryOneOf8, SearchResultEntryOneOf9. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into SearchResultEntry with oneOf schemas: SearchResultEntryOneOf, SearchResultEntryOneOf1, SearchResultEntryOneOf2, SearchResultEntryOneOf3, SearchResultEntryOneOf4, SearchResultEntryOneOf5, SearchResultEntryOneOf6, SearchResultEntryOneOf7, SearchResultEntryOneOf8, SearchResultEntryOneOf9. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        to_dict = getattr(self.actual_instance, "to_dict", None)
        if callable(to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


