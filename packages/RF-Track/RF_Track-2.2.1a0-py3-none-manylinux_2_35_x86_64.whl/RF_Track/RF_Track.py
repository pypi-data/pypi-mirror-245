# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _RF_Track
else:
    import _RF_Track

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


SHARED_PTR_DISOWN = _RF_Track.SHARED_PTR_DISOWN
RF_TRACK_VERSION = _RF_Track.RF_TRACK_VERSION

def relativistic_velocity_addition(u, v):
    return _RF_Track.relativistic_velocity_addition(u, v)

def lorentz_boost(*args):
    return _RF_Track.lorentz_boost(*args)

def lorentz_boost_matrix(v):
    return _RF_Track.lorentz_boost_matrix(v)

def rng_set(name):
    return _RF_Track.rng_set(name)

def rng_set_seed(s):
    return _RF_Track.rng_set_seed(s)

def rng_get():
    return _RF_Track.rng_get()
class Parallel_ODE_Solver(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _RF_Track.Parallel_ODE_Solver_swiginit(self, _RF_Track.new_Parallel_ODE_Solver())
    __swig_destroy__ = _RF_Track.delete_Parallel_ODE_Solver

    def set_odeint_epsabs(self, epsabs):
        return _RF_Track.Parallel_ODE_Solver_set_odeint_epsabs(self, epsabs)

    def set_odeint_epsrel(self, epsrel):
        return _RF_Track.Parallel_ODE_Solver_set_odeint_epsrel(self, epsrel)

    def get_odeint_epsabs(self):
        return _RF_Track.Parallel_ODE_Solver_get_odeint_epsabs(self)

    def get_odeint_epsrel(self):
        return _RF_Track.Parallel_ODE_Solver_get_odeint_epsrel(self)

    def get_odeint_algorithm(self):
        return _RF_Track.Parallel_ODE_Solver_get_odeint_algorithm(self)

    def set_odeint_algorithm(self, name):
        return _RF_Track.Parallel_ODE_Solver_set_odeint_algorithm(self, name)

    def get_gsl_driver(self, i):
        return _RF_Track.Parallel_ODE_Solver_get_gsl_driver(self, i)

    def init_gsl_drivers(self, *args):
        return _RF_Track.Parallel_ODE_Solver_init_gsl_drivers(self, *args)

    def free_gsl_drivers(self):
        return _RF_Track.Parallel_ODE_Solver_free_gsl_drivers(self)

    def use_analytic(self):
        return _RF_Track.Parallel_ODE_Solver_use_analytic(self)

    def use_leapfrog(self):
        return _RF_Track.Parallel_ODE_Solver_use_leapfrog(self)

    def use_gsl(self):
        return _RF_Track.Parallel_ODE_Solver_use_gsl(self)

# Register Parallel_ODE_Solver in _RF_Track:
_RF_Track.Parallel_ODE_Solver_swigregister(Parallel_ODE_Solver)
cvar = _RF_Track.cvar
version = cvar.version
max_number_of_threads = cvar.max_number_of_threads
clight = cvar.clight
muonmass = cvar.muonmass
protonmass = cvar.protonmass
electronmass = cvar.electronmass
muonlifetime = cvar.muonlifetime
s = cvar.s
ms = cvar.ms
us = cvar.us
ns = cvar.ns
ps = cvar.ps
fs = cvar.fs
C = cvar.C
mC = cvar.mC
uC = cvar.uC
nC = cvar.nC
pC = cvar.pC

class TrackingOptions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    odeint_algorithm = property(_RF_Track.TrackingOptions_odeint_algorithm_get, _RF_Track.TrackingOptions_odeint_algorithm_set)
    odeint_epsabs = property(_RF_Track.TrackingOptions_odeint_epsabs_get, _RF_Track.TrackingOptions_odeint_epsabs_set)
    odeint_epsrel = property(_RF_Track.TrackingOptions_odeint_epsrel_get, _RF_Track.TrackingOptions_odeint_epsrel_set)
    backtrack_at_entrance = property(_RF_Track.TrackingOptions_backtrack_at_entrance_get, _RF_Track.TrackingOptions_backtrack_at_entrance_set)
    verbosity = property(_RF_Track.TrackingOptions_verbosity_get, _RF_Track.TrackingOptions_verbosity_set)
    dt_mm = property(_RF_Track.TrackingOptions_dt_mm_get, _RF_Track.TrackingOptions_dt_mm_set)
    t_max_mm = property(_RF_Track.TrackingOptions_t_max_mm_get, _RF_Track.TrackingOptions_t_max_mm_set)
    t_min_mm = property(_RF_Track.TrackingOptions_t_min_mm_get, _RF_Track.TrackingOptions_t_min_mm_set)
    tt_dt_mm = property(_RF_Track.TrackingOptions_tt_dt_mm_get, _RF_Track.TrackingOptions_tt_dt_mm_set)
    tt_select = property(_RF_Track.TrackingOptions_tt_select_get, _RF_Track.TrackingOptions_tt_select_set)
    sc_dt_mm = property(_RF_Track.TrackingOptions_sc_dt_mm_get, _RF_Track.TrackingOptions_sc_dt_mm_set)
    cfx_dt_mm = property(_RF_Track.TrackingOptions_cfx_dt_mm_get, _RF_Track.TrackingOptions_cfx_dt_mm_set)
    wp_dt_mm = property(_RF_Track.TrackingOptions_wp_dt_mm_get, _RF_Track.TrackingOptions_wp_dt_mm_set)
    wp_basename = property(_RF_Track.TrackingOptions_wp_basename_get, _RF_Track.TrackingOptions_wp_basename_set)
    wp_gzip = property(_RF_Track.TrackingOptions_wp_gzip_get, _RF_Track.TrackingOptions_wp_gzip_set)

    def __init__(self):
        _RF_Track.TrackingOptions_swiginit(self, _RF_Track.new_TrackingOptions())
    __swig_destroy__ = _RF_Track.delete_TrackingOptions

# Register TrackingOptions in _RF_Track:
_RF_Track.TrackingOptions_swigregister(TrackingOptions)
class Aperture(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NONE = _RF_Track.Aperture_NONE
    RECTANGULAR = _RF_Track.Aperture_RECTANGULAR
    CIRCULAR = _RF_Track.Aperture_CIRCULAR

    def is_point_inside_aperture(self, x, y):
        return _RF_Track.Aperture_is_point_inside_aperture(self, x, y)

    def is_particle_inside_aperture(self, *args):
        return _RF_Track.Aperture_is_particle_inside_aperture(self, *args)

    def get_aperture_area(self):
        return _RF_Track.Aperture_get_aperture_area(self)

    def get_aperture_x(self):
        return _RF_Track.Aperture_get_aperture_x(self)

    def get_aperture_y(self):
        return _RF_Track.Aperture_get_aperture_y(self)

    def get_aperture_shape(self):
        return _RF_Track.Aperture_get_aperture_shape(self)

    def set_aperture_x(self, ax):
        return _RF_Track.Aperture_set_aperture_x(self, ax)

    def set_aperture_y(self, ay):
        return _RF_Track.Aperture_set_aperture_y(self, ay)

    def set_aperture(self, *args):
        return _RF_Track.Aperture_set_aperture(self, *args)

    def set_aperture_shape(self, shape):
        return _RF_Track.Aperture_set_aperture_shape(self, shape)

    def __init__(self):
        _RF_Track.Aperture_swiginit(self, _RF_Track.new_Aperture())
    __swig_destroy__ = _RF_Track.delete_Aperture

# Register Aperture in _RF_Track:
_RF_Track.Aperture_swigregister(Aperture)
class Element(Aperture):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RF_Track.delete_Element

    def clone(self):
        return _RF_Track.Element_clone(self)

    def set_offsets(self, *args):
        return _RF_Track.Element_set_offsets(self, *args)

    def get_nsteps(self):
        return _RF_Track.Element_get_nsteps(self)

    def get_tt_nsteps(self):
        return _RF_Track.Element_get_tt_nsteps(self)

    def get_sc_nsteps(self):
        return _RF_Track.Element_get_sc_nsteps(self)

    def get_cfx_nsteps(self):
        return _RF_Track.Element_get_cfx_nsteps(self)

    def get_length(self):
        return _RF_Track.Element_get_length(self)

    def set_tt_nsteps(self, tt_nsteps_):
        return _RF_Track.Element_set_tt_nsteps(self, tt_nsteps_)

    def set_sc_nsteps(self, sc_nsteps_):
        return _RF_Track.Element_set_sc_nsteps(self, sc_nsteps_)

    def set_cfx_nsteps(self, cfx_nsteps_):
        return _RF_Track.Element_set_cfx_nsteps(self, cfx_nsteps_)

    def set_nsteps(self, nsteps_):
        return _RF_Track.Element_set_nsteps(self, nsteps_)

    def get_field(self, *args):
        return _RF_Track.Element_get_field(self, *args)

    def add_collective_effect(self, e_ptr):
        return _RF_Track.Element_add_collective_effect(self, e_ptr)

    def clear_collective_effects(self):
        return _RF_Track.Element_clear_collective_effects(self)

# Register Element in _RF_Track:
_RF_Track.Element_swigregister(Element)
class GenericField(Element, Parallel_ODE_Solver):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_length(self, length_):
        return _RF_Track.GenericField_set_length(self, length_)

    def enable_end_fields(self):
        return _RF_Track.GenericField_enable_end_fields(self)

    def disable_end_fields(self):
        return _RF_Track.GenericField_disable_end_fields(self)
    __swig_destroy__ = _RF_Track.delete_GenericField

# Register GenericField in _RF_Track:
_RF_Track.GenericField_swigregister(GenericField)
class ConstantField(GenericField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, length=0.0):
        _RF_Track.ConstantField_swiginit(self, _RF_Track.new_ConstantField(length))

    def get_static_Efield(self):
        return _RF_Track.ConstantField_get_static_Efield(self)

    def get_static_Bfield(self):
        return _RF_Track.ConstantField_get_static_Bfield(self)

    def set_static_Efield(self, Ex, Ey, Ez):
        return _RF_Track.ConstantField_set_static_Efield(self, Ex, Ey, Ez)

    def set_static_Bfield(self, Bx, By, Bz):
        return _RF_Track.ConstantField_set_static_Bfield(self, Bx, By, Bz)
    __swig_destroy__ = _RF_Track.delete_ConstantField

# Register ConstantField in _RF_Track:
_RF_Track.ConstantField_swigregister(ConstantField)
class Drift(ConstantField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, length=0.0):
        _RF_Track.Drift_swiginit(self, _RF_Track.new_Drift(length))
    __swig_destroy__ = _RF_Track.delete_Drift

# Register Drift in _RF_Track:
_RF_Track.Drift_swigregister(Drift)
class TimeDependent_Field(GenericField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, length=0.0):
        _RF_Track.TimeDependent_Field_swiginit(self, _RF_Track.new_TimeDependent_Field(length))

    def get_t0(self):
        return _RF_Track.TimeDependent_Field_get_t0(self)

    def set_t0(self, t):
        return _RF_Track.TimeDependent_Field_set_t0(self, t)

    def unset_t0(self):
        return _RF_Track.TimeDependent_Field_unset_t0(self)

    def synchronize_with(self, ref):
        return _RF_Track.TimeDependent_Field_synchronize_with(self, ref)

    def t0_is_synchronized(self):
        return _RF_Track.TimeDependent_Field_t0_is_synchronized(self)

    def t0_is_set(self):
        return _RF_Track.TimeDependent_Field_t0_is_set(self)

    def t0_is_unset(self):
        return _RF_Track.TimeDependent_Field_t0_is_unset(self)
    __swig_destroy__ = _RF_Track.delete_TimeDependent_Field

# Register TimeDependent_Field in _RF_Track:
_RF_Track.TimeDependent_Field_swigregister(TimeDependent_Field)
class RF_Field(TimeDependent_Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def get_phi(self):
        return _RF_Track.RF_Field_get_phi(self)

    def get_phid(self):
        return _RF_Track.RF_Field_get_phid(self)

    def get_period(self):
        return _RF_Track.RF_Field_get_period(self)

    def set_phi(self, p):
        return _RF_Track.RF_Field_set_phi(self, p)

    def set_phid(self, p):
        return _RF_Track.RF_Field_set_phid(self, p)

    def get_frequency(self):
        return _RF_Track.RF_Field_get_frequency(self)

    def set_frequency(self, frequency):
        return _RF_Track.RF_Field_set_frequency(self, frequency)

    def get_field_complex(self, x, y, z, t):
        return _RF_Track.RF_Field_get_field_complex(self, x, y, z, t)
    __swig_destroy__ = _RF_Track.delete_RF_Field

# Register RF_Field in _RF_Track:
_RF_Track.RF_Field_swigregister(RF_Field)
class SBend(Element):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.SBend_swiginit(self, _RF_Track.new_SBend(*args))

    def get_E1(self):
        return _RF_Track.SBend_get_E1(self)

    def get_E2(self):
        return _RF_Track.SBend_get_E2(self)

    def get_E1d(self):
        return _RF_Track.SBend_get_E1d(self)

    def get_E2d(self):
        return _RF_Track.SBend_get_E2d(self)

    def get_h(self):
        return _RF_Track.SBend_get_h(self)

    def get_K0(self):
        return _RF_Track.SBend_get_K0(self)

    def get_K1(self):
        return _RF_Track.SBend_get_K1(self)

    def get_K1L(self):
        return _RF_Track.SBend_get_K1L(self)

    def get_gradient(self):
        return _RF_Track.SBend_get_gradient(self)

    def get_angle(self):
        return _RF_Track.SBend_get_angle(self)

    def get_angled(self):
        return _RF_Track.SBend_get_angled(self)

    def get_Brho(self):
        return _RF_Track.SBend_get_Brho(self)

    def get_Bfield(self):
        return _RF_Track.SBend_get_Bfield(self)

    def get_P_over_Q(self):
        return _RF_Track.SBend_get_P_over_Q(self)

    def set_E1(self, a):
        return _RF_Track.SBend_set_E1(self, a)

    def set_E2(self, a):
        return _RF_Track.SBend_set_E2(self, a)

    def set_E1d(self, a):
        return _RF_Track.SBend_set_E1d(self, a)

    def set_E2d(self, a):
        return _RF_Track.SBend_set_E2d(self, a)

    def set_h(self, h_):
        return _RF_Track.SBend_set_h(self, h_)

    def set_hgap(self, hgap_):
        return _RF_Track.SBend_set_hgap(self, hgap_)

    def set_fint(self, fint_):
        return _RF_Track.SBend_set_fint(self, fint_)

    def set_K0(self, K0):
        return _RF_Track.SBend_set_K0(self, K0)

    def set_K1(self, K1):
        return _RF_Track.SBend_set_K1(self, K1)

    def set_K1L(self, K1L):
        return _RF_Track.SBend_set_K1L(self, K1L)

    def set_gradient(self, gradient):
        return _RF_Track.SBend_set_gradient(self, gradient)

    def set_angle(self, a):
        return _RF_Track.SBend_set_angle(self, a)

    def set_angled(self, a):
        return _RF_Track.SBend_set_angled(self, a)

    def set_length(self, l):
        return _RF_Track.SBend_set_length(self, l)

    def set_Brho(self, Br):
        return _RF_Track.SBend_set_Brho(self, Br)

    def set_Bfield(self, B):
        return _RF_Track.SBend_set_Bfield(self, B)

    def set_P_over_Q(self, P_Q):
        return _RF_Track.SBend_set_P_over_Q(self, P_Q)
    __swig_destroy__ = _RF_Track.delete_SBend

# Register SBend in _RF_Track:
_RF_Track.SBend_swigregister(SBend)
class Absorber(ConstantField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.Absorber_swiginit(self, _RF_Track.new_Absorber(*args))

    def enable_log_term(self):
        return _RF_Track.Absorber_enable_log_term(self)

    def disable_log_term(self):
        return _RF_Track.Absorber_disable_log_term(self)

    def set_shape(self, shape, ax, ay=-1.0):
        return _RF_Track.Absorber_set_shape(self, shape, ax, ay)

    def get_shape(self):
        return _RF_Track.Absorber_get_shape(self)

    def enable_multiple_coulomb_scattering(self):
        return _RF_Track.Absorber_enable_multiple_coulomb_scattering(self)

    def enable_energy_straggling(self):
        return _RF_Track.Absorber_enable_energy_straggling(self)

    def enable_stopping_power(self):
        return _RF_Track.Absorber_enable_stopping_power(self)

    def enable_freuhhwirth_model(self):
        return _RF_Track.Absorber_enable_freuhhwirth_model(self)

    def disable_freuhhwirth_model(self):
        return _RF_Track.Absorber_disable_freuhhwirth_model(self)

    def enable_wentzel_model(self):
        return _RF_Track.Absorber_enable_wentzel_model(self)

    def disable_wentzel_model(self):
        return _RF_Track.Absorber_disable_wentzel_model(self)

    def disable_multiple_coulomb_scattering(self):
        return _RF_Track.Absorber_disable_multiple_coulomb_scattering(self)

    def disable_energy_straggling(self):
        return _RF_Track.Absorber_disable_energy_straggling(self)

    def disable_stopping_power(self):
        return _RF_Track.Absorber_disable_stopping_power(self)
    __swig_destroy__ = _RF_Track.delete_Absorber

# Register Absorber in _RF_Track:
_RF_Track.Absorber_swigregister(Absorber)
class TransferLine(Element):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.TransferLine_swiginit(self, _RF_Track.new_TransferLine(*args))
    __swig_destroy__ = _RF_Track.delete_TransferLine

# Register TransferLine in _RF_Track:
_RF_Track.TransferLine_swigregister(TransferLine)
class Quadrupole(Element):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.Quadrupole_swiginit(self, _RF_Track.new_Quadrupole(*args))

    def get_K1(self, P_over_Q):
        return _RF_Track.Quadrupole_get_K1(self, P_over_Q)

    def get_K1L(self, P_over_Q):
        return _RF_Track.Quadrupole_get_K1L(self, P_over_Q)

    def get_strength(self):
        return _RF_Track.Quadrupole_get_strength(self)

    def get_gradient(self):
        return _RF_Track.Quadrupole_get_gradient(self)

    def set_K1(self, P_over_Q, k1):
        return _RF_Track.Quadrupole_set_K1(self, P_over_Q, k1)

    def set_K1L(self, P_over_Q, K1L):
        return _RF_Track.Quadrupole_set_K1L(self, P_over_Q, K1L)

    def set_length(self, l):
        return _RF_Track.Quadrupole_set_length(self, l)

    def set_strength(self, s):
        return _RF_Track.Quadrupole_set_strength(self, s)

    def set_gradient(self, G):
        return _RF_Track.Quadrupole_set_gradient(self, G)
    __swig_destroy__ = _RF_Track.delete_Quadrupole

# Register Quadrupole in _RF_Track:
_RF_Track.Quadrupole_swigregister(Quadrupole)
class Particle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mass = property(_RF_Track.Particle_mass_get, _RF_Track.Particle_mass_set)
    Q = property(_RF_Track.Particle_Q_get, _RF_Track.Particle_Q_set)
    N = property(_RF_Track.Particle_N_get, _RF_Track.Particle_N_set)
    x = property(_RF_Track.Particle_x_get, _RF_Track.Particle_x_set)
    xp = property(_RF_Track.Particle_xp_get, _RF_Track.Particle_xp_set)
    y = property(_RF_Track.Particle_y_get, _RF_Track.Particle_y_set)
    yp = property(_RF_Track.Particle_yp_get, _RF_Track.Particle_yp_set)
    t = property(_RF_Track.Particle_t_get, _RF_Track.Particle_t_set)
    Pc = property(_RF_Track.Particle_Pc_get, _RF_Track.Particle_Pc_set)
    S_lost = property(_RF_Track.Particle_S_lost_get, _RF_Track.Particle_S_lost_set)
    lifetime = property(_RF_Track.Particle_lifetime_get, _RF_Track.Particle_lifetime_set)

    def __init__(self, *args):
        _RF_Track.Particle_swiginit(self, _RF_Track.new_Particle(*args))

    def __nonzero__(self):
        return _RF_Track.Particle_is_valid(self)
    __bool__ = __nonzero__



    def lost_at(self, S):
        return _RF_Track.Particle_lost_at(self, S)

    def get_Pc_sqr(self):
        return _RF_Track.Particle_get_Pc_sqr(self)

    def get_Pc(self):
        return _RF_Track.Particle_get_Pc(self)

    def get_total_energy_sqr(self):
        return _RF_Track.Particle_get_total_energy_sqr(self)

    def get_total_energy(self):
        return _RF_Track.Particle_get_total_energy(self)

    def get_kinetic_energy(self):
        return _RF_Track.Particle_get_kinetic_energy(self)

    def get_delta_plus_1(self, P0c):
        return _RF_Track.Particle_get_delta_plus_1(self, P0c)

    def get_delta(self, P0c):
        return _RF_Track.Particle_get_delta(self, P0c)

    def get_beta_sqr(self):
        return _RF_Track.Particle_get_beta_sqr(self)

    def get_beta(self):
        return _RF_Track.Particle_get_beta(self)

    def get_gamma_sqr(self):
        return _RF_Track.Particle_get_gamma_sqr(self)

    def get_gamma(self):
        return _RF_Track.Particle_get_gamma(self)

    def get_pt(self, P0c):
        return _RF_Track.Particle_get_pt(self, P0c)

    def get_xp_yp_zp(self):
        return _RF_Track.Particle_get_xp_yp_zp(self)

    def get_Vx_Vy_Vz(self):
        return _RF_Track.Particle_get_Vx_Vy_Vz(self)

    def get_Px_Py_Pz(self):
        return _RF_Track.Particle_get_Px_Py_Pz(self)

    def get_px_py_pz(self, P0c):
        return _RF_Track.Particle_get_px_py_pz(self, P0c)

    def get_four_momentum(self):
        return _RF_Track.Particle_get_four_momentum(self)

    def get_four_velocity(self):
        return _RF_Track.Particle_get_four_velocity(self)

    def drift(self, dS):
        return _RF_Track.Particle_drift(self, dS)

    def kick(self, force, dS):
        return _RF_Track.Particle_kick(self, force, dS)

    def apply_force(self, force, dS):
        return _RF_Track.Particle_apply_force(self, force, dS)
    __swig_destroy__ = _RF_Track.delete_Particle

# Register Particle in _RF_Track:
_RF_Track.Particle_swigregister(Particle)
class ParticleT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mass = property(_RF_Track.ParticleT_mass_get, _RF_Track.ParticleT_mass_set)
    Q = property(_RF_Track.ParticleT_Q_get, _RF_Track.ParticleT_Q_set)
    N = property(_RF_Track.ParticleT_N_get, _RF_Track.ParticleT_N_set)
    X = property(_RF_Track.ParticleT_X_get, _RF_Track.ParticleT_X_set)
    Px = property(_RF_Track.ParticleT_Px_get, _RF_Track.ParticleT_Px_set)
    Y = property(_RF_Track.ParticleT_Y_get, _RF_Track.ParticleT_Y_set)
    Py = property(_RF_Track.ParticleT_Py_get, _RF_Track.ParticleT_Py_set)
    Z = property(_RF_Track.ParticleT_Z_get, _RF_Track.ParticleT_Z_set)
    Pz = property(_RF_Track.ParticleT_Pz_get, _RF_Track.ParticleT_Pz_set)
    t0 = property(_RF_Track.ParticleT_t0_get, _RF_Track.ParticleT_t0_set)
    t_lost = property(_RF_Track.ParticleT_t_lost_get, _RF_Track.ParticleT_t_lost_set)
    lifetime = property(_RF_Track.ParticleT_lifetime_get, _RF_Track.ParticleT_lifetime_set)

    def __init__(self, *args):
        _RF_Track.ParticleT_swiginit(self, _RF_Track.new_ParticleT(*args))

    def __nonzero__(self):
        return _RF_Track.ParticleT_is_valid(self)
    __bool__ = __nonzero__



    def lost_at(self, t):
        return _RF_Track.ParticleT_lost_at(self, t)

    def get_Pc_sqr(self):
        return _RF_Track.ParticleT_get_Pc_sqr(self)

    def get_Pc(self):
        return _RF_Track.ParticleT_get_Pc(self)

    def get_total_energy_sqr(self):
        return _RF_Track.ParticleT_get_total_energy_sqr(self)

    def get_total_energy(self):
        return _RF_Track.ParticleT_get_total_energy(self)

    def get_kinetic_energy(self):
        return _RF_Track.ParticleT_get_kinetic_energy(self)

    def get_delta_plus_1(self, P0c):
        return _RF_Track.ParticleT_get_delta_plus_1(self, P0c)

    def get_delta(self, P0c):
        return _RF_Track.ParticleT_get_delta(self, P0c)

    def get_beta_sqr(self):
        return _RF_Track.ParticleT_get_beta_sqr(self)

    def get_beta(self):
        return _RF_Track.ParticleT_get_beta(self)

    def get_gamma_sqr(self):
        return _RF_Track.ParticleT_get_gamma_sqr(self)

    def get_gamma(self):
        return _RF_Track.ParticleT_get_gamma(self)

    def get_pt(self, P0c):
        return _RF_Track.ParticleT_get_pt(self, P0c)

    def get_xp_yp_zp(self):
        return _RF_Track.ParticleT_get_xp_yp_zp(self)

    def get_Vx_Vy_Vz(self):
        return _RF_Track.ParticleT_get_Vx_Vy_Vz(self)

    def get_Px_Py_Pz(self):
        return _RF_Track.ParticleT_get_Px_Py_Pz(self)

    def get_px_py_pz(self, P0c):
        return _RF_Track.ParticleT_get_px_py_pz(self, P0c)

    def get_four_momentum(self):
        return _RF_Track.ParticleT_get_four_momentum(self)

    def get_four_velocity(self):
        return _RF_Track.ParticleT_get_four_velocity(self)

    def drift(self, dt_mm):
        return _RF_Track.ParticleT_drift(self, dt_mm)

    def kick(self, force, dt_mm):
        return _RF_Track.ParticleT_kick(self, force, dt_mm)

    def apply_force(self, force, dt_mm):
        return _RF_Track.ParticleT_apply_force(self, force, dt_mm)
    __swig_destroy__ = _RF_Track.delete_ParticleT

# Register ParticleT in _RF_Track:
_RF_Track.ParticleT_swigregister(ParticleT)
class Bunch6dT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    t = property(_RF_Track.Bunch6dT_t_get, _RF_Track.Bunch6dT_t_set)

    def __init__(self, *args):
        _RF_Track.Bunch6dT_swiginit(self, _RF_Track.new_Bunch6dT(*args))

    def clear(self):
        return _RF_Track.Bunch6dT_clear(self)

    def size(self):
        return _RF_Track.Bunch6dT_size(self)

    def set_lifetime(self, mean_lifetime):
        return _RF_Track.Bunch6dT_set_lifetime(self, mean_lifetime)

    def set_sc_engine(self, sc):
        return _RF_Track.Bunch6dT_set_sc_engine(self, sc)

    def get_sc_engine(self):
        return _RF_Track.Bunch6dT_get_sc_engine(self)

    def coasting(self):
        return _RF_Track.Bunch6dT_coasting(self)

    def set_coasting(self, period):
        return _RF_Track.Bunch6dT_set_coasting(self, period)

    def get_info(self, *args):
        return _RF_Track.Bunch6dT_get_info(self, *args)

    def set_phase_space(self, X):
        return _RF_Track.Bunch6dT_set_phase_space(self, X)

    def get_particle(self, *args):
        return _RF_Track.Bunch6dT_get_particle(self, *args)

    def get_S_min(self):
        return _RF_Track.Bunch6dT_get_S_min(self)

    def get_S_max(self):
        return _RF_Track.Bunch6dT_get_S_max(self)

    def get_S_mean(self, dt=0.0):
        return _RF_Track.Bunch6dT_get_S_mean(self, dt)

    def get_t(self):
        return _RF_Track.Bunch6dT_get_t(self)

    def get_average_particle(self, *args):
        return _RF_Track.Bunch6dT_get_average_particle(self, *args)

    def get_reference_particle(self, *args):
        return _RF_Track.Bunch6dT_get_reference_particle(self, *args)

    def get_bunch_temperature(self):
        return _RF_Track.Bunch6dT_get_bunch_temperature(self)

    def get_phase_space(self, *args):
        return _RF_Track.Bunch6dT_get_phase_space(self, *args)

    def get_lost_particles(self):
        return _RF_Track.Bunch6dT_get_lost_particles(self)

    def get_lost_particles_mask(self):
        return _RF_Track.Bunch6dT_get_lost_particles_mask(self)

    def get_ngood(self, *args):
        return _RF_Track.Bunch6dT_get_ngood(self, *args)

    def get_nlost(self):
        return _RF_Track.Bunch6dT_get_nlost(self)

    def get_total_charge(self, *args):
        return _RF_Track.Bunch6dT_get_total_charge(self, *args)

    def apply_force(self, *args):
        return _RF_Track.Bunch6dT_apply_force(self, *args)

    def kick(self, *args):
        return _RF_Track.Bunch6dT_kick(self, *args)

    def drift(self, dt_mm):
        return _RF_Track.Bunch6dT_drift(self, dt_mm)

    def load(self, filename):
        return _RF_Track.Bunch6dT_load(self, filename)

    def save(self, filename):
        return _RF_Track.Bunch6dT_save(self, filename)

    def save_as_dst_file(self, filename, frequency_MHz):
        return _RF_Track.Bunch6dT_save_as_dst_file(self, filename, frequency_MHz)

    def save_as_sdds_file(self, filename, description=None):
        return _RF_Track.Bunch6dT_save_as_sdds_file(self, filename, description)

    def __brace__(self, j):
        return _RF_Track.Bunch6dT___brace__(self, j)
    __swig_destroy__ = _RF_Track.delete_Bunch6dT

# Register Bunch6dT in _RF_Track:
_RF_Track.Bunch6dT_swigregister(Bunch6dT)
class Bunch6d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    S = property(_RF_Track.Bunch6d_S_get, _RF_Track.Bunch6d_S_set)

    def __init__(self, *args):
        _RF_Track.Bunch6d_swiginit(self, _RF_Track.new_Bunch6d(*args))

    def clear(self):
        return _RF_Track.Bunch6d_clear(self)

    def size(self):
        return _RF_Track.Bunch6d_size(self)

    def set_lifetime(self, mean_lifetime):
        return _RF_Track.Bunch6d_set_lifetime(self, mean_lifetime)

    def append(self, p):
        return _RF_Track.Bunch6d_append(self, p)

    def set_sc_engine(self, sc):
        return _RF_Track.Bunch6d_set_sc_engine(self, sc)

    def get_sc_engine(self):
        return _RF_Track.Bunch6d_get_sc_engine(self)

    def coasting(self):
        return _RF_Track.Bunch6d_coasting(self)

    def set_coasting(self, period):
        return _RF_Track.Bunch6d_set_coasting(self, period)

    def set_phase_space(self, X):
        return _RF_Track.Bunch6d_set_phase_space(self, X)

    def set_S(self, S_):
        return _RF_Track.Bunch6d_set_S(self, S_)

    def get_particle(self, *args):
        return _RF_Track.Bunch6d_get_particle(self, *args)

    def get_t_mean(self):
        return _RF_Track.Bunch6d_get_t_mean(self)

    def get_t_min(self):
        return _RF_Track.Bunch6d_get_t_min(self)

    def get_t_max(self):
        return _RF_Track.Bunch6d_get_t_max(self)

    def get_S(self):
        return _RF_Track.Bunch6d_get_S(self)

    def get_average_particle(self):
        return _RF_Track.Bunch6d_get_average_particle(self)

    def get_reference_particle(self, Pref):
        return _RF_Track.Bunch6d_get_reference_particle(self, Pref)

    def get_bunch_temperature(self):
        return _RF_Track.Bunch6d_get_bunch_temperature(self)

    def get_phase_space(self, *args):
        return _RF_Track.Bunch6d_get_phase_space(self, *args)

    def get_lost_particles(self):
        return _RF_Track.Bunch6d_get_lost_particles(self)

    def get_lost_particles_mask(self):
        return _RF_Track.Bunch6d_get_lost_particles_mask(self)

    def get_ngood(self):
        return _RF_Track.Bunch6d_get_ngood(self)

    def get_nlost(self):
        return _RF_Track.Bunch6d_get_nlost(self)

    def get_total_charge(self):
        return _RF_Track.Bunch6d_get_total_charge(self)

    def get_info(self):
        return _RF_Track.Bunch6d_get_info(self)

    def apply_force(self, force, dS_mm):
        return _RF_Track.Bunch6d_apply_force(self, force, dS_mm)

    def kick(self, force, dS):
        return _RF_Track.Bunch6d_kick(self, force, dS)

    def drift(self, dS):
        return _RF_Track.Bunch6d_drift(self, dS)

    def load(self, filename):
        return _RF_Track.Bunch6d_load(self, filename)

    def save(self, filename):
        return _RF_Track.Bunch6d_save(self, filename)

    def save_as_dst_file(self, filename, frequency_MHz):
        return _RF_Track.Bunch6d_save_as_dst_file(self, filename, frequency_MHz)

    def save_as_sdds_file(self, filename, description=None):
        return _RF_Track.Bunch6d_save_as_sdds_file(self, filename, description)

    def __brace__(self, j):
        return _RF_Track.Bunch6d___brace__(self, j)
    __swig_destroy__ = _RF_Track.delete_Bunch6d

# Register Bunch6d in _RF_Track:
_RF_Track.Bunch6d_swigregister(Bunch6d)

def Bunch6d_QR(mass, population, charge, Pref, T, N, sigma_cut=0.0):
    return _RF_Track.Bunch6d_QR(mass, population, charge, Pref, T, N, sigma_cut)
class Bunch6d_info(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    S = property(_RF_Track.Bunch6d_info_S_get, _RF_Track.Bunch6d_info_S_set)
    mean_x = property(_RF_Track.Bunch6d_info_mean_x_get, _RF_Track.Bunch6d_info_mean_x_set)
    mean_y = property(_RF_Track.Bunch6d_info_mean_y_get, _RF_Track.Bunch6d_info_mean_y_set)
    mean_t = property(_RF_Track.Bunch6d_info_mean_t_get, _RF_Track.Bunch6d_info_mean_t_set)
    mean_xp = property(_RF_Track.Bunch6d_info_mean_xp_get, _RF_Track.Bunch6d_info_mean_xp_set)
    mean_yp = property(_RF_Track.Bunch6d_info_mean_yp_get, _RF_Track.Bunch6d_info_mean_yp_set)
    mean_P = property(_RF_Track.Bunch6d_info_mean_P_get, _RF_Track.Bunch6d_info_mean_P_set)
    mean_K = property(_RF_Track.Bunch6d_info_mean_K_get, _RF_Track.Bunch6d_info_mean_K_set)
    mean_E = property(_RF_Track.Bunch6d_info_mean_E_get, _RF_Track.Bunch6d_info_mean_E_set)
    sigma_x = property(_RF_Track.Bunch6d_info_sigma_x_get, _RF_Track.Bunch6d_info_sigma_x_set)
    sigma_y = property(_RF_Track.Bunch6d_info_sigma_y_get, _RF_Track.Bunch6d_info_sigma_y_set)
    sigma_t = property(_RF_Track.Bunch6d_info_sigma_t_get, _RF_Track.Bunch6d_info_sigma_t_set)
    sigma_px = property(_RF_Track.Bunch6d_info_sigma_px_get, _RF_Track.Bunch6d_info_sigma_px_set)
    sigma_py = property(_RF_Track.Bunch6d_info_sigma_py_get, _RF_Track.Bunch6d_info_sigma_py_set)
    sigma_xpx = property(_RF_Track.Bunch6d_info_sigma_xpx_get, _RF_Track.Bunch6d_info_sigma_xpx_set)
    sigma_ypy = property(_RF_Track.Bunch6d_info_sigma_ypy_get, _RF_Track.Bunch6d_info_sigma_ypy_set)
    sigma_tpt = property(_RF_Track.Bunch6d_info_sigma_tpt_get, _RF_Track.Bunch6d_info_sigma_tpt_set)
    sigma_pt = property(_RF_Track.Bunch6d_info_sigma_pt_get, _RF_Track.Bunch6d_info_sigma_pt_set)
    sigma_E = property(_RF_Track.Bunch6d_info_sigma_E_get, _RF_Track.Bunch6d_info_sigma_E_set)
    sigma_P = property(_RF_Track.Bunch6d_info_sigma_P_get, _RF_Track.Bunch6d_info_sigma_P_set)
    emitt_x = property(_RF_Track.Bunch6d_info_emitt_x_get, _RF_Track.Bunch6d_info_emitt_x_set)
    emitt_y = property(_RF_Track.Bunch6d_info_emitt_y_get, _RF_Track.Bunch6d_info_emitt_y_set)
    emitt_z = property(_RF_Track.Bunch6d_info_emitt_z_get, _RF_Track.Bunch6d_info_emitt_z_set)
    emitt_4d = property(_RF_Track.Bunch6d_info_emitt_4d_get, _RF_Track.Bunch6d_info_emitt_4d_set)
    emitt_6d = property(_RF_Track.Bunch6d_info_emitt_6d_get, _RF_Track.Bunch6d_info_emitt_6d_set)
    alpha_x = property(_RF_Track.Bunch6d_info_alpha_x_get, _RF_Track.Bunch6d_info_alpha_x_set)
    alpha_y = property(_RF_Track.Bunch6d_info_alpha_y_get, _RF_Track.Bunch6d_info_alpha_y_set)
    alpha_z = property(_RF_Track.Bunch6d_info_alpha_z_get, _RF_Track.Bunch6d_info_alpha_z_set)
    beta_x = property(_RF_Track.Bunch6d_info_beta_x_get, _RF_Track.Bunch6d_info_beta_x_set)
    beta_y = property(_RF_Track.Bunch6d_info_beta_y_get, _RF_Track.Bunch6d_info_beta_y_set)
    beta_z = property(_RF_Track.Bunch6d_info_beta_z_get, _RF_Track.Bunch6d_info_beta_z_set)
    disp_x = property(_RF_Track.Bunch6d_info_disp_x_get, _RF_Track.Bunch6d_info_disp_x_set)
    disp_y = property(_RF_Track.Bunch6d_info_disp_y_get, _RF_Track.Bunch6d_info_disp_y_set)
    disp_z = property(_RF_Track.Bunch6d_info_disp_z_get, _RF_Track.Bunch6d_info_disp_z_set)
    disp_px = property(_RF_Track.Bunch6d_info_disp_px_get, _RF_Track.Bunch6d_info_disp_px_set)
    disp_py = property(_RF_Track.Bunch6d_info_disp_py_get, _RF_Track.Bunch6d_info_disp_py_set)
    rmax = property(_RF_Track.Bunch6d_info_rmax_get, _RF_Track.Bunch6d_info_rmax_set)
    rmax90 = property(_RF_Track.Bunch6d_info_rmax90_get, _RF_Track.Bunch6d_info_rmax90_set)
    rmax99 = property(_RF_Track.Bunch6d_info_rmax99_get, _RF_Track.Bunch6d_info_rmax99_set)
    rmax99p9 = property(_RF_Track.Bunch6d_info_rmax99p9_get, _RF_Track.Bunch6d_info_rmax99p9_set)
    transmission = property(_RF_Track.Bunch6d_info_transmission_get, _RF_Track.Bunch6d_info_transmission_set)

    def __init__(self):
        _RF_Track.Bunch6d_info_swiginit(self, _RF_Track.new_Bunch6d_info())
    __swig_destroy__ = _RF_Track.delete_Bunch6d_info

# Register Bunch6d_info in _RF_Track:
_RF_Track.Bunch6d_info_swigregister(Bunch6d_info)
class Bunch6dT_info(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    t = property(_RF_Track.Bunch6dT_info_t_get, _RF_Track.Bunch6dT_info_t_set)
    mean_X = property(_RF_Track.Bunch6dT_info_mean_X_get, _RF_Track.Bunch6dT_info_mean_X_set)
    mean_Y = property(_RF_Track.Bunch6dT_info_mean_Y_get, _RF_Track.Bunch6dT_info_mean_Y_set)
    mean_Z = property(_RF_Track.Bunch6dT_info_mean_Z_get, _RF_Track.Bunch6dT_info_mean_Z_set)
    mean_Px = property(_RF_Track.Bunch6dT_info_mean_Px_get, _RF_Track.Bunch6dT_info_mean_Px_set)
    mean_Py = property(_RF_Track.Bunch6dT_info_mean_Py_get, _RF_Track.Bunch6dT_info_mean_Py_set)
    mean_Pz = property(_RF_Track.Bunch6dT_info_mean_Pz_get, _RF_Track.Bunch6dT_info_mean_Pz_set)
    mean_K = property(_RF_Track.Bunch6dT_info_mean_K_get, _RF_Track.Bunch6dT_info_mean_K_set)
    mean_E = property(_RF_Track.Bunch6dT_info_mean_E_get, _RF_Track.Bunch6dT_info_mean_E_set)
    sigma_X = property(_RF_Track.Bunch6dT_info_sigma_X_get, _RF_Track.Bunch6dT_info_sigma_X_set)
    sigma_Y = property(_RF_Track.Bunch6dT_info_sigma_Y_get, _RF_Track.Bunch6dT_info_sigma_Y_set)
    sigma_Z = property(_RF_Track.Bunch6dT_info_sigma_Z_get, _RF_Track.Bunch6dT_info_sigma_Z_set)
    sigma_Px = property(_RF_Track.Bunch6dT_info_sigma_Px_get, _RF_Track.Bunch6dT_info_sigma_Px_set)
    sigma_Py = property(_RF_Track.Bunch6dT_info_sigma_Py_get, _RF_Track.Bunch6dT_info_sigma_Py_set)
    sigma_Pz = property(_RF_Track.Bunch6dT_info_sigma_Pz_get, _RF_Track.Bunch6dT_info_sigma_Pz_set)
    sigma_XPx = property(_RF_Track.Bunch6dT_info_sigma_XPx_get, _RF_Track.Bunch6dT_info_sigma_XPx_set)
    sigma_YPy = property(_RF_Track.Bunch6dT_info_sigma_YPy_get, _RF_Track.Bunch6dT_info_sigma_YPy_set)
    sigma_ZPz = property(_RF_Track.Bunch6dT_info_sigma_ZPz_get, _RF_Track.Bunch6dT_info_sigma_ZPz_set)
    sigma_E = property(_RF_Track.Bunch6dT_info_sigma_E_get, _RF_Track.Bunch6dT_info_sigma_E_set)
    emitt_x = property(_RF_Track.Bunch6dT_info_emitt_x_get, _RF_Track.Bunch6dT_info_emitt_x_set)
    emitt_y = property(_RF_Track.Bunch6dT_info_emitt_y_get, _RF_Track.Bunch6dT_info_emitt_y_set)
    emitt_z = property(_RF_Track.Bunch6dT_info_emitt_z_get, _RF_Track.Bunch6dT_info_emitt_z_set)
    emitt_4d = property(_RF_Track.Bunch6dT_info_emitt_4d_get, _RF_Track.Bunch6dT_info_emitt_4d_set)
    emitt_6d = property(_RF_Track.Bunch6dT_info_emitt_6d_get, _RF_Track.Bunch6dT_info_emitt_6d_set)
    alpha_x = property(_RF_Track.Bunch6dT_info_alpha_x_get, _RF_Track.Bunch6dT_info_alpha_x_set)
    alpha_y = property(_RF_Track.Bunch6dT_info_alpha_y_get, _RF_Track.Bunch6dT_info_alpha_y_set)
    alpha_z = property(_RF_Track.Bunch6dT_info_alpha_z_get, _RF_Track.Bunch6dT_info_alpha_z_set)
    beta_x = property(_RF_Track.Bunch6dT_info_beta_x_get, _RF_Track.Bunch6dT_info_beta_x_set)
    beta_y = property(_RF_Track.Bunch6dT_info_beta_y_get, _RF_Track.Bunch6dT_info_beta_y_set)
    beta_z = property(_RF_Track.Bunch6dT_info_beta_z_get, _RF_Track.Bunch6dT_info_beta_z_set)
    disp_x = property(_RF_Track.Bunch6dT_info_disp_x_get, _RF_Track.Bunch6dT_info_disp_x_set)
    disp_y = property(_RF_Track.Bunch6dT_info_disp_y_get, _RF_Track.Bunch6dT_info_disp_y_set)
    disp_z = property(_RF_Track.Bunch6dT_info_disp_z_get, _RF_Track.Bunch6dT_info_disp_z_set)
    disp_px = property(_RF_Track.Bunch6dT_info_disp_px_get, _RF_Track.Bunch6dT_info_disp_px_set)
    disp_py = property(_RF_Track.Bunch6dT_info_disp_py_get, _RF_Track.Bunch6dT_info_disp_py_set)
    rmax = property(_RF_Track.Bunch6dT_info_rmax_get, _RF_Track.Bunch6dT_info_rmax_set)
    rmax90 = property(_RF_Track.Bunch6dT_info_rmax90_get, _RF_Track.Bunch6dT_info_rmax90_set)
    rmax99 = property(_RF_Track.Bunch6dT_info_rmax99_get, _RF_Track.Bunch6dT_info_rmax99_set)
    rmax99p9 = property(_RF_Track.Bunch6dT_info_rmax99p9_get, _RF_Track.Bunch6dT_info_rmax99p9_set)
    transmission = property(_RF_Track.Bunch6dT_info_transmission_get, _RF_Track.Bunch6dT_info_transmission_set)

    def __init__(self):
        _RF_Track.Bunch6dT_info_swiginit(self, _RF_Track.new_Bunch6dT_info())
    __swig_destroy__ = _RF_Track.delete_Bunch6dT_info

# Register Bunch6dT_info in _RF_Track:
_RF_Track.Bunch6dT_info_swigregister(Bunch6dT_info)
class Bunch6d_twiss(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    emitt_x = property(_RF_Track.Bunch6d_twiss_emitt_x_get, _RF_Track.Bunch6d_twiss_emitt_x_set)
    emitt_y = property(_RF_Track.Bunch6d_twiss_emitt_y_get, _RF_Track.Bunch6d_twiss_emitt_y_set)
    emitt_z = property(_RF_Track.Bunch6d_twiss_emitt_z_get, _RF_Track.Bunch6d_twiss_emitt_z_set)
    alpha_x = property(_RF_Track.Bunch6d_twiss_alpha_x_get, _RF_Track.Bunch6d_twiss_alpha_x_set)
    alpha_y = property(_RF_Track.Bunch6d_twiss_alpha_y_get, _RF_Track.Bunch6d_twiss_alpha_y_set)
    alpha_z = property(_RF_Track.Bunch6d_twiss_alpha_z_get, _RF_Track.Bunch6d_twiss_alpha_z_set)
    beta_x = property(_RF_Track.Bunch6d_twiss_beta_x_get, _RF_Track.Bunch6d_twiss_beta_x_set)
    beta_y = property(_RF_Track.Bunch6d_twiss_beta_y_get, _RF_Track.Bunch6d_twiss_beta_y_set)
    beta_z = property(_RF_Track.Bunch6d_twiss_beta_z_get, _RF_Track.Bunch6d_twiss_beta_z_set)
    sigma_t = property(_RF_Track.Bunch6d_twiss_sigma_t_get, _RF_Track.Bunch6d_twiss_sigma_t_set)
    sigma_pt = property(_RF_Track.Bunch6d_twiss_sigma_pt_get, _RF_Track.Bunch6d_twiss_sigma_pt_set)
    disp_x = property(_RF_Track.Bunch6d_twiss_disp_x_get, _RF_Track.Bunch6d_twiss_disp_x_set)
    disp_px = property(_RF_Track.Bunch6d_twiss_disp_px_get, _RF_Track.Bunch6d_twiss_disp_px_set)
    disp_y = property(_RF_Track.Bunch6d_twiss_disp_y_get, _RF_Track.Bunch6d_twiss_disp_y_set)
    disp_py = property(_RF_Track.Bunch6d_twiss_disp_py_get, _RF_Track.Bunch6d_twiss_disp_py_set)
    disp_z = property(_RF_Track.Bunch6d_twiss_disp_z_get, _RF_Track.Bunch6d_twiss_disp_z_set)

    def __init__(self):
        _RF_Track.Bunch6d_twiss_swiginit(self, _RF_Track.new_Bunch6d_twiss())
    __swig_destroy__ = _RF_Track.delete_Bunch6d_twiss

# Register Bunch6d_twiss in _RF_Track:
_RF_Track.Bunch6d_twiss_swigregister(Bunch6d_twiss)
class Bunch6dT_twiss(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    emitt_x = property(_RF_Track.Bunch6dT_twiss_emitt_x_get, _RF_Track.Bunch6dT_twiss_emitt_x_set)
    emitt_y = property(_RF_Track.Bunch6dT_twiss_emitt_y_get, _RF_Track.Bunch6dT_twiss_emitt_y_set)
    emitt_z = property(_RF_Track.Bunch6dT_twiss_emitt_z_get, _RF_Track.Bunch6dT_twiss_emitt_z_set)
    alpha_x = property(_RF_Track.Bunch6dT_twiss_alpha_x_get, _RF_Track.Bunch6dT_twiss_alpha_x_set)
    alpha_y = property(_RF_Track.Bunch6dT_twiss_alpha_y_get, _RF_Track.Bunch6dT_twiss_alpha_y_set)
    alpha_z = property(_RF_Track.Bunch6dT_twiss_alpha_z_get, _RF_Track.Bunch6dT_twiss_alpha_z_set)
    beta_x = property(_RF_Track.Bunch6dT_twiss_beta_x_get, _RF_Track.Bunch6dT_twiss_beta_x_set)
    beta_y = property(_RF_Track.Bunch6dT_twiss_beta_y_get, _RF_Track.Bunch6dT_twiss_beta_y_set)
    beta_z = property(_RF_Track.Bunch6dT_twiss_beta_z_get, _RF_Track.Bunch6dT_twiss_beta_z_set)
    sigma_z = property(_RF_Track.Bunch6dT_twiss_sigma_z_get, _RF_Track.Bunch6dT_twiss_sigma_z_set)
    sigma_pz = property(_RF_Track.Bunch6dT_twiss_sigma_pz_get, _RF_Track.Bunch6dT_twiss_sigma_pz_set)
    disp_x = property(_RF_Track.Bunch6dT_twiss_disp_x_get, _RF_Track.Bunch6dT_twiss_disp_x_set)
    disp_px = property(_RF_Track.Bunch6dT_twiss_disp_px_get, _RF_Track.Bunch6dT_twiss_disp_px_set)
    disp_y = property(_RF_Track.Bunch6dT_twiss_disp_y_get, _RF_Track.Bunch6dT_twiss_disp_y_set)
    disp_py = property(_RF_Track.Bunch6dT_twiss_disp_py_get, _RF_Track.Bunch6dT_twiss_disp_py_set)
    disp_z = property(_RF_Track.Bunch6dT_twiss_disp_z_get, _RF_Track.Bunch6dT_twiss_disp_z_set)

    def __init__(self):
        _RF_Track.Bunch6dT_twiss_swiginit(self, _RF_Track.new_Bunch6dT_twiss())
    __swig_destroy__ = _RF_Track.delete_Bunch6dT_twiss

# Register Bunch6dT_twiss in _RF_Track:
_RF_Track.Bunch6dT_twiss_swigregister(Bunch6dT_twiss)
class Bunch6dT_Generator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    species = property(_RF_Track.Bunch6dT_Generator_species_get, _RF_Track.Bunch6dT_Generator_species_set)
    noise_reduc = property(_RF_Track.Bunch6dT_Generator_noise_reduc_get, _RF_Track.Bunch6dT_Generator_noise_reduc_set)
    rand_generator = property(_RF_Track.Bunch6dT_Generator_rand_generator_get, _RF_Track.Bunch6dT_Generator_rand_generator_set)
    cathode = property(_RF_Track.Bunch6dT_Generator_cathode_get, _RF_Track.Bunch6dT_Generator_cathode_set)
    q_total = property(_RF_Track.Bunch6dT_Generator_q_total_get, _RF_Track.Bunch6dT_Generator_q_total_set)
    ref_zpos = property(_RF_Track.Bunch6dT_Generator_ref_zpos_get, _RF_Track.Bunch6dT_Generator_ref_zpos_set)
    ref_clock = property(_RF_Track.Bunch6dT_Generator_ref_clock_get, _RF_Track.Bunch6dT_Generator_ref_clock_set)
    ref_ekin = property(_RF_Track.Bunch6dT_Generator_ref_ekin_get, _RF_Track.Bunch6dT_Generator_ref_ekin_set)
    dist_z = property(_RF_Track.Bunch6dT_Generator_dist_z_get, _RF_Track.Bunch6dT_Generator_dist_z_set)
    sig_z = property(_RF_Track.Bunch6dT_Generator_sig_z_get, _RF_Track.Bunch6dT_Generator_sig_z_set)
    c_sig_z = property(_RF_Track.Bunch6dT_Generator_c_sig_z_get, _RF_Track.Bunch6dT_Generator_c_sig_z_set)
    lz = property(_RF_Track.Bunch6dT_Generator_lz_get, _RF_Track.Bunch6dT_Generator_lz_set)
    rz = property(_RF_Track.Bunch6dT_Generator_rz_get, _RF_Track.Bunch6dT_Generator_rz_set)
    sig_t = property(_RF_Track.Bunch6dT_Generator_sig_t_get, _RF_Track.Bunch6dT_Generator_sig_t_set)
    c_sig_t = property(_RF_Track.Bunch6dT_Generator_c_sig_t_get, _RF_Track.Bunch6dT_Generator_c_sig_t_set)
    lt = property(_RF_Track.Bunch6dT_Generator_lt_get, _RF_Track.Bunch6dT_Generator_lt_set)
    rt = property(_RF_Track.Bunch6dT_Generator_rt_get, _RF_Track.Bunch6dT_Generator_rt_set)
    dist_pz = property(_RF_Track.Bunch6dT_Generator_dist_pz_get, _RF_Track.Bunch6dT_Generator_dist_pz_set)
    sig_ekin = property(_RF_Track.Bunch6dT_Generator_sig_ekin_get, _RF_Track.Bunch6dT_Generator_sig_ekin_set)
    c_sig_ekin = property(_RF_Track.Bunch6dT_Generator_c_sig_ekin_get, _RF_Track.Bunch6dT_Generator_c_sig_ekin_set)
    le = property(_RF_Track.Bunch6dT_Generator_le_get, _RF_Track.Bunch6dT_Generator_le_set)
    re = property(_RF_Track.Bunch6dT_Generator_re_get, _RF_Track.Bunch6dT_Generator_re_set)
    emit_z = property(_RF_Track.Bunch6dT_Generator_emit_z_get, _RF_Track.Bunch6dT_Generator_emit_z_set)
    emit_t = property(_RF_Track.Bunch6dT_Generator_emit_t_get, _RF_Track.Bunch6dT_Generator_emit_t_set)
    cor_ekin = property(_RF_Track.Bunch6dT_Generator_cor_ekin_get, _RF_Track.Bunch6dT_Generator_cor_ekin_set)
    e_photon = property(_RF_Track.Bunch6dT_Generator_e_photon_get, _RF_Track.Bunch6dT_Generator_e_photon_set)
    phi_eff = property(_RF_Track.Bunch6dT_Generator_phi_eff_get, _RF_Track.Bunch6dT_Generator_phi_eff_set)
    dist_x = property(_RF_Track.Bunch6dT_Generator_dist_x_get, _RF_Track.Bunch6dT_Generator_dist_x_set)
    sig_x = property(_RF_Track.Bunch6dT_Generator_sig_x_get, _RF_Track.Bunch6dT_Generator_sig_x_set)
    c_sig_x = property(_RF_Track.Bunch6dT_Generator_c_sig_x_get, _RF_Track.Bunch6dT_Generator_c_sig_x_set)
    lx = property(_RF_Track.Bunch6dT_Generator_lx_get, _RF_Track.Bunch6dT_Generator_lx_set)
    rx = property(_RF_Track.Bunch6dT_Generator_rx_get, _RF_Track.Bunch6dT_Generator_rx_set)
    x_off = property(_RF_Track.Bunch6dT_Generator_x_off_get, _RF_Track.Bunch6dT_Generator_x_off_set)
    disp_x = property(_RF_Track.Bunch6dT_Generator_disp_x_get, _RF_Track.Bunch6dT_Generator_disp_x_set)
    dist_y = property(_RF_Track.Bunch6dT_Generator_dist_y_get, _RF_Track.Bunch6dT_Generator_dist_y_set)
    sig_y = property(_RF_Track.Bunch6dT_Generator_sig_y_get, _RF_Track.Bunch6dT_Generator_sig_y_set)
    c_sig_y = property(_RF_Track.Bunch6dT_Generator_c_sig_y_get, _RF_Track.Bunch6dT_Generator_c_sig_y_set)
    ly = property(_RF_Track.Bunch6dT_Generator_ly_get, _RF_Track.Bunch6dT_Generator_ly_set)
    ry = property(_RF_Track.Bunch6dT_Generator_ry_get, _RF_Track.Bunch6dT_Generator_ry_set)
    y_off = property(_RF_Track.Bunch6dT_Generator_y_off_get, _RF_Track.Bunch6dT_Generator_y_off_set)
    disp_y = property(_RF_Track.Bunch6dT_Generator_disp_y_get, _RF_Track.Bunch6dT_Generator_disp_y_set)
    dist_px = property(_RF_Track.Bunch6dT_Generator_dist_px_get, _RF_Track.Bunch6dT_Generator_dist_px_set)
    nemit_x = property(_RF_Track.Bunch6dT_Generator_nemit_x_get, _RF_Track.Bunch6dT_Generator_nemit_x_set)
    sig_px = property(_RF_Track.Bunch6dT_Generator_sig_px_get, _RF_Track.Bunch6dT_Generator_sig_px_set)
    c_sig_px = property(_RF_Track.Bunch6dT_Generator_c_sig_px_get, _RF_Track.Bunch6dT_Generator_c_sig_px_set)
    lpx = property(_RF_Track.Bunch6dT_Generator_lpx_get, _RF_Track.Bunch6dT_Generator_lpx_set)
    rpx = property(_RF_Track.Bunch6dT_Generator_rpx_get, _RF_Track.Bunch6dT_Generator_rpx_set)
    cor_px = property(_RF_Track.Bunch6dT_Generator_cor_px_get, _RF_Track.Bunch6dT_Generator_cor_px_set)
    dist_py = property(_RF_Track.Bunch6dT_Generator_dist_py_get, _RF_Track.Bunch6dT_Generator_dist_py_set)
    nemit_y = property(_RF_Track.Bunch6dT_Generator_nemit_y_get, _RF_Track.Bunch6dT_Generator_nemit_y_set)
    sig_py = property(_RF_Track.Bunch6dT_Generator_sig_py_get, _RF_Track.Bunch6dT_Generator_sig_py_set)
    c_sig_py = property(_RF_Track.Bunch6dT_Generator_c_sig_py_get, _RF_Track.Bunch6dT_Generator_c_sig_py_set)
    lpy = property(_RF_Track.Bunch6dT_Generator_lpy_get, _RF_Track.Bunch6dT_Generator_lpy_set)
    rpy = property(_RF_Track.Bunch6dT_Generator_rpy_get, _RF_Track.Bunch6dT_Generator_rpy_set)
    cor_py = property(_RF_Track.Bunch6dT_Generator_cor_py_get, _RF_Track.Bunch6dT_Generator_cor_py_set)
    charge = property(_RF_Track.Bunch6dT_Generator_charge_get, _RF_Track.Bunch6dT_Generator_charge_set)
    mass = property(_RF_Track.Bunch6dT_Generator_mass_get, _RF_Track.Bunch6dT_Generator_mass_set)
    p_ref = property(_RF_Track.Bunch6dT_Generator_p_ref_get, _RF_Track.Bunch6dT_Generator_p_ref_set)
    nmacro = property(_RF_Track.Bunch6dT_Generator_nmacro_get, _RF_Track.Bunch6dT_Generator_nmacro_set)

    def __init__(self):
        _RF_Track.Bunch6dT_Generator_swiginit(self, _RF_Track.new_Bunch6dT_Generator())
    __swig_destroy__ = _RF_Track.delete_Bunch6dT_Generator

# Register Bunch6dT_Generator in _RF_Track:
_RF_Track.Bunch6dT_Generator_swigregister(Bunch6dT_Generator)

def make_bunch(pars, npart=1000):
    return _RF_Track.make_bunch(pars, npart)

def randu(nl=1, nc=1):
    return _RF_Track.randu(nl, nc)

def qrand(*args):
    return _RF_Track.qrand(*args)

def qrandn(*args):
    return _RF_Track.qrandn(*args)

def gauss(sigmaa=1.0, sigmaa_cut=4.0, nslice=1001):
    return _RF_Track.gauss(sigmaa, sigmaa_cut, nslice)

def hgauss(sigmaa=1.0, sigmaa_cut=4.0, nslice=1001):
    return _RF_Track.hgauss(sigmaa, sigmaa_cut, nslice)

def uniform(sigmaa=1.0, nslice=1001):
    return _RF_Track.uniform(sigmaa, nslice)

def huniform(sigmaa=1.0, nslice=1001):
    return _RF_Track.huniform(sigmaa, nslice)

def plateau(ll=1.0, rl=0.2, nslice=1001):
    return _RF_Track.plateau(ll, rl, nslice)

def hplateau(ll=1.0, rl=0.2, nslice=1001):
    return _RF_Track.hplateau(ll, rl, nslice)

def parabola(sigmaa=1.0, nslice=1001):
    return _RF_Track.parabola(sigmaa, nslice)

def hparabola(sigmaa=1.0, nslice=1001):
    return _RF_Track.hparabola(sigmaa, nslice)

def randPDF(PDF, B, colno):
    return _RF_Track.randPDF(PDF, B, colno)
class Static_Electric_FieldMap(GenericField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.Static_Electric_FieldMap_swiginit(self, _RF_Track.new_Static_Electric_FieldMap(*args))
    __swig_destroy__ = _RF_Track.delete_Static_Electric_FieldMap

    def get_hx(self):
        return _RF_Track.Static_Electric_FieldMap_get_hx(self)

    def get_hy(self):
        return _RF_Track.Static_Electric_FieldMap_get_hy(self)

    def get_hz(self):
        return _RF_Track.Static_Electric_FieldMap_get_hz(self)

    def get_nx(self):
        return _RF_Track.Static_Electric_FieldMap_get_nx(self)

    def get_ny(self):
        return _RF_Track.Static_Electric_FieldMap_get_ny(self)

    def get_nz(self):
        return _RF_Track.Static_Electric_FieldMap_get_nz(self)

    def get_x0(self):
        return _RF_Track.Static_Electric_FieldMap_get_x0(self)

    def get_y0(self):
        return _RF_Track.Static_Electric_FieldMap_get_y0(self)

    def get_z0(self):
        return _RF_Track.Static_Electric_FieldMap_get_z0(self)

    def get_x1(self):
        return _RF_Track.Static_Electric_FieldMap_get_x1(self)

    def get_y1(self):
        return _RF_Track.Static_Electric_FieldMap_get_y1(self)

    def get_z1(self):
        return _RF_Track.Static_Electric_FieldMap_get_z1(self)

    def set_hx(self, hx_):
        return _RF_Track.Static_Electric_FieldMap_set_hx(self, hx_)

    def set_hy(self, hy_):
        return _RF_Track.Static_Electric_FieldMap_set_hy(self, hy_)

    def set_hz(self, hz_):
        return _RF_Track.Static_Electric_FieldMap_set_hz(self, hz_)

    def set_x0(self, x0_):
        return _RF_Track.Static_Electric_FieldMap_set_x0(self, x0_)

    def set_y0(self, y0_):
        return _RF_Track.Static_Electric_FieldMap_set_y0(self, y0_)

    def set_z0(self, z0_):
        return _RF_Track.Static_Electric_FieldMap_set_z0(self, z0_)

    def set_z1(self, z1_):
        return _RF_Track.Static_Electric_FieldMap_set_z1(self, z1_)

    def set_Ex_Ey_Ez(self, Ex, Ey, Ez, quality=1.0):
        return _RF_Track.Static_Electric_FieldMap_set_Ex_Ey_Ez(self, Ex, Ey, Ez, quality)

    def get_Phi(self):
        return _RF_Track.Static_Electric_FieldMap_get_Phi(self)

    def get_field(self, x, y, z, t=0.0):
        return _RF_Track.Static_Electric_FieldMap_get_field(self, x, y, z, t)

# Register Static_Electric_FieldMap in _RF_Track:
_RF_Track.Static_Electric_FieldMap_swigregister(Static_Electric_FieldMap)
class Static_Magnetic_FieldMap(GenericField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.Static_Magnetic_FieldMap_swiginit(self, _RF_Track.new_Static_Magnetic_FieldMap(*args))
    __swig_destroy__ = _RF_Track.delete_Static_Magnetic_FieldMap

    def get_hx(self):
        return _RF_Track.Static_Magnetic_FieldMap_get_hx(self)

    def get_hy(self):
        return _RF_Track.Static_Magnetic_FieldMap_get_hy(self)

    def get_hz(self):
        return _RF_Track.Static_Magnetic_FieldMap_get_hz(self)

    def get_nx(self):
        return _RF_Track.Static_Magnetic_FieldMap_get_nx(self)

    def get_ny(self):
        return _RF_Track.Static_Magnetic_FieldMap_get_ny(self)

    def get_nz(self):
        return _RF_Track.Static_Magnetic_FieldMap_get_nz(self)

    def get_x0(self):
        return _RF_Track.Static_Magnetic_FieldMap_get_x0(self)

    def get_y0(self):
        return _RF_Track.Static_Magnetic_FieldMap_get_y0(self)

    def get_z0(self):
        return _RF_Track.Static_Magnetic_FieldMap_get_z0(self)

    def get_x1(self):
        return _RF_Track.Static_Magnetic_FieldMap_get_x1(self)

    def get_y1(self):
        return _RF_Track.Static_Magnetic_FieldMap_get_y1(self)

    def get_z1(self):
        return _RF_Track.Static_Magnetic_FieldMap_get_z1(self)

    def set_hx(self, hx_):
        return _RF_Track.Static_Magnetic_FieldMap_set_hx(self, hx_)

    def set_hy(self, hy_):
        return _RF_Track.Static_Magnetic_FieldMap_set_hy(self, hy_)

    def set_hz(self, hz_):
        return _RF_Track.Static_Magnetic_FieldMap_set_hz(self, hz_)

    def set_x0(self, x0_):
        return _RF_Track.Static_Magnetic_FieldMap_set_x0(self, x0_)

    def set_y0(self, y0_):
        return _RF_Track.Static_Magnetic_FieldMap_set_y0(self, y0_)

    def set_z0(self, z0_):
        return _RF_Track.Static_Magnetic_FieldMap_set_z0(self, z0_)

    def set_z1(self, z1_):
        return _RF_Track.Static_Magnetic_FieldMap_set_z1(self, z1_)

    def set_Bx_By_Bz(self, Bx, By, Bz, quality=1.0):
        return _RF_Track.Static_Magnetic_FieldMap_set_Bx_By_Bz(self, Bx, By, Bz, quality)

    def get_Ax(self):
        return _RF_Track.Static_Magnetic_FieldMap_get_Ax(self)

    def get_Ay(self):
        return _RF_Track.Static_Magnetic_FieldMap_get_Ay(self)

    def get_Az(self):
        return _RF_Track.Static_Magnetic_FieldMap_get_Az(self)

    def get_PhiM(self):
        return _RF_Track.Static_Magnetic_FieldMap_get_PhiM(self)

    def get_divB(self, x, y, z):
        return _RF_Track.Static_Magnetic_FieldMap_get_divB(self, x, y, z)

    def get_field(self, x, y, z, t=0.0):
        return _RF_Track.Static_Magnetic_FieldMap_get_field(self, x, y, z, t)

# Register Static_Magnetic_FieldMap in _RF_Track:
_RF_Track.Static_Magnetic_FieldMap_swigregister(Static_Magnetic_FieldMap)
class SW_Structure(RF_Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.SW_Structure_swiginit(self, _RF_Track.new_SW_Structure(*args))

    def get_cell_length(self):
        return _RF_Track.SW_Structure_get_cell_length(self)

    def get_z0(self):
        return _RF_Track.SW_Structure_get_z0(self)

    def get_z1(self):
        return _RF_Track.SW_Structure_get_z1(self)

    def get_coefficients(self):
        return _RF_Track.SW_Structure_get_coefficients(self)

    def get_static_Bfield(self):
        return _RF_Track.SW_Structure_get_static_Bfield(self)

    def set_static_Bfield(self, Bx, By, Bz):
        return _RF_Track.SW_Structure_set_static_Bfield(self, Bx, By, Bz)

    def set_coefficients(self, coeffs):
        return _RF_Track.SW_Structure_set_coefficients(self, coeffs)

    def set_z0(self, z0_):
        return _RF_Track.SW_Structure_set_z0(self, z0_)

    def set_z1(self, z1_):
        return _RF_Track.SW_Structure_set_z1(self, z1_)

    def set_cell_length(self, L):
        return _RF_Track.SW_Structure_set_cell_length(self, L)
    __swig_destroy__ = _RF_Track.delete_SW_Structure

# Register SW_Structure in _RF_Track:
_RF_Track.SW_Structure_swigregister(SW_Structure)
class TW_Structure(RF_Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.TW_Structure_swiginit(self, _RF_Track.new_TW_Structure(*args))

    def get_cell_length(self):
        return _RF_Track.TW_Structure_get_cell_length(self)

    def get_z0(self):
        return _RF_Track.TW_Structure_get_z0(self)

    def get_z1(self):
        return _RF_Track.TW_Structure_get_z1(self)

    def get_coefficients(self):
        return _RF_Track.TW_Structure_get_coefficients(self)

    def get_static_Bfield(self):
        return _RF_Track.TW_Structure_get_static_Bfield(self)

    def set_static_Bfield(self, Bx, By, Bz):
        return _RF_Track.TW_Structure_set_static_Bfield(self, Bx, By, Bz)

    def set_coefficients(self, coeffs, first_suffix):
        return _RF_Track.TW_Structure_set_coefficients(self, coeffs, first_suffix)

    def set_z0(self, z0_):
        return _RF_Track.TW_Structure_set_z0(self, z0_)

    def set_z1(self, z1_):
        return _RF_Track.TW_Structure_set_z1(self, z1_)
    __swig_destroy__ = _RF_Track.delete_TW_Structure

# Register TW_Structure in _RF_Track:
_RF_Track.TW_Structure_swigregister(TW_Structure)
class AdiabaticMatchingDevice(GenericField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, length_=0.0, Bmax_=0.0, fMu_=0.0):
        _RF_Track.AdiabaticMatchingDevice_swiginit(self, _RF_Track.new_AdiabaticMatchingDevice(length_, Bmax_, fMu_))

    def get_static_Efield(self):
        return _RF_Track.AdiabaticMatchingDevice_get_static_Efield(self)

    def get_static_Bfield(self):
        return _RF_Track.AdiabaticMatchingDevice_get_static_Bfield(self)

    def get_mu(self):
        return _RF_Track.AdiabaticMatchingDevice_get_mu(self)

    def get_B0(self):
        return _RF_Track.AdiabaticMatchingDevice_get_B0(self)

    def set_static_Efield(self, Ex, Ey, Ez):
        return _RF_Track.AdiabaticMatchingDevice_set_static_Efield(self, Ex, Ey, Ez)

    def set_static_Bfield(self, Bx, By, Bz):
        return _RF_Track.AdiabaticMatchingDevice_set_static_Bfield(self, Bx, By, Bz)

    def set_mu(self, fMu_):
        return _RF_Track.AdiabaticMatchingDevice_set_mu(self, fMu_)

    def set_B0(self, Bmax_):
        return _RF_Track.AdiabaticMatchingDevice_set_B0(self, Bmax_)

    def get_entrance_aperture(self):
        return _RF_Track.AdiabaticMatchingDevice_get_entrance_aperture(self)

    def get_exit_aperture(self):
        return _RF_Track.AdiabaticMatchingDevice_get_exit_aperture(self)

    def set_entrance_aperture(self, r1_):
        return _RF_Track.AdiabaticMatchingDevice_set_entrance_aperture(self, r1_)

    def set_exit_aperture(self, r2_):
        return _RF_Track.AdiabaticMatchingDevice_set_exit_aperture(self, r2_)
    __swig_destroy__ = _RF_Track.delete_AdiabaticMatchingDevice

# Register AdiabaticMatchingDevice in _RF_Track:
_RF_Track.AdiabaticMatchingDevice_swigregister(AdiabaticMatchingDevice)
class ToroidalHarmonics(GenericField, ):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    M00 = property(_RF_Track.ToroidalHarmonics_M00_get, _RF_Track.ToroidalHarmonics_M00_set)
    Mcc = property(_RF_Track.ToroidalHarmonics_Mcc_get, _RF_Track.ToroidalHarmonics_Mcc_set)
    Mcs = property(_RF_Track.ToroidalHarmonics_Mcs_get, _RF_Track.ToroidalHarmonics_Mcs_set)
    Msc = property(_RF_Track.ToroidalHarmonics_Msc_get, _RF_Track.ToroidalHarmonics_Msc_set)
    Mss = property(_RF_Track.ToroidalHarmonics_Mss_get, _RF_Track.ToroidalHarmonics_Mss_set)

    def __init__(self, Rmajor, Rminor):
        _RF_Track.ToroidalHarmonics_swiginit(self, _RF_Track.new_ToroidalHarmonics(Rmajor, Rminor))

    def get_static_Efield(self):
        return _RF_Track.ToroidalHarmonics_get_static_Efield(self)

    def get_static_Bfield(self):
        return _RF_Track.ToroidalHarmonics_get_static_Bfield(self)

    def get_a(self):
        return _RF_Track.ToroidalHarmonics_get_a(self)

    def set_static_Efield(self, Ex, Ey, Ez):
        return _RF_Track.ToroidalHarmonics_set_static_Efield(self, Ex, Ey, Ez)

    def set_static_Bfield(self, Bx, By, Bz):
        return _RF_Track.ToroidalHarmonics_set_static_Bfield(self, Bx, By, Bz)

    def set_Mcc(self, M):
        return _RF_Track.ToroidalHarmonics_set_Mcc(self, M)

    def set_Mcs(self, M):
        return _RF_Track.ToroidalHarmonics_set_Mcs(self, M)

    def set_Msc(self, M):
        return _RF_Track.ToroidalHarmonics_set_Msc(self, M)

    def set_Mss(self, M):
        return _RF_Track.ToroidalHarmonics_set_Mss(self, M)
    __swig_destroy__ = _RF_Track.delete_ToroidalHarmonics

# Register ToroidalHarmonics in _RF_Track:
_RF_Track.ToroidalHarmonics_swigregister(ToroidalHarmonics)
class ExternalField(GenericField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, length, external_command, number_of_threads=0):
        _RF_Track.ExternalField_swiginit(self, _RF_Track.new_ExternalField(length, external_command, number_of_threads))

    def get_static_Efield(self):
        return _RF_Track.ExternalField_get_static_Efield(self)

    def get_static_Bfield(self):
        return _RF_Track.ExternalField_get_static_Bfield(self)

    def get_number_of_threads(self):
        return _RF_Track.ExternalField_get_number_of_threads(self)

    def set_static_Efield(self, Ex, Ey, Ez):
        return _RF_Track.ExternalField_set_static_Efield(self, Ex, Ey, Ez)

    def set_static_Bfield(self, Bx, By, Bz):
        return _RF_Track.ExternalField_set_static_Bfield(self, Bx, By, Bz)

    def set_number_of_threads(self, n):
        return _RF_Track.ExternalField_set_number_of_threads(self, n)
    __swig_destroy__ = _RF_Track.delete_ExternalField

# Register ExternalField in _RF_Track:
_RF_Track.ExternalField_swigregister(ExternalField)
class TransportTable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def get_transport_table(self, *args):
        return _RF_Track.TransportTable_get_transport_table(self, *args)

    def append_bunch_info(self, *args):
        return _RF_Track.TransportTable_append_bunch_info(self, *args)

    def append(self, t):
        return _RF_Track.TransportTable_append(self, t)

    def clear(self):
        return _RF_Track.TransportTable_clear(self)

    def __init__(self):
        _RF_Track.TransportTable_swiginit(self, _RF_Track.new_TransportTable())
    __swig_destroy__ = _RF_Track.delete_TransportTable

# Register TransportTable in _RF_Track:
_RF_Track.TransportTable_swigregister(TransportTable)
class Multipole(GenericField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.Multipole_swiginit(self, _RF_Track.new_Multipole(*args))

    def set_Bn(self, Bn_):
        return _RF_Track.Multipole_set_Bn(self, Bn_)

    def get_Bn(self):
        return _RF_Track.Multipole_get_Bn(self)

    def get_KnL(self, P_over_Q):
        return _RF_Track.Multipole_get_KnL(self, P_over_Q)

    def get_strengths(self):
        return _RF_Track.Multipole_get_strengths(self)

    def set_strengths(self, strengths):
        return _RF_Track.Multipole_set_strengths(self, strengths)

    def set_KnL(self, P_over_Q, KnL):
        return _RF_Track.Multipole_set_KnL(self, P_over_Q, KnL)

    def get_static_Efield(self):
        return _RF_Track.Multipole_get_static_Efield(self)

    def get_static_Bfield(self):
        return _RF_Track.Multipole_get_static_Bfield(self)

    def set_static_Efield(self, Ex, Ey, Ez):
        return _RF_Track.Multipole_set_static_Efield(self, Ex, Ey, Ez)

    def set_static_Bfield(self, Bx, By, Bz):
        return _RF_Track.Multipole_set_static_Bfield(self, Bx, By, Bz)
    __swig_destroy__ = _RF_Track.delete_Multipole

# Register Multipole in _RF_Track:
_RF_Track.Multipole_swigregister(Multipole)
class Sextupole(GenericField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.Sextupole_swiginit(self, _RF_Track.new_Sextupole(*args))

    def get_K2(self, P_over_Q):
        return _RF_Track.Sextupole_get_K2(self, P_over_Q)

    def get_K2L(self, P_over_Q):
        return _RF_Track.Sextupole_get_K2L(self, P_over_Q)

    def get_strength(self):
        return _RF_Track.Sextupole_get_strength(self)

    def get_gradient(self):
        return _RF_Track.Sextupole_get_gradient(self)

    def set_K2(self, P_over_Q, k2):
        return _RF_Track.Sextupole_set_K2(self, P_over_Q, k2)

    def set_K2L(self, P_over_Q, K2L):
        return _RF_Track.Sextupole_set_K2L(self, P_over_Q, K2L)

    def set_strength(self, s):
        return _RF_Track.Sextupole_set_strength(self, s)

    def set_gradient(self, G):
        return _RF_Track.Sextupole_set_gradient(self, G)

    def set_static_Efield(self, Ex, Ey, Ez):
        return _RF_Track.Sextupole_set_static_Efield(self, Ex, Ey, Ez)

    def set_static_Bfield(self, Bx, By, Bz):
        return _RF_Track.Sextupole_set_static_Bfield(self, Bx, By, Bz)
    __swig_destroy__ = _RF_Track.delete_Sextupole

# Register Sextupole in _RF_Track:
_RF_Track.Sextupole_swigregister(Sextupole)
class Solenoid(Element, ):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.Solenoid_swiginit(self, _RF_Track.new_Solenoid(*args))

    def get_KS(self, P_over_Q):
        return _RF_Track.Solenoid_get_KS(self, P_over_Q)

    def get_R(self):
        return _RF_Track.Solenoid_get_R(self)

    def set_KS(self, P_over_Q, ks):
        return _RF_Track.Solenoid_set_KS(self, P_over_Q, ks)

    def set_R(self, R_):
        return _RF_Track.Solenoid_set_R(self, R_)

    def set_length(self, l):
        return _RF_Track.Solenoid_set_length(self, l)
    __swig_destroy__ = _RF_Track.delete_Solenoid

# Register Solenoid in _RF_Track:
_RF_Track.Solenoid_swigregister(Solenoid)
class Lattice(Element):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _RF_Track.delete_Lattice

    def __init__(self, *args):
        _RF_Track.Lattice_swiginit(self, _RF_Track.new_Lattice(*args))

    def append(self, *args):
        return _RF_Track.Lattice_append(self, *args)

    def append_ref(self, *args):
        return _RF_Track.Lattice_append_ref(self, *args)

    def insert(self, l_ptr):
        return _RF_Track.Lattice_insert(self, l_ptr)

    def insert_ref(self, l_ptr):
        return _RF_Track.Lattice_insert_ref(self, l_ptr)

    def get_transport_table(self, *args):
        return _RF_Track.Lattice_get_transport_table(self, *args)

    def size(self):
        return _RF_Track.Lattice_size(self)

    def track(self, bunch):
        return _RF_Track.Lattice_track(self, bunch)

    def btrack(self, bunch):
        return _RF_Track.Lattice_btrack(self, bunch)

    def set_t0(self, t0):
        return _RF_Track.Lattice_set_t0(self, t0)

    def unset_t0(self):
        return _RF_Track.Lattice_unset_t0(self)

    def autophase(self, bunch):
        return _RF_Track.Lattice_autophase(self, bunch)

    def get_ncorrectors(self):
        return _RF_Track.Lattice_get_ncorrectors(self)

    def get_nbpms(self):
        return _RF_Track.Lattice_get_nbpms(self)

    def get_rf_elements(self, *args):
        return _RF_Track.Lattice_get_rf_elements(self, *args)

    def get_quadrupoles(self, *args):
        return _RF_Track.Lattice_get_quadrupoles(self, *args)

    def get_correctors(self, *args):
        return _RF_Track.Lattice_get_correctors(self, *args)

    def get_solenoids(self, *args):
        return _RF_Track.Lattice_get_solenoids(self, *args)

    def get_lattices(self, *args):
        return _RF_Track.Lattice_get_lattices(self, *args)

    def get_volumes(self, *args):
        return _RF_Track.Lattice_get_volumes(self, *args)

    def get_sbends(self, *args):
        return _RF_Track.Lattice_get_sbends(self, *args)

    def get_drifts(self, *args):
        return _RF_Track.Lattice_get_drifts(self, *args)

    def get_coils(self, *args):
        return _RF_Track.Lattice_get_coils(self, *args)

    def get_bpms(self, *args):
        return _RF_Track.Lattice_get_bpms(self, *args)

    def set_bpm_resolution(self, *args):
        return _RF_Track.Lattice_set_bpm_resolution(self, *args)

    def get_bpm_resolution(self):
        return _RF_Track.Lattice_get_bpm_resolution(self)

    def get_bpm_readings(self):
        return _RF_Track.Lattice_get_bpm_readings(self)

    def get_corrector_strengths(self):
        return _RF_Track.Lattice_get_corrector_strengths(self)

    def set_corrector_strengths(self, K):
        return _RF_Track.Lattice_set_corrector_strengths(self, K)

    def vary_corrector_strengths(self, K):
        return _RF_Track.Lattice_vary_corrector_strengths(self, K)

    def reset_correctors(self):
        return _RF_Track.Lattice_reset_correctors(self)

    def get_response_matrix(self, bunch, strength=0.001):
        return _RF_Track.Lattice_get_response_matrix(self, bunch, strength)

    def scatter_elements(self, *args):
        return _RF_Track.Lattice_scatter_elements(self, *args)

    def align_elements(self, *args):
        return _RF_Track.Lattice_align_elements(self, *args)

    def get_offsets(self):
        return _RF_Track.Lattice_get_offsets(self)

    def set_offsets(self, O):
        return _RF_Track.Lattice_set_offsets(self, O)

    def orbit_correction(self, *args):
        return _RF_Track.Lattice_orbit_correction(self, *args)

    def __brace__(self, j):
        return _RF_Track.Lattice___brace__(self, j)

# Register Lattice in _RF_Track:
_RF_Track.Lattice_swigregister(Lattice)
class Volume(Element, TrackingOptions):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _RF_Track.Volume_swiginit(self, _RF_Track.new_Volume())
    __swig_destroy__ = _RF_Track.delete_Volume

    def add(self, *args):
        return _RF_Track.Volume_add(self, *args)

    def add_ref(self, *args):
        return _RF_Track.Volume_add_ref(self, *args)

    def size(self):
        return _RF_Track.Volume_size(self)

    def clear(self):
        return _RF_Track.Volume_clear(self)

    def track(self, *args):
        return _RF_Track.Volume_track(self, *args)

    def btrack(self, *args):
        return _RF_Track.Volume_btrack(self, *args)

    def get_transport_table(self, *args):
        return _RF_Track.Volume_get_transport_table(self, *args)

    def get_bunch_at_s0(self):
        return _RF_Track.Volume_get_bunch_at_s0(self)

    def get_bunch_at_s1(self):
        return _RF_Track.Volume_get_bunch_at_s1(self)

    def get_bunch_at_screens(self):
        return _RF_Track.Volume_get_bunch_at_screens(self)

    def get_s0(self):
        return _RF_Track.Volume_get_s0(self)

    def get_s1(self):
        return _RF_Track.Volume_get_s1(self)

    def get_path_length(self, bunch):
        return _RF_Track.Volume_get_path_length(self, bunch)

    def get_rf_elements(self, *args):
        return _RF_Track.Volume_get_rf_elements(self, *args)

    def get_quadrupoles(self, *args):
        return _RF_Track.Volume_get_quadrupoles(self, *args)

    def get_solenoids(self, *args):
        return _RF_Track.Volume_get_solenoids(self, *args)

    def get_coils(self, *args):
        return _RF_Track.Volume_get_coils(self, *args)

    def set_s0(self, *args):
        return _RF_Track.Volume_set_s0(self, *args)

    def set_s1(self, *args):
        return _RF_Track.Volume_set_s1(self, *args)

    def set_s0_from_s1(self, bunch, distance):
        return _RF_Track.Volume_set_s0_from_s1(self, bunch, distance)

    def set_s1_from_s0(self, bunch, distance):
        return _RF_Track.Volume_set_s1_from_s0(self, bunch, distance)

    def set_length(self, l):
        return _RF_Track.Volume_set_length(self, l)

    def get_static_Efield(self):
        return _RF_Track.Volume_get_static_Efield(self)

    def get_static_Bfield(self):
        return _RF_Track.Volume_get_static_Bfield(self)

    def set_static_Efield(self, Ex, Ey, Ez):
        return _RF_Track.Volume_set_static_Efield(self, Ex, Ey, Ez)

    def set_static_Bfield(self, Bx, By, Bz):
        return _RF_Track.Volume_set_static_Bfield(self, Bx, By, Bz)

    def set_t0(self, t0):
        return _RF_Track.Volume_set_t0(self, t0)

    def unset_t0(self):
        return _RF_Track.Volume_unset_t0(self)

    def autophase(self, *args):
        return _RF_Track.Volume_autophase(self, *args)

# Register Volume in _RF_Track:
_RF_Track.Volume_swigregister(Volume)
class Plasma(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    null_cell = property(_RF_Track.Plasma_null_cell_get, _RF_Track.Plasma_null_cell_set)

    def __init__(self, length=0.0, rx=0.0, ry=0.0, ne=0.0, Vz=0.0, D_ele_r=0.0, D_ele_l=0.0):
        _RF_Track.Plasma_swiginit(self, _RF_Track.new_Plasma(length, rx, ry, ne, Vz, D_ele_r, D_ele_l))
    __swig_destroy__ = _RF_Track.delete_Plasma

    def get_self_fields(self):
        return _RF_Track.Plasma_get_self_fields(self)

    def get_rx(self):
        return _RF_Track.Plasma_get_rx(self)

    def get_ry(self):
        return _RF_Track.Plasma_get_ry(self)

    def get_area(self):
        return _RF_Track.Plasma_get_area(self)

    def set_radii(self, rx_, ry_):
        return _RF_Track.Plasma_set_radii(self, rx_, ry_)

    def is_point_inside_area(self, x, y):
        return _RF_Track.Plasma_is_point_inside_area(self, x, y)

    def set_Q(self, Q_):
        return _RF_Track.Plasma_set_Q(self, Q_)

    def set_mass(self, mass_):
        return _RF_Track.Plasma_set_mass(self, mass_)

    def set_length(self, l):
        return _RF_Track.Plasma_set_length(self, l)

    def set_temperature(self, kb_T_r, kb_T_l):
        return _RF_Track.Plasma_set_temperature(self, kb_T_r, kb_T_l)

    def set_plasma_mesh(self, *args):
        return _RF_Track.Plasma_set_plasma_mesh(self, *args)

    def set_nsteps(self, nsteps):
        return _RF_Track.Plasma_set_nsteps(self, nsteps)

    def get_Q(self):
        return _RF_Track.Plasma_get_Q(self)

    def get_mass(self):
        return _RF_Track.Plasma_get_mass(self)

    def get_length(self):
        return _RF_Track.Plasma_get_length(self)

    def get_density(self, x, y, z):
        return _RF_Track.Plasma_get_density(self, x, y, z)

    def get_D_ele_r(self):
        return _RF_Track.Plasma_get_D_ele_r(self)

    def get_D_ele_l(self):
        return _RF_Track.Plasma_get_D_ele_l(self)

    def get_temperature(self):
        return _RF_Track.Plasma_get_temperature(self)

    def get_debye_length(self, x, y, z):
        return _RF_Track.Plasma_get_debye_length(self, x, y, z)

    def get_plasma_parameter(self, x, y, z):
        return _RF_Track.Plasma_get_plasma_parameter(self, x, y, z)

    def get_velocity(self, x, y, z):
        return _RF_Track.Plasma_get_velocity(self, x, y, z)

    def get_current_density(self, x, y, z):
        return _RF_Track.Plasma_get_current_density(self, x, y, z)

    def get_density_mesh(self):
        return _RF_Track.Plasma_get_density_mesh(self)

    def get_static_Bfield(self):
        return _RF_Track.Plasma_get_static_Bfield(self)

    def set_static_Bfield(self, Bx, By, Bz):
        return _RF_Track.Plasma_set_static_Bfield(self, Bx, By, Bz)

    def project(self):
        return _RF_Track.Plasma_project(self)

    def advect(self, dt_mm):
        return _RF_Track.Plasma_advect(self, dt_mm)

    def apply_momentum_through_dt(self, dP, dt_mm):
        return _RF_Track.Plasma_apply_momentum_through_dt(self, dP, dt_mm)

    def apply_momentum_through_dS(self, dP, dS_mm):
        return _RF_Track.Plasma_apply_momentum_through_dS(self, dP, dS_mm)

# Register Plasma in _RF_Track:
_RF_Track.Plasma_swigregister(Plasma)
class CollectiveEffect(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RF_Track.delete_CollectiveEffect

    def compute_force(self, *args):
        return _RF_Track.CollectiveEffect_compute_force(self, *args)

# Register CollectiveEffect in _RF_Track:
_RF_Track.CollectiveEffect_swigregister(CollectiveEffect)
class SpaceCharge(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RF_Track.delete_SpaceCharge

    def compute_force(self, *args):
        return _RF_Track.SpaceCharge_compute_force(self, *args)

# Register SpaceCharge in _RF_Track:
_RF_Track.SpaceCharge_swigregister(SpaceCharge)
class SpaceCharge_P2P(SpaceCharge):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def compute_force(self, *args):
        return _RF_Track.SpaceCharge_P2P_compute_force(self, *args)

    def set_Dmin(self, D):
        return _RF_Track.SpaceCharge_P2P_set_Dmin(self, D)

    def get_Dmin(self):
        return _RF_Track.SpaceCharge_P2P_get_Dmin(self)

    def __init__(self):
        _RF_Track.SpaceCharge_P2P_swiginit(self, _RF_Track.new_SpaceCharge_P2P())
    __swig_destroy__ = _RF_Track.delete_SpaceCharge_P2P

# Register SpaceCharge_P2P in _RF_Track:
_RF_Track.SpaceCharge_P2P_swigregister(SpaceCharge_P2P)
class SpaceCharge_Field(GenericField, ):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.SpaceCharge_Field_swiginit(self, _RF_Track.new_SpaceCharge_Field(*args))
    __swig_destroy__ = _RF_Track.delete_SpaceCharge_Field

    def get_Q(self, *args):
        return _RF_Track.SpaceCharge_Field_get_Q(self, *args)

    def get_V(self, *args):
        return _RF_Track.SpaceCharge_Field_get_V(self, *args)

    def get_field(self, *args):
        return _RF_Track.SpaceCharge_Field_get_field(self, *args)

# Register SpaceCharge_Field in _RF_Track:
_RF_Track.SpaceCharge_Field_swigregister(SpaceCharge_Field)
class ElectronCooler(Element, Plasma):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, length=0.0, rx=0.0, ry=0.0, ne=0.0, Vz=0.0):
        _RF_Track.ElectronCooler_swiginit(self, _RF_Track.new_ElectronCooler(length, rx, ry, ne, Vz))

    def get_current(self, x, y, z):
        return _RF_Track.ElectronCooler_get_current(self, x, y, z)

    def set_electron_mesh(self, *args):
        return _RF_Track.ElectronCooler_set_electron_mesh(self, *args)

    def compute_cooling_force(self):
        return _RF_Track.ElectronCooler_compute_cooling_force(self)
    __swig_destroy__ = _RF_Track.delete_ElectronCooler

# Register ElectronCooler in _RF_Track:
_RF_Track.ElectronCooler_swigregister(ElectronCooler)
class MultipoleKick(CollectiveEffect):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.MultipoleKick_swiginit(self, _RF_Track.new_MultipoleKick(*args))

    def set_Bn(self, Bn_):
        return _RF_Track.MultipoleKick_set_Bn(self, Bn_)

    def get_Bn(self):
        return _RF_Track.MultipoleKick_get_Bn(self)

    def clone(self):
        return _RF_Track.MultipoleKick_clone(self)

    def compute_force(self, *args):
        return _RF_Track.MultipoleKick_compute_force(self, *args)
    __swig_destroy__ = _RF_Track.delete_MultipoleKick

# Register MultipoleKick in _RF_Track:
_RF_Track.MultipoleKick_swigregister(MultipoleKick)
class BeamLoading(CollectiveEffect):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.BeamLoading_swiginit(self, _RF_Track.new_BeamLoading(*args))

    def clone(self):
        return _RF_Track.BeamLoading_clone(self)

    def compute_force(self, *args):
        return _RF_Track.BeamLoading_compute_force(self, *args)

    def get_vg(self):
        return _RF_Track.BeamLoading_get_vg(self)

    def get_Q(self):
        return _RF_Track.BeamLoading_get_Q(self)

    def get_rho(self):
        return _RF_Track.BeamLoading_get_rho(self)

    def get_G(self):
        return _RF_Track.BeamLoading_get_G(self)

    def get_G_steady(self):
        return _RF_Track.BeamLoading_get_G_steady(self)

    def get_drho(self):
        return _RF_Track.BeamLoading_get_drho(self)

    def get_Lcell(self):
        return _RF_Track.BeamLoading_get_Lcell(self)

    def get_Ltotal(self):
        return _RF_Track.BeamLoading_get_Ltotal(self)

    def get_z0(self):
        return _RF_Track.BeamLoading_get_z0(self)

    def get_z1(self):
        return _RF_Track.BeamLoading_get_z1(self)

    def set_z0(self, z):
        return _RF_Track.BeamLoading_set_z0(self, z)
    __swig_destroy__ = _RF_Track.delete_BeamLoading

# Register BeamLoading in _RF_Track:
_RF_Track.BeamLoading_swigregister(BeamLoading)
class LongRangeWakefield(CollectiveEffect):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, A_, f1_, Q__):
        _RF_Track.LongRangeWakefield_swiginit(self, _RF_Track.new_LongRangeWakefield(A_, f1_, Q__))

    def set_nbins(self, nbins_):
        return _RF_Track.LongRangeWakefield_set_nbins(self, nbins_)

    def clone(self):
        return _RF_Track.LongRangeWakefield_clone(self)

    def compute_force(self, *args):
        return _RF_Track.LongRangeWakefield_compute_force(self, *args)

    def w_long(self, s):
        return _RF_Track.LongRangeWakefield_w_long(self, s)

    def w_transv(self, s):
        return _RF_Track.LongRangeWakefield_w_transv(self, s)
    __swig_destroy__ = _RF_Track.delete_LongRangeWakefield

# Register LongRangeWakefield in _RF_Track:
_RF_Track.LongRangeWakefield_swigregister(LongRangeWakefield)
class ShortRangeWakefield(CollectiveEffect):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, a=1, g=1, l=1):
        _RF_Track.ShortRangeWakefield_swiginit(self, _RF_Track.new_ShortRangeWakefield(a, g, l))

    def set_nbins(self, nbins_):
        return _RF_Track.ShortRangeWakefield_set_nbins(self, nbins_)

    def set_max_range(self, range):
        return _RF_Track.ShortRangeWakefield_set_max_range(self, range)

    def clone(self):
        return _RF_Track.ShortRangeWakefield_clone(self)

    def compute_force(self, *args):
        return _RF_Track.ShortRangeWakefield_compute_force(self, *args)

    def w_long(self, s):
        return _RF_Track.ShortRangeWakefield_w_long(self, s)

    def w_transv(self, s):
        return _RF_Track.ShortRangeWakefield_w_transv(self, s)
    __swig_destroy__ = _RF_Track.delete_ShortRangeWakefield

# Register ShortRangeWakefield in _RF_Track:
_RF_Track.ShortRangeWakefield_swigregister(ShortRangeWakefield)
class MultipleCoulombScattering(CollectiveEffect):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.MultipleCoulombScattering_swiginit(self, _RF_Track.new_MultipleCoulombScattering(*args))

    def clone(self):
        return _RF_Track.MultipleCoulombScattering_clone(self)

    def enable_log_term(self):
        return _RF_Track.MultipleCoulombScattering_enable_log_term(self)

    def disable_log_term(self):
        return _RF_Track.MultipleCoulombScattering_disable_log_term(self)

    def enable_freuhhwirth_model(self):
        return _RF_Track.MultipleCoulombScattering_enable_freuhhwirth_model(self)

    def disable_freuhhwirth_model(self):
        return _RF_Track.MultipleCoulombScattering_disable_freuhhwirth_model(self)

    def enable_wentzel_model(self):
        return _RF_Track.MultipleCoulombScattering_enable_wentzel_model(self)

    def disable_wentzel_model(self):
        return _RF_Track.MultipleCoulombScattering_disable_wentzel_model(self)

    def compute_force(self, *args):
        return _RF_Track.MultipleCoulombScattering_compute_force(self, *args)
    __swig_destroy__ = _RF_Track.delete_MultipleCoulombScattering

# Register MultipleCoulombScattering in _RF_Track:
_RF_Track.MultipleCoulombScattering_swigregister(MultipleCoulombScattering)
class EnergyStraggling(CollectiveEffect):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.EnergyStraggling_swiginit(self, _RF_Track.new_EnergyStraggling(*args))

    def clone(self):
        return _RF_Track.EnergyStraggling_clone(self)

    def compute_force(self, *args):
        return _RF_Track.EnergyStraggling_compute_force(self, *args)
    __swig_destroy__ = _RF_Track.delete_EnergyStraggling

# Register EnergyStraggling in _RF_Track:
_RF_Track.EnergyStraggling_swigregister(EnergyStraggling)
class StoppingPower(CollectiveEffect):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.StoppingPower_swiginit(self, _RF_Track.new_StoppingPower(*args))
    __swig_destroy__ = _RF_Track.delete_StoppingPower

    def clone(self):
        return _RF_Track.StoppingPower_clone(self)

    def compute_force(self, *args):
        return _RF_Track.StoppingPower_compute_force(self, *args)

# Register StoppingPower in _RF_Track:
_RF_Track.StoppingPower_swigregister(StoppingPower)
class IncoherentSynchrotronRadiation(CollectiveEffect):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, quantum=False):
        _RF_Track.IncoherentSynchrotronRadiation_swiginit(self, _RF_Track.new_IncoherentSynchrotronRadiation(quantum))

    def clone(self):
        return _RF_Track.IncoherentSynchrotronRadiation_clone(self)

    def compute_force(self, *args):
        return _RF_Track.IncoherentSynchrotronRadiation_compute_force(self, *args)
    __swig_destroy__ = _RF_Track.delete_IncoherentSynchrotronRadiation

# Register IncoherentSynchrotronRadiation in _RF_Track:
_RF_Track.IncoherentSynchrotronRadiation_swigregister(IncoherentSynchrotronRadiation)
class BroadbandDielectricStructure(GenericField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x0, y0, hx, hy, hz, length, t0, t1, N, P_map=1.0, P_actual=1.0):
        _RF_Track.BroadbandDielectricStructure_swiginit(self, _RF_Track.new_BroadbandDielectricStructure(x0, y0, hx, hy, hz, length, t0, t1, N, P_map, P_actual))

    def get_static_Efield(self):
        return _RF_Track.BroadbandDielectricStructure_get_static_Efield(self)

    def get_static_Bfield(self):
        return _RF_Track.BroadbandDielectricStructure_get_static_Bfield(self)

    def resize(self, N):
        return _RF_Track.BroadbandDielectricStructure_resize(self, N)

    def set_field_n(self, n, Ex, Ey, Ez, Bx, By, Bz):
        return _RF_Track.BroadbandDielectricStructure_set_field_n(self, n, Ex, Ey, Ez, Bx, By, Bz)

    def get_x0(self):
        return _RF_Track.BroadbandDielectricStructure_get_x0(self)

    def get_y0(self):
        return _RF_Track.BroadbandDielectricStructure_get_y0(self)

    def get_z0(self):
        return _RF_Track.BroadbandDielectricStructure_get_z0(self)

    def get_z1(self):
        return _RF_Track.BroadbandDielectricStructure_get_z1(self)

    def get_hx(self):
        return _RF_Track.BroadbandDielectricStructure_get_hx(self)

    def get_hy(self):
        return _RF_Track.BroadbandDielectricStructure_get_hy(self)

    def get_hz(self):
        return _RF_Track.BroadbandDielectricStructure_get_hz(self)

    def get_t0(self):
        return _RF_Track.BroadbandDielectricStructure_get_t0(self)

    def get_t1(self):
        return _RF_Track.BroadbandDielectricStructure_get_t1(self)

    def get_dt(self):
        return _RF_Track.BroadbandDielectricStructure_get_dt(self)

    def get_P_map(self):
        return _RF_Track.BroadbandDielectricStructure_get_P_map(self)

    def get_P_actual(self):
        return _RF_Track.BroadbandDielectricStructure_get_P_actual(self)

    def set_x0(self, x0_):
        return _RF_Track.BroadbandDielectricStructure_set_x0(self, x0_)

    def set_y0(self, y0_):
        return _RF_Track.BroadbandDielectricStructure_set_y0(self, y0_)

    def set_z0(self, z0_):
        return _RF_Track.BroadbandDielectricStructure_set_z0(self, z0_)

    def set_z1(self, z1_):
        return _RF_Track.BroadbandDielectricStructure_set_z1(self, z1_)

    def set_hx(self, hx_):
        return _RF_Track.BroadbandDielectricStructure_set_hx(self, hx_)

    def set_hy(self, hy_):
        return _RF_Track.BroadbandDielectricStructure_set_hy(self, hy_)

    def set_hz(self, hz_):
        return _RF_Track.BroadbandDielectricStructure_set_hz(self, hz_)

    def set_t0(self, t0_):
        return _RF_Track.BroadbandDielectricStructure_set_t0(self, t0_)

    def set_dt(self, dt_):
        return _RF_Track.BroadbandDielectricStructure_set_dt(self, dt_)

    def set_P_map(self, P):
        return _RF_Track.BroadbandDielectricStructure_set_P_map(self, P)

    def set_P_actual(self, P):
        return _RF_Track.BroadbandDielectricStructure_set_P_actual(self, P)

    def set_static_Efield(self, Ex, Ey, Ez):
        return _RF_Track.BroadbandDielectricStructure_set_static_Efield(self, Ex, Ey, Ez)

    def set_static_Bfield(self, Bx, By, Bz):
        return _RF_Track.BroadbandDielectricStructure_set_static_Bfield(self, Bx, By, Bz)
    __swig_destroy__ = _RF_Track.delete_BroadbandDielectricStructure

# Register BroadbandDielectricStructure in _RF_Track:
_RF_Track.BroadbandDielectricStructure_swigregister(BroadbandDielectricStructure)
class LaserBeam(TimeDependent_Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    length = property(_RF_Track.LaserBeam_length_get, _RF_Track.LaserBeam_length_set)
    pulse_energy = property(_RF_Track.LaserBeam_pulse_energy_get, _RF_Track.LaserBeam_pulse_energy_set)
    pulse_length = property(_RF_Track.LaserBeam_pulse_length_get, _RF_Track.LaserBeam_pulse_length_set)
    wavelength = property(_RF_Track.LaserBeam_wavelength_get, _RF_Track.LaserBeam_wavelength_set)
    position = property(_RF_Track.LaserBeam_position_get, _RF_Track.LaserBeam_position_set)
    direction = property(_RF_Track.LaserBeam_direction_get, _RF_Track.LaserBeam_direction_set)
    Rx = property(_RF_Track.LaserBeam_Rx_get, _RF_Track.LaserBeam_Rx_set)
    Ry = property(_RF_Track.LaserBeam_Ry_get, _RF_Track.LaserBeam_Ry_set)
    R = property(_RF_Track.LaserBeam_R_get, _RF_Track.LaserBeam_R_set)
    M2x = property(_RF_Track.LaserBeam_M2x_get, _RF_Track.LaserBeam_M2x_set)
    M2y = property(_RF_Track.LaserBeam_M2y_get, _RF_Track.LaserBeam_M2y_set)
    M2 = property(_RF_Track.LaserBeam_M2_get, _RF_Track.LaserBeam_M2_set)
    P = property(_RF_Track.LaserBeam_P_get, _RF_Track.LaserBeam_P_set)
    lambda_e = property(_RF_Track.LaserBeam_lambda_e_get, _RF_Track.LaserBeam_lambda_e_set)
    min_number_of_gammas_per_slice = property(_RF_Track.LaserBeam_min_number_of_gammas_per_slice_get, _RF_Track.LaserBeam_min_number_of_gammas_per_slice_set)
    Nmin = property(_RF_Track.LaserBeam_Nmin_get, _RF_Track.LaserBeam_Nmin_set)

    def check_R(self):
        return _RF_Track.LaserBeam_check_R(self)

    def check_M2(self):
        return _RF_Track.LaserBeam_check_M2(self)

    def __init__(self, length=0.0):
        _RF_Track.LaserBeam_swiginit(self, _RF_Track.new_LaserBeam(length))

    def get_M2(self):
        return _RF_Track.LaserBeam_get_M2(self)

    def get_M2x(self):
        return _RF_Track.LaserBeam_get_M2x(self)

    def get_M2y(self):
        return _RF_Track.LaserBeam_get_M2y(self)

    def get_zR(self):
        return _RF_Track.LaserBeam_get_zR(self)

    def get_zRx(self):
        return _RF_Track.LaserBeam_get_zRx(self)

    def get_zRy(self):
        return _RF_Track.LaserBeam_get_zRy(self)

    def get_direction(self):
        return _RF_Track.LaserBeam_get_direction(self)

    def get_position(self):
        return _RF_Track.LaserBeam_get_position(self)

    def set_direction(self, X, Y, Z):
        return _RF_Track.LaserBeam_set_direction(self, X, Y, Z)

    def set_position(self, Z):
        return _RF_Track.LaserBeam_set_position(self, Z)

    def set_M2(self, M2_):
        return _RF_Track.LaserBeam_set_M2(self, M2_)

    def set_M2x(self, M2x_):
        return _RF_Track.LaserBeam_set_M2x(self, M2x_)

    def set_M2y(self, M2y_):
        return _RF_Track.LaserBeam_set_M2y(self, M2y_)

    def set_zR(self, zR):
        return _RF_Track.LaserBeam_set_zR(self, zR)

    def set_zRx(self, zRx):
        return _RF_Track.LaserBeam_set_zRx(self, zRx)

    def set_zRy(self, zRy):
        return _RF_Track.LaserBeam_set_zRy(self, zRy)
    __swig_destroy__ = _RF_Track.delete_LaserBeam

# Register LaserBeam in _RF_Track:
_RF_Track.LaserBeam_swigregister(LaserBeam)
class Corrector(Multipole):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, length=0.0, kx=0.0, ky=0.0):
        _RF_Track.Corrector_swiginit(self, _RF_Track.new_Corrector(length, kx, ky))

    def set_strength(self, kx, ky):
        return _RF_Track.Corrector_set_strength(self, kx, ky)

    def vary_strength(self, kx, ky):
        return _RF_Track.Corrector_vary_strength(self, kx, ky)

    def get_strength(self):
        return _RF_Track.Corrector_get_strength(self)
    __swig_destroy__ = _RF_Track.delete_Corrector

# Register Corrector in _RF_Track:
_RF_Track.Corrector_swigregister(Corrector)
class Coil(GenericField, ):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.Coil_swiginit(self, _RF_Track.new_Coil(*args))

    def get_static_Efield(self):
        return _RF_Track.Coil_get_static_Efield(self)

    def get_static_Bfield(self):
        return _RF_Track.Coil_get_static_Bfield(self)

    def get_R(self):
        return _RF_Track.Coil_get_R(self)

    def get_B0(self):
        return _RF_Track.Coil_get_B0(self)

    def set_static_Efield(self, Ex, Ey, Ez):
        return _RF_Track.Coil_set_static_Efield(self, Ex, Ey, Ez)

    def set_static_Bfield(self, Bx, By, Bz):
        return _RF_Track.Coil_set_static_Bfield(self, Bx, By, Bz)

    def set_R(self, R_):
        return _RF_Track.Coil_set_R(self, R_)

    def set_B0(self, B0_):
        return _RF_Track.Coil_set_B0(self, B0_)

    def set_R_and_current(self, R_, I_):
        return _RF_Track.Coil_set_R_and_current(self, R_, I_)
    __swig_destroy__ = _RF_Track.delete_Coil

# Register Coil in _RF_Track:
_RF_Track.Coil_swigregister(Coil)
class Bpm(ConstantField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, length=0.0, bpm_resolution=0.0):
        _RF_Track.Bpm_swiginit(self, _RF_Track.new_Bpm(length, bpm_resolution))

    def get_reading(self):
        return _RF_Track.Bpm_get_reading(self)

    def set_resolution(self, res):
        return _RF_Track.Bpm_set_resolution(self, res)

    def get_resolution(self):
        return _RF_Track.Bpm_get_resolution(self)
    __swig_destroy__ = _RF_Track.delete_Bpm

# Register Bpm in _RF_Track:
_RF_Track.Bpm_swigregister(Bpm)
class Wakefield_1d_CINT(CollectiveEffect):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.Wakefield_1d_CINT_swiginit(self, _RF_Track.new_Wakefield_1d_CINT(*args))

    def w_transv(self, s):
        return _RF_Track.Wakefield_1d_CINT_w_transv(self, s)

    def w_long(self, s):
        return _RF_Track.Wakefield_1d_CINT_w_long(self, s)

    def set_nbins(self, nbins_):
        return _RF_Track.Wakefield_1d_CINT_set_nbins(self, nbins_)

    def set_max_range(self, range):
        return _RF_Track.Wakefield_1d_CINT_set_max_range(self, range)

    def set_hz(self, hz_):
        return _RF_Track.Wakefield_1d_CINT_set_hz(self, hz_)

    def get_hz(self):
        return _RF_Track.Wakefield_1d_CINT_get_hz(self)

    def clone(self):
        return _RF_Track.Wakefield_1d_CINT_clone(self)

    def compute_force(self, *args):
        return _RF_Track.Wakefield_1d_CINT_compute_force(self, *args)
    __swig_destroy__ = _RF_Track.delete_Wakefield_1d_CINT

# Register Wakefield_1d_CINT in _RF_Track:
_RF_Track.Wakefield_1d_CINT_swigregister(Wakefield_1d_CINT)
class Wakefield_1d(CollectiveEffect):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.Wakefield_1d_swiginit(self, _RF_Track.new_Wakefield_1d(*args))

    def w_transv(self, s):
        return _RF_Track.Wakefield_1d_w_transv(self, s)

    def w_long(self, s):
        return _RF_Track.Wakefield_1d_w_long(self, s)

    def set_nbins(self, nbins_):
        return _RF_Track.Wakefield_1d_set_nbins(self, nbins_)

    def set_max_range(self, range):
        return _RF_Track.Wakefield_1d_set_max_range(self, range)

    def set_hz(self, hz_):
        return _RF_Track.Wakefield_1d_set_hz(self, hz_)

    def get_hz(self):
        return _RF_Track.Wakefield_1d_get_hz(self)

    def clone(self):
        return _RF_Track.Wakefield_1d_clone(self)

    def compute_force(self, *args):
        return _RF_Track.Wakefield_1d_compute_force(self, *args)
    __swig_destroy__ = _RF_Track.delete_Wakefield_1d

# Register Wakefield_1d in _RF_Track:
_RF_Track.Wakefield_1d_swigregister(Wakefield_1d)
class RF_FieldMap_CINT(RF_Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.RF_FieldMap_CINT_swiginit(self, _RF_Track.new_RF_FieldMap_CINT(*args))

    def get_hx(self):
        return _RF_Track.RF_FieldMap_CINT_get_hx(self)

    def get_hy(self):
        return _RF_Track.RF_FieldMap_CINT_get_hy(self)

    def get_hz(self):
        return _RF_Track.RF_FieldMap_CINT_get_hz(self)

    def get_nx(self):
        return _RF_Track.RF_FieldMap_CINT_get_nx(self)

    def get_ny(self):
        return _RF_Track.RF_FieldMap_CINT_get_ny(self)

    def get_nz(self):
        return _RF_Track.RF_FieldMap_CINT_get_nz(self)

    def get_xa(self):
        return _RF_Track.RF_FieldMap_CINT_get_xa(self)

    def get_ya(self):
        return _RF_Track.RF_FieldMap_CINT_get_ya(self)

    def get_x0(self):
        return _RF_Track.RF_FieldMap_CINT_get_x0(self)

    def get_y0(self):
        return _RF_Track.RF_FieldMap_CINT_get_y0(self)

    def get_z0(self):
        return _RF_Track.RF_FieldMap_CINT_get_z0(self)

    def get_x1(self):
        return _RF_Track.RF_FieldMap_CINT_get_x1(self)

    def get_y1(self):
        return _RF_Track.RF_FieldMap_CINT_get_y1(self)

    def get_z1(self):
        return _RF_Track.RF_FieldMap_CINT_get_z1(self)

    def is_cylindrical(self):
        return _RF_Track.RF_FieldMap_CINT_is_cylindrical(self)

    def set_cylindrical(self, c):
        return _RF_Track.RF_FieldMap_CINT_set_cylindrical(self, c)

    def get_P_map(self):
        return _RF_Track.RF_FieldMap_CINT_get_P_map(self)

    def get_P_actual(self):
        return _RF_Track.RF_FieldMap_CINT_get_P_actual(self)

    def get_direction(self):
        return _RF_Track.RF_FieldMap_CINT_get_direction(self)

    def get_static_Bfield(self):
        return _RF_Track.RF_FieldMap_CINT_get_static_Bfield(self)

    def set_static_Bfield(self, Bx, By, Bz):
        return _RF_Track.RF_FieldMap_CINT_set_static_Bfield(self, Bx, By, Bz)

    def set_hx(self, hx_):
        return _RF_Track.RF_FieldMap_CINT_set_hx(self, hx_)

    def set_hy(self, hy_):
        return _RF_Track.RF_FieldMap_CINT_set_hy(self, hy_)

    def set_hz(self, hz_):
        return _RF_Track.RF_FieldMap_CINT_set_hz(self, hz_)

    def set_xa(self, xa_):
        return _RF_Track.RF_FieldMap_CINT_set_xa(self, xa_)

    def set_ya(self, ya_):
        return _RF_Track.RF_FieldMap_CINT_set_ya(self, ya_)

    def set_z0(self, z0_):
        return _RF_Track.RF_FieldMap_CINT_set_z0(self, z0_)

    def set_z1(self, z1_):
        return _RF_Track.RF_FieldMap_CINT_set_z1(self, z1_)

    def set_smooth(self, radius):
        return _RF_Track.RF_FieldMap_CINT_set_smooth(self, radius)

    def set_direction(self, d):
        return _RF_Track.RF_FieldMap_CINT_set_direction(self, d)

    def set_P_map(self, P):
        return _RF_Track.RF_FieldMap_CINT_set_P_map(self, P)

    def set_P_actual(self, P):
        return _RF_Track.RF_FieldMap_CINT_set_P_actual(self, P)
    __swig_destroy__ = _RF_Track.delete_RF_FieldMap_CINT

# Register RF_FieldMap_CINT in _RF_Track:
_RF_Track.RF_FieldMap_CINT_swigregister(RF_FieldMap_CINT)
class RF_FieldMap(RF_Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.RF_FieldMap_swiginit(self, _RF_Track.new_RF_FieldMap(*args))

    def get_hx(self):
        return _RF_Track.RF_FieldMap_get_hx(self)

    def get_hy(self):
        return _RF_Track.RF_FieldMap_get_hy(self)

    def get_hz(self):
        return _RF_Track.RF_FieldMap_get_hz(self)

    def get_nx(self):
        return _RF_Track.RF_FieldMap_get_nx(self)

    def get_ny(self):
        return _RF_Track.RF_FieldMap_get_ny(self)

    def get_nz(self):
        return _RF_Track.RF_FieldMap_get_nz(self)

    def get_xa(self):
        return _RF_Track.RF_FieldMap_get_xa(self)

    def get_ya(self):
        return _RF_Track.RF_FieldMap_get_ya(self)

    def get_x0(self):
        return _RF_Track.RF_FieldMap_get_x0(self)

    def get_y0(self):
        return _RF_Track.RF_FieldMap_get_y0(self)

    def get_z0(self):
        return _RF_Track.RF_FieldMap_get_z0(self)

    def get_x1(self):
        return _RF_Track.RF_FieldMap_get_x1(self)

    def get_y1(self):
        return _RF_Track.RF_FieldMap_get_y1(self)

    def get_z1(self):
        return _RF_Track.RF_FieldMap_get_z1(self)

    def is_cylindrical(self):
        return _RF_Track.RF_FieldMap_is_cylindrical(self)

    def set_cylindrical(self, c):
        return _RF_Track.RF_FieldMap_set_cylindrical(self, c)

    def get_P_map(self):
        return _RF_Track.RF_FieldMap_get_P_map(self)

    def get_P_actual(self):
        return _RF_Track.RF_FieldMap_get_P_actual(self)

    def get_direction(self):
        return _RF_Track.RF_FieldMap_get_direction(self)

    def get_static_Bfield(self):
        return _RF_Track.RF_FieldMap_get_static_Bfield(self)

    def set_static_Bfield(self, Bx, By, Bz):
        return _RF_Track.RF_FieldMap_set_static_Bfield(self, Bx, By, Bz)

    def set_hx(self, hx_):
        return _RF_Track.RF_FieldMap_set_hx(self, hx_)

    def set_hy(self, hy_):
        return _RF_Track.RF_FieldMap_set_hy(self, hy_)

    def set_hz(self, hz_):
        return _RF_Track.RF_FieldMap_set_hz(self, hz_)

    def set_xa(self, xa_):
        return _RF_Track.RF_FieldMap_set_xa(self, xa_)

    def set_ya(self, ya_):
        return _RF_Track.RF_FieldMap_set_ya(self, ya_)

    def set_z0(self, z0_):
        return _RF_Track.RF_FieldMap_set_z0(self, z0_)

    def set_z1(self, z1_):
        return _RF_Track.RF_FieldMap_set_z1(self, z1_)

    def set_smooth(self, radius):
        return _RF_Track.RF_FieldMap_set_smooth(self, radius)

    def set_direction(self, d):
        return _RF_Track.RF_FieldMap_set_direction(self, d)

    def set_P_map(self, P):
        return _RF_Track.RF_FieldMap_set_P_map(self, P)

    def set_P_actual(self, P):
        return _RF_Track.RF_FieldMap_set_P_actual(self, P)
    __swig_destroy__ = _RF_Track.delete_RF_FieldMap

# Register RF_FieldMap in _RF_Track:
_RF_Track.RF_FieldMap_swigregister(RF_FieldMap)
class RF_FieldMap_1d_CINT(RF_Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.RF_FieldMap_1d_CINT_swiginit(self, _RF_Track.new_RF_FieldMap_1d_CINT(*args))

    def get_hz(self):
        return _RF_Track.RF_FieldMap_1d_CINT_get_hz(self)

    def get_nz(self):
        return _RF_Track.RF_FieldMap_1d_CINT_get_nz(self)

    def get_z0(self):
        return _RF_Track.RF_FieldMap_1d_CINT_get_z0(self)

    def get_z1(self):
        return _RF_Track.RF_FieldMap_1d_CINT_get_z1(self)

    def get_P_map(self):
        return _RF_Track.RF_FieldMap_1d_CINT_get_P_map(self)

    def get_P_actual(self):
        return _RF_Track.RF_FieldMap_1d_CINT_get_P_actual(self)

    def get_direction(self):
        return _RF_Track.RF_FieldMap_1d_CINT_get_direction(self)

    def get_Ez(self):
        return _RF_Track.RF_FieldMap_1d_CINT_get_Ez(self)

    def get_static_Bfield(self):
        return _RF_Track.RF_FieldMap_1d_CINT_get_static_Bfield(self)

    def set_static_Bfield(self, Bx, By, Bz):
        return _RF_Track.RF_FieldMap_1d_CINT_set_static_Bfield(self, Bx, By, Bz)

    def set_smooth(self, radius):
        return _RF_Track.RF_FieldMap_1d_CINT_set_smooth(self, radius)

    def set_hz(self, hz_):
        return _RF_Track.RF_FieldMap_1d_CINT_set_hz(self, hz_)

    def set_z0(self, z0_):
        return _RF_Track.RF_FieldMap_1d_CINT_set_z0(self, z0_)

    def set_z1(self, z1_):
        return _RF_Track.RF_FieldMap_1d_CINT_set_z1(self, z1_)

    def set_direction(self, d):
        return _RF_Track.RF_FieldMap_1d_CINT_set_direction(self, d)

    def set_P_map(self, P):
        return _RF_Track.RF_FieldMap_1d_CINT_set_P_map(self, P)

    def set_P_actual(self, P):
        return _RF_Track.RF_FieldMap_1d_CINT_set_P_actual(self, P)
    __swig_destroy__ = _RF_Track.delete_RF_FieldMap_1d_CINT

# Register RF_FieldMap_1d_CINT in _RF_Track:
_RF_Track.RF_FieldMap_1d_CINT_swigregister(RF_FieldMap_1d_CINT)
class RF_FieldMap_1d(RF_Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.RF_FieldMap_1d_swiginit(self, _RF_Track.new_RF_FieldMap_1d(*args))

    def get_hz(self):
        return _RF_Track.RF_FieldMap_1d_get_hz(self)

    def get_nz(self):
        return _RF_Track.RF_FieldMap_1d_get_nz(self)

    def get_z0(self):
        return _RF_Track.RF_FieldMap_1d_get_z0(self)

    def get_z1(self):
        return _RF_Track.RF_FieldMap_1d_get_z1(self)

    def get_P_map(self):
        return _RF_Track.RF_FieldMap_1d_get_P_map(self)

    def get_P_actual(self):
        return _RF_Track.RF_FieldMap_1d_get_P_actual(self)

    def get_direction(self):
        return _RF_Track.RF_FieldMap_1d_get_direction(self)

    def get_Ez(self):
        return _RF_Track.RF_FieldMap_1d_get_Ez(self)

    def get_static_Bfield(self):
        return _RF_Track.RF_FieldMap_1d_get_static_Bfield(self)

    def set_static_Bfield(self, Bx, By, Bz):
        return _RF_Track.RF_FieldMap_1d_set_static_Bfield(self, Bx, By, Bz)

    def set_smooth(self, radius):
        return _RF_Track.RF_FieldMap_1d_set_smooth(self, radius)

    def set_hz(self, hz_):
        return _RF_Track.RF_FieldMap_1d_set_hz(self, hz_)

    def set_z0(self, z0_):
        return _RF_Track.RF_FieldMap_1d_set_z0(self, z0_)

    def set_z1(self, z1_):
        return _RF_Track.RF_FieldMap_1d_set_z1(self, z1_)

    def set_direction(self, d):
        return _RF_Track.RF_FieldMap_1d_set_direction(self, d)

    def set_P_map(self, P):
        return _RF_Track.RF_FieldMap_1d_set_P_map(self, P)

    def set_P_actual(self, P):
        return _RF_Track.RF_FieldMap_1d_set_P_actual(self, P)
    __swig_destroy__ = _RF_Track.delete_RF_FieldMap_1d

# Register RF_FieldMap_1d in _RF_Track:
_RF_Track.RF_FieldMap_1d_swigregister(RF_FieldMap_1d)
class RF_FieldMap_2d_CINT(RF_Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.RF_FieldMap_2d_CINT_swiginit(self, _RF_Track.new_RF_FieldMap_2d_CINT(*args))

    def get_hr(self):
        return _RF_Track.RF_FieldMap_2d_CINT_get_hr(self)

    def get_hz(self):
        return _RF_Track.RF_FieldMap_2d_CINT_get_hz(self)

    def get_nr(self):
        return _RF_Track.RF_FieldMap_2d_CINT_get_nr(self)

    def get_nz(self):
        return _RF_Track.RF_FieldMap_2d_CINT_get_nz(self)

    def get_P_map(self):
        return _RF_Track.RF_FieldMap_2d_CINT_get_P_map(self)

    def get_P_actual(self):
        return _RF_Track.RF_FieldMap_2d_CINT_get_P_actual(self)

    def get_direction(self):
        return _RF_Track.RF_FieldMap_2d_CINT_get_direction(self)

    def get_static_Bfield(self):
        return _RF_Track.RF_FieldMap_2d_CINT_get_static_Bfield(self)

    def set_static_Bfield(self, Bx, By, Bz):
        return _RF_Track.RF_FieldMap_2d_CINT_set_static_Bfield(self, Bx, By, Bz)

    def set_hr(self, hr_):
        return _RF_Track.RF_FieldMap_2d_CINT_set_hr(self, hr_)

    def set_hz(self, hz_):
        return _RF_Track.RF_FieldMap_2d_CINT_set_hz(self, hz_)

    def set_z0(self, z0_):
        return _RF_Track.RF_FieldMap_2d_CINT_set_z0(self, z0_)

    def set_z1(self, z1_):
        return _RF_Track.RF_FieldMap_2d_CINT_set_z1(self, z1_)

    def set_direction(self, d):
        return _RF_Track.RF_FieldMap_2d_CINT_set_direction(self, d)

    def set_P_map(self, P):
        return _RF_Track.RF_FieldMap_2d_CINT_set_P_map(self, P)

    def set_P_actual(self, P):
        return _RF_Track.RF_FieldMap_2d_CINT_set_P_actual(self, P)
    __swig_destroy__ = _RF_Track.delete_RF_FieldMap_2d_CINT

# Register RF_FieldMap_2d_CINT in _RF_Track:
_RF_Track.RF_FieldMap_2d_CINT_swigregister(RF_FieldMap_2d_CINT)
class RF_FieldMap_2d(RF_Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.RF_FieldMap_2d_swiginit(self, _RF_Track.new_RF_FieldMap_2d(*args))

    def get_hr(self):
        return _RF_Track.RF_FieldMap_2d_get_hr(self)

    def get_hz(self):
        return _RF_Track.RF_FieldMap_2d_get_hz(self)

    def get_nr(self):
        return _RF_Track.RF_FieldMap_2d_get_nr(self)

    def get_nz(self):
        return _RF_Track.RF_FieldMap_2d_get_nz(self)

    def get_P_map(self):
        return _RF_Track.RF_FieldMap_2d_get_P_map(self)

    def get_P_actual(self):
        return _RF_Track.RF_FieldMap_2d_get_P_actual(self)

    def get_direction(self):
        return _RF_Track.RF_FieldMap_2d_get_direction(self)

    def get_static_Bfield(self):
        return _RF_Track.RF_FieldMap_2d_get_static_Bfield(self)

    def set_static_Bfield(self, Bx, By, Bz):
        return _RF_Track.RF_FieldMap_2d_set_static_Bfield(self, Bx, By, Bz)

    def set_hr(self, hr_):
        return _RF_Track.RF_FieldMap_2d_set_hr(self, hr_)

    def set_hz(self, hz_):
        return _RF_Track.RF_FieldMap_2d_set_hz(self, hz_)

    def set_z0(self, z0_):
        return _RF_Track.RF_FieldMap_2d_set_z0(self, z0_)

    def set_z1(self, z1_):
        return _RF_Track.RF_FieldMap_2d_set_z1(self, z1_)

    def set_direction(self, d):
        return _RF_Track.RF_FieldMap_2d_set_direction(self, d)

    def set_P_map(self, P):
        return _RF_Track.RF_FieldMap_2d_set_P_map(self, P)

    def set_P_actual(self, P):
        return _RF_Track.RF_FieldMap_2d_set_P_actual(self, P)
    __swig_destroy__ = _RF_Track.delete_RF_FieldMap_2d

# Register RF_FieldMap_2d in _RF_Track:
_RF_Track.RF_FieldMap_2d_swigregister(RF_FieldMap_2d)
class Static_Magnetic_FieldMap_1d_CINT(GenericField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.Static_Magnetic_FieldMap_1d_CINT_swiginit(self, _RF_Track.new_Static_Magnetic_FieldMap_1d_CINT(*args))

    def get_hz(self):
        return _RF_Track.Static_Magnetic_FieldMap_1d_CINT_get_hz(self)

    def get_nz(self):
        return _RF_Track.Static_Magnetic_FieldMap_1d_CINT_get_nz(self)

    def get_z0(self):
        return _RF_Track.Static_Magnetic_FieldMap_1d_CINT_get_z0(self)

    def get_z1(self):
        return _RF_Track.Static_Magnetic_FieldMap_1d_CINT_get_z1(self)

    def get_static_Bfield(self):
        return _RF_Track.Static_Magnetic_FieldMap_1d_CINT_get_static_Bfield(self)

    def set_static_Bfield(self, Bx, By, Bz):
        return _RF_Track.Static_Magnetic_FieldMap_1d_CINT_set_static_Bfield(self, Bx, By, Bz)

    def set_smooth(self, radius):
        return _RF_Track.Static_Magnetic_FieldMap_1d_CINT_set_smooth(self, radius)

    def set_hz(self, hz_):
        return _RF_Track.Static_Magnetic_FieldMap_1d_CINT_set_hz(self, hz_)

    def set_z0(self, z0_):
        return _RF_Track.Static_Magnetic_FieldMap_1d_CINT_set_z0(self, z0_)

    def set_z1(self, z1_):
        return _RF_Track.Static_Magnetic_FieldMap_1d_CINT_set_z1(self, z1_)
    __swig_destroy__ = _RF_Track.delete_Static_Magnetic_FieldMap_1d_CINT

# Register Static_Magnetic_FieldMap_1d_CINT in _RF_Track:
_RF_Track.Static_Magnetic_FieldMap_1d_CINT_swigregister(Static_Magnetic_FieldMap_1d_CINT)
class Static_Magnetic_FieldMap_1d(GenericField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.Static_Magnetic_FieldMap_1d_swiginit(self, _RF_Track.new_Static_Magnetic_FieldMap_1d(*args))

    def get_hz(self):
        return _RF_Track.Static_Magnetic_FieldMap_1d_get_hz(self)

    def get_nz(self):
        return _RF_Track.Static_Magnetic_FieldMap_1d_get_nz(self)

    def get_z0(self):
        return _RF_Track.Static_Magnetic_FieldMap_1d_get_z0(self)

    def get_z1(self):
        return _RF_Track.Static_Magnetic_FieldMap_1d_get_z1(self)

    def get_static_Bfield(self):
        return _RF_Track.Static_Magnetic_FieldMap_1d_get_static_Bfield(self)

    def set_static_Bfield(self, Bx, By, Bz):
        return _RF_Track.Static_Magnetic_FieldMap_1d_set_static_Bfield(self, Bx, By, Bz)

    def set_smooth(self, radius):
        return _RF_Track.Static_Magnetic_FieldMap_1d_set_smooth(self, radius)

    def set_hz(self, hz_):
        return _RF_Track.Static_Magnetic_FieldMap_1d_set_hz(self, hz_)

    def set_z0(self, z0_):
        return _RF_Track.Static_Magnetic_FieldMap_1d_set_z0(self, z0_)

    def set_z1(self, z1_):
        return _RF_Track.Static_Magnetic_FieldMap_1d_set_z1(self, z1_)
    __swig_destroy__ = _RF_Track.delete_Static_Magnetic_FieldMap_1d

# Register Static_Magnetic_FieldMap_1d in _RF_Track:
_RF_Track.Static_Magnetic_FieldMap_1d_swigregister(Static_Magnetic_FieldMap_1d)
class Static_Magnetic_FieldMap_2d_CINT(GenericField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.Static_Magnetic_FieldMap_2d_CINT_swiginit(self, _RF_Track.new_Static_Magnetic_FieldMap_2d_CINT(*args))

    def get_hr(self):
        return _RF_Track.Static_Magnetic_FieldMap_2d_CINT_get_hr(self)

    def get_hz(self):
        return _RF_Track.Static_Magnetic_FieldMap_2d_CINT_get_hz(self)

    def get_nr(self):
        return _RF_Track.Static_Magnetic_FieldMap_2d_CINT_get_nr(self)

    def get_nz(self):
        return _RF_Track.Static_Magnetic_FieldMap_2d_CINT_get_nz(self)

    def get_z0(self):
        return _RF_Track.Static_Magnetic_FieldMap_2d_CINT_get_z0(self)

    def get_z1(self):
        return _RF_Track.Static_Magnetic_FieldMap_2d_CINT_get_z1(self)

    def get_static_Bfield(self):
        return _RF_Track.Static_Magnetic_FieldMap_2d_CINT_get_static_Bfield(self)

    def set_static_Bfield(self, Bx, By, Bz):
        return _RF_Track.Static_Magnetic_FieldMap_2d_CINT_set_static_Bfield(self, Bx, By, Bz)

    def set_hr(self, hr_):
        return _RF_Track.Static_Magnetic_FieldMap_2d_CINT_set_hr(self, hr_)

    def set_hz(self, hz_):
        return _RF_Track.Static_Magnetic_FieldMap_2d_CINT_set_hz(self, hz_)

    def set_z0(self, z0_):
        return _RF_Track.Static_Magnetic_FieldMap_2d_CINT_set_z0(self, z0_)

    def set_z1(self, z1_):
        return _RF_Track.Static_Magnetic_FieldMap_2d_CINT_set_z1(self, z1_)
    __swig_destroy__ = _RF_Track.delete_Static_Magnetic_FieldMap_2d_CINT

# Register Static_Magnetic_FieldMap_2d_CINT in _RF_Track:
_RF_Track.Static_Magnetic_FieldMap_2d_CINT_swigregister(Static_Magnetic_FieldMap_2d_CINT)
class Static_Magnetic_FieldMap_2d(GenericField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.Static_Magnetic_FieldMap_2d_swiginit(self, _RF_Track.new_Static_Magnetic_FieldMap_2d(*args))

    def get_hr(self):
        return _RF_Track.Static_Magnetic_FieldMap_2d_get_hr(self)

    def get_hz(self):
        return _RF_Track.Static_Magnetic_FieldMap_2d_get_hz(self)

    def get_nr(self):
        return _RF_Track.Static_Magnetic_FieldMap_2d_get_nr(self)

    def get_nz(self):
        return _RF_Track.Static_Magnetic_FieldMap_2d_get_nz(self)

    def get_z0(self):
        return _RF_Track.Static_Magnetic_FieldMap_2d_get_z0(self)

    def get_z1(self):
        return _RF_Track.Static_Magnetic_FieldMap_2d_get_z1(self)

    def get_static_Bfield(self):
        return _RF_Track.Static_Magnetic_FieldMap_2d_get_static_Bfield(self)

    def set_static_Bfield(self, Bx, By, Bz):
        return _RF_Track.Static_Magnetic_FieldMap_2d_set_static_Bfield(self, Bx, By, Bz)

    def set_hr(self, hr_):
        return _RF_Track.Static_Magnetic_FieldMap_2d_set_hr(self, hr_)

    def set_hz(self, hz_):
        return _RF_Track.Static_Magnetic_FieldMap_2d_set_hz(self, hz_)

    def set_z0(self, z0_):
        return _RF_Track.Static_Magnetic_FieldMap_2d_set_z0(self, z0_)

    def set_z1(self, z1_):
        return _RF_Track.Static_Magnetic_FieldMap_2d_set_z1(self, z1_)
    __swig_destroy__ = _RF_Track.delete_Static_Magnetic_FieldMap_2d

# Register Static_Magnetic_FieldMap_2d in _RF_Track:
_RF_Track.Static_Magnetic_FieldMap_2d_swigregister(Static_Magnetic_FieldMap_2d)
class SpaceCharge_PIC_FreeSpace(SpaceCharge):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.SpaceCharge_PIC_FreeSpace_swiginit(self, _RF_Track.new_SpaceCharge_PIC_FreeSpace(*args))
    __swig_destroy__ = _RF_Track.delete_SpaceCharge_PIC_FreeSpace

    def __assign__(self, sc):
        return _RF_Track.SpaceCharge_PIC_FreeSpace___assign__(self, sc)

    def set_mirror(self, S_mirror_):
        return _RF_Track.SpaceCharge_PIC_FreeSpace_set_mirror(self, S_mirror_)

    def set_smooth(self, radius):
        return _RF_Track.SpaceCharge_PIC_FreeSpace_set_smooth(self, radius)

    def set_velocity_slices(self, N):
        return _RF_Track.SpaceCharge_PIC_FreeSpace_set_velocity_slices(self, N)

    def get_mirror(self):
        return _RF_Track.SpaceCharge_PIC_FreeSpace_get_mirror(self)

    def get_smooth(self):
        return _RF_Track.SpaceCharge_PIC_FreeSpace_get_smooth(self)

    def get_velocity_slices(self):
        return _RF_Track.SpaceCharge_PIC_FreeSpace_get_velocity_slices(self)

    def compute_force(self, *args):
        return _RF_Track.SpaceCharge_PIC_FreeSpace_compute_force(self, *args)

# Register SpaceCharge_PIC_FreeSpace in _RF_Track:
_RF_Track.SpaceCharge_PIC_FreeSpace_swigregister(SpaceCharge_PIC_FreeSpace)
class SpaceCharge_PIC_LongCylinder_T(SpaceCharge):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.SpaceCharge_PIC_LongCylinder_T_swiginit(self, _RF_Track.new_SpaceCharge_PIC_LongCylinder_T(*args))
    __swig_destroy__ = _RF_Track.delete_SpaceCharge_PIC_LongCylinder_T

    def __assign__(self, sc):
        return _RF_Track.SpaceCharge_PIC_LongCylinder_T___assign__(self, sc)

    def set_mirror(self, S_mirror_):
        return _RF_Track.SpaceCharge_PIC_LongCylinder_T_set_mirror(self, S_mirror_)

    def set_smooth(self, radius):
        return _RF_Track.SpaceCharge_PIC_LongCylinder_T_set_smooth(self, radius)

    def set_velocity_slices(self, N):
        return _RF_Track.SpaceCharge_PIC_LongCylinder_T_set_velocity_slices(self, N)

    def get_mirror(self):
        return _RF_Track.SpaceCharge_PIC_LongCylinder_T_get_mirror(self)

    def get_smooth(self):
        return _RF_Track.SpaceCharge_PIC_LongCylinder_T_get_smooth(self)

    def get_velocity_slices(self):
        return _RF_Track.SpaceCharge_PIC_LongCylinder_T_get_velocity_slices(self)

    def compute_force(self, *args):
        return _RF_Track.SpaceCharge_PIC_LongCylinder_T_compute_force(self, *args)

# Register SpaceCharge_PIC_LongCylinder_T in _RF_Track:
_RF_Track.SpaceCharge_PIC_LongCylinder_T_swigregister(SpaceCharge_PIC_LongCylinder_T)
class SpaceCharge_PIC_HorizontalPlates_T(SpaceCharge):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RF_Track.SpaceCharge_PIC_HorizontalPlates_T_swiginit(self, _RF_Track.new_SpaceCharge_PIC_HorizontalPlates_T(*args))
    __swig_destroy__ = _RF_Track.delete_SpaceCharge_PIC_HorizontalPlates_T

    def __assign__(self, sc):
        return _RF_Track.SpaceCharge_PIC_HorizontalPlates_T___assign__(self, sc)

    def set_mirror(self, S_mirror_):
        return _RF_Track.SpaceCharge_PIC_HorizontalPlates_T_set_mirror(self, S_mirror_)

    def set_smooth(self, radius):
        return _RF_Track.SpaceCharge_PIC_HorizontalPlates_T_set_smooth(self, radius)

    def set_velocity_slices(self, N):
        return _RF_Track.SpaceCharge_PIC_HorizontalPlates_T_set_velocity_slices(self, N)

    def get_mirror(self):
        return _RF_Track.SpaceCharge_PIC_HorizontalPlates_T_get_mirror(self)

    def get_smooth(self):
        return _RF_Track.SpaceCharge_PIC_HorizontalPlates_T_get_smooth(self)

    def get_velocity_slices(self):
        return _RF_Track.SpaceCharge_PIC_HorizontalPlates_T_get_velocity_slices(self)

    def compute_force(self, *args):
        return _RF_Track.SpaceCharge_PIC_HorizontalPlates_T_compute_force(self, *args)

# Register SpaceCharge_PIC_HorizontalPlates_T in _RF_Track:
_RF_Track.SpaceCharge_PIC_HorizontalPlates_T_swigregister(SpaceCharge_PIC_HorizontalPlates_T)
class SpaceCharge_PIC_LongCylinder(SpaceCharge_PIC_LongCylinder_T):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Nx_=1, Ny_=1, Nz_=1, a=1.0):
        _RF_Track.SpaceCharge_PIC_LongCylinder_swiginit(self, _RF_Track.new_SpaceCharge_PIC_LongCylinder(Nx_, Ny_, Nz_, a))

    def set_aperture(self, a):
        return _RF_Track.SpaceCharge_PIC_LongCylinder_set_aperture(self, a)

    def get_aperture(self):
        return _RF_Track.SpaceCharge_PIC_LongCylinder_get_aperture(self)
    __swig_destroy__ = _RF_Track.delete_SpaceCharge_PIC_LongCylinder

# Register SpaceCharge_PIC_LongCylinder in _RF_Track:
_RF_Track.SpaceCharge_PIC_LongCylinder_swigregister(SpaceCharge_PIC_LongCylinder)
class SpaceCharge_PIC_HorizontalPlates(SpaceCharge_PIC_HorizontalPlates_T):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Nx_=1, Ny_=1, Nz_=1, h=1.0):
        _RF_Track.SpaceCharge_PIC_HorizontalPlates_swiginit(self, _RF_Track.new_SpaceCharge_PIC_HorizontalPlates(Nx_, Ny_, Nz_, h))

    def set_half_gap(self, h):
        return _RF_Track.SpaceCharge_PIC_HorizontalPlates_set_half_gap(self, h)

    def get_half_gap(self):
        return _RF_Track.SpaceCharge_PIC_HorizontalPlates_get_half_gap(self)
    __swig_destroy__ = _RF_Track.delete_SpaceCharge_PIC_HorizontalPlates

# Register SpaceCharge_PIC_HorizontalPlates in _RF_Track:
_RF_Track.SpaceCharge_PIC_HorizontalPlates_swigregister(SpaceCharge_PIC_HorizontalPlates)

