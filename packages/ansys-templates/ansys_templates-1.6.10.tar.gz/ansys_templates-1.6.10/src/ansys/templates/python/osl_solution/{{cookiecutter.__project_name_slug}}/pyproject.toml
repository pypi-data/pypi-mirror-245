[build-system]
requires = ["poetry-core>=1.0.0,<1.3.0", "setuptools>=65.0"]
build-backend = "poetry.core.masonry.api"

# The following lines were added to enforce the poetry version needed for the project.
# It will be read by the setup_environment.py script to install this version.
[build-system-requirements]
build-system-version = "1.7.0"

[tool.poetry]
name = "{{cookiecutter.__pkg_name}}"
version = "{{cookiecutter.__version}}"
description = "{{cookiecutter.__short_description}}"
license = "Proprietary"
authors = ["ANSYS, Inc. <solution-applications.maintainers@ansys.com>"]
maintainers = ["ANSYS, Inc. <solution-applications.maintainers@ansys.com>"]
readme = "README.rst"
keywords = ["Ansys Solutions"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Other Audience",
    "License :: Other/Proprietary License",
    "Natural Language :: English",
    "Operating System :: Microsoft :: Windows",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Topic :: Scientific/Engineering"
]
packages = [
    { include = "ansys", from = "src" },
]

[[tool.poetry.source]]
name = "PyPI"
priority = "primary"

[[tool.poetry.source]]
name = "solutions-private-pypi"
url = "https://pkgs.dev.azure.com/pyansys/_packaging/ansys-solutions/pypi/simple/"
priority = "supplemental"

[[tool.poetry.source]]
name = "pyansys-private-pypi"
url = "https://pkgs.dev.azure.com/pyansys/_packaging/pyansys/pypi/simple/"
priority = "supplemental"

[tool.poetry.dependencies]
python = ">=3.8, <3.11"
ansys-optislang-core = "0.4"
ansys-saf-glow = {version = "0.4.4", source = "solutions-private-pypi"}
ansys-saf-pim-light-server = {version = "^0.3.0.dev1", source = "pyansys-private-pypi"}
ansys-saf-portal = {version = "0.5.0", source = "solutions-private-pypi"}
ansys-solutions-optislang-frontend-components = {version = "0.1.2", source = "solutions-private-pypi"}
ansys-web-components-dash = {version = "^0.0.dev2", source = "solutions-private-pypi"}
optislang-dash-lib = {version = "^0.2.1", source = "solutions-private-pypi"}
dash = "^2.6"
dash_bootstrap_components = "^1.2"
dash-daq = "^0.5.0"
dash-extensions = ">=0.1.13"
dash-uploader = "^0.6"
pandas = "^2.0.0"

[tool.poetry.group.doc]
optional = true
[tool.poetry.group.doc.dependencies]
ansys-sphinx-theme = "^0.8.0"
numpydoc = "^1.4.0"
sphinx = "5.1.0"
sphinx-copybutton = "^0.5.1"
sphinx_design = "^0.3.0"
sphinx_code_tabs = "^0.5.3"
sphinx-gallery = "^0.11.1"
sphinx_mdinclude= "^0.5.3"
sphinx-tabs = ">=1.2.1,<3.5.0"
toml = "^0.10.2" # Needed by conf.py
tox = "^4.4.11"

[tool.poetry.group.tests]
optional = true
[tool.poetry.group.tests.dependencies]
coverage = "^6.4.1"
filelock = "^3.8.0"
mock = "^4.0.3"
pytest = "^7.1.2"
pytest-cov = "^3.0.0"
pytest-dependency = "^0.5.1"
pytest-flakes = "^4.0.5"
pytest-pep8 = "*"
pytest-pythonpath = "*"
pytest-xdist = "^3.0.2"
pytest-mock = "*"
tox = "^4.4.11"

[tool.poetry.group.build]
optional = true
[tool.poetry.group.build.dependencies]
build = "^0.8.0"
twine = "^4.0.1"
tox = "^4.4.11"

[tool.poetry.plugins."console_scripts"]
{{ cookiecutter.__solution_name_slug }}_main = "ansys.solutions.{{ cookiecutter.__solution_name_slug }}.main:main"

[tool.black]
line-length = 120

[tool.isort]
profile = "black"
force_sort_within_sections = true
line_length = 120
default_section = "THIRDPARTY"
src_paths = ["doc", "src", "tests"]

[tool.codespell]
skip = '.github,.venv,.tox,requirements,CODEOWNERS,*.tmp'
count = ''
quiet-level = 3
check-hidden = ""
exclude-file = ".codespell.exclude"
ignore-words = ".codespell.ignore"

[tool.pydocstyle]
select = ['D107']

[tool.coverage.run]
source = ["ansys.solutions"]

[tool.coverage.report]
show_missing = true
