# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['anicli_api',
 'anicli_api.player',
 'anicli_api.source',
 'anicli_api.source.parsers']

package_data = \
{'': ['*']}

install_requires = \
['chompjs>=1.2.2,<2.0.0',
 'httpx[http2]>=0.25.2,<0.26.0',
 'parsel>=1.8.1,<2.0.0']

setup_kwargs = {
    'name': 'anicli-api',
    'version': '0.5.0',
    'description': 'Anime extractors api implementation',
    'long_description': '# anicli-api\n\nПрограммный интерфейс набора парсеров аниме с различных источников.\n\nПрисутствует поддержка sync и async методов с помощью `httpx` библиотеки\nПарсеры работают на REST-API (если у источника есть доступ), parsel и обёртки scrape-schema\n\n# install\n`pip install anicli-api`\n\n# Overview\nСтруктура проекта\n```\nanicli_api\n├── base.py - базовый класс модуля-парсера\n├── _http.py - сконфигурированные классы httpx\n├── _logger.py - логгер\n├── player - модули получения ссылок на видео\n│     ├── __template__.py - шаблон модуля PlayerExtractor\n│     ├── ...  ready-made модули\n│     ...\n└── source - модули парсеров с источников\n      ├── parsers/... автоматически сгенерированные парсеры html страниц\n      ├── __template__.py - шаблон для экстрактора\n      ├─ ... ready-made парсеры\n      ...\n\n\n```\n\nСхематичный принцип работы парсеров:\n\n![](high-level-schema.png)\n\n# source description\n- name - имя модуля\n- type - тип источника получения данных. \n  - **NO** - неофициальный (парсинг html страниц) \n  - **YES** - официальный (rest-api)\n- note - примечания\n- dubbers - тип озвучек. many - от различных авторов. subtitles - только субтитры. author - своя\n\n| name           | url                        | official api | dubbers           | note                                                                    |\n|----------------|----------------------------|--------------|-------------------|-------------------------------------------------------------------------|\n| animego        | https://animego.org        | NO           | many              | источники kodik, animego, не работает IP отличных от СНГ                |\n| animania       | https://animania.online    | NO           | many              | источник kodik, не работает IP отличных от СНГ                          |\n| animejoy       | https://animejoy.ru        | NO           | subtitles         | **имеет cloudflare** (может периодически не работать), много источников |\n| sovetromantica | https://sovetromantica.com | NO           | subtitles, author | не на все тайтлы есть видео, у себя хостят                              |\n| anilibria      | https://anilibria.tv       | YES          | author            |                                                                         |\n| animevost      | https://animevost.org      | YES          | author            |                                                                         |\n\n\n# players description\n\nТребует дополнения и дополнительных тестов\n\n- name - имя плеера\n- max quality - максимальное разрешение выдаваемое источником. Это может быть 0 (аудио, без видео), 144, 240, 360, 480, 720, 1080\n- note - примечания\n\n| name           | max quality                               | note                                                           |\n|----------------|-------------------------------------------|----------------------------------------------------------------|\n| kodik          | 720 (на старых тайтлах - 480)             | **работает только на IP СНГ**                                  |\n| aniboom        | 1080                                      | **работает только на IP СНГ**                                  |\n| sibnet         | 480                                       |                                                                |\n| animejoy       | 1080                                      | только актуальные ongoing, потом видео удаляются с их серверов |\n| csst           | 1080                                      |                                                                |\n| dzen           | 1080                                      |                                                                |\n| mailru         |                                           |                                                                |\n| okru           |                                           |                                                                |\n| sovetromantica | 1080                                      |                                                                |\n| vkcom          | 1080 (какого качества автор зальет видео) | CDN сервера в РФ, в других странах загружается медленнее       |\n\n\n# Quickstart example\n\n```python\nfrom anicli_api.source.animego import Extractor  # can usage any source\n\nif __name__ == "__main__":\n    ex = Extractor()\n    print("PRESS CTRL + C for exit app")\n    while True:\n        results = ex.search(input("search query > "))\n        if not results:\n            print("Not founded, try again")\n            continue\n        \n        print(*[f"{i}) {r}" for i, r in enumerate(results)], sep="\\n")\n        anime = results[int(input("anime > "))].get_anime()\n        episodes = anime.get_episodes()\n        print(*[f"{i}) {ep}" for i, ep in enumerate(episodes)], sep="\\n")\n        episode = episodes[int(input("episode > "))]\n        sources = episode.get_sources()\n        print(*[f"{i}) {source}" for i, source in enumerate(sources)], sep="\\n")\n        source = sources[int(input("source > "))]\n        videos = source.get_videos()\n        print(*[f"{i} {video}" for i, video in enumerate(videos)], sep="\\n")\n        video = videos[int(input("video > "))]\n        print(video.type, video.quality, video.url, video.headers)\n\n```\n\nС asyncio аналогично, но **все** методы получения объектов имеют префикс `a_`:\n\n```python\nimport asyncio\nfrom anicli_api.source.animego import Extractor # или любой другой источник\n\nasync def main():\n    ex = Extractor()\n    prompt = input("search query > ")\n    # a_ - async prefix.\n    # simular in Ongoing, Anime, Episode, Source, Video objects\n    results = await ex.a_search(prompt) \n    print(*[f"{i}) {r}" for i, r in enumerate(results)], sep="\\n")\n    \nif __name__ == \'__main__\':\n    asyncio.run(main())\n```\n\n## http path\n\n### source\n\nЕсли по какой-то либо причине вас не устраивают настройки по умолчанию - то вы можете задать\nконфигурацию http клиентов экстракторов\n\n```python\nfrom anicli_api.base import HTTPSync\n\nfrom httpx import HTTPTransport\n\nclient = HTTPSync()\nprint(client._transport)  # anicli_api._http.HTTPRetryConnectSyncTransport\nprint(client.headers) # {\'user-agent\': \'Mozilla/5.0 (Linux; Android 6.0...\', ...}\n\nclient_2 = HTTPSync(transport=HTTPTransport(), # default transport\n                    headers={"user-agent": "My Cool useragent"}\n                    )  \n\nprint(client_2._transport)  # httpx.HTTPTransport\nprint(client_2.headers)  # {\'user-agent\': \'My Cool useragent\', ...}\nassert client_2 == client  # Passed\n```\n### player\n\nВ player для модификации httpx клиентов (Client, AsyncioClient) необходимо передать kwargs аргументы:\n\n```python\nfrom anicli_api.source.animego import Extractor\n\n\nsources = (\n    Extractor()\n    .search("lain")[0]\n    .get_anime()\n    .get_episodes()[0]\n    .get_sources()\n)\n\nvideos = sources[0].get_videos(transport=None,  # reset to default httpx.HTTPTransport\n                               headers={"User-Agent": "i\'m crushing :("})\n```\n\n## Структуры объектов\n\nПриведены поля, которые **гарантированно** возвращаются в API, в некоторых источниках\nмогут присутствовать дополнительные поля или атрибуты для использования во внутренних методах \n\nНапример, в `anilibria` и `animevost` почти идентичны ответам API. \nВ `animego.Anime` есть несериализованный `raw_json` для извлечения дополнительных данных.\n\n### Search\n- url: str - URL на тайтл\n- title: str - имя найденного тайтла\n- thumbnail: str - изображение\n\n### Ongoing\n- url: str - URL на тайтл\n- title: str - имя найденного тайтла\n- thumbnail: str - изображение\n\n### Anime\n- title: str - имя тайтла (на русском)\n- thumbnail: str - изображение\n- description: Optional[str] - описание тайтла\n\n### Episode\n- title: str - имя эпизода\n- num: str - номер эпизода\n\n### Source\n- url: str - ссылка на источник\n- title: str - даббер или имя источника\n\n### Video\n\nОбъект `Video`, полученный из `Source.get_video` (или `Source.a_get_video`) \nимеет следующую структуру:\n\n* type - тип видео (m3u8, mp4, mpd, audio)\n* quality - разрешение видео (0, 144, 240, 360, 480, 720, 1080)\n* url - прямая ссылка на видео\n* headers - заголовки требуемые для получения видео. \nЕсли возвращает пустой словарь - заголовки не нужны\n\n# Примечания\n- `anicli_api/source/parsers` - автоматически сгенерированные парсеры с помощью \n[scrape-schema-codegen](https://github.com/vypivshiy/selector_schema_codegen) и файлов-конфигурации [libanime](https://github.com/libanime/libanime_schema). \n\n- Так как это прототип и имеет свои ограничения, то при модификациях этих модулей \nиспользуйте наследование, чтобы не потерять изменения при обновлениях.\n\nПример из модуля [animego](anicli_api/source/animego.py):\n\n```python\nfrom anicli_api.source.parsers.animego_parser import AnimeView as AnimeViewOld\n\nclass AnimeView(AnimeViewOld):\n    @staticmethod\n    def _parse_description(part) -> str:\n        # remove whitespaces patch\n        val_0 = part.css(".description ::text").getall()\n        return " ".join(line.strip() for line in val_0)\n```\n\n- Проект разработан преимущественно на личное, некоммерческое использование с client-side \nстороны. \nАвтор проекта не несет ответственности за поломки, убытки в высоко нагруженных проектах и решение\nпредоставляется "Как есть" в соответствии с [MIT](LIENSE) лицензией.\n\n- Основная цель этого проекта — связать автоматизацию и эффективность извлечения того, \nчто предоставляется пользователю в Интернете. \nВесь контент, доступный в рамках проекта, размещается на внешних неаффилированных источниках.\n\n- **Этот проект не включает инструменты кеширования и сохранения всех полученных данных, \nтолько готовые реализации парсеров и программные интерфейсы**\n',
    'author': 'vypivshiy',
    'author_email': 'None',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'None',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.8,<4.0',
}


setup(**setup_kwargs)
