from __future__ import annotations

from typing import NamedTuple

import pytest

from itaxotools.convphase.phase import iter_phase
from itaxotools.convphase.types import PhasedSequence, UnphasedSequence


class ConvPhaseTest(NamedTuple):
    unphased_fixture: list[tuple[str, str]]
    phased_fixture: list[tuple[str, str, str]]
    parameters: dict[str, object]

    @property
    def unphased(self) -> list[tuple[str, str]]:
        return self.unphased_fixture()

    @property
    def phased(self) -> list[tuple[str, str]]:
        return self.phased_fixture()

    def validate(self, debug=False):
        results = iter_phase(self.unphased, **self.parameters)
        results = list(results)
        if debug:
            print("f", self.phased)
            print("g", results)
        for result, fixed in zip(results, self.phased):
            assert result == fixed


def unphased_dummy() -> list[UnphasedSequence]:
    return [
        UnphasedSequence("id1", "AAA"),
        UnphasedSequence("id2", "GGG"),
    ]


def phased_dummy() -> list[PhasedSequence]:
    return [
        PhasedSequence("id1", "AAA", "AAA"),
        PhasedSequence("id2", "GGG", "GGG"),
    ]


def unphased_simple() -> list[UnphasedSequence]:
    return [
        UnphasedSequence("id1", "ATGCATGCA"),
        UnphasedSequence("id2", "ATGCATCCA"),
        UnphasedSequence("id3", "ATSCATSCA"),
        UnphasedSequence("id4", "ATTCATSCA"),
        UnphasedSequence("id5", "ATCCATCCA"),
    ]


def phased_simple() -> list[PhasedSequence]:
    return [
        PhasedSequence("id1", "ATGCATGCA", "ATGCATGCA"),
        PhasedSequence("id2", "ATGCATCCA", "ATGCATCCA"),
        PhasedSequence("id3", "ATSCATCCA", "ATSCATGCA"),
        PhasedSequence("id4", "ATTCATGCA", "ATTCATCCA"),
        PhasedSequence("id5", "ATCCATCCA", "ATCCATCCA"),
    ]


def phased_simple_p_03() -> list[PhasedSequence]:
    return [
        PhasedSequence("id1", "ATGCATGCA", "ATGCATGCA"),
        PhasedSequence("id2", "ATGCATCCA", "ATGCATCCA"),
        PhasedSequence("id3", "ATCCATCCA", "ATGCATGCA"),
        PhasedSequence("id4", "ATTCATGCA", "ATTCATCCA"),
        PhasedSequence("id5", "ATCCATCCA", "ATCCATCCA"),
    ]


def unphased_chimerella_rag1_cut_short() -> list[UnphasedSequence]:
    return [
        UnphasedSequence(
            "GK1213_2",
            "TTATCATCCTTTTGAATGGAAGCCACCATTAAAGAATGTTTCCACCAGTACAGATGTTGGCATCATTGACGGCCTATCGGGACTGAATCGGTCTGTGGATGAATATCCTGTTGAAACTATCTCCAAAAGGTTTAGATATGATGCTGCTCTGGTTTCGGCTTTGAAAGACATGGAAGAAGATATTGTCGAAGGCTTAAAATCCAAAGACCTGGAGGAATACTTGTCTGGTCCATTTACTGTGGTGATTAAAGAATCGTGTGATGGAATGGGAGATGTAAGTGAGAAGCATGGCTGTGGACCTACAGTACCGGAGAAGGCTGTCCGCTTCTCATTTACCATCATGAACATAAGTGTTTCCAGTAACAATAATGCATCTGTTAAAATTTTTGAAGAGGCTAAACCCAATTCTGAACTTTGCTGCAAACCTGTGTGTTTAATGCTGGCTGATGAATCAGACCACGAAACTCTGACTGCCATCCTGGGCCCCTTGATAGCCGAAAGAGAATCCATGAAATCCAGTGATCTCCTGCTAGAAATTGGAGGAATACTTAGAAGCTTCAAGTTTGTTTTCCGA-GGCACAGGGTATGATGA",
        ),
        UnphasedSequence(
            "GK1228_2",
            "TTATCATCCTTTTGAATGGAAGCCACCATTAAAGAATGTTTCCACCAGTACAGATGTTGGCATCATTGACGGCCTATCGGGACTGAATCGGTCTGTGGATGAATATCCTGTTGAAACTATCTCCAAAAGGTTTAGATATGATGCTGCTCTGGTTTCGGCTTTGAAAGACATGGAAGAAGATATTGTCGAAGGCTTAAAATCCAAAGACCTGGAGGAATACTTGTCTGGTCCATTTACTGTGGTGATTAAAGAATCGTGTGATGGAATGGGAGATGTAAGTGAGAAGCATGGCTGTGGACCTACWGTACCGGAGAAGGCTGTCCGCTTCTCATTTACCATCATGAACATAAGTGTTTCCAGTAACAATAATGCATCTGTTAAAATTTTTGAAGAGGCTAAACCCAATTCTGAACTTTGCTGCAAACCTGTGTGTTTAATGCTGGCTGATGAATCAGACCACGAAACTCTGACTGCCATCCTGGGCCCCTTGATAGCCGAAAGAGAATCCATGAAATCCAGTGATCTCCTGCTAGAAATTGGAGGAATACTTAGAAGCTTCAAGTTTGTTTTCCGA-GGCACAGGGTATGATGA",
        ),
    ]


def phased_chimerella_rag1_cut_short() -> list[PhasedSequence]:
    return [
        PhasedSequence(
            "GK1213_2",
            "TTATCATCCTTTTGAATGGAAGCCACCATTAAAGAATGTTTCCACCAGTACAGATGTTGGCATCATTGACGGCCTATCGGGACTGAATCGGTCTGTGGATGAATATCCTGTTGAAACTATCTCCAAAAGGTTTAGATATGATGCTGCTCTGGTTTCGGCTTTGAAAGACATGGAAGAAGATATTGTCGAAGGCTTAAAATCCAAAGACCTGGAGGAATACTTGTCTGGTCCATTTACTGTGGTGATTAAAGAATCGTGTGATGGAATGGGAGATGTAAGTGAGAAGCATGGCTGTGGACCTACAGTACCGGAGAAGGCTGTCCGCTTCTCATTTACCATCATGAACATAAGTGTTTCCAGTAACAATAATGCATCTGTTAAAATTTTTGAAGAGGCTAAACCCAATTCTGAACTTTGCTGCAAACCTGTGTGTTTAATGCTGGCTGATGAATCAGACCACGAAACTCTGACTGCCATCCTGGGCCCCTTGATAGCCGAAAGAGAATCCATGAAATCCAGTGATCTCCTGCTAGAAATTGGAGGAATACTTAGAAGCTTCAAGTTTGTTTTCCGA-GGCACAGGGTATGATGA",
            "TTATCATCCTTTTGAATGGAAGCCACCATTAAAGAATGTTTCCACCAGTACAGATGTTGGCATCATTGACGGCCTATCGGGACTGAATCGGTCTGTGGATGAATATCCTGTTGAAACTATCTCCAAAAGGTTTAGATATGATGCTGCTCTGGTTTCGGCTTTGAAAGACATGGAAGAAGATATTGTCGAAGGCTTAAAATCCAAAGACCTGGAGGAATACTTGTCTGGTCCATTTACTGTGGTGATTAAAGAATCGTGTGATGGAATGGGAGATGTAAGTGAGAAGCATGGCTGTGGACCTACAGTACCGGAGAAGGCTGTCCGCTTCTCATTTACCATCATGAACATAAGTGTTTCCAGTAACAATAATGCATCTGTTAAAATTTTTGAAGAGGCTAAACCCAATTCTGAACTTTGCTGCAAACCTGTGTGTTTAATGCTGGCTGATGAATCAGACCACGAAACTCTGACTGCCATCCTGGGCCCCTTGATAGCCGAAAGAGAATCCATGAAATCCAGTGATCTCCTGCTAGAAATTGGAGGAATACTTAGAAGCTTCAAGTTTGTTTTCCGA-GGCACAGGGTATGATGA",
        ),
        PhasedSequence(
            "GK1228_2",
            "TTATCATCCTTTTGAATGGAAGCCACCATTAAAGAATGTTTCCACCAGTACAGATGTTGGCATCATTGACGGCCTATCGGGACTGAATCGGTCTGTGGATGAATATCCTGTTGAAACTATCTCCAAAAGGTTTAGATATGATGCTGCTCTGGTTTCGGCTTTGAAAGACATGGAAGAAGATATTGTCGAAGGCTTAAAATCCAAAGACCTGGAGGAATACTTGTCTGGTCCATTTACTGTGGTGATTAAAGAATCGTGTGATGGAATGGGAGATGTAAGTGAGAAGCATGGCTGTGGACCTACAGTACCGGAGAAGGCTGTCCGCTTCTCATTTACCATCATGAACATAAGTGTTTCCAGTAACAATAATGCATCTGTTAAAATTTTTGAAGAGGCTAAACCCAATTCTGAACTTTGCTGCAAACCTGTGTGTTTAATGCTGGCTGATGAATCAGACCACGAAACTCTGACTGCCATCCTGGGCCCCTTGATAGCCGAAAGAGAATCCATGAAATCCAGTGATCTCCTGCTAGAAATTGGAGGAATACTTAGAAGCTTCAAGTTTGTTTTCCGA-GGCACAGGGTATGATGA",
            "TTATCATCCTTTTGAATGGAAGCCACCATTAAAGAATGTTTCCACCAGTACAGATGTTGGCATCATTGACGGCCTATCGGGACTGAATCGGTCTGTGGATGAATATCCTGTTGAAACTATCTCCAAAAGGTTTAGATATGATGCTGCTCTGGTTTCGGCTTTGAAAGACATGGAAGAAGATATTGTCGAAGGCTTAAAATCCAAAGACCTGGAGGAATACTTGTCTGGTCCATTTACTGTGGTGATTAAAGAATCGTGTGATGGAATGGGAGATGTAAGTGAGAAGCATGGCTGTGGACCTACTGTACCGGAGAAGGCTGTCCGCTTCTCATTTACCATCATGAACATAAGTGTTTCCAGTAACAATAATGCATCTGTTAAAATTTTTGAAGAGGCTAAACCCAATTCTGAACTTTGCTGCAAACCTGTGTGTTTAATGCTGGCTGATGAATCAGACCACGAAACTCTGACTGCCATCCTGGGCCCCTTGATAGCCGAAAGAGAATCCATGAAATCCAGTGATCTCCTGCTAGAAATTGGAGGAATACTTAGAAGCTTCAAGTTTGTTTTCCGA-GGCACAGGGTATGATGA",
        ),
    ]


convphase_tests = [
    ConvPhaseTest(unphased_dummy, phased_dummy, {}),
    ConvPhaseTest(unphased_simple, phased_simple, {}),
    ConvPhaseTest(unphased_simple, phased_simple_p_03, dict(phase_threshold=0.3)),
]


convphase_tests_failing = [
    # For this test, GK1213_2 is never split into GK1213_2a and GK1213_2b,
    # resulting in a crash... GK1228_2 (has a W) is split normally.
    ConvPhaseTest(
        unphased_chimerella_rag1_cut_short, phased_chimerella_rag1_cut_short, {}
    ),
]


@pytest.mark.parametrize("test", convphase_tests)
def test_convphase(test: ConvPhaseTest) -> None:
    test.validate()


@pytest.mark.skip
@pytest.mark.parametrize("test", convphase_tests_failing)
def test_convphase_failing(test: ConvPhaseTest) -> None:
    test.validate()


def test_progress_callback_out(capsys):
    from itaxotools.convphase.phase import set_progress_callback

    def progress_callback(value, maximum, text):
        print(f"{text}: {value}/{maximum}")

    set_progress_callback(progress_callback)

    test = ConvPhaseTest(unphased_simple, phased_simple, {})
    test.validate()

    captured = capsys.readouterr()
    assert captured.out


def test_progress_callback_none(capsys):
    from itaxotools.convphase.phase import set_progress_callback

    set_progress_callback(None)

    test = ConvPhaseTest(unphased_simple, phased_simple, {})
    test.validate()

    captured = capsys.readouterr()
    assert not captured.out
    assert not captured.err
