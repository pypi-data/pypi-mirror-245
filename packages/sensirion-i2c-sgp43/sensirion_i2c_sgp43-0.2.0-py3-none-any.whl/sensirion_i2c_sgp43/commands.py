#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# (c) Copyright 2023 Sensirion AG, Switzerland
#
#     THIS FILE IS AUTOMATICALLY GENERATED!
#
# Generator:     sensirion-driver-generator 0.36.0
# Product:       sgp43
# Model-Version: 2.1.0
#
"""
The transfer classes specify the data that is transferred between host and sensor. The generated transfer classes
are used by the driver class and not intended for direct use.
"""

from sensirion_driver_adapters.transfer import Transfer
from sensirion_driver_adapters.rx_tx_data import TxData, RxData


class ExecuteConditioning(Transfer):
    """
    This command starts the conditioning, i.e., the VOC pixel will be operated at
    the same temperature as it is by calling the sgp41_measure_raw command while the
    NOx pixel will be operated at a different temperature for conditioning. This
    command returns only the measured raw signal of the VOC pixel SRAW_VOC as 2
    bytes (+ 1 CRC byte).
    """

    CMD_ID = 0x2612

    def __init__(self, compensation_rh_ticks, compensation_t_ticks):
        self._compensation_rh_ticks = compensation_rh_ticks
        self._compensation_t_ticks = compensation_t_ticks

    def pack(self):
        return self.tx_data.pack([self._compensation_rh_ticks, self._compensation_t_ticks])

    tx = TxData(CMD_ID, '>HHH', device_busy_delay=0.05, slave_address=None, ignore_ack=False)
    rx = RxData('>H')


class MeasureSetMultipixelTicks(Transfer):
    """This performs a multipixel measurement and then sets the hotplate temperatures."""

    CMD_ID = 0x263e

    def __init__(self, relative_humidity, temperature, temperature_pix_1, temperature_pix_2, temperature_pix_3,
                 temperature_pix_4, condition_pix_1, condition_pix_2, condition_pix_3, condition_pix_4):
        self._relative_humidity = relative_humidity
        self._temperature = temperature
        self._temperature_pix_1 = temperature_pix_1
        self._temperature_pix_2 = temperature_pix_2
        self._temperature_pix_3 = temperature_pix_3
        self._temperature_pix_4 = temperature_pix_4
        self._condition_pix_1 = condition_pix_1
        self._condition_pix_2 = condition_pix_2
        self._condition_pix_3 = condition_pix_3
        self._condition_pix_4 = condition_pix_4

    def pack(self):
        return self.tx_data.pack([self._relative_humidity, self._temperature, self._temperature_pix_1,
                                 self._temperature_pix_2, self._temperature_pix_3, self._temperature_pix_4,
                                 self._condition_pix_1, self._condition_pix_2, self._condition_pix_3,
                                 self._condition_pix_4])

    tx = TxData(CMD_ID, '>HHHHHHHHHHH', device_busy_delay=0.09, slave_address=None, ignore_ack=False)
    rx = RxData('>HHHH')


class MeasureRawSignals(Transfer):
    """This command starts/continues the VOC+NOx measurement mode"""

    CMD_ID = 0x2619

    def __init__(self, relative_humidity, temperature):
        self._relative_humidity = relative_humidity
        self._temperature = temperature

    def pack(self):
        return self.tx_data.pack([self._relative_humidity, self._temperature])

    tx = TxData(CMD_ID, '>HHH', device_busy_delay=0.05, slave_address=None, ignore_ack=False)
    rx = RxData('>HH')


class ExecuteSelfTest(Transfer):
    """
    This command triggers the built-in self-test checking for integrity of both
    hotplate and MOX material and returns the result of this test as 2 bytes
    """

    CMD_ID = 0x280e

    def pack(self):
        return self.tx_data.pack([])

    tx = TxData(CMD_ID, '>H', device_busy_delay=0.32, slave_address=None, ignore_ack=False)
    rx = RxData('>H')


class TurnHeaterOff(Transfer):
    """
    This command turns the hotplate off and stops the measurement. Subsequently, the
    sensor enters the idle mode.
    """

    CMD_ID = 0x3615

    def pack(self):
        return self.tx_data.pack([])

    tx = TxData(CMD_ID, '>H', device_busy_delay=0.001, slave_address=None, ignore_ack=False)


class GetSerialNumber(Transfer):
    """
    This command provides the decimal serial number of the SGP41 chip by returning
    3x2 bytes.
    """

    CMD_ID = 0x3682

    def pack(self):
        return self.tx_data.pack([])

    tx = TxData(CMD_ID, '>H')
    rx = RxData(descriptor='>6B', convert_to_int=True)
