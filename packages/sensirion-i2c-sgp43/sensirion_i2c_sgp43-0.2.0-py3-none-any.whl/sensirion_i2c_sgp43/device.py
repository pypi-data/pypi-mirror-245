#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# (c) Copyright 2023 Sensirion AG, Switzerland
#
#     THIS FILE IS AUTOMATICALLY GENERATED!
#
# Generator:     sensirion-driver-generator 0.36.0
# Product:       sgp43
# Model-Version: 2.1.0
#
"""
The class Sgp43DeviceBase implements the low level interface of the sensor.
The class Sgp43Device extends the Sgp43DeviceBase. It provides additional functions to ease the use of the
sensor.
"""

from sensirion_driver_adapters.transfer import execute_transfer
from sensirion_driver_support_types.mixin_access import MixinAccess
from sensirion_i2c_sgp43.commands import (ExecuteConditioning, ExecuteSelfTest, GetSerialNumber, MeasureRawSignals,
                                          MeasureSetMultipixelTicks, TurnHeaterOff)

from sensirion_i2c_sgp43.result_types import (SignalSraw)


class Sgp43DeviceBase:
    """Low level API implementation of SGP43"""

    def __init__(self, channel):
        self._channel = channel

    @property
    def channel(self):
        return self._channel

    def execute_conditioning(self, compensation_rh_ticks, compensation_t_ticks):
        """
        This command starts the conditioning, i.e., the VOC pixel will be operated at
        the same temperature as it is by calling the sgp41_measure_raw command while the
        NOx pixel will be operated at a different temperature for conditioning. This
        command returns only the measured raw signal of the VOC pixel SRAW_VOC as 2
        bytes (+ 1 CRC byte).

        :param compensation_rh_ticks:
            Compensation value for relative humidty in ticks.
            tick = %RH * 65535 / 100
        :param compensation_t_ticks:
            Compensation value for temperature in ticks.
            tick = (temperature + 45) * 65535 / 175

        :return sraw_voc:
            u16 unsigned integer directly provides the raw signal SRAW_VOC in ticks which is
            proportional to the logarithm of the resistance of the sensing element.
        """
        transfer = ExecuteConditioning(compensation_rh_ticks, compensation_t_ticks)
        return execute_transfer(self._channel, transfer)[0]

    def measure_set_multipixel_ticks(self, relative_humidity, temperature, temperature_pix_1, temperature_pix_2,
                                     temperature_pix_3, temperature_pix_4, condition_pix_1, condition_pix_2,
                                     condition_pix_3, condition_pix_4):
        """
        This performs a multipixel measurement and then sets the hotplate temperatures.

        :param relative_humidity:
            By setting the value of relative_humidity to 0x8000 the compensation is disabled. To activate the compensation the relative humidity has to be set
            in ticks (tick = %RH * 65535 / 100).
        :param temperature:
            By setting the value of temperature to 0x6666 the temperature compensation is disabled. To activate the compensation the temperature has to be set
            in ticks (tick = (temperature + 45) * 65535 / 175)
        :param temperature_pix_1:
            temperature (in 째C) to set on pixel 1
        :param temperature_pix_2:
            temperature (in 째C) to set on pixel 2
        :param temperature_pix_3:
            temperature (in 째C) to set on pixel 3
        :param temperature_pix_4:
            temperature (in 째C) to set on pixel 4
        :param condition_pix_1:
            conditioning to apply on pixel 1
        :param condition_pix_2:
            conditioning to apply on pixel 2
        :param condition_pix_3:
            conditioning to apply on pixel 3
        :param condition_pix_4:
            conditioning to apply on pixel 4

        :return raw_signal_pix1:
            measured raw signal of pixel 1
        :return raw_signal_pix2:
            measured raw signal of pixel 2
        :return raw_signal_pix3:
            measured raw signal of pixel 3
        :return raw_signal_pix4:
            measured raw signal of pixel 4
        """
        transfer = MeasureSetMultipixelTicks(relative_humidity, temperature, temperature_pix_1, temperature_pix_2,
                                             temperature_pix_3, temperature_pix_4, condition_pix_1, condition_pix_2,
                                             condition_pix_3, condition_pix_4)
        return execute_transfer(self._channel, transfer)

    def measure_raw_signals(self, relative_humidity, temperature):
        """
        This command starts/continues the VOC+NOx measurement mode

        :param relative_humidity:
            Leaves humidity compensation disabled by sending the default value 0x8000
            (50%RH) or enables humidity compensation when sending the relative humidity in
            ticks (ticks = %RH * 65535 / 100)
        :param temperature:
            Leaves humidity compensation disabled by sending the default value 0x6666 (25
            degC) or enables humidity compensation when sending the temperature in ticks
            (ticks = (degC + 45) * 65535 / 175)

        :return sraw_voc:
            u16 unsigned integer directly provides the raw signal SRAW_VOC in ticks which is
            proportional to the logarithm of the resistance of the sensing element.
        :return sraw_nox:
            u16 unsigned integer directly provides the raw signal SRAW_NOX in ticks which is
            proportional to the logarithm of the resistance of the sensing element.
        """
        transfer = MeasureRawSignals(relative_humidity, temperature)
        return execute_transfer(self._channel, transfer)

    def execute_self_test(self):
        """
        This command triggers the built-in self-test checking for integrity of both
        hotplate and MOX material and returns the result of this test as 2 bytes

        :return test_result:
            0xXX 0xYY: ignore most significant byte 0xXX. The four least significant bits of
            the least significant byte 0xYY provide information if the self-test has or has
            not passed for each individual pixel. All zero mean all tests passed
            successfully. Check the datasheet for more detailed information.
        """
        transfer = ExecuteSelfTest()
        return execute_transfer(self._channel, transfer)[0]

    def turn_heater_off(self):
        """
        This command turns the hotplate off and stops the measurement. Subsequently, the
        sensor enters the idle mode.
        """
        transfer = TurnHeaterOff()
        return execute_transfer(self._channel, transfer)

    def get_serial_number(self):
        """
        This command provides the decimal serial number of the SGP41 chip by returning
        3x2 bytes.

        :return serial_number:
            48-bit unique serial number
        """
        transfer = GetSerialNumber()
        return execute_transfer(self._channel, transfer)[0]


class Sgp43Device(Sgp43DeviceBase):
    """Driver class implementation of SGP43"""

    #: Access to base class
    sgp43 = MixinAccess()

    def __init__(self, channel):
        super().__init__(channel)

    def measure_set_multipixel_temperature(self, temp_pixel):
        """
        One temperature is applied on all pixels. Compensation of temperature and relative humidity is turned off.

        :param temp_pixel:
            Target temperature for the pixels.

        :return a_sraw:
            Raw measurement of one pixel
        :return a_sraw_1:
            Raw measurement of one pixel
        :return a_sraw_2:
            Raw measurement of one pixel
        :return a_sraw_3:
            Raw measurement of one pixel
        """
        (spix1, spix2, spix3, spix4
         ) = self.sgp43.measure_set_multipixel_ticks(32768, 26214, temp_pixel, temp_pixel, temp_pixel,
                                                     temp_pixel, 0, 0, 0, 0)
        return (SignalSraw(spix1), SignalSraw(spix2), SignalSraw(spix3), SignalSraw(spix4))
