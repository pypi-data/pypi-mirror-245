"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import collections.abc
import grpc
import grpc.aio
from . import spm_pb2
import typing

_T = typing.TypeVar('_T')

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta):
    ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore
    ...

class SPMStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    Noop: grpc.UnaryUnaryMultiCallable[
        spm_pb2.NoopContent,
        spm_pb2.NoopContent,
    ]
    GetDataSetClosed: grpc.UnaryUnaryMultiCallable[
        spm_pb2.Scenario,
        spm_pb2.Closed,
    ]
    ClearData: grpc.UnaryUnaryMultiCallable[
        spm_pb2.Scenario,
        spm_pb2.Scenario,
    ]
    ReadData: grpc.UnaryStreamMultiCallable[
        spm_pb2.ReadScenario,
        spm_pb2.DataList,
    ]
    CloseData: grpc.UnaryUnaryMultiCallable[
        spm_pb2.DataCompleted,
        spm_pb2.Scenario,
    ]
    ClearDataTags: grpc.UnaryUnaryMultiCallable[
        spm_pb2.ScenarioDataTags,
        spm_pb2.Empty,
    ]
    WriteDataList: grpc.StreamStreamMultiCallable[
        spm_pb2.IndexedDataList,
        spm_pb2.Scenario,
    ]
    PushDataList: grpc.UnaryUnaryMultiCallable[
        spm_pb2.IndexedDataList,
        spm_pb2.Scenario,
    ]
    SetOptimizationResult: grpc.UnaryUnaryMultiCallable[
        spm_pb2.SetOptimizationResultRequest,
        spm_pb2.Scenario,
    ]
    SetOptimizationIterationScore: grpc.UnaryUnaryMultiCallable[
        spm_pb2.SetOptimizationIterationScoreRequest,
        spm_pb2.Empty,
    ]
    GetScenarioMetaData: grpc.UnaryUnaryMultiCallable[
        spm_pb2.Scenario,
        spm_pb2.ScenarioMetaData,
    ]
    SetScenarioMetaData: grpc.UnaryUnaryMultiCallable[
        spm_pb2.ScenarioMetaData,
        spm_pb2.Scenario,
    ]
    GetScenarioCustomMetaData: grpc.UnaryUnaryMultiCallable[
        spm_pb2.ScenarioCustomMetaData,
        spm_pb2.ScenarioCustomMetaData,
    ]
    SetScenarioCustomMetaData: grpc.UnaryUnaryMultiCallable[
        spm_pb2.ScenarioCustomMetaData,
        spm_pb2.ScenarioCustomMetaData,
    ]
    GetScenarioDataStats: grpc.UnaryUnaryMultiCallable[
        spm_pb2.ScenarioStatsRequest,
        spm_pb2.ScenarioStats,
    ]
    GetModel: grpc.UnaryUnaryMultiCallable[
        spm_pb2.Model,
        spm_pb2.Model,
    ]
    DuplicateScenario: grpc.UnaryUnaryMultiCallable[
        spm_pb2.DuplicateScenarioRequest,
        spm_pb2.Scenario,
    ]
    PushExecutionLogEntries: grpc.UnaryUnaryMultiCallable[
        spm_pb2.LogEntries,
        spm_pb2.Empty,
    ]
    ReadExecutionLogEntries: grpc.UnaryStreamMultiCallable[
        spm_pb2.ExecutionReadLogs,
        spm_pb2.ExeLogEntry,
    ]
    GetScenario: grpc.UnaryUnaryMultiCallable[
        spm_pb2.Scenario,
        spm_pb2.ScenarioDocument,
    ]
    SetScenarioResultDocument: grpc.UnaryUnaryMultiCallable[
        spm_pb2.ScenarioResultsDocument,
        spm_pb2.Empty,
    ]
    GetScenarioResultDocument: grpc.UnaryUnaryMultiCallable[
        spm_pb2.Scenario,
        spm_pb2.ScenarioResultsDocument,
    ]
    GetUser: grpc.UnaryUnaryMultiCallable[
        spm_pb2.UserRequest,
        spm_pb2.User,
    ]
    GetGroup: grpc.UnaryUnaryMultiCallable[
        spm_pb2.Group,
        spm_pb2.GroupDocument,
    ]
    GetProject: grpc.UnaryUnaryMultiCallable[
        spm_pb2.Project,
        spm_pb2.ProjectDocument,
    ]
    DeleteScenario: grpc.UnaryUnaryMultiCallable[
        spm_pb2.Scenario,
        spm_pb2.Scenario,
    ]
    DeleteProject: grpc.UnaryUnaryMultiCallable[
        spm_pb2.Project,
        spm_pb2.Project,
    ]
    DeleteSystem: grpc.UnaryUnaryMultiCallable[
        spm_pb2.SystemRequest,
        spm_pb2.Empty,
    ]
    DeleteUser: grpc.UnaryUnaryMultiCallable[
        spm_pb2.UserRequest,
        spm_pb2.Empty,
    ]
    ListenScenario: grpc.UnaryStreamMultiCallable[
        spm_pb2.Scenario,
        spm_pb2.ScenarioDocument,
    ]
    SetScenarioProgress: grpc.UnaryUnaryMultiCallable[
        spm_pb2.ScenarioProgress,
        spm_pb2.Scenario,
    ]
    SetScenarioDataTags: grpc.UnaryUnaryMultiCallable[
        spm_pb2.ScenarioDataTags,
        spm_pb2.Scenario,
    ]
    PushScenarioError: grpc.UnaryUnaryMultiCallable[
        spm_pb2.ScenarioError,
        spm_pb2.Scenario,
    ]
    PushScenarioFormattedError: grpc.UnaryUnaryMultiCallable[
        spm_pb2.ScenarioFormattedError,
        spm_pb2.Scenario,
    ]
    GetSignedURLs: grpc.UnaryUnaryMultiCallable[
        spm_pb2.FilePaths,
        spm_pb2.FileSignedUrls,
    ]
    GetPublicLink: grpc.UnaryUnaryMultiCallable[
        spm_pb2.Link,
        spm_pb2.SignedUrl,
    ]
    GenerateScenarioUploadSignedURL: grpc.UnaryUnaryMultiCallable[
        spm_pb2.ScenarioFilePath,
        spm_pb2.ScenarioUploadURL,
    ]
    ClearScenarioResults: grpc.UnaryUnaryMultiCallable[
        spm_pb2.Scenario,
        spm_pb2.Scenario,
    ]
    SetScenarioResults: grpc.UnaryUnaryMultiCallable[
        spm_pb2.ScenarioResults,
        spm_pb2.Scenario,
    ]
    GetScenarioResults: grpc.UnaryUnaryMultiCallable[
        spm_pb2.Scenario,
        spm_pb2.ScenarioResults,
    ]
    SubscribeForUpdates: grpc.UnaryStreamMultiCallable[
        spm_pb2.Subscription,
        spm_pb2.SubscriptionMessage,
    ]
    PublishSubscriptionMessage: grpc.UnaryUnaryMultiCallable[
        spm_pb2.SubscriptionMessage,
        spm_pb2.Empty,
    ]
    CompleteExecution: grpc.UnaryUnaryMultiCallable[
        spm_pb2.CompleteExecutionMessage,
        spm_pb2.Empty,
    ]
    CompleteExecutionIgnoreInstance: grpc.UnaryUnaryMultiCallable[
        spm_pb2.ExecutionMessage,
        spm_pb2.Empty,
    ]
    UpdateExecution: grpc.UnaryUnaryMultiCallable[
        spm_pb2.Json,
        spm_pb2.Empty,
    ]
    ClearExecutionMemory: grpc.UnaryUnaryMultiCallable[
        spm_pb2.Scenario,
        spm_pb2.Empty,
    ]
    RemoveExecutionData: grpc.UnaryUnaryMultiCallable[
        spm_pb2.Scenario,
        spm_pb2.Empty,
    ]
    GetLatestMainExecution: grpc.UnaryUnaryMultiCallable[
        spm_pb2.Scenario,
        spm_pb2.ExecutionId,
    ]
    UpdateProbe: grpc.UnaryUnaryMultiCallable[
        spm_pb2.ProbeInformation,
        spm_pb2.ProbeResponse,
    ]
    """Garbage collection"""
    WriteDataStream: grpc.StreamStreamMultiCallable[
        spm_pb2.WriteDataStreamRequest,
        spm_pb2.WriteDataStreamResponse,
    ]
    """Data-Port stream wrapper"""
    ReadDataStream: grpc.StreamStreamMultiCallable[
        spm_pb2.ReadDataStreamRequest,
        spm_pb2.ReadDataStreamResponse,
    ]
    GetDataStreamStats: grpc.UnaryUnaryMultiCallable[
        spm_pb2.GetDataStreamStatsRequest,
        spm_pb2.GetDataStreamStatsResponse,
    ]

class SPMAsyncStub:
    Noop: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.NoopContent,
        spm_pb2.NoopContent,
    ]
    GetDataSetClosed: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.Scenario,
        spm_pb2.Closed,
    ]
    ClearData: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.Scenario,
        spm_pb2.Scenario,
    ]
    ReadData: grpc.aio.UnaryStreamMultiCallable[
        spm_pb2.ReadScenario,
        spm_pb2.DataList,
    ]
    CloseData: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.DataCompleted,
        spm_pb2.Scenario,
    ]
    ClearDataTags: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.ScenarioDataTags,
        spm_pb2.Empty,
    ]
    WriteDataList: grpc.aio.StreamStreamMultiCallable[
        spm_pb2.IndexedDataList,
        spm_pb2.Scenario,
    ]
    PushDataList: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.IndexedDataList,
        spm_pb2.Scenario,
    ]
    SetOptimizationResult: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.SetOptimizationResultRequest,
        spm_pb2.Scenario,
    ]
    SetOptimizationIterationScore: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.SetOptimizationIterationScoreRequest,
        spm_pb2.Empty,
    ]
    GetScenarioMetaData: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.Scenario,
        spm_pb2.ScenarioMetaData,
    ]
    SetScenarioMetaData: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.ScenarioMetaData,
        spm_pb2.Scenario,
    ]
    GetScenarioCustomMetaData: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.ScenarioCustomMetaData,
        spm_pb2.ScenarioCustomMetaData,
    ]
    SetScenarioCustomMetaData: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.ScenarioCustomMetaData,
        spm_pb2.ScenarioCustomMetaData,
    ]
    GetScenarioDataStats: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.ScenarioStatsRequest,
        spm_pb2.ScenarioStats,
    ]
    GetModel: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.Model,
        spm_pb2.Model,
    ]
    DuplicateScenario: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.DuplicateScenarioRequest,
        spm_pb2.Scenario,
    ]
    PushExecutionLogEntries: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.LogEntries,
        spm_pb2.Empty,
    ]
    ReadExecutionLogEntries: grpc.aio.UnaryStreamMultiCallable[
        spm_pb2.ExecutionReadLogs,
        spm_pb2.ExeLogEntry,
    ]
    GetScenario: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.Scenario,
        spm_pb2.ScenarioDocument,
    ]
    SetScenarioResultDocument: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.ScenarioResultsDocument,
        spm_pb2.Empty,
    ]
    GetScenarioResultDocument: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.Scenario,
        spm_pb2.ScenarioResultsDocument,
    ]
    GetUser: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.UserRequest,
        spm_pb2.User,
    ]
    GetGroup: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.Group,
        spm_pb2.GroupDocument,
    ]
    GetProject: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.Project,
        spm_pb2.ProjectDocument,
    ]
    DeleteScenario: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.Scenario,
        spm_pb2.Scenario,
    ]
    DeleteProject: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.Project,
        spm_pb2.Project,
    ]
    DeleteSystem: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.SystemRequest,
        spm_pb2.Empty,
    ]
    DeleteUser: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.UserRequest,
        spm_pb2.Empty,
    ]
    ListenScenario: grpc.aio.UnaryStreamMultiCallable[
        spm_pb2.Scenario,
        spm_pb2.ScenarioDocument,
    ]
    SetScenarioProgress: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.ScenarioProgress,
        spm_pb2.Scenario,
    ]
    SetScenarioDataTags: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.ScenarioDataTags,
        spm_pb2.Scenario,
    ]
    PushScenarioError: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.ScenarioError,
        spm_pb2.Scenario,
    ]
    PushScenarioFormattedError: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.ScenarioFormattedError,
        spm_pb2.Scenario,
    ]
    GetSignedURLs: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.FilePaths,
        spm_pb2.FileSignedUrls,
    ]
    GetPublicLink: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.Link,
        spm_pb2.SignedUrl,
    ]
    GenerateScenarioUploadSignedURL: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.ScenarioFilePath,
        spm_pb2.ScenarioUploadURL,
    ]
    ClearScenarioResults: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.Scenario,
        spm_pb2.Scenario,
    ]
    SetScenarioResults: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.ScenarioResults,
        spm_pb2.Scenario,
    ]
    GetScenarioResults: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.Scenario,
        spm_pb2.ScenarioResults,
    ]
    SubscribeForUpdates: grpc.aio.UnaryStreamMultiCallable[
        spm_pb2.Subscription,
        spm_pb2.SubscriptionMessage,
    ]
    PublishSubscriptionMessage: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.SubscriptionMessage,
        spm_pb2.Empty,
    ]
    CompleteExecution: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.CompleteExecutionMessage,
        spm_pb2.Empty,
    ]
    CompleteExecutionIgnoreInstance: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.ExecutionMessage,
        spm_pb2.Empty,
    ]
    UpdateExecution: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.Json,
        spm_pb2.Empty,
    ]
    ClearExecutionMemory: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.Scenario,
        spm_pb2.Empty,
    ]
    RemoveExecutionData: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.Scenario,
        spm_pb2.Empty,
    ]
    GetLatestMainExecution: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.Scenario,
        spm_pb2.ExecutionId,
    ]
    UpdateProbe: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.ProbeInformation,
        spm_pb2.ProbeResponse,
    ]
    """Garbage collection"""
    WriteDataStream: grpc.aio.StreamStreamMultiCallable[
        spm_pb2.WriteDataStreamRequest,
        spm_pb2.WriteDataStreamResponse,
    ]
    """Data-Port stream wrapper"""
    ReadDataStream: grpc.aio.StreamStreamMultiCallable[
        spm_pb2.ReadDataStreamRequest,
        spm_pb2.ReadDataStreamResponse,
    ]
    GetDataStreamStats: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.GetDataStreamStatsRequest,
        spm_pb2.GetDataStreamStatsResponse,
    ]

class SPMServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def Noop(
        self,
        request: spm_pb2.NoopContent,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.NoopContent, collections.abc.Awaitable[spm_pb2.NoopContent]]: ...
    @abc.abstractmethod
    def GetDataSetClosed(
        self,
        request: spm_pb2.Scenario,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.Closed, collections.abc.Awaitable[spm_pb2.Closed]]: ...
    @abc.abstractmethod
    def ClearData(
        self,
        request: spm_pb2.Scenario,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.Scenario, collections.abc.Awaitable[spm_pb2.Scenario]]: ...
    @abc.abstractmethod
    def ReadData(
        self,
        request: spm_pb2.ReadScenario,
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[spm_pb2.DataList], collections.abc.AsyncIterator[spm_pb2.DataList]]: ...
    @abc.abstractmethod
    def CloseData(
        self,
        request: spm_pb2.DataCompleted,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.Scenario, collections.abc.Awaitable[spm_pb2.Scenario]]: ...
    @abc.abstractmethod
    def ClearDataTags(
        self,
        request: spm_pb2.ScenarioDataTags,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.Empty, collections.abc.Awaitable[spm_pb2.Empty]]: ...
    @abc.abstractmethod
    def WriteDataList(
        self,
        request_iterator: _MaybeAsyncIterator[spm_pb2.IndexedDataList],
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[spm_pb2.Scenario], collections.abc.AsyncIterator[spm_pb2.Scenario]]: ...
    @abc.abstractmethod
    def PushDataList(
        self,
        request: spm_pb2.IndexedDataList,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.Scenario, collections.abc.Awaitable[spm_pb2.Scenario]]: ...
    @abc.abstractmethod
    def SetOptimizationResult(
        self,
        request: spm_pb2.SetOptimizationResultRequest,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.Scenario, collections.abc.Awaitable[spm_pb2.Scenario]]: ...
    @abc.abstractmethod
    def SetOptimizationIterationScore(
        self,
        request: spm_pb2.SetOptimizationIterationScoreRequest,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.Empty, collections.abc.Awaitable[spm_pb2.Empty]]: ...
    @abc.abstractmethod
    def GetScenarioMetaData(
        self,
        request: spm_pb2.Scenario,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.ScenarioMetaData, collections.abc.Awaitable[spm_pb2.ScenarioMetaData]]: ...
    @abc.abstractmethod
    def SetScenarioMetaData(
        self,
        request: spm_pb2.ScenarioMetaData,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.Scenario, collections.abc.Awaitable[spm_pb2.Scenario]]: ...
    @abc.abstractmethod
    def GetScenarioCustomMetaData(
        self,
        request: spm_pb2.ScenarioCustomMetaData,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.ScenarioCustomMetaData, collections.abc.Awaitable[spm_pb2.ScenarioCustomMetaData]]: ...
    @abc.abstractmethod
    def SetScenarioCustomMetaData(
        self,
        request: spm_pb2.ScenarioCustomMetaData,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.ScenarioCustomMetaData, collections.abc.Awaitable[spm_pb2.ScenarioCustomMetaData]]: ...
    @abc.abstractmethod
    def GetScenarioDataStats(
        self,
        request: spm_pb2.ScenarioStatsRequest,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.ScenarioStats, collections.abc.Awaitable[spm_pb2.ScenarioStats]]: ...
    @abc.abstractmethod
    def GetModel(
        self,
        request: spm_pb2.Model,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.Model, collections.abc.Awaitable[spm_pb2.Model]]: ...
    @abc.abstractmethod
    def DuplicateScenario(
        self,
        request: spm_pb2.DuplicateScenarioRequest,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.Scenario, collections.abc.Awaitable[spm_pb2.Scenario]]: ...
    @abc.abstractmethod
    def PushExecutionLogEntries(
        self,
        request: spm_pb2.LogEntries,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.Empty, collections.abc.Awaitable[spm_pb2.Empty]]: ...
    @abc.abstractmethod
    def ReadExecutionLogEntries(
        self,
        request: spm_pb2.ExecutionReadLogs,
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[spm_pb2.ExeLogEntry], collections.abc.AsyncIterator[spm_pb2.ExeLogEntry]]: ...
    @abc.abstractmethod
    def GetScenario(
        self,
        request: spm_pb2.Scenario,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.ScenarioDocument, collections.abc.Awaitable[spm_pb2.ScenarioDocument]]: ...
    @abc.abstractmethod
    def SetScenarioResultDocument(
        self,
        request: spm_pb2.ScenarioResultsDocument,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.Empty, collections.abc.Awaitable[spm_pb2.Empty]]: ...
    @abc.abstractmethod
    def GetScenarioResultDocument(
        self,
        request: spm_pb2.Scenario,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.ScenarioResultsDocument, collections.abc.Awaitable[spm_pb2.ScenarioResultsDocument]]: ...
    @abc.abstractmethod
    def GetUser(
        self,
        request: spm_pb2.UserRequest,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.User, collections.abc.Awaitable[spm_pb2.User]]: ...
    @abc.abstractmethod
    def GetGroup(
        self,
        request: spm_pb2.Group,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.GroupDocument, collections.abc.Awaitable[spm_pb2.GroupDocument]]: ...
    @abc.abstractmethod
    def GetProject(
        self,
        request: spm_pb2.Project,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.ProjectDocument, collections.abc.Awaitable[spm_pb2.ProjectDocument]]: ...
    @abc.abstractmethod
    def DeleteScenario(
        self,
        request: spm_pb2.Scenario,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.Scenario, collections.abc.Awaitable[spm_pb2.Scenario]]: ...
    @abc.abstractmethod
    def DeleteProject(
        self,
        request: spm_pb2.Project,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.Project, collections.abc.Awaitable[spm_pb2.Project]]: ...
    @abc.abstractmethod
    def DeleteSystem(
        self,
        request: spm_pb2.SystemRequest,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.Empty, collections.abc.Awaitable[spm_pb2.Empty]]: ...
    @abc.abstractmethod
    def DeleteUser(
        self,
        request: spm_pb2.UserRequest,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.Empty, collections.abc.Awaitable[spm_pb2.Empty]]: ...
    @abc.abstractmethod
    def ListenScenario(
        self,
        request: spm_pb2.Scenario,
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[spm_pb2.ScenarioDocument], collections.abc.AsyncIterator[spm_pb2.ScenarioDocument]]: ...
    @abc.abstractmethod
    def SetScenarioProgress(
        self,
        request: spm_pb2.ScenarioProgress,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.Scenario, collections.abc.Awaitable[spm_pb2.Scenario]]: ...
    @abc.abstractmethod
    def SetScenarioDataTags(
        self,
        request: spm_pb2.ScenarioDataTags,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.Scenario, collections.abc.Awaitable[spm_pb2.Scenario]]: ...
    @abc.abstractmethod
    def PushScenarioError(
        self,
        request: spm_pb2.ScenarioError,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.Scenario, collections.abc.Awaitable[spm_pb2.Scenario]]: ...
    @abc.abstractmethod
    def PushScenarioFormattedError(
        self,
        request: spm_pb2.ScenarioFormattedError,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.Scenario, collections.abc.Awaitable[spm_pb2.Scenario]]: ...
    @abc.abstractmethod
    def GetSignedURLs(
        self,
        request: spm_pb2.FilePaths,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.FileSignedUrls, collections.abc.Awaitable[spm_pb2.FileSignedUrls]]: ...
    @abc.abstractmethod
    def GetPublicLink(
        self,
        request: spm_pb2.Link,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.SignedUrl, collections.abc.Awaitable[spm_pb2.SignedUrl]]: ...
    @abc.abstractmethod
    def GenerateScenarioUploadSignedURL(
        self,
        request: spm_pb2.ScenarioFilePath,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.ScenarioUploadURL, collections.abc.Awaitable[spm_pb2.ScenarioUploadURL]]: ...
    @abc.abstractmethod
    def ClearScenarioResults(
        self,
        request: spm_pb2.Scenario,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.Scenario, collections.abc.Awaitable[spm_pb2.Scenario]]: ...
    @abc.abstractmethod
    def SetScenarioResults(
        self,
        request: spm_pb2.ScenarioResults,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.Scenario, collections.abc.Awaitable[spm_pb2.Scenario]]: ...
    @abc.abstractmethod
    def GetScenarioResults(
        self,
        request: spm_pb2.Scenario,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.ScenarioResults, collections.abc.Awaitable[spm_pb2.ScenarioResults]]: ...
    @abc.abstractmethod
    def SubscribeForUpdates(
        self,
        request: spm_pb2.Subscription,
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[spm_pb2.SubscriptionMessage], collections.abc.AsyncIterator[spm_pb2.SubscriptionMessage]]: ...
    @abc.abstractmethod
    def PublishSubscriptionMessage(
        self,
        request: spm_pb2.SubscriptionMessage,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.Empty, collections.abc.Awaitable[spm_pb2.Empty]]: ...
    @abc.abstractmethod
    def CompleteExecution(
        self,
        request: spm_pb2.CompleteExecutionMessage,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.Empty, collections.abc.Awaitable[spm_pb2.Empty]]: ...
    @abc.abstractmethod
    def CompleteExecutionIgnoreInstance(
        self,
        request: spm_pb2.ExecutionMessage,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.Empty, collections.abc.Awaitable[spm_pb2.Empty]]: ...
    @abc.abstractmethod
    def UpdateExecution(
        self,
        request: spm_pb2.Json,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.Empty, collections.abc.Awaitable[spm_pb2.Empty]]: ...
    @abc.abstractmethod
    def ClearExecutionMemory(
        self,
        request: spm_pb2.Scenario,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.Empty, collections.abc.Awaitable[spm_pb2.Empty]]: ...
    @abc.abstractmethod
    def RemoveExecutionData(
        self,
        request: spm_pb2.Scenario,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.Empty, collections.abc.Awaitable[spm_pb2.Empty]]: ...
    @abc.abstractmethod
    def GetLatestMainExecution(
        self,
        request: spm_pb2.Scenario,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.ExecutionId, collections.abc.Awaitable[spm_pb2.ExecutionId]]: ...
    @abc.abstractmethod
    def UpdateProbe(
        self,
        request: spm_pb2.ProbeInformation,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.ProbeResponse, collections.abc.Awaitable[spm_pb2.ProbeResponse]]:
        """Garbage collection"""
    @abc.abstractmethod
    def WriteDataStream(
        self,
        request_iterator: _MaybeAsyncIterator[spm_pb2.WriteDataStreamRequest],
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[spm_pb2.WriteDataStreamResponse], collections.abc.AsyncIterator[spm_pb2.WriteDataStreamResponse]]:
        """Data-Port stream wrapper"""
    @abc.abstractmethod
    def ReadDataStream(
        self,
        request_iterator: _MaybeAsyncIterator[spm_pb2.ReadDataStreamRequest],
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[spm_pb2.ReadDataStreamResponse], collections.abc.AsyncIterator[spm_pb2.ReadDataStreamResponse]]: ...
    @abc.abstractmethod
    def GetDataStreamStats(
        self,
        request: spm_pb2.GetDataStreamStatsRequest,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.GetDataStreamStatsResponse, collections.abc.Awaitable[spm_pb2.GetDataStreamStatsResponse]]: ...

def add_SPMServicer_to_server(servicer: SPMServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...

class JobManagerStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    StartJob: grpc.UnaryUnaryMultiCallable[
        spm_pb2.Job,
        spm_pb2.ExecutionId,
    ]
    """Start Job endpoints"""
    StartJobWithTime: grpc.UnaryUnaryMultiCallable[
        spm_pb2.JobTime,
        spm_pb2.Job,
    ]
    StartJobWithSchedule: grpc.UnaryUnaryMultiCallable[
        spm_pb2.JobSchedule,
        spm_pb2.Job,
    ]
    StartJobWithTimeAndSchedule: grpc.UnaryUnaryMultiCallable[
        spm_pb2.JobTimeSchedule,
        spm_pb2.Job,
    ]
    StartLocalJob: grpc.UnaryUnaryMultiCallable[
        spm_pb2.StartLocalJobRequest,
        spm_pb2.StartLocalJobResponse,
    ]
    TerminateJob: grpc.UnaryUnaryMultiCallable[
        spm_pb2.Job,
        spm_pb2.Job,
    ]
    ResetJob: grpc.UnaryUnaryMultiCallable[
        spm_pb2.Job,
        spm_pb2.Job,
    ]
    GetExecutionStatus: grpc.UnaryUnaryMultiCallable[
        spm_pb2.ExecutionId,
        spm_pb2.Json,
    ]
    GetExecutionState: grpc.UnaryUnaryMultiCallable[
        spm_pb2.ExecutionStateMessage,
        spm_pb2.ExecutionState,
    ]
    DeleteExecution: grpc.UnaryUnaryMultiCallable[
        spm_pb2.ExecutionId,
        spm_pb2.Empty,
    ]
    AddJobSchedule: grpc.UnaryUnaryMultiCallable[
        spm_pb2.JobSchedule,
        spm_pb2.Empty,
    ]
    """Job scheduling"""
    UpdateJobSchedule: grpc.UnaryUnaryMultiCallable[
        spm_pb2.JobSchedule,
        spm_pb2.Empty,
    ]
    RemoveJobSchedule: grpc.UnaryUnaryMultiCallable[
        spm_pb2.Job,
        spm_pb2.Empty,
    ]
    GetJobSchedule: grpc.UnaryUnaryMultiCallable[
        spm_pb2.Job,
        spm_pb2.Schedule,
    ]
    AddExecutionSchedule: grpc.UnaryUnaryMultiCallable[
        spm_pb2.ExecutionAndSchedule,
        spm_pb2.Empty,
    ]
    """Execution scheduling"""
    UpdateExecutionSchedule: grpc.UnaryUnaryMultiCallable[
        spm_pb2.ExecutionAndSchedule,
        spm_pb2.Empty,
    ]
    RemoveExecutionSchedule: grpc.UnaryUnaryMultiCallable[
        spm_pb2.ExecutionId,
        spm_pb2.Empty,
    ]
    GetExecutionSchedule: grpc.UnaryUnaryMultiCallable[
        spm_pb2.ExecutionId,
        spm_pb2.Schedule,
    ]
    ResumeJob: grpc.UnaryUnaryMultiCallable[
        spm_pb2.Job,
        spm_pb2.Job,
    ]
    """Hibernation"""
    HibernateJob: grpc.UnaryUnaryMultiCallable[
        spm_pb2.Job,
        spm_pb2.Job,
    ]

class JobManagerAsyncStub:
    StartJob: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.Job,
        spm_pb2.ExecutionId,
    ]
    """Start Job endpoints"""
    StartJobWithTime: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.JobTime,
        spm_pb2.Job,
    ]
    StartJobWithSchedule: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.JobSchedule,
        spm_pb2.Job,
    ]
    StartJobWithTimeAndSchedule: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.JobTimeSchedule,
        spm_pb2.Job,
    ]
    StartLocalJob: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.StartLocalJobRequest,
        spm_pb2.StartLocalJobResponse,
    ]
    TerminateJob: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.Job,
        spm_pb2.Job,
    ]
    ResetJob: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.Job,
        spm_pb2.Job,
    ]
    GetExecutionStatus: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.ExecutionId,
        spm_pb2.Json,
    ]
    GetExecutionState: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.ExecutionStateMessage,
        spm_pb2.ExecutionState,
    ]
    DeleteExecution: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.ExecutionId,
        spm_pb2.Empty,
    ]
    AddJobSchedule: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.JobSchedule,
        spm_pb2.Empty,
    ]
    """Job scheduling"""
    UpdateJobSchedule: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.JobSchedule,
        spm_pb2.Empty,
    ]
    RemoveJobSchedule: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.Job,
        spm_pb2.Empty,
    ]
    GetJobSchedule: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.Job,
        spm_pb2.Schedule,
    ]
    AddExecutionSchedule: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.ExecutionAndSchedule,
        spm_pb2.Empty,
    ]
    """Execution scheduling"""
    UpdateExecutionSchedule: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.ExecutionAndSchedule,
        spm_pb2.Empty,
    ]
    RemoveExecutionSchedule: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.ExecutionId,
        spm_pb2.Empty,
    ]
    GetExecutionSchedule: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.ExecutionId,
        spm_pb2.Schedule,
    ]
    ResumeJob: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.Job,
        spm_pb2.Job,
    ]
    """Hibernation"""
    HibernateJob: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.Job,
        spm_pb2.Job,
    ]

class JobManagerServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def StartJob(
        self,
        request: spm_pb2.Job,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.ExecutionId, collections.abc.Awaitable[spm_pb2.ExecutionId]]:
        """Start Job endpoints"""
    @abc.abstractmethod
    def StartJobWithTime(
        self,
        request: spm_pb2.JobTime,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.Job, collections.abc.Awaitable[spm_pb2.Job]]: ...
    @abc.abstractmethod
    def StartJobWithSchedule(
        self,
        request: spm_pb2.JobSchedule,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.Job, collections.abc.Awaitable[spm_pb2.Job]]: ...
    @abc.abstractmethod
    def StartJobWithTimeAndSchedule(
        self,
        request: spm_pb2.JobTimeSchedule,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.Job, collections.abc.Awaitable[spm_pb2.Job]]: ...
    @abc.abstractmethod
    def StartLocalJob(
        self,
        request: spm_pb2.StartLocalJobRequest,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.StartLocalJobResponse, collections.abc.Awaitable[spm_pb2.StartLocalJobResponse]]: ...
    @abc.abstractmethod
    def TerminateJob(
        self,
        request: spm_pb2.Job,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.Job, collections.abc.Awaitable[spm_pb2.Job]]: ...
    @abc.abstractmethod
    def ResetJob(
        self,
        request: spm_pb2.Job,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.Job, collections.abc.Awaitable[spm_pb2.Job]]: ...
    @abc.abstractmethod
    def GetExecutionStatus(
        self,
        request: spm_pb2.ExecutionId,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.Json, collections.abc.Awaitable[spm_pb2.Json]]: ...
    @abc.abstractmethod
    def GetExecutionState(
        self,
        request: spm_pb2.ExecutionStateMessage,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.ExecutionState, collections.abc.Awaitable[spm_pb2.ExecutionState]]: ...
    @abc.abstractmethod
    def DeleteExecution(
        self,
        request: spm_pb2.ExecutionId,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.Empty, collections.abc.Awaitable[spm_pb2.Empty]]: ...
    @abc.abstractmethod
    def AddJobSchedule(
        self,
        request: spm_pb2.JobSchedule,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.Empty, collections.abc.Awaitable[spm_pb2.Empty]]:
        """Job scheduling"""
    @abc.abstractmethod
    def UpdateJobSchedule(
        self,
        request: spm_pb2.JobSchedule,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.Empty, collections.abc.Awaitable[spm_pb2.Empty]]: ...
    @abc.abstractmethod
    def RemoveJobSchedule(
        self,
        request: spm_pb2.Job,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.Empty, collections.abc.Awaitable[spm_pb2.Empty]]: ...
    @abc.abstractmethod
    def GetJobSchedule(
        self,
        request: spm_pb2.Job,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.Schedule, collections.abc.Awaitable[spm_pb2.Schedule]]: ...
    @abc.abstractmethod
    def AddExecutionSchedule(
        self,
        request: spm_pb2.ExecutionAndSchedule,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.Empty, collections.abc.Awaitable[spm_pb2.Empty]]:
        """Execution scheduling"""
    @abc.abstractmethod
    def UpdateExecutionSchedule(
        self,
        request: spm_pb2.ExecutionAndSchedule,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.Empty, collections.abc.Awaitable[spm_pb2.Empty]]: ...
    @abc.abstractmethod
    def RemoveExecutionSchedule(
        self,
        request: spm_pb2.ExecutionId,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.Empty, collections.abc.Awaitable[spm_pb2.Empty]]: ...
    @abc.abstractmethod
    def GetExecutionSchedule(
        self,
        request: spm_pb2.ExecutionId,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.Schedule, collections.abc.Awaitable[spm_pb2.Schedule]]: ...
    @abc.abstractmethod
    def ResumeJob(
        self,
        request: spm_pb2.Job,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.Job, collections.abc.Awaitable[spm_pb2.Job]]:
        """Hibernation"""
    @abc.abstractmethod
    def HibernateJob(
        self,
        request: spm_pb2.Job,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.Job, collections.abc.Awaitable[spm_pb2.Job]]: ...

def add_JobManagerServicer_to_server(servicer: JobManagerServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...

class TokenManagerStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    AuthenticateUser: grpc.UnaryUnaryMultiCallable[
        spm_pb2.AuthenticateUserRequest,
        spm_pb2.AuthenticateUserResponse,
    ]
    RefreshUser: grpc.UnaryUnaryMultiCallable[
        spm_pb2.RefreshUserRequest,
        spm_pb2.RefreshUserResponse,
    ]
    CreateRefreshToken: grpc.UnaryUnaryMultiCallable[
        spm_pb2.TokenRequest,
        spm_pb2.Token,
    ]
    GetAccessToken: grpc.UnaryUnaryMultiCallable[
        spm_pb2.RefreshRequest,
        spm_pb2.Token,
    ]

class TokenManagerAsyncStub:
    AuthenticateUser: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.AuthenticateUserRequest,
        spm_pb2.AuthenticateUserResponse,
    ]
    RefreshUser: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.RefreshUserRequest,
        spm_pb2.RefreshUserResponse,
    ]
    CreateRefreshToken: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.TokenRequest,
        spm_pb2.Token,
    ]
    GetAccessToken: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.RefreshRequest,
        spm_pb2.Token,
    ]

class TokenManagerServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def AuthenticateUser(
        self,
        request: spm_pb2.AuthenticateUserRequest,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.AuthenticateUserResponse, collections.abc.Awaitable[spm_pb2.AuthenticateUserResponse]]: ...
    @abc.abstractmethod
    def RefreshUser(
        self,
        request: spm_pb2.RefreshUserRequest,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.RefreshUserResponse, collections.abc.Awaitable[spm_pb2.RefreshUserResponse]]: ...
    @abc.abstractmethod
    def CreateRefreshToken(
        self,
        request: spm_pb2.TokenRequest,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.Token, collections.abc.Awaitable[spm_pb2.Token]]: ...
    @abc.abstractmethod
    def GetAccessToken(
        self,
        request: spm_pb2.RefreshRequest,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.Token, collections.abc.Awaitable[spm_pb2.Token]]: ...

def add_TokenManagerServicer_to_server(servicer: TokenManagerServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...

class BuildManagerStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    CreateSnapshot: grpc.UnaryUnaryMultiCallable[
        spm_pb2.Snapshot,
        spm_pb2.SnapshotReply,
    ]
    CreateHistoryUpdate: grpc.UnaryUnaryMultiCallable[
        spm_pb2.HistoryUpdate,
        spm_pb2.HistoryReply,
    ]
    GetHistory: grpc.UnaryUnaryMultiCallable[
        spm_pb2.HistoryRequest,
        spm_pb2.History,
    ]
    PullSnapshot: grpc.UnaryUnaryMultiCallable[
        spm_pb2.PullRequest,
        spm_pb2.PullResponse,
    ]
    LaunchBuild: grpc.UnaryUnaryMultiCallable[
        spm_pb2.BuildRequest,
        spm_pb2.BuildReply,
    ]
    Builder: grpc.StreamStreamMultiCallable[
        spm_pb2.BuildResponse,
        spm_pb2.Json,
    ]
    GetBuildInfo: grpc.UnaryUnaryMultiCallable[
        spm_pb2.BuildInfoRequest,
        spm_pb2.BuildInfo,
    ]
    UpdateBuild: grpc.UnaryUnaryMultiCallable[
        spm_pb2.BuildUpdate,
        spm_pb2.Empty,
    ]
    UpdateJobImageReference: grpc.UnaryUnaryMultiCallable[
        spm_pb2.JobImageReferenceUpdate,
        spm_pb2.Empty,
    ]

class BuildManagerAsyncStub:
    CreateSnapshot: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.Snapshot,
        spm_pb2.SnapshotReply,
    ]
    CreateHistoryUpdate: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.HistoryUpdate,
        spm_pb2.HistoryReply,
    ]
    GetHistory: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.HistoryRequest,
        spm_pb2.History,
    ]
    PullSnapshot: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.PullRequest,
        spm_pb2.PullResponse,
    ]
    LaunchBuild: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.BuildRequest,
        spm_pb2.BuildReply,
    ]
    Builder: grpc.aio.StreamStreamMultiCallable[
        spm_pb2.BuildResponse,
        spm_pb2.Json,
    ]
    GetBuildInfo: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.BuildInfoRequest,
        spm_pb2.BuildInfo,
    ]
    UpdateBuild: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.BuildUpdate,
        spm_pb2.Empty,
    ]
    UpdateJobImageReference: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.JobImageReferenceUpdate,
        spm_pb2.Empty,
    ]

class BuildManagerServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def CreateSnapshot(
        self,
        request: spm_pb2.Snapshot,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.SnapshotReply, collections.abc.Awaitable[spm_pb2.SnapshotReply]]: ...
    @abc.abstractmethod
    def CreateHistoryUpdate(
        self,
        request: spm_pb2.HistoryUpdate,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.HistoryReply, collections.abc.Awaitable[spm_pb2.HistoryReply]]: ...
    @abc.abstractmethod
    def GetHistory(
        self,
        request: spm_pb2.HistoryRequest,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.History, collections.abc.Awaitable[spm_pb2.History]]: ...
    @abc.abstractmethod
    def PullSnapshot(
        self,
        request: spm_pb2.PullRequest,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.PullResponse, collections.abc.Awaitable[spm_pb2.PullResponse]]: ...
    @abc.abstractmethod
    def LaunchBuild(
        self,
        request: spm_pb2.BuildRequest,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.BuildReply, collections.abc.Awaitable[spm_pb2.BuildReply]]: ...
    @abc.abstractmethod
    def Builder(
        self,
        request_iterator: _MaybeAsyncIterator[spm_pb2.BuildResponse],
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[spm_pb2.Json], collections.abc.AsyncIterator[spm_pb2.Json]]: ...
    @abc.abstractmethod
    def GetBuildInfo(
        self,
        request: spm_pb2.BuildInfoRequest,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.BuildInfo, collections.abc.Awaitable[spm_pb2.BuildInfo]]: ...
    @abc.abstractmethod
    def UpdateBuild(
        self,
        request: spm_pb2.BuildUpdate,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.Empty, collections.abc.Awaitable[spm_pb2.Empty]]: ...
    @abc.abstractmethod
    def UpdateJobImageReference(
        self,
        request: spm_pb2.JobImageReferenceUpdate,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.Empty, collections.abc.Awaitable[spm_pb2.Empty]]: ...

def add_BuildManagerServicer_to_server(servicer: BuildManagerServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...

class FileManagerStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    GetDownloadUrls: grpc.UnaryUnaryMultiCallable[
        spm_pb2.FilePaths,
        spm_pb2.FileUrls,
    ]
    GetUploadUrls: grpc.UnaryUnaryMultiCallable[
        spm_pb2.FilePaths,
        spm_pb2.FileUrls,
    ]
    DeleteFiles: grpc.UnaryUnaryMultiCallable[
        spm_pb2.FilePaths,
        spm_pb2.Empty,
    ]

class FileManagerAsyncStub:
    GetDownloadUrls: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.FilePaths,
        spm_pb2.FileUrls,
    ]
    GetUploadUrls: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.FilePaths,
        spm_pb2.FileUrls,
    ]
    DeleteFiles: grpc.aio.UnaryUnaryMultiCallable[
        spm_pb2.FilePaths,
        spm_pb2.Empty,
    ]

class FileManagerServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def GetDownloadUrls(
        self,
        request: spm_pb2.FilePaths,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.FileUrls, collections.abc.Awaitable[spm_pb2.FileUrls]]: ...
    @abc.abstractmethod
    def GetUploadUrls(
        self,
        request: spm_pb2.FilePaths,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.FileUrls, collections.abc.Awaitable[spm_pb2.FileUrls]]: ...
    @abc.abstractmethod
    def DeleteFiles(
        self,
        request: spm_pb2.FilePaths,
        context: _ServicerContext,
    ) -> typing.Union[spm_pb2.Empty, collections.abc.Awaitable[spm_pb2.Empty]]: ...

def add_FileManagerServicer_to_server(servicer: FileManagerServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
