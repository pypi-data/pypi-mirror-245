[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "vcs"

[tool.hatch.build]
packages = ["bowtie"]
exclude = [
    "implementations/",
]

[project]
name = "bowtie-json-schema"
description = "A meta-validator for the JSON Schema specification."
requires-python = ">=3.10"
readme = "README.rst"
license = {text = "MIT"}
keywords = [
    "validation",
    "data validation",
    "jsonschema",
    "json",
    "json schema",
]
authors = [
  {email = "Julian+bowtie@GrayVines.com"},
  {name = "Julian Berman"},
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: Implementation :: CPython",
  "Topic :: File Formats :: JSON :: JSON Schema",
]
dynamic = ["version"]
dependencies = [
  "aiodocker",
  "attrs>=22.2.0",
  "click",
  "diagnostic",
  "github3.py",
  "jsonschema>=4.19.0",
  "referencing>=0.31.0",
  "rich",
  "structlog",
  "trogon>=0.4.0",
  "typing-extensions; python_version<'3.11'",
  "url.py",
]

[project.scripts]
bowtie = "bowtie._cli:main"

[project.urls]
Documentation = "https://docs.bowtie.report/"
Homepage = "https://bowtie.report/"
Issues = "https://github.com/bowtie-json-schema/bowtie/issues/"
Source = "https://github.com/bowtie-json-schema/bowtie"

[tool.coverage.html]
show_contexts = true
skip_covered = false

[tool.coverage.run]
branch = true
source = ["bowtie"]
dynamic_context = "test_function"

[tool.coverage.report]
exclude_also = [
  "if TYPE_CHECKING:",
  "\\s*\\.\\.\\.\\s*",
]
show_missing = true
skip_covered = true

[tool.doc8]
ignore = [
    "D000",  # see PyCQA/doc8#125
    "D001",  # one sentence per line, so max length doesn't make sense
]

[tool.isort]
combine_as_imports = true
ensure_newline_before_comments = true
from_first = true
include_trailing_comma = true
multi_line_output = 3
use_parentheses = true

[tool.pyright]
reportUnnecessaryTypeIgnoreComment = true
strict = ["**/*.py"]
exclude = [
    "**/tests/__init__.py",
    "**/tests/test_*.py",
]

[tool.ruff]
line-length = 79
select = [
  "ANN", "B", "D", "D204", "E", "F", "Q", "RUF", "SIM", "TCH", "UP", "W",
]
ignore = [
  # Wat, type annotations for self and cls, why is this a thing?
  "ANN101",
  "ANN102",
  # Private annotations are fine to leave out.
  "ANN202",
  # I don't know how to more properly annotate "pass along all arguments".
  "ANN401",
  # It's totally OK to call functions for default arguments.
  "B008",
  # raise SomeException(...) is fine.
  "B904",
  # There's no need for explicit strict, this is simply zip's default behavior.
  "B905",
  # It's fine to not have docstrings for magic methods.
  "D105",
  # __init__ especially doesn't need a docstring
  "D107",
  # This rule makes diffs uglier when expanding docstrings (and it's uglier)
  "D200",
  # No blank lines before docstrings.
  "D203",
  # Start docstrings on the second line.
  "D212",
  # This rule misses sassy docstrings ending with ! or ?.
  "D400",
  # This rule is too flaky.
  "D401",
  # Section headers should end with a colon not a newline
  "D406",
  # Underlines aren't needed
  "D407",
  # Plz spaces after section headers
  "D412",
]
extend-exclude = ["json"]

[tool.ruff.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.per-file-ignores]
"noxfile.py" = ["ANN", "D100"]
"docs/*" = ["ANN", "D"]
"tests/*" = ["ANN", "D", "RUF012"]
"implementations/*" = ["ANN", "D"]
