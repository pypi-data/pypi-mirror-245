import rospy.impl.transport
from _typeshed import Incomplete

def get_max_datagram_size(): ...

class UDPROSHandler(rospy.transport.ProtocolHandler):
    port: Incomplete
    buff_size: Incomplete
    def __init__(self, port: int = ...) -> None: ...
    server: Incomplete
    def init_server(self) -> None: ...
    def run(self) -> None: ...
    def shutdown(self) -> None: ...
    def create_transport(self, topic_name, pub_uri, protocol_params): ...
    def supports(self, protocol): ...
    def get_supported(self): ...
    def init_publisher(self, topic_name, protocol_params): ...
    def topic_connection_handler(self, sock, client_addr, header): ...

class UDPROSTransport(rospy.transport.Transport):
    transport_type: str
    done: bool
    header: Incomplete
    def __init__(self, protocol, name, header) -> None: ...
    def send_message(self, msg, seq) -> None: ...
    def write_data(self, data) -> None: ...
    def receive_once(self) -> None: ...
    def receive_loop(self, msgs_callback) -> None: ...
    def close(super) -> None: ...

def get_handler(): ...
