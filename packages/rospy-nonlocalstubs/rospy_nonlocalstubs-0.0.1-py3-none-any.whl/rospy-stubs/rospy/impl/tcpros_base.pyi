from rospy.core import *
from _typeshed import Incomplete
from rospy.core import logdebug as logdebug, logerr as logerr, loginfo as loginfo, logwarn as logwarn, rospydebug as rospydebug, rospyerr as rospyerr, rospywarn as rospywarn
from rospy.exceptions import ROSInternalException as ROSInternalException, TransportException as TransportException, TransportInitError as TransportInitError, TransportTerminated as TransportTerminated
from rospy.impl.transport import BIDIRECTIONAL as BIDIRECTIONAL, Transport as Transport
from rospy.msg import deserialize_messages as deserialize_messages, serialize_message as serialize_message
from rospy.service import ServiceException as ServiceException

python3: int
logger: Incomplete
DEFAULT_BUFF_SIZE: int
TCPROS: str

def recv_buff(sock, b, buff_size): ...

class TCPServer:
    port: Incomplete
    addr: Incomplete
    is_shutdown: bool
    inbound_handler: Incomplete
    server_sock: Incomplete
    def __init__(self, inbound_handler, port: int = ...) -> None: ...
    def start(self) -> None: ...
    def run(self) -> None: ...
    def get_full_addr(self): ...
    def shutdown(self) -> None: ...

def init_tcpros_server(port: int = ...): ...
def start_tcpros_server(): ...
def get_tcpros_server_address(): ...

class TCPROSServer:
    port: Incomplete
    tcp_ros_server: Incomplete
    lock: Incomplete
    topic_connection_handler: Incomplete
    service_connection_handler: Incomplete
    def __init__(self, port: int = ...) -> None: ...
    def start_server(self): ...
    def get_address(self): ...
    def shutdown(self, reason: str = ...) -> None: ...

class TCPROSTransportProtocol:
    resolved_name: Incomplete
    recv_data_class: Incomplete
    queue_size: Incomplete
    buff_size: Incomplete
    direction: Incomplete
    def __init__(self, resolved_name, recv_data_class, queue_size: Incomplete | None = ..., buff_size=...) -> None: ...
    def read_messages(self, b, msg_queue, sock) -> None: ...
    def get_header_fields(self): ...

class TCPROSTransport(Transport):
    transport_type: str
    protocol: Incomplete
    socket: Incomplete
    endpoint_id: str
    callerid_pub: str
    dest_address: Incomplete
    read_buff: Incomplete
    write_buff: Incomplete
    header: Incomplete
    is_latched: bool
    latch: Incomplete
    md5sum: Incomplete
    type: Incomplete
    local_endpoint: Incomplete
    remote_endpoint: Incomplete
    def __init__(self, protocol, name, header: Incomplete | None = ...) -> None: ...
    def get_transport_info(self): ...
    def fileno(self): ...
    def set_endpoint_id(self, endpoint_id) -> None: ...
    def set_socket(self, sock, endpoint_id) -> None: ...
    def connect(self, dest_addr, dest_port, endpoint_id, timeout: Incomplete | None = ...) -> None: ...
    def write_header(self) -> None: ...
    def read_header(self) -> None: ...
    def send_message(self, msg, seq) -> None: ...
    def write_data(self, data): ...
    def receive_once(self): ...
    def receive_loop(self, msgs_callback) -> None: ...
    def close(self) -> None: ...
