from rospy.names import *
import logging
import xmlrpclib as xmlrpcclient
from _typeshed import Incomplete
from functools import partial as partial
from rosgraph_msgs.msg import Log as Log
from rospy.impl.validators import ParameterInvalid as ParameterInvalid

def deprecated(func): ...

ROSRPC: str

def parse_rosrpc_uri(uri): ...
def rospydebug(msg, *args, **kwargs) -> None: ...
def rospyinfo(msg, *args, **kwargs) -> None: ...
def rospyerr(msg, *args, **kwargs) -> None: ...
def rospywarn(msg, *args, **kwargs) -> None: ...
def logdebug(msg, *args, **kwargs) -> None: ...
def loginfo(msg, *args, **kwargs) -> None: ...
def logwarn(msg, *args, **kwargs) -> None: ...
def logerr(msg, *args, **kwargs) -> None: ...
def logfatal(msg, *args, **kwargs) -> None: ...
logout = loginfo
logerror = logerr

class LoggingThrottle:
    last_logging_time_table: Incomplete
    def __call__(self, caller_id, period): ...

def logdebug_throttle(period, msg, *args, **kwargs) -> None: ...
def loginfo_throttle(period, msg, *args, **kwargs) -> None: ...
def logwarn_throttle(period, msg, *args, **kwargs) -> None: ...
def logerr_throttle(period, msg, *args, **kwargs) -> None: ...
def logfatal_throttle(period, msg, *args, **kwargs) -> None: ...

class LoggingIdentical:
    last_logging_msg_table: Incomplete
    def __call__(self, caller_id, msg): ...

def logdebug_throttle_identical(period, msg, *args, **kwargs) -> None: ...
def loginfo_throttle_identical(period, msg, *args, **kwargs) -> None: ...
def logwarn_throttle_identical(period, msg, *args, **kwargs) -> None: ...
def logerr_throttle_identical(period, msg, *args, **kwargs) -> None: ...
def logfatal_throttle_identical(period, msg, *args, **kwargs) -> None: ...

class LoggingOnce:
    called_caller_ids: Incomplete
    def __call__(self, caller_id): ...

def logdebug_once(msg, *args, **kwargs) -> None: ...
def loginfo_once(msg, *args, **kwargs) -> None: ...
def logwarn_once(msg, *args, **kwargs) -> None: ...
def logerr_once(msg, *args, **kwargs) -> None: ...
def logfatal_once(msg, *args, **kwargs) -> None: ...

MASTER_NAME: str

def get_ros_root(required: bool = ..., env: Incomplete | None = ...): ...
def get_node_uri(): ...
def set_node_uri(uri) -> None: ...
def configure_logging(node_name, level=...) -> None: ...

class NullHandler(logging.Handler):
    def emit(self, record) -> None: ...

def is_initialized(): ...
def set_initialized(initialized) -> None: ...
def is_shutdown(): ...
def is_shutdown_requested(): ...
def add_client_shutdown_hook(h) -> None: ...
def add_preshutdown_hook(h) -> None: ...
def add_shutdown_hook(h) -> None: ...
def signal_shutdown(reason) -> None: ...
def register_signals() -> None: ...
def is_topic(param_name): ...
def xmlrpcapi(uri, cache: bool = ...): ...

class _LockedServerProxy(xmlrpcclient.ServerProxy):
    def __init__(self, *args, **kwargs) -> None: ...
