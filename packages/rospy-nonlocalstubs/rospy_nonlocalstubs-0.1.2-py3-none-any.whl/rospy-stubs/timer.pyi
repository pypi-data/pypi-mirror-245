import threading
from _typeshed import Incomplete

class Rate:
    last_time: Incomplete
    sleep_dur: Incomplete
    def __init__(self, hz, reset: bool = ...) -> None: ...
    def remaining(self): ...
    def sleep(self) -> None: ...

def sleep(duration) -> None: ...

class TimerEvent:
    last_expected: Incomplete
    last_real: Incomplete
    current_expected: Incomplete
    current_real: Incomplete
    last_duration: Incomplete
    def __init__(self, last_expected, last_real, current_expected, current_real, last_duration) -> None: ...

class Timer(threading.Thread):
    daemon: bool
    def __init__(self, period, callback, oneshot: bool = ..., reset: bool = ...) -> None: ...
    def shutdown(self) -> None: ...
    def run(self) -> None: ...
