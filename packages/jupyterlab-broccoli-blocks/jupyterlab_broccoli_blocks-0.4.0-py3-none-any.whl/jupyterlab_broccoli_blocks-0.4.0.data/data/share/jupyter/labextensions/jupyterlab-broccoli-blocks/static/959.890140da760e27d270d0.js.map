{"version":3,"file":"959.890140da760e27d270d0.js?v=890140da760e27d270d0","mappings":"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","sources":["webpack://jupyterlab-broccoli-blocks/./lib/toolbox_basic.js","webpack://jupyterlab-broccoli-blocks/./lib/blocks.js","webpack://jupyterlab-broccoli-blocks/./lib/utils.js","webpack://jupyterlab-broccoli-blocks/./lib/toolbox_junkbox.js","webpack://jupyterlab-broccoli-blocks/./lib/index.js","webpack://jupyterlab-broccoli-blocks/./lib/python/func.js","webpack://jupyterlab-broccoli-blocks/./lib/javascript/func.js","webpack://jupyterlab-broccoli-blocks/./lib/php/func.js","webpack://jupyterlab-broccoli-blocks/./lib/lua/func.js","webpack://jupyterlab-broccoli-blocks/./lib/dart/func.js","webpack://jupyterlab-broccoli-blocks/./lib/msg/ lazy ^\\.\\/.*\\.js$ namespace object"],"sourcesContent":["//\nexport const TOOLBOX_BASIC = {\n    kind: 'categoryToolbox',\n    contents: [\n        {\n            kind: 'category',\n            name: '%{BKY_TOOLBOX_LOGIC}',\n            colour: '210',\n            contents: [\n                {\n                    kind: 'block',\n                    type: 'controls_if'\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'logic_compare'\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'logic_operation',\n                    blockxml: `<block type='logic_operation'></block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'logic_negate',\n                    blockxml: `<block type='logic_negate'></block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'logic_boolean',\n                    blockxml: `<block type='logic_boolean'></block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'logic_null',\n                    blockxml: `<block type='logic_null'></block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'logic_ternary',\n                    blockxml: `<block type='logic_ternary'></block>`\n                }\n            ]\n        },\n        {\n            kind: 'category',\n            name: '%{BKY_TOOLBOX_LOOPS}',\n            colour: '120',\n            contents: [\n                {\n                    kind: 'BLOCK',\n                    type: 'controls_repeat_ext',\n                    blockxml: `<block type='controls_repeat_ext'>\n               <value name='TIMES'>\n                 <shadow type='math_number'>\n                   <field name='NUM'>10</field>\n                 </shadow>\n               </value>\n             </block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'controls_whileUntil',\n                    blockxml: `<block type='controls_whileUntil'></block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'controls_for',\n                    blockxml: `<block type='controls_for'>\n               <value name='FROM'>\n                 <shadow type='math_number'>\n                   <field name='NUM'>1</field>\n                 </shadow>\n               </value>\n               <value name='TO'>\n                 <shadow type='math_number'>\n                   <field name='NUM'>10</field>\n                 </shadow>\n               </value>\n               <value name='BY'>\n                 <shadow type='math_number'>\n                   <field name='NUM'>1</field>\n                 </shadow>\n               </value>\n             </block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'controls_forEach',\n                    blockxml: `<block type='controls_forEach'></block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'controls_flow_statements',\n                    blockxml: `<block type='controls_flow_statements'></block>`\n                }\n            ]\n        },\n        {\n            kind: 'CATEGORY',\n            name: '%{BKY_TOOLBOX_MATH}',\n            colour: '230',\n            contents: [\n                {\n                    kind: 'BLOCK',\n                    type: 'math_number',\n                    blockxml: `<block type='math_number'></block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'math_arithmetic',\n                    blockxml: `<block type='math_arithmetic'>\n               <value name='A'>\n                 <shadow type='math_number'>\n                   <field name='NUM'>1</field>\n                 </shadow>\n               </value>\n               <value name='B'>\n                 <shadow type='math_number'>\n                   <field name='NUM'>1</field>\n                 </shadow>\n               </value>\n             </block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'math_single',\n                    blockxml: `<block type='math_single'>\n               <value name='NUM'>\n                 <shadow type='math_number'>\n                   <field name='NUM'>9</field>\n                 </shadow>\n               </value>\n             </block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'math_trig',\n                    blockxml: `<block type='math_trig'>\n               <value name='NUM'>\n                 <shadow type='math_number'>\n                   <field name='NUM'>45</field>\n                 </shadow>\n               </value>\n             </block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'math_constant',\n                    blockxml: `<block type='math_constant'></block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'math_number_property',\n                    blockxml: `<block type='math_number_property'>\n               <value name='NUMBER_TO_CHECK'>\n                 <shadow type='math_number'>\n                   <field name='NUM'>0</field>\n                 </shadow>\n               </value>\n             </block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'math_change',\n                    blockxml: `<block type='math_change'>\n               <value name='DELTA'>\n                 <shadow type='math_number'>\n                   <field name='NUM'>1</field>\n                 </shadow>\n               </value>\n             </block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'math_round',\n                    blockxml: `<block type='math_round'>\n               <value name='NUM'>\n                 <shadow type='math_number'>\n                   <field name='NUM'>3.1</field>\n                 </shadow>\n               </value>\n             </block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'math_on_list',\n                    blockxml: `<block type='math_on_list'></block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'math_modulo',\n                    blockxml: `<block type='math_modulo'>\n               <value name='DIVIDEND'>\n                 <shadow type='math_number'>\n                   <field name='NUM'>64</field>\n                 </shadow>\n               </value>\n               <value name='DIVISOR'>\n                 <shadow type='math_number'>\n                   <field name='NUM'>10</field>\n                 </shadow>\n               </value>\n             </block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'math_constrain',\n                    blockxml: `<block type='math_constrain'>\n              <value name='VALUE'>\n                <shadow type='math_number'>\n                  <field name='NUM'>50</field>\n                </shadow>\n              </value>\n              <value name='LOW'>\n                <shadow type='math_number'>\n                  <field name='NUM'>1</field>\n                </shadow>\n              </value>\n              <value name='HIGH'>\n                <shadow type='math_number'>\n                  <field name='NUM'>100</field>\n                </shadow>\n              </value>\n            </block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'math_random_int',\n                    blockxml: `<block type='math_random_int'>\n               <value name='FROM'>\n                 <shadow type='math_number'>\n                   <field name='NUM'>1</field>\n                 </shadow>\n               </value>\n               <value name='TO'>\n                 <shadow type='math_number'>\n                   <field name='NUM'>100</field>\n                 </shadow>\n               </value>\n             </block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'math_random_float',\n                    blockxml: `<block type='math_random_float'></block>`\n                }\n            ]\n        },\n        {\n            kind: 'CATEGORY',\n            name: '%{BKY_TOOLBOX_TEXT}',\n            colour: '160',\n            contents: [\n                {\n                    kind: 'BLOCK',\n                    type: 'text',\n                    blockxml: `<block type='text'></block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'text_join',\n                    blockxml: `<block type='text_join'></block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'text_append',\n                    blockxml: `<block type='text_append'>\n               <value name='TEXT'>\n                 <shadow type='text'></shadow>\n               </value>\n             </block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'text_length',\n                    blockxml: `<block type='text_length'>\n               <value name='VALUE'>\n                 <shadow type='text'>\n                   <field name='TEXT'>abc</field>\n                 </shadow>\n               </value>\n             </block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'text_isEmpty',\n                    blockxml: `<block type='text_isEmpty'>\n               <value name='VALUE'>\n                 <shadow type='text'>\n                   <field name='TEXT'></field>\n                 </shadow>\n               </value>\n             </block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'text_indexOf',\n                    blockxml: `<block type='text_indexOf'>\n               <value name='VALUE'>\n                 <block type='variables_get'>\n                   <field name='VAR'>text</field>\n                 </block>\n               </value>\n               <value name='FIND'>\n                 <shadow type='text'>\n                   <field name='TEXT'>abc</field>\n                 </shadow>\n               </value>\n             </block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'text_charAt',\n                    blockxml: `<block type='text_charAt'>\n               <value name='VALUE'>\n                 <block type='variables_get'>\n                   <field name='VAR'>text</field>\n                 </block>\n               </value>\n             </block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'text_getSubstring',\n                    blockxml: `<block type='text_getSubstring'>\n               <value name='STRING'>\n                 <block type='variables_get'>\n                   <field name='VAR'>text</field>\n                 </block>\n               </value>\n             </block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'text_changeCase',\n                    blockxml: `<block type='text_changeCase'>\n               <value name='TEXT'>\n                 <shadow type='text'>\n                   <field name='TEXT'>abc</field>\n                 </shadow>\n               </value>\n             </block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'text_trim',\n                    blockxml: `<block type='text_trim'>\n               <value name='TEXT'>\n                 <shadow type='text'>\n                   <field name='TEXT'>abc</field>\n                 </shadow>\n               </value>\n             </block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'text_print',\n                    blockxml: `<block type='text_print'>\n               <value name='TEXT'>\n                 <shadow type='text'>\n                   <field name='TEXT'>abc</field>\n                 </shadow>\n               </value>\n             </block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'text_prompt_ext',\n                    blockxml: `<block type='text_prompt_ext'>\n               <value name='TEXT'>\n                 <shadow type='text'>\n                   <field name='TEXT'>abc</field>\n                 </shadow>\n               </value>\n             </block>`\n                }\n            ]\n        },\n        {\n            kind: 'CATEGORY',\n            name: '%{BKY_TOOLBOX_LISTS}',\n            colour: '260',\n            contents: [\n                {\n                    kind: 'BLOCK',\n                    type: 'lists_create_with',\n                    blockxml: `<block type='lists_create_with'>\n               <mutation items='0'></mutation>\n             </block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'lists_create_with',\n                    blockxml: `<block type='lists_create_with'></block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'lists_repeat',\n                    blockxml: `<block type='lists_repeat'>\n               <value name='NUM'>\n                 <shadow type='math_number'>\n                   <field name='NUM'>5</field>\n                 </shadow>\n               </value>\n             </block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'lists_length',\n                    blockxml: `<block type='lists_length'></block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'lists_isEmpty',\n                    blockxml: `<block type='lists_isEmpty'></block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'lists_indexOf',\n                    blockxml: `<block type='lists_indexOf'>\n               <value name='VALUE'>\n                 <block type='variables_get'>\n                   <field name='VAR'>list</field>\n                 </block>\n               </value>\n             </block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'lists_getIndex',\n                    blockxml: `<block type='lists_getIndex'>\n               <value name='VALUE'>\n                 <block type='variables_get'>\n                   <field name='VAR'>list</field>\n                 </block>\n               </value>\n             </block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'lists_setIndex',\n                    blockxml: `<block type='lists_setIndex'>\n               <value name='LIST'>\n                 <block type='variables_get'>\n                   <field name='VAR'>list</field>\n                 </block>\n               </value>\n             </block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'lists_getSublist',\n                    blockxml: `<block type='lists_getSublist'>\n               <value name='LIST'>\n                 <block type='variables_get'>\n                   <field name='VAR'>list</field>\n                 </block>\n               </value>\n             </block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'lists_split',\n                    blockxml: `<block type='lists_split'>\n               <value name='DELIM'>\n                 <shadow type='text'>\n                   <field name='TEXT'>,</field>\n                 </shadow>\n               </value>\n             </block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'lists_sort',\n                    blockxml: `<block type='lists_sort'></block>`\n                }\n            ]\n        },\n        {\n            kind: 'CATEGORY',\n            name: '%{BKY_TOOLBOX_COLOR}',\n            colour: '20',\n            contents: [\n                {\n                    kind: 'BLOCK',\n                    type: 'colour_picker',\n                    blockxml: `<block type='colour_picker'></block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'colour_random',\n                    blockxml: `<block type='colour_random'></block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'colour_rgb',\n                    blockxml: `<block type='colour_rgb'>\n               <value name='RED'>\n                 <shadow type='math_number'>\n                   <field name='NUM'>100</field>\n                 </shadow>\n               </value>\n               <value name='GREEN'>\n                 <shadow type='math_number'>\n                   <field name='NUM'>50</field>\n                 </shadow>\n               </value>\n               <value name='BLUE'>\n                 <shadow type='math_number'>\n                   <field name='NUM'>0</field>\n                 </shadow>\n               </value>\n             </block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'colour_blend',\n                    blockxml: `<block type='colour_blend'>\n               <value name='COLOUR1'>\n                 <shadow type='colour_picker'>\n                   <field name='COLOUR'>#ff0000</field>\n                 </shadow>\n               </value>\n             <value name='COLOUR2'>\n               <shadow type='colour_picker'>\n                 <field name='COLOUR'>#3333ff</field>\n               </shadow>\n             </value>\n             <value name='RATIO'>\n               <shadow type='math_number'>\n                 <field name='NUM'>0.5</field>\n               </shadow>\n             </value>\n           </block>`\n                }\n            ]\n        },\n        {\n            kind: 'SEP'\n        },\n        {\n            kind: 'CATEGORY',\n            custom: 'VARIABLE',\n            colour: '330',\n            name: '%{BKY_TOOLBOX_VARIABLES}'\n        },\n        {\n            kind: 'CATEGORY',\n            custom: 'PROCEDURE',\n            colour: '290',\n            name: '%{BKY_TOOLBOX_FUNCTIONS}'\n        },\n    ]\n};\n//# sourceMappingURL=toolbox_basic.js.map","import * as Blockly from 'blockly';\nimport { ToolboxUtils } from './utils';\nimport { TOOLBOX_BASIC } from './toolbox_basic';\nimport { TOOLBOX_JUNKBOX } from './toolbox_junkbox';\n//\nconst toolboxUtils = new ToolboxUtils();\nexport const TOOLBOX = toolboxUtils.add(TOOLBOX_JUNKBOX, TOOLBOX_BASIC, 2);\n// text_nocrlf_print\nBlockly.defineBlocksWithJsonArray([{\n        'type': 'text_nocrlf_print',\n        'message0': '%{BKY_BLOCK_TEXT_NOCRLF_PRINT}  %1',\n        'args0': [\n            {\n                'type': 'input_value',\n                'name': 'TEXT',\n            }\n        ],\n        'previousStatement': null,\n        'nextStatement': null,\n        'colour': 230,\n        'tooltip': '',\n        'helpUrl': ''\n    }]);\n// color_hsv2rgb\nBlockly.defineBlocksWithJsonArray([{\n        'type': 'color_hsv2rgb',\n        'message0': '%{BKY_BLOCK_COLOR_HSV}  %1 %{BKY_BLOCK_COLOR_S}  %2 %{BKY_BLOCK_COLOR_V}  %3',\n        'args0': [\n            {\n                'type': 'input_value',\n                'name': 'H',\n                'check': 'Number',\n                'align': 'RIGHT'\n            },\n            {\n                'type': 'input_value',\n                'name': 'S',\n                'check': 'Number',\n                'align': 'RIGHT'\n            },\n            {\n                'type': 'input_value',\n                'name': 'V',\n                'check': 'Number',\n                'align': 'RIGHT'\n            },\n        ],\n        'output': 'Colour',\n        'colour': 230,\n        'helpUrl': '',\n        'tooltip': '',\n    }]);\n//# sourceMappingURL=blocks.js.map","//\nexport class ToolboxUtils {\n    constructor() { }\n    add(a, b, num) {\n        //\n        if (a.kind !== b.kind)\n            undefined;\n        const c = { kind: a.kind, contents: new Array };\n        const a_len = a.contents.length;\n        const b_len = b.contents.length;\n        for (let i = 0; i < a_len; i++) {\n            c.contents[i] = a.contents[i];\n        }\n        // separator\n        for (let i = 0; i < num; i++) {\n            c.contents[a_len + i] = { kind: 'SEP' };\n        }\n        for (let i = 0; i < b_len; i++) {\n            c.contents[a_len + num + i] = b.contents[i];\n        }\n        return c;\n    }\n}\n//# sourceMappingURL=utils.js.map","export const TOOLBOX_JUNKBOX = {\n    kind: 'categoryToolbox',\n    contents: [\n        {\n            kind: 'CATEGORY',\n            name: '%{BKY_TOOLBOX_JUNKBOX}',\n            colour: 330,\n            contents: [\n                {\n                    kind: 'BLOCK',\n                    type: 'text_nocrlf_print',\n                    blockxml: `<block type='text_nocrlf_print'>\n              <value name='TEXT'>\n                <shadow type='text'>\n                  <field name='TEXT'>abc</field>\n                </shadow>\n              </value>\n            </block>`,\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'color_hsv2rgb',\n                    blockxml: `<block type='color_hsv2rgb'>\n              <value name='H'>\n                <shadow type='math_number'>\n                  <field name='NUM'>0</field>\n                </shadow>\n              </value>\n              <value name='S'>\n                <shadow type='math_number'>\n                  <field name='NUM'>0.45</field>\n                </shadow>\n              </value>\n              <value name='V'>\n                <shadow type='math_number'>\n                  <field name='NUM'>0.65</field>\n                </shadow>\n              </value>\n            </block>`,\n                },\n            ]\n        }\n    ]\n};\n//# sourceMappingURL=toolbox_junkbox.js.map","import { IBlocklyRegistry } from 'jupyterlab-broccoli';\nimport { ITranslator, nullTranslator } from '@jupyterlab/translation';\nimport { TOOLBOX } from './blocks';\nimport { getPythonFunctions } from './python/func';\nimport { getJsFunctions } from './javascript/func.js';\nimport { getLuaFunctions } from './lua/func.js';\nimport { getDartFunctions } from './dart/func.js';\nimport { getPHPFunctions } from './php/func.js';\n/**\n * Initialization data for the jupyterlab-broccoli-blocks extension.\n */\nconst plugin = {\n    id: 'jupyterlab-broccoli-blocks:plugin',\n    autoStart: true,\n    requires: [IBlocklyRegistry, ITranslator],\n    activate: (app, register, translator) => {\n        console.log('JupyterLab extension jupyterlab-broccoli-blocks is activated!');\n        const bregister = register;\n        // Localization \n        const language = bregister.language;\n        import(`./msg/${language}.js`)\n            .catch(() => {\n            if (language !== 'En') {\n                import(`./msg/En.js`)\n                    .catch(() => { });\n            }\n        });\n        const trans = (translator || nullTranslator).load('jupyterlab');\n        register.registerToolbox(trans.__('Junk Box'), TOOLBOX);\n        var fpython = getPythonFunctions(bregister.generators.get('python'));\n        var fjavascript = getJsFunctions(bregister.generators.get('javascript'));\n        var fphp = getPHPFunctions(bregister.generators.get('php'));\n        var flua = getLuaFunctions(bregister.generators.get('lua'));\n        var fdart = getDartFunctions(bregister.generators.get('dart'));\n        console.log(\"=== START JUNKBOX ===\");\n        // @ts-ignore\n        register.registerCodes('python', fpython);\n        // @ts-ignore\n        register.registerCodes('javascript', fjavascript);\n        // @ts-ignore\n        register.registerCodes('php', fphp);\n        // @ts-ignore\n        register.registerCodes('lua', flua);\n        // @ts-ignore\n        register.registerCodes('dart', fdart);\n        console.log(\"=== END   JUNKBOX ===\");\n    }\n};\nexport default plugin;\n//# sourceMappingURL=index.js.map","//\nimport { pythonGenerator as Python } from 'blockly/python';\n/*\nPython.ORDER_ATOMIC = 0;             // 0 \"\" ...\nPython.ORDER_COLLECTION = 1;         // tuples, lists, dictionaries\nPython.ORDER_STRING_CONVERSION = 1;  // `expression...`\nPython.ORDER_MEMBER = 2.1;           // . []\nPython.ORDER_FUNCTION_CALL = 2.2;    // ()\nPython.ORDER_EXPONENTIATION = 3;     // **\nPython.ORDER_UNARY_SIGN = 4;         // + -\nPython.ORDER_BITWISE_NOT = 4;        // ~\nPython.ORDER_MULTIPLICATIVE = 5;     // * / // %\nPython.ORDER_ADDITIVE = 6;           // + -\nPython.ORDER_BITWISE_SHIFT = 7;      // << >>\nPython.ORDER_BITWISE_AND = 8;        // &\nPython.ORDER_BITWISE_XOR = 9;        // ^\nPython.ORDER_BITWISE_OR = 10;        // |\nPython.ORDER_RELATIONAL = 11;        // in, not in, is, is not,\n                                     //     <, <=, >, >=, <>, !=, ==\nPython.ORDER_LOGICAL_NOT = 12;       // not\nPython.ORDER_LOGICAL_AND = 13;       // and\nPython.ORDER_LOGICAL_OR = 14;        // or\nPython.ORDER_CONDITIONAL = 15;       // if else\nPython.ORDER_LAMBDA = 16;            // lambda\nPython.ORDER_NONE = 99;              // (...)\n/**/\n//\n//const notImplementedMsg = 'Not implemented at this Kernel';\nexport function getPythonFunctions(generator) {\n    var funcs = {};\n    funcs['math_change'] = function (block) {\n        // Add to a variable in place.\n        generator.definitions_['from_numbers_import_Number'] = 'from numbers import Number';\n        const argument0 = generator.valueToCode(block, 'DELTA', Python.ORDER_ADDITIVE) || '0';\n        const varName = generator.getVariableName(block.getFieldValue('VAR'));\n        return (varName + ' = ' + varName + ' + ' + argument0 + '\\n');\n    };\n    //\n    funcs['text_nocrlf_print'] = function (block) {\n        const msg = generator.valueToCode(block, 'TEXT', Python.ORDER_NONE) || \"''\";\n        return 'print(' + msg + ', end = \"\")\\n';\n    };\n    //\n    funcs['color_hsv2rgb'] = function (block) {\n        let hh = generator.valueToCode(block, 'H', Python.ORDER_NONE) || \"0\";\n        let ss = generator.valueToCode(block, 'S', Python.ORDER_NONE) || \"0.45\";\n        let vv = generator.valueToCode(block, 'V', Python.ORDER_NONE) || \"0.65\";\n        hh = hh % 360;\n        if (hh < 0.0)\n            hh = hh + 360;\n        if (ss < 0.0)\n            ss = 0.0;\n        else if (ss > 1.0)\n            ss = 1.0;\n        if (vv < 0.0)\n            vv = 0.0;\n        else if (vv > 1.0)\n            vv = 1.0;\n        let aa = vv;\n        let bb = vv - vv * ss;\n        let rc = 0;\n        let gc = 0;\n        let bc = 0;\n        //\n        if (hh >= 0 && hh < 60) {\n            rc = aa;\n            gc = (hh / 60) * (aa - bb) + bb;\n            bc = bb;\n        }\n        else if (hh >= 60 && hh < 120) {\n            rc = (120 - hh) / 60 * (aa - bb) + bb;\n            gc = aa;\n            bc = bb;\n        }\n        else if (hh >= 120 && hh < 180) {\n            rc = bb;\n            gc = aa;\n            bc = (hh - 120) / 60 * (aa - bb) + bb;\n        }\n        else if (hh >= 180 && hh < 240) {\n            rc = bb;\n            gc = (240 - hh) / 60 * (aa - bb) + bb;\n            bc = aa;\n        }\n        else if (hh >= 240 && hh < 300) {\n            rc = (hh - 240) / 60 * (aa - bb) + bb;\n            gc = bb;\n            bc = aa;\n        }\n        else { // hh>=300 and hh<360\n            rc = aa;\n            gc = bb;\n            bc = (360 - hh) / 50 * (aa - bb) + bb;\n        }\n        //\n        rc = Math.trunc(rc * 255);\n        gc = Math.trunc(gc * 255);\n        bc = Math.trunc(bc * 255);\n        //\n        const rgb = '#' + rc.toString(16) + gc.toString(16) + bc.toString(16);\n        const code = Python.quote_(rgb);\n        return [code, Python.ORDER_FUNCTION_CALL];\n    };\n    //\n    return funcs;\n}\n//# sourceMappingURL=func.js.map","//\nimport { javascriptGenerator as Js } from 'blockly/javascript';\n//const notImplementedMsg = 'Not implemented at this Kernel';\nexport function getJsFunctions(generator) {\n    var funcs = {};\n    //\n    funcs['text_print'] = function (block) {\n        const msg = generator.valueToCode(block, 'TEXT', Js.ORDER_NONE) || \"''\";\n        return 'console.log(' + msg + ');\\n';\n    };\n    //\n    funcs['text_nocrlf_print'] = function (block) {\n        const msg = generator.valueToCode(block, 'TEXT', Js.ORDER_NONE) || \"''\";\n        return 'process.stdout.write(' + msg + ');\\n';\n    };\n    //\n    return funcs;\n}\n//# sourceMappingURL=func.js.map","//\nimport { phpGenerator as PHP } from 'blockly/php';\nexport function getPHPFunctions(generator) {\n    var funcs = {};\n    //\n    funcs['text_nocrlf_print'] = function (block) {\n        const msg = generator.valueToCode(block, 'TEXT', PHP.ORDER_NONE) || \"''\";\n        return 'print(' + msg + ');\\n';\n    };\n    //\n    return funcs;\n}\n//# sourceMappingURL=func.js.map","//\nimport { luaGenerator as Lua } from 'blockly/lua';\n//\nexport function getLuaFunctions(generator) {\n    var funcs = {};\n    //\n    funcs['text_nocrlf_print'] = function (block) {\n        const msg = generator.valueToCode(block, 'TEXT', Lua.ORDER_NONE) || \"''\";\n        return 'io.write' + msg + '\\n';\n    };\n    //\n    return funcs;\n}\n//# sourceMappingURL=func.js.map","//\nimport { dartGenerator as Dart } from 'blockly/dart';\n//\nexport function getDartFunctions(generator) {\n    var funcs = {};\n    //\n    funcs['text_nocrlf_print'] = function (block) {\n        const msg = generator.valueToCode(block, 'TEXT', Dart.ORDER_NONE) || \"''\";\n        return 'stdout.write(' + msg + ');\\n';\n    };\n    //\n    return funcs;\n}\n//# sourceMappingURL=func.js.map","var map = {\n\t\"./En.js\": [\n\t\t695,\n\t\t695\n\t],\n\t\"./Jp.js\": [\n\t\t534,\n\t\t534\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(() => {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 4815;\nmodule.exports = webpackAsyncContext;"],"names":["TOOLBOX","constructor","add","a","b","num","kind","c","contents","Array","a_len","length","b_len","i","name","colour","type","blockxml","custom","id","autoStart","requires","IBlocklyRegistry","ITranslator","activate","app","register","translator","console","log","bregister","language","catch","trans","nullTranslator","load","registerToolbox","__","generator","fpython","generators","get","funcs","block","definitions_","argument0","valueToCode","ORDER_ADDITIVE","varName","getVariableName","getFieldValue","ORDER_NONE","hh","ss","vv","bb","rc","gc","bc","Math","trunc","rgb","toString","quote_","ORDER_FUNCTION_CALL","fjavascript","getJsFunctions","fphp","getPHPFunctions","flua","getLuaFunctions","fdart","getDartFunctions","registerCodes","map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","keys","Object","module","exports"],"sourceRoot":""}