import typing
from typing import IO, Any, Callable, Iterable, Optional, Union

from iopath.common.file_io import PathHandler, PathManager

from unicore.utils.iopathlib import IoPath

_manager: PathManager

class Path(IoPath): ...

def opent(path: str, mode: str = "r", buffering: int = 32, **kwargs: Any) -> Iterable[Any]: ...
def open(path: str, mode: str = "r", buffering: int = -1, **kwargs: Any) -> Union[IO[str], IO[bytes]]: ...
def opena(
    self,
    path: str,
    mode: str = "r",
    buffering: int = -1,
    callback_after_file_close: Optional[Callable[[None], None]] = None,
    **kwargs: Any,
) -> Union[IO[str], IO[bytes]]: ...
def async_join(*paths: str, **kwargs: Any) -> bool: ...
def async_close(**kwargs: Any) -> bool: ...
def copy(src_path: str, dst_path: str, overwrite: bool = False, **kwargs: Any) -> bool: ...
def mv(src_path: str, dst_path: str, **kwargs: Any) -> bool: ...
def get_local_path(path: str, force: bool = False, **kwargs: Any) -> str: ...
def copy_from_local(local_path: str, dst_path: str, overwrite: bool = False, **kwargs: Any) -> None: ...
def exists(path: str, **kwargs: Any) -> bool: ...
def isfile(path: str, **kwargs: Any) -> bool: ...
def isdir(path: str, **kwargs: Any) -> bool: ...
def ls(path: str, **kwargs: Any) -> list[str]: ...
def mkdirs(path: str, **kwargs: Any) -> None: ...
def rm(path: str, **kwargs: Any) -> None: ...
def symlink(src_path: str, dst_path: str, **kwargs: Any) -> bool: ...
def set_cwd(path: Union[str, None], **kwargs: Any) -> bool: ...
def register_handler(handler: PathHandler, allow_override: bool = True) -> None: ...
def set_strict_kwargs_checking(enable: bool) -> None: ...
def set_logging(enable_logging=True) -> None: ...

_Params = typing.ParamSpec("_Params")
_Return = typing.TypeVar("_Return")
_PathCallable: typing.TypeAlias = typing.Callable[typing.Concatenate[str, _Params], _Return]

@typing.overload
def with_local_path(
    fn: _PathCallable,
    manager: PathManager = ...,
    /,
    **get_local_path_kwargs: typing.Any,
) -> _PathCallable: ...
@typing.overload
def with_local_path(
    fn=None,
    manager: PathManager = ...,
    /,
    **get_local_path_kwargs: typing.Any,
) -> Callable[[_PathCallable], _PathCallable]: ...
def with_local_path(
    fn: _PathCallable | None = None,
    manager: PathManager = ...,
    /,
    **get_local_path_kwargs: typing.Any,
) -> _PathCallable | Callable[[_PathCallable], _PathCallable]: ...
