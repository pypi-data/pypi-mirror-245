{"version":3,"file":"async-DvUiComponents.js","mappings":"2LAUMA,EAAiB,SAACC,GACpB,IAAOC,EAA8BD,EAA9BC,GAAIC,EAA0BF,EAA1BE,MAAOC,EAAmBH,EAAnBG,SAAUC,EAASJ,EAATI,MAE5B,OACIC,IAAAA,cAAA,OAAKJ,GAAIA,GAAI,qBACUC,EAAM,IACzBG,IAAAA,cAAA,SACID,MAAOA,EACPE,SAUI,SAAAC,GAAC,OAAIJ,EAAS,CAAEC,MAAOG,EAAEC,OAAOJ,OAAQ,IAK5D,EAEAL,EAAeU,aAAe,CAAC,EAE/BV,EAAeW,UAAY,CAIvBT,GAAIU,IAAAA,OAKJT,MAAOS,IAAAA,OAAiBC,WAKxBR,MAAOO,IAAAA,OAMPR,SAAUQ,IAAAA,MAGd,S,4vFC1CA,IAAME,EAAW,SAACb,GACd,IACIC,EAiBAD,EAjBAC,GACAa,EAgBAd,EAhBAc,UACAC,EAeAf,EAfAe,MACAC,EAcAhB,EAdAgB,WACAC,EAaAjB,EAbAiB,QACAC,EAYAlB,EAZAkB,gBACAC,EAWAnB,EAXAmB,YACAC,EAUApB,EAVAoB,KACAC,EASArB,EATAqB,SACAC,EAQAtB,EARAsB,UACAC,EAOAvB,EAPAuB,SACAC,EAMAxB,EANAwB,KACAC,EAKAzB,EALAyB,mBACAC,EAIA1B,EAJA0B,eACAC,EAGA3B,EAHA2B,eACAxB,EAEAH,EAFAG,SACAyB,EACA5B,EADA4B,cAGAC,EAAgBH,EACfZ,IACDA,EAAY,IAEhBA,EAAY,CAACA,EAAW,aAAagB,KAAK,KAG1C,IAAIC,EAAOd,GACNA,GAAWC,EAAgBc,OAAS,IACrCD,EAAOb,EAAgBe,KAAI,SAACC,EAAGC,GAC3B,MAAO,CACHC,UAAWF,EACXG,IAAKH,EACLI,MAAOJ,EAEf,IACAd,EAAOA,EAAKa,KAAI,SAACM,EAAQC,GACrB,OAAOC,EAAEC,KAAKH,EAAQrB,EAC1B,KAIJ,IAAK,IAAIiB,EAAI,EAAGA,EAAIf,EAAKY,OAAQG,IACxBf,EAAKe,GAAGQ,eAAe,SACxBvB,EAAKe,GAAQ,IAAIS,OAAOT,IAIhC,IAAgDU,EAAAC,GAAZC,EAAAA,EAAAA,UAAS,IAAG,GAA7BC,GAAFH,EAAA,GAAeA,EAAA,IACwBI,EAAAH,GAAZC,EAAAA,EAAAA,UAAS,IAAG,GAAjCG,GAAFD,EAAA,GAAmBA,EAAA,IAGvCE,EAAAL,GAFqCC,EAAAA,EAAAA,UAClC/B,EAAaI,EAAKgC,MAAM,EAAGpC,EAAWqC,iBAAmBjC,GAC5D,GAFMkC,EAAWH,EAAA,GAAEI,EAAcJ,EAAA,GAK5BK,EAAc,SAACC,GACjB,IAAIC,EAAW,CAAC,EAMhB,OALAC,OAAOC,QAAQH,GAAKxB,KAAI,SAAA4B,GAAY,IAAAC,EAAAhB,EAAAe,EAAA,GAAVE,EAACD,EAAA,GAAEE,EAACF,EAAA,IACrBG,EAAAA,EAAAA,aAAYD,IAAY,OAANA,IACnBN,EAASK,GAAKC,EAEtB,IACON,CACX,EACMQ,EAAe,SAACC,EAAcC,EAAShC,GACzCgC,IACApB,EAAcmB,EAAa,IAC3BjB,EAAkBd,EACtB,EA4HA,GAAIjB,GAAeD,EAAgBc,OAAS,EAAG,CAC3CD,EAAOA,EAAKE,KAAI,SAACC,EAAGC,GAOhB,OANIhB,EAAYe,EAAEE,aACdF,EAACmC,EAAAA,EAAA,GAAOnC,GAAMf,EAAYe,EAAEE,aAE3BF,EAAEpB,YACHoB,EAAEpB,UAAYoB,EAAEE,WAEbF,CACX,IAEA,IADA,IAAAoC,EAAA,WAEI,IA/HsBlC,EA+HhBmC,EAAMxC,EAAKI,GAAGC,UACpB,GAAIjB,EAAYoD,GAAM,CAClB,GAAIpD,EAAYoD,GAAKC,SAAU,CAC3B,IAAIC,EAAU,GACVtD,EAAYoD,GAAKG,aACjBD,EAAUtD,EAAYoD,GAAKG,YAE/B,IAAMC,EAhEF,SAACvD,EAAMmD,EAAKK,GAC5B,IAAIC,EAAS,GACTD,EAAQ5C,OAAS,EACjB6C,EAASzD,EAAKa,KAAI,SAACC,GACf,OAAIA,EAAEqC,GAAKO,QACA5C,EAAEqC,GAAKO,QAEP5C,EAAEqC,EAEjB,KAEAK,EAAQG,KAAKR,GACbM,EAASzD,EAAKa,KAAI,SAACC,GACf,OAAO0C,EACF3C,KAAI,SAAC+C,GACF,OAAI9C,EAAE8C,GAAMF,QACD5C,EAAE8C,GAAMF,QAER5C,EAAE8C,EAEjB,IACClD,KAAK,GACd,KAKJ,IAFA,IAAI6C,EAAc,CAAC,EACfxC,EAAI,EACDA,EAAI0C,EAAO7C,QAAQ,CAGtB,IAFA,IAAIiD,EAAO,EACPC,EAAI,EACD/C,EAAI+C,EAAIL,EAAO7C,QACd6C,EAAO1C,EAAI+C,KAAOL,EAAO1C,IACzBwC,EAAYxC,EAAI+C,GAAK,EACrBD,GAAQ,EACRC,GAAK,EAKbP,EAAYxC,GAAK8C,EACjB9C,GAAK+C,CACT,CACA,OAAOP,CACX,CAqBoCQ,CAAY7B,EAAaiB,EAAKE,GAClD1C,EAAKI,GAAGiD,OAAS,SAAC3C,EAAGD,GACjB,MAAO,CAAC6C,QAASV,EAAYnC,GACjC,CACJ,CAGA,GAAIT,EAAKI,GAAY,QAAG,CACpB,IAAIG,EAAQP,EAAKI,GAAGE,IAChBiD,EAAa,aACbvD,EAAKI,GAAGG,QACRA,EAAQP,EAAKI,GAAGG,OAEhBP,EAAKI,GAAGrB,YACRwE,EAAa,CACTvD,EAAKI,GAAGrB,UAAUyE,WAClBD,GACFxD,KAAK,MAEXC,EAAKI,GAAc,UAAImD,EACvBvD,EAAKI,GAAU,MAAI,kBACf9B,IAAAA,cAAA,QAAMS,UAAU,mBAAmBwB,EAAa,CAExD,CAsQA,GAnQoC,SAAhCnB,EAAYoD,GAAKiB,WACjBzD,EAAKI,GAAW,OAAI,SAAC2C,GACjB,OAAIA,EAAQW,KAEJpF,IAAAA,cAAA,KACIoF,KACIX,EAAQY,cACFC,EACAb,EAAQW,KAElBjF,OACIsE,EAAQtE,OACFsE,EAAQtE,OACR,SAEVkF,SAAUZ,EAAQY,UAEjBZ,EAAQA,SAGVA,EAAQA,QACRA,EAAQA,QAER,GAEf,EAEuC,QAAhC3D,EAAYoD,GAAKiB,WACxBzD,EAAKI,GAAW,OAAI,SAAC2C,GACjB,GAAIA,EAAS,CACT,IAAIc,EAAYd,EAAQ/D,MAUxB,OATI+D,EAAQe,YACRD,EAASvB,EAAAA,EAAA,GACFuB,GACA,CACCE,MAAO,OACPC,OAAQ,UAKhB1F,IAAAA,cAAC2F,EAAAA,EAAG,CACAC,MAAOnB,EAAQmB,MACflF,MAAO6E,EACPvE,UACIyD,EAAQzD,UACFyD,EAAQzD,UAIjByD,EAAQW,KACLpF,IAAAA,cAAA,KAAGoF,KAAMX,EAAQW,KAAMjF,OAAO,UACzBsE,EAAQA,SAGbA,EAAQA,QAIxB,CACI,MAAO,GAEf,EACuC,SAAhC3D,EAAYoD,GAAKiB,WACxBzD,EAAKI,GAAW,OAAI,SAAC2C,GAEjB,GADAoB,QAAQC,IAAI,EAAGrB,GACXA,EAAQsB,KAER,OADAF,QAAQC,IAAI,EAAGrB,EAAQsB,MAChBtB,EAAQsB,KAAKnE,KAAI,SAACoE,GACrB,IAAIT,EAAYS,EAAItF,MAQpB,OAPIsF,EAAIR,YACJD,EAASvB,EAAAA,EAAA,GACFuB,GAAS,IACZE,MAAO,OACPC,OAAQ,UAIZ1F,IAAAA,cAAC2F,EAAAA,EAAG,CACAC,MAAOI,EAAIJ,MACXlF,MAAO6E,EACPvE,UACIgF,EAAIhF,UAAWgF,EAAIhF,UAGtBgF,EAAIZ,KACDpF,IAAAA,cAAA,KAAGoF,KAAMY,EAAIZ,KAAMjF,OAAO,UACrB6F,EAAIvB,SAGTuB,EAAIvB,QAIpB,GAER,EACuC,UAAhC3D,EAAYoD,GAAKiB,YACnB1E,EAAUwF,SAAS,kBACpBxF,EAAY,CAACA,EAAW,gBAAgBgB,KAAK,MAEjDC,EAAKI,GAAW,OAAI,SAAC2C,GACjB,OAAIA,EAAQyB,IAEJlG,IAAAA,cAAA,OACIkG,IAAKzB,EAAQyB,IACbxF,MAAO+D,EAAQ/D,QAIhB,EAEf,GACuC,gBAAhCI,EAAYoD,GAAKiB,YACnB1E,EAAUwF,SAAS,sBACpBxF,EAAY,CAACA,EAAW,oBAAoBgB,KAAK,MAErDC,EAAKI,GAAW,OAAI,SAAC2C,GACjB,OAAIA,EAEIzE,IAAAA,cAAA,OACIU,MAAO+D,EAAQ/D,MACfD,UAAWgE,EAAQhE,WAElBgE,EAAQA,SAIV,EAEf,GACuC,aAAhC3D,EAAYoD,GAAKiB,YACnB1E,EAAUwF,SAAS,wBACpBxF,EAAY,CAACA,EAAW,sBAAsBgB,KAAK,MAEvDC,EAAKI,GAAW,OAAI,SAAC2C,GACjB,GAAIA,EAAS,CACT,IAAI0B,GAAU,EACV9E,IACA8E,EAAU9E,EAAe4E,SAASxB,EAAQ7E,KAE9C,IAAIwG,EAAgB3B,EAAQhE,UACtBgE,EAAQhE,UACR,GAKN,OAJA2F,EAAgB,CACZ,eACAA,GACF3E,KAAK,KAEHzB,IAAAA,cAACqG,EAAAA,EAAQ,CACLtG,MAAO0E,EAAQ7E,GACf0G,eAAgBH,EAChB1F,UAAW2F,EACXf,WACIZ,EAAQY,UACFZ,EAAQY,SAGlBpF,SAAU,SAACC,GAEHsB,EADAtB,EAAEC,OAAOgG,QACO,GAAHI,OAAAC,EACNhF,GAAa,CAChBtB,EAAEC,OAAOJ,QAITyB,EAAciF,QACV,SAACrD,GAAG,OACAA,IAAQlD,EAAEC,OAAOJ,KAAK,IAGtC2G,YAAW,WACP5G,EAAS,CACLuB,eAAgBG,GAExB,GAAG,IACP,GAECiD,EAAQA,QAGrB,CACI,MAAO,EAEf,GACuC,kBAAhC3D,EAAYoD,GAAKiB,YACnB1E,EAAUwF,SAAS,oBACpBxF,EAAY,CAACA,EAAW,kBAAkBgB,KAAK,MAEnDC,EAAKI,GAAW,OAAI,SAAC2C,GACjB,GAAIA,EAAS,CACT,IAAI0B,GAAU,EACV9E,IACA8E,EAAU9E,EAAe4E,SAASxB,EAAQ7E,KAE9C,IAAI+G,EAAgBlC,EAAQmC,KACtBnC,EAAQmC,KAAKnG,UACb,GAIN,OAHAkG,EAAgB,CAAC,WAAYA,GAAelF,KACxC,KAGAzB,IAAAA,cAACqG,EAAAA,EAAQ,CACLtG,MAAO0E,EAAQ7E,GACf0G,eAAgBH,EAChBd,WACIZ,EAAQY,UACFZ,EAAQY,SAGlB5E,UAAW,oBACXR,SAAU,SAACC,GAEHsB,EADAtB,EAAEC,OAAOgG,QACO,GAAHI,OAAAC,EACNhF,GAAa,CAChBtB,EAAEC,OAAOJ,QAITyB,EAAciF,QACV,SAACrD,GAAG,OACAA,IAAQlD,EAAEC,OAAOJ,KAAK,IAGtC2G,YAAW,WACP5G,EAAS,CACLuB,eAAgBG,GAExB,GAAG,IACP,GAEAxB,IAAAA,cAAC6G,EAAAA,EAAO,CACJD,KAAMnC,EAAQmC,KAAKA,KACnBnG,UAAWkG,EACXjG,MAAO+D,EAAQmC,KAAKlG,QAIpC,CACI,MAAO,EAEf,GACuC,aAAhCI,EAAYoD,GAAKiB,aACxBzD,EAAKI,GAAGgF,SAAW,CAACC,WAAW,GAC/BrF,EAAKI,GAAW,OAAI,SAAC2C,GACjB,IAAIuC,EAAOvC,EACX,OAAIuC,EAAKrF,OAASL,GACd0F,EAAOA,EAAKjE,MAAM,EAAGzB,EAAiB,GAAK,MAEvCtB,IAAAA,cAACiH,EAAAA,EAAO,CAACC,UAAU,UAAUjF,MAAOwC,GAC/BuC,IAIFvC,CAEf,GAGA3D,EAAYoD,GAAKuC,OAAQ,CAEzB,GADA/E,EAAKI,GAAiB,cAAI,EACrBhB,EAAYoD,GAAKiD,QAiBlBzF,EAAKI,GAAY,QAAIhB,EAAYoD,GAAKiD,YAjBX,CAC3B,IAAIC,EAAe,IAEfA,GADAxD,EAAAA,EAAAA,aAAY9C,EAAYoD,GAAKiB,YACjBqB,EACL,IAAIa,IAAItG,EAAKa,KAAI,SAACC,GAAC,OAAKA,EAAEqC,EAAI,MAGzBsC,EACL,IAAIa,IAAItG,EAAKa,KAAI,SAACC,GAAC,OAAKA,EAAEqC,GAAKO,OAAO,OAGpC6C,OACb5F,EAAKI,GAAY,QAAIsF,EAAaxF,KAAI,SAACC,GAAC,MAAM,CAC1CmF,KAAMnF,EACN9B,MAAO8B,EACV,GACL,CAGAH,EAAKI,GAAa,SAAI,SAAC/B,EAAOmC,GAAW,IAAAqF,EAOrC,OALe,QAAfA,EAAIrF,EAAOgC,UAAI,IAAAqD,GAAXA,EAAa9C,QACHvC,EAAOgC,GAAKO,SAAW1E,EAEvBmC,EAAOgC,IAAQnE,CAGjC,CACJ,CAEIe,EAAYoD,GAAKsD,SACjB9F,EAAKI,GAAEkC,EAAAA,EAAA,GACAtC,EAAKI,KArcEC,EAsccmC,EAtcC,CACzCuD,eAAgB,SAAAC,GAAA,IACZC,EAAeD,EAAfC,gBACA7D,EAAY4D,EAAZ5D,aACAC,EAAO2D,EAAP3D,QACA6D,EAAYF,EAAZE,aAAY,OAEZ5H,IAAAA,cAAA,OAAKU,MAAO,CAACmH,QAAS,GAAIC,UAAW,SAAC5H,GAAC,OAAKA,EAAE6H,iBAAiB,GAC3D/H,IAAAA,cAACgI,EAAAA,EACG,CACAjI,MAAO+D,EAAa,GACpB7D,SAAU,SAACC,GAAC,OACRyH,EAAgBzH,EAAEC,OAAOJ,MAAQ,CAACG,EAAEC,OAAOJ,OAAS,GAAG,EAE3DkI,aAAc,kBACVpE,EAAaC,EAAcC,EAAShC,EAAU,EAElDrB,MAAO,CAACwH,aAAc,EAAGC,QAAS,WAEtCnI,IAAAA,cAACoI,EAAAA,EAAK,KACFpI,IAAAA,cAACqI,EAAAA,GAAM,CACHC,KAAK,UACLC,QAAS,kBACL1E,EAAaC,EAAcC,EAAShC,EAAU,EAElD6E,KAAM5G,IAAAA,cAACwI,EAAAA,EAAc,MACrBrH,KAAK,QACLT,MAAO,CAAC+E,MAAO,KAClB,UAGDzF,IAAAA,cAACqI,EAAAA,GAAM,CACHE,QAAS,kBACLX,GAxCJ,SAACA,EAAc7D,EAAShC,GACxC6F,IACAjF,EAAc,IACdoB,IACAlB,EAAkBd,EACtB,CAoCwB0G,CAAYb,EAAc7D,EAAShC,EAAU,EAEjDZ,KAAK,QACLT,MAAO,CAAC+E,MAAO,KAClB,UAIH,EAEViD,WAAY,SAACC,GAAQ,OACjB3I,IAAAA,cAACwI,EAAAA,EAAc,CACX9H,MAAO,CAACkF,MAAO+C,EAAW,gBAAarD,IACzC,EAENsD,SAAU,SAAC7I,EAAOmC,GAAW,IAAA2G,EACzB,OAAqB,QAArBA,EAAI3G,EAAOH,UAAU,IAAA8G,GAAjBA,EAAmBpE,QACZvC,EAAOH,GAAW0C,QACpBS,WACA4D,cACA7C,SAASlG,EAAM+I,eAEb5G,EAAOH,GACTmD,WACA4D,cACA7C,SAASlG,EAAM+I,cAE5B,KA4YI,CACJ,EA5UShH,EAAI,EAAGA,EAAIJ,EAAKC,OAAQG,IAAGmC,IA8UhC7C,IACAM,EAAOA,EAAKE,KAAI,SAACmH,GACb,OAAA/E,EAAAA,EAAA,GACO+E,GAAI,IACPC,iBAAkB,SAAC9G,EAAQ+G,GACvB,QAAIC,EAAAA,EAAAA,SAAQhH,EAAQ+G,EAIxB,GAER,IAER,CAiBA,OAfItI,IACIA,EAAWwI,WACXxI,EAAUqD,EAAAA,EAAA,GACHrD,GAAU,IACbwI,SAAU,CAACxI,EAAWwI,aAG1BxI,EAAWyI,YACXzI,EAAUqD,EAAAA,EAAA,GACHrD,GAAU,IACbyI,UAAW,SAACC,GAAK,eAAA9C,OAAc8C,EAAK,eAM5CrJ,IAAAA,cAACsJ,EAAAA,EAAK,CACF1J,GAAIA,EACJa,WACI8I,EAAAA,EAAAA,UAAS9I,GACHA,EACAA,GACA+I,EAAAA,EAAAA,GAAO/I,QACP6E,EAEV5E,MAAOA,EACPM,SAAUA,EACVyI,WAAY1I,EACZH,QAASc,EACTX,KAAMA,EACNI,KAAMA,EACNlB,SAAU,SAACyJ,EAAMvC,EAASwC,EAAQC,GAC9B,IAAIC,EAAe9I,EAsCnB,GArCA2I,EAAOvG,EAAYuG,GACnBvC,EAAUhE,EAAYgE,GAGlB7D,OAAOwG,KAAK3C,GAASxF,OAAS,GAC9B2B,OAAOC,QAAQ4D,GAASvF,KAAI,SAAAmI,GAAgB,IAAAC,EAAAvH,EAAAsH,EAAA,GAAd7F,EAAG8F,EAAA,GAAEC,EAAGD,EAAA,IAC7BpG,EAAAA,EAAAA,aAAYqG,KACbJ,EAAeA,EAAapD,QAAO,SAACvE,GAEhC,IAAgC,IAA5BpB,EAAYoD,GAAKsD,OAAiB,CAClC,IAAI0C,EAAcD,EAAI,GAAGnB,cAWzB,OATI5G,EAAOgC,GAAKO,QACRvC,EAAOgC,GAAKO,QACXS,WACA4D,cAED5G,EAAOgC,GACNgB,WACA4D,eAEA7C,SAASiE,EACtB,CAAO,GAA+B,GAA3BpJ,EAAYoD,GAAKuC,OACxB,OAAIvE,EAAOgC,GAAKO,QACLwF,EAAIhE,SACP/D,EAAOgC,GAAKO,SAGTwF,EAAIhE,SAAS/D,EAAOgC,GAGvC,IAER,IAIAZ,OAAOwG,KAAKJ,GAAM/H,OAAS,EAAG,CAC9B,IAAMwI,EAAaT,EAAKU,QAClBC,EAAWX,EAAKW,SACtBR,EAAeA,EAAa9G,OACvBoH,EAAa,GAAKE,EACnBF,EAAaE,EAErB,CACAnH,EAAe2G,EACnB,EACAS,OAAQ,CACJC,EAAGrJ,EACHsJ,EAAGvJ,EACHwJ,0BAA0B,GAE9B9J,WAAYA,EACZ,uBACKY,GAAiBA,EAAcmJ,iBAAepF,GAI/D,EAEA9E,EAASJ,aAAeA,EAAAA,GACxBI,EAASH,UAAYA,EAAAA,GACrB,S","sources":["webpack:///./src/lib/fragments/DvUiComponents.react.js","webpack:///./src/lib/fragments/DvpTable.react.js"],"sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * ExampleComponent is an example component.\n * It takes a property, `label`, and\n * displays it.\n * It renders an input with the property `value`\n * which is editable by the user.\n */\nconst DvUiComponents = (props) => {\n    const {id, label, setProps, value} = props;\n\n    return (\n        <div id={id}>\n            ExampleComponent: {label}&nbsp;\n            <input\n                value={value}\n                onChange={\n                    /*\n                        * Send the new value to the parent component.\n                        * setProps is a prop that is automatically supplied\n                        * by dash's front-end (\"dash-renderer\").\n                        * In a Dash app, this will update the component's\n                        * props and send the data back to the Python Dash\n                        * app server if a callback uses the modified prop as\n                        * Input or State.\n                        */\n                    e => setProps({ value: e.target.value })\n                }\n            />\n        </div>\n    );\n}\n\nDvUiComponents.defaultProps = {};\n\nDvUiComponents.propTypes = {\n    /**\n     * The ID used to identify this component in Dash callbacks.\n     */\n    id: PropTypes.string,\n\n    /**\n     * A label that will be printed when this component is rendered.\n     */\n    label: PropTypes.string.isRequired,\n\n    /**\n     * The value displayed in the input.\n     */\n    value: PropTypes.string,\n\n    /**\n     * Dash-assigned callback that should be called to report property changes\n     * to Dash, to make them available for callbacks.\n     */\n    setProps: PropTypes.func\n};\n\nexport default DvUiComponents;\n","import React, {useState, useRef, useEffect} from 'react';\nimport {defaultProps, propTypes} from '../components/Display/DvpTable.react';\nimport RawHTML from '../components/Utils/RawHTML.react';\nimport useCss from '../hooks/useCss';\nimport {isNumber, isEqual, isString, isUndefined, isArray} from 'lodash';\nimport {Space, Table, Button, Input, Checkbox, Tag, Radio, Tooltip} from 'antd';\nimport {\n    SearchOutlined,\n    QuestionCircleOutlined,\n    DownOutlined,\n    CheckCircleFilled,\n} from '@ant-design/icons';\nimport DvpIcon from '../components/General/DvpIcon.react';\n\n/**\n * An Ant Design Table component\n * See https://ant.design/components/table\n */\nconst DvpTable = (props) => {\n    let {\n        id,\n        className,\n        style,\n        pagination,\n        columns,\n        selectedColumns,\n        columnAttrs,\n        data,\n        bordered,\n        maxHeight,\n        maxWidth,\n        size,\n        cellUpdateOptimize,\n        selectedValues,\n        ellipsisMaxLen,\n        setProps,\n        loading_state,\n    } = props;\n    // default selected values\n    let checkedValues = selectedValues;\n    if (!className) {\n        className = '';\n    }\n    className = [className, 'dvp-table'].join(' ');\n\n    // sort columns\n    let cols = columns;\n    if (!columns && selectedColumns.length > 0) {\n        cols = selectedColumns.map((d, i) => {\n            return {\n                dataIndex: d,\n                key: d,\n                title: d,\n            };\n        });\n        data = data.map((record, index) => {\n            return _.pick(record, selectedColumns);\n        });\n    }\n\n    // set key for data\n    for (let i = 0; i < data.length; i++) {\n        if (!data[i].hasOwnProperty('key')) {\n            data[i]['key'] = Number(i);\n        }\n    }\n\n    const [searchText, setSearchText] = useState('');\n    const [searchedColumn, setSearchedColumn] = useState('');\n    const [displayData, setDisplayData] = useState(\n        pagination ? data.slice(0, pagination.defaultPageSize) : data\n    );\n\n    // some functions\n    const filterObjNa = (obj) => {\n        let new_dict = {};\n        Object.entries(obj).map(([k, v]) => {\n            if (!isUndefined(v) && v !== null) {\n                new_dict[k] = v;\n            }\n        });\n        return new_dict;\n    };\n    const handleSearch = (selectedKeys, confirm, dataIndex) => {\n        confirm();\n        setSearchText(selectedKeys[0]);\n        setSearchedColumn(dataIndex);\n    };\n\n    const handleReset = (clearFilters, confirm, dataIndex) => {\n        clearFilters();\n        setSearchText('');\n        confirm();\n        setSearchedColumn(dataIndex);\n    };\n\n    const getColumnSearchProps = (dataIndex) => ({\n        filterDropdown: ({\n            setSelectedKeys,\n            selectedKeys,\n            confirm,\n            clearFilters,\n        }) => (\n            <div style={{padding: 8}} onKeyDown={(e) => e.stopPropagation()}>\n                <Input\n                    // ref={node => {searchInput = node}}\n                    value={selectedKeys[0]}\n                    onChange={(e) =>\n                        setSelectedKeys(e.target.value ? [e.target.value] : [])\n                    }\n                    onPressEnter={() =>\n                        handleSearch(selectedKeys, confirm, dataIndex)\n                    }\n                    style={{marginBottom: 8, display: 'block'}}\n                />\n                <Space>\n                    <Button\n                        type=\"primary\"\n                        onClick={() =>\n                            handleSearch(selectedKeys, confirm, dataIndex)\n                        }\n                        icon={<SearchOutlined />}\n                        size=\"small\"\n                        style={{width: 90}}\n                    >\n                        Search\n                    </Button>\n                    <Button\n                        onClick={() =>\n                            clearFilters &&\n                            handleReset(clearFilters, confirm, dataIndex)\n                        }\n                        size=\"small\"\n                        style={{width: 90}}\n                    >\n                        Reset\n                    </Button>\n                </Space>\n            </div>\n        ),\n        filterIcon: (filtered) => (\n            <SearchOutlined\n                style={{color: filtered ? '##6366f1' : undefined}}\n            />\n        ),\n        onFilter: (value, record) => {\n            if (record[dataIndex]?.content) {\n                return record[dataIndex].content\n                    .toString()\n                    .toLowerCase()\n                    .includes(value.toLowerCase());\n            } else {\n                return record[dataIndex]\n                    .toString()\n                    .toLowerCase()\n                    .includes(value.toLowerCase());\n            }\n        },\n        // onFilterDropdownOpenChange: (visible) => {\n        //     if (visible) {\n        //         setTimeout(() => searchInput.current?.select(), 100);\n        //     }\n        // },\n    });\n\n    // handle rowspan\n    const sortRowSpan = (data, col, groupBy) => {\n        let values = [];\n        if (groupBy.length < 1) {\n            values = data.map((d) => {\n                if (d[col].content) {\n                    return d[col].content;\n                } else {\n                    return d[col];\n                }\n            });\n        } else {\n            groupBy.push(col);\n            values = data.map((d) => {\n                return groupBy\n                    .map((col_) => {\n                        if (d[col_].content) {\n                            return d[col_].content;\n                        } else {\n                            return d[col_];\n                        }\n                    })\n                    .join('');\n            });\n        }\n\n        let colRowSpans = {};\n        let i = 0;\n        while (i < values.length) {\n            let span = 1;\n            let j = 1;\n            while (i + j < values.length) {\n                if (values[i + j] === values[i]) {\n                    colRowSpans[i + j] = 0;\n                    span += 1;\n                    j += 1;\n                } else {\n                    break;\n                }\n            }\n            colRowSpans[i] = span;\n            i += j;\n        }\n        return colRowSpans;\n    };\n\n    if (columnAttrs && selectedColumns.length > 0) {\n        cols = cols.map((d, i) => {\n            if (columnAttrs[d.dataIndex]) {\n                d = {...d, ...columnAttrs[d.dataIndex]};\n            }\n            if (!d.className) {\n                d.className = d.dataIndex;\n            }\n            return d;\n        });\n        // handle column rowspan\n        for (let i = 0; i < cols.length; i++) {\n            const col = cols[i].dataIndex;\n            if (columnAttrs[col]) {\n                if (columnAttrs[col].rowMerge) {\n                    let mergeBy = [];\n                    if (columnAttrs[col].rowMergeBy) {\n                        mergeBy = columnAttrs[col].rowMergeBy;\n                    }\n                    const colRowSpans = sortRowSpan(displayData, col, mergeBy);\n                    cols[i].onCell = (_, index) => {\n                        return {rowSpan: colRowSpans[index]};\n                    };\n                }\n\n                // roated column header\n                if (cols[i]['rotated']) {\n                    let title = cols[i].key;\n                    let class_name = 'rotated-th';\n                    if (cols[i].title) {\n                        title = cols[i].title;\n                    }\n                    if (cols[i].className) {\n                        class_name = [\n                            cols[i].className.toString(),\n                            class_name,\n                        ].join(' ');\n                    }\n                    cols[i]['className'] = class_name;\n                    cols[i]['title'] = () => (\n                        <span className=\"rotated-th-cell\">{title}</span>\n                    );\n                }\n\n                // link\n                if (columnAttrs[col].renderType === 'link') {\n                    cols[i]['render'] = (content) => {\n                        if (content.href) {\n                            return (\n                                <a\n                                    href={\n                                        content.disabled\n                                            ? undefined\n                                            : content.href\n                                    }\n                                    target={\n                                        content.target\n                                            ? content.target\n                                            : '_blank'\n                                    }\n                                    disabled={content.disabled}\n                                >\n                                    {content.content}\n                                </a>\n                            );\n                        } else if (content.content) {\n                            return content.content;\n                        } else {\n                            return ' ';\n                        }\n                    };\n                    // Tag\n                } else if (columnAttrs[col].renderType === 'tag') {\n                    cols[i]['render'] = (content) => {\n                        if (content) {\n                            var tag_style = content.style;\n                            if (content.fullwidth) {\n                                tag_style = {\n                                    ...tag_style,\n                                    ...{\n                                        width: '100%',\n                                        height: '100%',\n                                    },\n                                };\n                            }\n                            return (\n                                <Tag\n                                    color={content.color}\n                                    style={tag_style}\n                                    bordered={\n                                        content.bordered\n                                            ? content.bordered\n                                            : true\n                                    }\n                                >\n                                    {content.href ? (\n                                        <a href={content.href} target=\"_blank\">\n                                            {content.content}\n                                        </a>\n                                    ) : (\n                                        content.content\n                                    )}\n                                </Tag>\n                            );\n                        } else {\n                            return ' ';\n                        }\n                    };\n                } else if (columnAttrs[col].renderType === 'tags') {\n                    cols[i]['render'] = (content) => {\n                        console.log(1, content);\n                        if (content.tags) {\n                            console.log(2, content.tags);\n                            return content.tags.map((tag) => {\n                                var tag_style = tag.style;\n                                if (tag.fullwidth) {\n                                    tag_style = {\n                                        ...tag_style,\n                                        width: '100%',\n                                        height: '100%',\n                                    };\n                                }\n                                return (\n                                    <Tag\n                                        color={tag.color}\n                                        style={tag_style}\n                                        bordered={\n                                            tag.bordered ? tag.bordered : true\n                                        }\n                                    >\n                                        {tag.href ? (\n                                            <a href={tag.href} target=\"_blank\">\n                                                {tag.content}\n                                            </a>\n                                        ) : (\n                                            tag.content\n                                        )}\n                                    </Tag>\n                                );\n                            });\n                        }\n                    };\n                } else if (columnAttrs[col].renderType === 'image') {\n                    if (!className.includes('dvp-cell-img')) {\n                        className = [className, 'dvp-cell-img'].join(' ');\n                    }\n                    cols[i]['render'] = (content) => {\n                        if (content.src) {\n                            return (\n                                <img\n                                    src={content.src}\n                                    style={content.style}\n                                />\n                            );\n                        } else {\n                            return '';\n                        }\n                    };\n                } else if (columnAttrs[col].renderType === 'styled-cell') {\n                    if (!className.includes('dvp-styled-table')) {\n                        className = [className, 'dvp-styled-table'].join(' ');\n                    }\n                    cols[i]['render'] = (content) => {\n                        if (content) {\n                            return (\n                                <div\n                                    style={content.style}\n                                    className={content.className}\n                                >\n                                    {content.content}\n                                </div>\n                            );\n                        } else {\n                            return '';\n                        }\n                    };\n                } else if (columnAttrs[col].renderType === 'checkbox') {\n                    if (!className.includes('dvp-checkbox-table')) {\n                        className = [className, 'dvp-checkbox-table'].join(' ');\n                    }\n                    cols[i]['render'] = (content) => {\n                        if (content) {\n                            let checked = false;\n                            if (selectedValues) {\n                                checked = selectedValues.includes(content.id);\n                            }\n                            let cellClassName = content.className\n                                ? content.className\n                                : '';\n                            cellClassName = [\n                                'dvp-checkbox',\n                                cellClassName,\n                            ].join(' ');\n                            return (\n                                <Checkbox\n                                    value={content.id}\n                                    defaultChecked={checked}\n                                    className={cellClassName}\n                                    disabled={\n                                        content.disabled\n                                            ? content.disabled\n                                            : false\n                                    }\n                                    onChange={(e) => {\n                                        if (e.target.checked) {\n                                            checkedValues = [\n                                                ...checkedValues,\n                                                e.target.value,\n                                            ];\n                                        } else {\n                                            checkedValues =\n                                                checkedValues.filter(\n                                                    (obj) =>\n                                                        obj !== e.target.value\n                                                );\n                                        }\n                                        setTimeout(function () {\n                                            setProps({\n                                                selectedValues: checkedValues,\n                                            });\n                                        }, 200);\n                                    }}\n                                >\n                                    {content.content}\n                                </Checkbox>\n                            );\n                        } else {\n                            return '';\n                        }\n                    };\n                } else if (columnAttrs[col].renderType === 'checkbox-icon') {\n                    if (!className.includes('dvp-icon-table')) {\n                        className = [className, 'dvp-icon-table'].join(' ');\n                    }\n                    cols[i]['render'] = (content) => {\n                        if (content) {\n                            let checked = false;\n                            if (selectedValues) {\n                                checked = selectedValues.includes(content.id);\n                            }\n                            let iconClassName = content.icon\n                                ? content.icon.className\n                                : '';\n                            iconClassName = ['dvp-icon', iconClassName].join(\n                                ' '\n                            );\n                            return (\n                                <Checkbox\n                                    value={content.id}\n                                    defaultChecked={checked}\n                                    disabled={\n                                        content.disabled\n                                            ? content.disabled\n                                            : false\n                                    }\n                                    className={'dvp-icon-checkbox'}\n                                    onChange={(e) => {\n                                        if (e.target.checked) {\n                                            checkedValues = [\n                                                ...checkedValues,\n                                                e.target.value,\n                                            ];\n                                        } else {\n                                            checkedValues =\n                                                checkedValues.filter(\n                                                    (obj) =>\n                                                        obj !== e.target.value\n                                                );\n                                        }\n                                        setTimeout(function () {\n                                            setProps({\n                                                selectedValues: checkedValues,\n                                            });\n                                        }, 200);\n                                    }}\n                                >\n                                    <DvpIcon\n                                        icon={content.icon.icon}\n                                        className={iconClassName}\n                                        style={content.icon.style}\n                                    />\n                                </Checkbox>\n                            );\n                        } else {\n                            return '';\n                        }\n                    };\n                } else if (columnAttrs[col].renderType === 'ellipsis') {\n                    cols[i].ellipsis = {showTitle: true};\n                    cols[i]['render'] = (content) => {\n                        let text = content;\n                        if (text.length > ellipsisMaxLen) {\n                            text = text.slice(0, ellipsisMaxLen - 3) + '...';\n                            return (\n                                <Tooltip placement=\"topLeft\" title={content}>\n                                    {text}\n                                </Tooltip>\n                            );\n                        } else {\n                            return content;\n                        }\n                    };\n                }\n\n                if (columnAttrs[col].filter) {\n                    cols[i]['filterSearch'] = true;\n                    if (!columnAttrs[col].filters) {\n                        let uniqueValues = [];\n                        if (isUndefined(columnAttrs[col].renderType)) {\n                            uniqueValues = [\n                                ...new Set(data.map((d) => d[col])),\n                            ];\n                        } else {\n                            uniqueValues = [\n                                ...new Set(data.map((d) => d[col].content)),\n                            ];\n                        }\n                        uniqueValues.sort();\n                        cols[i]['filters'] = uniqueValues.map((d) => ({\n                            text: d,\n                            value: d,\n                        }));\n                    } else {\n                        cols[i]['filters'] = columnAttrs[col].filters;\n                    }\n                    cols[i]['onFilter'] = (value, record) => {\n                        var matched = false;\n                        if (record[col]?.content) {\n                            matched = record[col].content == value;\n                        } else {\n                            matched = record[col] == value;\n                        }\n                        return matched;\n                    };\n                }\n\n                if (columnAttrs[col].search) {\n                    cols[i] = {\n                        ...cols[i],\n                        ...getColumnSearchProps(col),\n                    };\n                }\n            }\n        }\n\n        if (cellUpdateOptimize) {\n            cols = cols.map((item) => {\n                return {\n                    ...item,\n                    shouldCellUpdate: (record, prevRecord) => {\n                        if (isEqual(record, prevRecord)) {\n                            return false;\n                        }\n                        return true;\n                    },\n                };\n            });\n        }\n    }\n\n    if (pagination) {\n        if (pagination.position) {\n            pagination = {\n                ...pagination,\n                position: [pagination.position],\n            };\n        }\n        if (pagination.showTotal) {\n            pagination = {\n                ...pagination,\n                showTotal: (total) => `Total ${total} items`,\n            };\n        }\n    }\n\n    return (\n        <Table\n            id={id}\n            className={\n                isString(className)\n                    ? className\n                    : className\n                    ? useCss(className)\n                    : undefined\n            }\n            style={style}\n            bordered={bordered}\n            dataSource={data}\n            columns={cols}\n            data={data}\n            size={size}\n            onChange={(pagi, filters, sorter, extra) => {\n                let selectedData = data;\n                pagi = filterObjNa(pagi);\n                filters = filterObjNa(filters);\n\n                // handle filters first\n                if (Object.keys(filters).length > 0) {\n                    Object.entries(filters).map(([col, fil]) => {\n                        if (!isUndefined(fil)) {\n                            selectedData = selectedData.filter((record) => {\n                                // base on mode\n                                if (columnAttrs[col].search === true) {\n                                    let search_text = fil[0].toLowerCase();\n                                    let v = '';\n                                    if (record[col].content) {\n                                        v = record[col].content\n                                            .toString()\n                                            .toLowerCase();\n                                    } else {\n                                        v = record[col]\n                                            .toString()\n                                            .toLowerCase();\n                                    }\n                                    return v.includes(search_text);\n                                } else if (columnAttrs[col].filter == true) {\n                                    if (record[col].content) {\n                                        return fil.includes(\n                                            record[col].content\n                                        );\n                                    } else {\n                                        return fil.includes(record[col]);\n                                    }\n                                }\n                            });\n                        }\n                    });\n                }\n\n                // handle pagination\n                if (Object.keys(pagi).length > 0) {\n                    const currenPage = pagi.current;\n                    const pageSize = pagi.pageSize;\n                    selectedData = selectedData.slice(\n                        (currenPage - 1) * pageSize,\n                        currenPage * pageSize\n                    );\n                }\n                setDisplayData(selectedData);\n            }}\n            scroll={{\n                x: maxWidth,\n                y: maxHeight,\n                scrollToFirstRowOnChange: true,\n            }}\n            pagination={pagination}\n            data-dash-is-loading={\n                (loading_state && loading_state.is_loading) || undefined\n            }\n        ></Table>\n    );\n};\n\nDvpTable.defaultProps = defaultProps;\nDvpTable.propTypes = propTypes;\nexport default DvpTable;\n"],"names":["DvUiComponents","props","id","label","setProps","value","React","onChange","e","target","defaultProps","propTypes","PropTypes","isRequired","DvpTable","className","style","pagination","columns","selectedColumns","columnAttrs","data","bordered","maxHeight","maxWidth","size","cellUpdateOptimize","selectedValues","ellipsisMaxLen","loading_state","checkedValues","join","cols","length","map","d","i","dataIndex","key","title","record","index","_","pick","hasOwnProperty","Number","_useState2","_slicedToArray","useState","setSearchText","_useState4","setSearchedColumn","_useState6","slice","defaultPageSize","displayData","setDisplayData","filterObjNa","obj","new_dict","Object","entries","_ref","_ref2","k","v","isUndefined","handleSearch","selectedKeys","confirm","_objectSpread","_loop","col","rowMerge","mergeBy","rowMergeBy","colRowSpans","groupBy","values","content","push","col_","span","j","sortRowSpan","onCell","rowSpan","class_name","toString","renderType","href","disabled","undefined","tag_style","fullwidth","width","height","Tag","color","console","log","tags","tag","includes","src","checked","cellClassName","Checkbox","defaultChecked","concat","_toConsumableArray","filter","setTimeout","iconClassName","icon","DvpIcon","ellipsis","showTitle","text","Tooltip","placement","filters","uniqueValues","Set","sort","_record$col","search","filterDropdown","_ref3","setSelectedKeys","clearFilters","padding","onKeyDown","stopPropagation","Input","onPressEnter","marginBottom","display","Space","Button","type","onClick","SearchOutlined","handleReset","filterIcon","filtered","onFilter","_record$dataIndex","toLowerCase","item","shouldCellUpdate","prevRecord","isEqual","position","showTotal","total","Table","isString","useCss","dataSource","pagi","sorter","extra","selectedData","keys","_ref4","_ref5","fil","search_text","currenPage","current","pageSize","scroll","x","y","scrollToFirstRowOnChange","is_loading"],"sourceRoot":""}