{"version":3,"file":"static/chunks/803.10a4385586a4c8ca.js","mappings":"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","sources":["webpack://_N_E/../ui-core/src/pipelines/PipelineRunsRoot.tsx","webpack://_N_E/../ui-core/src/snapshots/SnapshotNav.tsx","webpack://_N_E/../ui-core/src/snapshots/SnapshotRoot.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import {gql} from '@apollo/client';\nimport {\n  Box,\n  ButtonLink,\n  CursorHistoryControls,\n  Icon,\n  NonIdealState,\n  Page,\n  Tag,\n  TokenizingFieldValue,\n  tokenToString,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport {useParams} from 'react-router-dom';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {\n  FIFTEEN_SECONDS,\n  QueryRefreshCountdown,\n  useQueryRefreshAtInterval,\n} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {RunTable, RUN_TABLE_RUN_FRAGMENT} from '../runs/RunTable';\nimport {DagsterTag} from '../runs/RunTag';\nimport {RunsQueryRefetchContext} from '../runs/RunUtils';\nimport {\n  RunFilterTokenType,\n  runsFilterForSearchTokens,\n  useQueryPersistedRunFilters,\n  RunFilterToken,\n  useRunsFilterInput,\n} from '../runs/RunsFilterInput';\nimport {useCursorPaginatedQuery} from '../runs/useCursorPaginatedQuery';\nimport {AnchorButton} from '../ui/AnchorButton';\nimport {Loading} from '../ui/Loading';\nimport {StickyTableContainer} from '../ui/StickyTableContainer';\nimport {isThisThingAJob, isThisThingAnAssetJob, useRepository} from '../workspace/WorkspaceContext';\nimport {repoAddressAsTag} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {explorerPathFromString} from './PipelinePathUtils';\nimport {\n  PipelineRunsRootQuery,\n  PipelineRunsRootQueryVariables,\n} from './types/PipelineRunsRoot.types';\nimport {useJobTitle} from './useJobTitle';\n\nconst PAGE_SIZE = 25;\nconst ENABLED_FILTERS: RunFilterTokenType[] = [\n  'status',\n  'tag',\n  'id',\n  'created_date_before',\n  'created_date_after',\n];\n\ninterface Props {\n  repoAddress?: RepoAddress;\n}\n\nexport const PipelineRunsRoot = (props: Props) => {\n  useTrackPageView();\n\n  const {pipelinePath} = useParams<{pipelinePath: string}>();\n  const {repoAddress = null} = props;\n  const explorerPath = explorerPathFromString(pipelinePath);\n  const {pipelineName, snapshotId} = explorerPath;\n\n  const repo = useRepository(repoAddress);\n  const isJob = isThisThingAJob(repo, pipelineName);\n\n  useJobTitle(explorerPath, isJob);\n\n  const [filterTokens, setFilterTokens] = useQueryPersistedRunFilters(ENABLED_FILTERS);\n  const permanentTokens = React.useMemo(() => {\n    return [\n      isJob ? {token: 'job', value: pipelineName} : {token: 'pipeline', value: pipelineName},\n      snapshotId ? {token: 'snapshotId', value: snapshotId} : null,\n    ].filter(Boolean) as TokenizingFieldValue[];\n  }, [isJob, pipelineName, snapshotId]);\n\n  const allTokens = [...filterTokens, ...permanentTokens];\n  if (repoAddress) {\n    const repoToken = {\n      token: 'tag',\n      value: `${DagsterTag.RepositoryLabelTag}=${repoAddressAsTag(repoAddress)}`,\n    };\n    allTokens.push(repoToken);\n  }\n\n  const {queryResult, paginationProps} = useCursorPaginatedQuery<\n    PipelineRunsRootQuery,\n    PipelineRunsRootQueryVariables\n  >({\n    query: PIPELINE_RUNS_ROOT_QUERY,\n    pageSize: PAGE_SIZE,\n    variables: {\n      filter: {...runsFilterForSearchTokens(allTokens), pipelineName, snapshotId},\n    },\n    nextCursorForResult: (runs) => {\n      if (runs.pipelineRunsOrError.__typename !== 'Runs') {\n        return undefined;\n      }\n      return runs.pipelineRunsOrError.results[PAGE_SIZE - 1]?.id;\n    },\n    getResultArray: (data) => {\n      if (!data || data.pipelineRunsOrError.__typename !== 'Runs') {\n        return [];\n      }\n      return data.pipelineRunsOrError.results;\n    },\n  });\n\n  const onAddTag = React.useCallback(\n    (token: RunFilterToken) => {\n      const tokenAsString = tokenToString(token);\n      if (!filterTokens.some((token) => tokenToString(token) === tokenAsString)) {\n        setFilterTokens([...filterTokens, token]);\n      }\n    },\n    [filterTokens, setFilterTokens],\n  );\n\n  const refreshState = useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n  const {button, activeFiltersJsx} = useRunsFilterInput({\n    enabledFilters: ENABLED_FILTERS,\n    tokens: filterTokens,\n    onChange: setFilterTokens,\n    loading: queryResult.loading,\n  });\n\n  return (\n    <RunsQueryRefetchContext.Provider value={{refetch: queryResult.refetch}}>\n      <Page>\n        <Loading queryResult={queryResult} allowStaleData={true}>\n          {({pipelineRunsOrError}) => {\n            if (pipelineRunsOrError.__typename !== 'Runs') {\n              return (\n                <Box padding={{vertical: 64}}>\n                  <NonIdealState\n                    icon=\"error\"\n                    title=\"Query Error\"\n                    description={pipelineRunsOrError.message}\n                  />\n                </Box>\n              );\n            }\n\n            const runs = pipelineRunsOrError.results;\n\n            const displayed = runs.slice(0, PAGE_SIZE);\n            const {hasNextCursor, hasPrevCursor} = paginationProps;\n\n            return (\n              <>\n                <StickyTableContainer $top={0}>\n                  <RunTable\n                    runs={displayed}\n                    onAddTag={onAddTag}\n                    actionBarComponents={\n                      <Box\n                        flex={{\n                          direction: 'row',\n                          justifyContent: 'space-between',\n                          grow: 1,\n                          alignItems: 'center',\n                          gap: 4,\n                        }}\n                        margin={{right: 8}}\n                      >\n                        {button}\n                        <QueryRefreshCountdown refreshState={refreshState} />\n                      </Box>\n                    }\n                    belowActionBarComponents={\n                      <>\n                        {permanentTokens.map(({token, value}) => (\n                          <Tag key={token}>{`${token}:${value}`}</Tag>\n                        ))}\n                        {activeFiltersJsx.length ? (\n                          <>\n                            {activeFiltersJsx}\n                            <ButtonLink\n                              onClick={() => {\n                                setFilterTokens([]);\n                              }}\n                            >\n                              Clear all\n                            </ButtonLink>\n                          </>\n                        ) : null}\n                      </>\n                    }\n                    emptyState={() => (\n                      <EmptyState\n                        repoAddress={repoAddress}\n                        anyFilter={filterTokens.length > 0}\n                        jobName={pipelineName}\n                        jobPath={pipelinePath}\n                      />\n                    )}\n                  />\n                </StickyTableContainer>\n                {hasNextCursor || hasPrevCursor ? (\n                  <div style={{marginTop: '20px'}}>\n                    <CursorHistoryControls {...paginationProps} />\n                  </div>\n                ) : null}\n              </>\n            );\n          }}\n        </Loading>\n      </Page>\n    </RunsQueryRefetchContext.Provider>\n  );\n};\n\ninterface EmptyStateProps {\n  repoAddress: RepoAddress | null;\n  jobName: string;\n  jobPath: string;\n  anyFilter: boolean;\n}\n\nconst EmptyState = (props: EmptyStateProps) => {\n  const {repoAddress, anyFilter, jobName, jobPath} = props;\n\n  const repo = useRepository(repoAddress);\n  const isAssetJob = isThisThingAnAssetJob(repo, jobName);\n\n  const description = () => {\n    if (!repoAddress) {\n      return <div>You have not launched any runs for this job.</div>;\n    }\n\n    if (isAssetJob) {\n      return (\n        <Box flex={{direction: 'column', gap: 12}}>\n          <div>\n            {anyFilter\n              ? 'There are no matching runs for these filters.'\n              : 'You have not materialized any assets with this job yet.'}\n          </div>\n          <div>\n            <AnchorButton\n              icon={<Icon name=\"materialization\" />}\n              to={workspacePathFromAddress(repoAddress, `/jobs/${jobPath}`)}\n            >\n              Materialize an asset\n            </AnchorButton>\n          </div>\n        </Box>\n      );\n    }\n\n    return (\n      <Box flex={{direction: 'column', gap: 12}}>\n        <div>\n          {anyFilter\n            ? 'There are no matching runs for these filters.'\n            : 'You have not launched any runs for this job yet.'}\n        </div>\n        <div>\n          <AnchorButton\n            icon={<Icon name=\"add_circle\" />}\n            to={workspacePathFromAddress(repoAddress, `/jobs/${jobPath}/playground`)}\n          >\n            Launch a run\n          </AnchorButton>\n        </div>\n      </Box>\n    );\n  };\n\n  return (\n    <Box padding={{vertical: 64}}>\n      <NonIdealState icon=\"run\" title=\"No runs found\" description={description()} />\n    </Box>\n  );\n};\n\nconst PIPELINE_RUNS_ROOT_QUERY = gql`\n  query PipelineRunsRootQuery($limit: Int, $cursor: String, $filter: RunsFilter!) {\n    pipelineRunsOrError(limit: $limit, cursor: $cursor, filter: $filter) {\n      ... on Runs {\n        results {\n          id\n          ...RunTableRunFragment\n        }\n      }\n      ... on InvalidPipelineRunsFilterError {\n        message\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${RUN_TABLE_RUN_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {PageHeader, Tabs, Tag, Heading, FontFamily} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {explorerPathToString, ExplorerPath} from '../pipelines/PipelinePathUtils';\nimport {TabLink} from '../ui/TabLink';\nimport {useActivePipelineForName} from '../workspace/WorkspaceContext';\nimport {workspacePipelinePathGuessRepo} from '../workspace/workspacePath';\n\nimport {SnapshotQuery, SnapshotQueryVariables} from './types/SnapshotNav.types';\n\nconst SNAPSHOT_PARENT_QUERY = gql`\n  query SnapshotQuery($snapshotId: String!) {\n    pipelineSnapshotOrError(snapshotId: $snapshotId) {\n      ... on PipelineSnapshot {\n        id\n        parentSnapshotId\n      }\n    }\n  }\n`;\n\ninterface SnapshotNavProps {\n  activeTab?: string;\n  explorerPath: ExplorerPath;\n}\n\nexport const SnapshotNav = (props: SnapshotNavProps) => {\n  const {activeTab = '', explorerPath} = props;\n  const {pipelineName, snapshotId = ''} = explorerPath;\n  const explorerPathString = explorerPathToString({\n    ...explorerPath,\n    opNames: [],\n  });\n\n  const currentPipelineState = useActivePipelineForName(pipelineName);\n  const currentSnapshotID = currentPipelineState?.pipelineSnapshotId;\n\n  const {data, loading} = useQuery<SnapshotQuery, SnapshotQueryVariables>(SNAPSHOT_PARENT_QUERY, {\n    variables: {snapshotId},\n  });\n\n  const tag = () => {\n    if (loading) {\n      return (\n        <Tag intent=\"none\" minimal>\n          ...\n        </Tag>\n      );\n    }\n\n    if (\n      !currentSnapshotID ||\n      (currentSnapshotID !== snapshotId &&\n        data?.pipelineSnapshotOrError.__typename === 'PipelineSnapshot' &&\n        data?.pipelineSnapshotOrError?.parentSnapshotId !== currentSnapshotID)\n    ) {\n      return (\n        <Tag intent=\"warning\" minimal>\n          Snapshot\n        </Tag>\n      );\n    }\n\n    return (\n      <Tag intent=\"success\" minimal>\n        Current\n      </Tag>\n    );\n  };\n\n  const tabs = [\n    {\n      text: 'Definition',\n      pathComponent: '',\n      href: `/snapshots/${explorerPathString}`,\n    },\n    {\n      text: 'Runs',\n      pathComponent: 'runs',\n      href: `/snapshots/${explorerPathString}runs`,\n    },\n  ];\n\n  return (\n    <PageHeader\n      title={\n        <Heading style={{fontFamily: FontFamily.monospace, fontSize: '20px'}}>\n          {explorerPath.snapshotId?.slice(0, 8)}\n        </Heading>\n      }\n      tags={\n        <>\n          <Tag icon=\"schema\">\n            Snapshot of{' '}\n            <Link to={workspacePipelinePathGuessRepo(explorerPath.pipelineName)}>\n              {explorerPath.pipelineName}\n            </Link>\n          </Tag>\n          {tag()}\n        </>\n      }\n      tabs={\n        <Tabs selectedTabId={activeTab}>\n          {tabs.map((tab) => {\n            const {href, text, pathComponent} = tab;\n            return <TabLink key={text} id={pathComponent} title={text} to={href} />;\n          })}\n        </Tabs>\n      }\n    />\n  );\n};\n","import * as React from 'react';\nimport {Route, Switch, useParams} from 'react-router-dom';\n\nimport {PipelineExplorerSnapshotRoot} from '../pipelines/PipelineExplorerRoot';\nimport {explorerPathFromString} from '../pipelines/PipelinePathUtils';\nimport {PipelineRunsRoot} from '../pipelines/PipelineRunsRoot';\n\nimport {SnapshotNav} from './SnapshotNav';\n\nexport const SnapshotRoot = () => {\n  const {pipelinePath, tab} = useParams<{\n    pipelinePath: string;\n    tab?: string;\n  }>();\n  const explorerPath = explorerPathFromString(pipelinePath);\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        minWidth: 0,\n        width: '100%',\n        height: '100%',\n      }}\n    >\n      <SnapshotNav activeTab={tab} explorerPath={explorerPath} />\n      <Switch>\n        <Route path=\"/snapshots/:pipelinePath/runs\">\n          <PipelineRunsRoot />\n        </Route>\n        <Route path=\"/snapshots/(/?.*)\">\n          <PipelineExplorerSnapshotRoot />\n        </Route>\n      </Switch>\n    </div>\n  );\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default SnapshotRoot;\n"],"names":["ENABLED_FILTERS","PipelineRunsRoot","props","useTrackPageView","pipelinePath","useParams","_props_repoAddress","repoAddress","explorerPath","explorerPathFromString","pipelineName","snapshotId","repo","useRepository","isJob","isThisThingAJob","useJobTitle","useQueryPersistedRunFilters","filterTokens","setFilterTokens","permanentTokens","React","token","value","filter","Boolean","allTokens","_swc_helpers_to_consumable_array__WEBPACK_IMPORTED_MODULE_21__","_","repoToken","repoAddressAsTag","DagsterTag","RepositoryLabelTag","concat","push","useCursorPaginatedQuery","query","PIPELINE_RUNS_ROOT_QUERY","pageSize","variables","_swc_helpers_object_spread_props__WEBPACK_IMPORTED_MODULE_22__","_swc_helpers_object_spread__WEBPACK_IMPORTED_MODULE_23__","runsFilterForSearchTokens","nextCursorForResult","runs","pipelineRunsOrError","__typename","results","PAGE_SIZE","id","getResultArray","data","queryResult","paginationProps","onAddTag","tokenAsString","tokenToString","some","refreshState","useQueryRefreshAtInterval","FIFTEEN_SECONDS","useRunsFilterInput","enabledFilters","tokens","onChange","loading","button","activeFiltersJsx","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__","jsx","RunsQueryRefetchContext","Provider","refetch","Page","Loading","allowStaleData","param","Box","padding","vertical","NonIdealState","icon","title","description","message","displayed","slice","hasNextCursor","hasPrevCursor","jsxs","Fragment","StickyTableContainer","$top","RunTable","actionBarComponents","flex","direction","justifyContent","grow","alignItems","gap","margin","right","QueryRefreshCountdown","belowActionBarComponents","map","Tag","length","ButtonLink","onClick","emptyState","EmptyState","anyFilter","jobName","jobPath","div","style","marginTop","CursorHistoryControls","isAssetJob","isThisThingAnAssetJob","AnchorButton","Icon","name","to","workspacePathFromAddress","gql","RUN_TABLE_RUN_FRAGMENT","PYTHON_ERROR_FRAGMENT","SNAPSHOT_PARENT_QUERY","SnapshotNav","_props_activeTab","activeTab","_explorerPath_snapshotId1","explorerPathString","explorerPathToString","_object_spread_props","_object_spread","opNames","currentPipelineState","useActivePipelineForName","currentSnapshotID","pipelineSnapshotId","useQuery","jsx_runtime","PageHeader","Heading","fontFamily","FontFamily","monospace","fontSize","tags","Link","workspacePipelinePathGuessRepo","intent","minimal","pipelineSnapshotOrError","parentSnapshotId","tabs","Tabs","selectedTabId","text","pathComponent","href","tab","TabLink","SnapshotRoot","display","flexDirection","minWidth","width","height","Switch","Route","path","PipelineExplorerSnapshotRoot","snapshots_SnapshotRoot"],"sourceRoot":""}