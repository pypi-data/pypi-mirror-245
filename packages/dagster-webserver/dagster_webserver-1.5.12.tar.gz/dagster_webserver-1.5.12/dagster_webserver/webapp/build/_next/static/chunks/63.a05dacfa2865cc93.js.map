{"version":3,"file":"static/chunks/63.a05dacfa2865cc93.js","mappings":"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","sources":["webpack://_N_E/../../node_modules/lodash/partition.js","webpack://_N_E/../ui-core/src/instance/useCanSeeConfig.tsx","webpack://_N_E/../ui-core/src/runs/RunListTabs.tsx","webpack://_N_E/../ui-core/src/hooks/usePortalSlot.tsx","webpack://_N_E/../ui-core/src/runs/QueuedRunsBanners.tsx","webpack://_N_E/../ui-core/src/runs/TerminateAllRunsButton.tsx","webpack://_N_E/../ui-core/src/runs/RunsRoot.tsx","webpack://_N_E/<anon>"],"sourcesContent":["var createAggregator = require('./_createAggregator');\n\n/**\n * Creates an array of elements split into two groups, the first of which\n * contains elements `predicate` returns truthy for, the second of which\n * contains elements `predicate` returns falsey for. The predicate is\n * invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the array of grouped elements.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'age': 36, 'active': false },\n *   { 'user': 'fred',    'age': 40, 'active': true },\n *   { 'user': 'pebbles', 'age': 1,  'active': false }\n * ];\n *\n * _.partition(users, function(o) { return o.active; });\n * // => objects for [['fred'], ['barney', 'pebbles']]\n *\n * // The `_.matches` iteratee shorthand.\n * _.partition(users, { 'age': 1, 'active': false });\n * // => objects for [['pebbles'], ['barney', 'fred']]\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.partition(users, ['active', false]);\n * // => objects for [['barney', 'pebbles'], ['fred']]\n *\n * // The `_.property` iteratee shorthand.\n * _.partition(users, 'active');\n * // => objects for [['fred'], ['barney', 'pebbles']]\n */\nvar partition = createAggregator(function(result, value, key) {\n  result[key ? 0 : 1].push(value);\n}, function() { return [[], []]; });\n\nmodule.exports = partition;\n","import {gql, useQuery} from '@apollo/client';\n\nimport {\n  InstanceConfigHasInfoQuery,\n  InstanceConfigHasInfoQueryVariables,\n} from './types/useCanSeeConfig.types';\n\nexport const useCanSeeConfig = () => {\n  const {data} = useQuery<InstanceConfigHasInfoQuery, InstanceConfigHasInfoQueryVariables>(\n    INSTANCE_CONFIG_HAS_INFO,\n  );\n  return !!data?.instance.hasInfo;\n};\n\nconst INSTANCE_CONFIG_HAS_INFO = gql`\n  query InstanceConfigHasInfo {\n    instance {\n      id\n      hasInfo\n    }\n  }\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  JoinedButtons,\n  TokenizingFieldValue,\n  colorBackgroundLighterHover,\n  colorTextDefault,\n  colorBackgroundDefault,\n  colorTextLight,\n} from '@dagster-io/ui-components';\nimport isEqual from 'lodash/isEqual';\nimport * as React from 'react';\nimport {useLocation} from 'react-router-dom';\nimport styled, {css} from 'styled-components';\n\nimport {RunStatus, RunsFilter} from '../graphql/types';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {AnchorButton} from '../ui/AnchorButton';\n\nimport {failedStatuses, inProgressStatuses, queuedStatuses} from './RunStatuses';\nimport {runsPathWithFilters, useQueryPersistedRunFilters} from './RunsFilterInput';\nimport {RunTabsCountQuery, RunTabsCountQueryVariables} from './types/RunListTabs.types';\n\nconst getDocumentTitle = (selected: ReturnType<typeof useSelectedRunsTab>) => {\n  switch (selected) {\n    case 'all':\n      return 'Runs | All runs';\n    case 'failed':\n      return 'Runs | Failed';\n    case 'in-progress':\n      return 'Runs | In progress';\n    case 'queued':\n      return 'Runs | Queued';\n    case 'scheduled':\n      return 'Runs | Scheduled';\n    default:\n      return 'Runs';\n  }\n};\n\nexport const useRunListTabs = (filter: RunsFilter = {}) => {\n  const queryResult = useQuery<RunTabsCountQuery, RunTabsCountQueryVariables>(\n    RUN_TABS_COUNT_QUERY,\n    {\n      variables: {\n        queuedFilter: {...filter, statuses: Array.from(queuedStatuses)},\n        inProgressFilter: {...filter, statuses: Array.from(inProgressStatuses)},\n      },\n    },\n  );\n\n  const {data: countData} = queryResult;\n  const {queuedCount, inProgressCount} = React.useMemo(() => {\n    return {\n      queuedCount:\n        countData?.queuedCount?.__typename === 'Runs' ? countData.queuedCount.count : null,\n      inProgressCount:\n        countData?.inProgressCount?.__typename === 'Runs' ? countData.inProgressCount.count : null,\n    };\n  }, [countData]);\n\n  const [filterTokens] = useQueryPersistedRunFilters();\n  const selectedTab = useSelectedRunsTab(filterTokens);\n\n  useDocumentTitle(getDocumentTitle(selectedTab));\n\n  const urlForStatus = (statuses: RunStatus[]) => {\n    const tokensMinusStatus = filterTokens.filter((token) => token.token !== 'status');\n    const statusTokens = statuses.map((status) => ({token: 'status' as const, value: status}));\n    return runsPathWithFilters([...statusTokens, ...tokensMinusStatus]);\n  };\n\n  const tabs = (\n    <JoinedButtons>\n      <ActivatableButton to={urlForStatus([])} id=\"all\" $active={selectedTab === 'all'}>\n        All runs\n      </ActivatableButton>\n      <ActivatableButton\n        to={urlForStatus(Array.from(queuedStatuses))}\n        id=\"queued\"\n        $active={selectedTab === 'queued'}\n      >\n        Queued ({queuedCount ?? 'indeterminate'})\n      </ActivatableButton>\n      <ActivatableButton\n        to={urlForStatus(Array.from(inProgressStatuses))}\n        id=\"in-progress\"\n        $active={selectedTab === 'in-progress'}\n      >\n        In progress ({inProgressCount ?? 'indeterminate'})\n      </ActivatableButton>\n      <ActivatableButton\n        to={urlForStatus(Array.from(failedStatuses))}\n        id=\"failed\"\n        $active={selectedTab === 'failed'}\n      >\n        Failed\n      </ActivatableButton>\n      <ActivatableButton\n        title=\"Scheduled\"\n        to=\"/runs/scheduled\"\n        id=\"scheduled\"\n        $active={selectedTab === 'scheduled'}\n      >\n        Scheduled\n      </ActivatableButton>\n    </JoinedButtons>\n  );\n\n  return {tabs, queryResult};\n};\n\nexport const ActivatableButton = styled(AnchorButton)<{$active: boolean}>`\n  color: ${colorTextLight()};\n\n  &&:hover {\n    color: ${colorTextLight()};\n  }\n\n  ${({$active}) =>\n    $active\n      ? css`\n          background-color: ${colorBackgroundLighterHover()};\n          color: ${colorTextDefault()};\n\n          &&:hover {\n            background-color: ${colorBackgroundLighterHover()};\n            color: ${colorTextDefault()};\n          }\n        `\n      : css`\n          background-color: ${colorBackgroundDefault()};\n        `}\n`;\n\nexport const useSelectedRunsTab = (filterTokens: TokenizingFieldValue[]) => {\n  const {pathname} = useLocation();\n  if (pathname === '/runs/timeline') {\n    return 'timeline';\n  }\n  if (pathname === '/runs/scheduled') {\n    return 'scheduled';\n  }\n  if (pathname === '/overview/backfills') {\n    return 'backfills';\n  }\n\n  const statusTokens = new Set(\n    filterTokens.filter((token) => token.token === 'status').map((token) => token.value),\n  );\n  if (isEqual(queuedStatuses, statusTokens)) {\n    return 'queued';\n  }\n  if (isEqual(inProgressStatuses, statusTokens)) {\n    return 'in-progress';\n  }\n  if (isEqual(failedStatuses, statusTokens)) {\n    return 'failed';\n  }\n  return 'all';\n};\n\nexport const RUN_TABS_COUNT_QUERY = gql`\n  query RunTabsCountQuery($queuedFilter: RunsFilter!, $inProgressFilter: RunsFilter!) {\n    queuedCount: pipelineRunsOrError(filter: $queuedFilter) {\n      ... on Runs {\n        count\n      }\n    }\n    inProgressCount: pipelineRunsOrError(filter: $inProgressFilter) {\n      ... on Runs {\n        count\n      }\n    }\n  }\n`;\n","import React from 'react';\nimport {createPortal} from 'react-dom';\n\n/**\n * Allows you to move a component around in the tree without it losing its state.\n */\nexport function usePortalSlot(reactNode: React.ReactNode) {\n  const [targetEl, setTargetEl] = React.useState<HTMLDivElement | null>(null);\n\n  React.useLayoutEffect(() => {\n    setTargetEl((e) => (e === null ? document.createElement('div') : e));\n  }, []);\n\n  return [\n    targetEl ? createPortal(reactNode, targetEl) : null,\n    targetEl ? <DOMNodeHost node={targetEl} /> : null,\n  ];\n}\n\nfunction DOMNodeHost({node}: {node: HTMLElement}) {\n  const ref = React.useRef<HTMLDivElement | null>(null);\n  React.useLayoutEffect(() => {\n    const ownDiv = ref.current;\n    if (node.parentNode === ownDiv) {\n      return;\n    }\n    if (node.parentNode !== null && node.parentNode !== ownDiv) {\n      throw Error('Cannot render the same node twice');\n    }\n    ownDiv?.appendChild(node);\n    return () => {\n      ownDiv?.removeChild(node);\n    };\n  }, [node]);\n  return <div ref={ref} />;\n}\n","import {gql, useQuery} from '@apollo/client';\nimport {Alert, Box} from '@dagster-io/ui-components';\nimport React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {InstancePageContext} from '../instance/InstancePageContext';\nimport {useCanSeeConfig} from '../instance/useCanSeeConfig';\n\nimport {\n  QueueDaemonStatusQuery,\n  QueueDaemonStatusQueryVariables,\n} from './types/QueuedRunsBanners.types';\n\nexport const QueuedRunsBanners = () => {\n  const canSeeConfig = useCanSeeConfig();\n\n  return (\n    <Box flex={{direction: 'column', gap: 8}} style={{minWidth: '100%'}} border=\"bottom\">\n      {canSeeConfig && (\n        <Alert\n          intent=\"info\"\n          title={<Link to=\"/config#run_coordinator\">View queue configuration</Link>}\n        />\n      )}\n      {canSeeConfig && <QueueDaemonAlert />}\n    </Box>\n  );\n};\n\nconst QueueDaemonAlert = () => {\n  const {data} = useQuery<QueueDaemonStatusQuery, QueueDaemonStatusQueryVariables>(\n    QUEUE_DAEMON_STATUS_QUERY,\n  );\n  const {pageTitle} = React.useContext(InstancePageContext);\n  const status = data?.instance.daemonHealth.daemonStatus;\n  if (status?.required && !status?.healthy) {\n    return (\n      <Alert\n        intent=\"warning\"\n        title=\"The queued run coordinator is not healthy.\"\n        description={\n          <div>\n            View <Link to=\"/health\">{pageTitle}</Link> for details.\n          </div>\n        }\n      />\n    );\n  }\n  return null;\n};\n\nconst QUEUE_DAEMON_STATUS_QUERY = gql`\n  query QueueDaemonStatusQuery {\n    instance {\n      id\n      daemonHealth {\n        id\n        daemonStatus(daemonType: \"QUEUED_RUN_COORDINATOR\") {\n          id\n          daemonType\n          healthy\n          required\n        }\n      }\n    }\n  }\n`;\n","import {gql, useApolloClient} from '@apollo/client';\nimport {Button} from '@dagster-io/ui-components';\nimport isEqual from 'lodash/isEqual';\nimport React from 'react';\n\nimport {RunsFilter} from '../graphql/types';\n\nimport {queuedStatuses} from './RunStatuses';\nimport {TerminationDialog} from './TerminationDialog';\nimport {\n  TerminateRunIdsQuery,\n  TerminateRunIdsQueryVariables,\n} from './types/TerminateAllRunsButton.types';\n\nexport const TerminateAllRunsButton = ({\n  refetch,\n  filter,\n  disabled,\n}: {\n  refetch: () => void;\n  filter: RunsFilter;\n  disabled: boolean;\n}) => {\n  const [terminating, setTerminating] = React.useState<{[runId: string]: boolean} | null>(null);\n  const client = useApolloClient();\n\n  const onTerminateAll = async () => {\n    const queuedRunIds = await client.query<TerminateRunIdsQuery, TerminateRunIdsQueryVariables>({\n      query: TERMINATE_RUN_IDS_QUERY,\n      variables: {filter},\n    });\n    setTerminating(\n      queuedRunIds.data.pipelineRunsOrError.__typename === 'Runs'\n        ? Object.fromEntries(\n            queuedRunIds.data.pipelineRunsOrError.results.map((run) => [run.id, run.canTerminate]),\n          )\n        : {},\n    );\n  };\n  return (\n    <>\n      <TerminationDialog\n        isOpen={terminating !== null}\n        selectedRuns={terminating || {}}\n        selectedRunsAllQueued={isEqual(filter, {statuses: Array.from(queuedStatuses)})}\n        onClose={() => setTerminating(null)}\n        onComplete={() => refetch()}\n      />\n      <Button intent=\"danger\" outlined disabled={disabled} onClick={onTerminateAll}>\n        Terminate all…\n      </Button>\n    </>\n  );\n};\n\nconst TERMINATE_RUN_IDS_QUERY = gql`\n  query TerminateRunIdsQuery($filter: RunsFilter!) {\n    pipelineRunsOrError(filter: $filter) {\n      ... on Runs {\n        results {\n          id\n          status\n          canTerminate\n        }\n      }\n    }\n  }\n`;\n","import {ApolloError, gql} from '@apollo/client';\nimport {\n  Box,\n  ButtonLink,\n  CursorHistoryControls,\n  Heading,\n  NonIdealState,\n  Page,\n  PageHeader,\n  tokenToString,\n} from '@dagster-io/ui-components';\nimport partition from 'lodash/partition';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {\n  FIFTEEN_SECONDS,\n  QueryRefreshCountdown,\n  useMergedRefresh,\n  useQueryRefreshAtInterval,\n} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {usePortalSlot} from '../hooks/usePortalSlot';\nimport {Loading} from '../ui/Loading';\nimport {StickyTableContainer} from '../ui/StickyTableContainer';\n\nimport {QueuedRunsBanners} from './QueuedRunsBanners';\nimport {useRunListTabs, useSelectedRunsTab} from './RunListTabs';\nimport {inProgressStatuses, queuedStatuses} from './RunStatuses';\nimport {RUN_TABLE_RUN_FRAGMENT, RunTable} from './RunTable';\nimport {RunsQueryRefetchContext} from './RunUtils';\nimport {\n  RunFilterToken,\n  RunFilterTokenType,\n  runsFilterForSearchTokens,\n  useQueryPersistedRunFilters,\n  useRunsFilterInput,\n} from './RunsFilterInput';\nimport {TerminateAllRunsButton} from './TerminateAllRunsButton';\nimport {RunsRootQuery, RunsRootQueryVariables} from './types/RunsRoot.types';\nimport {useCursorPaginatedQuery} from './useCursorPaginatedQuery';\n\nconst PAGE_SIZE = 25;\n\nexport const RunsRoot = () => {\n  useTrackPageView();\n\n  const [filterTokens, setFilterTokens] = useQueryPersistedRunFilters();\n  const filter = runsFilterForSearchTokens(filterTokens);\n\n  const {queryResult, paginationProps} = useCursorPaginatedQuery<\n    RunsRootQuery,\n    RunsRootQueryVariables\n  >({\n    nextCursorForResult: (runs) => {\n      if (runs.pipelineRunsOrError.__typename !== 'Runs') {\n        return undefined;\n      }\n      return runs.pipelineRunsOrError.results[PAGE_SIZE - 1]?.id;\n    },\n    getResultArray: (data) => {\n      if (!data || data.pipelineRunsOrError.__typename !== 'Runs') {\n        return [];\n      }\n      return data.pipelineRunsOrError.results;\n    },\n    variables: {\n      filter,\n    },\n    query: RUNS_ROOT_QUERY,\n    pageSize: PAGE_SIZE,\n  });\n\n  const refreshState = useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n  const currentTab = useSelectedRunsTab(filterTokens);\n  const staticStatusTags = currentTab !== 'all';\n  const [statusTokens, nonStatusTokens] = partition(\n    filterTokens,\n    (token) => token.token === 'status',\n  );\n\n  const setFilterTokensWithStatus = React.useCallback(\n    (tokens: RunFilterToken[]) => {\n      if (staticStatusTags) {\n        setFilterTokens([...statusTokens, ...tokens]);\n      } else {\n        setFilterTokens(tokens);\n      }\n    },\n    [setFilterTokens, staticStatusTags, statusTokens],\n  );\n\n  const onAddTag = React.useCallback(\n    (token: RunFilterToken) => {\n      const tokenAsString = tokenToString(token);\n      if (!nonStatusTokens.some((token) => tokenToString(token) === tokenAsString)) {\n        setFilterTokensWithStatus([...nonStatusTokens, token]);\n      }\n    },\n    [nonStatusTokens, setFilterTokensWithStatus],\n  );\n\n  const enabledFilters = React.useMemo(() => {\n    const filters: RunFilterTokenType[] = [\n      'tag',\n      'snapshotId',\n      'id',\n      'job',\n      'pipeline',\n      'partition',\n      'backfill',\n    ];\n\n    if (!staticStatusTags) {\n      filters.push('status');\n    }\n\n    return filters;\n  }, [staticStatusTags]);\n\n  const mutableTokens = React.useMemo(() => {\n    if (staticStatusTags) {\n      return filterTokens.filter((token) => token.token !== 'status');\n    }\n    return filterTokens;\n  }, [filterTokens, staticStatusTags]);\n\n  const {tabs, queryResult: runQueryResult} = useRunListTabs(filter);\n  const countRefreshState = useQueryRefreshAtInterval(runQueryResult, FIFTEEN_SECONDS);\n  const combinedRefreshState = useMergedRefresh(countRefreshState, refreshState);\n\n  const {button, activeFiltersJsx} = useRunsFilterInput({\n    tokens: mutableTokens,\n    onChange: setFilterTokensWithStatus,\n    enabledFilters,\n  });\n\n  const [filtersPortal, filtersSlot] = usePortalSlot(button);\n\n  function actionBar() {\n    return (\n      <Box style={{width: '100%', marginRight: 8}} flex={{justifyContent: 'space-between'}}>\n        <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n          {tabs}\n          {filtersSlot}\n        </Box>\n        {currentTab === 'queued' ? (\n          <TerminateAllRunsButton\n            refetch={combinedRefreshState.refetch}\n            filter={{statuses: Array.from(queuedStatuses)}}\n            disabled={\n              runQueryResult.data?.queuedCount.__typename === 'Runs'\n                ? runQueryResult.data?.queuedCount.count === 0\n                : true\n            }\n          />\n        ) : currentTab === 'in-progress' ? (\n          <TerminateAllRunsButton\n            refetch={combinedRefreshState.refetch}\n            filter={{statuses: Array.from(inProgressStatuses)}}\n            disabled={\n              runQueryResult.data?.inProgressCount.__typename === 'Runs'\n                ? runQueryResult.data?.inProgressCount.count === 0\n                : true\n            }\n          />\n        ) : undefined}\n      </Box>\n    );\n  }\n\n  return (\n    <Page>\n      <PageHeader\n        title={<Heading>Runs</Heading>}\n        right={<QueryRefreshCountdown refreshState={combinedRefreshState} />}\n      />\n      {filtersPortal}\n      <RunsQueryRefetchContext.Provider value={{refetch: queryResult.refetch}}>\n        <Loading\n          queryResult={queryResult}\n          allowStaleData\n          renderError={(error: ApolloError) => {\n            // In this case, a 400 is most likely due to invalid run filters, which are a GraphQL\n            // validation error but surfaced as a 400.\n            const badRequest = !!(\n              error?.networkError &&\n              'statusCode' in error.networkError &&\n              error.networkError.statusCode === 400\n            );\n            return (\n              <Box\n                flex={{direction: 'column', gap: 32}}\n                padding={{vertical: 8, left: 24, right: 12}}\n              >\n                {actionBar()}\n                <NonIdealState\n                  icon=\"warning\"\n                  title={badRequest ? 'Invalid run filters' : 'Unexpected error'}\n                  description={\n                    badRequest\n                      ? 'The specified run filters are not valid. Please check the filters and try again.'\n                      : 'An unexpected error occurred. Check the console for details.'\n                  }\n                />\n              </Box>\n            );\n          }}\n        >\n          {({pipelineRunsOrError}) => {\n            if (pipelineRunsOrError.__typename !== 'Runs') {\n              return (\n                <Box padding={{vertical: 64}}>\n                  <NonIdealState\n                    icon=\"error\"\n                    title=\"Query Error\"\n                    description={pipelineRunsOrError.message}\n                  />\n                </Box>\n              );\n            }\n\n            return (\n              <>\n                <StickyTableContainer $top={0}>\n                  <RunTable\n                    runs={pipelineRunsOrError.results.slice(0, PAGE_SIZE)}\n                    onAddTag={onAddTag}\n                    filter={filter}\n                    actionBarComponents={actionBar()}\n                    belowActionBarComponents={\n                      currentTab === 'queued' || activeFiltersJsx.length ? (\n                        <>\n                          {currentTab === 'queued' && <QueuedRunsBanners />}\n                          {activeFiltersJsx.length > 0 && (\n                            <>\n                              {activeFiltersJsx}\n                              <ButtonLink onClick={() => setFilterTokensWithStatus([])}>\n                                Clear all\n                              </ButtonLink>\n                            </>\n                          )}\n                        </>\n                      ) : null\n                    }\n                  />\n                </StickyTableContainer>\n                {pipelineRunsOrError.results.length > 0 ? (\n                  <div style={{marginTop: '16px'}}>\n                    <CursorHistoryControls {...paginationProps} />\n                  </div>\n                ) : null}\n              </>\n            );\n          }}\n        </Loading>\n      </RunsQueryRefetchContext.Provider>\n    </Page>\n  );\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default RunsRoot;\n\nexport const RUNS_ROOT_QUERY = gql`\n  query RunsRootQuery($limit: Int, $cursor: String, $filter: RunsFilter!) {\n    pipelineRunsOrError(limit: $limit, cursor: $cursor, filter: $filter) {\n      ... on Runs {\n        results {\n          id\n          ...RunTableRunFragment\n        }\n      }\n      ... on InvalidPipelineRunsFilterError {\n        message\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${RUN_TABLE_RUN_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n"],"names":["partition","createAggregator","result","value","key","push","module","exports","useCanSeeConfig","data","useQuery","INSTANCE_CONFIG_HAS_INFO","instance","hasInfo","gql","getDocumentTitle","selected","useRunListTabs","filter","queryResult","RUN_TABS_COUNT_QUERY","variables","queuedFilter","_swc_helpers_object_spread_props__WEBPACK_IMPORTED_MODULE_9__","_","_swc_helpers_object_spread__WEBPACK_IMPORTED_MODULE_10__","statuses","Array","from","queuedStatuses","inProgressFilter","inProgressStatuses","React","countData","queuedCount","__typename","count","inProgressCount","filterTokens","useQueryPersistedRunFilters","selectedTab","useSelectedRunsTab","useDocumentTitle","urlForStatus","tokensMinusStatus","token","statusTokens","map","status","runsPathWithFilters","_swc_helpers_to_consumable_array__WEBPACK_IMPORTED_MODULE_12__","tabs","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__","jsxs","JoinedButtons","jsx","ActivatableButton","to","id","$active","failedStatuses","title","styled","AnchorButton","colorTextLight","param","css","colorBackgroundLighterHover","colorTextDefault","colorBackgroundDefault","pathname","useLocation","Set","isEqual","DOMNodeHost","node","ref","ownDiv","current","parentNode","Error","appendChild","removeChild","jsx_runtime","div","QueuedRunsBanners","canSeeConfig","Box","flex","direction","gap","style","minWidth","border","Alert","intent","Link","QueueDaemonAlert","QUEUE_DAEMON_STATUS_QUERY","pageTitle","InstancePageContext","daemonHealth","daemonStatus","required","healthy","description","TerminateAllRunsButton","refetch","disabled","terminating","setTerminating","client","useApolloClient","onTerminateAll","_async_to_generator","queuedRunIds","query","TERMINATE_RUN_IDS_QUERY","_state","sent","pipelineRunsOrError","Object","fromEntries","results","run","canTerminate","Fragment","TerminationDialog","isOpen","selectedRuns","selectedRunsAllQueued","onClose","onComplete","Button","outlined","onClick","RunsRoot","targetEl","setTargetEl","actionBar","runQueryResult","width","marginRight","justifyContent","alignItems","filtersSlot","currentTab","combinedRefreshState","undefined","useTrackPageView","setFilterTokens","runsFilterForSearchTokens","useCursorPaginatedQuery","nextCursorForResult","runs","PAGE_SIZE","getResultArray","RUNS_ROOT_QUERY","pageSize","paginationProps","refreshState","useQueryRefreshAtInterval","FIFTEEN_SECONDS","staticStatusTags","nonStatusTokens","setFilterTokensWithStatus","tokens","_to_consumable_array","onAddTag","tokenAsString","tokenToString","some","enabledFilters","filters","mutableTokens","countRefreshState","useMergedRefresh","useRunsFilterInput","onChange","button","activeFiltersJsx","usePortalSlot","e","document","createElement","createPortal","filtersPortal","Page","PageHeader","Heading","right","QueryRefreshCountdown","RunsQueryRefetchContext","Provider","Loading","allowStaleData","renderError","error","badRequest","networkError","statusCode","padding","vertical","left","NonIdealState","icon","message","StickyTableContainer","$top","RunTable","slice","actionBarComponents","belowActionBarComponents","length","ButtonLink","marginTop","CursorHistoryControls","runs_RunsRoot","RUN_TABLE_RUN_FRAGMENT","PYTHON_ERROR_FRAGMENT"],"sourceRoot":""}