# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_dash_example2.ipynb.

# %% auto 0
__all__ = ['companies', 'tickers', 'df', 'external_stylesheets', 'app', 'update_graph']

# %% ../nbs/02_dash_example2.ipynb 2
import buy_and_hold_vs_arima
import yfinance as yf
import pandas as pd
import dash
from dash import dcc
from dash import html
from dash.dependencies import Output, Input
import plotly.express as px
import pandas as pd
import numpy as np

# %% ../nbs/02_dash_example2.ipynb 4
companies = ['AMZN','NFLX','GOOG']
tickers = [yf.Ticker(ticker).history( start='2021-12-10', end='2022-12-30')['High'].rename(ticker) for ticker in companies]

df = pd.concat(tickers, axis=1)
df

for a in df.columns:
    print(a)
    
df[['AMZN','GOOG']]

# %% ../nbs/02_dash_example2.ipynb 5
# http://127.0.0.1:8050/

#df = px.data.gapminder()
#df.columns



external_stylesheets = ["https://codepen.io/chriddyp/pen/bWLwgP.css"]
app = dash.Dash(__name__, external_stylesheets=external_stylesheets)

app.layout = html.Div(
    [
        dcc.Dropdown(
            id="dpdn2",
            value=["AMZN", "GOOG"],
            multi=True,
            options=[{"label": x, "value": x} for x in df.columns],
        ),
        html.Div(
            [
               # dcc.Graph(id="pie-graph", figure={}, className="six columns"),
                dcc.Graph(
                    id="my-graph",
                    figure={},
                    clickData=None,
                    hoverData=None,
                    config={
                        "staticPlot": False,  # True, False
                        "scrollZoom": True,  # True, False
                        "doubleClick": "reset",  # 'reset', 'autosize' or 'reset+autosize', False
                        "showTips": False,  # True, False
                        "displayModeBar": True,  # True, False, 'hover'
                        "watermark": True,
                        # 'modeBarButtonsToAdd': ['pan2d','select2d'],
                    },
                    className="six columns",
                ),
            ]
        ),
    ]
)


@app.callback(
    Output(component_id="my-graph", component_property="figure"),
    Input(component_id="dpdn2", component_property="value"),
)
def update_graph(country_chosen):
    #age_sex = titanic[["Age", "Sex"]]
    print(country_chosen)
    dff = df[country_chosen]
    fig = px.line(
        dff,
        x="Date[Days]",
        y="Stock",
        #color="country",
        #custom_data=["country", "continent", "lifeExp", "pop"],
    )
    fig.update_traces(mode="lines+markers")
    return fig







# %% ../nbs/02_dash_example2.ipynb 6
#if __name__ == "__main__":
#    app.run_server(debug=False)

