# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/routes/role.ipynb.

# %% auto 0
__all__ = ['Role_NotRetrieved', 'get_roles', 'get_role_grants', 'get_role_membership', 'create_role', 'delete_role',
           'get_default_role', 'set_default_role', 'update_role_metadata', 'set_role_grants',
           'role_membership_add_users']

# %% ../../nbs/routes/role.ipynb 2
import httpx

import domolibrary.client.get_data as gd
import domolibrary.client.ResponseGetData as rgd
import domolibrary.client.DomoAuth as dmda
import domolibrary.client.DomoError as de


# %% ../../nbs/routes/role.ipynb 4
class Role_NotRetrieved(de.DomoError):
    def __init__(self,
                 domo_instance,
                 function_name,
                 status,
                 message,
                 role_id = None,
                 ):

        super().__init__(
            domo_instance=domo_instance,
            entity_id=role_id,
            function_name=function_name,
            status=status,
            message=message
        )


# %% ../../nbs/routes/role.ipynb 5
async def get_roles(auth: dmda.DomoAuth,
                    debug_api: bool = False,
                    session: httpx.AsyncClient = None,
                    ) -> rgd.ResponseGetData:
    url = f'https://{auth.domo_instance}.domo.com/api/authorization/v1/roles'

    res = await gd.get_data(
        auth=auth,
        url=url,
        method='GET',
        debug_api=debug_api,
        session=session
    )

    if len(res.response) == 0 or not res.is_success:
        raise Role_NotRetrieved(
            domo_instance=auth.domo_instance,
            function_name='get_roles',
            status=res.status,
            message = 'failed to retrieve roles')
    
    return res


# %% ../../nbs/routes/role.ipynb 8
async def get_role_grants(auth: dmda.DomoAuth,
                          role_id: str,
                          debug_api: bool = False,
                          session : httpx.AsyncClient = None
                          ) -> rgd.ResponseGetData:
    url = f'https://{auth.domo_instance}.domo.com/api/authorization/v1/roles/{role_id}/authorities'

    if debug_api:
        print(url)

    res = await gd.get_data(
        auth=auth,
        url=url,
        method='GET',
        debug_api=debug_api,
        session = session
    )

    if len(res.response) == 0:

        role_res = await get_roles(auth = auth)

        domo_role = [ role for role in role_res.response if role.get('id') ==role_id]

        if not domo_role:
            raise Role_NotRetrieved(
                domo_instance= auth.domo_instance,
                function_name='get_role_grants',
                message=f"role {role_id} does not exist",
                status=res.status
            )

    return res

# %% ../../nbs/routes/role.ipynb 11
async def get_role_membership(auth: dmda.DomoAuth,
                              role_id: str,
                              debug_api: bool = False, 
                              session: httpx.AsyncClient = None,
                              return_raw : bool = False
                              ) -> rgd.ResponseGetData:
    url = f'https://{auth.domo_instance}.domo.com/api/authorization/v1/roles/{role_id}/users'

    if debug_api:
        print(url)

    res = await gd.get_data(
        auth=auth,
        url=url,
        method='GET',
        debug_api=debug_api,
        session=session
    )

    if len(res.response.get('users')) == 0:
        
        role_res = await get_roles(auth)

        domo_role = next((role for role in role_res.response if role.get('id') == role_id), None)

        if not domo_role:
            raise Role_NotRetrieved(
                domo_instance=auth.domo_instance,
                function_name='get_role_membership',
                message=f"role {role_id} does not exist or cannot be retrieved",
                status=res.status
            )

    if return_raw:
        return res
    
    res.response = res.response.get('users')
    
    return res

# %% ../../nbs/routes/role.ipynb 15
async def create_role(auth: dmda.DomoAuth,
                      name: str,
                      description: str,
                      debug_api: bool = False,
                      session :httpx.AsyncClient = None
                      ) -> rgd.ResponseGetData:
    url = f'https://{auth.domo_instance}.domo.com/api/authorization/v1/roles'

    body = {
        'name': name,
        'description': description
    }

    res = await gd.get_data(
        auth=auth,
        url=url,
        method='POST',
        debug_api=debug_api,
        body=body,
        session = session
    )

    return res

# %% ../../nbs/routes/role.ipynb 16
async def delete_role(auth: dmda.DomoAuth,
                      role_id: int,
                      debug_api: bool = False,
                      session: httpx.AsyncClient = None
                      ) -> rgd.ResponseGetData:
    
    url = f'https://{auth.domo_instance}.domo.com/api/authorization/v1/roles/{role_id}'

    res = await gd.get_data(
        auth=auth,
        url=url,
        method='DELETE',
        debug_api=debug_api,
        session=session
    )

    if res.is_success:
        res.response = f"role {role_id} deleted or doesn't exist"

    return res


# %% ../../nbs/routes/role.ipynb 20
async def get_default_role(auth, debug_api: bool = False, session :httpx.AsyncClient= None):

    url = f"https://{auth.domo_instance}.domo.com/api/content/v1/customer-states/user.roleid.default"

    params = {'defaultValue': 2, 'ignoreCache': True}

    res = await gd.get_data(auth=auth,
                             method='GET',
                             url=url,
                             params=params,
                             debug_api=debug_api, session = session)

    
    if res.is_success:
        res.response = res.response.get('value')
    
    return res



# %% ../../nbs/routes/role.ipynb 23
async def set_default_role(auth: dmda.DomoAuth,
                           role_id: str,
                           debug_api: bool = False,
                           session: httpx.AsyncClient = None) -> rgd.ResponseGetData:
    url = f'https://{auth.domo_instance}.domo.com/api/content/v1/customer-states/user.roleid.default'

    body = {
        'name': 'user.roleid.default',
        'value': role_id
    }

    res = await gd.get_data(
        auth=auth,
        url=url,
        method='PUT',
        debug_api=debug_api,
        body=body,
        session=session
    )
    return res


# %% ../../nbs/routes/role.ipynb 25
async def update_role_metadata(auth: dmda.DomoAuth,
                               role_id,
                               role_name,
                               role_description: str = None,
                               debug_api: bool = False,
                               session : httpx.AsyncClient = None
                               ):

    url = f"https://{auth.domo_instance}.domo.com/api/authorization/v1/roles/{role_id}"

    body = {"name": role_name,
            "description": role_description, "id": role_id}

    res = await gd.get_data(
        auth=auth,
        url=url,
        method='PUT',
        debug_api=debug_api,
        body=body,
        session=session
    )

    
    return res


# %% ../../nbs/routes/role.ipynb 28
async def set_role_grants(auth: dmda.DomoAuth,
                             role_id: str,
                             role_grant_ls: list[str],
                             debug_api: bool = False) -> rgd.ResponseGetData:
    url = f'https://{auth.domo_instance}.domo.com/api/authorization/v1/roles/{role_id}/authorities'

    if debug_api:
        print(url)

    res = await gd.get_data(auth=auth,
                         url=url,
                         method='PUT',
                         debug_api=debug_api, body=role_grant_ls)
    return res

# %% ../../nbs/routes/role.ipynb 29
async def role_membership_add_users(auth: dmda.DomoAuth,
                                   role_id: str,
                                   user_list: list[str], # list of user ids
                                   debug_api: bool = False,
                                   session : httpx.AsyncClient = None
                                   ) -> rgd.ResponseGetData:
    url = f'https://{auth.domo_instance}.domo.com/api/authorization/v1/roles/{role_id}/users'

    res = await gd.get_data(
        auth=auth,
        url=url,
        method='PUT',
        debug_api=debug_api,
        body=user_list,
        session = session
    )
    return res
