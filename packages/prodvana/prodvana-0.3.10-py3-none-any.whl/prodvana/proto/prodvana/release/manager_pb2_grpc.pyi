"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import collections.abc
import grpc
import prodvana.proto.prodvana.release.manager_pb2

class ReleaseManagerStub:
    def __init__(self, channel: grpc.Channel) -> None: ...
    RecordRelease: grpc.UnaryUnaryMultiCallable[
        prodvana.proto.prodvana.release.manager_pb2.RecordReleaseReq,
        prodvana.proto.prodvana.release.manager_pb2.RecordReleaseResp,
    ]
    UpdateReleaseStatus: grpc.UnaryUnaryMultiCallable[
        prodvana.proto.prodvana.release.manager_pb2.UpdateReleaseStatusReq,
        prodvana.proto.prodvana.release.manager_pb2.UpdateReleaseStatusResp,
    ]
    ListReleases: grpc.UnaryUnaryMultiCallable[
        prodvana.proto.prodvana.release.manager_pb2.ListReleasesReq,
        prodvana.proto.prodvana.release.manager_pb2.ListReleasesResp,
    ]
    ListReleasesStream: grpc.UnaryStreamMultiCallable[
        prodvana.proto.prodvana.release.manager_pb2.ListReleasesReq,
        prodvana.proto.prodvana.release.manager_pb2.ListReleasesResp,
    ]
    """page tokens arguments are ignored here"""
    CompareRelease: grpc.UnaryUnaryMultiCallable[
        prodvana.proto.prodvana.release.manager_pb2.CompareReleaseReq,
        prodvana.proto.prodvana.release.manager_pb2.CompareReleaseResp,
    ]
    PreviewRelease: grpc.UnaryUnaryMultiCallable[
        prodvana.proto.prodvana.release.manager_pb2.PreviewReleaseReq,
        prodvana.proto.prodvana.release.manager_pb2.PreviewReleaseResp,
    ]
    GetLatestReleases: grpc.UnaryUnaryMultiCallable[
        prodvana.proto.prodvana.release.manager_pb2.GetLatestReleasesReq,
        prodvana.proto.prodvana.release.manager_pb2.GetLatestReleasesResp,
    ]
    """returns the latest releases for each (application, service, release channel) tuple."""
    CheckCommitInRelease: grpc.UnaryUnaryMultiCallable[
        prodvana.proto.prodvana.release.manager_pb2.CheckCommitInReleaseReq,
        prodvana.proto.prodvana.release.manager_pb2.CheckCommitInReleaseResp,
    ]

class ReleaseManagerServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def RecordRelease(
        self,
        request: prodvana.proto.prodvana.release.manager_pb2.RecordReleaseReq,
        context: grpc.ServicerContext,
    ) -> prodvana.proto.prodvana.release.manager_pb2.RecordReleaseResp: ...
    @abc.abstractmethod
    def UpdateReleaseStatus(
        self,
        request: prodvana.proto.prodvana.release.manager_pb2.UpdateReleaseStatusReq,
        context: grpc.ServicerContext,
    ) -> prodvana.proto.prodvana.release.manager_pb2.UpdateReleaseStatusResp: ...
    @abc.abstractmethod
    def ListReleases(
        self,
        request: prodvana.proto.prodvana.release.manager_pb2.ListReleasesReq,
        context: grpc.ServicerContext,
    ) -> prodvana.proto.prodvana.release.manager_pb2.ListReleasesResp: ...
    @abc.abstractmethod
    def ListReleasesStream(
        self,
        request: prodvana.proto.prodvana.release.manager_pb2.ListReleasesReq,
        context: grpc.ServicerContext,
    ) -> collections.abc.Iterator[prodvana.proto.prodvana.release.manager_pb2.ListReleasesResp]:
        """page tokens arguments are ignored here"""
    @abc.abstractmethod
    def CompareRelease(
        self,
        request: prodvana.proto.prodvana.release.manager_pb2.CompareReleaseReq,
        context: grpc.ServicerContext,
    ) -> prodvana.proto.prodvana.release.manager_pb2.CompareReleaseResp: ...
    @abc.abstractmethod
    def PreviewRelease(
        self,
        request: prodvana.proto.prodvana.release.manager_pb2.PreviewReleaseReq,
        context: grpc.ServicerContext,
    ) -> prodvana.proto.prodvana.release.manager_pb2.PreviewReleaseResp: ...
    @abc.abstractmethod
    def GetLatestReleases(
        self,
        request: prodvana.proto.prodvana.release.manager_pb2.GetLatestReleasesReq,
        context: grpc.ServicerContext,
    ) -> prodvana.proto.prodvana.release.manager_pb2.GetLatestReleasesResp:
        """returns the latest releases for each (application, service, release channel) tuple."""
    @abc.abstractmethod
    def CheckCommitInRelease(
        self,
        request: prodvana.proto.prodvana.release.manager_pb2.CheckCommitInReleaseReq,
        context: grpc.ServicerContext,
    ) -> prodvana.proto.prodvana.release.manager_pb2.CheckCommitInReleaseResp: ...

def add_ReleaseManagerServicer_to_server(servicer: ReleaseManagerServicer, server: grpc.Server) -> None: ...
