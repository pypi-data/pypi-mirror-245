#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Thu May  6 11:00:09 2021 by generateDS.py version 2.38.6.
# Python 3.8.6 (v3.8.6:db455296be, Sep 23 2020, 13:31:39)  [Clang 6.0 (clang-600.0.57)]
#
# Command line options:
#   ('--no-namespace-defs', '')
#   ('-o', './fedex_lib/validation_availability_and_commitment_service_v15.py')
#
# Command line arguments:
#   /Users/danielkobina/Workspace/Carriers Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd
#
# Command line:
#   /Users/danielkobina/Workspace/project/purplship-carriers/.venv/purplship-carriers/bin/generateDS --no-namespace-defs -o "./fedex_lib/validation_availability_and_commitment_service_v15.py" /Users/danielkobina/Workspace/Carriers Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd
#
# Current working directory (os.getcwd()):
#   fedex
#

import sys
try:
    ModulenotfoundExp_ = ModuleNotFoundError
except NameError:
    ModulenotfoundExp_ = ImportError
from six.moves import zip_longest
import os
import re as re_
import base64
import datetime as datetime_
import decimal as decimal_
try:
    from lxml import etree as etree_
except ModulenotfoundExp_ :
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
SaveElementTreeNode = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    try:
        if isinstance(infile, os.PathLike):
            infile = os.path.join(infile)
    except AttributeError:
        pass
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for an example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#
# Additionally, the generatedsnamespaces module can contain a python
# dictionary named GenerateDSNamespaceTypePrefixes that associates element
# types with the namespace prefixes that are to be added to the
# "xsi:type" attribute value.  See the exportAttributes method of
# any generated element type and the generation of "xsi:type" for an
# example of the use of this table.
# An example table:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceTypePrefixes = {
#         "ElementtypeC": "aaa:",
#         "ElementtypeD": "bbb:",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ModulenotfoundExp_ :
    GenerateDSNamespaceDefs_ = {}
try:
    from generatedsnamespaces import GenerateDSNamespaceTypePrefixes as GenerateDSNamespaceTypePrefixes_
except ModulenotfoundExp_ :
    GenerateDSNamespaceTypePrefixes_ = {}

#
# You can replace the following class definition by defining an
# importable module named "generatedscollector" containing a class
# named "GdsCollector".  See the default class definition below for
# clues about the possible content of that class.
#
try:
    from generatedscollector import GdsCollector as GdsCollector_
except ModulenotfoundExp_ :

    class GdsCollector_(object):

        def __init__(self, messages=None):
            if messages is None:
                self.messages = []
            else:
                self.messages = messages

        def add_message(self, msg):
            self.messages.append(msg)

        def get_messages(self):
            return self.messages

        def clear_messages(self):
            self.messages = []

        def print_messages(self):
            for msg in self.messages:
                print("Warning: {}".format(msg))

        def write_messages(self, outstream):
            for msg in self.messages:
                outstream.write("Warning: {}\n".format(msg))


#
# The super-class for enum types
#

try:
    from enum import Enum
except ModulenotfoundExp_ :
    Enum = object

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ModulenotfoundExp_ as exp:
    
    class GeneratedsSuper(object):
        __hash__ = object.__hash__
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_parse_string(self, input_data, node=None, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_parse_integer(self, input_data, node=None, input_name=''):
            try:
                ival = int(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires integer value: %s' % exp)
            return ival
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            try:
                value = int(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires integer value')
            return value
        def gds_format_integer_list(self, input_data, input_name=''):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integer values')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_parse_float(self, input_data, node=None, input_name=''):
            try:
                fval_ = float(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires float or double value: %s' % exp)
            return fval_
        def gds_validate_float(self, input_data, node=None, input_name=''):
            try:
                value = float(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires float value')
            return value
        def gds_format_float_list(self, input_data, input_name=''):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of float values')
            return values
        def gds_format_decimal(self, input_data, input_name=''):
            return_value = '%s' % input_data
            if '.' in return_value:
                return_value = return_value.rstrip('0')
                if return_value.endswith('.'):
                    return_value = return_value.rstrip('.')
            return return_value
        def gds_parse_decimal(self, input_data, node=None, input_name=''):
            try:
                decimal_value = decimal_.Decimal(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires decimal value')
            return decimal_value
        def gds_validate_decimal(self, input_data, node=None, input_name=''):
            try:
                value = decimal_.Decimal(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires decimal value')
            return value
        def gds_format_decimal_list(self, input_data, input_name=''):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return ' '.join([self.gds_format_decimal(item) for item in input_data])
        def gds_validate_decimal_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    decimal_.Decimal(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of decimal values')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_parse_double(self, input_data, node=None, input_name=''):
            try:
                fval_ = float(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires double or float value: %s' % exp)
            return fval_
        def gds_validate_double(self, input_data, node=None, input_name=''):
            try:
                value = float(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires double or float value')
            return value
        def gds_format_double_list(self, input_data, input_name=''):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(
                        node, 'Requires sequence of double or float values')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_parse_boolean(self, input_data, node=None, input_name=''):
            if input_data in ('true', '1'):
                bval = True
            elif input_data in ('false', '0'):
                bval = False
            else:
                raise_parse_error(node, 'Requires boolean value')
            return bval
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            if input_data not in (True, 1, False, 0, ):
                raise_parse_error(
                    node,
                    'Requires boolean value '
                    '(one of True, 1, False, 0)')
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                value = self.gds_parse_boolean(value, node, input_name)
                if value not in (True, 1, False, 0, ):
                    raise_parse_error(
                        node,
                        'Requires sequence of boolean values '
                        '(one of True, 1, False, 0)')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (
                    time_parts[0], "{}".format(micro_seconds).rjust(6, "0"), )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.
            # The target value must match at least one of the patterns
            # in order for the test to succeed.
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    mo = re_.search(patterns2, target)
                    if mo is not None and len(mo.group(0)) == len(target):
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_check_cardinality_(
                self, value, input_name,
                min_occurs=0, max_occurs=1, required=None):
            if value is None:
                length = 0
            elif isinstance(value, list):
                length = len(value)
            else:
                length = 1
            if required is not None :
                if required and length < 1:
                    self.gds_collector_.add_message(
                        "Required value {}{} is missing".format(
                            input_name, self.gds_get_node_lineno_()))
            if length < min_occurs:
                self.gds_collector_.add_message(
                    "Number of values for {}{} is below "
                    "the minimum allowed, "
                    "expected at least {}, found {}".format(
                        input_name, self.gds_get_node_lineno_(),
                        min_occurs, length))
            elif length > max_occurs:
                self.gds_collector_.add_message(
                    "Number of values for {}{} is above "
                    "the maximum allowed, "
                    "expected at most {}, found {}".format(
                        input_name, self.gds_get_node_lineno_(),
                        max_occurs, length))
        def gds_validate_builtin_ST_(
                self, validator, value, input_name,
                min_occurs=None, max_occurs=None, required=None):
            if value is not None:
                try:
                    validator(value, input_name=input_name)
                except GDSParseError as parse_error:
                    self.gds_collector_.add_message(str(parse_error))
        def gds_validate_defined_ST_(
                self, validator, value, input_name,
                min_occurs=None, max_occurs=None, required=None):
            if value is not None:
                try:
                    validator(value)
                except GDSParseError as parse_error:
                    self.gds_collector_.add_message(str(parse_error))
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            # provide default value in case option --disable-xml is used.
            content = ""
            content = etree_.tostring(node, encoding="unicode")
            return content
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.items()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                if ExternalEncoding:
                    encoding = ExternalEncoding
                else:
                    encoding = 'utf-8'
                return instring.encode(encoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            def excl_select_objs_(obj):
                return (obj[0] != 'parent_object_' and
                        obj[0] != 'gds_collector_')
            if type(self) != type(other):
                return False
            return all(x == y for x, y in zip_longest(
                filter(excl_select_objs_, self.__dict__.items()),
                filter(excl_select_objs_, other.__dict__.items())))
        def __ne__(self, other):
            return not self.__eq__(other)
        # Django ETL transform hooks.
        def gds_djo_etl_transform(self):
            pass
        def gds_djo_etl_transform_db_obj(self, dbobj):
            pass
        # SQLAlchemy ETL transform hooks.
        def gds_sqa_etl_transform(self):
            return 0, None
        def gds_sqa_etl_transform_db_obj(self, dbobj):
            pass
        def gds_get_node_lineno_(self):
            if (hasattr(self, "gds_elementtree_node_") and
                    self.gds_elementtree_node_ is not None):
                return ' near line {}'.format(
                    self.gds_elementtree_node_.sourceline)
            else:
                return ""
    
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = ''
# Set this to false in order to deactivate during export, the use of
# name space prefixes captured from the input document.
UseCapturedNS_ = True
CapturedNsmap_ = {}
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        if prefix == 'xml':
            namespace = 'http://www.w3.org/XML/1998/namespace'
        else:
            namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


def encode_str_2_3(instr):
    return instr


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    if node is not None:
        msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name_=name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element, mapping_=None, nsmap_=None):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self, mapping_=None, nsmap_=None):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class AccessorRoleType(str, Enum):
    """Specifies the role that identifies the permissions the accessor of the
    pending shipment."""
    SHIPMENT_COMPLETOR='SHIPMENT_COMPLETOR'
    SHIPMENT_INITIATOR='SHIPMENT_INITIATOR'


class AccountAliasAttributeType(str, Enum):
    INCLUDE_ALIAS_ON_BOL='INCLUDE_ALIAS_ON_BOL'
    PRIMARY_ACCOUNT_ALIAS_IS_RESPONSIBLE_FOR_PAYMENT='PRIMARY_ACCOUNT_ALIAS_IS_RESPONSIBLE_FOR_PAYMENT'


class AccountAliasType(str, Enum):
    BILLING='BILLING'
    ENTERPRISE='ENTERPRISE'
    PRIMARY_ACCOUNT='PRIMARY_ACCOUNT'


class AdditionalLabelsType(str, Enum):
    BROKER='BROKER'
    CONSIGNEE='CONSIGNEE'
    CUSTOMS='CUSTOMS'
    DESTINATION='DESTINATION'
    DESTINATION_CONTROL_STATEMENT='DESTINATION_CONTROL_STATEMENT'
    FREIGHT_REFERENCE='FREIGHT_REFERENCE'
    MANIFEST='MANIFEST'
    ORIGIN='ORIGIN'
    RECIPIENT='RECIPIENT'
    SECOND_ADDRESS='SECOND_ADDRESS'
    SHIPPER='SHIPPER'


class AddressVerificationOverrideReasonType(str, Enum):
    """Specifies the reason to override address verification."""
    CUSTOMER_PREFERENCE='CUSTOMER_PREFERENCE'
    CUSTOMER_PROVIDED_PROOF='CUSTOMER_PROVIDED_PROOF'
    MANUAL_VALIDATION='MANUAL_VALIDATION'


class AlcoholRecipientType(str, Enum):
    """Specifies the type of license that the recipient of the alcohol shipment
    has."""
    CONSUMER='CONSUMER'
    LICENSEE='LICENSEE'


class AssociatedAccountNumberType(str, Enum):
    """This enumeration represents a kind of "legacy" account number from a
    FedEx operating entity."""
    FEDEX_EXPRESS='FEDEX_EXPRESS'
    FEDEX_FREIGHT='FEDEX_FREIGHT'
    FEDEX_GROUND='FEDEX_GROUND'
    FEDEX_OFFICE='FEDEX_OFFICE'


class AssociatedTrackingIdType(str, Enum):
    """Specifies a relationship between two tracking IDs (the role of the
    "other" tracking ID relative to "this" tracking ID)."""
    COD_RETURN='COD_RETURN'
    CONSOLIDATION_DOCUMENTS='CONSOLIDATION_DOCUMENTS'
    CONSOLIDATION_MASTER='CONSOLIDATION_MASTER'
    DELIVERY_ON_INVOICE_ACCEPTANCE_RETURN='DELIVERY_ON_INVOICE_ACCEPTANCE_RETURN'


class AutoConfigurationType(str, Enum):
    ENTERPRISE='ENTERPRISE'
    SHIPPING_SERVICE_PROVIDER='SHIPPING_SERVICE_PROVIDER'
    SOFTWARE_ONLY='SOFTWARE_ONLY'
    TRADITIONAL='TRADITIONAL'


class B13AFilingOptionType(str, Enum):
    FEDEX_TO_STAMP='FEDEX_TO_STAMP'
    FILED_ELECTRONICALLY='FILED_ELECTRONICALLY'
    MANUALLY_ATTACHED='MANUALLY_ATTACHED'
    NOT_REQUIRED='NOT_REQUIRED'
    SUMMARY_REPORTING='SUMMARY_REPORTING'


class BarcodeSymbologyType(str, Enum):
    """Identification of the type of barcode (symbology) used on FedEx
    documents and labels."""
    CODABAR='CODABAR'
    CODE_128='CODE128'
    CODE_128_B='CODE128B'
    CODE_128_C='CODE128C'
    CODE_128_WIDEBAR='CODE128_WIDEBAR'
    CODE_39='CODE39'
    CODE_93='CODE93'
    I_2_OF_5='I2OF5'
    MANUAL='MANUAL'
    PDF_417='PDF417'
    POSTNET='POSTNET'
    QR_CODE='QR_CODE'
    UCC_128='UCC128'


class BatteryMaterialType(str, Enum):
    """Describes the material composition of a battery or cell."""
    LITHIUM_ION='LITHIUM_ION'
    LITHIUM_METAL='LITHIUM_METAL'
    UNKNOWN='UNKNOWN'


class BatteryPackingType(str, Enum):
    """Describes the packing arrangement of a battery or cell with respect to
    other items within the same package."""
    CONTAINED_IN_EQUIPMENT='CONTAINED_IN_EQUIPMENT'
    PACKED_WITH_EQUIPMENT='PACKED_WITH_EQUIPMENT'
    UNKNOWN='UNKNOWN'


class BatteryRegulatorySubType(str, Enum):
    """A regulation specific classification for a battery or cell."""
    IATA_SECTION_II='IATA_SECTION_II'


class BillingAccountAttributeType(str, Enum):
    CONSOLIDATE_INVOICES_INTO_PARENT_ACCOUNT='CONSOLIDATE_INVOICES_INTO_PARENT_ACCOUNT'


class BrokerType(str, Enum):
    EXPORT='EXPORT'
    IMPORT='IMPORT'


class CarrierCodeType(str, Enum):
    """Identification of a FedEx operating company (transportation)."""
    FDXC='FDXC'
    FDXE='FDXE'
    FDXG='FDXG'
    FDXO='FDXO'
    FXCC='FXCC'
    FXFR='FXFR'
    FXSP='FXSP'


class ChargeBasisLevelType(str, Enum):
    CURRENT_PACKAGE='CURRENT_PACKAGE'
    SUM_OF_PACKAGES='SUM_OF_PACKAGES'


class ChargeClassificationType(str, Enum):
    DUTIES_AND_TAXES='DUTIES_AND_TAXES'
    TRANSPORTATION='TRANSPORTATION'


class ClearanceBrokerageType(str, Enum):
    """Specifies the type of brokerage to be applied to a shipment."""
    BROKER_INCLUSIVE='BROKER_INCLUSIVE'
    BROKER_INCLUSIVE_NON_RESIDENT_IMPORTER='BROKER_INCLUSIVE_NON_RESIDENT_IMPORTER'
    BROKER_SELECT='BROKER_SELECT'
    BROKER_SELECT_NON_RESIDENT_IMPORTER='BROKER_SELECT_NON_RESIDENT_IMPORTER'
    BROKER_UNASSIGNED='BROKER_UNASSIGNED'


class CodAddTransportationChargeBasisType(str, Enum):
    COD_SURCHARGE='COD_SURCHARGE'
    NET_CHARGE='NET_CHARGE'
    NET_FREIGHT='NET_FREIGHT'
    TOTAL_CUSTOMER_CHARGE='TOTAL_CUSTOMER_CHARGE'


class CodCollectionType(str, Enum):
    """Identifies the type of funds FedEx should collect upon shipment
    delivery."""
    ANY='ANY'
    CASH='CASH'
    COMPANY_CHECK='COMPANY_CHECK'
    GUARANTEED_FUNDS='GUARANTEED_FUNDS'
    PERSONAL_CHECK='PERSONAL_CHECK'


class CodReturnReferenceIndicatorType(str, Enum):
    INVOICE='INVOICE'
    PO='PO'
    REFERENCE='REFERENCE'
    TRACKING='TRACKING'


class CommitDetailType(str, Enum):
    PLANNED='PLANNED'
    REAL_TIME='REAL_TIME'


class CommitmentDelayType(str, Enum):
    """The type of delay this shipment will encounter."""
    HOLIDAY='HOLIDAY'
    NON_WORKDAY='NON_WORKDAY'
    NO_CITY_DELIVERY='NO_CITY_DELIVERY'
    NO_HOLD_AT_LOCATION='NO_HOLD_AT_LOCATION'
    NO_LOCATION_DELIVERY='NO_LOCATION_DELIVERY'
    NO_SERVICE_AREA_DELIVERY='NO_SERVICE_AREA_DELIVERY'
    NO_SERVICE_AREA_SPECIAL_SERVICE_DELIVERY='NO_SERVICE_AREA_SPECIAL_SERVICE_DELIVERY'
    NO_SPECIAL_SERVICE_DELIVERY='NO_SPECIAL_SERVICE_DELIVERY'
    NO_ZIP_DELIVERY='NO_ZIP_DELIVERY'
    WEEKEND='WEEKEND'
    WEEKEND_SPECIAL='WEEKEND_SPECIAL'


class CommodityPurposeType(str, Enum):
    BUSINESS='BUSINESS'
    CONSUMER='CONSUMER'


class CompletedEtdType(str, Enum):
    ELECTRONIC_DOCUMENTS_ONLY='ELECTRONIC_DOCUMENTS_ONLY'
    ELECTRONIC_DOCUMENTS_WITH_ORIGINALS='ELECTRONIC_DOCUMENTS_WITH_ORIGINALS'


class ConsolidationShipmentRoleType(str, Enum):
    CONSOLIDATION_DOCUMENTS_SHIPMENT='CONSOLIDATION_DOCUMENTS_SHIPMENT'
    CRN_SHIPMENT='CRN_SHIPMENT'
    MASTER_AIRWAYBILL_SHIPMENT='MASTER_AIRWAYBILL_SHIPMENT'


class ConsolidationSpecialServiceType(str, Enum):
    BROKER_SELECT_OPTION='BROKER_SELECT_OPTION'
    PRIORITY_ALERT='PRIORITY_ALERT'
    SATURDAY_PICKUP='SATURDAY_PICKUP'


class ConsolidationType(str, Enum):
    INTERNATIONAL_DISTRIBUTION_FREIGHT='INTERNATIONAL_DISTRIBUTION_FREIGHT'
    INTERNATIONAL_ECONOMY_DISTRIBUTION='INTERNATIONAL_ECONOMY_DISTRIBUTION'
    INTERNATIONAL_GROUND_DIRECT_DISTRIBUTION='INTERNATIONAL_GROUND_DIRECT_DISTRIBUTION'
    INTERNATIONAL_GROUND_DISTRIBUTION='INTERNATIONAL_GROUND_DISTRIBUTION'
    INTERNATIONAL_PRIORITY_DISTRIBUTION='INTERNATIONAL_PRIORITY_DISTRIBUTION'
    TRANSBORDER_DISTRIBUTION='TRANSBORDER_DISTRIBUTION'


class CorrespondenceType(str, Enum):
    DIRECT_MAIL='DIRECT_MAIL'
    EMAIL='EMAIL'
    SOCIAL_MEDIA='SOCIAL_MEDIA'
    TEXT_MESSAGE='TEXT_MESSAGE'


class CreditCardAuthorizationType(str, Enum):
    AUTHORIZE_NON_ACCOUNT='AUTHORIZE_NON_ACCOUNT'
    AUTHORIZE_WITH_ACCOUNT='AUTHORIZE_WITH_ACCOUNT'
    VERIFY_WITH_ACCOUNT='VERIFY_WITH_ACCOUNT'


class CreditCardSettlementScheduleType(str, Enum):
    SETTLE_IMMEDIATELY='SETTLE_IMMEDIATELY'
    SETTLE_NEXT_DAY='SETTLE_NEXT_DAY'
    SETTLE_ON_DELIVERY='SETTLE_ON_DELIVERY'


class CreditCardTransactionAttributeType(str, Enum):
    ORIGINATED_BY_AUTHORIZED_PERSONNEL='ORIGINATED_BY_AUTHORIZED_PERSONNEL'
    ORIGINATED_BY_UNAUTHORIZED_PERSONNEL='ORIGINATED_BY_UNAUTHORIZED_PERSONNEL'


class CreditCardType(str, Enum):
    AMEX='AMEX'
    DANKORT='DANKORT'
    DINERS='DINERS'
    DISCOVER='DISCOVER'
    JCB='JCB'
    MASTERCARD='MASTERCARD'
    VISA='VISA'


class CustomDeliveryWindowType(str, Enum):
    AFTER='AFTER'
    BEFORE='BEFORE'
    BETWEEN='BETWEEN'
    ON='ON'


class CustomLabelCoordinateUnits(str, Enum):
    MILS='MILS'
    PIXELS='PIXELS'


class CustomRatingOptionType(str, Enum):
    DISCOUNT_EXCLUSION='DISCOUNT_EXCLUSION'


class CustomerAccountEntityType(str, Enum):
    BUSINESS='BUSINESS'
    INDIVIDUAL='INDIVIDUAL'


class CustomerAccountManagementStatusType(str, Enum):
    ABUSED='ABUSED'
    ACCOUNT_EXCEPTION='ACCOUNT_EXCEPTION'
    DELETED_BY_REQUEST='DELETED_BY_REQUEST'
    DELETED_BY_SYSTEM='DELETED_BY_SYSTEM'
    MAILING_ADDRESS_SPECIFIED='MAILING_ADDRESS_SPECIFIED'
    MODIFIED='MODIFIED'
    NOT_MODIFIED='NOT_MODIFIED'
    REINSTATED='REINSTATED'
    UNABLE_TO_LOCATE_CUSTOMER='UNABLE_TO_LOCATE_CUSTOMER'


class CustomerAccountStatusType(str, Enum):
    ACTIVE='ACTIVE'
    CASH='CASH'
    DEACTIVATED='DEACTIVATED'


class CustomerAccountType(str, Enum):
    ACTIVATION_DESK='ACTIVATION_DESK'
    AIR_CARGO='AIR_CARGO'
    AIR_CARGO_BILLING='AIR_CARGO_BILLING'
    ANY='ANY'
    BILLING='BILLING'
    BROKER='BROKER'
    BUSINESS='BUSINESS'
    CATALOG_SHIPPER='CATALOG_SHIPPER'
    CITY_CENTER='CITY_CENTER'
    EMPLOYEE='EMPLOYEE'
    FREIGHT_FORWARDER='FREIGHT_FORWARDER'
    GLOBAL_SERVICE_PROVIDER='GLOBAL_SERVICE_PROVIDER'
    GOVERNMENT='GOVERNMENT'
    INDIVIDUAL='INDIVIDUAL'
    INTERLINE_CUSTOMER='INTERLINE_CUSTOMER'
    INTERNAL_CONTROL_ACCOUNT='INTERNAL_CONTROL_ACCOUNT'
    INTERNAL_TESTING_ACCOUNT='INTERNAL_TESTING_ACCOUNT'
    INVOICING='INVOICING'
    JOINT_VENTURE_PARTNER='JOINT_VENTURE_PARTNER'
    KINKOS_RETAIL_OPERATIONS='KINKOS_RETAIL_OPERATIONS'
    MIDDLEMAN='MIDDLEMAN'
    NATIONAL='NATIONAL'
    NON_INVOICING='NON_INVOICING'
    NON_PROFIT='NON_PROFIT'
    NON_REVENUE='NON_REVENUE'
    OTHER='OTHER'
    PACKAGE_CONSOLIDATOR='PACKAGE_CONSOLIDATOR'
    POLITICAL_CAMPAIGN='POLITICAL_CAMPAIGN'
    RESIDENTIAL_BUSINESS='RESIDENTIAL_BUSINESS'
    SHIPPER='SHIPPER'


class CustomerBillingSettlementLevelType(str, Enum):
    INVOICE='INVOICE'
    LINE_ITEM='LINE_ITEM'


class CustomerCashType(str, Enum):
    """Indication of cash-only account standing."""
    BAD='BAD'
    GOOD='GOOD'


class CustomerDetailType(str, Enum):
    FULL='FULL'
    INTERACTIVE='INTERACTIVE'
    MINIMUM='MINIMUM'


class CustomerImageUsageType(str, Enum):
    LETTER_HEAD='LETTER_HEAD'
    SIGNATURE='SIGNATURE'


class CustomerIntegrationModeType(str, Enum):
    """The Customer Integration Mode Type is intended to provide clients the
    ability to know how new products like special services can be
    supported. Some special services are STANDARD and can be supported with
    just the special service type in the request. CUSTOM special services
    will require the client application to send more information. For
    example, HOLD_AT_LOCATION requires the holdAtLocationDetail to be
    populated."""
    CUSTOM='CUSTOM'
    STANDARD='STANDARD'


class CustomerReferenceType(str, Enum):
    BILL_OF_LADING='BILL_OF_LADING'
    CUSTOMER_REFERENCE='CUSTOMER_REFERENCE'
    DEPARTMENT_NUMBER='DEPARTMENT_NUMBER'
    ELECTRONIC_PRODUCT_CODE='ELECTRONIC_PRODUCT_CODE'
    INTRACOUNTRY_REGULATORY_REFERENCE='INTRACOUNTRY_REGULATORY_REFERENCE'
    INVOICE_NUMBER='INVOICE_NUMBER'
    P_O_NUMBER='P_O_NUMBER'
    RMA_ASSOCIATION='RMA_ASSOCIATION'
    SHIPMENT_INTEGRITY='SHIPMENT_INTEGRITY'
    STORE_NUMBER='STORE_NUMBER'


class CustomerSpecifiedLabelGenerationOptionType(str, Enum):
    CONTENT_ON_SHIPPING_LABEL_ONLY='CONTENT_ON_SHIPPING_LABEL_ONLY'
    CONTENT_ON_SHIPPING_LABEL_PREFERRED='CONTENT_ON_SHIPPING_LABEL_PREFERRED'
    CONTENT_ON_SUPPLEMENTAL_LABEL_ONLY='CONTENT_ON_SUPPLEMENTAL_LABEL_ONLY'


class CustomsOptionType(str, Enum):
    COURTESY_RETURN_LABEL='COURTESY_RETURN_LABEL'
    EXHIBITION_TRADE_SHOW='EXHIBITION_TRADE_SHOW'
    FAULTY_ITEM='FAULTY_ITEM'
    FOLLOWING_REPAIR='FOLLOWING_REPAIR'
    FOR_REPAIR='FOR_REPAIR'
    ITEM_FOR_LOAN='ITEM_FOR_LOAN'
    OTHER='OTHER'
    REJECTED='REJECTED'
    REPLACEMENT='REPLACEMENT'
    TRIAL='TRIAL'


class DamageStatusType(str, Enum):
    """Indicates the damage status of a package."""
    DAMAGE_KNOWN='DAMAGE_KNOWN'
    NO_KNOWN_DAMAGE='NO_KNOWN_DAMAGE'


class DangerousGoodsAccessibilityType(str, Enum):
    ACCESSIBLE='ACCESSIBLE'
    INACCESSIBLE='INACCESSIBLE'


class DangerousGoodsDescriptorType(str, Enum):
    """FEDEX INTERNAL USE ONLY: Describes the characteristics of the dangerous
    goods inferred from the commodity data."""
    ALCOHOLIC_BEVERAGE='ALCOHOLIC_BEVERAGE'
    DRY_ICE='DRY_ICE'
    EMERGENCY_CONTACT_PHONE_REQUIRED='EMERGENCY_CONTACT_PHONE_REQUIRED'
    EXCEPTED_QUANTITIES='EXCEPTED_QUANTITIES'
    INFECTIOUS_SUBSTANCE='INFECTIOUS_SUBSTANCE'
    RADIOACTIVE='RADIOACTIVE'


class DangerousGoodsPackingOptionType(str, Enum):
    OVERPACK='OVERPACK'


class DayOfWeekType(str, Enum):
    FRI='FRI'
    MON='MON'
    SAT='SAT'
    SUN='SUN'
    THU='THU'
    TUE='TUE'
    WED='WED'


class DelayLevelType(str, Enum):
    """The attribute of the shipment that caused the delay(e.g. Country, City,
    LocationId, Zip, service area, special handling )"""
    CITY='CITY'
    COUNTRY='COUNTRY'
    LOCATION='LOCATION'
    POSTAL_CODE='POSTAL_CODE'
    SERVICE_AREA='SERVICE_AREA'
    SERVICE_AREA_SPECIAL_SERVICE='SERVICE_AREA_SPECIAL_SERVICE'
    SPECIAL_SERVICE='SPECIAL_SERVICE'


class DelayPointType(str, Enum):
    """The point where the delay is occurring ( e.g. Origin, Destination,
    Broker location)."""
    BROKER='BROKER'
    DESTINATION='DESTINATION'
    ORIGIN='ORIGIN'
    ORIGIN_DESTINATION_PAIR='ORIGIN_DESTINATION_PAIR'
    PROOF_OF_DELIVERY_POINT='PROOF_OF_DELIVERY_POINT'


class DestinationControlStatementType(str, Enum):
    DEPARTMENT_OF_COMMERCE='DEPARTMENT_OF_COMMERCE'
    DEPARTMENT_OF_STATE='DEPARTMENT_OF_STATE'


class DistanceUnits(str, Enum):
    KM='KM'
    MI='MI'


class DistributionClearanceType(str, Enum):
    DESTINATION_COUNTRY_CLEARANCE='DESTINATION_COUNTRY_CLEARANCE'
    SINGLE_POINT_OF_CLEARANCE='SINGLE_POINT_OF_CLEARANCE'


class DocTabContentType(str, Enum):
    BARCODED='BARCODED'
    CUSTOM='CUSTOM'
    MINIMUM='MINIMUM'
    STANDARD='STANDARD'
    ZONE_001='ZONE001'


class DocTabZoneJustificationType(str, Enum):
    LEFT='LEFT'
    RIGHT='RIGHT'


class DocumentFormatOptionType(str, Enum):
    SUPPRESS_ADDITIONAL_LANGUAGES='SUPPRESS_ADDITIONAL_LANGUAGES'


class DropoffType(str, Enum):
    BUSINESS_SERVICE_CENTER='BUSINESS_SERVICE_CENTER'
    DROP_BOX='DROP_BOX'
    REGULAR_PICKUP='REGULAR_PICKUP'
    REQUEST_COURIER='REQUEST_COURIER'
    STATION='STATION'


class EMailNotificationFormatType(str, Enum):
    """The format of the email"""
    HTML='HTML'
    TEXT='TEXT'
    WIRELESS='WIRELESS'


class EMailNotificationRecipientType(str, Enum):
    BROKER='BROKER'
    OTHER='OTHER'
    RECIPIENT='RECIPIENT'
    SHIPPER='SHIPPER'
    THIRD_PARTY='THIRD_PARTY'


class EdtRequestType(str, Enum):
    """Specifies the types of Estimated Duties and Taxes to be included in a
    rate quotation for an international shipment."""
    ALL='ALL'
    NONE='NONE'


class EmailOptionType(str, Enum):
    SUPPRESS_ACCESS_EMAILS='SUPPRESS_ACCESS_EMAILS'
    SUPPRESS_ADDITIONAL_LANGUAGES='SUPPRESS_ADDITIONAL_LANGUAGES'


class EnterpriseAccountType(str, Enum):
    """Specifies a refinement of the customer entity type. This represents the
    customer account type for the EAN."""
    ACTIVATION_DESK='ACTIVATION_DESK'
    AIR_CARGO='AIR_CARGO'
    BILLING='BILLING'
    BROKER='BROKER'
    BUSINESS='BUSINESS'
    CATALOG_SHIPPER='CATALOG_SHIPPER'
    CITY_CENTER='CITY_CENTER'
    EMPLOYEE='EMPLOYEE'
    FEDEX_AUTHORIZED_SERVICE_CENTER='FEDEX_AUTHORIZED_SERVICE_CENTER'
    FREIGHT_FORWARDER='FREIGHT_FORWARDER'
    GLOBAL_SERVICE_PROVIDER='GLOBAL_SERVICE_PROVIDER'
    GOVERNMENT='GOVERNMENT'
    INDIVIDUAL='INDIVIDUAL'
    INTERLINE_CUSTOMER='INTERLINE_CUSTOMER'
    INTERNAL_CONTROL_CUSTOMER='INTERNAL_CONTROL_CUSTOMER'
    INTERNAL_TESTING_ACCOUNT='INTERNAL_TESTING_ACCOUNT'
    JOINT_VENTURE_PARTNER='JOINT_VENTURE_PARTNER'
    MIDDLEMAN='MIDDLEMAN'
    NON_PROFIT='NON_PROFIT'
    NON_REVENUE='NON_REVENUE'
    OTHER='OTHER'
    PACKAGE_CONSOLIDATOR='PACKAGE_CONSOLIDATOR'
    POLITICAL_CAMPAIGN='POLITICAL_CAMPAIGN'
    RESIDENTIAL_BUSINESS='RESIDENTIAL_BUSINESS'
    UNKNOWN='UNKNOWN'


class EnterprisePermissionType(str, Enum):
    ALLOWED='ALLOWED'
    ALLOWED_BY_EXCEPTION='ALLOWED_BY_EXCEPTION'
    DISALLOWED='DISALLOWED'


class EnterpriseProfileAttributeType(str, Enum):
    CREDIT_CARD_ELIGIBLE='CREDIT_CARD_ELIGIBLE'
    DO_NOT_LINK_ACCOUNTS='DO_NOT_LINK_ACCOUNTS'
    EXPRESS_ELIGIBLE='EXPRESS_ELIGIBLE'
    FEDEX_CAN_CALL_FOR_MARKETING='FEDEX_CAN_CALL_FOR_MARKETING'
    FREIGHT_ELIGIBLE='FREIGHT_ELIGIBLE'
    TAX_EXEMPT='TAX_EXEMPT'


class ErrorLabelBehaviorType(str, Enum):
    PACKAGE_ERROR_LABELS='PACKAGE_ERROR_LABELS'
    STANDARD='STANDARD'


class EtdAttributeType(str, Enum):
    POST_SHIPMENT_UPLOAD_REQUESTED='POST_SHIPMENT_UPLOAD_REQUESTED'


class EtdConfirmationType(str, Enum):
    """Specifies whether to confirm documents prior to processing a shipment
    with the ELECTRONIC_TRADE_DOCUMENTS special service."""
    CONFIRMED='CONFIRMED'
    DEFERRED='DEFERRED'


class ExpressAccountType(str, Enum):
    ACTIVATION_DESK='ACTIVATION_DESK'
    AIR_CARGO='AIR_CARGO'
    AIR_CARGO_BILLING='AIR_CARGO_BILLING'
    BILLING='BILLING'
    BROKER='BROKER'
    BUSINESS_SHIPPER='BUSINESS_SHIPPER'
    CATALOG_SHIPPER='CATALOG_SHIPPER'
    CITY_CENTER='CITY_CENTER'
    EMPLOYEE='EMPLOYEE'
    FEDEX_OFFICE_RETAIL_OPERATIONS='FEDEX_OFFICE_RETAIL_OPERATIONS'
    FREIGHT_FORWARDER='FREIGHT_FORWARDER'
    GLOBAL_SERVICE_PROVIDER='GLOBAL_SERVICE_PROVIDER'
    GOVERNMENT='GOVERNMENT'
    INDIVIDUAL='INDIVIDUAL'
    INTERLINE_CUSTOMER='INTERLINE_CUSTOMER'
    INTERNAL_CONTROL_ACCOUNT='INTERNAL_CONTROL_ACCOUNT'
    INTERNAL_TESTING_ACCOUNT='INTERNAL_TESTING_ACCOUNT'
    INVOICING='INVOICING'
    JOINT_VENTURE_PARTNER='JOINT_VENTURE_PARTNER'
    MIDDLEMAN='MIDDLEMAN'
    NON_INVOICING='NON_INVOICING'
    NON_PROFIT='NON_PROFIT'
    NON_REVENUE='NON_REVENUE'
    OTHER='OTHER'
    PACKAGE_CONSOLIDATOR='PACKAGE_CONSOLIDATOR'
    POLITICAL_CAMPAIGN='POLITICAL_CAMPAIGN'
    RESIDENTIAL_BUSINESS='RESIDENTIAL_BUSINESS'
    UNKNOWN='UNKNOWN'


class ExpressProfileAttributeType(str, Enum):
    ACCEPT_CREDIT='ACCEPT_CREDIT'
    EDI_MASTER='EDI_MASTER'
    EXPORT_DECLARATION_FILED_BY_CUSTOMER='EXPORT_DECLARATION_FILED_BY_CUSTOMER'
    FEDEX_CAN_CALL_FOR_MARKETING='FEDEX_CAN_CALL_FOR_MARKETING'
    FEDEX_FRANCHISEE_ACCOUNT='FEDEX_FRANCHISEE_ACCOUNT'
    FEDEX_MARKETING_CORRESPONDENCE_ALLOWED='FEDEX_MARKETING_CORRESPONDENCE_ALLOWED'
    GROUND_ELIGIBLE='GROUND_ELIGIBLE'
    IMPORT_DECLARATION_FILED_BY_CUSTOMER='IMPORT_DECLARATION_FILED_BY_CUSTOMER'
    INSIGHT_VISIBLE='INSIGHT_VISIBLE'
    PREFERRED_CUSTOMER='PREFERRED_CUSTOMER'
    PROOF_OF_DELIVERY_NEEDED='PROOF_OF_DELIVERY_NEEDED'
    REGULAR_PICKUP_SCHEDULED='REGULAR_PICKUP_SCHEDULED'
    RESTRICTED_COMMODITY_LIMIT_EXEMPT='RESTRICTED_COMMODITY_LIMIT_EXEMPT'
    SIGNATURE_ON_FILE='SIGNATURE_ON_FILE'
    SIGNATURE_REQUIRED='SIGNATURE_REQUIRED'
    VAT_EXEMPT='VAT_EXEMPT'


class ExpressRegionCode(str, Enum):
    """Indicates a FedEx Express operating region."""
    APAC='APAC'
    CA='CA'
    EMEA='EMEA'
    LAC='LAC'
    US='US'


class FedExCommodityType(str, Enum):
    DANGEROUS_GOODS='DANGEROUS_GOODS'
    DOCUMENT='DOCUMENT'


class FedExLocationType(str, Enum):
    """Identifies a kind of FedEx facility."""
    FEDEX_AUTHORIZED_SHIP_CENTER='FEDEX_AUTHORIZED_SHIP_CENTER'
    FEDEX_EXPRESS_STATION='FEDEX_EXPRESS_STATION'
    FEDEX_FACILITY='FEDEX_FACILITY'
    FEDEX_FREIGHT_SERVICE_CENTER='FEDEX_FREIGHT_SERVICE_CENTER'
    FEDEX_GROUND_TERMINAL='FEDEX_GROUND_TERMINAL'
    FEDEX_HOME_DELIVERY_STATION='FEDEX_HOME_DELIVERY_STATION'
    FEDEX_OFFICE='FEDEX_OFFICE'
    FEDEX_ONSITE='FEDEX_ONSITE'
    FEDEX_SELF_SERVICE_LOCATION='FEDEX_SELF_SERVICE_LOCATION'
    FEDEX_SHIPSITE='FEDEX_SHIPSITE'
    FEDEX_SHIP_AND_GET='FEDEX_SHIP_AND_GET'
    FEDEX_SMART_POST_HUB='FEDEX_SMART_POST_HUB'


class FlatbedTrailerOption(str, Enum):
    OVER_DIMENSION='OVER_DIMENSION'
    TARP='TARP'


class FreightAccountStatusType(str, Enum):
    """Identifies account status unique to FedEx Freight."""
    ESTABLISHED='ESTABLISHED'
    SCHEDULED_FOR_DELETION='SCHEDULED_FOR_DELETION'
    UNESTABLISHED='UNESTABLISHED'


class FreightAccountType(str, Enum):
    """This attribute of a Freight account controls how the account relates to
    role in shipment."""
    BILL_TO='BILL_TO'
    CORPORATE_NATIONAL='CORPORATE_NATIONAL'
    INTERLINE='INTERLINE'
    SHIPPER='SHIPPER'


class FreightClassType(str, Enum):
    """These values represent the industry-standard freight classes used for
    FedEx Freight and FedEx National Freight shipment description. (Note:
    The alphabetic prefixes are required to distinguish these values from
    decimal numbers on some client platforms.)"""
    CLASS__050='CLASS_050'
    CLASS__055='CLASS_055'
    CLASS__060='CLASS_060'
    CLASS__065='CLASS_065'
    CLASS__070='CLASS_070'
    CLASS__077__5='CLASS_077_5'
    CLASS__085='CLASS_085'
    CLASS__092__5='CLASS_092_5'
    CLASS__100='CLASS_100'
    CLASS__110='CLASS_110'
    CLASS__125='CLASS_125'
    CLASS__150='CLASS_150'
    CLASS__175='CLASS_175'
    CLASS__200='CLASS_200'
    CLASS__250='CLASS_250'
    CLASS__300='CLASS_300'
    CLASS__400='CLASS_400'
    CLASS__500='CLASS_500'


class FreightCollectTermsType(str, Enum):
    NON_RECOURSE_SHIPPER_SIGNED='NON_RECOURSE_SHIPPER_SIGNED'
    STANDARD='STANDARD'


class FreightGuaranteeType(str, Enum):
    GUARANTEED_DATE='GUARANTEED_DATE'
    GUARANTEED_MORNING='GUARANTEED_MORNING'
    GUARANTEED_TIME='GUARANTEED_TIME'


class FreightOnValueType(str, Enum):
    """Identifies responsibilities with respect to loss, damage, etc."""
    CARRIER_RISK='CARRIER_RISK'
    OWN_RISK='OWN_RISK'


class FreightProfileAttributeType(str, Enum):
    AUDIT_OR_INVOICE_SERVICE='AUDIT_OR_INVOICE_SERVICE'
    BANK_DEBTOR_INVOICING='BANK_DEBTOR_INVOICING'
    BANK_INVOICING='BANK_INVOICING'
    BLIND_SHIPPER='BLIND_SHIPPER'
    DOCK='DOCK'
    EDI__210_INVOICING='EDI_210_INVOICING'
    FEDEX_CAN_CALL_FOR_MARKETING='FEDEX_CAN_CALL_FOR_MARKETING'
    FEDEX_FACILITY='FEDEX_FACILITY'
    FREIGHT_FORWARDING_FACILITY='FREIGHT_FORWARDING_FACILITY'
    GOVERNMENT='GOVERNMENT'
    NATIONAL_ACCOUNT='NATIONAL_ACCOUNT'
    OFF_BILL_DISCOUNT='OFF_BILL_DISCOUNT'
    THIRD_PARTY_LOGISTICS='THIRD_PARTY_LOGISTICS'
    WAREHOUSE='WAREHOUSE'


class FreightServiceSchedulingType(str, Enum):
    """Specifies the type of service scheduling offered from a Freight or
    National Freight Service Center to a customer-supplied address."""
    LIMITED='LIMITED'
    STANDARD='STANDARD'
    WILL_CALL='WILL_CALL'


class FreightShipmentRoleType(str, Enum):
    """Indicates the role of the party submitting the transaction."""
    CONSIGNEE='CONSIGNEE'
    SHIPPER='SHIPPER'


class FreightTariffType(str, Enum):
    """Indicates the basis for pricing/rating Freight shipments."""
    BASE_RATE='BASE_RATE'
    CUSTOMER_PRICING='CUSTOMER_PRICING'
    PRICING_EXPIRED='PRICING_EXPIRED'


class Gender(str, Enum):
    FEMALE='FEMALE'
    MALE='MALE'


class GetAllServicesAndPackagingProcessingOptionType(str, Enum):
    EXCLUDE_ACCOUNT_ENABLEMENTS='EXCLUDE_ACCOUNT_ENABLEMENTS'
    EXCLUDE_CHANNEL_RESTRICTIONS='EXCLUDE_CHANNEL_RESTRICTIONS'
    EXCLUDE_EXTENDED_ACCOUNT_RULES='EXCLUDE_EXTENDED_ACCOUNT_RULES'
    EXCLUDE_GLOBAL_REGULATORY_RULES='EXCLUDE_GLOBAL_REGULATORY_RULES'
    EXCLUDE_INSURED_VALUE_RULES='EXCLUDE_INSURED_VALUE_RULES'
    EXCLUDE_RESTRICTIONS_AND_PRIVILEGES='EXCLUDE_RESTRICTIONS_AND_PRIVILEGES'
    EXCLUDE_WEIGHT_DIM_RULES='EXCLUDE_WEIGHT_DIM_RULES'
    WEIGHT_AND_DROPOFF_NOT_REQUIRED='WEIGHT_AND_DROPOFF_NOT_REQUIRED'


class GetAllServicesAndPackagingServiceLevel(str, Enum):
    EXTERNAL='EXTERNAL'
    INTERNAL='INTERNAL'
    OPERATIONS='OPERATIONS'


class GetAllSpecialServicesProcessingOptionType(str, Enum):
    EXCLUDE_ACCOUNT_ENABLEMENTS='EXCLUDE_ACCOUNT_ENABLEMENTS'
    EXCLUDE_CHANNEL_RESTRICTIONS='EXCLUDE_CHANNEL_RESTRICTIONS'
    EXCLUDE_EXTENDED_ACCOUNT_RULES='EXCLUDE_EXTENDED_ACCOUNT_RULES'
    EXCLUDE_GLOBAL_REGULATORY_RULES='EXCLUDE_GLOBAL_REGULATORY_RULES'
    EXCLUDE_INSURED_VALUE_RULES='EXCLUDE_INSURED_VALUE_RULES'
    EXCLUDE_RESTRICTIONS_AND_PRIVILEGES='EXCLUDE_RESTRICTIONS_AND_PRIVILEGES'
    EXCLUDE_WEIGHT_DIM_RULES='EXCLUDE_WEIGHT_DIM_RULES'
    INCLUDE_OPERATIONAL_SERVICE_OPTIONS='INCLUDE_OPERATIONAL_SERVICE_OPTIONS'


class GetAllSpecialServicesServiceLevel(str, Enum):
    EXTERNAL='EXTERNAL'
    INTERNAL='INTERNAL'
    OPERATIONS='OPERATIONS'


class GetCommitmentProcessingOptionType(str, Enum):
    BYPASS_REALTIME_COMMIT='BYPASS_REALTIME_COMMIT'
    DERIVE_SIGNATURE_OPTION='DERIVE_SIGNATURE_OPTION'
    EXCLUDE_ACCOUNT_ENABLEMENTS='EXCLUDE_ACCOUNT_ENABLEMENTS'
    EXCLUDE_CHANNEL_RESTRICTIONS='EXCLUDE_CHANNEL_RESTRICTIONS'
    EXCLUDE_EXTENDED_ACCOUNT_RULES='EXCLUDE_EXTENDED_ACCOUNT_RULES'
    EXCLUDE_GLOBAL_REGULATORY_RULES='EXCLUDE_GLOBAL_REGULATORY_RULES'
    EXCLUDE_INSURED_VALUE_RULES='EXCLUDE_INSURED_VALUE_RULES'
    EXCLUDE_RESTRICTIONS_AND_PRIVILEGES='EXCLUDE_RESTRICTIONS_AND_PRIVILEGES'
    EXCLUDE_WEIGHT_DIM_RULES='EXCLUDE_WEIGHT_DIM_RULES'
    INCLUDE_OPERATIONAL_SERVICE_OPTIONS='INCLUDE_OPERATIONAL_SERVICE_OPTIONS'


class GetCommitmentServiceLevel(str, Enum):
    EXTERNAL='EXTERNAL'
    INTERNAL='INTERNAL'
    OPERATIONS='OPERATIONS'


class GroundProfileAttributeType(str, Enum):
    AGENT_AUTHORITY_ON_FILE='AGENT_AUTHORITY_ON_FILE'
    AUTHORIZED_COLLECT_RECIPIENT='AUTHORIZED_COLLECT_RECIPIENT'
    AUTOMATIC_PROOF_OF_DELIVERY='AUTOMATIC_PROOF_OF_DELIVERY'
    BROKER_INCLUSIVE_ALLOWED='BROKER_INCLUSIVE_ALLOWED'
    COD='COD'
    ELECTRONIC_COD='ELECTRONIC_COD'
    NON_RESIDENT_IMPORTER='NON_RESIDENT_IMPORTER'


class HazardousCommodityDescriptionProcessingOptionType(str, Enum):
    """Specifies any special processing to be applied to the dangerous goods
    commodity description validation."""
    INCLUDE_SPECIAL_PROVISIONS='INCLUDE_SPECIAL_PROVISIONS'


class HazardousCommodityLabelTextOptionType(str, Enum):
    """Specifies how the commodity is to be labeled."""
    APPEND='APPEND'
    OVERRIDE='OVERRIDE'
    STANDARD='STANDARD'


class HazardousCommodityOptionType(str, Enum):
    """Indicates which kind of hazardous content is being reported."""
    BATTERY='BATTERY'
    HAZARDOUS_MATERIALS='HAZARDOUS_MATERIALS'
    ORM_D='ORM_D'
    REPORTABLE_QUANTITIES='REPORTABLE_QUANTITIES'
    SMALL_QUANTITY_EXCEPTION='SMALL_QUANTITY_EXCEPTION'


class HazardousCommodityPackingGroupType(str, Enum):
    """Identifies DOT packing group for a hazardous commodity."""
    DEFAULT='DEFAULT'
    I='I'
    II='II'
    III='III'


class HazardousCommodityQuantityType(str, Enum):
    """Specifies the measure of quantity to be validated against a prescribed
    limit."""
    GROSS='GROSS'
    NET='NET'


class HazardousContainerPackingType(str, Enum):
    ALL_PACKED_IN_ONE='ALL_PACKED_IN_ONE'


class HomeDeliveryPremiumType(str, Enum):
    APPOINTMENT='APPOINTMENT'
    DATE_CERTAIN='DATE_CERTAIN'
    EVENING='EVENING'


class ImageId(str, Enum):
    IMAGE__1='IMAGE_1'
    IMAGE__2='IMAGE_2'
    IMAGE__3='IMAGE_3'
    IMAGE__4='IMAGE_4'
    IMAGE__5='IMAGE_5'


class InspectionStatusType(str, Enum):
    """Indicates the status of a package inspection performed by an agent."""
    CUSTOMER_REFUSED_INSPECTION='CUSTOMER_REFUSED_INSPECTION'
    INSPECTED='INSPECTED'
    NOT_INSPECTED='NOT_INSPECTED'


class IntermediateVersionType(str, Enum):
    _0='0'


class InternalImageType(str, Enum):
    LETTER_HEAD='LETTER_HEAD'
    SIGNATURE='SIGNATURE'


class InternationalControlledExportType(str, Enum):
    DEA__036='DEA_036'
    DEA__236='DEA_236'
    DEA__486='DEA_486'
    DSP__05='DSP_05'
    DSP__61='DSP_61'
    DSP__73='DSP_73'
    DSP__85='DSP_85'
    DSP__94='DSP_94'
    DSP_LICENSE_AGREEMENT='DSP_LICENSE_AGREEMENT'
    FROM_FOREIGN_TRADE_ZONE='FROM_FOREIGN_TRADE_ZONE'
    WAREHOUSE_WITHDRAWAL='WAREHOUSE_WITHDRAWAL'


class InternationalDocumentContentType(str, Enum):
    DERIVED='DERIVED'
    DOCUMENTS_ONLY='DOCUMENTS_ONLY'
    NON_DOCUMENTS='NON_DOCUMENTS'


class LabelFormatType(str, Enum):
    COMMON_2_D='COMMON2D'
    ERROR='ERROR'
    LABEL_DATA_ONLY='LABEL_DATA_ONLY'
    MAILROOM='MAILROOM'
    NO_LABEL='NO_LABEL'
    OPERATIONAL_LABEL='OPERATIONAL_LABEL'
    PRE_COMMON_2_D='PRE_COMMON2D'


class LabelMaskableDataType(str, Enum):
    """Names for data elements / areas which may be suppressed from printing on
    labels."""
    CUSTOMS_VALUE='CUSTOMS_VALUE'
    DIMENSIONS='DIMENSIONS'
    DUTIES_AND_TAXES_PAYOR_ACCOUNT_NUMBER='DUTIES_AND_TAXES_PAYOR_ACCOUNT_NUMBER'
    FREIGHT_PAYOR_ACCOUNT_NUMBER='FREIGHT_PAYOR_ACCOUNT_NUMBER'
    PACKAGE_SEQUENCE_AND_COUNT='PACKAGE_SEQUENCE_AND_COUNT'
    SECONDARY_BARCODE='SECONDARY_BARCODE'
    SHIPPER_ACCOUNT_NUMBER='SHIPPER_ACCOUNT_NUMBER'
    SUPPLEMENTAL_LABEL_DOC_TAB='SUPPLEMENTAL_LABEL_DOC_TAB'
    TERMS_AND_CONDITIONS='TERMS_AND_CONDITIONS'
    TOTAL_WEIGHT='TOTAL_WEIGHT'
    TRANSPORTATION_CHARGES_PAYOR_ACCOUNT_NUMBER='TRANSPORTATION_CHARGES_PAYOR_ACCOUNT_NUMBER'


class LabelOrderType(str, Enum):
    """Specifies the order in which the labels will be returned"""
    SHIPPING_LABEL_FIRST='SHIPPING_LABEL_FIRST'
    SHIPPING_LABEL_LAST='SHIPPING_LABEL_LAST'


class LabelPrintingOrientationType(str, Enum):
    BOTTOM_EDGE_OF_TEXT_FIRST='BOTTOM_EDGE_OF_TEXT_FIRST'
    TOP_EDGE_OF_TEXT_FIRST='TOP_EDGE_OF_TEXT_FIRST'


class LabelRotationType(str, Enum):
    """Relative to normal orientation for the printer."""
    LEFT='LEFT'
    NONE='NONE'
    RIGHT='RIGHT'
    UPSIDE_DOWN='UPSIDE_DOWN'


class LabelSpecificationProcessingOptionType(str, Enum):
    PRE_EACI_LABEL='PRE_EACI_LABEL'


class LabelStockType(str, Enum):
    PAPER__4_X_6='PAPER_4X6'
    PAPER__4_X_6_75='PAPER_4X6.75'
    PAPER__4_X_8='PAPER_4X8'
    PAPER__4_X_9='PAPER_4X9'
    PAPER__7_X_4_75='PAPER_7X4.75'
    PAPER__8_5_X_11_BOTTOM_HALF_LABEL='PAPER_8.5X11_BOTTOM_HALF_LABEL'
    PAPER__8_5_X_11_TOP_HALF_LABEL='PAPER_8.5X11_TOP_HALF_LABEL'
    PAPER_LETTER='PAPER_LETTER'
    STOCK__4_X_6='STOCK_4X6'
    STOCK__4_X_6_75='STOCK_4X6.75'
    STOCK__4_X_6_75_LEADING_DOC_TAB='STOCK_4X6.75_LEADING_DOC_TAB'
    STOCK__4_X_6_75_TRAILING_DOC_TAB='STOCK_4X6.75_TRAILING_DOC_TAB'
    STOCK__4_X_8='STOCK_4X8'
    STOCK__4_X_9='STOCK_4X9'
    STOCK__4_X_9_LEADING_DOC_TAB='STOCK_4X9_LEADING_DOC_TAB'
    STOCK__4_X_9_TRAILING_DOC_TAB='STOCK_4X9_TRAILING_DOC_TAB'


class LiabilityCoverageType(str, Enum):
    NEW='NEW'
    USED_OR_RECONDITIONED='USED_OR_RECONDITIONED'


class LinearUnits(str, Enum):
    CM='CM'
    IN='IN'


class LocationAccessibilityType(str, Enum):
    """Indicates how this can be accessed."""
    INSIDE='INSIDE'
    OUTSIDE='OUTSIDE'


class MajorVersionType(str, Enum):
    _1_5='15'


class MinorVersionType(str, Enum):
    _0='0'


class NaftaImporterSpecificationType(str, Enum):
    IMPORTER_OF_RECORD='IMPORTER_OF_RECORD'
    RECIPIENT='RECIPIENT'
    UNKNOWN='UNKNOWN'
    VARIOUS='VARIOUS'


class NaftaNetCostMethodCode(str, Enum):
    NC='NC'
    NO='NO'


class NaftaPreferenceCriterionCode(str, Enum):
    """See instructions for NAFTA Certificate of Origin for code
    definitions."""
    A='A'
    B='B'
    C='C'
    D='D'
    E='E'
    F='F'


class NaftaProducerDeterminationCode(str, Enum):
    """See instructions for NAFTA Certificate of Origin for code
    definitions."""
    NO__1='NO_1'
    NO__2='NO_2'
    NO__3='NO_3'
    YES='YES'


class NaftaProducerSpecificationType(str, Enum):
    AVAILABLE_UPON_REQUEST='AVAILABLE_UPON_REQUEST'
    MULTIPLE_SPECIFIED='MULTIPLE_SPECIFIED'
    SAME='SAME'
    SINGLE_SPECIFIED='SINGLE_SPECIFIED'
    UNKNOWN='UNKNOWN'


class NetExplosiveClassificationType(str, Enum):
    NET_EXPLOSIVE_CONTENT='NET_EXPLOSIVE_CONTENT'
    NET_EXPLOSIVE_MASS='NET_EXPLOSIVE_MASS'
    NET_EXPLOSIVE_QUANTITY='NET_EXPLOSIVE_QUANTITY'
    NET_EXPLOSIVE_WEIGHT='NET_EXPLOSIVE_WEIGHT'


class NotificationEventType(str, Enum):
    ON_DELIVERY='ON_DELIVERY'
    ON_ESTIMATED_DELIVERY='ON_ESTIMATED_DELIVERY'
    ON_EXCEPTION='ON_EXCEPTION'
    ON_PICKUP_DRIVER_ARRIVED='ON_PICKUP_DRIVER_ARRIVED'
    ON_PICKUP_DRIVER_ASSIGNED='ON_PICKUP_DRIVER_ASSIGNED'
    ON_PICKUP_DRIVER_DEPARTED='ON_PICKUP_DRIVER_DEPARTED'
    ON_PICKUP_DRIVER_EN_ROUTE='ON_PICKUP_DRIVER_EN_ROUTE'
    ON_SHIPMENT='ON_SHIPMENT'
    ON_TENDER='ON_TENDER'


class NotificationFormatType(str, Enum):
    HTML='HTML'
    TEXT='TEXT'


class NotificationSeverityType(str, Enum):
    ERROR='ERROR'
    FAILURE='FAILURE'
    NOTE='NOTE'
    SUCCESS='SUCCESS'
    WARNING='WARNING'


class NotificationType(str, Enum):
    EMAIL='EMAIL'


class OperatingCompanyType(str, Enum):
    """Identification for a FedEx operating company (transportation and non-
    transportation)."""
    FEDEX_CARGO='FEDEX_CARGO'
    FEDEX_CORPORATE_SERVICES='FEDEX_CORPORATE_SERVICES'
    FEDEX_CORPORATION='FEDEX_CORPORATION'
    FEDEX_CUSTOMER_INFORMATION_SYSTEMS='FEDEX_CUSTOMER_INFORMATION_SYSTEMS'
    FEDEX_CUSTOM_CRITICAL='FEDEX_CUSTOM_CRITICAL'
    FEDEX_EXPRESS='FEDEX_EXPRESS'
    FEDEX_FREIGHT='FEDEX_FREIGHT'
    FEDEX_GROUND='FEDEX_GROUND'
    FEDEX_KINKOS='FEDEX_KINKOS'
    FEDEX_OFFICE='FEDEX_OFFICE'
    FEDEX_SERVICES='FEDEX_SERVICES'
    FEDEX_TRADE_NETWORKS='FEDEX_TRADE_NETWORKS'


class PackagePackedByType(str, Enum):
    CUSTOMER='CUSTOMER'
    FEDEX_OFFICE='FEDEX_OFFICE'


class PackagingOptionSpecialServiceType(str, Enum):
    FEDEX_ONE_RATE='FEDEX_ONE_RATE'


class PageQuadrantType(str, Enum):
    BOTTOM_LEFT='BOTTOM_LEFT'
    BOTTOM_RIGHT='BOTTOM_RIGHT'
    TOP_LEFT='TOP_LEFT'
    TOP_RIGHT='TOP_RIGHT'


class PaymentType(str, Enum):
    ACCOUNT='ACCOUNT'
    CASH='CASH'
    COLLECT='COLLECT'
    CREDIT_CARD='CREDIT_CARD'
    RECIPIENT='RECIPIENT'
    SENDER='SENDER'
    THIRD_PARTY='THIRD_PARTY'


class PendingShipmentProcessingOptionType(str, Enum):
    ALLOW_MODIFICATIONS='ALLOW_MODIFICATIONS'


class PendingShipmentType(str, Enum):
    EMAIL='EMAIL'


class PermissionType(str, Enum):
    """Specifies the permission."""
    ALLOWED='ALLOWED'
    DISALLOWED='DISALLOWED'


class PhoneNumberType(str, Enum):
    FAX='FAX'
    HOME='HOME'
    MOBILE='MOBILE'
    PAGER='PAGER'
    TOLL_FREE='TOLL_FREE'
    WORK='WORK'


class PhysicalFormType(str, Enum):
    GAS='GAS'
    LIQUID='LIQUID'
    SOLID='SOLID'
    SPECIAL='SPECIAL'


class PhysicalPackagingType(str, Enum):
    """This enumeration rationalizes the former FedEx Express international
    "admissibility package" types (based on ANSI X.12) and the FedEx
    Freight packaging types. The values represented are those common to
    both carriers."""
    BAG='BAG'
    BARREL='BARREL'
    BASKET='BASKET'
    BOX='BOX'
    BUCKET='BUCKET'
    BUNDLE='BUNDLE'
    CAGE='CAGE'
    CARTON='CARTON'
    CASE='CASE'
    CHEST='CHEST'
    CONTAINER='CONTAINER'
    CRATE='CRATE'
    CYLINDER='CYLINDER'
    DRUM='DRUM'
    ENVELOPE='ENVELOPE'
    HAMPER='HAMPER'
    OTHER='OTHER'
    PACKAGE='PACKAGE'
    PAIL='PAIL'
    PALLET='PALLET'
    PARCEL='PARCEL'
    PIECE='PIECE'
    REEL='REEL'
    ROLL='ROLL'
    SACK='SACK'
    SHRINK_WRAPPED='SHRINK_WRAPPED'
    SKID='SKID'
    TANK='TANK'
    TOTE_BIN='TOTE_BIN'
    TUBE='TUBE'
    UNIT='UNIT'


class PickupRequestSourceType(str, Enum):
    AUTOMATION='AUTOMATION'
    CUSTOMER_SERVICE='CUSTOMER_SERVICE'


class PickupRequestType(str, Enum):
    FUTURE_DAY='FUTURE_DAY'
    SAME_DAY='SAME_DAY'


class PremierType(str, Enum):
    BRONZE_ACCOUNT='BRONZE_ACCOUNT'
    FEDEX_ONE_CALL_CUSTOMER='FEDEX_ONE_CALL_CUSTOMER'
    GOLD_ACCOUNT='GOLD_ACCOUNT'
    SILVER_ACCOUNT='SILVER_ACCOUNT'
    SPECIAL_CUSTOMER_ROUTING='SPECIAL_CUSTOMER_ROUTING'


class PrintedReferenceType(str, Enum):
    """Identifies a particular reference identifier printed on a Freight bill
    of lading."""
    BILL_OF_LADING='BILL_OF_LADING'
    CONSIGNEE_ID_NUMBER='CONSIGNEE_ID_NUMBER'
    SHIPPER_ID_NUMBER='SHIPPER_ID_NUMBER'


class PriorityAlertEnhancementType(str, Enum):
    PRIORITY_ALERT_PLUS='PRIORITY_ALERT_PLUS'


class ProfileContactAttribute(str, Enum):
    """Specifies attributes of a profile contact."""
    PREFERRED_CONTACT='PREFERRED_CONTACT'


class ProfileContactType(str, Enum):
    AFTER_HOURS='AFTER_HOURS'
    ALIAS='ALIAS'
    BILLING_ACCOUNT='BILLING_ACCOUNT'
    BILLING_CONTACT='BILLING_CONTACT'
    CONTACT='CONTACT'
    OWNER='OWNER'
    PRIMARY_ACCOUNT='PRIMARY_ACCOUNT'
    PRIMARY_BILLING_ACCOUNT='PRIMARY_BILLING_ACCOUNT'
    PRIMARY_BILLING_CONTACT='PRIMARY_BILLING_CONTACT'
    PRIMARY_CONTACT_FOR_SHIPPING='PRIMARY_CONTACT_FOR_SHIPPING'
    PRIMARY_SHIPPER_CONTACT='PRIMARY_SHIPPER_CONTACT'
    RECIPIENT_SERVICES_CONTACT='RECIPIENT_SERVICES_CONTACT'


class ProfileType(str, Enum):
    ENTERPRISE='ENTERPRISE'
    EXPRESS='EXPRESS'
    FREIGHT='FREIGHT'
    OFFICE='OFFICE'
    RECIPIENT='RECIPIENT'
    TECH_CONNECT='TECH_CONNECT'
    TRADE_NETWORKS='TRADE_NETWORKS'


class PurposeOfShipmentType(str, Enum):
    GIFT='GIFT'
    NOT_SOLD='NOT_SOLD'
    PERSONAL_EFFECTS='PERSONAL_EFFECTS'
    REPAIR_AND_RETURN='REPAIR_AND_RETURN'
    SAMPLE='SAMPLE'
    SOLD='SOLD'


class RadioactiveContainerClassType(str, Enum):
    """Indicates the packaging type of the container used to package
    radioactive hazardous materials."""
    EXCEPTED_PACKAGE='EXCEPTED_PACKAGE'
    INDUSTRIAL_IP_1='INDUSTRIAL_IP1'
    INDUSTRIAL_IP_2='INDUSTRIAL_IP2'
    INDUSTRIAL_IP_3='INDUSTRIAL_IP3'
    TYPE_A='TYPE_A'
    TYPE_B_M='TYPE_B_M'
    TYPE_B_U='TYPE_B_U'
    TYPE_C='TYPE_C'


class RadioactivityUnitOfMeasure(str, Enum):
    BQ='BQ'
    GBQ='GBQ'
    KBQ='KBQ'
    MBQ='MBQ'
    PBQ='PBQ'
    TBQ='TBQ'


class RateDiscountType(str, Enum):
    BONUS='BONUS'
    COUPON='COUPON'
    EARNED='EARNED'
    INCENTIVE='INCENTIVE'
    OTHER='OTHER'
    VOLUME='VOLUME'


class RateElementBasisType(str, Enum):
    """Selects the value from a set of rate data to which the percentage is
    applied."""
    BASE_CHARGE='BASE_CHARGE'
    NET_CHARGE='NET_CHARGE'
    NET_CHARGE_EXCLUDING_TAXES='NET_CHARGE_EXCLUDING_TAXES'
    NET_FREIGHT='NET_FREIGHT'


class RateLevelBasisType(str, Enum):
    BUNDLED_RATE='BUNDLED_RATE'
    INDIVIDUAL_PACKAGE_RATE='INDIVIDUAL_PACKAGE_RATE'


class RateRequestType(str, Enum):
    ACCOUNT='ACCOUNT'
    CUSTOM='CUSTOM'
    INCENTIVE='INCENTIVE'
    LIST='LIST'
    NONE='NONE'
    PREFERRED='PREFERRED'
    RETAIL='RETAIL'


class RateTypeBasisType(str, Enum):
    """Select the type of rate from which the element is to be selected."""
    ACCOUNT='ACCOUNT'
    ACTUAL='ACTUAL'
    CURRENT='CURRENT'
    CUSTOM='CUSTOM'
    LIST='LIST'


class RecipientCustomsIdType(str, Enum):
    COMPANY='COMPANY'
    INDIVIDUAL='INDIVIDUAL'
    PASSPORT='PASSPORT'


class RecommendedDocumentType(str, Enum):
    """Type of documents that are recommended to be included with the
    shipment."""
    ANTIQUE_STATEMENT_EUROPEAN_UNION='ANTIQUE_STATEMENT_EUROPEAN_UNION'
    ANTIQUE_STATEMENT_UNITED_STATES='ANTIQUE_STATEMENT_UNITED_STATES'
    ASSEMBLER_DECLARATION='ASSEMBLER_DECLARATION'
    BEARING_WORKSHEET='BEARING_WORKSHEET'
    CERTIFICATE_OF_SHIPMENTS_TO_SYRIA='CERTIFICATE_OF_SHIPMENTS_TO_SYRIA'
    COMMERCIAL_INVOICE_FOR_THE_CARIBBEAN_COMMON_MARKET='COMMERCIAL_INVOICE_FOR_THE_CARIBBEAN_COMMON_MARKET'
    CONIFEROUS_SOLID_WOOD_PACKAGING_MATERIAL_TO_THE_PEOPLES_REPUBLIC_OF_CHINA='CONIFEROUS_SOLID_WOOD_PACKAGING_MATERIAL_TO_THE_PEOPLES_REPUBLIC_OF_CHINA'
    DECLARATION_FOR_FREE_ENTRY_OF_RETURNED_AMERICAN_PRODUCTS='DECLARATION_FOR_FREE_ENTRY_OF_RETURNED_AMERICAN_PRODUCTS'
    DECLARATION_OF_BIOLOGICAL_STANDARDS='DECLARATION_OF_BIOLOGICAL_STANDARDS'
    DECLARATION_OF_IMPORTED_ELECTRONIC_PRODUCTS_SUBJECT_TO_RADIATION_CONTROL_STANDARD='DECLARATION_OF_IMPORTED_ELECTRONIC_PRODUCTS_SUBJECT_TO_RADIATION_CONTROL_STANDARD'
    ELECTRONIC_INTEGRATED_CIRCUIT_WORKSHEET='ELECTRONIC_INTEGRATED_CIRCUIT_WORKSHEET'
    FILM_AND_VIDEO_CERTIFICATE='FILM_AND_VIDEO_CERTIFICATE'
    INTERIM_FOOTWEAR_INVOICE='INTERIM_FOOTWEAR_INVOICE'
    NAFTA_CERTIFICATE_OF_ORIGIN_CANADA_ENGLISH='NAFTA_CERTIFICATE_OF_ORIGIN_CANADA_ENGLISH'
    NAFTA_CERTIFICATE_OF_ORIGIN_CANADA_FRENCH='NAFTA_CERTIFICATE_OF_ORIGIN_CANADA_FRENCH'
    NAFTA_CERTIFICATE_OF_ORIGIN_SPANISH='NAFTA_CERTIFICATE_OF_ORIGIN_SPANISH'
    NAFTA_CERTIFICATE_OF_ORIGIN_UNITED_STATES='NAFTA_CERTIFICATE_OF_ORIGIN_UNITED_STATES'
    PACKING_LIST='PACKING_LIST'
    PRINTED_CIRCUIT_BOARD_WORKSHEET='PRINTED_CIRCUIT_BOARD_WORKSHEET'
    REPAIRED_WATCH_BREAKOUT_WORKSHEET='REPAIRED_WATCH_BREAKOUT_WORKSHEET'
    STATEMENT_REGARDING_THE_IMPORT_OF_RADIO_FREQUENCY_DEVICES='STATEMENT_REGARDING_THE_IMPORT_OF_RADIO_FREQUENCY_DEVICES'
    TOXIC_SUBSTANCES_CONTROL_ACT='TOXIC_SUBSTANCES_CONTROL_ACT'
    UNITED_STATES_CARIBBEAN_BASIN_TRADE_PARTNERSHIP_ACT_CERTIFICATE_OF_ORIGIN_NON_TEXTILES='UNITED_STATES_CARIBBEAN_BASIN_TRADE_PARTNERSHIP_ACT_CERTIFICATE_OF_ORIGIN_NON_TEXTILES'
    UNITED_STATES_CARIBBEAN_BASIN_TRADE_PARTNERSHIP_ACT_CERTIFICATE_OF_ORIGIN_TEXTILES='UNITED_STATES_CARIBBEAN_BASIN_TRADE_PARTNERSHIP_ACT_CERTIFICATE_OF_ORIGIN_TEXTILES'
    UNITED_STATES_NEW_WATCH_WORKSHEET='UNITED_STATES_NEW_WATCH_WORKSHEET'
    UNITED_STATES_WATCH_REPAIR_DECLARATION='UNITED_STATES_WATCH_REPAIR_DECLARATION'


class RegulatoryControlType(str, Enum):
    FOOD_OR_PERISHABLE='FOOD_OR_PERISHABLE'
    NAFTA='NAFTA'
    NOT_APPLICABLE_FOR_LOW_CUSTOMS_VALUE_EXCEPTION='NOT_APPLICABLE_FOR_LOW_CUSTOMS_VALUE_EXCEPTION'
    NOT_IN_FREE_CIRCULATION='NOT_IN_FREE_CIRCULATION'


class RegulatoryLabelType(str, Enum):
    ALCOHOL_SHIPMENT_LABEL='ALCOHOL_SHIPMENT_LABEL'


class RelativeVerticalPositionType(str, Enum):
    """Describes the vertical position of an item relative to another item."""
    ABOVE='ABOVE'
    BELOW='BELOW'


class RequestedShippingDocumentType(str, Enum):
    CERTIFICATE_OF_ORIGIN='CERTIFICATE_OF_ORIGIN'
    COMMERCIAL_INVOICE='COMMERCIAL_INVOICE'
    CUSTOMER_SPECIFIED_LABELS='CUSTOMER_SPECIFIED_LABELS'
    CUSTOM_PACKAGE_DOCUMENT='CUSTOM_PACKAGE_DOCUMENT'
    CUSTOM_SHIPMENT_DOCUMENT='CUSTOM_SHIPMENT_DOCUMENT'
    DANGEROUS_GOODS_SHIPPERS_DECLARATION='DANGEROUS_GOODS_SHIPPERS_DECLARATION'
    EXPORT_DECLARATION='EXPORT_DECLARATION'
    FEDEX_FREIGHT_STRAIGHT_BILL_OF_LADING='FEDEX_FREIGHT_STRAIGHT_BILL_OF_LADING'
    FREIGHT_ADDRESS_LABEL='FREIGHT_ADDRESS_LABEL'
    GENERAL_AGENCY_AGREEMENT='GENERAL_AGENCY_AGREEMENT'
    LABEL='LABEL'
    NAFTA_CERTIFICATE_OF_ORIGIN='NAFTA_CERTIFICATE_OF_ORIGIN'
    OP__900='OP_900'
    PRO_FORMA_INVOICE='PRO_FORMA_INVOICE'
    RETURN_INSTRUCTIONS='RETURN_INSTRUCTIONS'
    VICS_BILL_OF_LADING='VICS_BILL_OF_LADING'


class RequiredShippingDocumentType(str, Enum):
    CANADIAN_B_13_A='CANADIAN_B13A'
    CERTIFICATE_OF_ORIGIN='CERTIFICATE_OF_ORIGIN'
    COMMERCIAL_INVOICE='COMMERCIAL_INVOICE'
    INTERNATIONAL_AIRWAY_BILL='INTERNATIONAL_AIRWAY_BILL'
    MAIL_SERVICE_AIRWAY_BILL='MAIL_SERVICE_AIRWAY_BILL'
    SHIPPERS_EXPORT_DECLARATION='SHIPPERS_EXPORT_DECLARATION'


class RestrictionsAndPrivilegesPolicyExceptionType(str, Enum):
    POLICIES_NOT_FOUND='POLICIES_NOT_FOUND'
    SERVICE_UNAVAILABLE='SERVICE_UNAVAILABLE'


class ReturnEMailAllowedSpecialServiceType(str, Enum):
    """These values are used to control the availability of certain special
    services at the time when a customer uses the e-mail label link to
    create a return shipment."""
    SATURDAY_DELIVERY='SATURDAY_DELIVERY'
    SATURDAY_PICKUP='SATURDAY_PICKUP'


class ReturnType(str, Enum):
    FEDEX_TAG='FEDEX_TAG'
    NET_RETURN='NET_RETURN'
    PENDING='PENDING'
    PRINT_RETURN_LABEL='PRINT_RETURN_LABEL'
    VOICE_CALL_TAG='VOICE_CALL_TAG'


class ReturnedRateType(str, Enum):
    """The "PAYOR..." rates are expressed in the currency identified in the
    payor's rate table(s). The "RATED..." rates are expressed in the
    currency of the origin country. Former "...COUNTER..." values have
    become "...RETAIL..." values, except for PAYOR_COUNTER and
    RATED_COUNTER, which have been removed."""
    INCENTIVE='INCENTIVE'
    NEGOTIATED='NEGOTIATED'
    PAYOR_ACCOUNT_PACKAGE='PAYOR_ACCOUNT_PACKAGE'
    PAYOR_ACCOUNT_SHIPMENT='PAYOR_ACCOUNT_SHIPMENT'
    PAYOR_CUSTOM_PACKAGE='PAYOR_CUSTOM_PACKAGE'
    PAYOR_CUSTOM_SHIPMENT='PAYOR_CUSTOM_SHIPMENT'
    PAYOR_LIST_PACKAGE='PAYOR_LIST_PACKAGE'
    PAYOR_LIST_SHIPMENT='PAYOR_LIST_SHIPMENT'
    PAYOR_RETAIL_PACKAGE='PAYOR_RETAIL_PACKAGE'
    PAYOR_RETAIL_SHIPMENT='PAYOR_RETAIL_SHIPMENT'
    PREFERRED_ACCOUNT_PACKAGE='PREFERRED_ACCOUNT_PACKAGE'
    PREFERRED_ACCOUNT_SHIPMENT='PREFERRED_ACCOUNT_SHIPMENT'
    PREFERRED_CUSTOM_PACKAGE='PREFERRED_CUSTOM_PACKAGE'
    PREFERRED_CUSTOM_SHIPMENT='PREFERRED_CUSTOM_SHIPMENT'
    PREFERRED_INCENTIVE='PREFERRED_INCENTIVE'
    PREFERRED_LIST_PACKAGE='PREFERRED_LIST_PACKAGE'
    PREFERRED_LIST_SHIPMENT='PREFERRED_LIST_SHIPMENT'
    PREFERRED_NEGOTIATED='PREFERRED_NEGOTIATED'
    PREFERRED_RETAIL_PACKAGE='PREFERRED_RETAIL_PACKAGE'
    PREFERRED_RETAIL_SHIPMENT='PREFERRED_RETAIL_SHIPMENT'
    RATED_ACCOUNT_PACKAGE='RATED_ACCOUNT_PACKAGE'
    RATED_ACCOUNT_SHIPMENT='RATED_ACCOUNT_SHIPMENT'
    RATED_CUSTOM_PACKAGE='RATED_CUSTOM_PACKAGE'
    RATED_CUSTOM_SHIPMENT='RATED_CUSTOM_SHIPMENT'
    RATED_LIST_PACKAGE='RATED_LIST_PACKAGE'
    RATED_LIST_SHIPMENT='RATED_LIST_SHIPMENT'
    RATED_RETAIL_PACKAGE='RATED_RETAIL_PACKAGE'
    RATED_RETAIL_SHIPMENT='RATED_RETAIL_SHIPMENT'


class RotationType(str, Enum):
    """Describes the rotation of an item from its default orientation."""
    LEFT='LEFT'
    NONE='NONE'
    RIGHT='RIGHT'
    UPSIDE_DOWN='UPSIDE_DOWN'


class SecondaryBarcodeType(str, Enum):
    COMMON__2_D='COMMON_2D'
    NONE='NONE'
    SSCC__18='SSCC_18'
    USPS='USPS'


class ServiceCategoryType(str, Enum):
    GROUND_HOME_DELIVERY='GROUND_HOME_DELIVERY'


class ServiceIdType(str, Enum):
    """Identifies the available set of callable FedEx services. This
    information deals with the service being called by the web service
    client, not the FedEx transportation service offerings. Set the value
    to "wsi" if you are using the FedEx web services interface."""
    VACS='vacs'


class ServiceOptionType(str, Enum):
    """These values control the optional features of service that may be
    combined in a commitment/rate comparision transaction."""
    FEDEX_ONE_RATE='FEDEX_ONE_RATE'
    FREIGHT_GUARANTEE='FREIGHT_GUARANTEE'
    SATURDAY_DELIVERY='SATURDAY_DELIVERY'
    SMART_POST_ALLOWED_INDICIA='SMART_POST_ALLOWED_INDICIA'
    SMART_POST_HUB_ID='SMART_POST_HUB_ID'


class ShipmentDryIceProcessingOptionType(str, Enum):
    SHIPMENT_LEVEL_DRY_ICE_ONLY='SHIPMENT_LEVEL_DRY_ICE_ONLY'


class ShipmentNotificationAggregationType(str, Enum):
    PER_PACKAGE='PER_PACKAGE'
    PER_SHIPMENT='PER_SHIPMENT'


class ShipmentNotificationRoleType(str, Enum):
    BROKER='BROKER'
    OTHER='OTHER'
    RECIPIENT='RECIPIENT'
    SHIPPER='SHIPPER'


class ShipmentOnlyFieldsType(str, Enum):
    """These values identify which package-level data values will be provided
    at the shipment-level."""
    DIMENSIONS='DIMENSIONS'
    INSURED_VALUE='INSURED_VALUE'
    WEIGHT='WEIGHT'


class ShipmentProcessingOptionType(str, Enum):
    """Identifies special or custom features to be applied to a shipment."""
    BYPASS_CLEARANCE_PROHIBITS='BYPASS_CLEARANCE_PROHIBITS'
    BYPASS_REGULATORY_VALIDATION='BYPASS_REGULATORY_VALIDATION'
    CONVENIENCE_MULTIPLE_PACKAGES='CONVENIENCE_MULTIPLE_PACKAGES'
    CUSTOM_TRANSIT_TIME='CUSTOM_TRANSIT_TIME'
    FUTURE_DAY_SHIPMENT='FUTURE_DAY_SHIPMENT'
    IATA_CLASS_AND_AIRCRAFT_ONLY='IATA_CLASS_AND_AIRCRAFT_ONLY'
    NO_COMMITMENT_DATE_REQUESTED='NO_COMMITMENT_DATE_REQUESTED'
    PACKAGE_LEVEL_COMMODITIES='PACKAGE_LEVEL_COMMODITIES'
    PRE_EIG_PROCESSING='PRE_EIG_PROCESSING'
    PRE_ETD_ENHANCEMENTS='PRE_ETD_ENHANCEMENTS'
    PRE_FXF_2020_HANDLING_UNIT_DETAILS='PRE_FXF2020_HANDLING_UNIT_DETAILS'
    PRE_MULTIPLIER_PROCESSING='PRE_MULTIPLIER_PROCESSING'
    REQUIRE_PRE_EPIC_BARCODE='REQUIRE_PRE_EPIC_BARCODE'


class ShipmentRuleType(str, Enum):
    EXPORT='EXPORT'
    GENERAL='GENERAL'
    IMPORT='IMPORT'


class ShippingDocumentDispositionType(str, Enum):
    """Specifies how to return a shipping document to the caller."""
    CONFIRMED='CONFIRMED'
    DEFERRED_QUEUED='DEFERRED_QUEUED'
    DEFERRED_RETURNED='DEFERRED_RETURNED'
    DEFERRED_STORED='DEFERRED_STORED'
    EMAILED='EMAILED'
    QUEUED='QUEUED'
    RETURNED='RETURNED'
    STORED='STORED'


class ShippingDocumentEMailGroupingType(str, Enum):
    BY_RECIPIENT='BY_RECIPIENT'
    NONE='NONE'


class ShippingDocumentGroupingType(str, Enum):
    """Specifies how to organize all shipping documents of the same type."""
    CONSOLIDATED_BY_DOCUMENT_TYPE='CONSOLIDATED_BY_DOCUMENT_TYPE'
    CONSOLIDATED_BY_IMAGE_TYPE='CONSOLIDATED_BY_IMAGE_TYPE'
    INDIVIDUAL='INDIVIDUAL'


class ShippingDocumentImageType(str, Enum):
    """Specifies the image format used for a shipping document."""
    DIB='DIB'
    DOC='DOC'
    DPL='DPL'
    EPL_2='EPL2'
    GIF='GIF'
    PDF='PDF'
    PNG='PNG'
    RTF='RTF'
    TEXT='TEXT'
    ZPLII='ZPLII'


class ShippingDocumentNamingType(str, Enum):
    """Identifies the convention by which file names are constructed for STORED
    or DEFERRED documents."""
    FAST='FAST'
    LEGACY_FXRS='LEGACY_FXRS'


class ShippingDocumentStockType(str, Enum):
    """Specifies the type of paper (stock) on which a document will be
    printed."""
    OP__900_LG='OP_900_LG'
    OP__900_LG_B='OP_900_LG_B'
    OP__900_LL='OP_900_LL'
    OP__900_LL_B='OP_900_LL_B'
    OP__950='OP_950'
    PAPER__4_X_6='PAPER_4X6'
    PAPER__4_PER_PAGE_PORTRAIT='PAPER_4_PER_PAGE_PORTRAIT'
    PAPER_LETTER='PAPER_LETTER'
    STOCK__4_X_6='STOCK_4X6'
    STOCK__4_X_6_75_LEADING_DOC_TAB='STOCK_4X6.75_LEADING_DOC_TAB'
    STOCK__4_X_6_75_TRAILING_DOC_TAB='STOCK_4X6.75_TRAILING_DOC_TAB'
    STOCK__4_X_8='STOCK_4X8'
    STOCK__4_X_9_LEADING_DOC_TAB='STOCK_4X9_LEADING_DOC_TAB'
    STOCK__4_X_9_TRAILING_DOC_TAB='STOCK_4X9_TRAILING_DOC_TAB'


class ShippingDocumentStorageDetailType(str, Enum):
    ASYNC_SERVICE='ASYNC_SERVICE'
    LOCAL_FILE_SYSTEM='LOCAL_FILE_SYSTEM'


class SignatureOptionType(str, Enum):
    ADULT='ADULT'
    DIRECT='DIRECT'
    INDIRECT='INDIRECT'
    NO_SIGNATURE_REQUIRED='NO_SIGNATURE_REQUIRED'
    SERVICE_DEFAULT='SERVICE_DEFAULT'


class SmartPostAccountFeatureType(str, Enum):
    """Identifies features of SmartPost shipping which apply to a customer
    account per contract."""
    DELIVERY_CONFIRMATION_APPLIED='DELIVERY_CONFIRMATION_APPLIED'
    OUTBOUND_ALLOWED='OUTBOUND_ALLOWED'
    RETURNS_ALLOWED='RETURNS_ALLOWED'


class SmartPostAncillaryEndorsementType(str, Enum):
    """These values are mutually exclusive; at most one of them can be attached
    to a SmartPost shipment."""
    ADDRESS_CORRECTION='ADDRESS_CORRECTION'
    CARRIER_LEAVE_IF_NO_RESPONSE='CARRIER_LEAVE_IF_NO_RESPONSE'
    CHANGE_SERVICE='CHANGE_SERVICE'
    FORWARDING_SERVICE='FORWARDING_SERVICE'
    RETURN_SERVICE='RETURN_SERVICE'


class SmartPostIndiciaType(str, Enum):
    MEDIA_MAIL='MEDIA_MAIL'
    PARCEL_RETURN='PARCEL_RETURN'
    PARCEL_SELECT='PARCEL_SELECT'
    PRESORTED_BOUND_PRINTED_MATTER='PRESORTED_BOUND_PRINTED_MATTER'
    PRESORTED_STANDARD='PRESORTED_STANDARD'


class SmartPostShipmentProcessingOptionType(str, Enum):
    GROUND_TRACKING_NUMBER_REQUESTED='GROUND_TRACKING_NUMBER_REQUESTED'


class SmartPostShipmentSpecialServiceType(str, Enum):
    USPS_DELIVERY_CONFIRMATION='USPS_DELIVERY_CONFIRMATION'


class SpecialEquipmentType(str, Enum):
    """Identifies types of special equipment used in loading/unloading Freight
    shipments"""
    FORK_LIFT='FORK_LIFT'


class SplitPaymentType(str, Enum):
    """Identifies an aspect of a shipment that may be paid separately."""
    APPOINTMENT_DELIVERY='APPOINTMENT_DELIVERY'
    PIECE_COUNT_VERIFICATION='PIECE_COUNT_VERIFICATION'


class StatusType(str, Enum):
    """Specifies different statuses."""
    ACTIVE='ACTIVE'
    EXPIRED='EXPIRED'
    EXPIRED_WITHIN_GRACE_PERIOD='EXPIRED_WITHIN_GRACE_PERIOD'
    PENDING_RENEWAL='PENDING_RENEWAL'


class SuppliesTypes(str, Enum):
    FEDEX_PAK='FEDEX_PAK'
    FEDEX_SECURITY_BOX='FEDEX_SECURITY_BOX'
    NO_SPECIAL_SUPPLIES='NO_SPECIAL_SUPPLIES'


class TaxesOrMiscellaneousChargeType(str, Enum):
    """Specifice the kind of tax or miscellaneous charge being reported on a
    Commercial Invoice."""
    COMMISSIONS='COMMISSIONS'
    DISCOUNTS='DISCOUNTS'
    HANDLING_FEES='HANDLING_FEES'
    OTHER='OTHER'
    ROYALTIES_AND_LICENSE_FEES='ROYALTIES_AND_LICENSE_FEES'
    TAXES='TAXES'


class TinType(str, Enum):
    BUSINESS_NATIONAL='BUSINESS_NATIONAL'
    BUSINESS_STATE='BUSINESS_STATE'
    BUSINESS_UNION='BUSINESS_UNION'
    PERSONAL_NATIONAL='PERSONAL_NATIONAL'
    PERSONAL_STATE='PERSONAL_STATE'


class TrackingIdType(str, Enum):
    EXPRESS='EXPRESS'
    FEDEX='FEDEX'
    FREIGHT='FREIGHT'
    GROUND='GROUND'
    INTERNAL='INTERNAL'
    UNKNOWN='UNKNOWN'
    USPS='USPS'


class TransactionSourceFormat(str, Enum):
    API_CTS='API_CTS'
    API_XML='API_XML'
    DIRECT='DIRECT'
    DIRECT_XML='DIRECT_XML'
    FXRS_CTS='FXRS_CTS'
    UNKNOWN='UNKNOWN'
    WSI_XML='WSI_XML'


class TransborderDistributionSpecialServiceType(str, Enum):
    """Identifies features of service requested for a Transborder Distribution
    shipment."""
    FEDEX_LTL='FEDEX_LTL'


class TransitTimeType(str, Enum):
    EIGHTEEN_DAYS='EIGHTEEN_DAYS'
    EIGHT_DAYS='EIGHT_DAYS'
    ELEVEN_DAYS='ELEVEN_DAYS'
    FIFTEEN_DAYS='FIFTEEN_DAYS'
    FIVE_DAYS='FIVE_DAYS'
    FOURTEEN_DAYS='FOURTEEN_DAYS'
    FOUR_DAYS='FOUR_DAYS'
    NINETEEN_DAYS='NINETEEN_DAYS'
    NINE_DAYS='NINE_DAYS'
    ONE_DAY='ONE_DAY'
    SEVENTEEN_DAYS='SEVENTEEN_DAYS'
    SEVEN_DAYS='SEVEN_DAYS'
    SIXTEEN_DAYS='SIXTEEN_DAYS'
    SIX_DAYS='SIX_DAYS'
    TEN_DAYS='TEN_DAYS'
    THIRTEEN_DAYS='THIRTEEN_DAYS'
    THREE_DAYS='THREE_DAYS'
    TWELVE_DAYS='TWELVE_DAYS'
    TWENTY_DAYS='TWENTY_DAYS'
    TWO_DAYS='TWO_DAYS'
    UNKNOWN='UNKNOWN'


class UploadDocumentIdProducer(str, Enum):
    """Specifies the application that is responsible for managing the document
    id."""
    CUSTOMER='CUSTOMER'
    FEDEX_CAFE='FEDEX_CAFE'
    FEDEX_CSHP='FEDEX_CSHP'
    FEDEX_FXRS='FEDEX_FXRS'
    FEDEX_GSMW='FEDEX_GSMW'
    FEDEX_GTM='FEDEX_GTM'
    FEDEX_INET='FEDEX_INET'


class UploadDocumentProducerType(str, Enum):
    CUSTOMER='CUSTOMER'
    FEDEX_CAFE='FEDEX_CAFE'
    FEDEX_CLS='FEDEX_CLS'
    FEDEX_FIDT='FEDEX_FIDT'
    FEDEX_FXRS='FEDEX_FXRS'
    FEDEX_GSMW='FEDEX_GSMW'
    FEDEX_GTM='FEDEX_GTM'
    OTHER='OTHER'


class UploadDocumentType(str, Enum):
    CERTIFICATE_OF_ORIGIN='CERTIFICATE_OF_ORIGIN'
    COMMERCIAL_INVOICE='COMMERCIAL_INVOICE'
    ETD_LABEL='ETD_LABEL'
    NAFTA_CERTIFICATE_OF_ORIGIN='NAFTA_CERTIFICATE_OF_ORIGIN'
    NET_RATE_SHEET='NET_RATE_SHEET'
    OTHER='OTHER'
    PRO_FORMA_INVOICE='PRO_FORMA_INVOICE'


class UsageType(str, Enum):
    """Specifies the usage type of the data item under consideration."""
    PRIMARY='PRIMARY'
    SECONDARY='SECONDARY'


class VolumeUnits(str, Enum):
    """Units of three-dimensional volume/cubic measure."""
    CUBIC_FT='CUBIC_FT'
    CUBIC_M='CUBIC_M'


class WebServiceEnvironment(str, Enum):
    """Identifies the environment (level) for which an AuthenticationCredential
    is valid, and within which transactions are received."""
    PRODUCTION='PRODUCTION'
    TEST='TEST'


class WeighingScaleType(str, Enum):
    """Identifies types of scales used in weighing Freight shipments"""
    FEDEX_SCALE='FEDEX_SCALE'
    PUBLIC_SCALE='PUBLIC_SCALE'


class WeightSource(str, Enum):
    MANUAL='MANUAL'
    SCALE='SCALE'


class WeightUnits(str, Enum):
    KG='KG'
    LB='LB'


class AccountAliasDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Id=None, Type=None, Contact=None, Attributes=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Id = Id
        self.Id_nsprefix_ = None
        self.Type = Type
        self.validate_AccountAliasType(self.Type)
        self.Type_nsprefix_ = "ns"
        self.Contact = Contact
        self.Contact_nsprefix_ = "ns"
        if Attributes is None:
            self.Attributes = []
        else:
            self.Attributes = Attributes
        self.Attributes_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AccountAliasDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AccountAliasDetail.subclass:
            return AccountAliasDetail.subclass(*args_, **kwargs_)
        else:
            return AccountAliasDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Id(self):
        return self.Id
    def set_Id(self, Id):
        self.Id = Id
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_Contact(self):
        return self.Contact
    def set_Contact(self, Contact):
        self.Contact = Contact
    def get_Attributes(self):
        return self.Attributes
    def set_Attributes(self, Attributes):
        self.Attributes = Attributes
    def add_Attributes(self, value):
        self.Attributes.append(value)
    def insert_Attributes_at(self, index, value):
        self.Attributes.insert(index, value)
    def replace_Attributes_at(self, index, value):
        self.Attributes[index] = value
    def validate_AccountAliasType(self, value):
        result = True
        # Validate type AccountAliasType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BILLING', 'ENTERPRISE', 'PRIMARY_ACCOUNT']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on AccountAliasType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_AccountAliasAttributeType(self, value):
        result = True
        # Validate type AccountAliasAttributeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['INCLUDE_ALIAS_ON_BOL', 'PRIMARY_ACCOUNT_ALIAS_IS_RESPONSIBLE_FOR_PAYMENT']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on AccountAliasAttributeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Id is not None or
            self.Type is not None or
            self.Contact is not None or
            self.Attributes
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AccountAliasDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AccountAliasDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AccountAliasDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AccountAliasDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AccountAliasDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='AccountAliasDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AccountAliasDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Id is not None:
            namespaceprefix_ = self.Id_nsprefix_ + ':' if (UseCapturedNS_ and self.Id_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sId>%s</%sId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Id), input_name='Id')), namespaceprefix_ , eol_))
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.Contact is not None:
            namespaceprefix_ = self.Contact_nsprefix_ + ':' if (UseCapturedNS_ and self.Contact_nsprefix_) else ''
            self.Contact.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Contact', pretty_print=pretty_print)
        for Attributes_ in self.Attributes:
            namespaceprefix_ = self.Attributes_nsprefix_ + ':' if (UseCapturedNS_ and self.Attributes_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAttributes>%s</%sAttributes>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Attributes_), input_name='Attributes')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Id':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Id')
            value_ = self.gds_validate_string(value_, node, 'Id')
            self.Id = value_
            self.Id_nsprefix_ = child_.prefix
        elif nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type AccountAliasType
            self.validate_AccountAliasType(self.Type)
        elif nodeName_ == 'Contact':
            obj_ = ProfileContact.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Contact = obj_
            obj_.original_tagname_ = 'Contact'
        elif nodeName_ == 'Attributes':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Attributes')
            value_ = self.gds_validate_string(value_, node, 'Attributes')
            self.Attributes.append(value_)
            self.Attributes_nsprefix_ = child_.prefix
            # validate type AccountAliasAttributeType
            self.validate_AccountAliasAttributeType(self.Attributes[-1])
# end class AccountAliasDetail


class AccountGroupDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, GroupCode=None, GroupId=None, MasterAccountDetail=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.GroupCode = GroupCode
        self.GroupCode_nsprefix_ = None
        self.GroupId = GroupId
        self.GroupId_nsprefix_ = None
        self.MasterAccountDetail = MasterAccountDetail
        self.MasterAccountDetail_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AccountGroupDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AccountGroupDetail.subclass:
            return AccountGroupDetail.subclass(*args_, **kwargs_)
        else:
            return AccountGroupDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_GroupCode(self):
        return self.GroupCode
    def set_GroupCode(self, GroupCode):
        self.GroupCode = GroupCode
    def get_GroupId(self):
        return self.GroupId
    def set_GroupId(self, GroupId):
        self.GroupId = GroupId
    def get_MasterAccountDetail(self):
        return self.MasterAccountDetail
    def set_MasterAccountDetail(self, MasterAccountDetail):
        self.MasterAccountDetail = MasterAccountDetail
    def hasContent_(self):
        if (
            self.GroupCode is not None or
            self.GroupId is not None or
            self.MasterAccountDetail is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AccountGroupDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AccountGroupDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AccountGroupDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AccountGroupDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AccountGroupDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='AccountGroupDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AccountGroupDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.GroupCode is not None:
            namespaceprefix_ = self.GroupCode_nsprefix_ + ':' if (UseCapturedNS_ and self.GroupCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroupCode>%s</%sGroupCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.GroupCode), input_name='GroupCode')), namespaceprefix_ , eol_))
        if self.GroupId is not None:
            namespaceprefix_ = self.GroupId_nsprefix_ + ':' if (UseCapturedNS_ and self.GroupId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroupId>%s</%sGroupId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.GroupId), input_name='GroupId')), namespaceprefix_ , eol_))
        if self.MasterAccountDetail is not None:
            namespaceprefix_ = self.MasterAccountDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.MasterAccountDetail_nsprefix_) else ''
            self.MasterAccountDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MasterAccountDetail', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'GroupCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'GroupCode')
            value_ = self.gds_validate_string(value_, node, 'GroupCode')
            self.GroupCode = value_
            self.GroupCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'GroupId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'GroupId')
            value_ = self.gds_validate_string(value_, node, 'GroupId')
            self.GroupId = value_
            self.GroupId_nsprefix_ = child_.prefix
        elif nodeName_ == 'MasterAccountDetail':
            obj_ = AccountGroupMasterAccountDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MasterAccountDetail = obj_
            obj_.original_tagname_ = 'MasterAccountDetail'
# end class AccountGroupDetail


class AccountGroupMasterAccountDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, AccountNumber=None, OperatingCompany=None, PricingSubGroupCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.AccountNumber = AccountNumber
        self.AccountNumber_nsprefix_ = None
        self.OperatingCompany = OperatingCompany
        self.validate_OperatingCompanyType(self.OperatingCompany)
        self.OperatingCompany_nsprefix_ = "ns"
        self.PricingSubGroupCode = PricingSubGroupCode
        self.PricingSubGroupCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AccountGroupMasterAccountDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AccountGroupMasterAccountDetail.subclass:
            return AccountGroupMasterAccountDetail.subclass(*args_, **kwargs_)
        else:
            return AccountGroupMasterAccountDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_AccountNumber(self):
        return self.AccountNumber
    def set_AccountNumber(self, AccountNumber):
        self.AccountNumber = AccountNumber
    def get_OperatingCompany(self):
        return self.OperatingCompany
    def set_OperatingCompany(self, OperatingCompany):
        self.OperatingCompany = OperatingCompany
    def get_PricingSubGroupCode(self):
        return self.PricingSubGroupCode
    def set_PricingSubGroupCode(self, PricingSubGroupCode):
        self.PricingSubGroupCode = PricingSubGroupCode
    def validate_OperatingCompanyType(self, value):
        result = True
        # Validate type OperatingCompanyType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FEDEX_CARGO', 'FEDEX_CORPORATE_SERVICES', 'FEDEX_CORPORATION', 'FEDEX_CUSTOMER_INFORMATION_SYSTEMS', 'FEDEX_CUSTOM_CRITICAL', 'FEDEX_EXPRESS', 'FEDEX_FREIGHT', 'FEDEX_GROUND', 'FEDEX_KINKOS', 'FEDEX_OFFICE', 'FEDEX_SERVICES', 'FEDEX_TRADE_NETWORKS']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on OperatingCompanyType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.AccountNumber is not None or
            self.OperatingCompany is not None or
            self.PricingSubGroupCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AccountGroupMasterAccountDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AccountGroupMasterAccountDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AccountGroupMasterAccountDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AccountGroupMasterAccountDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AccountGroupMasterAccountDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='AccountGroupMasterAccountDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AccountGroupMasterAccountDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AccountNumber is not None:
            namespaceprefix_ = self.AccountNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.AccountNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAccountNumber>%s</%sAccountNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AccountNumber), input_name='AccountNumber')), namespaceprefix_ , eol_))
        if self.OperatingCompany is not None:
            namespaceprefix_ = self.OperatingCompany_nsprefix_ + ':' if (UseCapturedNS_ and self.OperatingCompany_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOperatingCompany>%s</%sOperatingCompany>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OperatingCompany), input_name='OperatingCompany')), namespaceprefix_ , eol_))
        if self.PricingSubGroupCode is not None:
            namespaceprefix_ = self.PricingSubGroupCode_nsprefix_ + ':' if (UseCapturedNS_ and self.PricingSubGroupCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPricingSubGroupCode>%s</%sPricingSubGroupCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PricingSubGroupCode), input_name='PricingSubGroupCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'AccountNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AccountNumber')
            value_ = self.gds_validate_string(value_, node, 'AccountNumber')
            self.AccountNumber = value_
            self.AccountNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'OperatingCompany':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'OperatingCompany')
            value_ = self.gds_validate_string(value_, node, 'OperatingCompany')
            self.OperatingCompany = value_
            self.OperatingCompany_nsprefix_ = child_.prefix
            # validate type OperatingCompanyType
            self.validate_OperatingCompanyType(self.OperatingCompany)
        elif nodeName_ == 'PricingSubGroupCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PricingSubGroupCode')
            value_ = self.gds_validate_string(value_, node, 'PricingSubGroupCode')
            self.PricingSubGroupCode = value_
            self.PricingSubGroupCode_nsprefix_ = child_.prefix
# end class AccountGroupMasterAccountDetail


class AccountGroupMembershipDetail(GeneratedsSuper):
    """Specifies the details about the account group the account is a member
    of"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, AccountGroup=None, EffectiveDate=None, ExpirationDate=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.AccountGroup = AccountGroup
        self.AccountGroup_nsprefix_ = "ns"
        if isinstance(EffectiveDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(EffectiveDate, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = EffectiveDate
        self.EffectiveDate = initvalue_
        self.EffectiveDate_nsprefix_ = None
        if isinstance(ExpirationDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ExpirationDate, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = ExpirationDate
        self.ExpirationDate = initvalue_
        self.ExpirationDate_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AccountGroupMembershipDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AccountGroupMembershipDetail.subclass:
            return AccountGroupMembershipDetail.subclass(*args_, **kwargs_)
        else:
            return AccountGroupMembershipDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_AccountGroup(self):
        return self.AccountGroup
    def set_AccountGroup(self, AccountGroup):
        self.AccountGroup = AccountGroup
    def get_EffectiveDate(self):
        return self.EffectiveDate
    def set_EffectiveDate(self, EffectiveDate):
        self.EffectiveDate = EffectiveDate
    def get_ExpirationDate(self):
        return self.ExpirationDate
    def set_ExpirationDate(self, ExpirationDate):
        self.ExpirationDate = ExpirationDate
    def hasContent_(self):
        if (
            self.AccountGroup is not None or
            self.EffectiveDate is not None or
            self.ExpirationDate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AccountGroupMembershipDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AccountGroupMembershipDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AccountGroupMembershipDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AccountGroupMembershipDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AccountGroupMembershipDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='AccountGroupMembershipDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AccountGroupMembershipDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AccountGroup is not None:
            namespaceprefix_ = self.AccountGroup_nsprefix_ + ':' if (UseCapturedNS_ and self.AccountGroup_nsprefix_) else ''
            self.AccountGroup.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AccountGroup', pretty_print=pretty_print)
        if self.EffectiveDate is not None:
            namespaceprefix_ = self.EffectiveDate_nsprefix_ + ':' if (UseCapturedNS_ and self.EffectiveDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEffectiveDate>%s</%sEffectiveDate>%s' % (namespaceprefix_ , self.gds_format_datetime(self.EffectiveDate, input_name='EffectiveDate'), namespaceprefix_ , eol_))
        if self.ExpirationDate is not None:
            namespaceprefix_ = self.ExpirationDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ExpirationDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExpirationDate>%s</%sExpirationDate>%s' % (namespaceprefix_ , self.gds_format_datetime(self.ExpirationDate, input_name='ExpirationDate'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'AccountGroup':
            obj_ = AccountGroupDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AccountGroup = obj_
            obj_.original_tagname_ = 'AccountGroup'
        elif nodeName_ == 'EffectiveDate':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.EffectiveDate = dval_
            self.EffectiveDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'ExpirationDate':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.ExpirationDate = dval_
            self.ExpirationDate_nsprefix_ = child_.prefix
# end class AccountGroupMembershipDetail


class AdditionalLabelsDetail(GeneratedsSuper):
    """Specifies additional labels to be produced. All required labels for
    shipments will be produced without the need to request additional
    labels. These are only available as thermal labels."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, Count=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.validate_AdditionalLabelsType(self.Type)
        self.Type_nsprefix_ = "ns"
        self.Count = Count
        self.Count_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AdditionalLabelsDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AdditionalLabelsDetail.subclass:
            return AdditionalLabelsDetail.subclass(*args_, **kwargs_)
        else:
            return AdditionalLabelsDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_Count(self):
        return self.Count
    def set_Count(self, Count):
        self.Count = Count
    def validate_AdditionalLabelsType(self, value):
        result = True
        # Validate type AdditionalLabelsType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BROKER', 'CONSIGNEE', 'CUSTOMS', 'DESTINATION', 'DESTINATION_CONTROL_STATEMENT', 'FREIGHT_REFERENCE', 'MANIFEST', 'ORIGIN', 'RECIPIENT', 'SECOND_ADDRESS', 'SHIPPER']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on AdditionalLabelsType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Type is not None or
            self.Count is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AdditionalLabelsDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AdditionalLabelsDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AdditionalLabelsDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AdditionalLabelsDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AdditionalLabelsDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='AdditionalLabelsDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AdditionalLabelsDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.Count is not None:
            namespaceprefix_ = self.Count_nsprefix_ + ':' if (UseCapturedNS_ and self.Count_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCount>%s</%sCount>%s' % (namespaceprefix_ , self.gds_format_integer(self.Count, input_name='Count'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type AdditionalLabelsType
            self.validate_AdditionalLabelsType(self.Type)
        elif nodeName_ == 'Count' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'Count')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'Count')
            self.Count = ival_
            self.Count_nsprefix_ = child_.prefix
# end class AdditionalLabelsDetail


class Address(GeneratedsSuper):
    """Descriptive data for a physical location. May be used as an actual
    physical address (place to which one could go), or as a container of
    "address parts" which should be handled as a unit (such as a city-
    state-ZIP combination within the US)."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, StreetLines=None, City=None, StateOrProvinceCode=None, PostalCode=None, UrbanizationCode=None, CountryCode=None, CountryName=None, Residential=None, GeographicCoordinates=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if StreetLines is None:
            self.StreetLines = []
        else:
            self.StreetLines = StreetLines
        self.StreetLines_nsprefix_ = None
        self.City = City
        self.City_nsprefix_ = None
        self.StateOrProvinceCode = StateOrProvinceCode
        self.StateOrProvinceCode_nsprefix_ = None
        self.PostalCode = PostalCode
        self.PostalCode_nsprefix_ = None
        self.UrbanizationCode = UrbanizationCode
        self.UrbanizationCode_nsprefix_ = None
        self.CountryCode = CountryCode
        self.CountryCode_nsprefix_ = None
        self.CountryName = CountryName
        self.CountryName_nsprefix_ = None
        self.Residential = Residential
        self.Residential_nsprefix_ = None
        self.GeographicCoordinates = GeographicCoordinates
        self.GeographicCoordinates_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Address)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Address.subclass:
            return Address.subclass(*args_, **kwargs_)
        else:
            return Address(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_StreetLines(self):
        return self.StreetLines
    def set_StreetLines(self, StreetLines):
        self.StreetLines = StreetLines
    def add_StreetLines(self, value):
        self.StreetLines.append(value)
    def insert_StreetLines_at(self, index, value):
        self.StreetLines.insert(index, value)
    def replace_StreetLines_at(self, index, value):
        self.StreetLines[index] = value
    def get_City(self):
        return self.City
    def set_City(self, City):
        self.City = City
    def get_StateOrProvinceCode(self):
        return self.StateOrProvinceCode
    def set_StateOrProvinceCode(self, StateOrProvinceCode):
        self.StateOrProvinceCode = StateOrProvinceCode
    def get_PostalCode(self):
        return self.PostalCode
    def set_PostalCode(self, PostalCode):
        self.PostalCode = PostalCode
    def get_UrbanizationCode(self):
        return self.UrbanizationCode
    def set_UrbanizationCode(self, UrbanizationCode):
        self.UrbanizationCode = UrbanizationCode
    def get_CountryCode(self):
        return self.CountryCode
    def set_CountryCode(self, CountryCode):
        self.CountryCode = CountryCode
    def get_CountryName(self):
        return self.CountryName
    def set_CountryName(self, CountryName):
        self.CountryName = CountryName
    def get_Residential(self):
        return self.Residential
    def set_Residential(self, Residential):
        self.Residential = Residential
    def get_GeographicCoordinates(self):
        return self.GeographicCoordinates
    def set_GeographicCoordinates(self, GeographicCoordinates):
        self.GeographicCoordinates = GeographicCoordinates
    def hasContent_(self):
        if (
            self.StreetLines or
            self.City is not None or
            self.StateOrProvinceCode is not None or
            self.PostalCode is not None or
            self.UrbanizationCode is not None or
            self.CountryCode is not None or
            self.CountryName is not None or
            self.Residential is not None or
            self.GeographicCoordinates is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Address', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Address')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Address':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Address')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Address', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Address'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Address', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for StreetLines_ in self.StreetLines:
            namespaceprefix_ = self.StreetLines_nsprefix_ + ':' if (UseCapturedNS_ and self.StreetLines_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStreetLines>%s</%sStreetLines>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(StreetLines_), input_name='StreetLines')), namespaceprefix_ , eol_))
        if self.City is not None:
            namespaceprefix_ = self.City_nsprefix_ + ':' if (UseCapturedNS_ and self.City_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCity>%s</%sCity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.City), input_name='City')), namespaceprefix_ , eol_))
        if self.StateOrProvinceCode is not None:
            namespaceprefix_ = self.StateOrProvinceCode_nsprefix_ + ':' if (UseCapturedNS_ and self.StateOrProvinceCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStateOrProvinceCode>%s</%sStateOrProvinceCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.StateOrProvinceCode), input_name='StateOrProvinceCode')), namespaceprefix_ , eol_))
        if self.PostalCode is not None:
            namespaceprefix_ = self.PostalCode_nsprefix_ + ':' if (UseCapturedNS_ and self.PostalCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPostalCode>%s</%sPostalCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PostalCode), input_name='PostalCode')), namespaceprefix_ , eol_))
        if self.UrbanizationCode is not None:
            namespaceprefix_ = self.UrbanizationCode_nsprefix_ + ':' if (UseCapturedNS_ and self.UrbanizationCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUrbanizationCode>%s</%sUrbanizationCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.UrbanizationCode), input_name='UrbanizationCode')), namespaceprefix_ , eol_))
        if self.CountryCode is not None:
            namespaceprefix_ = self.CountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountryCode>%s</%sCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), namespaceprefix_ , eol_))
        if self.CountryName is not None:
            namespaceprefix_ = self.CountryName_nsprefix_ + ':' if (UseCapturedNS_ and self.CountryName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountryName>%s</%sCountryName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CountryName), input_name='CountryName')), namespaceprefix_ , eol_))
        if self.Residential is not None:
            namespaceprefix_ = self.Residential_nsprefix_ + ':' if (UseCapturedNS_ and self.Residential_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sResidential>%s</%sResidential>%s' % (namespaceprefix_ , self.gds_format_boolean(self.Residential, input_name='Residential'), namespaceprefix_ , eol_))
        if self.GeographicCoordinates is not None:
            namespaceprefix_ = self.GeographicCoordinates_nsprefix_ + ':' if (UseCapturedNS_ and self.GeographicCoordinates_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGeographicCoordinates>%s</%sGeographicCoordinates>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.GeographicCoordinates), input_name='GeographicCoordinates')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'StreetLines':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'StreetLines')
            value_ = self.gds_validate_string(value_, node, 'StreetLines')
            self.StreetLines.append(value_)
            self.StreetLines_nsprefix_ = child_.prefix
        elif nodeName_ == 'City':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'City')
            value_ = self.gds_validate_string(value_, node, 'City')
            self.City = value_
            self.City_nsprefix_ = child_.prefix
        elif nodeName_ == 'StateOrProvinceCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'StateOrProvinceCode')
            value_ = self.gds_validate_string(value_, node, 'StateOrProvinceCode')
            self.StateOrProvinceCode = value_
            self.StateOrProvinceCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'PostalCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PostalCode')
            value_ = self.gds_validate_string(value_, node, 'PostalCode')
            self.PostalCode = value_
            self.PostalCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'UrbanizationCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'UrbanizationCode')
            value_ = self.gds_validate_string(value_, node, 'UrbanizationCode')
            self.UrbanizationCode = value_
            self.UrbanizationCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'CountryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CountryCode')
            value_ = self.gds_validate_string(value_, node, 'CountryCode')
            self.CountryCode = value_
            self.CountryCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'CountryName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CountryName')
            value_ = self.gds_validate_string(value_, node, 'CountryName')
            self.CountryName = value_
            self.CountryName_nsprefix_ = child_.prefix
        elif nodeName_ == 'Residential':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'Residential')
            ival_ = self.gds_validate_boolean(ival_, node, 'Residential')
            self.Residential = ival_
            self.Residential_nsprefix_ = child_.prefix
        elif nodeName_ == 'GeographicCoordinates':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'GeographicCoordinates')
            value_ = self.gds_validate_string(value_, node, 'GeographicCoordinates')
            self.GeographicCoordinates = value_
            self.GeographicCoordinates_nsprefix_ = child_.prefix
# end class Address


class AddressAncillaryDetail(GeneratedsSuper):
    """Additional information about a physical location, such as suite number,
    cross street, floor number in a building. These details are not
    typically a part of a standard address definition; however, these
    details might help locate the address."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, LocationInCity=None, LocationInProperty=None, Accessibility=None, Building=None, Department=None, RoomFloor=None, Suite=None, Apartment=None, Room=None, CrossStreet=None, AdditionalDescriptions=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.LocationInCity = LocationInCity
        self.LocationInCity_nsprefix_ = None
        self.LocationInProperty = LocationInProperty
        self.LocationInProperty_nsprefix_ = None
        self.Accessibility = Accessibility
        self.validate_LocationAccessibilityType(self.Accessibility)
        self.Accessibility_nsprefix_ = "ns"
        self.Building = Building
        self.Building_nsprefix_ = None
        self.Department = Department
        self.Department_nsprefix_ = None
        self.RoomFloor = RoomFloor
        self.RoomFloor_nsprefix_ = None
        self.Suite = Suite
        self.Suite_nsprefix_ = None
        self.Apartment = Apartment
        self.Apartment_nsprefix_ = None
        self.Room = Room
        self.Room_nsprefix_ = None
        self.CrossStreet = CrossStreet
        self.CrossStreet_nsprefix_ = None
        if AdditionalDescriptions is None:
            self.AdditionalDescriptions = []
        else:
            self.AdditionalDescriptions = AdditionalDescriptions
        self.AdditionalDescriptions_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressAncillaryDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressAncillaryDetail.subclass:
            return AddressAncillaryDetail.subclass(*args_, **kwargs_)
        else:
            return AddressAncillaryDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_LocationInCity(self):
        return self.LocationInCity
    def set_LocationInCity(self, LocationInCity):
        self.LocationInCity = LocationInCity
    def get_LocationInProperty(self):
        return self.LocationInProperty
    def set_LocationInProperty(self, LocationInProperty):
        self.LocationInProperty = LocationInProperty
    def get_Accessibility(self):
        return self.Accessibility
    def set_Accessibility(self, Accessibility):
        self.Accessibility = Accessibility
    def get_Building(self):
        return self.Building
    def set_Building(self, Building):
        self.Building = Building
    def get_Department(self):
        return self.Department
    def set_Department(self, Department):
        self.Department = Department
    def get_RoomFloor(self):
        return self.RoomFloor
    def set_RoomFloor(self, RoomFloor):
        self.RoomFloor = RoomFloor
    def get_Suite(self):
        return self.Suite
    def set_Suite(self, Suite):
        self.Suite = Suite
    def get_Apartment(self):
        return self.Apartment
    def set_Apartment(self, Apartment):
        self.Apartment = Apartment
    def get_Room(self):
        return self.Room
    def set_Room(self, Room):
        self.Room = Room
    def get_CrossStreet(self):
        return self.CrossStreet
    def set_CrossStreet(self, CrossStreet):
        self.CrossStreet = CrossStreet
    def get_AdditionalDescriptions(self):
        return self.AdditionalDescriptions
    def set_AdditionalDescriptions(self, AdditionalDescriptions):
        self.AdditionalDescriptions = AdditionalDescriptions
    def add_AdditionalDescriptions(self, value):
        self.AdditionalDescriptions.append(value)
    def insert_AdditionalDescriptions_at(self, index, value):
        self.AdditionalDescriptions.insert(index, value)
    def replace_AdditionalDescriptions_at(self, index, value):
        self.AdditionalDescriptions[index] = value
    def validate_LocationAccessibilityType(self, value):
        result = True
        # Validate type LocationAccessibilityType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['INSIDE', 'OUTSIDE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on LocationAccessibilityType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.LocationInCity is not None or
            self.LocationInProperty is not None or
            self.Accessibility is not None or
            self.Building is not None or
            self.Department is not None or
            self.RoomFloor is not None or
            self.Suite is not None or
            self.Apartment is not None or
            self.Room is not None or
            self.CrossStreet is not None or
            self.AdditionalDescriptions
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AddressAncillaryDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AddressAncillaryDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AddressAncillaryDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AddressAncillaryDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AddressAncillaryDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='AddressAncillaryDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AddressAncillaryDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LocationInCity is not None:
            namespaceprefix_ = self.LocationInCity_nsprefix_ + ':' if (UseCapturedNS_ and self.LocationInCity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocationInCity>%s</%sLocationInCity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LocationInCity), input_name='LocationInCity')), namespaceprefix_ , eol_))
        if self.LocationInProperty is not None:
            namespaceprefix_ = self.LocationInProperty_nsprefix_ + ':' if (UseCapturedNS_ and self.LocationInProperty_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocationInProperty>%s</%sLocationInProperty>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LocationInProperty), input_name='LocationInProperty')), namespaceprefix_ , eol_))
        if self.Accessibility is not None:
            namespaceprefix_ = self.Accessibility_nsprefix_ + ':' if (UseCapturedNS_ and self.Accessibility_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAccessibility>%s</%sAccessibility>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Accessibility), input_name='Accessibility')), namespaceprefix_ , eol_))
        if self.Building is not None:
            namespaceprefix_ = self.Building_nsprefix_ + ':' if (UseCapturedNS_ and self.Building_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBuilding>%s</%sBuilding>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Building), input_name='Building')), namespaceprefix_ , eol_))
        if self.Department is not None:
            namespaceprefix_ = self.Department_nsprefix_ + ':' if (UseCapturedNS_ and self.Department_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDepartment>%s</%sDepartment>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Department), input_name='Department')), namespaceprefix_ , eol_))
        if self.RoomFloor is not None:
            namespaceprefix_ = self.RoomFloor_nsprefix_ + ':' if (UseCapturedNS_ and self.RoomFloor_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRoomFloor>%s</%sRoomFloor>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RoomFloor), input_name='RoomFloor')), namespaceprefix_ , eol_))
        if self.Suite is not None:
            namespaceprefix_ = self.Suite_nsprefix_ + ':' if (UseCapturedNS_ and self.Suite_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSuite>%s</%sSuite>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Suite), input_name='Suite')), namespaceprefix_ , eol_))
        if self.Apartment is not None:
            namespaceprefix_ = self.Apartment_nsprefix_ + ':' if (UseCapturedNS_ and self.Apartment_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sApartment>%s</%sApartment>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Apartment), input_name='Apartment')), namespaceprefix_ , eol_))
        if self.Room is not None:
            namespaceprefix_ = self.Room_nsprefix_ + ':' if (UseCapturedNS_ and self.Room_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRoom>%s</%sRoom>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Room), input_name='Room')), namespaceprefix_ , eol_))
        if self.CrossStreet is not None:
            namespaceprefix_ = self.CrossStreet_nsprefix_ + ':' if (UseCapturedNS_ and self.CrossStreet_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCrossStreet>%s</%sCrossStreet>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CrossStreet), input_name='CrossStreet')), namespaceprefix_ , eol_))
        for AdditionalDescriptions_ in self.AdditionalDescriptions:
            namespaceprefix_ = self.AdditionalDescriptions_nsprefix_ + ':' if (UseCapturedNS_ and self.AdditionalDescriptions_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAdditionalDescriptions>%s</%sAdditionalDescriptions>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(AdditionalDescriptions_), input_name='AdditionalDescriptions')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'LocationInCity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LocationInCity')
            value_ = self.gds_validate_string(value_, node, 'LocationInCity')
            self.LocationInCity = value_
            self.LocationInCity_nsprefix_ = child_.prefix
        elif nodeName_ == 'LocationInProperty':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LocationInProperty')
            value_ = self.gds_validate_string(value_, node, 'LocationInProperty')
            self.LocationInProperty = value_
            self.LocationInProperty_nsprefix_ = child_.prefix
        elif nodeName_ == 'Accessibility':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Accessibility')
            value_ = self.gds_validate_string(value_, node, 'Accessibility')
            self.Accessibility = value_
            self.Accessibility_nsprefix_ = child_.prefix
            # validate type LocationAccessibilityType
            self.validate_LocationAccessibilityType(self.Accessibility)
        elif nodeName_ == 'Building':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Building')
            value_ = self.gds_validate_string(value_, node, 'Building')
            self.Building = value_
            self.Building_nsprefix_ = child_.prefix
        elif nodeName_ == 'Department':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Department')
            value_ = self.gds_validate_string(value_, node, 'Department')
            self.Department = value_
            self.Department_nsprefix_ = child_.prefix
        elif nodeName_ == 'RoomFloor':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RoomFloor')
            value_ = self.gds_validate_string(value_, node, 'RoomFloor')
            self.RoomFloor = value_
            self.RoomFloor_nsprefix_ = child_.prefix
        elif nodeName_ == 'Suite':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Suite')
            value_ = self.gds_validate_string(value_, node, 'Suite')
            self.Suite = value_
            self.Suite_nsprefix_ = child_.prefix
        elif nodeName_ == 'Apartment':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Apartment')
            value_ = self.gds_validate_string(value_, node, 'Apartment')
            self.Apartment = value_
            self.Apartment_nsprefix_ = child_.prefix
        elif nodeName_ == 'Room':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Room')
            value_ = self.gds_validate_string(value_, node, 'Room')
            self.Room = value_
            self.Room_nsprefix_ = child_.prefix
        elif nodeName_ == 'CrossStreet':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CrossStreet')
            value_ = self.gds_validate_string(value_, node, 'CrossStreet')
            self.CrossStreet = value_
            self.CrossStreet_nsprefix_ = child_.prefix
        elif nodeName_ == 'AdditionalDescriptions':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AdditionalDescriptions')
            value_ = self.gds_validate_string(value_, node, 'AdditionalDescriptions')
            self.AdditionalDescriptions.append(value_)
            self.AdditionalDescriptions_nsprefix_ = child_.prefix
# end class AddressAncillaryDetail


class AirCargoDetail(GeneratedsSuper):
    """Specifies additional details about an air cargo account."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, AirCargoSubAccountType=None, Synonyms=None, BrokerAccountNumber=None, AirportIATAAgentId=None, PayorType=None, AssociatedAirportId=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.AirCargoSubAccountType = AirCargoSubAccountType
        self.AirCargoSubAccountType_nsprefix_ = None
        if Synonyms is None:
            self.Synonyms = []
        else:
            self.Synonyms = Synonyms
        self.Synonyms_nsprefix_ = None
        self.BrokerAccountNumber = BrokerAccountNumber
        self.BrokerAccountNumber_nsprefix_ = None
        self.AirportIATAAgentId = AirportIATAAgentId
        self.AirportIATAAgentId_nsprefix_ = None
        self.PayorType = PayorType
        self.PayorType_nsprefix_ = None
        self.AssociatedAirportId = AssociatedAirportId
        self.AssociatedAirportId_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AirCargoDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AirCargoDetail.subclass:
            return AirCargoDetail.subclass(*args_, **kwargs_)
        else:
            return AirCargoDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_AirCargoSubAccountType(self):
        return self.AirCargoSubAccountType
    def set_AirCargoSubAccountType(self, AirCargoSubAccountType):
        self.AirCargoSubAccountType = AirCargoSubAccountType
    def get_Synonyms(self):
        return self.Synonyms
    def set_Synonyms(self, Synonyms):
        self.Synonyms = Synonyms
    def add_Synonyms(self, value):
        self.Synonyms.append(value)
    def insert_Synonyms_at(self, index, value):
        self.Synonyms.insert(index, value)
    def replace_Synonyms_at(self, index, value):
        self.Synonyms[index] = value
    def get_BrokerAccountNumber(self):
        return self.BrokerAccountNumber
    def set_BrokerAccountNumber(self, BrokerAccountNumber):
        self.BrokerAccountNumber = BrokerAccountNumber
    def get_AirportIATAAgentId(self):
        return self.AirportIATAAgentId
    def set_AirportIATAAgentId(self, AirportIATAAgentId):
        self.AirportIATAAgentId = AirportIATAAgentId
    def get_PayorType(self):
        return self.PayorType
    def set_PayorType(self, PayorType):
        self.PayorType = PayorType
    def get_AssociatedAirportId(self):
        return self.AssociatedAirportId
    def set_AssociatedAirportId(self, AssociatedAirportId):
        self.AssociatedAirportId = AssociatedAirportId
    def hasContent_(self):
        if (
            self.AirCargoSubAccountType is not None or
            self.Synonyms or
            self.BrokerAccountNumber is not None or
            self.AirportIATAAgentId is not None or
            self.PayorType is not None or
            self.AssociatedAirportId is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AirCargoDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AirCargoDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AirCargoDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AirCargoDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AirCargoDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='AirCargoDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AirCargoDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AirCargoSubAccountType is not None:
            namespaceprefix_ = self.AirCargoSubAccountType_nsprefix_ + ':' if (UseCapturedNS_ and self.AirCargoSubAccountType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAirCargoSubAccountType>%s</%sAirCargoSubAccountType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AirCargoSubAccountType), input_name='AirCargoSubAccountType')), namespaceprefix_ , eol_))
        for Synonyms_ in self.Synonyms:
            namespaceprefix_ = self.Synonyms_nsprefix_ + ':' if (UseCapturedNS_ and self.Synonyms_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSynonyms>%s</%sSynonyms>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Synonyms_), input_name='Synonyms')), namespaceprefix_ , eol_))
        if self.BrokerAccountNumber is not None:
            namespaceprefix_ = self.BrokerAccountNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.BrokerAccountNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBrokerAccountNumber>%s</%sBrokerAccountNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BrokerAccountNumber), input_name='BrokerAccountNumber')), namespaceprefix_ , eol_))
        if self.AirportIATAAgentId is not None:
            namespaceprefix_ = self.AirportIATAAgentId_nsprefix_ + ':' if (UseCapturedNS_ and self.AirportIATAAgentId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAirportIATAAgentId>%s</%sAirportIATAAgentId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AirportIATAAgentId), input_name='AirportIATAAgentId')), namespaceprefix_ , eol_))
        if self.PayorType is not None:
            namespaceprefix_ = self.PayorType_nsprefix_ + ':' if (UseCapturedNS_ and self.PayorType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPayorType>%s</%sPayorType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PayorType), input_name='PayorType')), namespaceprefix_ , eol_))
        if self.AssociatedAirportId is not None:
            namespaceprefix_ = self.AssociatedAirportId_nsprefix_ + ':' if (UseCapturedNS_ and self.AssociatedAirportId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAssociatedAirportId>%s</%sAssociatedAirportId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AssociatedAirportId), input_name='AssociatedAirportId')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'AirCargoSubAccountType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AirCargoSubAccountType')
            value_ = self.gds_validate_string(value_, node, 'AirCargoSubAccountType')
            self.AirCargoSubAccountType = value_
            self.AirCargoSubAccountType_nsprefix_ = child_.prefix
        elif nodeName_ == 'Synonyms':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Synonyms')
            value_ = self.gds_validate_string(value_, node, 'Synonyms')
            self.Synonyms.append(value_)
            self.Synonyms_nsprefix_ = child_.prefix
        elif nodeName_ == 'BrokerAccountNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'BrokerAccountNumber')
            value_ = self.gds_validate_string(value_, node, 'BrokerAccountNumber')
            self.BrokerAccountNumber = value_
            self.BrokerAccountNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'AirportIATAAgentId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AirportIATAAgentId')
            value_ = self.gds_validate_string(value_, node, 'AirportIATAAgentId')
            self.AirportIATAAgentId = value_
            self.AirportIATAAgentId_nsprefix_ = child_.prefix
        elif nodeName_ == 'PayorType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PayorType')
            value_ = self.gds_validate_string(value_, node, 'PayorType')
            self.PayorType = value_
            self.PayorType_nsprefix_ = child_.prefix
        elif nodeName_ == 'AssociatedAirportId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AssociatedAirportId')
            value_ = self.gds_validate_string(value_, node, 'AssociatedAirportId')
            self.AssociatedAirportId = value_
            self.AssociatedAirportId_nsprefix_ = child_.prefix
# end class AirCargoDetail


class AlcoholDetail(GeneratedsSuper):
    """Specifies details for a package containing alcohol"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RecipientType=None, ShipperAgreementType=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.RecipientType = RecipientType
        self.validate_AlcoholRecipientType(self.RecipientType)
        self.RecipientType_nsprefix_ = "ns"
        self.ShipperAgreementType = ShipperAgreementType
        self.ShipperAgreementType_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AlcoholDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AlcoholDetail.subclass:
            return AlcoholDetail.subclass(*args_, **kwargs_)
        else:
            return AlcoholDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RecipientType(self):
        return self.RecipientType
    def set_RecipientType(self, RecipientType):
        self.RecipientType = RecipientType
    def get_ShipperAgreementType(self):
        return self.ShipperAgreementType
    def set_ShipperAgreementType(self, ShipperAgreementType):
        self.ShipperAgreementType = ShipperAgreementType
    def validate_AlcoholRecipientType(self, value):
        result = True
        # Validate type AlcoholRecipientType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CONSUMER', 'LICENSEE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on AlcoholRecipientType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.RecipientType is not None or
            self.ShipperAgreementType is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AlcoholDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AlcoholDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AlcoholDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AlcoholDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AlcoholDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='AlcoholDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AlcoholDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RecipientType is not None:
            namespaceprefix_ = self.RecipientType_nsprefix_ + ':' if (UseCapturedNS_ and self.RecipientType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecipientType>%s</%sRecipientType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RecipientType), input_name='RecipientType')), namespaceprefix_ , eol_))
        if self.ShipperAgreementType is not None:
            namespaceprefix_ = self.ShipperAgreementType_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipperAgreementType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShipperAgreementType>%s</%sShipperAgreementType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ShipperAgreementType), input_name='ShipperAgreementType')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RecipientType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RecipientType')
            value_ = self.gds_validate_string(value_, node, 'RecipientType')
            self.RecipientType = value_
            self.RecipientType_nsprefix_ = child_.prefix
            # validate type AlcoholRecipientType
            self.validate_AlcoholRecipientType(self.RecipientType)
        elif nodeName_ == 'ShipperAgreementType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ShipperAgreementType')
            value_ = self.gds_validate_string(value_, node, 'ShipperAgreementType')
            self.ShipperAgreementType = value_
            self.ShipperAgreementType_nsprefix_ = child_.prefix
# end class AlcoholDetail


class AllSignatureOptionsDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, DerivedSignatureOption=None, RecommendedSignatureOption=None, AvailableSignatureOptions=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.DerivedSignatureOption = DerivedSignatureOption
        self.DerivedSignatureOption_nsprefix_ = "ns"
        self.RecommendedSignatureOption = RecommendedSignatureOption
        self.RecommendedSignatureOption_nsprefix_ = "ns"
        if AvailableSignatureOptions is None:
            self.AvailableSignatureOptions = []
        else:
            self.AvailableSignatureOptions = AvailableSignatureOptions
        self.AvailableSignatureOptions_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AllSignatureOptionsDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AllSignatureOptionsDetail.subclass:
            return AllSignatureOptionsDetail.subclass(*args_, **kwargs_)
        else:
            return AllSignatureOptionsDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DerivedSignatureOption(self):
        return self.DerivedSignatureOption
    def set_DerivedSignatureOption(self, DerivedSignatureOption):
        self.DerivedSignatureOption = DerivedSignatureOption
    def get_RecommendedSignatureOption(self):
        return self.RecommendedSignatureOption
    def set_RecommendedSignatureOption(self, RecommendedSignatureOption):
        self.RecommendedSignatureOption = RecommendedSignatureOption
    def get_AvailableSignatureOptions(self):
        return self.AvailableSignatureOptions
    def set_AvailableSignatureOptions(self, AvailableSignatureOptions):
        self.AvailableSignatureOptions = AvailableSignatureOptions
    def add_AvailableSignatureOptions(self, value):
        self.AvailableSignatureOptions.append(value)
    def insert_AvailableSignatureOptions_at(self, index, value):
        self.AvailableSignatureOptions.insert(index, value)
    def replace_AvailableSignatureOptions_at(self, index, value):
        self.AvailableSignatureOptions[index] = value
    def hasContent_(self):
        if (
            self.DerivedSignatureOption is not None or
            self.RecommendedSignatureOption is not None or
            self.AvailableSignatureOptions
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AllSignatureOptionsDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AllSignatureOptionsDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AllSignatureOptionsDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AllSignatureOptionsDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AllSignatureOptionsDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='AllSignatureOptionsDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AllSignatureOptionsDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DerivedSignatureOption is not None:
            namespaceprefix_ = self.DerivedSignatureOption_nsprefix_ + ':' if (UseCapturedNS_ and self.DerivedSignatureOption_nsprefix_) else ''
            self.DerivedSignatureOption.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DerivedSignatureOption', pretty_print=pretty_print)
        if self.RecommendedSignatureOption is not None:
            namespaceprefix_ = self.RecommendedSignatureOption_nsprefix_ + ':' if (UseCapturedNS_ and self.RecommendedSignatureOption_nsprefix_) else ''
            self.RecommendedSignatureOption.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RecommendedSignatureOption', pretty_print=pretty_print)
        for AvailableSignatureOptions_ in self.AvailableSignatureOptions:
            namespaceprefix_ = self.AvailableSignatureOptions_nsprefix_ + ':' if (UseCapturedNS_ and self.AvailableSignatureOptions_nsprefix_) else ''
            AvailableSignatureOptions_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AvailableSignatureOptions', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DerivedSignatureOption':
            obj_ = SignatureOptionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DerivedSignatureOption = obj_
            obj_.original_tagname_ = 'DerivedSignatureOption'
        elif nodeName_ == 'RecommendedSignatureOption':
            obj_ = SignatureOptionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RecommendedSignatureOption = obj_
            obj_.original_tagname_ = 'RecommendedSignatureOption'
        elif nodeName_ == 'AvailableSignatureOptions':
            obj_ = SignatureOptionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AvailableSignatureOptions.append(obj_)
            obj_.original_tagname_ = 'AvailableSignatureOptions'
# end class AllSignatureOptionsDetail


class AssociatedAccount(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, AccountNumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.validate_AssociatedAccountNumberType(self.Type)
        self.Type_nsprefix_ = "ns"
        self.AccountNumber = AccountNumber
        self.AccountNumber_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AssociatedAccount)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AssociatedAccount.subclass:
            return AssociatedAccount.subclass(*args_, **kwargs_)
        else:
            return AssociatedAccount(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_AccountNumber(self):
        return self.AccountNumber
    def set_AccountNumber(self, AccountNumber):
        self.AccountNumber = AccountNumber
    def validate_AssociatedAccountNumberType(self, value):
        result = True
        # Validate type AssociatedAccountNumberType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FEDEX_EXPRESS', 'FEDEX_FREIGHT', 'FEDEX_GROUND', 'FEDEX_OFFICE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on AssociatedAccountNumberType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Type is not None or
            self.AccountNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AssociatedAccount', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AssociatedAccount')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AssociatedAccount':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AssociatedAccount')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AssociatedAccount', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='AssociatedAccount'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AssociatedAccount', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.AccountNumber is not None:
            namespaceprefix_ = self.AccountNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.AccountNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAccountNumber>%s</%sAccountNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AccountNumber), input_name='AccountNumber')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type AssociatedAccountNumberType
            self.validate_AssociatedAccountNumberType(self.Type)
        elif nodeName_ == 'AccountNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AccountNumber')
            value_ = self.gds_validate_string(value_, node, 'AccountNumber')
            self.AccountNumber = value_
            self.AccountNumber_nsprefix_ = child_.prefix
# end class AssociatedAccount


class AssociatedFreightLineItemDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Id=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Id = Id
        self.Id_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AssociatedFreightLineItemDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AssociatedFreightLineItemDetail.subclass:
            return AssociatedFreightLineItemDetail.subclass(*args_, **kwargs_)
        else:
            return AssociatedFreightLineItemDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Id(self):
        return self.Id
    def set_Id(self, Id):
        self.Id = Id
    def hasContent_(self):
        if (
            self.Id is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AssociatedFreightLineItemDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AssociatedFreightLineItemDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AssociatedFreightLineItemDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AssociatedFreightLineItemDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AssociatedFreightLineItemDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='AssociatedFreightLineItemDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AssociatedFreightLineItemDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Id is not None:
            namespaceprefix_ = self.Id_nsprefix_ + ':' if (UseCapturedNS_ and self.Id_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sId>%s</%sId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Id), input_name='Id')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Id':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Id')
            value_ = self.gds_validate_string(value_, node, 'Id')
            self.Id = value_
            self.Id_nsprefix_ = child_.prefix
# end class AssociatedFreightLineItemDetail


class AssociatedTrackingId(GeneratedsSuper):
    """Identifies a relationship from one tracked entity to another."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, TrackingId=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.validate_AssociatedTrackingIdType(self.Type)
        self.Type_nsprefix_ = "ns"
        self.TrackingId = TrackingId
        self.TrackingId_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AssociatedTrackingId)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AssociatedTrackingId.subclass:
            return AssociatedTrackingId.subclass(*args_, **kwargs_)
        else:
            return AssociatedTrackingId(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_TrackingId(self):
        return self.TrackingId
    def set_TrackingId(self, TrackingId):
        self.TrackingId = TrackingId
    def validate_AssociatedTrackingIdType(self, value):
        result = True
        # Validate type AssociatedTrackingIdType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['COD_RETURN', 'CONSOLIDATION_DOCUMENTS', 'CONSOLIDATION_MASTER', 'DELIVERY_ON_INVOICE_ACCEPTANCE_RETURN']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on AssociatedTrackingIdType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Type is not None or
            self.TrackingId is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AssociatedTrackingId', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AssociatedTrackingId')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AssociatedTrackingId':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AssociatedTrackingId')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AssociatedTrackingId', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='AssociatedTrackingId'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AssociatedTrackingId', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.TrackingId is not None:
            namespaceprefix_ = self.TrackingId_nsprefix_ + ':' if (UseCapturedNS_ and self.TrackingId_nsprefix_) else ''
            self.TrackingId.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TrackingId', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type AssociatedTrackingIdType
            self.validate_AssociatedTrackingIdType(self.Type)
        elif nodeName_ == 'TrackingId':
            obj_ = TrackingId.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TrackingId = obj_
            obj_.original_tagname_ = 'TrackingId'
# end class AssociatedTrackingId


class AuthorizedAddress(GeneratedsSuper):
    """Specifies the address and a sequence number to identify the address."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, SequenceNumber=None, Address=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.SequenceNumber = SequenceNumber
        self.SequenceNumber_nsprefix_ = None
        self.Address = Address
        self.Address_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AuthorizedAddress)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AuthorizedAddress.subclass:
            return AuthorizedAddress.subclass(*args_, **kwargs_)
        else:
            return AuthorizedAddress(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_SequenceNumber(self):
        return self.SequenceNumber
    def set_SequenceNumber(self, SequenceNumber):
        self.SequenceNumber = SequenceNumber
    def get_Address(self):
        return self.Address
    def set_Address(self, Address):
        self.Address = Address
    def hasContent_(self):
        if (
            self.SequenceNumber is not None or
            self.Address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AuthorizedAddress', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AuthorizedAddress')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AuthorizedAddress':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AuthorizedAddress')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AuthorizedAddress', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='AuthorizedAddress'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AuthorizedAddress', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SequenceNumber is not None:
            namespaceprefix_ = self.SequenceNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.SequenceNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSequenceNumber>%s</%sSequenceNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SequenceNumber), input_name='SequenceNumber')), namespaceprefix_ , eol_))
        if self.Address is not None:
            namespaceprefix_ = self.Address_nsprefix_ + ':' if (UseCapturedNS_ and self.Address_nsprefix_) else ''
            self.Address.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Address', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'SequenceNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SequenceNumber')
            value_ = self.gds_validate_string(value_, node, 'SequenceNumber')
            self.SequenceNumber = value_
            self.SequenceNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'Address':
            obj_ = Address.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
# end class AuthorizedAddress


class BankAccountDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, AccountNumber=None, IbanCode=None, BusinessIdentifierCode=None, SortCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.AccountNumber = AccountNumber
        self.AccountNumber_nsprefix_ = None
        self.IbanCode = IbanCode
        self.IbanCode_nsprefix_ = None
        self.BusinessIdentifierCode = BusinessIdentifierCode
        self.BusinessIdentifierCode_nsprefix_ = None
        self.SortCode = SortCode
        self.SortCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, BankAccountDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if BankAccountDetail.subclass:
            return BankAccountDetail.subclass(*args_, **kwargs_)
        else:
            return BankAccountDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_AccountNumber(self):
        return self.AccountNumber
    def set_AccountNumber(self, AccountNumber):
        self.AccountNumber = AccountNumber
    def get_IbanCode(self):
        return self.IbanCode
    def set_IbanCode(self, IbanCode):
        self.IbanCode = IbanCode
    def get_BusinessIdentifierCode(self):
        return self.BusinessIdentifierCode
    def set_BusinessIdentifierCode(self, BusinessIdentifierCode):
        self.BusinessIdentifierCode = BusinessIdentifierCode
    def get_SortCode(self):
        return self.SortCode
    def set_SortCode(self, SortCode):
        self.SortCode = SortCode
    def hasContent_(self):
        if (
            self.AccountNumber is not None or
            self.IbanCode is not None or
            self.BusinessIdentifierCode is not None or
            self.SortCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='BankAccountDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('BankAccountDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'BankAccountDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='BankAccountDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='BankAccountDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='BankAccountDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='BankAccountDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AccountNumber is not None:
            namespaceprefix_ = self.AccountNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.AccountNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAccountNumber>%s</%sAccountNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AccountNumber), input_name='AccountNumber')), namespaceprefix_ , eol_))
        if self.IbanCode is not None:
            namespaceprefix_ = self.IbanCode_nsprefix_ + ':' if (UseCapturedNS_ and self.IbanCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIbanCode>%s</%sIbanCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IbanCode), input_name='IbanCode')), namespaceprefix_ , eol_))
        if self.BusinessIdentifierCode is not None:
            namespaceprefix_ = self.BusinessIdentifierCode_nsprefix_ + ':' if (UseCapturedNS_ and self.BusinessIdentifierCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBusinessIdentifierCode>%s</%sBusinessIdentifierCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BusinessIdentifierCode), input_name='BusinessIdentifierCode')), namespaceprefix_ , eol_))
        if self.SortCode is not None:
            namespaceprefix_ = self.SortCode_nsprefix_ + ':' if (UseCapturedNS_ and self.SortCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSortCode>%s</%sSortCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SortCode), input_name='SortCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'AccountNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AccountNumber')
            value_ = self.gds_validate_string(value_, node, 'AccountNumber')
            self.AccountNumber = value_
            self.AccountNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'IbanCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'IbanCode')
            value_ = self.gds_validate_string(value_, node, 'IbanCode')
            self.IbanCode = value_
            self.IbanCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'BusinessIdentifierCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'BusinessIdentifierCode')
            value_ = self.gds_validate_string(value_, node, 'BusinessIdentifierCode')
            self.BusinessIdentifierCode = value_
            self.BusinessIdentifierCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'SortCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SortCode')
            value_ = self.gds_validate_string(value_, node, 'SortCode')
            self.SortCode = value_
            self.SortCode_nsprefix_ = child_.prefix
# end class BankAccountDetail


class BankDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, BankName=None, BankAddress=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.BankName = BankName
        self.BankName_nsprefix_ = None
        self.BankAddress = BankAddress
        self.BankAddress_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, BankDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if BankDetail.subclass:
            return BankDetail.subclass(*args_, **kwargs_)
        else:
            return BankDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_BankName(self):
        return self.BankName
    def set_BankName(self, BankName):
        self.BankName = BankName
    def get_BankAddress(self):
        return self.BankAddress
    def set_BankAddress(self, BankAddress):
        self.BankAddress = BankAddress
    def hasContent_(self):
        if (
            self.BankName is not None or
            self.BankAddress is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='BankDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('BankDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'BankDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='BankDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='BankDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='BankDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='BankDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BankName is not None:
            namespaceprefix_ = self.BankName_nsprefix_ + ':' if (UseCapturedNS_ and self.BankName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBankName>%s</%sBankName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BankName), input_name='BankName')), namespaceprefix_ , eol_))
        if self.BankAddress is not None:
            namespaceprefix_ = self.BankAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.BankAddress_nsprefix_) else ''
            self.BankAddress.export(outfile, level, namespaceprefix_, namespacedef_='', name_='BankAddress', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'BankName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'BankName')
            value_ = self.gds_validate_string(value_, node, 'BankName')
            self.BankName = value_
            self.BankName_nsprefix_ = child_.prefix
        elif nodeName_ == 'BankAddress':
            obj_ = Address.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.BankAddress = obj_
            obj_.original_tagname_ = 'BankAddress'
# end class BankDetail


class BatteryClassificationDetail(GeneratedsSuper):
    """Describes attributes of a battery or cell that are used for
    classification purposes. Typically this structure would be used to
    allow customers to declare batteries or cells for which full dangerous
    goods documentation and procedures are not required."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Material=None, Packing=None, RegulatorySubType=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Material = Material
        self.validate_BatteryMaterialType(self.Material)
        self.Material_nsprefix_ = "ns"
        self.Packing = Packing
        self.validate_BatteryPackingType(self.Packing)
        self.Packing_nsprefix_ = "ns"
        self.RegulatorySubType = RegulatorySubType
        self.validate_BatteryRegulatorySubType(self.RegulatorySubType)
        self.RegulatorySubType_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, BatteryClassificationDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if BatteryClassificationDetail.subclass:
            return BatteryClassificationDetail.subclass(*args_, **kwargs_)
        else:
            return BatteryClassificationDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Material(self):
        return self.Material
    def set_Material(self, Material):
        self.Material = Material
    def get_Packing(self):
        return self.Packing
    def set_Packing(self, Packing):
        self.Packing = Packing
    def get_RegulatorySubType(self):
        return self.RegulatorySubType
    def set_RegulatorySubType(self, RegulatorySubType):
        self.RegulatorySubType = RegulatorySubType
    def validate_BatteryMaterialType(self, value):
        result = True
        # Validate type BatteryMaterialType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['LITHIUM_ION', 'LITHIUM_METAL', 'UNKNOWN']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on BatteryMaterialType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_BatteryPackingType(self, value):
        result = True
        # Validate type BatteryPackingType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CONTAINED_IN_EQUIPMENT', 'PACKED_WITH_EQUIPMENT', 'UNKNOWN']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on BatteryPackingType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_BatteryRegulatorySubType(self, value):
        result = True
        # Validate type BatteryRegulatorySubType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['IATA_SECTION_II']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on BatteryRegulatorySubType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Material is not None or
            self.Packing is not None or
            self.RegulatorySubType is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='BatteryClassificationDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('BatteryClassificationDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'BatteryClassificationDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='BatteryClassificationDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='BatteryClassificationDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='BatteryClassificationDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='BatteryClassificationDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Material is not None:
            namespaceprefix_ = self.Material_nsprefix_ + ':' if (UseCapturedNS_ and self.Material_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMaterial>%s</%sMaterial>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Material), input_name='Material')), namespaceprefix_ , eol_))
        if self.Packing is not None:
            namespaceprefix_ = self.Packing_nsprefix_ + ':' if (UseCapturedNS_ and self.Packing_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPacking>%s</%sPacking>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Packing), input_name='Packing')), namespaceprefix_ , eol_))
        if self.RegulatorySubType is not None:
            namespaceprefix_ = self.RegulatorySubType_nsprefix_ + ':' if (UseCapturedNS_ and self.RegulatorySubType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRegulatorySubType>%s</%sRegulatorySubType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RegulatorySubType), input_name='RegulatorySubType')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Material':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Material')
            value_ = self.gds_validate_string(value_, node, 'Material')
            self.Material = value_
            self.Material_nsprefix_ = child_.prefix
            # validate type BatteryMaterialType
            self.validate_BatteryMaterialType(self.Material)
        elif nodeName_ == 'Packing':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Packing')
            value_ = self.gds_validate_string(value_, node, 'Packing')
            self.Packing = value_
            self.Packing_nsprefix_ = child_.prefix
            # validate type BatteryPackingType
            self.validate_BatteryPackingType(self.Packing)
        elif nodeName_ == 'RegulatorySubType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RegulatorySubType')
            value_ = self.gds_validate_string(value_, node, 'RegulatorySubType')
            self.RegulatorySubType = value_
            self.RegulatorySubType_nsprefix_ = child_.prefix
            # validate type BatteryRegulatorySubType
            self.validate_BatteryRegulatorySubType(self.RegulatorySubType)
# end class BatteryClassificationDetail


class BrokerDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, Broker=None, BrokerageProcessingChargesPayment=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.validate_BrokerType(self.Type)
        self.Type_nsprefix_ = "ns"
        self.Broker = Broker
        self.Broker_nsprefix_ = "ns"
        self.BrokerageProcessingChargesPayment = BrokerageProcessingChargesPayment
        self.BrokerageProcessingChargesPayment_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, BrokerDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if BrokerDetail.subclass:
            return BrokerDetail.subclass(*args_, **kwargs_)
        else:
            return BrokerDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_Broker(self):
        return self.Broker
    def set_Broker(self, Broker):
        self.Broker = Broker
    def get_BrokerageProcessingChargesPayment(self):
        return self.BrokerageProcessingChargesPayment
    def set_BrokerageProcessingChargesPayment(self, BrokerageProcessingChargesPayment):
        self.BrokerageProcessingChargesPayment = BrokerageProcessingChargesPayment
    def validate_BrokerType(self, value):
        result = True
        # Validate type BrokerType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['EXPORT', 'IMPORT']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on BrokerType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Type is not None or
            self.Broker is not None or
            self.BrokerageProcessingChargesPayment is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='BrokerDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('BrokerDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'BrokerDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='BrokerDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='BrokerDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='BrokerDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='BrokerDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.Broker is not None:
            namespaceprefix_ = self.Broker_nsprefix_ + ':' if (UseCapturedNS_ and self.Broker_nsprefix_) else ''
            self.Broker.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Broker', pretty_print=pretty_print)
        if self.BrokerageProcessingChargesPayment is not None:
            namespaceprefix_ = self.BrokerageProcessingChargesPayment_nsprefix_ + ':' if (UseCapturedNS_ and self.BrokerageProcessingChargesPayment_nsprefix_) else ''
            self.BrokerageProcessingChargesPayment.export(outfile, level, namespaceprefix_, namespacedef_='', name_='BrokerageProcessingChargesPayment', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type BrokerType
            self.validate_BrokerType(self.Type)
        elif nodeName_ == 'Broker':
            obj_ = Party.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Broker = obj_
            obj_.original_tagname_ = 'Broker'
        elif nodeName_ == 'BrokerageProcessingChargesPayment':
            obj_ = Payment.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.BrokerageProcessingChargesPayment = obj_
            obj_.original_tagname_ = 'BrokerageProcessingChargesPayment'
# end class BrokerDetail


class CertificateOfOriginDetail(GeneratedsSuper):
    """The instructions indicating how to print the Certificate of Origin (
    e.g. whether or not to include the instructions, image type, etc
    ...)"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, DocumentFormat=None, CustomerImageUsages=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.DocumentFormat = DocumentFormat
        self.DocumentFormat_nsprefix_ = "ns"
        if CustomerImageUsages is None:
            self.CustomerImageUsages = []
        else:
            self.CustomerImageUsages = CustomerImageUsages
        self.CustomerImageUsages_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CertificateOfOriginDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CertificateOfOriginDetail.subclass:
            return CertificateOfOriginDetail.subclass(*args_, **kwargs_)
        else:
            return CertificateOfOriginDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DocumentFormat(self):
        return self.DocumentFormat
    def set_DocumentFormat(self, DocumentFormat):
        self.DocumentFormat = DocumentFormat
    def get_CustomerImageUsages(self):
        return self.CustomerImageUsages
    def set_CustomerImageUsages(self, CustomerImageUsages):
        self.CustomerImageUsages = CustomerImageUsages
    def add_CustomerImageUsages(self, value):
        self.CustomerImageUsages.append(value)
    def insert_CustomerImageUsages_at(self, index, value):
        self.CustomerImageUsages.insert(index, value)
    def replace_CustomerImageUsages_at(self, index, value):
        self.CustomerImageUsages[index] = value
    def hasContent_(self):
        if (
            self.DocumentFormat is not None or
            self.CustomerImageUsages
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CertificateOfOriginDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CertificateOfOriginDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CertificateOfOriginDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CertificateOfOriginDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CertificateOfOriginDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CertificateOfOriginDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CertificateOfOriginDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DocumentFormat is not None:
            namespaceprefix_ = self.DocumentFormat_nsprefix_ + ':' if (UseCapturedNS_ and self.DocumentFormat_nsprefix_) else ''
            self.DocumentFormat.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DocumentFormat', pretty_print=pretty_print)
        for CustomerImageUsages_ in self.CustomerImageUsages:
            namespaceprefix_ = self.CustomerImageUsages_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomerImageUsages_nsprefix_) else ''
            CustomerImageUsages_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CustomerImageUsages', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DocumentFormat':
            obj_ = ShippingDocumentFormat.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DocumentFormat = obj_
            obj_.original_tagname_ = 'DocumentFormat'
        elif nodeName_ == 'CustomerImageUsages':
            obj_ = CustomerImageUsage.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CustomerImageUsages.append(obj_)
            obj_.original_tagname_ = 'CustomerImageUsages'
# end class CertificateOfOriginDetail


class CleansedAddressAndLocationDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CountryCode=None, StateOrProvinceCode=None, PostalCode=None, ServiceArea=None, LocationId=None, LocationNumber=None, AirportId=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.CountryCode = CountryCode
        self.CountryCode_nsprefix_ = None
        self.StateOrProvinceCode = StateOrProvinceCode
        self.StateOrProvinceCode_nsprefix_ = None
        self.PostalCode = PostalCode
        self.PostalCode_nsprefix_ = None
        self.ServiceArea = ServiceArea
        self.ServiceArea_nsprefix_ = None
        self.LocationId = LocationId
        self.LocationId_nsprefix_ = None
        self.LocationNumber = LocationNumber
        self.LocationNumber_nsprefix_ = None
        self.AirportId = AirportId
        self.AirportId_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CleansedAddressAndLocationDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CleansedAddressAndLocationDetail.subclass:
            return CleansedAddressAndLocationDetail.subclass(*args_, **kwargs_)
        else:
            return CleansedAddressAndLocationDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CountryCode(self):
        return self.CountryCode
    def set_CountryCode(self, CountryCode):
        self.CountryCode = CountryCode
    def get_StateOrProvinceCode(self):
        return self.StateOrProvinceCode
    def set_StateOrProvinceCode(self, StateOrProvinceCode):
        self.StateOrProvinceCode = StateOrProvinceCode
    def get_PostalCode(self):
        return self.PostalCode
    def set_PostalCode(self, PostalCode):
        self.PostalCode = PostalCode
    def get_ServiceArea(self):
        return self.ServiceArea
    def set_ServiceArea(self, ServiceArea):
        self.ServiceArea = ServiceArea
    def get_LocationId(self):
        return self.LocationId
    def set_LocationId(self, LocationId):
        self.LocationId = LocationId
    def get_LocationNumber(self):
        return self.LocationNumber
    def set_LocationNumber(self, LocationNumber):
        self.LocationNumber = LocationNumber
    def get_AirportId(self):
        return self.AirportId
    def set_AirportId(self, AirportId):
        self.AirportId = AirportId
    def hasContent_(self):
        if (
            self.CountryCode is not None or
            self.StateOrProvinceCode is not None or
            self.PostalCode is not None or
            self.ServiceArea is not None or
            self.LocationId is not None or
            self.LocationNumber is not None or
            self.AirportId is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CleansedAddressAndLocationDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CleansedAddressAndLocationDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CleansedAddressAndLocationDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CleansedAddressAndLocationDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CleansedAddressAndLocationDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CleansedAddressAndLocationDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CleansedAddressAndLocationDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CountryCode is not None:
            namespaceprefix_ = self.CountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountryCode>%s</%sCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), namespaceprefix_ , eol_))
        if self.StateOrProvinceCode is not None:
            namespaceprefix_ = self.StateOrProvinceCode_nsprefix_ + ':' if (UseCapturedNS_ and self.StateOrProvinceCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStateOrProvinceCode>%s</%sStateOrProvinceCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.StateOrProvinceCode), input_name='StateOrProvinceCode')), namespaceprefix_ , eol_))
        if self.PostalCode is not None:
            namespaceprefix_ = self.PostalCode_nsprefix_ + ':' if (UseCapturedNS_ and self.PostalCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPostalCode>%s</%sPostalCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PostalCode), input_name='PostalCode')), namespaceprefix_ , eol_))
        if self.ServiceArea is not None:
            namespaceprefix_ = self.ServiceArea_nsprefix_ + ':' if (UseCapturedNS_ and self.ServiceArea_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sServiceArea>%s</%sServiceArea>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ServiceArea), input_name='ServiceArea')), namespaceprefix_ , eol_))
        if self.LocationId is not None:
            namespaceprefix_ = self.LocationId_nsprefix_ + ':' if (UseCapturedNS_ and self.LocationId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocationId>%s</%sLocationId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LocationId), input_name='LocationId')), namespaceprefix_ , eol_))
        if self.LocationNumber is not None:
            namespaceprefix_ = self.LocationNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.LocationNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocationNumber>%s</%sLocationNumber>%s' % (namespaceprefix_ , self.gds_format_integer(self.LocationNumber, input_name='LocationNumber'), namespaceprefix_ , eol_))
        if self.AirportId is not None:
            namespaceprefix_ = self.AirportId_nsprefix_ + ':' if (UseCapturedNS_ and self.AirportId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAirportId>%s</%sAirportId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AirportId), input_name='AirportId')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CountryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CountryCode')
            value_ = self.gds_validate_string(value_, node, 'CountryCode')
            self.CountryCode = value_
            self.CountryCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'StateOrProvinceCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'StateOrProvinceCode')
            value_ = self.gds_validate_string(value_, node, 'StateOrProvinceCode')
            self.StateOrProvinceCode = value_
            self.StateOrProvinceCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'PostalCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PostalCode')
            value_ = self.gds_validate_string(value_, node, 'PostalCode')
            self.PostalCode = value_
            self.PostalCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'ServiceArea':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ServiceArea')
            value_ = self.gds_validate_string(value_, node, 'ServiceArea')
            self.ServiceArea = value_
            self.ServiceArea_nsprefix_ = child_.prefix
        elif nodeName_ == 'LocationId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LocationId')
            value_ = self.gds_validate_string(value_, node, 'LocationId')
            self.LocationId = value_
            self.LocationId_nsprefix_ = child_.prefix
        elif nodeName_ == 'LocationNumber' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'LocationNumber')
            ival_ = self.gds_validate_integer(ival_, node, 'LocationNumber')
            self.LocationNumber = ival_
            self.LocationNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'AirportId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AirportId')
            value_ = self.gds_validate_string(value_, node, 'AirportId')
            self.AirportId = value_
            self.AirportId_nsprefix_ = child_.prefix
# end class CleansedAddressAndLocationDetail


class ClientDetail(GeneratedsSuper):
    """Descriptive data for the client submitting a transaction."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, AccountNumber=None, GroundShipperNumber=None, MeterNumber=None, MasterMeterNumber=None, MeterInstance=None, CompanyId=None, SoftwareId=None, SoftwareRelease=None, ClientProductId=None, ClientProductVersion=None, MiddlewareProductId=None, MiddlewareProductVersion=None, IntegratorId=None, Region=None, AutoConfigurationType=None, CspCredentialKey=None, UserCredentialKey=None, InitiativeManifest=None, Localization=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.AccountNumber = AccountNumber
        self.AccountNumber_nsprefix_ = None
        self.GroundShipperNumber = GroundShipperNumber
        self.GroundShipperNumber_nsprefix_ = None
        self.MeterNumber = MeterNumber
        self.MeterNumber_nsprefix_ = None
        self.MasterMeterNumber = MasterMeterNumber
        self.MasterMeterNumber_nsprefix_ = None
        self.MeterInstance = MeterInstance
        self.MeterInstance_nsprefix_ = None
        self.CompanyId = CompanyId
        self.CompanyId_nsprefix_ = None
        self.SoftwareId = SoftwareId
        self.SoftwareId_nsprefix_ = None
        self.SoftwareRelease = SoftwareRelease
        self.SoftwareRelease_nsprefix_ = None
        self.ClientProductId = ClientProductId
        self.ClientProductId_nsprefix_ = None
        self.ClientProductVersion = ClientProductVersion
        self.ClientProductVersion_nsprefix_ = None
        self.MiddlewareProductId = MiddlewareProductId
        self.MiddlewareProductId_nsprefix_ = None
        self.MiddlewareProductVersion = MiddlewareProductVersion
        self.MiddlewareProductVersion_nsprefix_ = None
        self.IntegratorId = IntegratorId
        self.IntegratorId_nsprefix_ = None
        self.Region = Region
        self.validate_ExpressRegionCode(self.Region)
        self.Region_nsprefix_ = "ns"
        self.AutoConfigurationType = AutoConfigurationType
        self.validate_AutoConfigurationType(self.AutoConfigurationType)
        self.AutoConfigurationType_nsprefix_ = "ns"
        self.CspCredentialKey = CspCredentialKey
        self.CspCredentialKey_nsprefix_ = None
        self.UserCredentialKey = UserCredentialKey
        self.UserCredentialKey_nsprefix_ = None
        self.InitiativeManifest = InitiativeManifest
        self.InitiativeManifest_nsprefix_ = "ns"
        self.Localization = Localization
        self.Localization_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ClientDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ClientDetail.subclass:
            return ClientDetail.subclass(*args_, **kwargs_)
        else:
            return ClientDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_AccountNumber(self):
        return self.AccountNumber
    def set_AccountNumber(self, AccountNumber):
        self.AccountNumber = AccountNumber
    def get_GroundShipperNumber(self):
        return self.GroundShipperNumber
    def set_GroundShipperNumber(self, GroundShipperNumber):
        self.GroundShipperNumber = GroundShipperNumber
    def get_MeterNumber(self):
        return self.MeterNumber
    def set_MeterNumber(self, MeterNumber):
        self.MeterNumber = MeterNumber
    def get_MasterMeterNumber(self):
        return self.MasterMeterNumber
    def set_MasterMeterNumber(self, MasterMeterNumber):
        self.MasterMeterNumber = MasterMeterNumber
    def get_MeterInstance(self):
        return self.MeterInstance
    def set_MeterInstance(self, MeterInstance):
        self.MeterInstance = MeterInstance
    def get_CompanyId(self):
        return self.CompanyId
    def set_CompanyId(self, CompanyId):
        self.CompanyId = CompanyId
    def get_SoftwareId(self):
        return self.SoftwareId
    def set_SoftwareId(self, SoftwareId):
        self.SoftwareId = SoftwareId
    def get_SoftwareRelease(self):
        return self.SoftwareRelease
    def set_SoftwareRelease(self, SoftwareRelease):
        self.SoftwareRelease = SoftwareRelease
    def get_ClientProductId(self):
        return self.ClientProductId
    def set_ClientProductId(self, ClientProductId):
        self.ClientProductId = ClientProductId
    def get_ClientProductVersion(self):
        return self.ClientProductVersion
    def set_ClientProductVersion(self, ClientProductVersion):
        self.ClientProductVersion = ClientProductVersion
    def get_MiddlewareProductId(self):
        return self.MiddlewareProductId
    def set_MiddlewareProductId(self, MiddlewareProductId):
        self.MiddlewareProductId = MiddlewareProductId
    def get_MiddlewareProductVersion(self):
        return self.MiddlewareProductVersion
    def set_MiddlewareProductVersion(self, MiddlewareProductVersion):
        self.MiddlewareProductVersion = MiddlewareProductVersion
    def get_IntegratorId(self):
        return self.IntegratorId
    def set_IntegratorId(self, IntegratorId):
        self.IntegratorId = IntegratorId
    def get_Region(self):
        return self.Region
    def set_Region(self, Region):
        self.Region = Region
    def get_AutoConfigurationType(self):
        return self.AutoConfigurationType
    def set_AutoConfigurationType(self, AutoConfigurationType):
        self.AutoConfigurationType = AutoConfigurationType
    def get_CspCredentialKey(self):
        return self.CspCredentialKey
    def set_CspCredentialKey(self, CspCredentialKey):
        self.CspCredentialKey = CspCredentialKey
    def get_UserCredentialKey(self):
        return self.UserCredentialKey
    def set_UserCredentialKey(self, UserCredentialKey):
        self.UserCredentialKey = UserCredentialKey
    def get_InitiativeManifest(self):
        return self.InitiativeManifest
    def set_InitiativeManifest(self, InitiativeManifest):
        self.InitiativeManifest = InitiativeManifest
    def get_Localization(self):
        return self.Localization
    def set_Localization(self, Localization):
        self.Localization = Localization
    def validate_ExpressRegionCode(self, value):
        result = True
        # Validate type ExpressRegionCode, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['APAC', 'CA', 'EMEA', 'LAC', 'US']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ExpressRegionCode' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_AutoConfigurationType(self, value):
        result = True
        # Validate type AutoConfigurationType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ENTERPRISE', 'SHIPPING_SERVICE_PROVIDER', 'SOFTWARE_ONLY', 'TRADITIONAL']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on AutoConfigurationType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.AccountNumber is not None or
            self.GroundShipperNumber is not None or
            self.MeterNumber is not None or
            self.MasterMeterNumber is not None or
            self.MeterInstance is not None or
            self.CompanyId is not None or
            self.SoftwareId is not None or
            self.SoftwareRelease is not None or
            self.ClientProductId is not None or
            self.ClientProductVersion is not None or
            self.MiddlewareProductId is not None or
            self.MiddlewareProductVersion is not None or
            self.IntegratorId is not None or
            self.Region is not None or
            self.AutoConfigurationType is not None or
            self.CspCredentialKey is not None or
            self.UserCredentialKey is not None or
            self.InitiativeManifest is not None or
            self.Localization is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ClientDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ClientDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ClientDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ClientDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ClientDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ClientDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ClientDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AccountNumber is not None:
            namespaceprefix_ = self.AccountNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.AccountNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAccountNumber>%s</%sAccountNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AccountNumber), input_name='AccountNumber')), namespaceprefix_ , eol_))
        if self.GroundShipperNumber is not None:
            namespaceprefix_ = self.GroundShipperNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.GroundShipperNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroundShipperNumber>%s</%sGroundShipperNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.GroundShipperNumber), input_name='GroundShipperNumber')), namespaceprefix_ , eol_))
        if self.MeterNumber is not None:
            namespaceprefix_ = self.MeterNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.MeterNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMeterNumber>%s</%sMeterNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MeterNumber), input_name='MeterNumber')), namespaceprefix_ , eol_))
        if self.MasterMeterNumber is not None:
            namespaceprefix_ = self.MasterMeterNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.MasterMeterNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMasterMeterNumber>%s</%sMasterMeterNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MasterMeterNumber), input_name='MasterMeterNumber')), namespaceprefix_ , eol_))
        if self.MeterInstance is not None:
            namespaceprefix_ = self.MeterInstance_nsprefix_ + ':' if (UseCapturedNS_ and self.MeterInstance_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMeterInstance>%s</%sMeterInstance>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MeterInstance), input_name='MeterInstance')), namespaceprefix_ , eol_))
        if self.CompanyId is not None:
            namespaceprefix_ = self.CompanyId_nsprefix_ + ':' if (UseCapturedNS_ and self.CompanyId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCompanyId>%s</%sCompanyId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CompanyId), input_name='CompanyId')), namespaceprefix_ , eol_))
        if self.SoftwareId is not None:
            namespaceprefix_ = self.SoftwareId_nsprefix_ + ':' if (UseCapturedNS_ and self.SoftwareId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSoftwareId>%s</%sSoftwareId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SoftwareId), input_name='SoftwareId')), namespaceprefix_ , eol_))
        if self.SoftwareRelease is not None:
            namespaceprefix_ = self.SoftwareRelease_nsprefix_ + ':' if (UseCapturedNS_ and self.SoftwareRelease_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSoftwareRelease>%s</%sSoftwareRelease>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SoftwareRelease), input_name='SoftwareRelease')), namespaceprefix_ , eol_))
        if self.ClientProductId is not None:
            namespaceprefix_ = self.ClientProductId_nsprefix_ + ':' if (UseCapturedNS_ and self.ClientProductId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClientProductId>%s</%sClientProductId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ClientProductId), input_name='ClientProductId')), namespaceprefix_ , eol_))
        if self.ClientProductVersion is not None:
            namespaceprefix_ = self.ClientProductVersion_nsprefix_ + ':' if (UseCapturedNS_ and self.ClientProductVersion_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClientProductVersion>%s</%sClientProductVersion>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ClientProductVersion), input_name='ClientProductVersion')), namespaceprefix_ , eol_))
        if self.MiddlewareProductId is not None:
            namespaceprefix_ = self.MiddlewareProductId_nsprefix_ + ':' if (UseCapturedNS_ and self.MiddlewareProductId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMiddlewareProductId>%s</%sMiddlewareProductId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MiddlewareProductId), input_name='MiddlewareProductId')), namespaceprefix_ , eol_))
        if self.MiddlewareProductVersion is not None:
            namespaceprefix_ = self.MiddlewareProductVersion_nsprefix_ + ':' if (UseCapturedNS_ and self.MiddlewareProductVersion_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMiddlewareProductVersion>%s</%sMiddlewareProductVersion>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MiddlewareProductVersion), input_name='MiddlewareProductVersion')), namespaceprefix_ , eol_))
        if self.IntegratorId is not None:
            namespaceprefix_ = self.IntegratorId_nsprefix_ + ':' if (UseCapturedNS_ and self.IntegratorId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIntegratorId>%s</%sIntegratorId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IntegratorId), input_name='IntegratorId')), namespaceprefix_ , eol_))
        if self.Region is not None:
            namespaceprefix_ = self.Region_nsprefix_ + ':' if (UseCapturedNS_ and self.Region_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRegion>%s</%sRegion>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Region), input_name='Region')), namespaceprefix_ , eol_))
        if self.AutoConfigurationType is not None:
            namespaceprefix_ = self.AutoConfigurationType_nsprefix_ + ':' if (UseCapturedNS_ and self.AutoConfigurationType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAutoConfigurationType>%s</%sAutoConfigurationType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AutoConfigurationType), input_name='AutoConfigurationType')), namespaceprefix_ , eol_))
        if self.CspCredentialKey is not None:
            namespaceprefix_ = self.CspCredentialKey_nsprefix_ + ':' if (UseCapturedNS_ and self.CspCredentialKey_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCspCredentialKey>%s</%sCspCredentialKey>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CspCredentialKey), input_name='CspCredentialKey')), namespaceprefix_ , eol_))
        if self.UserCredentialKey is not None:
            namespaceprefix_ = self.UserCredentialKey_nsprefix_ + ':' if (UseCapturedNS_ and self.UserCredentialKey_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUserCredentialKey>%s</%sUserCredentialKey>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.UserCredentialKey), input_name='UserCredentialKey')), namespaceprefix_ , eol_))
        if self.InitiativeManifest is not None:
            namespaceprefix_ = self.InitiativeManifest_nsprefix_ + ':' if (UseCapturedNS_ and self.InitiativeManifest_nsprefix_) else ''
            self.InitiativeManifest.export(outfile, level, namespaceprefix_, namespacedef_='', name_='InitiativeManifest', pretty_print=pretty_print)
        if self.Localization is not None:
            namespaceprefix_ = self.Localization_nsprefix_ + ':' if (UseCapturedNS_ and self.Localization_nsprefix_) else ''
            self.Localization.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Localization', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'AccountNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AccountNumber')
            value_ = self.gds_validate_string(value_, node, 'AccountNumber')
            self.AccountNumber = value_
            self.AccountNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'GroundShipperNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'GroundShipperNumber')
            value_ = self.gds_validate_string(value_, node, 'GroundShipperNumber')
            self.GroundShipperNumber = value_
            self.GroundShipperNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'MeterNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MeterNumber')
            value_ = self.gds_validate_string(value_, node, 'MeterNumber')
            self.MeterNumber = value_
            self.MeterNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'MasterMeterNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MasterMeterNumber')
            value_ = self.gds_validate_string(value_, node, 'MasterMeterNumber')
            self.MasterMeterNumber = value_
            self.MasterMeterNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'MeterInstance':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MeterInstance')
            value_ = self.gds_validate_string(value_, node, 'MeterInstance')
            self.MeterInstance = value_
            self.MeterInstance_nsprefix_ = child_.prefix
        elif nodeName_ == 'CompanyId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CompanyId')
            value_ = self.gds_validate_string(value_, node, 'CompanyId')
            self.CompanyId = value_
            self.CompanyId_nsprefix_ = child_.prefix
        elif nodeName_ == 'SoftwareId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SoftwareId')
            value_ = self.gds_validate_string(value_, node, 'SoftwareId')
            self.SoftwareId = value_
            self.SoftwareId_nsprefix_ = child_.prefix
        elif nodeName_ == 'SoftwareRelease':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SoftwareRelease')
            value_ = self.gds_validate_string(value_, node, 'SoftwareRelease')
            self.SoftwareRelease = value_
            self.SoftwareRelease_nsprefix_ = child_.prefix
        elif nodeName_ == 'ClientProductId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ClientProductId')
            value_ = self.gds_validate_string(value_, node, 'ClientProductId')
            self.ClientProductId = value_
            self.ClientProductId_nsprefix_ = child_.prefix
        elif nodeName_ == 'ClientProductVersion':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ClientProductVersion')
            value_ = self.gds_validate_string(value_, node, 'ClientProductVersion')
            self.ClientProductVersion = value_
            self.ClientProductVersion_nsprefix_ = child_.prefix
        elif nodeName_ == 'MiddlewareProductId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MiddlewareProductId')
            value_ = self.gds_validate_string(value_, node, 'MiddlewareProductId')
            self.MiddlewareProductId = value_
            self.MiddlewareProductId_nsprefix_ = child_.prefix
        elif nodeName_ == 'MiddlewareProductVersion':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MiddlewareProductVersion')
            value_ = self.gds_validate_string(value_, node, 'MiddlewareProductVersion')
            self.MiddlewareProductVersion = value_
            self.MiddlewareProductVersion_nsprefix_ = child_.prefix
        elif nodeName_ == 'IntegratorId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'IntegratorId')
            value_ = self.gds_validate_string(value_, node, 'IntegratorId')
            self.IntegratorId = value_
            self.IntegratorId_nsprefix_ = child_.prefix
        elif nodeName_ == 'Region':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Region')
            value_ = self.gds_validate_string(value_, node, 'Region')
            self.Region = value_
            self.Region_nsprefix_ = child_.prefix
            # validate type ExpressRegionCode
            self.validate_ExpressRegionCode(self.Region)
        elif nodeName_ == 'AutoConfigurationType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AutoConfigurationType')
            value_ = self.gds_validate_string(value_, node, 'AutoConfigurationType')
            self.AutoConfigurationType = value_
            self.AutoConfigurationType_nsprefix_ = child_.prefix
            # validate type AutoConfigurationType
            self.validate_AutoConfigurationType(self.AutoConfigurationType)
        elif nodeName_ == 'CspCredentialKey':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CspCredentialKey')
            value_ = self.gds_validate_string(value_, node, 'CspCredentialKey')
            self.CspCredentialKey = value_
            self.CspCredentialKey_nsprefix_ = child_.prefix
        elif nodeName_ == 'UserCredentialKey':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'UserCredentialKey')
            value_ = self.gds_validate_string(value_, node, 'UserCredentialKey')
            self.UserCredentialKey = value_
            self.UserCredentialKey_nsprefix_ = child_.prefix
        elif nodeName_ == 'InitiativeManifest':
            obj_ = InitiativeManifest.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.InitiativeManifest = obj_
            obj_.original_tagname_ = 'InitiativeManifest'
        elif nodeName_ == 'Localization':
            obj_ = Localization.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Localization = obj_
            obj_.original_tagname_ = 'Localization'
# end class ClientDetail


class CodAddTransportationChargesDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RateTypeBasis=None, ChargeBasis=None, ChargeBasisLevel=None, RateLevelBasis=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.RateTypeBasis = RateTypeBasis
        self.validate_RateTypeBasisType(self.RateTypeBasis)
        self.RateTypeBasis_nsprefix_ = "ns"
        self.ChargeBasis = ChargeBasis
        self.validate_CodAddTransportationChargeBasisType(self.ChargeBasis)
        self.ChargeBasis_nsprefix_ = "ns"
        self.ChargeBasisLevel = ChargeBasisLevel
        self.validate_ChargeBasisLevelType(self.ChargeBasisLevel)
        self.ChargeBasisLevel_nsprefix_ = "ns"
        self.RateLevelBasis = RateLevelBasis
        self.validate_RateLevelBasisType(self.RateLevelBasis)
        self.RateLevelBasis_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CodAddTransportationChargesDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CodAddTransportationChargesDetail.subclass:
            return CodAddTransportationChargesDetail.subclass(*args_, **kwargs_)
        else:
            return CodAddTransportationChargesDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RateTypeBasis(self):
        return self.RateTypeBasis
    def set_RateTypeBasis(self, RateTypeBasis):
        self.RateTypeBasis = RateTypeBasis
    def get_ChargeBasis(self):
        return self.ChargeBasis
    def set_ChargeBasis(self, ChargeBasis):
        self.ChargeBasis = ChargeBasis
    def get_ChargeBasisLevel(self):
        return self.ChargeBasisLevel
    def set_ChargeBasisLevel(self, ChargeBasisLevel):
        self.ChargeBasisLevel = ChargeBasisLevel
    def get_RateLevelBasis(self):
        return self.RateLevelBasis
    def set_RateLevelBasis(self, RateLevelBasis):
        self.RateLevelBasis = RateLevelBasis
    def validate_RateTypeBasisType(self, value):
        result = True
        # Validate type RateTypeBasisType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ACCOUNT', 'ACTUAL', 'CURRENT', 'CUSTOM', 'LIST']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on RateTypeBasisType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_CodAddTransportationChargeBasisType(self, value):
        result = True
        # Validate type CodAddTransportationChargeBasisType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['COD_SURCHARGE', 'NET_CHARGE', 'NET_FREIGHT', 'TOTAL_CUSTOMER_CHARGE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CodAddTransportationChargeBasisType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_ChargeBasisLevelType(self, value):
        result = True
        # Validate type ChargeBasisLevelType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CURRENT_PACKAGE', 'SUM_OF_PACKAGES']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ChargeBasisLevelType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_RateLevelBasisType(self, value):
        result = True
        # Validate type RateLevelBasisType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BUNDLED_RATE', 'INDIVIDUAL_PACKAGE_RATE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on RateLevelBasisType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.RateTypeBasis is not None or
            self.ChargeBasis is not None or
            self.ChargeBasisLevel is not None or
            self.RateLevelBasis is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CodAddTransportationChargesDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CodAddTransportationChargesDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CodAddTransportationChargesDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CodAddTransportationChargesDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CodAddTransportationChargesDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CodAddTransportationChargesDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CodAddTransportationChargesDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RateTypeBasis is not None:
            namespaceprefix_ = self.RateTypeBasis_nsprefix_ + ':' if (UseCapturedNS_ and self.RateTypeBasis_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRateTypeBasis>%s</%sRateTypeBasis>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RateTypeBasis), input_name='RateTypeBasis')), namespaceprefix_ , eol_))
        if self.ChargeBasis is not None:
            namespaceprefix_ = self.ChargeBasis_nsprefix_ + ':' if (UseCapturedNS_ and self.ChargeBasis_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sChargeBasis>%s</%sChargeBasis>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ChargeBasis), input_name='ChargeBasis')), namespaceprefix_ , eol_))
        if self.ChargeBasisLevel is not None:
            namespaceprefix_ = self.ChargeBasisLevel_nsprefix_ + ':' if (UseCapturedNS_ and self.ChargeBasisLevel_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sChargeBasisLevel>%s</%sChargeBasisLevel>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ChargeBasisLevel), input_name='ChargeBasisLevel')), namespaceprefix_ , eol_))
        if self.RateLevelBasis is not None:
            namespaceprefix_ = self.RateLevelBasis_nsprefix_ + ':' if (UseCapturedNS_ and self.RateLevelBasis_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRateLevelBasis>%s</%sRateLevelBasis>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RateLevelBasis), input_name='RateLevelBasis')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RateTypeBasis':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RateTypeBasis')
            value_ = self.gds_validate_string(value_, node, 'RateTypeBasis')
            self.RateTypeBasis = value_
            self.RateTypeBasis_nsprefix_ = child_.prefix
            # validate type RateTypeBasisType
            self.validate_RateTypeBasisType(self.RateTypeBasis)
        elif nodeName_ == 'ChargeBasis':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ChargeBasis')
            value_ = self.gds_validate_string(value_, node, 'ChargeBasis')
            self.ChargeBasis = value_
            self.ChargeBasis_nsprefix_ = child_.prefix
            # validate type CodAddTransportationChargeBasisType
            self.validate_CodAddTransportationChargeBasisType(self.ChargeBasis)
        elif nodeName_ == 'ChargeBasisLevel':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ChargeBasisLevel')
            value_ = self.gds_validate_string(value_, node, 'ChargeBasisLevel')
            self.ChargeBasisLevel = value_
            self.ChargeBasisLevel_nsprefix_ = child_.prefix
            # validate type ChargeBasisLevelType
            self.validate_ChargeBasisLevelType(self.ChargeBasisLevel)
        elif nodeName_ == 'RateLevelBasis':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RateLevelBasis')
            value_ = self.gds_validate_string(value_, node, 'RateLevelBasis')
            self.RateLevelBasis = value_
            self.RateLevelBasis_nsprefix_ = child_.prefix
            # validate type RateLevelBasisType
            self.validate_RateLevelBasisType(self.RateLevelBasis)
# end class CodAddTransportationChargesDetail


class CodDetail(GeneratedsSuper):
    """Descriptive data required for a FedEx COD (Collect-On-Delivery)
    shipment."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CodCollectionAmount=None, AddTransportationChargesDetail=None, CollectionType=None, CodRecipient=None, FinancialInstitutionContactAndAddress=None, RemitToName=None, ReferenceIndicator=None, ReturnTrackingId=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.CodCollectionAmount = CodCollectionAmount
        self.CodCollectionAmount_nsprefix_ = "ns"
        self.AddTransportationChargesDetail = AddTransportationChargesDetail
        self.AddTransportationChargesDetail_nsprefix_ = "ns"
        self.CollectionType = CollectionType
        self.validate_CodCollectionType(self.CollectionType)
        self.CollectionType_nsprefix_ = "ns"
        self.CodRecipient = CodRecipient
        self.CodRecipient_nsprefix_ = "ns"
        self.FinancialInstitutionContactAndAddress = FinancialInstitutionContactAndAddress
        self.FinancialInstitutionContactAndAddress_nsprefix_ = "ns"
        self.RemitToName = RemitToName
        self.RemitToName_nsprefix_ = None
        self.ReferenceIndicator = ReferenceIndicator
        self.validate_CodReturnReferenceIndicatorType(self.ReferenceIndicator)
        self.ReferenceIndicator_nsprefix_ = "ns"
        self.ReturnTrackingId = ReturnTrackingId
        self.ReturnTrackingId_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CodDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CodDetail.subclass:
            return CodDetail.subclass(*args_, **kwargs_)
        else:
            return CodDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CodCollectionAmount(self):
        return self.CodCollectionAmount
    def set_CodCollectionAmount(self, CodCollectionAmount):
        self.CodCollectionAmount = CodCollectionAmount
    def get_AddTransportationChargesDetail(self):
        return self.AddTransportationChargesDetail
    def set_AddTransportationChargesDetail(self, AddTransportationChargesDetail):
        self.AddTransportationChargesDetail = AddTransportationChargesDetail
    def get_CollectionType(self):
        return self.CollectionType
    def set_CollectionType(self, CollectionType):
        self.CollectionType = CollectionType
    def get_CodRecipient(self):
        return self.CodRecipient
    def set_CodRecipient(self, CodRecipient):
        self.CodRecipient = CodRecipient
    def get_FinancialInstitutionContactAndAddress(self):
        return self.FinancialInstitutionContactAndAddress
    def set_FinancialInstitutionContactAndAddress(self, FinancialInstitutionContactAndAddress):
        self.FinancialInstitutionContactAndAddress = FinancialInstitutionContactAndAddress
    def get_RemitToName(self):
        return self.RemitToName
    def set_RemitToName(self, RemitToName):
        self.RemitToName = RemitToName
    def get_ReferenceIndicator(self):
        return self.ReferenceIndicator
    def set_ReferenceIndicator(self, ReferenceIndicator):
        self.ReferenceIndicator = ReferenceIndicator
    def get_ReturnTrackingId(self):
        return self.ReturnTrackingId
    def set_ReturnTrackingId(self, ReturnTrackingId):
        self.ReturnTrackingId = ReturnTrackingId
    def validate_CodCollectionType(self, value):
        result = True
        # Validate type CodCollectionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ANY', 'CASH', 'COMPANY_CHECK', 'GUARANTEED_FUNDS', 'PERSONAL_CHECK']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CodCollectionType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_CodReturnReferenceIndicatorType(self, value):
        result = True
        # Validate type CodReturnReferenceIndicatorType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['INVOICE', 'PO', 'REFERENCE', 'TRACKING']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CodReturnReferenceIndicatorType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.CodCollectionAmount is not None or
            self.AddTransportationChargesDetail is not None or
            self.CollectionType is not None or
            self.CodRecipient is not None or
            self.FinancialInstitutionContactAndAddress is not None or
            self.RemitToName is not None or
            self.ReferenceIndicator is not None or
            self.ReturnTrackingId is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CodDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CodDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CodDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CodDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CodDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CodDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CodDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CodCollectionAmount is not None:
            namespaceprefix_ = self.CodCollectionAmount_nsprefix_ + ':' if (UseCapturedNS_ and self.CodCollectionAmount_nsprefix_) else ''
            self.CodCollectionAmount.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CodCollectionAmount', pretty_print=pretty_print)
        if self.AddTransportationChargesDetail is not None:
            namespaceprefix_ = self.AddTransportationChargesDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.AddTransportationChargesDetail_nsprefix_) else ''
            self.AddTransportationChargesDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AddTransportationChargesDetail', pretty_print=pretty_print)
        if self.CollectionType is not None:
            namespaceprefix_ = self.CollectionType_nsprefix_ + ':' if (UseCapturedNS_ and self.CollectionType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCollectionType>%s</%sCollectionType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CollectionType), input_name='CollectionType')), namespaceprefix_ , eol_))
        if self.CodRecipient is not None:
            namespaceprefix_ = self.CodRecipient_nsprefix_ + ':' if (UseCapturedNS_ and self.CodRecipient_nsprefix_) else ''
            self.CodRecipient.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CodRecipient', pretty_print=pretty_print)
        if self.FinancialInstitutionContactAndAddress is not None:
            namespaceprefix_ = self.FinancialInstitutionContactAndAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.FinancialInstitutionContactAndAddress_nsprefix_) else ''
            self.FinancialInstitutionContactAndAddress.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FinancialInstitutionContactAndAddress', pretty_print=pretty_print)
        if self.RemitToName is not None:
            namespaceprefix_ = self.RemitToName_nsprefix_ + ':' if (UseCapturedNS_ and self.RemitToName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRemitToName>%s</%sRemitToName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RemitToName), input_name='RemitToName')), namespaceprefix_ , eol_))
        if self.ReferenceIndicator is not None:
            namespaceprefix_ = self.ReferenceIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.ReferenceIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceIndicator>%s</%sReferenceIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceIndicator), input_name='ReferenceIndicator')), namespaceprefix_ , eol_))
        if self.ReturnTrackingId is not None:
            namespaceprefix_ = self.ReturnTrackingId_nsprefix_ + ':' if (UseCapturedNS_ and self.ReturnTrackingId_nsprefix_) else ''
            self.ReturnTrackingId.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ReturnTrackingId', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CodCollectionAmount':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CodCollectionAmount = obj_
            obj_.original_tagname_ = 'CodCollectionAmount'
        elif nodeName_ == 'AddTransportationChargesDetail':
            obj_ = CodAddTransportationChargesDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AddTransportationChargesDetail = obj_
            obj_.original_tagname_ = 'AddTransportationChargesDetail'
        elif nodeName_ == 'CollectionType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CollectionType')
            value_ = self.gds_validate_string(value_, node, 'CollectionType')
            self.CollectionType = value_
            self.CollectionType_nsprefix_ = child_.prefix
            # validate type CodCollectionType
            self.validate_CodCollectionType(self.CollectionType)
        elif nodeName_ == 'CodRecipient':
            obj_ = Party.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CodRecipient = obj_
            obj_.original_tagname_ = 'CodRecipient'
        elif nodeName_ == 'FinancialInstitutionContactAndAddress':
            obj_ = ContactAndAddress.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FinancialInstitutionContactAndAddress = obj_
            obj_.original_tagname_ = 'FinancialInstitutionContactAndAddress'
        elif nodeName_ == 'RemitToName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RemitToName')
            value_ = self.gds_validate_string(value_, node, 'RemitToName')
            self.RemitToName = value_
            self.RemitToName_nsprefix_ = child_.prefix
        elif nodeName_ == 'ReferenceIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ReferenceIndicator')
            value_ = self.gds_validate_string(value_, node, 'ReferenceIndicator')
            self.ReferenceIndicator = value_
            self.ReferenceIndicator_nsprefix_ = child_.prefix
            # validate type CodReturnReferenceIndicatorType
            self.validate_CodReturnReferenceIndicatorType(self.ReferenceIndicator)
        elif nodeName_ == 'ReturnTrackingId':
            obj_ = TrackingId.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ReturnTrackingId = obj_
            obj_.original_tagname_ = 'ReturnTrackingId'
# end class CodDetail


class CommercialInvoice(GeneratedsSuper):
    """CommercialInvoice element is required for electronic upload of CI data.
    It will serve to create/transmit an Electronic Commercial Invoice
    through the FedEx Systems. Customers are responsible for printing their
    own Commercial Invoice.If you would likeFedEx to generate a Commercial
    Invoice and transmit it to Customs. for clearance purposes, you need to
    specify that in the ShippingDocumentSpecification element. If you would
    like a copy of the Commercial Invoice that FedEx generated returned to
    you in reply it needs to be specified in the
    ETDDetail/RequestedDocumentCopies element. Commercial Invoice support
    consists of maximum of 99 commodity line items."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Comments=None, FreightCharge=None, TaxesOrMiscellaneousCharge=None, TaxesOrMiscellaneousChargeType=None, PackingCosts=None, HandlingCosts=None, SpecialInstructions=None, DeclarationStatement=None, PaymentTerms=None, Purpose=None, PurposeOfShipmentDescription=None, CustomerReferences=None, OriginatorName=None, TermsOfSale=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Comments is None:
            self.Comments = []
        else:
            self.Comments = Comments
        self.Comments_nsprefix_ = None
        self.FreightCharge = FreightCharge
        self.FreightCharge_nsprefix_ = "ns"
        self.TaxesOrMiscellaneousCharge = TaxesOrMiscellaneousCharge
        self.TaxesOrMiscellaneousCharge_nsprefix_ = "ns"
        self.TaxesOrMiscellaneousChargeType = TaxesOrMiscellaneousChargeType
        self.validate_TaxesOrMiscellaneousChargeType(self.TaxesOrMiscellaneousChargeType)
        self.TaxesOrMiscellaneousChargeType_nsprefix_ = "ns"
        self.PackingCosts = PackingCosts
        self.PackingCosts_nsprefix_ = "ns"
        self.HandlingCosts = HandlingCosts
        self.HandlingCosts_nsprefix_ = "ns"
        self.SpecialInstructions = SpecialInstructions
        self.SpecialInstructions_nsprefix_ = None
        self.DeclarationStatement = DeclarationStatement
        self.DeclarationStatement_nsprefix_ = None
        self.PaymentTerms = PaymentTerms
        self.PaymentTerms_nsprefix_ = None
        self.Purpose = Purpose
        self.validate_PurposeOfShipmentType(self.Purpose)
        self.Purpose_nsprefix_ = "ns"
        self.PurposeOfShipmentDescription = PurposeOfShipmentDescription
        self.PurposeOfShipmentDescription_nsprefix_ = None
        if CustomerReferences is None:
            self.CustomerReferences = []
        else:
            self.CustomerReferences = CustomerReferences
        self.CustomerReferences_nsprefix_ = "ns"
        self.OriginatorName = OriginatorName
        self.OriginatorName_nsprefix_ = None
        self.TermsOfSale = TermsOfSale
        self.TermsOfSale_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CommercialInvoice)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CommercialInvoice.subclass:
            return CommercialInvoice.subclass(*args_, **kwargs_)
        else:
            return CommercialInvoice(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Comments(self):
        return self.Comments
    def set_Comments(self, Comments):
        self.Comments = Comments
    def add_Comments(self, value):
        self.Comments.append(value)
    def insert_Comments_at(self, index, value):
        self.Comments.insert(index, value)
    def replace_Comments_at(self, index, value):
        self.Comments[index] = value
    def get_FreightCharge(self):
        return self.FreightCharge
    def set_FreightCharge(self, FreightCharge):
        self.FreightCharge = FreightCharge
    def get_TaxesOrMiscellaneousCharge(self):
        return self.TaxesOrMiscellaneousCharge
    def set_TaxesOrMiscellaneousCharge(self, TaxesOrMiscellaneousCharge):
        self.TaxesOrMiscellaneousCharge = TaxesOrMiscellaneousCharge
    def get_TaxesOrMiscellaneousChargeType(self):
        return self.TaxesOrMiscellaneousChargeType
    def set_TaxesOrMiscellaneousChargeType(self, TaxesOrMiscellaneousChargeType):
        self.TaxesOrMiscellaneousChargeType = TaxesOrMiscellaneousChargeType
    def get_PackingCosts(self):
        return self.PackingCosts
    def set_PackingCosts(self, PackingCosts):
        self.PackingCosts = PackingCosts
    def get_HandlingCosts(self):
        return self.HandlingCosts
    def set_HandlingCosts(self, HandlingCosts):
        self.HandlingCosts = HandlingCosts
    def get_SpecialInstructions(self):
        return self.SpecialInstructions
    def set_SpecialInstructions(self, SpecialInstructions):
        self.SpecialInstructions = SpecialInstructions
    def get_DeclarationStatement(self):
        return self.DeclarationStatement
    def set_DeclarationStatement(self, DeclarationStatement):
        self.DeclarationStatement = DeclarationStatement
    def get_PaymentTerms(self):
        return self.PaymentTerms
    def set_PaymentTerms(self, PaymentTerms):
        self.PaymentTerms = PaymentTerms
    def get_Purpose(self):
        return self.Purpose
    def set_Purpose(self, Purpose):
        self.Purpose = Purpose
    def get_PurposeOfShipmentDescription(self):
        return self.PurposeOfShipmentDescription
    def set_PurposeOfShipmentDescription(self, PurposeOfShipmentDescription):
        self.PurposeOfShipmentDescription = PurposeOfShipmentDescription
    def get_CustomerReferences(self):
        return self.CustomerReferences
    def set_CustomerReferences(self, CustomerReferences):
        self.CustomerReferences = CustomerReferences
    def add_CustomerReferences(self, value):
        self.CustomerReferences.append(value)
    def insert_CustomerReferences_at(self, index, value):
        self.CustomerReferences.insert(index, value)
    def replace_CustomerReferences_at(self, index, value):
        self.CustomerReferences[index] = value
    def get_OriginatorName(self):
        return self.OriginatorName
    def set_OriginatorName(self, OriginatorName):
        self.OriginatorName = OriginatorName
    def get_TermsOfSale(self):
        return self.TermsOfSale
    def set_TermsOfSale(self, TermsOfSale):
        self.TermsOfSale = TermsOfSale
    def validate_TaxesOrMiscellaneousChargeType(self, value):
        result = True
        # Validate type TaxesOrMiscellaneousChargeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['COMMISSIONS', 'DISCOUNTS', 'HANDLING_FEES', 'OTHER', 'ROYALTIES_AND_LICENSE_FEES', 'TAXES']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on TaxesOrMiscellaneousChargeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_PurposeOfShipmentType(self, value):
        result = True
        # Validate type PurposeOfShipmentType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['GIFT', 'NOT_SOLD', 'PERSONAL_EFFECTS', 'REPAIR_AND_RETURN', 'SAMPLE', 'SOLD']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on PurposeOfShipmentType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Comments or
            self.FreightCharge is not None or
            self.TaxesOrMiscellaneousCharge is not None or
            self.TaxesOrMiscellaneousChargeType is not None or
            self.PackingCosts is not None or
            self.HandlingCosts is not None or
            self.SpecialInstructions is not None or
            self.DeclarationStatement is not None or
            self.PaymentTerms is not None or
            self.Purpose is not None or
            self.PurposeOfShipmentDescription is not None or
            self.CustomerReferences or
            self.OriginatorName is not None or
            self.TermsOfSale is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CommercialInvoice', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CommercialInvoice')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CommercialInvoice':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CommercialInvoice')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CommercialInvoice', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CommercialInvoice'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CommercialInvoice', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Comments_ in self.Comments:
            namespaceprefix_ = self.Comments_nsprefix_ + ':' if (UseCapturedNS_ and self.Comments_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sComments>%s</%sComments>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Comments_), input_name='Comments')), namespaceprefix_ , eol_))
        if self.FreightCharge is not None:
            namespaceprefix_ = self.FreightCharge_nsprefix_ + ':' if (UseCapturedNS_ and self.FreightCharge_nsprefix_) else ''
            self.FreightCharge.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FreightCharge', pretty_print=pretty_print)
        if self.TaxesOrMiscellaneousCharge is not None:
            namespaceprefix_ = self.TaxesOrMiscellaneousCharge_nsprefix_ + ':' if (UseCapturedNS_ and self.TaxesOrMiscellaneousCharge_nsprefix_) else ''
            self.TaxesOrMiscellaneousCharge.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TaxesOrMiscellaneousCharge', pretty_print=pretty_print)
        if self.TaxesOrMiscellaneousChargeType is not None:
            namespaceprefix_ = self.TaxesOrMiscellaneousChargeType_nsprefix_ + ':' if (UseCapturedNS_ and self.TaxesOrMiscellaneousChargeType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxesOrMiscellaneousChargeType>%s</%sTaxesOrMiscellaneousChargeType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TaxesOrMiscellaneousChargeType), input_name='TaxesOrMiscellaneousChargeType')), namespaceprefix_ , eol_))
        if self.PackingCosts is not None:
            namespaceprefix_ = self.PackingCosts_nsprefix_ + ':' if (UseCapturedNS_ and self.PackingCosts_nsprefix_) else ''
            self.PackingCosts.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PackingCosts', pretty_print=pretty_print)
        if self.HandlingCosts is not None:
            namespaceprefix_ = self.HandlingCosts_nsprefix_ + ':' if (UseCapturedNS_ and self.HandlingCosts_nsprefix_) else ''
            self.HandlingCosts.export(outfile, level, namespaceprefix_, namespacedef_='', name_='HandlingCosts', pretty_print=pretty_print)
        if self.SpecialInstructions is not None:
            namespaceprefix_ = self.SpecialInstructions_nsprefix_ + ':' if (UseCapturedNS_ and self.SpecialInstructions_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSpecialInstructions>%s</%sSpecialInstructions>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SpecialInstructions), input_name='SpecialInstructions')), namespaceprefix_ , eol_))
        if self.DeclarationStatement is not None:
            namespaceprefix_ = self.DeclarationStatement_nsprefix_ + ':' if (UseCapturedNS_ and self.DeclarationStatement_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDeclarationStatement>%s</%sDeclarationStatement>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DeclarationStatement), input_name='DeclarationStatement')), namespaceprefix_ , eol_))
        if self.PaymentTerms is not None:
            namespaceprefix_ = self.PaymentTerms_nsprefix_ + ':' if (UseCapturedNS_ and self.PaymentTerms_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPaymentTerms>%s</%sPaymentTerms>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PaymentTerms), input_name='PaymentTerms')), namespaceprefix_ , eol_))
        if self.Purpose is not None:
            namespaceprefix_ = self.Purpose_nsprefix_ + ':' if (UseCapturedNS_ and self.Purpose_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPurpose>%s</%sPurpose>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Purpose), input_name='Purpose')), namespaceprefix_ , eol_))
        if self.PurposeOfShipmentDescription is not None:
            namespaceprefix_ = self.PurposeOfShipmentDescription_nsprefix_ + ':' if (UseCapturedNS_ and self.PurposeOfShipmentDescription_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPurposeOfShipmentDescription>%s</%sPurposeOfShipmentDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PurposeOfShipmentDescription), input_name='PurposeOfShipmentDescription')), namespaceprefix_ , eol_))
        for CustomerReferences_ in self.CustomerReferences:
            namespaceprefix_ = self.CustomerReferences_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomerReferences_nsprefix_) else ''
            CustomerReferences_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CustomerReferences', pretty_print=pretty_print)
        if self.OriginatorName is not None:
            namespaceprefix_ = self.OriginatorName_nsprefix_ + ':' if (UseCapturedNS_ and self.OriginatorName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOriginatorName>%s</%sOriginatorName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OriginatorName), input_name='OriginatorName')), namespaceprefix_ , eol_))
        if self.TermsOfSale is not None:
            namespaceprefix_ = self.TermsOfSale_nsprefix_ + ':' if (UseCapturedNS_ and self.TermsOfSale_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTermsOfSale>%s</%sTermsOfSale>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TermsOfSale), input_name='TermsOfSale')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Comments':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Comments')
            value_ = self.gds_validate_string(value_, node, 'Comments')
            self.Comments.append(value_)
            self.Comments_nsprefix_ = child_.prefix
        elif nodeName_ == 'FreightCharge':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FreightCharge = obj_
            obj_.original_tagname_ = 'FreightCharge'
        elif nodeName_ == 'TaxesOrMiscellaneousCharge':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TaxesOrMiscellaneousCharge = obj_
            obj_.original_tagname_ = 'TaxesOrMiscellaneousCharge'
        elif nodeName_ == 'TaxesOrMiscellaneousChargeType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TaxesOrMiscellaneousChargeType')
            value_ = self.gds_validate_string(value_, node, 'TaxesOrMiscellaneousChargeType')
            self.TaxesOrMiscellaneousChargeType = value_
            self.TaxesOrMiscellaneousChargeType_nsprefix_ = child_.prefix
            # validate type TaxesOrMiscellaneousChargeType
            self.validate_TaxesOrMiscellaneousChargeType(self.TaxesOrMiscellaneousChargeType)
        elif nodeName_ == 'PackingCosts':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PackingCosts = obj_
            obj_.original_tagname_ = 'PackingCosts'
        elif nodeName_ == 'HandlingCosts':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.HandlingCosts = obj_
            obj_.original_tagname_ = 'HandlingCosts'
        elif nodeName_ == 'SpecialInstructions':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SpecialInstructions')
            value_ = self.gds_validate_string(value_, node, 'SpecialInstructions')
            self.SpecialInstructions = value_
            self.SpecialInstructions_nsprefix_ = child_.prefix
        elif nodeName_ == 'DeclarationStatement':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DeclarationStatement')
            value_ = self.gds_validate_string(value_, node, 'DeclarationStatement')
            self.DeclarationStatement = value_
            self.DeclarationStatement_nsprefix_ = child_.prefix
        elif nodeName_ == 'PaymentTerms':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PaymentTerms')
            value_ = self.gds_validate_string(value_, node, 'PaymentTerms')
            self.PaymentTerms = value_
            self.PaymentTerms_nsprefix_ = child_.prefix
        elif nodeName_ == 'Purpose':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Purpose')
            value_ = self.gds_validate_string(value_, node, 'Purpose')
            self.Purpose = value_
            self.Purpose_nsprefix_ = child_.prefix
            # validate type PurposeOfShipmentType
            self.validate_PurposeOfShipmentType(self.Purpose)
        elif nodeName_ == 'PurposeOfShipmentDescription':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PurposeOfShipmentDescription')
            value_ = self.gds_validate_string(value_, node, 'PurposeOfShipmentDescription')
            self.PurposeOfShipmentDescription = value_
            self.PurposeOfShipmentDescription_nsprefix_ = child_.prefix
        elif nodeName_ == 'CustomerReferences':
            obj_ = CustomerReference.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CustomerReferences.append(obj_)
            obj_.original_tagname_ = 'CustomerReferences'
        elif nodeName_ == 'OriginatorName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'OriginatorName')
            value_ = self.gds_validate_string(value_, node, 'OriginatorName')
            self.OriginatorName = value_
            self.OriginatorName_nsprefix_ = child_.prefix
        elif nodeName_ == 'TermsOfSale':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TermsOfSale')
            value_ = self.gds_validate_string(value_, node, 'TermsOfSale')
            self.TermsOfSale = value_
            self.TermsOfSale_nsprefix_ = child_.prefix
# end class CommercialInvoice


class CommercialInvoiceDetail(GeneratedsSuper):
    """The instructions indicating how to print the Commercial Invoice( e.g.
    image type) Specifies characteristics of a shipping document to be
    produced."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Format=None, CustomerImageUsages=None, FormVersion=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Format = Format
        self.Format_nsprefix_ = "ns"
        if CustomerImageUsages is None:
            self.CustomerImageUsages = []
        else:
            self.CustomerImageUsages = CustomerImageUsages
        self.CustomerImageUsages_nsprefix_ = "ns"
        self.FormVersion = FormVersion
        self.FormVersion_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CommercialInvoiceDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CommercialInvoiceDetail.subclass:
            return CommercialInvoiceDetail.subclass(*args_, **kwargs_)
        else:
            return CommercialInvoiceDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Format(self):
        return self.Format
    def set_Format(self, Format):
        self.Format = Format
    def get_CustomerImageUsages(self):
        return self.CustomerImageUsages
    def set_CustomerImageUsages(self, CustomerImageUsages):
        self.CustomerImageUsages = CustomerImageUsages
    def add_CustomerImageUsages(self, value):
        self.CustomerImageUsages.append(value)
    def insert_CustomerImageUsages_at(self, index, value):
        self.CustomerImageUsages.insert(index, value)
    def replace_CustomerImageUsages_at(self, index, value):
        self.CustomerImageUsages[index] = value
    def get_FormVersion(self):
        return self.FormVersion
    def set_FormVersion(self, FormVersion):
        self.FormVersion = FormVersion
    def hasContent_(self):
        if (
            self.Format is not None or
            self.CustomerImageUsages or
            self.FormVersion is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CommercialInvoiceDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CommercialInvoiceDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CommercialInvoiceDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CommercialInvoiceDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CommercialInvoiceDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CommercialInvoiceDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CommercialInvoiceDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Format is not None:
            namespaceprefix_ = self.Format_nsprefix_ + ':' if (UseCapturedNS_ and self.Format_nsprefix_) else ''
            self.Format.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Format', pretty_print=pretty_print)
        for CustomerImageUsages_ in self.CustomerImageUsages:
            namespaceprefix_ = self.CustomerImageUsages_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomerImageUsages_nsprefix_) else ''
            CustomerImageUsages_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CustomerImageUsages', pretty_print=pretty_print)
        if self.FormVersion is not None:
            namespaceprefix_ = self.FormVersion_nsprefix_ + ':' if (UseCapturedNS_ and self.FormVersion_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFormVersion>%s</%sFormVersion>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FormVersion), input_name='FormVersion')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Format':
            obj_ = ShippingDocumentFormat.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Format = obj_
            obj_.original_tagname_ = 'Format'
        elif nodeName_ == 'CustomerImageUsages':
            obj_ = CustomerImageUsage.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CustomerImageUsages.append(obj_)
            obj_.original_tagname_ = 'CustomerImageUsages'
        elif nodeName_ == 'FormVersion':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FormVersion')
            value_ = self.gds_validate_string(value_, node, 'FormVersion')
            self.FormVersion = value_
            self.FormVersion_nsprefix_ = child_.prefix
# end class CommercialInvoiceDetail


class CommitDetail(GeneratedsSuper):
    """Information about the transit time and delivery commitment date and
    time."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CommodityName=None, ServiceType=None, ServiceDescription=None, AppliedOptions=None, AppliedSubOptions=None, DerivedShipmentSignatureOption=None, DerivedPackageSignatureOptions=None, DerivedOriginDetail=None, DerivedDestinationDetail=None, CommitTimestamp=None, DayOfWeek=None, TransitTime=None, MaximumTransitTime=None, DestinationServiceArea=None, BrokerAddress=None, BrokerLocationId=None, BrokerCommitTimestamp=None, BrokerCommitDayOfWeek=None, BrokerToDestinationDays=None, ProofOfDeliveryDate=None, ProofOfDeliveryDayOfWeek=None, CommitMessages=None, DeliveryMessages=None, DelayDetails=None, DocumentContent=None, RequiredDocuments=None, FreightCommitDetail=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.CommodityName = CommodityName
        self.CommodityName_nsprefix_ = None
        self.ServiceType = ServiceType
        self.ServiceType_nsprefix_ = None
        self.ServiceDescription = ServiceDescription
        self.ServiceDescription_nsprefix_ = "ns"
        if AppliedOptions is None:
            self.AppliedOptions = []
        else:
            self.AppliedOptions = AppliedOptions
        self.AppliedOptions_nsprefix_ = "ns"
        self.AppliedSubOptions = AppliedSubOptions
        self.AppliedSubOptions_nsprefix_ = "ns"
        self.DerivedShipmentSignatureOption = DerivedShipmentSignatureOption
        self.DerivedShipmentSignatureOption_nsprefix_ = "ns"
        if DerivedPackageSignatureOptions is None:
            self.DerivedPackageSignatureOptions = []
        else:
            self.DerivedPackageSignatureOptions = DerivedPackageSignatureOptions
        self.DerivedPackageSignatureOptions_nsprefix_ = "ns"
        self.DerivedOriginDetail = DerivedOriginDetail
        self.DerivedOriginDetail_nsprefix_ = "ns"
        self.DerivedDestinationDetail = DerivedDestinationDetail
        self.DerivedDestinationDetail_nsprefix_ = "ns"
        if isinstance(CommitTimestamp, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(CommitTimestamp, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = CommitTimestamp
        self.CommitTimestamp = initvalue_
        self.CommitTimestamp_nsprefix_ = None
        self.DayOfWeek = DayOfWeek
        self.validate_DayOfWeekType(self.DayOfWeek)
        self.DayOfWeek_nsprefix_ = "ns"
        self.TransitTime = TransitTime
        self.validate_TransitTimeType(self.TransitTime)
        self.TransitTime_nsprefix_ = "ns"
        self.MaximumTransitTime = MaximumTransitTime
        self.validate_TransitTimeType(self.MaximumTransitTime)
        self.MaximumTransitTime_nsprefix_ = "ns"
        self.DestinationServiceArea = DestinationServiceArea
        self.DestinationServiceArea_nsprefix_ = None
        self.BrokerAddress = BrokerAddress
        self.BrokerAddress_nsprefix_ = "ns"
        self.BrokerLocationId = BrokerLocationId
        self.BrokerLocationId_nsprefix_ = None
        if isinstance(BrokerCommitTimestamp, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(BrokerCommitTimestamp, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = BrokerCommitTimestamp
        self.BrokerCommitTimestamp = initvalue_
        self.BrokerCommitTimestamp_nsprefix_ = None
        self.BrokerCommitDayOfWeek = BrokerCommitDayOfWeek
        self.validate_DayOfWeekType(self.BrokerCommitDayOfWeek)
        self.BrokerCommitDayOfWeek_nsprefix_ = "ns"
        self.BrokerToDestinationDays = BrokerToDestinationDays
        self.BrokerToDestinationDays_nsprefix_ = None
        if isinstance(ProofOfDeliveryDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ProofOfDeliveryDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ProofOfDeliveryDate
        self.ProofOfDeliveryDate = initvalue_
        self.ProofOfDeliveryDate_nsprefix_ = None
        self.ProofOfDeliveryDayOfWeek = ProofOfDeliveryDayOfWeek
        self.validate_DayOfWeekType(self.ProofOfDeliveryDayOfWeek)
        self.ProofOfDeliveryDayOfWeek_nsprefix_ = "ns"
        if CommitMessages is None:
            self.CommitMessages = []
        else:
            self.CommitMessages = CommitMessages
        self.CommitMessages_nsprefix_ = "ns"
        if DeliveryMessages is None:
            self.DeliveryMessages = []
        else:
            self.DeliveryMessages = DeliveryMessages
        self.DeliveryMessages_nsprefix_ = None
        if DelayDetails is None:
            self.DelayDetails = []
        else:
            self.DelayDetails = DelayDetails
        self.DelayDetails_nsprefix_ = "ns"
        self.DocumentContent = DocumentContent
        self.validate_InternationalDocumentContentType(self.DocumentContent)
        self.DocumentContent_nsprefix_ = "ns"
        if RequiredDocuments is None:
            self.RequiredDocuments = []
        else:
            self.RequiredDocuments = RequiredDocuments
        self.RequiredDocuments_nsprefix_ = "ns"
        self.FreightCommitDetail = FreightCommitDetail
        self.FreightCommitDetail_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CommitDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CommitDetail.subclass:
            return CommitDetail.subclass(*args_, **kwargs_)
        else:
            return CommitDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CommodityName(self):
        return self.CommodityName
    def set_CommodityName(self, CommodityName):
        self.CommodityName = CommodityName
    def get_ServiceType(self):
        return self.ServiceType
    def set_ServiceType(self, ServiceType):
        self.ServiceType = ServiceType
    def get_ServiceDescription(self):
        return self.ServiceDescription
    def set_ServiceDescription(self, ServiceDescription):
        self.ServiceDescription = ServiceDescription
    def get_AppliedOptions(self):
        return self.AppliedOptions
    def set_AppliedOptions(self, AppliedOptions):
        self.AppliedOptions = AppliedOptions
    def add_AppliedOptions(self, value):
        self.AppliedOptions.append(value)
    def insert_AppliedOptions_at(self, index, value):
        self.AppliedOptions.insert(index, value)
    def replace_AppliedOptions_at(self, index, value):
        self.AppliedOptions[index] = value
    def get_AppliedSubOptions(self):
        return self.AppliedSubOptions
    def set_AppliedSubOptions(self, AppliedSubOptions):
        self.AppliedSubOptions = AppliedSubOptions
    def get_DerivedShipmentSignatureOption(self):
        return self.DerivedShipmentSignatureOption
    def set_DerivedShipmentSignatureOption(self, DerivedShipmentSignatureOption):
        self.DerivedShipmentSignatureOption = DerivedShipmentSignatureOption
    def get_DerivedPackageSignatureOptions(self):
        return self.DerivedPackageSignatureOptions
    def set_DerivedPackageSignatureOptions(self, DerivedPackageSignatureOptions):
        self.DerivedPackageSignatureOptions = DerivedPackageSignatureOptions
    def add_DerivedPackageSignatureOptions(self, value):
        self.DerivedPackageSignatureOptions.append(value)
    def insert_DerivedPackageSignatureOptions_at(self, index, value):
        self.DerivedPackageSignatureOptions.insert(index, value)
    def replace_DerivedPackageSignatureOptions_at(self, index, value):
        self.DerivedPackageSignatureOptions[index] = value
    def get_DerivedOriginDetail(self):
        return self.DerivedOriginDetail
    def set_DerivedOriginDetail(self, DerivedOriginDetail):
        self.DerivedOriginDetail = DerivedOriginDetail
    def get_DerivedDestinationDetail(self):
        return self.DerivedDestinationDetail
    def set_DerivedDestinationDetail(self, DerivedDestinationDetail):
        self.DerivedDestinationDetail = DerivedDestinationDetail
    def get_CommitTimestamp(self):
        return self.CommitTimestamp
    def set_CommitTimestamp(self, CommitTimestamp):
        self.CommitTimestamp = CommitTimestamp
    def get_DayOfWeek(self):
        return self.DayOfWeek
    def set_DayOfWeek(self, DayOfWeek):
        self.DayOfWeek = DayOfWeek
    def get_TransitTime(self):
        return self.TransitTime
    def set_TransitTime(self, TransitTime):
        self.TransitTime = TransitTime
    def get_MaximumTransitTime(self):
        return self.MaximumTransitTime
    def set_MaximumTransitTime(self, MaximumTransitTime):
        self.MaximumTransitTime = MaximumTransitTime
    def get_DestinationServiceArea(self):
        return self.DestinationServiceArea
    def set_DestinationServiceArea(self, DestinationServiceArea):
        self.DestinationServiceArea = DestinationServiceArea
    def get_BrokerAddress(self):
        return self.BrokerAddress
    def set_BrokerAddress(self, BrokerAddress):
        self.BrokerAddress = BrokerAddress
    def get_BrokerLocationId(self):
        return self.BrokerLocationId
    def set_BrokerLocationId(self, BrokerLocationId):
        self.BrokerLocationId = BrokerLocationId
    def get_BrokerCommitTimestamp(self):
        return self.BrokerCommitTimestamp
    def set_BrokerCommitTimestamp(self, BrokerCommitTimestamp):
        self.BrokerCommitTimestamp = BrokerCommitTimestamp
    def get_BrokerCommitDayOfWeek(self):
        return self.BrokerCommitDayOfWeek
    def set_BrokerCommitDayOfWeek(self, BrokerCommitDayOfWeek):
        self.BrokerCommitDayOfWeek = BrokerCommitDayOfWeek
    def get_BrokerToDestinationDays(self):
        return self.BrokerToDestinationDays
    def set_BrokerToDestinationDays(self, BrokerToDestinationDays):
        self.BrokerToDestinationDays = BrokerToDestinationDays
    def get_ProofOfDeliveryDate(self):
        return self.ProofOfDeliveryDate
    def set_ProofOfDeliveryDate(self, ProofOfDeliveryDate):
        self.ProofOfDeliveryDate = ProofOfDeliveryDate
    def get_ProofOfDeliveryDayOfWeek(self):
        return self.ProofOfDeliveryDayOfWeek
    def set_ProofOfDeliveryDayOfWeek(self, ProofOfDeliveryDayOfWeek):
        self.ProofOfDeliveryDayOfWeek = ProofOfDeliveryDayOfWeek
    def get_CommitMessages(self):
        return self.CommitMessages
    def set_CommitMessages(self, CommitMessages):
        self.CommitMessages = CommitMessages
    def add_CommitMessages(self, value):
        self.CommitMessages.append(value)
    def insert_CommitMessages_at(self, index, value):
        self.CommitMessages.insert(index, value)
    def replace_CommitMessages_at(self, index, value):
        self.CommitMessages[index] = value
    def get_DeliveryMessages(self):
        return self.DeliveryMessages
    def set_DeliveryMessages(self, DeliveryMessages):
        self.DeliveryMessages = DeliveryMessages
    def add_DeliveryMessages(self, value):
        self.DeliveryMessages.append(value)
    def insert_DeliveryMessages_at(self, index, value):
        self.DeliveryMessages.insert(index, value)
    def replace_DeliveryMessages_at(self, index, value):
        self.DeliveryMessages[index] = value
    def get_DelayDetails(self):
        return self.DelayDetails
    def set_DelayDetails(self, DelayDetails):
        self.DelayDetails = DelayDetails
    def add_DelayDetails(self, value):
        self.DelayDetails.append(value)
    def insert_DelayDetails_at(self, index, value):
        self.DelayDetails.insert(index, value)
    def replace_DelayDetails_at(self, index, value):
        self.DelayDetails[index] = value
    def get_DocumentContent(self):
        return self.DocumentContent
    def set_DocumentContent(self, DocumentContent):
        self.DocumentContent = DocumentContent
    def get_RequiredDocuments(self):
        return self.RequiredDocuments
    def set_RequiredDocuments(self, RequiredDocuments):
        self.RequiredDocuments = RequiredDocuments
    def add_RequiredDocuments(self, value):
        self.RequiredDocuments.append(value)
    def insert_RequiredDocuments_at(self, index, value):
        self.RequiredDocuments.insert(index, value)
    def replace_RequiredDocuments_at(self, index, value):
        self.RequiredDocuments[index] = value
    def get_FreightCommitDetail(self):
        return self.FreightCommitDetail
    def set_FreightCommitDetail(self, FreightCommitDetail):
        self.FreightCommitDetail = FreightCommitDetail
    def validate_ServiceOptionType(self, value):
        result = True
        # Validate type ServiceOptionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FEDEX_ONE_RATE', 'FREIGHT_GUARANTEE', 'SATURDAY_DELIVERY', 'SMART_POST_ALLOWED_INDICIA', 'SMART_POST_HUB_ID']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ServiceOptionType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_DayOfWeekType(self, value):
        result = True
        # Validate type DayOfWeekType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FRI', 'MON', 'SAT', 'SUN', 'THU', 'TUE', 'WED']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on DayOfWeekType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_TransitTimeType(self, value):
        result = True
        # Validate type TransitTimeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['EIGHTEEN_DAYS', 'EIGHT_DAYS', 'ELEVEN_DAYS', 'FIFTEEN_DAYS', 'FIVE_DAYS', 'FOURTEEN_DAYS', 'FOUR_DAYS', 'NINETEEN_DAYS', 'NINE_DAYS', 'ONE_DAY', 'SEVENTEEN_DAYS', 'SEVEN_DAYS', 'SIXTEEN_DAYS', 'SIX_DAYS', 'TEN_DAYS', 'THIRTEEN_DAYS', 'THREE_DAYS', 'TWELVE_DAYS', 'TWENTY_DAYS', 'TWO_DAYS', 'UNKNOWN']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on TransitTimeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_InternationalDocumentContentType(self, value):
        result = True
        # Validate type InternationalDocumentContentType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['DERIVED', 'DOCUMENTS_ONLY', 'NON_DOCUMENTS']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on InternationalDocumentContentType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_RequiredShippingDocumentType(self, value):
        result = True
        # Validate type RequiredShippingDocumentType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CANADIAN_B13A', 'CERTIFICATE_OF_ORIGIN', 'COMMERCIAL_INVOICE', 'INTERNATIONAL_AIRWAY_BILL', 'MAIL_SERVICE_AIRWAY_BILL', 'SHIPPERS_EXPORT_DECLARATION']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on RequiredShippingDocumentType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.CommodityName is not None or
            self.ServiceType is not None or
            self.ServiceDescription is not None or
            self.AppliedOptions or
            self.AppliedSubOptions is not None or
            self.DerivedShipmentSignatureOption is not None or
            self.DerivedPackageSignatureOptions or
            self.DerivedOriginDetail is not None or
            self.DerivedDestinationDetail is not None or
            self.CommitTimestamp is not None or
            self.DayOfWeek is not None or
            self.TransitTime is not None or
            self.MaximumTransitTime is not None or
            self.DestinationServiceArea is not None or
            self.BrokerAddress is not None or
            self.BrokerLocationId is not None or
            self.BrokerCommitTimestamp is not None or
            self.BrokerCommitDayOfWeek is not None or
            self.BrokerToDestinationDays is not None or
            self.ProofOfDeliveryDate is not None or
            self.ProofOfDeliveryDayOfWeek is not None or
            self.CommitMessages or
            self.DeliveryMessages or
            self.DelayDetails or
            self.DocumentContent is not None or
            self.RequiredDocuments or
            self.FreightCommitDetail is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CommitDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CommitDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CommitDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CommitDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CommitDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CommitDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CommitDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CommodityName is not None:
            namespaceprefix_ = self.CommodityName_nsprefix_ + ':' if (UseCapturedNS_ and self.CommodityName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCommodityName>%s</%sCommodityName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CommodityName), input_name='CommodityName')), namespaceprefix_ , eol_))
        if self.ServiceType is not None:
            namespaceprefix_ = self.ServiceType_nsprefix_ + ':' if (UseCapturedNS_ and self.ServiceType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sServiceType>%s</%sServiceType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ServiceType), input_name='ServiceType')), namespaceprefix_ , eol_))
        if self.ServiceDescription is not None:
            namespaceprefix_ = self.ServiceDescription_nsprefix_ + ':' if (UseCapturedNS_ and self.ServiceDescription_nsprefix_) else ''
            self.ServiceDescription.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ServiceDescription', pretty_print=pretty_print)
        for AppliedOptions_ in self.AppliedOptions:
            namespaceprefix_ = self.AppliedOptions_nsprefix_ + ':' if (UseCapturedNS_ and self.AppliedOptions_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAppliedOptions>%s</%sAppliedOptions>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(AppliedOptions_), input_name='AppliedOptions')), namespaceprefix_ , eol_))
        if self.AppliedSubOptions is not None:
            namespaceprefix_ = self.AppliedSubOptions_nsprefix_ + ':' if (UseCapturedNS_ and self.AppliedSubOptions_nsprefix_) else ''
            self.AppliedSubOptions.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AppliedSubOptions', pretty_print=pretty_print)
        if self.DerivedShipmentSignatureOption is not None:
            namespaceprefix_ = self.DerivedShipmentSignatureOption_nsprefix_ + ':' if (UseCapturedNS_ and self.DerivedShipmentSignatureOption_nsprefix_) else ''
            self.DerivedShipmentSignatureOption.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DerivedShipmentSignatureOption', pretty_print=pretty_print)
        for DerivedPackageSignatureOptions_ in self.DerivedPackageSignatureOptions:
            namespaceprefix_ = self.DerivedPackageSignatureOptions_nsprefix_ + ':' if (UseCapturedNS_ and self.DerivedPackageSignatureOptions_nsprefix_) else ''
            DerivedPackageSignatureOptions_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DerivedPackageSignatureOptions', pretty_print=pretty_print)
        if self.DerivedOriginDetail is not None:
            namespaceprefix_ = self.DerivedOriginDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.DerivedOriginDetail_nsprefix_) else ''
            self.DerivedOriginDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DerivedOriginDetail', pretty_print=pretty_print)
        if self.DerivedDestinationDetail is not None:
            namespaceprefix_ = self.DerivedDestinationDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.DerivedDestinationDetail_nsprefix_) else ''
            self.DerivedDestinationDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DerivedDestinationDetail', pretty_print=pretty_print)
        if self.CommitTimestamp is not None:
            namespaceprefix_ = self.CommitTimestamp_nsprefix_ + ':' if (UseCapturedNS_ and self.CommitTimestamp_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCommitTimestamp>%s</%sCommitTimestamp>%s' % (namespaceprefix_ , self.gds_format_datetime(self.CommitTimestamp, input_name='CommitTimestamp'), namespaceprefix_ , eol_))
        if self.DayOfWeek is not None:
            namespaceprefix_ = self.DayOfWeek_nsprefix_ + ':' if (UseCapturedNS_ and self.DayOfWeek_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDayOfWeek>%s</%sDayOfWeek>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DayOfWeek), input_name='DayOfWeek')), namespaceprefix_ , eol_))
        if self.TransitTime is not None:
            namespaceprefix_ = self.TransitTime_nsprefix_ + ':' if (UseCapturedNS_ and self.TransitTime_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransitTime>%s</%sTransitTime>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TransitTime), input_name='TransitTime')), namespaceprefix_ , eol_))
        if self.MaximumTransitTime is not None:
            namespaceprefix_ = self.MaximumTransitTime_nsprefix_ + ':' if (UseCapturedNS_ and self.MaximumTransitTime_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMaximumTransitTime>%s</%sMaximumTransitTime>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MaximumTransitTime), input_name='MaximumTransitTime')), namespaceprefix_ , eol_))
        if self.DestinationServiceArea is not None:
            namespaceprefix_ = self.DestinationServiceArea_nsprefix_ + ':' if (UseCapturedNS_ and self.DestinationServiceArea_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDestinationServiceArea>%s</%sDestinationServiceArea>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DestinationServiceArea), input_name='DestinationServiceArea')), namespaceprefix_ , eol_))
        if self.BrokerAddress is not None:
            namespaceprefix_ = self.BrokerAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.BrokerAddress_nsprefix_) else ''
            self.BrokerAddress.export(outfile, level, namespaceprefix_, namespacedef_='', name_='BrokerAddress', pretty_print=pretty_print)
        if self.BrokerLocationId is not None:
            namespaceprefix_ = self.BrokerLocationId_nsprefix_ + ':' if (UseCapturedNS_ and self.BrokerLocationId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBrokerLocationId>%s</%sBrokerLocationId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BrokerLocationId), input_name='BrokerLocationId')), namespaceprefix_ , eol_))
        if self.BrokerCommitTimestamp is not None:
            namespaceprefix_ = self.BrokerCommitTimestamp_nsprefix_ + ':' if (UseCapturedNS_ and self.BrokerCommitTimestamp_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBrokerCommitTimestamp>%s</%sBrokerCommitTimestamp>%s' % (namespaceprefix_ , self.gds_format_datetime(self.BrokerCommitTimestamp, input_name='BrokerCommitTimestamp'), namespaceprefix_ , eol_))
        if self.BrokerCommitDayOfWeek is not None:
            namespaceprefix_ = self.BrokerCommitDayOfWeek_nsprefix_ + ':' if (UseCapturedNS_ and self.BrokerCommitDayOfWeek_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBrokerCommitDayOfWeek>%s</%sBrokerCommitDayOfWeek>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BrokerCommitDayOfWeek), input_name='BrokerCommitDayOfWeek')), namespaceprefix_ , eol_))
        if self.BrokerToDestinationDays is not None:
            namespaceprefix_ = self.BrokerToDestinationDays_nsprefix_ + ':' if (UseCapturedNS_ and self.BrokerToDestinationDays_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBrokerToDestinationDays>%s</%sBrokerToDestinationDays>%s' % (namespaceprefix_ , self.gds_format_integer(self.BrokerToDestinationDays, input_name='BrokerToDestinationDays'), namespaceprefix_ , eol_))
        if self.ProofOfDeliveryDate is not None:
            namespaceprefix_ = self.ProofOfDeliveryDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ProofOfDeliveryDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProofOfDeliveryDate>%s</%sProofOfDeliveryDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ProofOfDeliveryDate, input_name='ProofOfDeliveryDate'), namespaceprefix_ , eol_))
        if self.ProofOfDeliveryDayOfWeek is not None:
            namespaceprefix_ = self.ProofOfDeliveryDayOfWeek_nsprefix_ + ':' if (UseCapturedNS_ and self.ProofOfDeliveryDayOfWeek_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProofOfDeliveryDayOfWeek>%s</%sProofOfDeliveryDayOfWeek>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ProofOfDeliveryDayOfWeek), input_name='ProofOfDeliveryDayOfWeek')), namespaceprefix_ , eol_))
        for CommitMessages_ in self.CommitMessages:
            namespaceprefix_ = self.CommitMessages_nsprefix_ + ':' if (UseCapturedNS_ and self.CommitMessages_nsprefix_) else ''
            CommitMessages_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CommitMessages', pretty_print=pretty_print)
        for DeliveryMessages_ in self.DeliveryMessages:
            namespaceprefix_ = self.DeliveryMessages_nsprefix_ + ':' if (UseCapturedNS_ and self.DeliveryMessages_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDeliveryMessages>%s</%sDeliveryMessages>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(DeliveryMessages_), input_name='DeliveryMessages')), namespaceprefix_ , eol_))
        for DelayDetails_ in self.DelayDetails:
            namespaceprefix_ = self.DelayDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.DelayDetails_nsprefix_) else ''
            DelayDetails_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DelayDetails', pretty_print=pretty_print)
        if self.DocumentContent is not None:
            namespaceprefix_ = self.DocumentContent_nsprefix_ + ':' if (UseCapturedNS_ and self.DocumentContent_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocumentContent>%s</%sDocumentContent>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DocumentContent), input_name='DocumentContent')), namespaceprefix_ , eol_))
        for RequiredDocuments_ in self.RequiredDocuments:
            namespaceprefix_ = self.RequiredDocuments_nsprefix_ + ':' if (UseCapturedNS_ and self.RequiredDocuments_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRequiredDocuments>%s</%sRequiredDocuments>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(RequiredDocuments_), input_name='RequiredDocuments')), namespaceprefix_ , eol_))
        if self.FreightCommitDetail is not None:
            namespaceprefix_ = self.FreightCommitDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.FreightCommitDetail_nsprefix_) else ''
            self.FreightCommitDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FreightCommitDetail', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CommodityName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CommodityName')
            value_ = self.gds_validate_string(value_, node, 'CommodityName')
            self.CommodityName = value_
            self.CommodityName_nsprefix_ = child_.prefix
        elif nodeName_ == 'ServiceType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ServiceType')
            value_ = self.gds_validate_string(value_, node, 'ServiceType')
            self.ServiceType = value_
            self.ServiceType_nsprefix_ = child_.prefix
        elif nodeName_ == 'ServiceDescription':
            obj_ = ServiceDescription.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ServiceDescription = obj_
            obj_.original_tagname_ = 'ServiceDescription'
        elif nodeName_ == 'AppliedOptions':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AppliedOptions')
            value_ = self.gds_validate_string(value_, node, 'AppliedOptions')
            self.AppliedOptions.append(value_)
            self.AppliedOptions_nsprefix_ = child_.prefix
            # validate type ServiceOptionType
            self.validate_ServiceOptionType(self.AppliedOptions[-1])
        elif nodeName_ == 'AppliedSubOptions':
            obj_ = ServiceSubOptionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AppliedSubOptions = obj_
            obj_.original_tagname_ = 'AppliedSubOptions'
        elif nodeName_ == 'DerivedShipmentSignatureOption':
            obj_ = SignatureOptionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DerivedShipmentSignatureOption = obj_
            obj_.original_tagname_ = 'DerivedShipmentSignatureOption'
        elif nodeName_ == 'DerivedPackageSignatureOptions':
            obj_ = SignatureOptionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DerivedPackageSignatureOptions.append(obj_)
            obj_.original_tagname_ = 'DerivedPackageSignatureOptions'
        elif nodeName_ == 'DerivedOriginDetail':
            obj_ = CleansedAddressAndLocationDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DerivedOriginDetail = obj_
            obj_.original_tagname_ = 'DerivedOriginDetail'
        elif nodeName_ == 'DerivedDestinationDetail':
            obj_ = CleansedAddressAndLocationDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DerivedDestinationDetail = obj_
            obj_.original_tagname_ = 'DerivedDestinationDetail'
        elif nodeName_ == 'CommitTimestamp':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.CommitTimestamp = dval_
            self.CommitTimestamp_nsprefix_ = child_.prefix
        elif nodeName_ == 'DayOfWeek':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DayOfWeek')
            value_ = self.gds_validate_string(value_, node, 'DayOfWeek')
            self.DayOfWeek = value_
            self.DayOfWeek_nsprefix_ = child_.prefix
            # validate type DayOfWeekType
            self.validate_DayOfWeekType(self.DayOfWeek)
        elif nodeName_ == 'TransitTime':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TransitTime')
            value_ = self.gds_validate_string(value_, node, 'TransitTime')
            self.TransitTime = value_
            self.TransitTime_nsprefix_ = child_.prefix
            # validate type TransitTimeType
            self.validate_TransitTimeType(self.TransitTime)
        elif nodeName_ == 'MaximumTransitTime':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MaximumTransitTime')
            value_ = self.gds_validate_string(value_, node, 'MaximumTransitTime')
            self.MaximumTransitTime = value_
            self.MaximumTransitTime_nsprefix_ = child_.prefix
            # validate type TransitTimeType
            self.validate_TransitTimeType(self.MaximumTransitTime)
        elif nodeName_ == 'DestinationServiceArea':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DestinationServiceArea')
            value_ = self.gds_validate_string(value_, node, 'DestinationServiceArea')
            self.DestinationServiceArea = value_
            self.DestinationServiceArea_nsprefix_ = child_.prefix
        elif nodeName_ == 'BrokerAddress':
            obj_ = Address.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.BrokerAddress = obj_
            obj_.original_tagname_ = 'BrokerAddress'
        elif nodeName_ == 'BrokerLocationId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'BrokerLocationId')
            value_ = self.gds_validate_string(value_, node, 'BrokerLocationId')
            self.BrokerLocationId = value_
            self.BrokerLocationId_nsprefix_ = child_.prefix
        elif nodeName_ == 'BrokerCommitTimestamp':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.BrokerCommitTimestamp = dval_
            self.BrokerCommitTimestamp_nsprefix_ = child_.prefix
        elif nodeName_ == 'BrokerCommitDayOfWeek':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'BrokerCommitDayOfWeek')
            value_ = self.gds_validate_string(value_, node, 'BrokerCommitDayOfWeek')
            self.BrokerCommitDayOfWeek = value_
            self.BrokerCommitDayOfWeek_nsprefix_ = child_.prefix
            # validate type DayOfWeekType
            self.validate_DayOfWeekType(self.BrokerCommitDayOfWeek)
        elif nodeName_ == 'BrokerToDestinationDays' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'BrokerToDestinationDays')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'BrokerToDestinationDays')
            self.BrokerToDestinationDays = ival_
            self.BrokerToDestinationDays_nsprefix_ = child_.prefix
        elif nodeName_ == 'ProofOfDeliveryDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ProofOfDeliveryDate = dval_
            self.ProofOfDeliveryDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'ProofOfDeliveryDayOfWeek':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ProofOfDeliveryDayOfWeek')
            value_ = self.gds_validate_string(value_, node, 'ProofOfDeliveryDayOfWeek')
            self.ProofOfDeliveryDayOfWeek = value_
            self.ProofOfDeliveryDayOfWeek_nsprefix_ = child_.prefix
            # validate type DayOfWeekType
            self.validate_DayOfWeekType(self.ProofOfDeliveryDayOfWeek)
        elif nodeName_ == 'CommitMessages':
            obj_ = Notification.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CommitMessages.append(obj_)
            obj_.original_tagname_ = 'CommitMessages'
        elif nodeName_ == 'DeliveryMessages':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DeliveryMessages')
            value_ = self.gds_validate_string(value_, node, 'DeliveryMessages')
            self.DeliveryMessages.append(value_)
            self.DeliveryMessages_nsprefix_ = child_.prefix
        elif nodeName_ == 'DelayDetails':
            obj_ = DelayDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DelayDetails.append(obj_)
            obj_.original_tagname_ = 'DelayDetails'
        elif nodeName_ == 'DocumentContent':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DocumentContent')
            value_ = self.gds_validate_string(value_, node, 'DocumentContent')
            self.DocumentContent = value_
            self.DocumentContent_nsprefix_ = child_.prefix
            # validate type InternationalDocumentContentType
            self.validate_InternationalDocumentContentType(self.DocumentContent)
        elif nodeName_ == 'RequiredDocuments':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RequiredDocuments')
            value_ = self.gds_validate_string(value_, node, 'RequiredDocuments')
            self.RequiredDocuments.append(value_)
            self.RequiredDocuments_nsprefix_ = child_.prefix
            # validate type RequiredShippingDocumentType
            self.validate_RequiredShippingDocumentType(self.RequiredDocuments[-1])
        elif nodeName_ == 'FreightCommitDetail':
            obj_ = FreightCommitDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FreightCommitDetail = obj_
            obj_.original_tagname_ = 'FreightCommitDetail'
# end class CommitDetail


class Commodity(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CommodityId=None, Name=None, NumberOfPieces=None, Description=None, Purpose=None, CountryOfManufacture=None, HarmonizedCode=None, Weight=None, Quantity=None, QuantityUnits=None, AdditionalMeasures=None, UnitPrice=None, CustomsValue=None, ExciseConditions=None, ExportLicenseNumber=None, ExportLicenseExpirationDate=None, CIMarksAndNumbers=None, PartNumber=None, NaftaDetail=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.CommodityId = CommodityId
        self.CommodityId_nsprefix_ = None
        self.Name = Name
        self.Name_nsprefix_ = None
        self.NumberOfPieces = NumberOfPieces
        self.NumberOfPieces_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
        self.Purpose = Purpose
        self.validate_CommodityPurposeType(self.Purpose)
        self.Purpose_nsprefix_ = "ns"
        self.CountryOfManufacture = CountryOfManufacture
        self.CountryOfManufacture_nsprefix_ = None
        self.HarmonizedCode = HarmonizedCode
        self.HarmonizedCode_nsprefix_ = None
        self.Weight = Weight
        self.Weight_nsprefix_ = "ns"
        self.Quantity = Quantity
        self.Quantity_nsprefix_ = None
        self.QuantityUnits = QuantityUnits
        self.QuantityUnits_nsprefix_ = None
        if AdditionalMeasures is None:
            self.AdditionalMeasures = []
        else:
            self.AdditionalMeasures = AdditionalMeasures
        self.AdditionalMeasures_nsprefix_ = "ns"
        self.UnitPrice = UnitPrice
        self.UnitPrice_nsprefix_ = "ns"
        self.CustomsValue = CustomsValue
        self.CustomsValue_nsprefix_ = "ns"
        if ExciseConditions is None:
            self.ExciseConditions = []
        else:
            self.ExciseConditions = ExciseConditions
        self.ExciseConditions_nsprefix_ = "ns"
        self.ExportLicenseNumber = ExportLicenseNumber
        self.ExportLicenseNumber_nsprefix_ = None
        if isinstance(ExportLicenseExpirationDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ExportLicenseExpirationDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ExportLicenseExpirationDate
        self.ExportLicenseExpirationDate = initvalue_
        self.ExportLicenseExpirationDate_nsprefix_ = None
        self.CIMarksAndNumbers = CIMarksAndNumbers
        self.CIMarksAndNumbers_nsprefix_ = None
        self.PartNumber = PartNumber
        self.PartNumber_nsprefix_ = None
        self.NaftaDetail = NaftaDetail
        self.NaftaDetail_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Commodity)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Commodity.subclass:
            return Commodity.subclass(*args_, **kwargs_)
        else:
            return Commodity(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CommodityId(self):
        return self.CommodityId
    def set_CommodityId(self, CommodityId):
        self.CommodityId = CommodityId
    def get_Name(self):
        return self.Name
    def set_Name(self, Name):
        self.Name = Name
    def get_NumberOfPieces(self):
        return self.NumberOfPieces
    def set_NumberOfPieces(self, NumberOfPieces):
        self.NumberOfPieces = NumberOfPieces
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def get_Purpose(self):
        return self.Purpose
    def set_Purpose(self, Purpose):
        self.Purpose = Purpose
    def get_CountryOfManufacture(self):
        return self.CountryOfManufacture
    def set_CountryOfManufacture(self, CountryOfManufacture):
        self.CountryOfManufacture = CountryOfManufacture
    def get_HarmonizedCode(self):
        return self.HarmonizedCode
    def set_HarmonizedCode(self, HarmonizedCode):
        self.HarmonizedCode = HarmonizedCode
    def get_Weight(self):
        return self.Weight
    def set_Weight(self, Weight):
        self.Weight = Weight
    def get_Quantity(self):
        return self.Quantity
    def set_Quantity(self, Quantity):
        self.Quantity = Quantity
    def get_QuantityUnits(self):
        return self.QuantityUnits
    def set_QuantityUnits(self, QuantityUnits):
        self.QuantityUnits = QuantityUnits
    def get_AdditionalMeasures(self):
        return self.AdditionalMeasures
    def set_AdditionalMeasures(self, AdditionalMeasures):
        self.AdditionalMeasures = AdditionalMeasures
    def add_AdditionalMeasures(self, value):
        self.AdditionalMeasures.append(value)
    def insert_AdditionalMeasures_at(self, index, value):
        self.AdditionalMeasures.insert(index, value)
    def replace_AdditionalMeasures_at(self, index, value):
        self.AdditionalMeasures[index] = value
    def get_UnitPrice(self):
        return self.UnitPrice
    def set_UnitPrice(self, UnitPrice):
        self.UnitPrice = UnitPrice
    def get_CustomsValue(self):
        return self.CustomsValue
    def set_CustomsValue(self, CustomsValue):
        self.CustomsValue = CustomsValue
    def get_ExciseConditions(self):
        return self.ExciseConditions
    def set_ExciseConditions(self, ExciseConditions):
        self.ExciseConditions = ExciseConditions
    def add_ExciseConditions(self, value):
        self.ExciseConditions.append(value)
    def insert_ExciseConditions_at(self, index, value):
        self.ExciseConditions.insert(index, value)
    def replace_ExciseConditions_at(self, index, value):
        self.ExciseConditions[index] = value
    def get_ExportLicenseNumber(self):
        return self.ExportLicenseNumber
    def set_ExportLicenseNumber(self, ExportLicenseNumber):
        self.ExportLicenseNumber = ExportLicenseNumber
    def get_ExportLicenseExpirationDate(self):
        return self.ExportLicenseExpirationDate
    def set_ExportLicenseExpirationDate(self, ExportLicenseExpirationDate):
        self.ExportLicenseExpirationDate = ExportLicenseExpirationDate
    def get_CIMarksAndNumbers(self):
        return self.CIMarksAndNumbers
    def set_CIMarksAndNumbers(self, CIMarksAndNumbers):
        self.CIMarksAndNumbers = CIMarksAndNumbers
    def get_PartNumber(self):
        return self.PartNumber
    def set_PartNumber(self, PartNumber):
        self.PartNumber = PartNumber
    def get_NaftaDetail(self):
        return self.NaftaDetail
    def set_NaftaDetail(self, NaftaDetail):
        self.NaftaDetail = NaftaDetail
    def validate_CommodityPurposeType(self, value):
        result = True
        # Validate type CommodityPurposeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BUSINESS', 'CONSUMER']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CommodityPurposeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.CommodityId is not None or
            self.Name is not None or
            self.NumberOfPieces is not None or
            self.Description is not None or
            self.Purpose is not None or
            self.CountryOfManufacture is not None or
            self.HarmonizedCode is not None or
            self.Weight is not None or
            self.Quantity is not None or
            self.QuantityUnits is not None or
            self.AdditionalMeasures or
            self.UnitPrice is not None or
            self.CustomsValue is not None or
            self.ExciseConditions or
            self.ExportLicenseNumber is not None or
            self.ExportLicenseExpirationDate is not None or
            self.CIMarksAndNumbers is not None or
            self.PartNumber is not None or
            self.NaftaDetail is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Commodity', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Commodity')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Commodity':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Commodity')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Commodity', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Commodity'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Commodity', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CommodityId is not None:
            namespaceprefix_ = self.CommodityId_nsprefix_ + ':' if (UseCapturedNS_ and self.CommodityId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCommodityId>%s</%sCommodityId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CommodityId), input_name='CommodityId')), namespaceprefix_ , eol_))
        if self.Name is not None:
            namespaceprefix_ = self.Name_nsprefix_ + ':' if (UseCapturedNS_ and self.Name_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sName>%s</%sName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), namespaceprefix_ , eol_))
        if self.NumberOfPieces is not None:
            namespaceprefix_ = self.NumberOfPieces_nsprefix_ + ':' if (UseCapturedNS_ and self.NumberOfPieces_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumberOfPieces>%s</%sNumberOfPieces>%s' % (namespaceprefix_ , self.gds_format_integer(self.NumberOfPieces, input_name='NumberOfPieces'), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
        if self.Purpose is not None:
            namespaceprefix_ = self.Purpose_nsprefix_ + ':' if (UseCapturedNS_ and self.Purpose_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPurpose>%s</%sPurpose>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Purpose), input_name='Purpose')), namespaceprefix_ , eol_))
        if self.CountryOfManufacture is not None:
            namespaceprefix_ = self.CountryOfManufacture_nsprefix_ + ':' if (UseCapturedNS_ and self.CountryOfManufacture_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountryOfManufacture>%s</%sCountryOfManufacture>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CountryOfManufacture), input_name='CountryOfManufacture')), namespaceprefix_ , eol_))
        if self.HarmonizedCode is not None:
            namespaceprefix_ = self.HarmonizedCode_nsprefix_ + ':' if (UseCapturedNS_ and self.HarmonizedCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHarmonizedCode>%s</%sHarmonizedCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.HarmonizedCode), input_name='HarmonizedCode')), namespaceprefix_ , eol_))
        if self.Weight is not None:
            namespaceprefix_ = self.Weight_nsprefix_ + ':' if (UseCapturedNS_ and self.Weight_nsprefix_) else ''
            self.Weight.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Weight', pretty_print=pretty_print)
        if self.Quantity is not None:
            namespaceprefix_ = self.Quantity_nsprefix_ + ':' if (UseCapturedNS_ and self.Quantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity>%s</%sQuantity>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Quantity, input_name='Quantity'), namespaceprefix_ , eol_))
        if self.QuantityUnits is not None:
            namespaceprefix_ = self.QuantityUnits_nsprefix_ + ':' if (UseCapturedNS_ and self.QuantityUnits_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantityUnits>%s</%sQuantityUnits>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.QuantityUnits), input_name='QuantityUnits')), namespaceprefix_ , eol_))
        for AdditionalMeasures_ in self.AdditionalMeasures:
            namespaceprefix_ = self.AdditionalMeasures_nsprefix_ + ':' if (UseCapturedNS_ and self.AdditionalMeasures_nsprefix_) else ''
            AdditionalMeasures_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AdditionalMeasures', pretty_print=pretty_print)
        if self.UnitPrice is not None:
            namespaceprefix_ = self.UnitPrice_nsprefix_ + ':' if (UseCapturedNS_ and self.UnitPrice_nsprefix_) else ''
            self.UnitPrice.export(outfile, level, namespaceprefix_, namespacedef_='', name_='UnitPrice', pretty_print=pretty_print)
        if self.CustomsValue is not None:
            namespaceprefix_ = self.CustomsValue_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomsValue_nsprefix_) else ''
            self.CustomsValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CustomsValue', pretty_print=pretty_print)
        for ExciseConditions_ in self.ExciseConditions:
            namespaceprefix_ = self.ExciseConditions_nsprefix_ + ':' if (UseCapturedNS_ and self.ExciseConditions_nsprefix_) else ''
            ExciseConditions_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ExciseConditions', pretty_print=pretty_print)
        if self.ExportLicenseNumber is not None:
            namespaceprefix_ = self.ExportLicenseNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.ExportLicenseNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExportLicenseNumber>%s</%sExportLicenseNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ExportLicenseNumber), input_name='ExportLicenseNumber')), namespaceprefix_ , eol_))
        if self.ExportLicenseExpirationDate is not None:
            namespaceprefix_ = self.ExportLicenseExpirationDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ExportLicenseExpirationDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExportLicenseExpirationDate>%s</%sExportLicenseExpirationDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ExportLicenseExpirationDate, input_name='ExportLicenseExpirationDate'), namespaceprefix_ , eol_))
        if self.CIMarksAndNumbers is not None:
            namespaceprefix_ = self.CIMarksAndNumbers_nsprefix_ + ':' if (UseCapturedNS_ and self.CIMarksAndNumbers_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCIMarksAndNumbers>%s</%sCIMarksAndNumbers>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CIMarksAndNumbers), input_name='CIMarksAndNumbers')), namespaceprefix_ , eol_))
        if self.PartNumber is not None:
            namespaceprefix_ = self.PartNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.PartNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPartNumber>%s</%sPartNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PartNumber), input_name='PartNumber')), namespaceprefix_ , eol_))
        if self.NaftaDetail is not None:
            namespaceprefix_ = self.NaftaDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.NaftaDetail_nsprefix_) else ''
            self.NaftaDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='NaftaDetail', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CommodityId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CommodityId')
            value_ = self.gds_validate_string(value_, node, 'CommodityId')
            self.CommodityId = value_
            self.CommodityId_nsprefix_ = child_.prefix
        elif nodeName_ == 'Name':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Name')
            value_ = self.gds_validate_string(value_, node, 'Name')
            self.Name = value_
            self.Name_nsprefix_ = child_.prefix
        elif nodeName_ == 'NumberOfPieces' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'NumberOfPieces')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'NumberOfPieces')
            self.NumberOfPieces = ival_
            self.NumberOfPieces_nsprefix_ = child_.prefix
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
        elif nodeName_ == 'Purpose':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Purpose')
            value_ = self.gds_validate_string(value_, node, 'Purpose')
            self.Purpose = value_
            self.Purpose_nsprefix_ = child_.prefix
            # validate type CommodityPurposeType
            self.validate_CommodityPurposeType(self.Purpose)
        elif nodeName_ == 'CountryOfManufacture':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CountryOfManufacture')
            value_ = self.gds_validate_string(value_, node, 'CountryOfManufacture')
            self.CountryOfManufacture = value_
            self.CountryOfManufacture_nsprefix_ = child_.prefix
        elif nodeName_ == 'HarmonizedCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'HarmonizedCode')
            value_ = self.gds_validate_string(value_, node, 'HarmonizedCode')
            self.HarmonizedCode = value_
            self.HarmonizedCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'Weight':
            obj_ = Weight.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Weight = obj_
            obj_.original_tagname_ = 'Weight'
        elif nodeName_ == 'Quantity' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Quantity')
            fval_ = self.gds_validate_decimal(fval_, node, 'Quantity')
            self.Quantity = fval_
            self.Quantity_nsprefix_ = child_.prefix
        elif nodeName_ == 'QuantityUnits':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'QuantityUnits')
            value_ = self.gds_validate_string(value_, node, 'QuantityUnits')
            self.QuantityUnits = value_
            self.QuantityUnits_nsprefix_ = child_.prefix
        elif nodeName_ == 'AdditionalMeasures':
            obj_ = Measure.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AdditionalMeasures.append(obj_)
            obj_.original_tagname_ = 'AdditionalMeasures'
        elif nodeName_ == 'UnitPrice':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.UnitPrice = obj_
            obj_.original_tagname_ = 'UnitPrice'
        elif nodeName_ == 'CustomsValue':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CustomsValue = obj_
            obj_.original_tagname_ = 'CustomsValue'
        elif nodeName_ == 'ExciseConditions':
            obj_ = EdtExciseCondition.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ExciseConditions.append(obj_)
            obj_.original_tagname_ = 'ExciseConditions'
        elif nodeName_ == 'ExportLicenseNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ExportLicenseNumber')
            value_ = self.gds_validate_string(value_, node, 'ExportLicenseNumber')
            self.ExportLicenseNumber = value_
            self.ExportLicenseNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'ExportLicenseExpirationDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ExportLicenseExpirationDate = dval_
            self.ExportLicenseExpirationDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'CIMarksAndNumbers':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CIMarksAndNumbers')
            value_ = self.gds_validate_string(value_, node, 'CIMarksAndNumbers')
            self.CIMarksAndNumbers = value_
            self.CIMarksAndNumbers_nsprefix_ = child_.prefix
        elif nodeName_ == 'PartNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PartNumber')
            value_ = self.gds_validate_string(value_, node, 'PartNumber')
            self.PartNumber = value_
            self.PartNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'NaftaDetail':
            obj_ = NaftaCommodityDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.NaftaDetail = obj_
            obj_.original_tagname_ = 'NaftaDetail'
# end class Commodity


class ConfigurableLabelReferenceEntry(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ZoneNumber=None, Header=None, DataField=None, LiteralValue=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ZoneNumber = ZoneNumber
        self.ZoneNumber_nsprefix_ = None
        self.Header = Header
        self.Header_nsprefix_ = None
        self.DataField = DataField
        self.DataField_nsprefix_ = None
        self.LiteralValue = LiteralValue
        self.LiteralValue_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ConfigurableLabelReferenceEntry)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ConfigurableLabelReferenceEntry.subclass:
            return ConfigurableLabelReferenceEntry.subclass(*args_, **kwargs_)
        else:
            return ConfigurableLabelReferenceEntry(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ZoneNumber(self):
        return self.ZoneNumber
    def set_ZoneNumber(self, ZoneNumber):
        self.ZoneNumber = ZoneNumber
    def get_Header(self):
        return self.Header
    def set_Header(self, Header):
        self.Header = Header
    def get_DataField(self):
        return self.DataField
    def set_DataField(self, DataField):
        self.DataField = DataField
    def get_LiteralValue(self):
        return self.LiteralValue
    def set_LiteralValue(self, LiteralValue):
        self.LiteralValue = LiteralValue
    def hasContent_(self):
        if (
            self.ZoneNumber is not None or
            self.Header is not None or
            self.DataField is not None or
            self.LiteralValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ConfigurableLabelReferenceEntry', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ConfigurableLabelReferenceEntry')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ConfigurableLabelReferenceEntry':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ConfigurableLabelReferenceEntry')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ConfigurableLabelReferenceEntry', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ConfigurableLabelReferenceEntry'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ConfigurableLabelReferenceEntry', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ZoneNumber is not None:
            namespaceprefix_ = self.ZoneNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.ZoneNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sZoneNumber>%s</%sZoneNumber>%s' % (namespaceprefix_ , self.gds_format_integer(self.ZoneNumber, input_name='ZoneNumber'), namespaceprefix_ , eol_))
        if self.Header is not None:
            namespaceprefix_ = self.Header_nsprefix_ + ':' if (UseCapturedNS_ and self.Header_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHeader>%s</%sHeader>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Header), input_name='Header')), namespaceprefix_ , eol_))
        if self.DataField is not None:
            namespaceprefix_ = self.DataField_nsprefix_ + ':' if (UseCapturedNS_ and self.DataField_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDataField>%s</%sDataField>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DataField), input_name='DataField')), namespaceprefix_ , eol_))
        if self.LiteralValue is not None:
            namespaceprefix_ = self.LiteralValue_nsprefix_ + ':' if (UseCapturedNS_ and self.LiteralValue_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLiteralValue>%s</%sLiteralValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LiteralValue), input_name='LiteralValue')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ZoneNumber' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'ZoneNumber')
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'ZoneNumber')
            self.ZoneNumber = ival_
            self.ZoneNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'Header':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Header')
            value_ = self.gds_validate_string(value_, node, 'Header')
            self.Header = value_
            self.Header_nsprefix_ = child_.prefix
        elif nodeName_ == 'DataField':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DataField')
            value_ = self.gds_validate_string(value_, node, 'DataField')
            self.DataField = value_
            self.DataField_nsprefix_ = child_.prefix
        elif nodeName_ == 'LiteralValue':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LiteralValue')
            value_ = self.gds_validate_string(value_, node, 'LiteralValue')
            self.LiteralValue = value_
            self.LiteralValue_nsprefix_ = child_.prefix
# end class ConfigurableLabelReferenceEntry


class ConsolidationSpecialServicesRequested(GeneratedsSuper):
    """These special services are available at the consolidation level for some
    or all consolidation types. If the shipper is requesting a special
    service which requires additional data (such as the COD amount), the
    consolidation special service type must be present in the
    specialServiceTypes collection, and the supporting detail must be
    provided in the appropriate sub-object below."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, SpecialServiceTypes=None, PriorityAlertDetail=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if SpecialServiceTypes is None:
            self.SpecialServiceTypes = []
        else:
            self.SpecialServiceTypes = SpecialServiceTypes
        self.SpecialServiceTypes_nsprefix_ = "ns"
        self.PriorityAlertDetail = PriorityAlertDetail
        self.PriorityAlertDetail_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ConsolidationSpecialServicesRequested)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ConsolidationSpecialServicesRequested.subclass:
            return ConsolidationSpecialServicesRequested.subclass(*args_, **kwargs_)
        else:
            return ConsolidationSpecialServicesRequested(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_SpecialServiceTypes(self):
        return self.SpecialServiceTypes
    def set_SpecialServiceTypes(self, SpecialServiceTypes):
        self.SpecialServiceTypes = SpecialServiceTypes
    def add_SpecialServiceTypes(self, value):
        self.SpecialServiceTypes.append(value)
    def insert_SpecialServiceTypes_at(self, index, value):
        self.SpecialServiceTypes.insert(index, value)
    def replace_SpecialServiceTypes_at(self, index, value):
        self.SpecialServiceTypes[index] = value
    def get_PriorityAlertDetail(self):
        return self.PriorityAlertDetail
    def set_PriorityAlertDetail(self, PriorityAlertDetail):
        self.PriorityAlertDetail = PriorityAlertDetail
    def validate_ConsolidationSpecialServiceType(self, value):
        result = True
        # Validate type ConsolidationSpecialServiceType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BROKER_SELECT_OPTION', 'PRIORITY_ALERT', 'SATURDAY_PICKUP']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ConsolidationSpecialServiceType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.SpecialServiceTypes or
            self.PriorityAlertDetail is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ConsolidationSpecialServicesRequested', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ConsolidationSpecialServicesRequested')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ConsolidationSpecialServicesRequested':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ConsolidationSpecialServicesRequested')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ConsolidationSpecialServicesRequested', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ConsolidationSpecialServicesRequested'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ConsolidationSpecialServicesRequested', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for SpecialServiceTypes_ in self.SpecialServiceTypes:
            namespaceprefix_ = self.SpecialServiceTypes_nsprefix_ + ':' if (UseCapturedNS_ and self.SpecialServiceTypes_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSpecialServiceTypes>%s</%sSpecialServiceTypes>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(SpecialServiceTypes_), input_name='SpecialServiceTypes')), namespaceprefix_ , eol_))
        if self.PriorityAlertDetail is not None:
            namespaceprefix_ = self.PriorityAlertDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.PriorityAlertDetail_nsprefix_) else ''
            self.PriorityAlertDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PriorityAlertDetail', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'SpecialServiceTypes':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SpecialServiceTypes')
            value_ = self.gds_validate_string(value_, node, 'SpecialServiceTypes')
            self.SpecialServiceTypes.append(value_)
            self.SpecialServiceTypes_nsprefix_ = child_.prefix
            # validate type ConsolidationSpecialServiceType
            self.validate_ConsolidationSpecialServiceType(self.SpecialServiceTypes[-1])
        elif nodeName_ == 'PriorityAlertDetail':
            obj_ = PriorityAlertDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PriorityAlertDetail = obj_
            obj_.original_tagname_ = 'PriorityAlertDetail'
# end class ConsolidationSpecialServicesRequested


class Contact(GeneratedsSuper):
    """The descriptive data for a point-of-contact person."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ContactId=None, PersonName=None, Title=None, CompanyName=None, PhoneNumber=None, PhoneExtension=None, TollFreePhoneNumber=None, PagerNumber=None, FaxNumber=None, EMailAddress=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ContactId = ContactId
        self.ContactId_nsprefix_ = None
        self.PersonName = PersonName
        self.PersonName_nsprefix_ = None
        self.Title = Title
        self.Title_nsprefix_ = None
        self.CompanyName = CompanyName
        self.CompanyName_nsprefix_ = None
        self.PhoneNumber = PhoneNumber
        self.PhoneNumber_nsprefix_ = None
        self.PhoneExtension = PhoneExtension
        self.PhoneExtension_nsprefix_ = None
        self.TollFreePhoneNumber = TollFreePhoneNumber
        self.TollFreePhoneNumber_nsprefix_ = None
        self.PagerNumber = PagerNumber
        self.PagerNumber_nsprefix_ = None
        self.FaxNumber = FaxNumber
        self.FaxNumber_nsprefix_ = None
        self.EMailAddress = EMailAddress
        self.EMailAddress_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Contact)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Contact.subclass:
            return Contact.subclass(*args_, **kwargs_)
        else:
            return Contact(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ContactId(self):
        return self.ContactId
    def set_ContactId(self, ContactId):
        self.ContactId = ContactId
    def get_PersonName(self):
        return self.PersonName
    def set_PersonName(self, PersonName):
        self.PersonName = PersonName
    def get_Title(self):
        return self.Title
    def set_Title(self, Title):
        self.Title = Title
    def get_CompanyName(self):
        return self.CompanyName
    def set_CompanyName(self, CompanyName):
        self.CompanyName = CompanyName
    def get_PhoneNumber(self):
        return self.PhoneNumber
    def set_PhoneNumber(self, PhoneNumber):
        self.PhoneNumber = PhoneNumber
    def get_PhoneExtension(self):
        return self.PhoneExtension
    def set_PhoneExtension(self, PhoneExtension):
        self.PhoneExtension = PhoneExtension
    def get_TollFreePhoneNumber(self):
        return self.TollFreePhoneNumber
    def set_TollFreePhoneNumber(self, TollFreePhoneNumber):
        self.TollFreePhoneNumber = TollFreePhoneNumber
    def get_PagerNumber(self):
        return self.PagerNumber
    def set_PagerNumber(self, PagerNumber):
        self.PagerNumber = PagerNumber
    def get_FaxNumber(self):
        return self.FaxNumber
    def set_FaxNumber(self, FaxNumber):
        self.FaxNumber = FaxNumber
    def get_EMailAddress(self):
        return self.EMailAddress
    def set_EMailAddress(self, EMailAddress):
        self.EMailAddress = EMailAddress
    def hasContent_(self):
        if (
            self.ContactId is not None or
            self.PersonName is not None or
            self.Title is not None or
            self.CompanyName is not None or
            self.PhoneNumber is not None or
            self.PhoneExtension is not None or
            self.TollFreePhoneNumber is not None or
            self.PagerNumber is not None or
            self.FaxNumber is not None or
            self.EMailAddress is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Contact', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Contact')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Contact':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Contact')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Contact', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Contact'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Contact', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactId is not None:
            namespaceprefix_ = self.ContactId_nsprefix_ + ':' if (UseCapturedNS_ and self.ContactId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContactId>%s</%sContactId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ContactId), input_name='ContactId')), namespaceprefix_ , eol_))
        if self.PersonName is not None:
            namespaceprefix_ = self.PersonName_nsprefix_ + ':' if (UseCapturedNS_ and self.PersonName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPersonName>%s</%sPersonName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PersonName), input_name='PersonName')), namespaceprefix_ , eol_))
        if self.Title is not None:
            namespaceprefix_ = self.Title_nsprefix_ + ':' if (UseCapturedNS_ and self.Title_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTitle>%s</%sTitle>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Title), input_name='Title')), namespaceprefix_ , eol_))
        if self.CompanyName is not None:
            namespaceprefix_ = self.CompanyName_nsprefix_ + ':' if (UseCapturedNS_ and self.CompanyName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCompanyName>%s</%sCompanyName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CompanyName), input_name='CompanyName')), namespaceprefix_ , eol_))
        if self.PhoneNumber is not None:
            namespaceprefix_ = self.PhoneNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.PhoneNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPhoneNumber>%s</%sPhoneNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PhoneNumber), input_name='PhoneNumber')), namespaceprefix_ , eol_))
        if self.PhoneExtension is not None:
            namespaceprefix_ = self.PhoneExtension_nsprefix_ + ':' if (UseCapturedNS_ and self.PhoneExtension_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPhoneExtension>%s</%sPhoneExtension>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PhoneExtension), input_name='PhoneExtension')), namespaceprefix_ , eol_))
        if self.TollFreePhoneNumber is not None:
            namespaceprefix_ = self.TollFreePhoneNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.TollFreePhoneNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTollFreePhoneNumber>%s</%sTollFreePhoneNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TollFreePhoneNumber), input_name='TollFreePhoneNumber')), namespaceprefix_ , eol_))
        if self.PagerNumber is not None:
            namespaceprefix_ = self.PagerNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.PagerNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPagerNumber>%s</%sPagerNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PagerNumber), input_name='PagerNumber')), namespaceprefix_ , eol_))
        if self.FaxNumber is not None:
            namespaceprefix_ = self.FaxNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.FaxNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFaxNumber>%s</%sFaxNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FaxNumber), input_name='FaxNumber')), namespaceprefix_ , eol_))
        if self.EMailAddress is not None:
            namespaceprefix_ = self.EMailAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.EMailAddress_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEMailAddress>%s</%sEMailAddress>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EMailAddress), input_name='EMailAddress')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ContactId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ContactId')
            value_ = self.gds_validate_string(value_, node, 'ContactId')
            self.ContactId = value_
            self.ContactId_nsprefix_ = child_.prefix
        elif nodeName_ == 'PersonName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PersonName')
            value_ = self.gds_validate_string(value_, node, 'PersonName')
            self.PersonName = value_
            self.PersonName_nsprefix_ = child_.prefix
        elif nodeName_ == 'Title':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Title')
            value_ = self.gds_validate_string(value_, node, 'Title')
            self.Title = value_
            self.Title_nsprefix_ = child_.prefix
        elif nodeName_ == 'CompanyName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CompanyName')
            value_ = self.gds_validate_string(value_, node, 'CompanyName')
            self.CompanyName = value_
            self.CompanyName_nsprefix_ = child_.prefix
        elif nodeName_ == 'PhoneNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PhoneNumber')
            value_ = self.gds_validate_string(value_, node, 'PhoneNumber')
            self.PhoneNumber = value_
            self.PhoneNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'PhoneExtension':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PhoneExtension')
            value_ = self.gds_validate_string(value_, node, 'PhoneExtension')
            self.PhoneExtension = value_
            self.PhoneExtension_nsprefix_ = child_.prefix
        elif nodeName_ == 'TollFreePhoneNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TollFreePhoneNumber')
            value_ = self.gds_validate_string(value_, node, 'TollFreePhoneNumber')
            self.TollFreePhoneNumber = value_
            self.TollFreePhoneNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'PagerNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PagerNumber')
            value_ = self.gds_validate_string(value_, node, 'PagerNumber')
            self.PagerNumber = value_
            self.PagerNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'FaxNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FaxNumber')
            value_ = self.gds_validate_string(value_, node, 'FaxNumber')
            self.FaxNumber = value_
            self.FaxNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'EMailAddress':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EMailAddress')
            value_ = self.gds_validate_string(value_, node, 'EMailAddress')
            self.EMailAddress = value_
            self.EMailAddress_nsprefix_ = child_.prefix
# end class Contact


class ContactAndAddress(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Contact=None, Address=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Contact = Contact
        self.Contact_nsprefix_ = "ns"
        self.Address = Address
        self.Address_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContactAndAddress)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContactAndAddress.subclass:
            return ContactAndAddress.subclass(*args_, **kwargs_)
        else:
            return ContactAndAddress(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Contact(self):
        return self.Contact
    def set_Contact(self, Contact):
        self.Contact = Contact
    def get_Address(self):
        return self.Address
    def set_Address(self, Address):
        self.Address = Address
    def hasContent_(self):
        if (
            self.Contact is not None or
            self.Address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ContactAndAddress', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ContactAndAddress')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ContactAndAddress':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ContactAndAddress')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ContactAndAddress', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ContactAndAddress'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ContactAndAddress', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Contact is not None:
            namespaceprefix_ = self.Contact_nsprefix_ + ':' if (UseCapturedNS_ and self.Contact_nsprefix_) else ''
            self.Contact.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Contact', pretty_print=pretty_print)
        if self.Address is not None:
            namespaceprefix_ = self.Address_nsprefix_ + ':' if (UseCapturedNS_ and self.Address_nsprefix_) else ''
            self.Address.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Address', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Contact':
            obj_ = Contact.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Contact = obj_
            obj_.original_tagname_ = 'Contact'
        elif nodeName_ == 'Address':
            obj_ = Address.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
# end class ContactAndAddress


class ContentRecord(GeneratedsSuper):
    """Details the contents of the package."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PartNumber=None, ItemNumber=None, ReceivedQuantity=None, Description=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PartNumber = PartNumber
        self.PartNumber_nsprefix_ = None
        self.ItemNumber = ItemNumber
        self.ItemNumber_nsprefix_ = None
        self.ReceivedQuantity = ReceivedQuantity
        self.ReceivedQuantity_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContentRecord)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContentRecord.subclass:
            return ContentRecord.subclass(*args_, **kwargs_)
        else:
            return ContentRecord(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PartNumber(self):
        return self.PartNumber
    def set_PartNumber(self, PartNumber):
        self.PartNumber = PartNumber
    def get_ItemNumber(self):
        return self.ItemNumber
    def set_ItemNumber(self, ItemNumber):
        self.ItemNumber = ItemNumber
    def get_ReceivedQuantity(self):
        return self.ReceivedQuantity
    def set_ReceivedQuantity(self, ReceivedQuantity):
        self.ReceivedQuantity = ReceivedQuantity
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def hasContent_(self):
        if (
            self.PartNumber is not None or
            self.ItemNumber is not None or
            self.ReceivedQuantity is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ContentRecord', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ContentRecord')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ContentRecord':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ContentRecord')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ContentRecord', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ContentRecord'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ContentRecord', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PartNumber is not None:
            namespaceprefix_ = self.PartNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.PartNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPartNumber>%s</%sPartNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PartNumber), input_name='PartNumber')), namespaceprefix_ , eol_))
        if self.ItemNumber is not None:
            namespaceprefix_ = self.ItemNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.ItemNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sItemNumber>%s</%sItemNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ItemNumber), input_name='ItemNumber')), namespaceprefix_ , eol_))
        if self.ReceivedQuantity is not None:
            namespaceprefix_ = self.ReceivedQuantity_nsprefix_ + ':' if (UseCapturedNS_ and self.ReceivedQuantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReceivedQuantity>%s</%sReceivedQuantity>%s' % (namespaceprefix_ , self.gds_format_integer(self.ReceivedQuantity, input_name='ReceivedQuantity'), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PartNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PartNumber')
            value_ = self.gds_validate_string(value_, node, 'PartNumber')
            self.PartNumber = value_
            self.PartNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'ItemNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ItemNumber')
            value_ = self.gds_validate_string(value_, node, 'ItemNumber')
            self.ItemNumber = value_
            self.ItemNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'ReceivedQuantity' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'ReceivedQuantity')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'ReceivedQuantity')
            self.ReceivedQuantity = ival_
            self.ReceivedQuantity_nsprefix_ = child_.prefix
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
# end class ContentRecord


class CreditCard(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Number=None, CreditCardType=None, ExpirationDate=None, LastAuthenticationByFedexDate=None, VerificationCode=None, TrackData=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Number = Number
        self.Number_nsprefix_ = None
        self.CreditCardType = CreditCardType
        self.validate_CreditCardType(self.CreditCardType)
        self.CreditCardType_nsprefix_ = "ns"
        self.ExpirationDate = ExpirationDate
        self.ExpirationDate_nsprefix_ = None
        if isinstance(LastAuthenticationByFedexDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(LastAuthenticationByFedexDate, '%Y-%m-%d').date()
        else:
            initvalue_ = LastAuthenticationByFedexDate
        self.LastAuthenticationByFedexDate = initvalue_
        self.LastAuthenticationByFedexDate_nsprefix_ = None
        self.VerificationCode = VerificationCode
        self.VerificationCode_nsprefix_ = None
        if TrackData is None:
            self.TrackData = []
        else:
            self.TrackData = TrackData
        self.TrackData_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CreditCard)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CreditCard.subclass:
            return CreditCard.subclass(*args_, **kwargs_)
        else:
            return CreditCard(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Number(self):
        return self.Number
    def set_Number(self, Number):
        self.Number = Number
    def get_CreditCardType(self):
        return self.CreditCardType
    def set_CreditCardType(self, CreditCardType):
        self.CreditCardType = CreditCardType
    def get_ExpirationDate(self):
        return self.ExpirationDate
    def set_ExpirationDate(self, ExpirationDate):
        self.ExpirationDate = ExpirationDate
    def get_LastAuthenticationByFedexDate(self):
        return self.LastAuthenticationByFedexDate
    def set_LastAuthenticationByFedexDate(self, LastAuthenticationByFedexDate):
        self.LastAuthenticationByFedexDate = LastAuthenticationByFedexDate
    def get_VerificationCode(self):
        return self.VerificationCode
    def set_VerificationCode(self, VerificationCode):
        self.VerificationCode = VerificationCode
    def get_TrackData(self):
        return self.TrackData
    def set_TrackData(self, TrackData):
        self.TrackData = TrackData
    def add_TrackData(self, value):
        self.TrackData.append(value)
    def insert_TrackData_at(self, index, value):
        self.TrackData.insert(index, value)
    def replace_TrackData_at(self, index, value):
        self.TrackData[index] = value
    def validate_CreditCardType(self, value):
        result = True
        # Validate type CreditCardType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['AMEX', 'DANKORT', 'DINERS', 'DISCOVER', 'JCB', 'MASTERCARD', 'VISA']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CreditCardType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Number is not None or
            self.CreditCardType is not None or
            self.ExpirationDate is not None or
            self.LastAuthenticationByFedexDate is not None or
            self.VerificationCode is not None or
            self.TrackData
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CreditCard', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CreditCard')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CreditCard':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CreditCard')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CreditCard', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CreditCard'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CreditCard', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Number is not None:
            namespaceprefix_ = self.Number_nsprefix_ + ':' if (UseCapturedNS_ and self.Number_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumber>%s</%sNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Number), input_name='Number')), namespaceprefix_ , eol_))
        if self.CreditCardType is not None:
            namespaceprefix_ = self.CreditCardType_nsprefix_ + ':' if (UseCapturedNS_ and self.CreditCardType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCreditCardType>%s</%sCreditCardType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CreditCardType), input_name='CreditCardType')), namespaceprefix_ , eol_))
        if self.ExpirationDate is not None:
            namespaceprefix_ = self.ExpirationDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ExpirationDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExpirationDate>%s</%sExpirationDate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ExpirationDate), input_name='ExpirationDate')), namespaceprefix_ , eol_))
        if self.LastAuthenticationByFedexDate is not None:
            namespaceprefix_ = self.LastAuthenticationByFedexDate_nsprefix_ + ':' if (UseCapturedNS_ and self.LastAuthenticationByFedexDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLastAuthenticationByFedexDate>%s</%sLastAuthenticationByFedexDate>%s' % (namespaceprefix_ , self.gds_format_date(self.LastAuthenticationByFedexDate, input_name='LastAuthenticationByFedexDate'), namespaceprefix_ , eol_))
        if self.VerificationCode is not None:
            namespaceprefix_ = self.VerificationCode_nsprefix_ + ':' if (UseCapturedNS_ and self.VerificationCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVerificationCode>%s</%sVerificationCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.VerificationCode), input_name='VerificationCode')), namespaceprefix_ , eol_))
        for TrackData_ in self.TrackData:
            namespaceprefix_ = self.TrackData_nsprefix_ + ':' if (UseCapturedNS_ and self.TrackData_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTrackData>%s</%sTrackData>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(TrackData_), input_name='TrackData')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Number':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Number')
            value_ = self.gds_validate_string(value_, node, 'Number')
            self.Number = value_
            self.Number_nsprefix_ = child_.prefix
        elif nodeName_ == 'CreditCardType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CreditCardType')
            value_ = self.gds_validate_string(value_, node, 'CreditCardType')
            self.CreditCardType = value_
            self.CreditCardType_nsprefix_ = child_.prefix
            # validate type CreditCardType
            self.validate_CreditCardType(self.CreditCardType)
        elif nodeName_ == 'ExpirationDate':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ExpirationDate')
            value_ = self.gds_validate_string(value_, node, 'ExpirationDate')
            self.ExpirationDate = value_
            self.ExpirationDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'LastAuthenticationByFedexDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.LastAuthenticationByFedexDate = dval_
            self.LastAuthenticationByFedexDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'VerificationCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'VerificationCode')
            value_ = self.gds_validate_string(value_, node, 'VerificationCode')
            self.VerificationCode = value_
            self.VerificationCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'TrackData':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TrackData')
            value_ = self.gds_validate_string(value_, node, 'TrackData')
            self.TrackData.append(value_)
            self.TrackData_nsprefix_ = child_.prefix
# end class CreditCard


class CreditCardTransactionAttributesDetail(GeneratedsSuper):
    """Specifies details about the credit card transaction that drive decisions
    about credit card processing."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Types=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Types is None:
            self.Types = []
        else:
            self.Types = Types
        self.Types_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CreditCardTransactionAttributesDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CreditCardTransactionAttributesDetail.subclass:
            return CreditCardTransactionAttributesDetail.subclass(*args_, **kwargs_)
        else:
            return CreditCardTransactionAttributesDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Types(self):
        return self.Types
    def set_Types(self, Types):
        self.Types = Types
    def add_Types(self, value):
        self.Types.append(value)
    def insert_Types_at(self, index, value):
        self.Types.insert(index, value)
    def replace_Types_at(self, index, value):
        self.Types[index] = value
    def validate_CreditCardTransactionAttributeType(self, value):
        result = True
        # Validate type CreditCardTransactionAttributeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ORIGINATED_BY_AUTHORIZED_PERSONNEL', 'ORIGINATED_BY_UNAUTHORIZED_PERSONNEL']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CreditCardTransactionAttributeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Types
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CreditCardTransactionAttributesDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CreditCardTransactionAttributesDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CreditCardTransactionAttributesDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CreditCardTransactionAttributesDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CreditCardTransactionAttributesDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CreditCardTransactionAttributesDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CreditCardTransactionAttributesDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Types_ in self.Types:
            namespaceprefix_ = self.Types_nsprefix_ + ':' if (UseCapturedNS_ and self.Types_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTypes>%s</%sTypes>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Types_), input_name='Types')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Types':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Types')
            value_ = self.gds_validate_string(value_, node, 'Types')
            self.Types.append(value_)
            self.Types_nsprefix_ = child_.prefix
            # validate type CreditCardTransactionAttributeType
            self.validate_CreditCardTransactionAttributeType(self.Types[-1])
# end class CreditCardTransactionAttributesDetail


class CreditCardTransactionDetail(GeneratedsSuper):
    """This class represents data tied to the use of a credit card in a
    specific transaction."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, AuthorizationId=None, AuthorizationType=None, SettlementScheduleType=None, FraudDetectionDetail=None, PayorAuthenticationCode=None, AttributesDetail=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.AuthorizationId = AuthorizationId
        self.AuthorizationId_nsprefix_ = None
        self.AuthorizationType = AuthorizationType
        self.validate_CreditCardAuthorizationType(self.AuthorizationType)
        self.AuthorizationType_nsprefix_ = "ns"
        self.SettlementScheduleType = SettlementScheduleType
        self.validate_CreditCardSettlementScheduleType(self.SettlementScheduleType)
        self.SettlementScheduleType_nsprefix_ = "ns"
        self.FraudDetectionDetail = FraudDetectionDetail
        self.FraudDetectionDetail_nsprefix_ = "ns"
        self.PayorAuthenticationCode = PayorAuthenticationCode
        self.PayorAuthenticationCode_nsprefix_ = None
        self.AttributesDetail = AttributesDetail
        self.AttributesDetail_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CreditCardTransactionDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CreditCardTransactionDetail.subclass:
            return CreditCardTransactionDetail.subclass(*args_, **kwargs_)
        else:
            return CreditCardTransactionDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_AuthorizationId(self):
        return self.AuthorizationId
    def set_AuthorizationId(self, AuthorizationId):
        self.AuthorizationId = AuthorizationId
    def get_AuthorizationType(self):
        return self.AuthorizationType
    def set_AuthorizationType(self, AuthorizationType):
        self.AuthorizationType = AuthorizationType
    def get_SettlementScheduleType(self):
        return self.SettlementScheduleType
    def set_SettlementScheduleType(self, SettlementScheduleType):
        self.SettlementScheduleType = SettlementScheduleType
    def get_FraudDetectionDetail(self):
        return self.FraudDetectionDetail
    def set_FraudDetectionDetail(self, FraudDetectionDetail):
        self.FraudDetectionDetail = FraudDetectionDetail
    def get_PayorAuthenticationCode(self):
        return self.PayorAuthenticationCode
    def set_PayorAuthenticationCode(self, PayorAuthenticationCode):
        self.PayorAuthenticationCode = PayorAuthenticationCode
    def get_AttributesDetail(self):
        return self.AttributesDetail
    def set_AttributesDetail(self, AttributesDetail):
        self.AttributesDetail = AttributesDetail
    def validate_CreditCardAuthorizationType(self, value):
        result = True
        # Validate type CreditCardAuthorizationType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['AUTHORIZE_NON_ACCOUNT', 'AUTHORIZE_WITH_ACCOUNT', 'VERIFY_WITH_ACCOUNT']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CreditCardAuthorizationType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_CreditCardSettlementScheduleType(self, value):
        result = True
        # Validate type CreditCardSettlementScheduleType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['SETTLE_IMMEDIATELY', 'SETTLE_NEXT_DAY', 'SETTLE_ON_DELIVERY']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CreditCardSettlementScheduleType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.AuthorizationId is not None or
            self.AuthorizationType is not None or
            self.SettlementScheduleType is not None or
            self.FraudDetectionDetail is not None or
            self.PayorAuthenticationCode is not None or
            self.AttributesDetail is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CreditCardTransactionDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CreditCardTransactionDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CreditCardTransactionDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CreditCardTransactionDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CreditCardTransactionDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CreditCardTransactionDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CreditCardTransactionDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AuthorizationId is not None:
            namespaceprefix_ = self.AuthorizationId_nsprefix_ + ':' if (UseCapturedNS_ and self.AuthorizationId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAuthorizationId>%s</%sAuthorizationId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AuthorizationId), input_name='AuthorizationId')), namespaceprefix_ , eol_))
        if self.AuthorizationType is not None:
            namespaceprefix_ = self.AuthorizationType_nsprefix_ + ':' if (UseCapturedNS_ and self.AuthorizationType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAuthorizationType>%s</%sAuthorizationType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AuthorizationType), input_name='AuthorizationType')), namespaceprefix_ , eol_))
        if self.SettlementScheduleType is not None:
            namespaceprefix_ = self.SettlementScheduleType_nsprefix_ + ':' if (UseCapturedNS_ and self.SettlementScheduleType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSettlementScheduleType>%s</%sSettlementScheduleType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SettlementScheduleType), input_name='SettlementScheduleType')), namespaceprefix_ , eol_))
        if self.FraudDetectionDetail is not None:
            namespaceprefix_ = self.FraudDetectionDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.FraudDetectionDetail_nsprefix_) else ''
            self.FraudDetectionDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FraudDetectionDetail', pretty_print=pretty_print)
        if self.PayorAuthenticationCode is not None:
            namespaceprefix_ = self.PayorAuthenticationCode_nsprefix_ + ':' if (UseCapturedNS_ and self.PayorAuthenticationCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPayorAuthenticationCode>%s</%sPayorAuthenticationCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PayorAuthenticationCode), input_name='PayorAuthenticationCode')), namespaceprefix_ , eol_))
        if self.AttributesDetail is not None:
            namespaceprefix_ = self.AttributesDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.AttributesDetail_nsprefix_) else ''
            self.AttributesDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AttributesDetail', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'AuthorizationId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AuthorizationId')
            value_ = self.gds_validate_string(value_, node, 'AuthorizationId')
            self.AuthorizationId = value_
            self.AuthorizationId_nsprefix_ = child_.prefix
        elif nodeName_ == 'AuthorizationType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AuthorizationType')
            value_ = self.gds_validate_string(value_, node, 'AuthorizationType')
            self.AuthorizationType = value_
            self.AuthorizationType_nsprefix_ = child_.prefix
            # validate type CreditCardAuthorizationType
            self.validate_CreditCardAuthorizationType(self.AuthorizationType)
        elif nodeName_ == 'SettlementScheduleType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SettlementScheduleType')
            value_ = self.gds_validate_string(value_, node, 'SettlementScheduleType')
            self.SettlementScheduleType = value_
            self.SettlementScheduleType_nsprefix_ = child_.prefix
            # validate type CreditCardSettlementScheduleType
            self.validate_CreditCardSettlementScheduleType(self.SettlementScheduleType)
        elif nodeName_ == 'FraudDetectionDetail':
            obj_ = CreditFraudDetectionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FraudDetectionDetail = obj_
            obj_.original_tagname_ = 'FraudDetectionDetail'
        elif nodeName_ == 'PayorAuthenticationCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PayorAuthenticationCode')
            value_ = self.gds_validate_string(value_, node, 'PayorAuthenticationCode')
            self.PayorAuthenticationCode = value_
            self.PayorAuthenticationCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'AttributesDetail':
            obj_ = CreditCardTransactionAttributesDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AttributesDetail = obj_
            obj_.original_tagname_ = 'AttributesDetail'
# end class CreditCardTransactionDetail


class CreditFraudDetectionDetail(GeneratedsSuper):
    """This class is a rename of the previous VerifyCreditFraudDetail; the name
    change reflects the fact that it is no longer tied to a "verify"
    usage."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, IpAddress=None, ClientCookiesEnabled=None, DevicePrint=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.IpAddress = IpAddress
        self.IpAddress_nsprefix_ = None
        self.ClientCookiesEnabled = ClientCookiesEnabled
        self.ClientCookiesEnabled_nsprefix_ = None
        self.DevicePrint = DevicePrint
        self.DevicePrint_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CreditFraudDetectionDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CreditFraudDetectionDetail.subclass:
            return CreditFraudDetectionDetail.subclass(*args_, **kwargs_)
        else:
            return CreditFraudDetectionDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_IpAddress(self):
        return self.IpAddress
    def set_IpAddress(self, IpAddress):
        self.IpAddress = IpAddress
    def get_ClientCookiesEnabled(self):
        return self.ClientCookiesEnabled
    def set_ClientCookiesEnabled(self, ClientCookiesEnabled):
        self.ClientCookiesEnabled = ClientCookiesEnabled
    def get_DevicePrint(self):
        return self.DevicePrint
    def set_DevicePrint(self, DevicePrint):
        self.DevicePrint = DevicePrint
    def hasContent_(self):
        if (
            self.IpAddress is not None or
            self.ClientCookiesEnabled is not None or
            self.DevicePrint is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CreditFraudDetectionDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CreditFraudDetectionDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CreditFraudDetectionDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CreditFraudDetectionDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CreditFraudDetectionDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CreditFraudDetectionDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CreditFraudDetectionDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.IpAddress is not None:
            namespaceprefix_ = self.IpAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.IpAddress_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIpAddress>%s</%sIpAddress>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IpAddress), input_name='IpAddress')), namespaceprefix_ , eol_))
        if self.ClientCookiesEnabled is not None:
            namespaceprefix_ = self.ClientCookiesEnabled_nsprefix_ + ':' if (UseCapturedNS_ and self.ClientCookiesEnabled_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClientCookiesEnabled>%s</%sClientCookiesEnabled>%s' % (namespaceprefix_ , self.gds_format_boolean(self.ClientCookiesEnabled, input_name='ClientCookiesEnabled'), namespaceprefix_ , eol_))
        if self.DevicePrint is not None:
            namespaceprefix_ = self.DevicePrint_nsprefix_ + ':' if (UseCapturedNS_ and self.DevicePrint_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDevicePrint>%s</%sDevicePrint>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DevicePrint), input_name='DevicePrint')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'IpAddress':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'IpAddress')
            value_ = self.gds_validate_string(value_, node, 'IpAddress')
            self.IpAddress = value_
            self.IpAddress_nsprefix_ = child_.prefix
        elif nodeName_ == 'ClientCookiesEnabled':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'ClientCookiesEnabled')
            ival_ = self.gds_validate_boolean(ival_, node, 'ClientCookiesEnabled')
            self.ClientCookiesEnabled = ival_
            self.ClientCookiesEnabled_nsprefix_ = child_.prefix
        elif nodeName_ == 'DevicePrint':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DevicePrint')
            value_ = self.gds_validate_string(value_, node, 'DevicePrint')
            self.DevicePrint = value_
            self.DevicePrint_nsprefix_ = child_.prefix
# end class CreditFraudDetectionDetail


class CustomDeliveryWindowDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, RequestTime=None, RequestRange=None, RequestDate=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.validate_CustomDeliveryWindowType(self.Type)
        self.Type_nsprefix_ = "ns"
        if isinstance(RequestTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RequestTime, '%H:%M:%S').time()
        else:
            initvalue_ = RequestTime
        self.RequestTime = initvalue_
        self.RequestTime_nsprefix_ = None
        self.RequestRange = RequestRange
        self.RequestRange_nsprefix_ = "ns"
        if isinstance(RequestDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RequestDate, '%Y-%m-%d').date()
        else:
            initvalue_ = RequestDate
        self.RequestDate = initvalue_
        self.RequestDate_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CustomDeliveryWindowDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CustomDeliveryWindowDetail.subclass:
            return CustomDeliveryWindowDetail.subclass(*args_, **kwargs_)
        else:
            return CustomDeliveryWindowDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_RequestTime(self):
        return self.RequestTime
    def set_RequestTime(self, RequestTime):
        self.RequestTime = RequestTime
    def get_RequestRange(self):
        return self.RequestRange
    def set_RequestRange(self, RequestRange):
        self.RequestRange = RequestRange
    def get_RequestDate(self):
        return self.RequestDate
    def set_RequestDate(self, RequestDate):
        self.RequestDate = RequestDate
    def validate_CustomDeliveryWindowType(self, value):
        result = True
        # Validate type CustomDeliveryWindowType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['AFTER', 'BEFORE', 'BETWEEN', 'ON']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CustomDeliveryWindowType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Type is not None or
            self.RequestTime is not None or
            self.RequestRange is not None or
            self.RequestDate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomDeliveryWindowDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CustomDeliveryWindowDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CustomDeliveryWindowDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CustomDeliveryWindowDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CustomDeliveryWindowDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CustomDeliveryWindowDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomDeliveryWindowDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.RequestTime is not None:
            namespaceprefix_ = self.RequestTime_nsprefix_ + ':' if (UseCapturedNS_ and self.RequestTime_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRequestTime>%s</%sRequestTime>%s' % (namespaceprefix_ , self.gds_format_time(self.RequestTime, input_name='RequestTime'), namespaceprefix_ , eol_))
        if self.RequestRange is not None:
            namespaceprefix_ = self.RequestRange_nsprefix_ + ':' if (UseCapturedNS_ and self.RequestRange_nsprefix_) else ''
            self.RequestRange.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RequestRange', pretty_print=pretty_print)
        if self.RequestDate is not None:
            namespaceprefix_ = self.RequestDate_nsprefix_ + ':' if (UseCapturedNS_ and self.RequestDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRequestDate>%s</%sRequestDate>%s' % (namespaceprefix_ , self.gds_format_date(self.RequestDate, input_name='RequestDate'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type CustomDeliveryWindowType
            self.validate_CustomDeliveryWindowType(self.Type)
        elif nodeName_ == 'RequestTime':
            sval_ = child_.text
            dval_ = self.gds_parse_time(sval_)
            self.RequestTime = dval_
            self.RequestTime_nsprefix_ = child_.prefix
        elif nodeName_ == 'RequestRange':
            obj_ = DateRange.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RequestRange = obj_
            obj_.original_tagname_ = 'RequestRange'
        elif nodeName_ == 'RequestDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.RequestDate = dval_
            self.RequestDate_nsprefix_ = child_.prefix
# end class CustomDeliveryWindowDetail


class CustomDiscountExclusionDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ExcludedTypes=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if ExcludedTypes is None:
            self.ExcludedTypes = []
        else:
            self.ExcludedTypes = ExcludedTypes
        self.ExcludedTypes_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CustomDiscountExclusionDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CustomDiscountExclusionDetail.subclass:
            return CustomDiscountExclusionDetail.subclass(*args_, **kwargs_)
        else:
            return CustomDiscountExclusionDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ExcludedTypes(self):
        return self.ExcludedTypes
    def set_ExcludedTypes(self, ExcludedTypes):
        self.ExcludedTypes = ExcludedTypes
    def add_ExcludedTypes(self, value):
        self.ExcludedTypes.append(value)
    def insert_ExcludedTypes_at(self, index, value):
        self.ExcludedTypes.insert(index, value)
    def replace_ExcludedTypes_at(self, index, value):
        self.ExcludedTypes[index] = value
    def validate_RateDiscountType(self, value):
        result = True
        # Validate type RateDiscountType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BONUS', 'COUPON', 'EARNED', 'INCENTIVE', 'OTHER', 'VOLUME']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on RateDiscountType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.ExcludedTypes
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomDiscountExclusionDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CustomDiscountExclusionDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CustomDiscountExclusionDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CustomDiscountExclusionDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CustomDiscountExclusionDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CustomDiscountExclusionDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomDiscountExclusionDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ExcludedTypes_ in self.ExcludedTypes:
            namespaceprefix_ = self.ExcludedTypes_nsprefix_ + ':' if (UseCapturedNS_ and self.ExcludedTypes_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExcludedTypes>%s</%sExcludedTypes>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(ExcludedTypes_), input_name='ExcludedTypes')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ExcludedTypes':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ExcludedTypes')
            value_ = self.gds_validate_string(value_, node, 'ExcludedTypes')
            self.ExcludedTypes.append(value_)
            self.ExcludedTypes_nsprefix_ = child_.prefix
            # validate type RateDiscountType
            self.validate_RateDiscountType(self.ExcludedTypes[-1])
# end class CustomDiscountExclusionDetail


class CustomDocumentDetail(GeneratedsSuper):
    """Data required to produce a custom-specified document, either at shipment
    or package level."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Format=None, LabelPrintingOrientation=None, LabelRotation=None, SpecificationId=None, CustomDocumentIdentifier=None, DocTabContent=None, CustomContent=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Format = Format
        self.Format_nsprefix_ = "ns"
        self.LabelPrintingOrientation = LabelPrintingOrientation
        self.validate_LabelPrintingOrientationType(self.LabelPrintingOrientation)
        self.LabelPrintingOrientation_nsprefix_ = "ns"
        self.LabelRotation = LabelRotation
        self.validate_LabelRotationType(self.LabelRotation)
        self.LabelRotation_nsprefix_ = "ns"
        self.SpecificationId = SpecificationId
        self.SpecificationId_nsprefix_ = None
        self.CustomDocumentIdentifier = CustomDocumentIdentifier
        self.CustomDocumentIdentifier_nsprefix_ = None
        self.DocTabContent = DocTabContent
        self.DocTabContent_nsprefix_ = "ns"
        self.CustomContent = CustomContent
        self.CustomContent_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CustomDocumentDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CustomDocumentDetail.subclass:
            return CustomDocumentDetail.subclass(*args_, **kwargs_)
        else:
            return CustomDocumentDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Format(self):
        return self.Format
    def set_Format(self, Format):
        self.Format = Format
    def get_LabelPrintingOrientation(self):
        return self.LabelPrintingOrientation
    def set_LabelPrintingOrientation(self, LabelPrintingOrientation):
        self.LabelPrintingOrientation = LabelPrintingOrientation
    def get_LabelRotation(self):
        return self.LabelRotation
    def set_LabelRotation(self, LabelRotation):
        self.LabelRotation = LabelRotation
    def get_SpecificationId(self):
        return self.SpecificationId
    def set_SpecificationId(self, SpecificationId):
        self.SpecificationId = SpecificationId
    def get_CustomDocumentIdentifier(self):
        return self.CustomDocumentIdentifier
    def set_CustomDocumentIdentifier(self, CustomDocumentIdentifier):
        self.CustomDocumentIdentifier = CustomDocumentIdentifier
    def get_DocTabContent(self):
        return self.DocTabContent
    def set_DocTabContent(self, DocTabContent):
        self.DocTabContent = DocTabContent
    def get_CustomContent(self):
        return self.CustomContent
    def set_CustomContent(self, CustomContent):
        self.CustomContent = CustomContent
    def validate_LabelPrintingOrientationType(self, value):
        result = True
        # Validate type LabelPrintingOrientationType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BOTTOM_EDGE_OF_TEXT_FIRST', 'TOP_EDGE_OF_TEXT_FIRST']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on LabelPrintingOrientationType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_LabelRotationType(self, value):
        result = True
        # Validate type LabelRotationType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['LEFT', 'NONE', 'RIGHT', 'UPSIDE_DOWN']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on LabelRotationType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Format is not None or
            self.LabelPrintingOrientation is not None or
            self.LabelRotation is not None or
            self.SpecificationId is not None or
            self.CustomDocumentIdentifier is not None or
            self.DocTabContent is not None or
            self.CustomContent is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomDocumentDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CustomDocumentDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CustomDocumentDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CustomDocumentDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CustomDocumentDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CustomDocumentDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomDocumentDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Format is not None:
            namespaceprefix_ = self.Format_nsprefix_ + ':' if (UseCapturedNS_ and self.Format_nsprefix_) else ''
            self.Format.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Format', pretty_print=pretty_print)
        if self.LabelPrintingOrientation is not None:
            namespaceprefix_ = self.LabelPrintingOrientation_nsprefix_ + ':' if (UseCapturedNS_ and self.LabelPrintingOrientation_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLabelPrintingOrientation>%s</%sLabelPrintingOrientation>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LabelPrintingOrientation), input_name='LabelPrintingOrientation')), namespaceprefix_ , eol_))
        if self.LabelRotation is not None:
            namespaceprefix_ = self.LabelRotation_nsprefix_ + ':' if (UseCapturedNS_ and self.LabelRotation_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLabelRotation>%s</%sLabelRotation>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LabelRotation), input_name='LabelRotation')), namespaceprefix_ , eol_))
        if self.SpecificationId is not None:
            namespaceprefix_ = self.SpecificationId_nsprefix_ + ':' if (UseCapturedNS_ and self.SpecificationId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSpecificationId>%s</%sSpecificationId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SpecificationId), input_name='SpecificationId')), namespaceprefix_ , eol_))
        if self.CustomDocumentIdentifier is not None:
            namespaceprefix_ = self.CustomDocumentIdentifier_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomDocumentIdentifier_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCustomDocumentIdentifier>%s</%sCustomDocumentIdentifier>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CustomDocumentIdentifier), input_name='CustomDocumentIdentifier')), namespaceprefix_ , eol_))
        if self.DocTabContent is not None:
            namespaceprefix_ = self.DocTabContent_nsprefix_ + ':' if (UseCapturedNS_ and self.DocTabContent_nsprefix_) else ''
            self.DocTabContent.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DocTabContent', pretty_print=pretty_print)
        if self.CustomContent is not None:
            namespaceprefix_ = self.CustomContent_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomContent_nsprefix_) else ''
            self.CustomContent.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CustomContent', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Format':
            obj_ = ShippingDocumentFormat.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Format = obj_
            obj_.original_tagname_ = 'Format'
        elif nodeName_ == 'LabelPrintingOrientation':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LabelPrintingOrientation')
            value_ = self.gds_validate_string(value_, node, 'LabelPrintingOrientation')
            self.LabelPrintingOrientation = value_
            self.LabelPrintingOrientation_nsprefix_ = child_.prefix
            # validate type LabelPrintingOrientationType
            self.validate_LabelPrintingOrientationType(self.LabelPrintingOrientation)
        elif nodeName_ == 'LabelRotation':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LabelRotation')
            value_ = self.gds_validate_string(value_, node, 'LabelRotation')
            self.LabelRotation = value_
            self.LabelRotation_nsprefix_ = child_.prefix
            # validate type LabelRotationType
            self.validate_LabelRotationType(self.LabelRotation)
        elif nodeName_ == 'SpecificationId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SpecificationId')
            value_ = self.gds_validate_string(value_, node, 'SpecificationId')
            self.SpecificationId = value_
            self.SpecificationId_nsprefix_ = child_.prefix
        elif nodeName_ == 'CustomDocumentIdentifier':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CustomDocumentIdentifier')
            value_ = self.gds_validate_string(value_, node, 'CustomDocumentIdentifier')
            self.CustomDocumentIdentifier = value_
            self.CustomDocumentIdentifier_nsprefix_ = child_.prefix
        elif nodeName_ == 'DocTabContent':
            obj_ = DocTabContent.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DocTabContent = obj_
            obj_.original_tagname_ = 'DocTabContent'
        elif nodeName_ == 'CustomContent':
            obj_ = CustomLabelDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CustomContent = obj_
            obj_.original_tagname_ = 'CustomContent'
# end class CustomDocumentDetail


class CustomLabelBarcodeEntry(GeneratedsSuper):
    """Constructed string, based on format and zero or more data fields,
    printed in specified barcode symbology."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Position=None, Format=None, DataFields=None, BarHeight=None, ThinBarWidth=None, BarcodeSymbology=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Position = Position
        self.Position_nsprefix_ = "ns"
        self.Format = Format
        self.Format_nsprefix_ = None
        if DataFields is None:
            self.DataFields = []
        else:
            self.DataFields = DataFields
        self.DataFields_nsprefix_ = None
        self.BarHeight = BarHeight
        self.BarHeight_nsprefix_ = None
        self.ThinBarWidth = ThinBarWidth
        self.ThinBarWidth_nsprefix_ = None
        self.BarcodeSymbology = BarcodeSymbology
        self.validate_BarcodeSymbologyType(self.BarcodeSymbology)
        self.BarcodeSymbology_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CustomLabelBarcodeEntry)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CustomLabelBarcodeEntry.subclass:
            return CustomLabelBarcodeEntry.subclass(*args_, **kwargs_)
        else:
            return CustomLabelBarcodeEntry(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Position(self):
        return self.Position
    def set_Position(self, Position):
        self.Position = Position
    def get_Format(self):
        return self.Format
    def set_Format(self, Format):
        self.Format = Format
    def get_DataFields(self):
        return self.DataFields
    def set_DataFields(self, DataFields):
        self.DataFields = DataFields
    def add_DataFields(self, value):
        self.DataFields.append(value)
    def insert_DataFields_at(self, index, value):
        self.DataFields.insert(index, value)
    def replace_DataFields_at(self, index, value):
        self.DataFields[index] = value
    def get_BarHeight(self):
        return self.BarHeight
    def set_BarHeight(self, BarHeight):
        self.BarHeight = BarHeight
    def get_ThinBarWidth(self):
        return self.ThinBarWidth
    def set_ThinBarWidth(self, ThinBarWidth):
        self.ThinBarWidth = ThinBarWidth
    def get_BarcodeSymbology(self):
        return self.BarcodeSymbology
    def set_BarcodeSymbology(self, BarcodeSymbology):
        self.BarcodeSymbology = BarcodeSymbology
    def validate_BarcodeSymbologyType(self, value):
        result = True
        # Validate type BarcodeSymbologyType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CODABAR', 'CODE128', 'CODE128B', 'CODE128C', 'CODE128_WIDEBAR', 'CODE39', 'CODE93', 'I2OF5', 'MANUAL', 'PDF417', 'POSTNET', 'QR_CODE', 'UCC128']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on BarcodeSymbologyType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Position is not None or
            self.Format is not None or
            self.DataFields or
            self.BarHeight is not None or
            self.ThinBarWidth is not None or
            self.BarcodeSymbology is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomLabelBarcodeEntry', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CustomLabelBarcodeEntry')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CustomLabelBarcodeEntry':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CustomLabelBarcodeEntry')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CustomLabelBarcodeEntry', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CustomLabelBarcodeEntry'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomLabelBarcodeEntry', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Position is not None:
            namespaceprefix_ = self.Position_nsprefix_ + ':' if (UseCapturedNS_ and self.Position_nsprefix_) else ''
            self.Position.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Position', pretty_print=pretty_print)
        if self.Format is not None:
            namespaceprefix_ = self.Format_nsprefix_ + ':' if (UseCapturedNS_ and self.Format_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFormat>%s</%sFormat>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Format), input_name='Format')), namespaceprefix_ , eol_))
        for DataFields_ in self.DataFields:
            namespaceprefix_ = self.DataFields_nsprefix_ + ':' if (UseCapturedNS_ and self.DataFields_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDataFields>%s</%sDataFields>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(DataFields_), input_name='DataFields')), namespaceprefix_ , eol_))
        if self.BarHeight is not None:
            namespaceprefix_ = self.BarHeight_nsprefix_ + ':' if (UseCapturedNS_ and self.BarHeight_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBarHeight>%s</%sBarHeight>%s' % (namespaceprefix_ , self.gds_format_integer(self.BarHeight, input_name='BarHeight'), namespaceprefix_ , eol_))
        if self.ThinBarWidth is not None:
            namespaceprefix_ = self.ThinBarWidth_nsprefix_ + ':' if (UseCapturedNS_ and self.ThinBarWidth_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sThinBarWidth>%s</%sThinBarWidth>%s' % (namespaceprefix_ , self.gds_format_integer(self.ThinBarWidth, input_name='ThinBarWidth'), namespaceprefix_ , eol_))
        if self.BarcodeSymbology is not None:
            namespaceprefix_ = self.BarcodeSymbology_nsprefix_ + ':' if (UseCapturedNS_ and self.BarcodeSymbology_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBarcodeSymbology>%s</%sBarcodeSymbology>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BarcodeSymbology), input_name='BarcodeSymbology')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Position':
            obj_ = CustomLabelPosition.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Position = obj_
            obj_.original_tagname_ = 'Position'
        elif nodeName_ == 'Format':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Format')
            value_ = self.gds_validate_string(value_, node, 'Format')
            self.Format = value_
            self.Format_nsprefix_ = child_.prefix
        elif nodeName_ == 'DataFields':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DataFields')
            value_ = self.gds_validate_string(value_, node, 'DataFields')
            self.DataFields.append(value_)
            self.DataFields_nsprefix_ = child_.prefix
        elif nodeName_ == 'BarHeight' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'BarHeight')
            ival_ = self.gds_validate_integer(ival_, node, 'BarHeight')
            self.BarHeight = ival_
            self.BarHeight_nsprefix_ = child_.prefix
        elif nodeName_ == 'ThinBarWidth' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'ThinBarWidth')
            ival_ = self.gds_validate_integer(ival_, node, 'ThinBarWidth')
            self.ThinBarWidth = ival_
            self.ThinBarWidth_nsprefix_ = child_.prefix
        elif nodeName_ == 'BarcodeSymbology':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'BarcodeSymbology')
            value_ = self.gds_validate_string(value_, node, 'BarcodeSymbology')
            self.BarcodeSymbology = value_
            self.BarcodeSymbology_nsprefix_ = child_.prefix
            # validate type BarcodeSymbologyType
            self.validate_BarcodeSymbologyType(self.BarcodeSymbology)
# end class CustomLabelBarcodeEntry


class CustomLabelBoxEntry(GeneratedsSuper):
    """Solid (filled) rectangular area on label."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, TopLeftCorner=None, BottomRightCorner=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.TopLeftCorner = TopLeftCorner
        self.TopLeftCorner_nsprefix_ = "ns"
        self.BottomRightCorner = BottomRightCorner
        self.BottomRightCorner_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CustomLabelBoxEntry)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CustomLabelBoxEntry.subclass:
            return CustomLabelBoxEntry.subclass(*args_, **kwargs_)
        else:
            return CustomLabelBoxEntry(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_TopLeftCorner(self):
        return self.TopLeftCorner
    def set_TopLeftCorner(self, TopLeftCorner):
        self.TopLeftCorner = TopLeftCorner
    def get_BottomRightCorner(self):
        return self.BottomRightCorner
    def set_BottomRightCorner(self, BottomRightCorner):
        self.BottomRightCorner = BottomRightCorner
    def hasContent_(self):
        if (
            self.TopLeftCorner is not None or
            self.BottomRightCorner is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomLabelBoxEntry', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CustomLabelBoxEntry')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CustomLabelBoxEntry':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CustomLabelBoxEntry')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CustomLabelBoxEntry', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CustomLabelBoxEntry'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomLabelBoxEntry', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TopLeftCorner is not None:
            namespaceprefix_ = self.TopLeftCorner_nsprefix_ + ':' if (UseCapturedNS_ and self.TopLeftCorner_nsprefix_) else ''
            self.TopLeftCorner.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TopLeftCorner', pretty_print=pretty_print)
        if self.BottomRightCorner is not None:
            namespaceprefix_ = self.BottomRightCorner_nsprefix_ + ':' if (UseCapturedNS_ and self.BottomRightCorner_nsprefix_) else ''
            self.BottomRightCorner.export(outfile, level, namespaceprefix_, namespacedef_='', name_='BottomRightCorner', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'TopLeftCorner':
            obj_ = CustomLabelPosition.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TopLeftCorner = obj_
            obj_.original_tagname_ = 'TopLeftCorner'
        elif nodeName_ == 'BottomRightCorner':
            obj_ = CustomLabelPosition.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.BottomRightCorner = obj_
            obj_.original_tagname_ = 'BottomRightCorner'
# end class CustomLabelBoxEntry


class CustomLabelDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CoordinateUnits=None, TextEntries=None, GraphicEntries=None, BoxEntries=None, TextBoxEntries=None, BarcodeEntries=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.CoordinateUnits = CoordinateUnits
        self.validate_CustomLabelCoordinateUnits(self.CoordinateUnits)
        self.CoordinateUnits_nsprefix_ = "ns"
        if TextEntries is None:
            self.TextEntries = []
        else:
            self.TextEntries = TextEntries
        self.TextEntries_nsprefix_ = "ns"
        if GraphicEntries is None:
            self.GraphicEntries = []
        else:
            self.GraphicEntries = GraphicEntries
        self.GraphicEntries_nsprefix_ = "ns"
        if BoxEntries is None:
            self.BoxEntries = []
        else:
            self.BoxEntries = BoxEntries
        self.BoxEntries_nsprefix_ = "ns"
        if TextBoxEntries is None:
            self.TextBoxEntries = []
        else:
            self.TextBoxEntries = TextBoxEntries
        self.TextBoxEntries_nsprefix_ = "ns"
        if BarcodeEntries is None:
            self.BarcodeEntries = []
        else:
            self.BarcodeEntries = BarcodeEntries
        self.BarcodeEntries_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CustomLabelDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CustomLabelDetail.subclass:
            return CustomLabelDetail.subclass(*args_, **kwargs_)
        else:
            return CustomLabelDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CoordinateUnits(self):
        return self.CoordinateUnits
    def set_CoordinateUnits(self, CoordinateUnits):
        self.CoordinateUnits = CoordinateUnits
    def get_TextEntries(self):
        return self.TextEntries
    def set_TextEntries(self, TextEntries):
        self.TextEntries = TextEntries
    def add_TextEntries(self, value):
        self.TextEntries.append(value)
    def insert_TextEntries_at(self, index, value):
        self.TextEntries.insert(index, value)
    def replace_TextEntries_at(self, index, value):
        self.TextEntries[index] = value
    def get_GraphicEntries(self):
        return self.GraphicEntries
    def set_GraphicEntries(self, GraphicEntries):
        self.GraphicEntries = GraphicEntries
    def add_GraphicEntries(self, value):
        self.GraphicEntries.append(value)
    def insert_GraphicEntries_at(self, index, value):
        self.GraphicEntries.insert(index, value)
    def replace_GraphicEntries_at(self, index, value):
        self.GraphicEntries[index] = value
    def get_BoxEntries(self):
        return self.BoxEntries
    def set_BoxEntries(self, BoxEntries):
        self.BoxEntries = BoxEntries
    def add_BoxEntries(self, value):
        self.BoxEntries.append(value)
    def insert_BoxEntries_at(self, index, value):
        self.BoxEntries.insert(index, value)
    def replace_BoxEntries_at(self, index, value):
        self.BoxEntries[index] = value
    def get_TextBoxEntries(self):
        return self.TextBoxEntries
    def set_TextBoxEntries(self, TextBoxEntries):
        self.TextBoxEntries = TextBoxEntries
    def add_TextBoxEntries(self, value):
        self.TextBoxEntries.append(value)
    def insert_TextBoxEntries_at(self, index, value):
        self.TextBoxEntries.insert(index, value)
    def replace_TextBoxEntries_at(self, index, value):
        self.TextBoxEntries[index] = value
    def get_BarcodeEntries(self):
        return self.BarcodeEntries
    def set_BarcodeEntries(self, BarcodeEntries):
        self.BarcodeEntries = BarcodeEntries
    def add_BarcodeEntries(self, value):
        self.BarcodeEntries.append(value)
    def insert_BarcodeEntries_at(self, index, value):
        self.BarcodeEntries.insert(index, value)
    def replace_BarcodeEntries_at(self, index, value):
        self.BarcodeEntries[index] = value
    def validate_CustomLabelCoordinateUnits(self, value):
        result = True
        # Validate type CustomLabelCoordinateUnits, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['MILS', 'PIXELS']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CustomLabelCoordinateUnits' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.CoordinateUnits is not None or
            self.TextEntries or
            self.GraphicEntries or
            self.BoxEntries or
            self.TextBoxEntries or
            self.BarcodeEntries
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomLabelDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CustomLabelDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CustomLabelDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CustomLabelDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CustomLabelDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CustomLabelDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomLabelDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CoordinateUnits is not None:
            namespaceprefix_ = self.CoordinateUnits_nsprefix_ + ':' if (UseCapturedNS_ and self.CoordinateUnits_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCoordinateUnits>%s</%sCoordinateUnits>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CoordinateUnits), input_name='CoordinateUnits')), namespaceprefix_ , eol_))
        for TextEntries_ in self.TextEntries:
            namespaceprefix_ = self.TextEntries_nsprefix_ + ':' if (UseCapturedNS_ and self.TextEntries_nsprefix_) else ''
            TextEntries_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TextEntries', pretty_print=pretty_print)
        for GraphicEntries_ in self.GraphicEntries:
            namespaceprefix_ = self.GraphicEntries_nsprefix_ + ':' if (UseCapturedNS_ and self.GraphicEntries_nsprefix_) else ''
            GraphicEntries_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='GraphicEntries', pretty_print=pretty_print)
        for BoxEntries_ in self.BoxEntries:
            namespaceprefix_ = self.BoxEntries_nsprefix_ + ':' if (UseCapturedNS_ and self.BoxEntries_nsprefix_) else ''
            BoxEntries_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='BoxEntries', pretty_print=pretty_print)
        for TextBoxEntries_ in self.TextBoxEntries:
            namespaceprefix_ = self.TextBoxEntries_nsprefix_ + ':' if (UseCapturedNS_ and self.TextBoxEntries_nsprefix_) else ''
            TextBoxEntries_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TextBoxEntries', pretty_print=pretty_print)
        for BarcodeEntries_ in self.BarcodeEntries:
            namespaceprefix_ = self.BarcodeEntries_nsprefix_ + ':' if (UseCapturedNS_ and self.BarcodeEntries_nsprefix_) else ''
            BarcodeEntries_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='BarcodeEntries', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CoordinateUnits':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CoordinateUnits')
            value_ = self.gds_validate_string(value_, node, 'CoordinateUnits')
            self.CoordinateUnits = value_
            self.CoordinateUnits_nsprefix_ = child_.prefix
            # validate type CustomLabelCoordinateUnits
            self.validate_CustomLabelCoordinateUnits(self.CoordinateUnits)
        elif nodeName_ == 'TextEntries':
            obj_ = CustomLabelTextEntry.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TextEntries.append(obj_)
            obj_.original_tagname_ = 'TextEntries'
        elif nodeName_ == 'GraphicEntries':
            obj_ = CustomLabelGraphicEntry.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.GraphicEntries.append(obj_)
            obj_.original_tagname_ = 'GraphicEntries'
        elif nodeName_ == 'BoxEntries':
            obj_ = CustomLabelBoxEntry.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.BoxEntries.append(obj_)
            obj_.original_tagname_ = 'BoxEntries'
        elif nodeName_ == 'TextBoxEntries':
            obj_ = CustomLabelTextBoxEntry.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TextBoxEntries.append(obj_)
            obj_.original_tagname_ = 'TextBoxEntries'
        elif nodeName_ == 'BarcodeEntries':
            obj_ = CustomLabelBarcodeEntry.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.BarcodeEntries.append(obj_)
            obj_.original_tagname_ = 'BarcodeEntries'
# end class CustomLabelDetail


class CustomLabelGraphicEntry(GeneratedsSuper):
    """Image to be included from printer's memory, or from a local file for
    offline clients."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Position=None, PrinterGraphicId=None, FileGraphicFullName=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Position = Position
        self.Position_nsprefix_ = "ns"
        self.PrinterGraphicId = PrinterGraphicId
        self.PrinterGraphicId_nsprefix_ = None
        self.FileGraphicFullName = FileGraphicFullName
        self.FileGraphicFullName_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CustomLabelGraphicEntry)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CustomLabelGraphicEntry.subclass:
            return CustomLabelGraphicEntry.subclass(*args_, **kwargs_)
        else:
            return CustomLabelGraphicEntry(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Position(self):
        return self.Position
    def set_Position(self, Position):
        self.Position = Position
    def get_PrinterGraphicId(self):
        return self.PrinterGraphicId
    def set_PrinterGraphicId(self, PrinterGraphicId):
        self.PrinterGraphicId = PrinterGraphicId
    def get_FileGraphicFullName(self):
        return self.FileGraphicFullName
    def set_FileGraphicFullName(self, FileGraphicFullName):
        self.FileGraphicFullName = FileGraphicFullName
    def hasContent_(self):
        if (
            self.Position is not None or
            self.PrinterGraphicId is not None or
            self.FileGraphicFullName is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomLabelGraphicEntry', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CustomLabelGraphicEntry')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CustomLabelGraphicEntry':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CustomLabelGraphicEntry')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CustomLabelGraphicEntry', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CustomLabelGraphicEntry'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomLabelGraphicEntry', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Position is not None:
            namespaceprefix_ = self.Position_nsprefix_ + ':' if (UseCapturedNS_ and self.Position_nsprefix_) else ''
            self.Position.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Position', pretty_print=pretty_print)
        if self.PrinterGraphicId is not None:
            namespaceprefix_ = self.PrinterGraphicId_nsprefix_ + ':' if (UseCapturedNS_ and self.PrinterGraphicId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPrinterGraphicId>%s</%sPrinterGraphicId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PrinterGraphicId), input_name='PrinterGraphicId')), namespaceprefix_ , eol_))
        if self.FileGraphicFullName is not None:
            namespaceprefix_ = self.FileGraphicFullName_nsprefix_ + ':' if (UseCapturedNS_ and self.FileGraphicFullName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFileGraphicFullName>%s</%sFileGraphicFullName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FileGraphicFullName), input_name='FileGraphicFullName')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Position':
            obj_ = CustomLabelPosition.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Position = obj_
            obj_.original_tagname_ = 'Position'
        elif nodeName_ == 'PrinterGraphicId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PrinterGraphicId')
            value_ = self.gds_validate_string(value_, node, 'PrinterGraphicId')
            self.PrinterGraphicId = value_
            self.PrinterGraphicId_nsprefix_ = child_.prefix
        elif nodeName_ == 'FileGraphicFullName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FileGraphicFullName')
            value_ = self.gds_validate_string(value_, node, 'FileGraphicFullName')
            self.FileGraphicFullName = value_
            self.FileGraphicFullName_nsprefix_ = child_.prefix
# end class CustomLabelGraphicEntry


class CustomLabelPosition(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, X=None, Y=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.X = X
        self.X_nsprefix_ = None
        self.Y = Y
        self.Y_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CustomLabelPosition)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CustomLabelPosition.subclass:
            return CustomLabelPosition.subclass(*args_, **kwargs_)
        else:
            return CustomLabelPosition(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_X(self):
        return self.X
    def set_X(self, X):
        self.X = X
    def get_Y(self):
        return self.Y
    def set_Y(self, Y):
        self.Y = Y
    def hasContent_(self):
        if (
            self.X is not None or
            self.Y is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomLabelPosition', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CustomLabelPosition')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CustomLabelPosition':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CustomLabelPosition')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CustomLabelPosition', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CustomLabelPosition'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomLabelPosition', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.X is not None:
            namespaceprefix_ = self.X_nsprefix_ + ':' if (UseCapturedNS_ and self.X_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sX>%s</%sX>%s' % (namespaceprefix_ , self.gds_format_integer(self.X, input_name='X'), namespaceprefix_ , eol_))
        if self.Y is not None:
            namespaceprefix_ = self.Y_nsprefix_ + ':' if (UseCapturedNS_ and self.Y_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sY>%s</%sY>%s' % (namespaceprefix_ , self.gds_format_integer(self.Y, input_name='Y'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'X' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'X')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'X')
            self.X = ival_
            self.X_nsprefix_ = child_.prefix
        elif nodeName_ == 'Y' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'Y')
            ival_ = self.gds_validate_integer(ival_, node, 'Y')
            self.Y = ival_
            self.Y_nsprefix_ = child_.prefix
# end class CustomLabelPosition


class CustomLabelTextBoxEntry(GeneratedsSuper):
    """Constructed string, based on format and zero or more data fields,
    printed in specified printer font (for thermal labels) or generic
    font/size (for plain paper labels)."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, TopLeftCorner=None, BottomRightCorner=None, Position=None, Format=None, DataFields=None, ThermalFontId=None, FontName=None, FontSize=None, Rotation=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.TopLeftCorner = TopLeftCorner
        self.TopLeftCorner_nsprefix_ = "ns"
        self.BottomRightCorner = BottomRightCorner
        self.BottomRightCorner_nsprefix_ = "ns"
        self.Position = Position
        self.Position_nsprefix_ = "ns"
        self.Format = Format
        self.Format_nsprefix_ = None
        if DataFields is None:
            self.DataFields = []
        else:
            self.DataFields = DataFields
        self.DataFields_nsprefix_ = None
        self.ThermalFontId = ThermalFontId
        self.ThermalFontId_nsprefix_ = None
        self.FontName = FontName
        self.FontName_nsprefix_ = None
        self.FontSize = FontSize
        self.FontSize_nsprefix_ = None
        self.Rotation = Rotation
        self.validate_RotationType(self.Rotation)
        self.Rotation_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CustomLabelTextBoxEntry)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CustomLabelTextBoxEntry.subclass:
            return CustomLabelTextBoxEntry.subclass(*args_, **kwargs_)
        else:
            return CustomLabelTextBoxEntry(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_TopLeftCorner(self):
        return self.TopLeftCorner
    def set_TopLeftCorner(self, TopLeftCorner):
        self.TopLeftCorner = TopLeftCorner
    def get_BottomRightCorner(self):
        return self.BottomRightCorner
    def set_BottomRightCorner(self, BottomRightCorner):
        self.BottomRightCorner = BottomRightCorner
    def get_Position(self):
        return self.Position
    def set_Position(self, Position):
        self.Position = Position
    def get_Format(self):
        return self.Format
    def set_Format(self, Format):
        self.Format = Format
    def get_DataFields(self):
        return self.DataFields
    def set_DataFields(self, DataFields):
        self.DataFields = DataFields
    def add_DataFields(self, value):
        self.DataFields.append(value)
    def insert_DataFields_at(self, index, value):
        self.DataFields.insert(index, value)
    def replace_DataFields_at(self, index, value):
        self.DataFields[index] = value
    def get_ThermalFontId(self):
        return self.ThermalFontId
    def set_ThermalFontId(self, ThermalFontId):
        self.ThermalFontId = ThermalFontId
    def get_FontName(self):
        return self.FontName
    def set_FontName(self, FontName):
        self.FontName = FontName
    def get_FontSize(self):
        return self.FontSize
    def set_FontSize(self, FontSize):
        self.FontSize = FontSize
    def get_Rotation(self):
        return self.Rotation
    def set_Rotation(self, Rotation):
        self.Rotation = Rotation
    def validate_RotationType(self, value):
        result = True
        # Validate type RotationType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['LEFT', 'NONE', 'RIGHT', 'UPSIDE_DOWN']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on RotationType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.TopLeftCorner is not None or
            self.BottomRightCorner is not None or
            self.Position is not None or
            self.Format is not None or
            self.DataFields or
            self.ThermalFontId is not None or
            self.FontName is not None or
            self.FontSize is not None or
            self.Rotation is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomLabelTextBoxEntry', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CustomLabelTextBoxEntry')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CustomLabelTextBoxEntry':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CustomLabelTextBoxEntry')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CustomLabelTextBoxEntry', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CustomLabelTextBoxEntry'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomLabelTextBoxEntry', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TopLeftCorner is not None:
            namespaceprefix_ = self.TopLeftCorner_nsprefix_ + ':' if (UseCapturedNS_ and self.TopLeftCorner_nsprefix_) else ''
            self.TopLeftCorner.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TopLeftCorner', pretty_print=pretty_print)
        if self.BottomRightCorner is not None:
            namespaceprefix_ = self.BottomRightCorner_nsprefix_ + ':' if (UseCapturedNS_ and self.BottomRightCorner_nsprefix_) else ''
            self.BottomRightCorner.export(outfile, level, namespaceprefix_, namespacedef_='', name_='BottomRightCorner', pretty_print=pretty_print)
        if self.Position is not None:
            namespaceprefix_ = self.Position_nsprefix_ + ':' if (UseCapturedNS_ and self.Position_nsprefix_) else ''
            self.Position.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Position', pretty_print=pretty_print)
        if self.Format is not None:
            namespaceprefix_ = self.Format_nsprefix_ + ':' if (UseCapturedNS_ and self.Format_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFormat>%s</%sFormat>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Format), input_name='Format')), namespaceprefix_ , eol_))
        for DataFields_ in self.DataFields:
            namespaceprefix_ = self.DataFields_nsprefix_ + ':' if (UseCapturedNS_ and self.DataFields_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDataFields>%s</%sDataFields>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(DataFields_), input_name='DataFields')), namespaceprefix_ , eol_))
        if self.ThermalFontId is not None:
            namespaceprefix_ = self.ThermalFontId_nsprefix_ + ':' if (UseCapturedNS_ and self.ThermalFontId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sThermalFontId>%s</%sThermalFontId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ThermalFontId), input_name='ThermalFontId')), namespaceprefix_ , eol_))
        if self.FontName is not None:
            namespaceprefix_ = self.FontName_nsprefix_ + ':' if (UseCapturedNS_ and self.FontName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFontName>%s</%sFontName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FontName), input_name='FontName')), namespaceprefix_ , eol_))
        if self.FontSize is not None:
            namespaceprefix_ = self.FontSize_nsprefix_ + ':' if (UseCapturedNS_ and self.FontSize_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFontSize>%s</%sFontSize>%s' % (namespaceprefix_ , self.gds_format_integer(self.FontSize, input_name='FontSize'), namespaceprefix_ , eol_))
        if self.Rotation is not None:
            namespaceprefix_ = self.Rotation_nsprefix_ + ':' if (UseCapturedNS_ and self.Rotation_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRotation>%s</%sRotation>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Rotation), input_name='Rotation')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'TopLeftCorner':
            obj_ = CustomLabelPosition.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TopLeftCorner = obj_
            obj_.original_tagname_ = 'TopLeftCorner'
        elif nodeName_ == 'BottomRightCorner':
            obj_ = CustomLabelPosition.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.BottomRightCorner = obj_
            obj_.original_tagname_ = 'BottomRightCorner'
        elif nodeName_ == 'Position':
            obj_ = CustomLabelPosition.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Position = obj_
            obj_.original_tagname_ = 'Position'
        elif nodeName_ == 'Format':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Format')
            value_ = self.gds_validate_string(value_, node, 'Format')
            self.Format = value_
            self.Format_nsprefix_ = child_.prefix
        elif nodeName_ == 'DataFields':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DataFields')
            value_ = self.gds_validate_string(value_, node, 'DataFields')
            self.DataFields.append(value_)
            self.DataFields_nsprefix_ = child_.prefix
        elif nodeName_ == 'ThermalFontId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ThermalFontId')
            value_ = self.gds_validate_string(value_, node, 'ThermalFontId')
            self.ThermalFontId = value_
            self.ThermalFontId_nsprefix_ = child_.prefix
        elif nodeName_ == 'FontName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FontName')
            value_ = self.gds_validate_string(value_, node, 'FontName')
            self.FontName = value_
            self.FontName_nsprefix_ = child_.prefix
        elif nodeName_ == 'FontSize' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'FontSize')
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'FontSize')
            self.FontSize = ival_
            self.FontSize_nsprefix_ = child_.prefix
        elif nodeName_ == 'Rotation':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Rotation')
            value_ = self.gds_validate_string(value_, node, 'Rotation')
            self.Rotation = value_
            self.Rotation_nsprefix_ = child_.prefix
            # validate type RotationType
            self.validate_RotationType(self.Rotation)
# end class CustomLabelTextBoxEntry


class CustomLabelTextEntry(GeneratedsSuper):
    """Constructed string, based on format and zero or more data fields,
    printed in specified printer font (for thermal labels) or generic
    font/size (for plain paper labels)."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Position=None, Format=None, DataFields=None, ThermalFontId=None, FontName=None, FontSize=None, Rotation=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Position = Position
        self.Position_nsprefix_ = "ns"
        self.Format = Format
        self.Format_nsprefix_ = None
        if DataFields is None:
            self.DataFields = []
        else:
            self.DataFields = DataFields
        self.DataFields_nsprefix_ = None
        self.ThermalFontId = ThermalFontId
        self.ThermalFontId_nsprefix_ = None
        self.FontName = FontName
        self.FontName_nsprefix_ = None
        self.FontSize = FontSize
        self.FontSize_nsprefix_ = None
        self.Rotation = Rotation
        self.validate_RotationType(self.Rotation)
        self.Rotation_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CustomLabelTextEntry)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CustomLabelTextEntry.subclass:
            return CustomLabelTextEntry.subclass(*args_, **kwargs_)
        else:
            return CustomLabelTextEntry(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Position(self):
        return self.Position
    def set_Position(self, Position):
        self.Position = Position
    def get_Format(self):
        return self.Format
    def set_Format(self, Format):
        self.Format = Format
    def get_DataFields(self):
        return self.DataFields
    def set_DataFields(self, DataFields):
        self.DataFields = DataFields
    def add_DataFields(self, value):
        self.DataFields.append(value)
    def insert_DataFields_at(self, index, value):
        self.DataFields.insert(index, value)
    def replace_DataFields_at(self, index, value):
        self.DataFields[index] = value
    def get_ThermalFontId(self):
        return self.ThermalFontId
    def set_ThermalFontId(self, ThermalFontId):
        self.ThermalFontId = ThermalFontId
    def get_FontName(self):
        return self.FontName
    def set_FontName(self, FontName):
        self.FontName = FontName
    def get_FontSize(self):
        return self.FontSize
    def set_FontSize(self, FontSize):
        self.FontSize = FontSize
    def get_Rotation(self):
        return self.Rotation
    def set_Rotation(self, Rotation):
        self.Rotation = Rotation
    def validate_RotationType(self, value):
        result = True
        # Validate type RotationType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['LEFT', 'NONE', 'RIGHT', 'UPSIDE_DOWN']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on RotationType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Position is not None or
            self.Format is not None or
            self.DataFields or
            self.ThermalFontId is not None or
            self.FontName is not None or
            self.FontSize is not None or
            self.Rotation is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomLabelTextEntry', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CustomLabelTextEntry')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CustomLabelTextEntry':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CustomLabelTextEntry')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CustomLabelTextEntry', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CustomLabelTextEntry'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomLabelTextEntry', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Position is not None:
            namespaceprefix_ = self.Position_nsprefix_ + ':' if (UseCapturedNS_ and self.Position_nsprefix_) else ''
            self.Position.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Position', pretty_print=pretty_print)
        if self.Format is not None:
            namespaceprefix_ = self.Format_nsprefix_ + ':' if (UseCapturedNS_ and self.Format_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFormat>%s</%sFormat>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Format), input_name='Format')), namespaceprefix_ , eol_))
        for DataFields_ in self.DataFields:
            namespaceprefix_ = self.DataFields_nsprefix_ + ':' if (UseCapturedNS_ and self.DataFields_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDataFields>%s</%sDataFields>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(DataFields_), input_name='DataFields')), namespaceprefix_ , eol_))
        if self.ThermalFontId is not None:
            namespaceprefix_ = self.ThermalFontId_nsprefix_ + ':' if (UseCapturedNS_ and self.ThermalFontId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sThermalFontId>%s</%sThermalFontId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ThermalFontId), input_name='ThermalFontId')), namespaceprefix_ , eol_))
        if self.FontName is not None:
            namespaceprefix_ = self.FontName_nsprefix_ + ':' if (UseCapturedNS_ and self.FontName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFontName>%s</%sFontName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FontName), input_name='FontName')), namespaceprefix_ , eol_))
        if self.FontSize is not None:
            namespaceprefix_ = self.FontSize_nsprefix_ + ':' if (UseCapturedNS_ and self.FontSize_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFontSize>%s</%sFontSize>%s' % (namespaceprefix_ , self.gds_format_integer(self.FontSize, input_name='FontSize'), namespaceprefix_ , eol_))
        if self.Rotation is not None:
            namespaceprefix_ = self.Rotation_nsprefix_ + ':' if (UseCapturedNS_ and self.Rotation_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRotation>%s</%sRotation>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Rotation), input_name='Rotation')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Position':
            obj_ = CustomLabelPosition.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Position = obj_
            obj_.original_tagname_ = 'Position'
        elif nodeName_ == 'Format':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Format')
            value_ = self.gds_validate_string(value_, node, 'Format')
            self.Format = value_
            self.Format_nsprefix_ = child_.prefix
        elif nodeName_ == 'DataFields':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DataFields')
            value_ = self.gds_validate_string(value_, node, 'DataFields')
            self.DataFields.append(value_)
            self.DataFields_nsprefix_ = child_.prefix
        elif nodeName_ == 'ThermalFontId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ThermalFontId')
            value_ = self.gds_validate_string(value_, node, 'ThermalFontId')
            self.ThermalFontId = value_
            self.ThermalFontId_nsprefix_ = child_.prefix
        elif nodeName_ == 'FontName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FontName')
            value_ = self.gds_validate_string(value_, node, 'FontName')
            self.FontName = value_
            self.FontName_nsprefix_ = child_.prefix
        elif nodeName_ == 'FontSize' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'FontSize')
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'FontSize')
            self.FontSize = ival_
            self.FontSize_nsprefix_ = child_.prefix
        elif nodeName_ == 'Rotation':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Rotation')
            value_ = self.gds_validate_string(value_, node, 'Rotation')
            self.Rotation = value_
            self.Rotation_nsprefix_ = child_.prefix
            # validate type RotationType
            self.validate_RotationType(self.Rotation)
# end class CustomLabelTextEntry


class CustomRatingOptionDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Options=None, CustomDiscountExclusionDetail=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Options is None:
            self.Options = []
        else:
            self.Options = Options
        self.Options_nsprefix_ = "ns"
        self.CustomDiscountExclusionDetail = CustomDiscountExclusionDetail
        self.CustomDiscountExclusionDetail_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CustomRatingOptionDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CustomRatingOptionDetail.subclass:
            return CustomRatingOptionDetail.subclass(*args_, **kwargs_)
        else:
            return CustomRatingOptionDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Options(self):
        return self.Options
    def set_Options(self, Options):
        self.Options = Options
    def add_Options(self, value):
        self.Options.append(value)
    def insert_Options_at(self, index, value):
        self.Options.insert(index, value)
    def replace_Options_at(self, index, value):
        self.Options[index] = value
    def get_CustomDiscountExclusionDetail(self):
        return self.CustomDiscountExclusionDetail
    def set_CustomDiscountExclusionDetail(self, CustomDiscountExclusionDetail):
        self.CustomDiscountExclusionDetail = CustomDiscountExclusionDetail
    def validate_CustomRatingOptionType(self, value):
        result = True
        # Validate type CustomRatingOptionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['DISCOUNT_EXCLUSION']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CustomRatingOptionType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Options or
            self.CustomDiscountExclusionDetail is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomRatingOptionDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CustomRatingOptionDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CustomRatingOptionDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CustomRatingOptionDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CustomRatingOptionDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CustomRatingOptionDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomRatingOptionDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Options_ in self.Options:
            namespaceprefix_ = self.Options_nsprefix_ + ':' if (UseCapturedNS_ and self.Options_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOptions>%s</%sOptions>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Options_), input_name='Options')), namespaceprefix_ , eol_))
        if self.CustomDiscountExclusionDetail is not None:
            namespaceprefix_ = self.CustomDiscountExclusionDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomDiscountExclusionDetail_nsprefix_) else ''
            self.CustomDiscountExclusionDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CustomDiscountExclusionDetail', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Options':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Options')
            value_ = self.gds_validate_string(value_, node, 'Options')
            self.Options.append(value_)
            self.Options_nsprefix_ = child_.prefix
            # validate type CustomRatingOptionType
            self.validate_CustomRatingOptionType(self.Options[-1])
        elif nodeName_ == 'CustomDiscountExclusionDetail':
            obj_ = CustomDiscountExclusionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CustomDiscountExclusionDetail = obj_
            obj_.original_tagname_ = 'CustomDiscountExclusionDetail'
# end class CustomRatingOptionDetail


class CustomTransitTimeDetail(GeneratedsSuper):
    """Specifies custom transit time to be applied to the shipment."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Key=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Key = Key
        self.Key_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CustomTransitTimeDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CustomTransitTimeDetail.subclass:
            return CustomTransitTimeDetail.subclass(*args_, **kwargs_)
        else:
            return CustomTransitTimeDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Key(self):
        return self.Key
    def set_Key(self, Key):
        self.Key = Key
    def hasContent_(self):
        if (
            self.Key is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomTransitTimeDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CustomTransitTimeDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CustomTransitTimeDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CustomTransitTimeDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CustomTransitTimeDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CustomTransitTimeDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomTransitTimeDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Key is not None:
            namespaceprefix_ = self.Key_nsprefix_ + ':' if (UseCapturedNS_ and self.Key_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sKey>%s</%sKey>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Key), input_name='Key')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Key':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Key')
            value_ = self.gds_validate_string(value_, node, 'Key')
            self.Key = value_
            self.Key_nsprefix_ = child_.prefix
# end class CustomTransitTimeDetail


class CustomerAccountFranchiseeDetail(GeneratedsSuper):
    """Describes the Franchisee relationship(s) of a customer account."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CountryCodes=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if CountryCodes is None:
            self.CountryCodes = []
        else:
            self.CountryCodes = CountryCodes
        self.CountryCodes_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CustomerAccountFranchiseeDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CustomerAccountFranchiseeDetail.subclass:
            return CustomerAccountFranchiseeDetail.subclass(*args_, **kwargs_)
        else:
            return CustomerAccountFranchiseeDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CountryCodes(self):
        return self.CountryCodes
    def set_CountryCodes(self, CountryCodes):
        self.CountryCodes = CountryCodes
    def add_CountryCodes(self, value):
        self.CountryCodes.append(value)
    def insert_CountryCodes_at(self, index, value):
        self.CountryCodes.insert(index, value)
    def replace_CountryCodes_at(self, index, value):
        self.CountryCodes[index] = value
    def hasContent_(self):
        if (
            self.CountryCodes
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomerAccountFranchiseeDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CustomerAccountFranchiseeDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CustomerAccountFranchiseeDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CustomerAccountFranchiseeDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CustomerAccountFranchiseeDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CustomerAccountFranchiseeDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomerAccountFranchiseeDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for CountryCodes_ in self.CountryCodes:
            namespaceprefix_ = self.CountryCodes_nsprefix_ + ':' if (UseCapturedNS_ and self.CountryCodes_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountryCodes>%s</%sCountryCodes>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(CountryCodes_), input_name='CountryCodes')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CountryCodes':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CountryCodes')
            value_ = self.gds_validate_string(value_, node, 'CountryCodes')
            self.CountryCodes.append(value_)
            self.CountryCodes_nsprefix_ = child_.prefix
# end class CustomerAccountFranchiseeDetail


class CustomerCommunicationDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PreferredCommunicationCodeType=None, Localization=None, EmailNotificationFormat=None, MarketingCorrespondenceTypes=None, AttentionToName=None, SocialMediaDetails=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PreferredCommunicationCodeType = PreferredCommunicationCodeType
        self.PreferredCommunicationCodeType_nsprefix_ = None
        self.Localization = Localization
        self.Localization_nsprefix_ = "ns"
        self.EmailNotificationFormat = EmailNotificationFormat
        self.validate_EMailNotificationFormatType(self.EmailNotificationFormat)
        self.EmailNotificationFormat_nsprefix_ = "ns"
        if MarketingCorrespondenceTypes is None:
            self.MarketingCorrespondenceTypes = []
        else:
            self.MarketingCorrespondenceTypes = MarketingCorrespondenceTypes
        self.MarketingCorrespondenceTypes_nsprefix_ = "ns"
        self.AttentionToName = AttentionToName
        self.AttentionToName_nsprefix_ = None
        if SocialMediaDetails is None:
            self.SocialMediaDetails = []
        else:
            self.SocialMediaDetails = SocialMediaDetails
        self.SocialMediaDetails_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CustomerCommunicationDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CustomerCommunicationDetail.subclass:
            return CustomerCommunicationDetail.subclass(*args_, **kwargs_)
        else:
            return CustomerCommunicationDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PreferredCommunicationCodeType(self):
        return self.PreferredCommunicationCodeType
    def set_PreferredCommunicationCodeType(self, PreferredCommunicationCodeType):
        self.PreferredCommunicationCodeType = PreferredCommunicationCodeType
    def get_Localization(self):
        return self.Localization
    def set_Localization(self, Localization):
        self.Localization = Localization
    def get_EmailNotificationFormat(self):
        return self.EmailNotificationFormat
    def set_EmailNotificationFormat(self, EmailNotificationFormat):
        self.EmailNotificationFormat = EmailNotificationFormat
    def get_MarketingCorrespondenceTypes(self):
        return self.MarketingCorrespondenceTypes
    def set_MarketingCorrespondenceTypes(self, MarketingCorrespondenceTypes):
        self.MarketingCorrespondenceTypes = MarketingCorrespondenceTypes
    def add_MarketingCorrespondenceTypes(self, value):
        self.MarketingCorrespondenceTypes.append(value)
    def insert_MarketingCorrespondenceTypes_at(self, index, value):
        self.MarketingCorrespondenceTypes.insert(index, value)
    def replace_MarketingCorrespondenceTypes_at(self, index, value):
        self.MarketingCorrespondenceTypes[index] = value
    def get_AttentionToName(self):
        return self.AttentionToName
    def set_AttentionToName(self, AttentionToName):
        self.AttentionToName = AttentionToName
    def get_SocialMediaDetails(self):
        return self.SocialMediaDetails
    def set_SocialMediaDetails(self, SocialMediaDetails):
        self.SocialMediaDetails = SocialMediaDetails
    def add_SocialMediaDetails(self, value):
        self.SocialMediaDetails.append(value)
    def insert_SocialMediaDetails_at(self, index, value):
        self.SocialMediaDetails.insert(index, value)
    def replace_SocialMediaDetails_at(self, index, value):
        self.SocialMediaDetails[index] = value
    def validate_EMailNotificationFormatType(self, value):
        result = True
        # Validate type EMailNotificationFormatType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['HTML', 'TEXT', 'WIRELESS']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on EMailNotificationFormatType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_CorrespondenceType(self, value):
        result = True
        # Validate type CorrespondenceType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['DIRECT_MAIL', 'EMAIL', 'SOCIAL_MEDIA', 'TEXT_MESSAGE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CorrespondenceType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.PreferredCommunicationCodeType is not None or
            self.Localization is not None or
            self.EmailNotificationFormat is not None or
            self.MarketingCorrespondenceTypes or
            self.AttentionToName is not None or
            self.SocialMediaDetails
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomerCommunicationDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CustomerCommunicationDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CustomerCommunicationDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CustomerCommunicationDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CustomerCommunicationDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CustomerCommunicationDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomerCommunicationDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PreferredCommunicationCodeType is not None:
            namespaceprefix_ = self.PreferredCommunicationCodeType_nsprefix_ + ':' if (UseCapturedNS_ and self.PreferredCommunicationCodeType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPreferredCommunicationCodeType>%s</%sPreferredCommunicationCodeType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PreferredCommunicationCodeType), input_name='PreferredCommunicationCodeType')), namespaceprefix_ , eol_))
        if self.Localization is not None:
            namespaceprefix_ = self.Localization_nsprefix_ + ':' if (UseCapturedNS_ and self.Localization_nsprefix_) else ''
            self.Localization.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Localization', pretty_print=pretty_print)
        if self.EmailNotificationFormat is not None:
            namespaceprefix_ = self.EmailNotificationFormat_nsprefix_ + ':' if (UseCapturedNS_ and self.EmailNotificationFormat_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEmailNotificationFormat>%s</%sEmailNotificationFormat>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EmailNotificationFormat), input_name='EmailNotificationFormat')), namespaceprefix_ , eol_))
        for MarketingCorrespondenceTypes_ in self.MarketingCorrespondenceTypes:
            namespaceprefix_ = self.MarketingCorrespondenceTypes_nsprefix_ + ':' if (UseCapturedNS_ and self.MarketingCorrespondenceTypes_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMarketingCorrespondenceTypes>%s</%sMarketingCorrespondenceTypes>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(MarketingCorrespondenceTypes_), input_name='MarketingCorrespondenceTypes')), namespaceprefix_ , eol_))
        if self.AttentionToName is not None:
            namespaceprefix_ = self.AttentionToName_nsprefix_ + ':' if (UseCapturedNS_ and self.AttentionToName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAttentionToName>%s</%sAttentionToName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AttentionToName), input_name='AttentionToName')), namespaceprefix_ , eol_))
        for SocialMediaDetails_ in self.SocialMediaDetails:
            namespaceprefix_ = self.SocialMediaDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.SocialMediaDetails_nsprefix_) else ''
            SocialMediaDetails_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SocialMediaDetails', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PreferredCommunicationCodeType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PreferredCommunicationCodeType')
            value_ = self.gds_validate_string(value_, node, 'PreferredCommunicationCodeType')
            self.PreferredCommunicationCodeType = value_
            self.PreferredCommunicationCodeType_nsprefix_ = child_.prefix
        elif nodeName_ == 'Localization':
            obj_ = Localization.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Localization = obj_
            obj_.original_tagname_ = 'Localization'
        elif nodeName_ == 'EmailNotificationFormat':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EmailNotificationFormat')
            value_ = self.gds_validate_string(value_, node, 'EmailNotificationFormat')
            self.EmailNotificationFormat = value_
            self.EmailNotificationFormat_nsprefix_ = child_.prefix
            # validate type EMailNotificationFormatType
            self.validate_EMailNotificationFormatType(self.EmailNotificationFormat)
        elif nodeName_ == 'MarketingCorrespondenceTypes':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MarketingCorrespondenceTypes')
            value_ = self.gds_validate_string(value_, node, 'MarketingCorrespondenceTypes')
            self.MarketingCorrespondenceTypes.append(value_)
            self.MarketingCorrespondenceTypes_nsprefix_ = child_.prefix
            # validate type CorrespondenceType
            self.validate_CorrespondenceType(self.MarketingCorrespondenceTypes[-1])
        elif nodeName_ == 'AttentionToName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AttentionToName')
            value_ = self.gds_validate_string(value_, node, 'AttentionToName')
            self.AttentionToName = value_
            self.AttentionToName_nsprefix_ = child_.prefix
        elif nodeName_ == 'SocialMediaDetails':
            obj_ = SocialMediaDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SocialMediaDetails.append(obj_)
            obj_.original_tagname_ = 'SocialMediaDetails'
# end class CustomerCommunicationDetail


class CustomerDiscountDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, DiscountsApplied=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.DiscountsApplied = DiscountsApplied
        self.DiscountsApplied_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CustomerDiscountDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CustomerDiscountDetail.subclass:
            return CustomerDiscountDetail.subclass(*args_, **kwargs_)
        else:
            return CustomerDiscountDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DiscountsApplied(self):
        return self.DiscountsApplied
    def set_DiscountsApplied(self, DiscountsApplied):
        self.DiscountsApplied = DiscountsApplied
    def hasContent_(self):
        if (
            self.DiscountsApplied is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomerDiscountDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CustomerDiscountDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CustomerDiscountDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CustomerDiscountDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CustomerDiscountDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CustomerDiscountDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomerDiscountDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DiscountsApplied is not None:
            namespaceprefix_ = self.DiscountsApplied_nsprefix_ + ':' if (UseCapturedNS_ and self.DiscountsApplied_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDiscountsApplied>%s</%sDiscountsApplied>%s' % (namespaceprefix_ , self.gds_format_boolean(self.DiscountsApplied, input_name='DiscountsApplied'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DiscountsApplied':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'DiscountsApplied')
            ival_ = self.gds_validate_boolean(ival_, node, 'DiscountsApplied')
            self.DiscountsApplied = ival_
            self.DiscountsApplied_nsprefix_ = child_.prefix
# end class CustomerDiscountDetail


class CustomerImageUsage(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, Id=None, InternalId=None, InternalImageType=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.validate_CustomerImageUsageType(self.Type)
        self.Type_nsprefix_ = "ns"
        self.Id = Id
        self.validate_ImageId(self.Id)
        self.Id_nsprefix_ = "ns"
        self.InternalId = InternalId
        self.InternalId_nsprefix_ = None
        self.InternalImageType = InternalImageType
        self.validate_InternalImageType(self.InternalImageType)
        self.InternalImageType_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CustomerImageUsage)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CustomerImageUsage.subclass:
            return CustomerImageUsage.subclass(*args_, **kwargs_)
        else:
            return CustomerImageUsage(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_Id(self):
        return self.Id
    def set_Id(self, Id):
        self.Id = Id
    def get_InternalId(self):
        return self.InternalId
    def set_InternalId(self, InternalId):
        self.InternalId = InternalId
    def get_InternalImageType(self):
        return self.InternalImageType
    def set_InternalImageType(self, InternalImageType):
        self.InternalImageType = InternalImageType
    def validate_CustomerImageUsageType(self, value):
        result = True
        # Validate type CustomerImageUsageType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['LETTER_HEAD', 'SIGNATURE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CustomerImageUsageType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_ImageId(self, value):
        result = True
        # Validate type ImageId, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['IMAGE_1', 'IMAGE_2', 'IMAGE_3', 'IMAGE_4', 'IMAGE_5']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ImageId' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_InternalImageType(self, value):
        result = True
        # Validate type InternalImageType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['LETTER_HEAD', 'SIGNATURE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on InternalImageType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Type is not None or
            self.Id is not None or
            self.InternalId is not None or
            self.InternalImageType is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomerImageUsage', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CustomerImageUsage')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CustomerImageUsage':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CustomerImageUsage')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CustomerImageUsage', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CustomerImageUsage'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomerImageUsage', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.Id is not None:
            namespaceprefix_ = self.Id_nsprefix_ + ':' if (UseCapturedNS_ and self.Id_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sId>%s</%sId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Id), input_name='Id')), namespaceprefix_ , eol_))
        if self.InternalId is not None:
            namespaceprefix_ = self.InternalId_nsprefix_ + ':' if (UseCapturedNS_ and self.InternalId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInternalId>%s</%sInternalId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InternalId), input_name='InternalId')), namespaceprefix_ , eol_))
        if self.InternalImageType is not None:
            namespaceprefix_ = self.InternalImageType_nsprefix_ + ':' if (UseCapturedNS_ and self.InternalImageType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInternalImageType>%s</%sInternalImageType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InternalImageType), input_name='InternalImageType')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type CustomerImageUsageType
            self.validate_CustomerImageUsageType(self.Type)
        elif nodeName_ == 'Id':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Id')
            value_ = self.gds_validate_string(value_, node, 'Id')
            self.Id = value_
            self.Id_nsprefix_ = child_.prefix
            # validate type ImageId
            self.validate_ImageId(self.Id)
        elif nodeName_ == 'InternalId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'InternalId')
            value_ = self.gds_validate_string(value_, node, 'InternalId')
            self.InternalId = value_
            self.InternalId_nsprefix_ = child_.prefix
        elif nodeName_ == 'InternalImageType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'InternalImageType')
            value_ = self.gds_validate_string(value_, node, 'InternalImageType')
            self.InternalImageType = value_
            self.InternalImageType_nsprefix_ = child_.prefix
            # validate type InternalImageType
            self.validate_InternalImageType(self.InternalImageType)
# end class CustomerImageUsage


class CustomerProfileBankDetail(GeneratedsSuper):
    """Bank information for the customer profile"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Id=None, AccountNumber=None, GiroNumber=None, Domicile=None, BranchId=None, Address=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Id = Id
        self.Id_nsprefix_ = None
        self.AccountNumber = AccountNumber
        self.AccountNumber_nsprefix_ = None
        self.GiroNumber = GiroNumber
        self.GiroNumber_nsprefix_ = None
        self.Domicile = Domicile
        self.Domicile_nsprefix_ = None
        self.BranchId = BranchId
        self.BranchId_nsprefix_ = None
        self.Address = Address
        self.Address_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CustomerProfileBankDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CustomerProfileBankDetail.subclass:
            return CustomerProfileBankDetail.subclass(*args_, **kwargs_)
        else:
            return CustomerProfileBankDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Id(self):
        return self.Id
    def set_Id(self, Id):
        self.Id = Id
    def get_AccountNumber(self):
        return self.AccountNumber
    def set_AccountNumber(self, AccountNumber):
        self.AccountNumber = AccountNumber
    def get_GiroNumber(self):
        return self.GiroNumber
    def set_GiroNumber(self, GiroNumber):
        self.GiroNumber = GiroNumber
    def get_Domicile(self):
        return self.Domicile
    def set_Domicile(self, Domicile):
        self.Domicile = Domicile
    def get_BranchId(self):
        return self.BranchId
    def set_BranchId(self, BranchId):
        self.BranchId = BranchId
    def get_Address(self):
        return self.Address
    def set_Address(self, Address):
        self.Address = Address
    def hasContent_(self):
        if (
            self.Id is not None or
            self.AccountNumber is not None or
            self.GiroNumber is not None or
            self.Domicile is not None or
            self.BranchId is not None or
            self.Address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomerProfileBankDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CustomerProfileBankDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CustomerProfileBankDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CustomerProfileBankDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CustomerProfileBankDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CustomerProfileBankDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomerProfileBankDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Id is not None:
            namespaceprefix_ = self.Id_nsprefix_ + ':' if (UseCapturedNS_ and self.Id_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sId>%s</%sId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Id), input_name='Id')), namespaceprefix_ , eol_))
        if self.AccountNumber is not None:
            namespaceprefix_ = self.AccountNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.AccountNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAccountNumber>%s</%sAccountNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AccountNumber), input_name='AccountNumber')), namespaceprefix_ , eol_))
        if self.GiroNumber is not None:
            namespaceprefix_ = self.GiroNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.GiroNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGiroNumber>%s</%sGiroNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.GiroNumber), input_name='GiroNumber')), namespaceprefix_ , eol_))
        if self.Domicile is not None:
            namespaceprefix_ = self.Domicile_nsprefix_ + ':' if (UseCapturedNS_ and self.Domicile_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDomicile>%s</%sDomicile>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Domicile), input_name='Domicile')), namespaceprefix_ , eol_))
        if self.BranchId is not None:
            namespaceprefix_ = self.BranchId_nsprefix_ + ':' if (UseCapturedNS_ and self.BranchId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBranchId>%s</%sBranchId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BranchId), input_name='BranchId')), namespaceprefix_ , eol_))
        if self.Address is not None:
            namespaceprefix_ = self.Address_nsprefix_ + ':' if (UseCapturedNS_ and self.Address_nsprefix_) else ''
            self.Address.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Address', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Id':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Id')
            value_ = self.gds_validate_string(value_, node, 'Id')
            self.Id = value_
            self.Id_nsprefix_ = child_.prefix
        elif nodeName_ == 'AccountNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AccountNumber')
            value_ = self.gds_validate_string(value_, node, 'AccountNumber')
            self.AccountNumber = value_
            self.AccountNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'GiroNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'GiroNumber')
            value_ = self.gds_validate_string(value_, node, 'GiroNumber')
            self.GiroNumber = value_
            self.GiroNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'Domicile':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Domicile')
            value_ = self.gds_validate_string(value_, node, 'Domicile')
            self.Domicile = value_
            self.Domicile_nsprefix_ = child_.prefix
        elif nodeName_ == 'BranchId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'BranchId')
            value_ = self.gds_validate_string(value_, node, 'BranchId')
            self.BranchId = value_
            self.BranchId_nsprefix_ = child_.prefix
        elif nodeName_ == 'Address':
            obj_ = Address.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
# end class CustomerProfileBankDetail


class CustomerProfileVATDetail(GeneratedsSuper):
    """Specifies how VAT (value added tax) is applied to the customer's
    account."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ResponseCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ResponseCode = ResponseCode
        self.ResponseCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CustomerProfileVATDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CustomerProfileVATDetail.subclass:
            return CustomerProfileVATDetail.subclass(*args_, **kwargs_)
        else:
            return CustomerProfileVATDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ResponseCode(self):
        return self.ResponseCode
    def set_ResponseCode(self, ResponseCode):
        self.ResponseCode = ResponseCode
    def hasContent_(self):
        if (
            self.ResponseCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomerProfileVATDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CustomerProfileVATDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CustomerProfileVATDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CustomerProfileVATDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CustomerProfileVATDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CustomerProfileVATDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomerProfileVATDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ResponseCode is not None:
            namespaceprefix_ = self.ResponseCode_nsprefix_ + ':' if (UseCapturedNS_ and self.ResponseCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sResponseCode>%s</%sResponseCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ResponseCode), input_name='ResponseCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ResponseCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ResponseCode')
            value_ = self.gds_validate_string(value_, node, 'ResponseCode')
            self.ResponseCode = value_
            self.ResponseCode_nsprefix_ = child_.prefix
# end class CustomerProfileVATDetail


class CustomerReference(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CustomerReferenceType=None, Value=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.CustomerReferenceType = CustomerReferenceType
        self.validate_CustomerReferenceType(self.CustomerReferenceType)
        self.CustomerReferenceType_nsprefix_ = "ns"
        self.Value = Value
        self.Value_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CustomerReference)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CustomerReference.subclass:
            return CustomerReference.subclass(*args_, **kwargs_)
        else:
            return CustomerReference(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CustomerReferenceType(self):
        return self.CustomerReferenceType
    def set_CustomerReferenceType(self, CustomerReferenceType):
        self.CustomerReferenceType = CustomerReferenceType
    def get_Value(self):
        return self.Value
    def set_Value(self, Value):
        self.Value = Value
    def validate_CustomerReferenceType(self, value):
        result = True
        # Validate type CustomerReferenceType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BILL_OF_LADING', 'CUSTOMER_REFERENCE', 'DEPARTMENT_NUMBER', 'ELECTRONIC_PRODUCT_CODE', 'INTRACOUNTRY_REGULATORY_REFERENCE', 'INVOICE_NUMBER', 'P_O_NUMBER', 'RMA_ASSOCIATION', 'SHIPMENT_INTEGRITY', 'STORE_NUMBER']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CustomerReferenceType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.CustomerReferenceType is not None or
            self.Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomerReference', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CustomerReference')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CustomerReference':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CustomerReference')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CustomerReference', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CustomerReference'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomerReference', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CustomerReferenceType is not None:
            namespaceprefix_ = self.CustomerReferenceType_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomerReferenceType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCustomerReferenceType>%s</%sCustomerReferenceType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CustomerReferenceType), input_name='CustomerReferenceType')), namespaceprefix_ , eol_))
        if self.Value is not None:
            namespaceprefix_ = self.Value_nsprefix_ + ':' if (UseCapturedNS_ and self.Value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValue>%s</%sValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Value), input_name='Value')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CustomerReferenceType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CustomerReferenceType')
            value_ = self.gds_validate_string(value_, node, 'CustomerReferenceType')
            self.CustomerReferenceType = value_
            self.CustomerReferenceType_nsprefix_ = child_.prefix
            # validate type CustomerReferenceType
            self.validate_CustomerReferenceType(self.CustomerReferenceType)
        elif nodeName_ == 'Value':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Value')
            value_ = self.gds_validate_string(value_, node, 'Value')
            self.Value = value_
            self.Value_nsprefix_ = child_.prefix
# end class CustomerReference


class CustomerRevenueDetail(GeneratedsSuper):
    """Specifies details used for billing and invoicing the account."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CreditLimit=None, DeclinedReason=None, BillingAttributes=None, ClearanceBillingCycle=None, BillingSettlementLevel=None, BillingExtendedInclusionDays=None, BillingMedium=None, InternationalBillingMedium=None, InternationalTransportationInvoiceBypassCode=None, BillingCycle=None, InternationalBillingCycle=None, BillingClosingDay=None, CashOnlyDate=None, PreferredCurrencyType=None, CollectionZone=None, NumberOfDaysToPayInvoice=None, NumberOfDaysToPayDuties=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.CreditLimit = CreditLimit
        self.CreditLimit_nsprefix_ = None
        self.DeclinedReason = DeclinedReason
        self.DeclinedReason_nsprefix_ = None
        if BillingAttributes is None:
            self.BillingAttributes = []
        else:
            self.BillingAttributes = BillingAttributes
        self.BillingAttributes_nsprefix_ = "ns"
        self.ClearanceBillingCycle = ClearanceBillingCycle
        self.ClearanceBillingCycle_nsprefix_ = None
        self.BillingSettlementLevel = BillingSettlementLevel
        self.validate_CustomerBillingSettlementLevelType(self.BillingSettlementLevel)
        self.BillingSettlementLevel_nsprefix_ = "ns"
        self.BillingExtendedInclusionDays = BillingExtendedInclusionDays
        self.BillingExtendedInclusionDays_nsprefix_ = None
        self.BillingMedium = BillingMedium
        self.BillingMedium_nsprefix_ = None
        self.InternationalBillingMedium = InternationalBillingMedium
        self.InternationalBillingMedium_nsprefix_ = None
        self.InternationalTransportationInvoiceBypassCode = InternationalTransportationInvoiceBypassCode
        self.InternationalTransportationInvoiceBypassCode_nsprefix_ = None
        self.BillingCycle = BillingCycle
        self.BillingCycle_nsprefix_ = None
        self.InternationalBillingCycle = InternationalBillingCycle
        self.InternationalBillingCycle_nsprefix_ = None
        self.BillingClosingDay = BillingClosingDay
        self.BillingClosingDay_nsprefix_ = None
        if isinstance(CashOnlyDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(CashOnlyDate, '%Y-%m-%d').date()
        else:
            initvalue_ = CashOnlyDate
        self.CashOnlyDate = initvalue_
        self.CashOnlyDate_nsprefix_ = None
        self.PreferredCurrencyType = PreferredCurrencyType
        self.PreferredCurrencyType_nsprefix_ = None
        self.CollectionZone = CollectionZone
        self.CollectionZone_nsprefix_ = None
        self.NumberOfDaysToPayInvoice = NumberOfDaysToPayInvoice
        self.NumberOfDaysToPayInvoice_nsprefix_ = None
        self.NumberOfDaysToPayDuties = NumberOfDaysToPayDuties
        self.NumberOfDaysToPayDuties_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CustomerRevenueDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CustomerRevenueDetail.subclass:
            return CustomerRevenueDetail.subclass(*args_, **kwargs_)
        else:
            return CustomerRevenueDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CreditLimit(self):
        return self.CreditLimit
    def set_CreditLimit(self, CreditLimit):
        self.CreditLimit = CreditLimit
    def get_DeclinedReason(self):
        return self.DeclinedReason
    def set_DeclinedReason(self, DeclinedReason):
        self.DeclinedReason = DeclinedReason
    def get_BillingAttributes(self):
        return self.BillingAttributes
    def set_BillingAttributes(self, BillingAttributes):
        self.BillingAttributes = BillingAttributes
    def add_BillingAttributes(self, value):
        self.BillingAttributes.append(value)
    def insert_BillingAttributes_at(self, index, value):
        self.BillingAttributes.insert(index, value)
    def replace_BillingAttributes_at(self, index, value):
        self.BillingAttributes[index] = value
    def get_ClearanceBillingCycle(self):
        return self.ClearanceBillingCycle
    def set_ClearanceBillingCycle(self, ClearanceBillingCycle):
        self.ClearanceBillingCycle = ClearanceBillingCycle
    def get_BillingSettlementLevel(self):
        return self.BillingSettlementLevel
    def set_BillingSettlementLevel(self, BillingSettlementLevel):
        self.BillingSettlementLevel = BillingSettlementLevel
    def get_BillingExtendedInclusionDays(self):
        return self.BillingExtendedInclusionDays
    def set_BillingExtendedInclusionDays(self, BillingExtendedInclusionDays):
        self.BillingExtendedInclusionDays = BillingExtendedInclusionDays
    def get_BillingMedium(self):
        return self.BillingMedium
    def set_BillingMedium(self, BillingMedium):
        self.BillingMedium = BillingMedium
    def get_InternationalBillingMedium(self):
        return self.InternationalBillingMedium
    def set_InternationalBillingMedium(self, InternationalBillingMedium):
        self.InternationalBillingMedium = InternationalBillingMedium
    def get_InternationalTransportationInvoiceBypassCode(self):
        return self.InternationalTransportationInvoiceBypassCode
    def set_InternationalTransportationInvoiceBypassCode(self, InternationalTransportationInvoiceBypassCode):
        self.InternationalTransportationInvoiceBypassCode = InternationalTransportationInvoiceBypassCode
    def get_BillingCycle(self):
        return self.BillingCycle
    def set_BillingCycle(self, BillingCycle):
        self.BillingCycle = BillingCycle
    def get_InternationalBillingCycle(self):
        return self.InternationalBillingCycle
    def set_InternationalBillingCycle(self, InternationalBillingCycle):
        self.InternationalBillingCycle = InternationalBillingCycle
    def get_BillingClosingDay(self):
        return self.BillingClosingDay
    def set_BillingClosingDay(self, BillingClosingDay):
        self.BillingClosingDay = BillingClosingDay
    def get_CashOnlyDate(self):
        return self.CashOnlyDate
    def set_CashOnlyDate(self, CashOnlyDate):
        self.CashOnlyDate = CashOnlyDate
    def get_PreferredCurrencyType(self):
        return self.PreferredCurrencyType
    def set_PreferredCurrencyType(self, PreferredCurrencyType):
        self.PreferredCurrencyType = PreferredCurrencyType
    def get_CollectionZone(self):
        return self.CollectionZone
    def set_CollectionZone(self, CollectionZone):
        self.CollectionZone = CollectionZone
    def get_NumberOfDaysToPayInvoice(self):
        return self.NumberOfDaysToPayInvoice
    def set_NumberOfDaysToPayInvoice(self, NumberOfDaysToPayInvoice):
        self.NumberOfDaysToPayInvoice = NumberOfDaysToPayInvoice
    def get_NumberOfDaysToPayDuties(self):
        return self.NumberOfDaysToPayDuties
    def set_NumberOfDaysToPayDuties(self, NumberOfDaysToPayDuties):
        self.NumberOfDaysToPayDuties = NumberOfDaysToPayDuties
    def validate_BillingAccountAttributeType(self, value):
        result = True
        # Validate type BillingAccountAttributeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CONSOLIDATE_INVOICES_INTO_PARENT_ACCOUNT']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on BillingAccountAttributeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_CustomerBillingSettlementLevelType(self, value):
        result = True
        # Validate type CustomerBillingSettlementLevelType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['INVOICE', 'LINE_ITEM']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CustomerBillingSettlementLevelType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.CreditLimit is not None or
            self.DeclinedReason is not None or
            self.BillingAttributes or
            self.ClearanceBillingCycle is not None or
            self.BillingSettlementLevel is not None or
            self.BillingExtendedInclusionDays is not None or
            self.BillingMedium is not None or
            self.InternationalBillingMedium is not None or
            self.InternationalTransportationInvoiceBypassCode is not None or
            self.BillingCycle is not None or
            self.InternationalBillingCycle is not None or
            self.BillingClosingDay is not None or
            self.CashOnlyDate is not None or
            self.PreferredCurrencyType is not None or
            self.CollectionZone is not None or
            self.NumberOfDaysToPayInvoice is not None or
            self.NumberOfDaysToPayDuties is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomerRevenueDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CustomerRevenueDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CustomerRevenueDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CustomerRevenueDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CustomerRevenueDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CustomerRevenueDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomerRevenueDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CreditLimit is not None:
            namespaceprefix_ = self.CreditLimit_nsprefix_ + ':' if (UseCapturedNS_ and self.CreditLimit_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCreditLimit>%s</%sCreditLimit>%s' % (namespaceprefix_ , self.gds_format_decimal(self.CreditLimit, input_name='CreditLimit'), namespaceprefix_ , eol_))
        if self.DeclinedReason is not None:
            namespaceprefix_ = self.DeclinedReason_nsprefix_ + ':' if (UseCapturedNS_ and self.DeclinedReason_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDeclinedReason>%s</%sDeclinedReason>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DeclinedReason), input_name='DeclinedReason')), namespaceprefix_ , eol_))
        for BillingAttributes_ in self.BillingAttributes:
            namespaceprefix_ = self.BillingAttributes_nsprefix_ + ':' if (UseCapturedNS_ and self.BillingAttributes_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBillingAttributes>%s</%sBillingAttributes>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(BillingAttributes_), input_name='BillingAttributes')), namespaceprefix_ , eol_))
        if self.ClearanceBillingCycle is not None:
            namespaceprefix_ = self.ClearanceBillingCycle_nsprefix_ + ':' if (UseCapturedNS_ and self.ClearanceBillingCycle_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClearanceBillingCycle>%s</%sClearanceBillingCycle>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ClearanceBillingCycle), input_name='ClearanceBillingCycle')), namespaceprefix_ , eol_))
        if self.BillingSettlementLevel is not None:
            namespaceprefix_ = self.BillingSettlementLevel_nsprefix_ + ':' if (UseCapturedNS_ and self.BillingSettlementLevel_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBillingSettlementLevel>%s</%sBillingSettlementLevel>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BillingSettlementLevel), input_name='BillingSettlementLevel')), namespaceprefix_ , eol_))
        if self.BillingExtendedInclusionDays is not None:
            namespaceprefix_ = self.BillingExtendedInclusionDays_nsprefix_ + ':' if (UseCapturedNS_ and self.BillingExtendedInclusionDays_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBillingExtendedInclusionDays>%s</%sBillingExtendedInclusionDays>%s' % (namespaceprefix_ , self.gds_format_integer(self.BillingExtendedInclusionDays, input_name='BillingExtendedInclusionDays'), namespaceprefix_ , eol_))
        if self.BillingMedium is not None:
            namespaceprefix_ = self.BillingMedium_nsprefix_ + ':' if (UseCapturedNS_ and self.BillingMedium_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBillingMedium>%s</%sBillingMedium>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BillingMedium), input_name='BillingMedium')), namespaceprefix_ , eol_))
        if self.InternationalBillingMedium is not None:
            namespaceprefix_ = self.InternationalBillingMedium_nsprefix_ + ':' if (UseCapturedNS_ and self.InternationalBillingMedium_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInternationalBillingMedium>%s</%sInternationalBillingMedium>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InternationalBillingMedium), input_name='InternationalBillingMedium')), namespaceprefix_ , eol_))
        if self.InternationalTransportationInvoiceBypassCode is not None:
            namespaceprefix_ = self.InternationalTransportationInvoiceBypassCode_nsprefix_ + ':' if (UseCapturedNS_ and self.InternationalTransportationInvoiceBypassCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInternationalTransportationInvoiceBypassCode>%s</%sInternationalTransportationInvoiceBypassCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InternationalTransportationInvoiceBypassCode), input_name='InternationalTransportationInvoiceBypassCode')), namespaceprefix_ , eol_))
        if self.BillingCycle is not None:
            namespaceprefix_ = self.BillingCycle_nsprefix_ + ':' if (UseCapturedNS_ and self.BillingCycle_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBillingCycle>%s</%sBillingCycle>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BillingCycle), input_name='BillingCycle')), namespaceprefix_ , eol_))
        if self.InternationalBillingCycle is not None:
            namespaceprefix_ = self.InternationalBillingCycle_nsprefix_ + ':' if (UseCapturedNS_ and self.InternationalBillingCycle_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInternationalBillingCycle>%s</%sInternationalBillingCycle>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InternationalBillingCycle), input_name='InternationalBillingCycle')), namespaceprefix_ , eol_))
        if self.BillingClosingDay is not None:
            namespaceprefix_ = self.BillingClosingDay_nsprefix_ + ':' if (UseCapturedNS_ and self.BillingClosingDay_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBillingClosingDay>%s</%sBillingClosingDay>%s' % (namespaceprefix_ , self.gds_format_integer(self.BillingClosingDay, input_name='BillingClosingDay'), namespaceprefix_ , eol_))
        if self.CashOnlyDate is not None:
            namespaceprefix_ = self.CashOnlyDate_nsprefix_ + ':' if (UseCapturedNS_ and self.CashOnlyDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCashOnlyDate>%s</%sCashOnlyDate>%s' % (namespaceprefix_ , self.gds_format_date(self.CashOnlyDate, input_name='CashOnlyDate'), namespaceprefix_ , eol_))
        if self.PreferredCurrencyType is not None:
            namespaceprefix_ = self.PreferredCurrencyType_nsprefix_ + ':' if (UseCapturedNS_ and self.PreferredCurrencyType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPreferredCurrencyType>%s</%sPreferredCurrencyType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PreferredCurrencyType), input_name='PreferredCurrencyType')), namespaceprefix_ , eol_))
        if self.CollectionZone is not None:
            namespaceprefix_ = self.CollectionZone_nsprefix_ + ':' if (UseCapturedNS_ and self.CollectionZone_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCollectionZone>%s</%sCollectionZone>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CollectionZone), input_name='CollectionZone')), namespaceprefix_ , eol_))
        if self.NumberOfDaysToPayInvoice is not None:
            namespaceprefix_ = self.NumberOfDaysToPayInvoice_nsprefix_ + ':' if (UseCapturedNS_ and self.NumberOfDaysToPayInvoice_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumberOfDaysToPayInvoice>%s</%sNumberOfDaysToPayInvoice>%s' % (namespaceprefix_ , self.gds_format_integer(self.NumberOfDaysToPayInvoice, input_name='NumberOfDaysToPayInvoice'), namespaceprefix_ , eol_))
        if self.NumberOfDaysToPayDuties is not None:
            namespaceprefix_ = self.NumberOfDaysToPayDuties_nsprefix_ + ':' if (UseCapturedNS_ and self.NumberOfDaysToPayDuties_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumberOfDaysToPayDuties>%s</%sNumberOfDaysToPayDuties>%s' % (namespaceprefix_ , self.gds_format_integer(self.NumberOfDaysToPayDuties, input_name='NumberOfDaysToPayDuties'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CreditLimit' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'CreditLimit')
            fval_ = self.gds_validate_decimal(fval_, node, 'CreditLimit')
            self.CreditLimit = fval_
            self.CreditLimit_nsprefix_ = child_.prefix
        elif nodeName_ == 'DeclinedReason':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DeclinedReason')
            value_ = self.gds_validate_string(value_, node, 'DeclinedReason')
            self.DeclinedReason = value_
            self.DeclinedReason_nsprefix_ = child_.prefix
        elif nodeName_ == 'BillingAttributes':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'BillingAttributes')
            value_ = self.gds_validate_string(value_, node, 'BillingAttributes')
            self.BillingAttributes.append(value_)
            self.BillingAttributes_nsprefix_ = child_.prefix
            # validate type BillingAccountAttributeType
            self.validate_BillingAccountAttributeType(self.BillingAttributes[-1])
        elif nodeName_ == 'ClearanceBillingCycle':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ClearanceBillingCycle')
            value_ = self.gds_validate_string(value_, node, 'ClearanceBillingCycle')
            self.ClearanceBillingCycle = value_
            self.ClearanceBillingCycle_nsprefix_ = child_.prefix
        elif nodeName_ == 'BillingSettlementLevel':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'BillingSettlementLevel')
            value_ = self.gds_validate_string(value_, node, 'BillingSettlementLevel')
            self.BillingSettlementLevel = value_
            self.BillingSettlementLevel_nsprefix_ = child_.prefix
            # validate type CustomerBillingSettlementLevelType
            self.validate_CustomerBillingSettlementLevelType(self.BillingSettlementLevel)
        elif nodeName_ == 'BillingExtendedInclusionDays' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'BillingExtendedInclusionDays')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'BillingExtendedInclusionDays')
            self.BillingExtendedInclusionDays = ival_
            self.BillingExtendedInclusionDays_nsprefix_ = child_.prefix
        elif nodeName_ == 'BillingMedium':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'BillingMedium')
            value_ = self.gds_validate_string(value_, node, 'BillingMedium')
            self.BillingMedium = value_
            self.BillingMedium_nsprefix_ = child_.prefix
        elif nodeName_ == 'InternationalBillingMedium':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'InternationalBillingMedium')
            value_ = self.gds_validate_string(value_, node, 'InternationalBillingMedium')
            self.InternationalBillingMedium = value_
            self.InternationalBillingMedium_nsprefix_ = child_.prefix
        elif nodeName_ == 'InternationalTransportationInvoiceBypassCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'InternationalTransportationInvoiceBypassCode')
            value_ = self.gds_validate_string(value_, node, 'InternationalTransportationInvoiceBypassCode')
            self.InternationalTransportationInvoiceBypassCode = value_
            self.InternationalTransportationInvoiceBypassCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'BillingCycle':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'BillingCycle')
            value_ = self.gds_validate_string(value_, node, 'BillingCycle')
            self.BillingCycle = value_
            self.BillingCycle_nsprefix_ = child_.prefix
        elif nodeName_ == 'InternationalBillingCycle':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'InternationalBillingCycle')
            value_ = self.gds_validate_string(value_, node, 'InternationalBillingCycle')
            self.InternationalBillingCycle = value_
            self.InternationalBillingCycle_nsprefix_ = child_.prefix
        elif nodeName_ == 'BillingClosingDay' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'BillingClosingDay')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'BillingClosingDay')
            self.BillingClosingDay = ival_
            self.BillingClosingDay_nsprefix_ = child_.prefix
        elif nodeName_ == 'CashOnlyDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.CashOnlyDate = dval_
            self.CashOnlyDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'PreferredCurrencyType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PreferredCurrencyType')
            value_ = self.gds_validate_string(value_, node, 'PreferredCurrencyType')
            self.PreferredCurrencyType = value_
            self.PreferredCurrencyType_nsprefix_ = child_.prefix
        elif nodeName_ == 'CollectionZone':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CollectionZone')
            value_ = self.gds_validate_string(value_, node, 'CollectionZone')
            self.CollectionZone = value_
            self.CollectionZone_nsprefix_ = child_.prefix
        elif nodeName_ == 'NumberOfDaysToPayInvoice' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'NumberOfDaysToPayInvoice')
            ival_ = self.gds_validate_integer(ival_, node, 'NumberOfDaysToPayInvoice')
            self.NumberOfDaysToPayInvoice = ival_
            self.NumberOfDaysToPayInvoice_nsprefix_ = child_.prefix
        elif nodeName_ == 'NumberOfDaysToPayDuties' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'NumberOfDaysToPayDuties')
            ival_ = self.gds_validate_integer(ival_, node, 'NumberOfDaysToPayDuties')
            self.NumberOfDaysToPayDuties = ival_
            self.NumberOfDaysToPayDuties_nsprefix_ = child_.prefix
# end class CustomerRevenueDetail


class CustomerShippingEnablementDetail(GeneratedsSuper):
    """Specifies the shipping enablements a customer has."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PolicyGridManifests=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if PolicyGridManifests is None:
            self.PolicyGridManifests = []
        else:
            self.PolicyGridManifests = PolicyGridManifests
        self.PolicyGridManifests_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CustomerShippingEnablementDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CustomerShippingEnablementDetail.subclass:
            return CustomerShippingEnablementDetail.subclass(*args_, **kwargs_)
        else:
            return CustomerShippingEnablementDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PolicyGridManifests(self):
        return self.PolicyGridManifests
    def set_PolicyGridManifests(self, PolicyGridManifests):
        self.PolicyGridManifests = PolicyGridManifests
    def add_PolicyGridManifests(self, value):
        self.PolicyGridManifests.append(value)
    def insert_PolicyGridManifests_at(self, index, value):
        self.PolicyGridManifests.insert(index, value)
    def replace_PolicyGridManifests_at(self, index, value):
        self.PolicyGridManifests[index] = value
    def hasContent_(self):
        if (
            self.PolicyGridManifests
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomerShippingEnablementDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CustomerShippingEnablementDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CustomerShippingEnablementDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CustomerShippingEnablementDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CustomerShippingEnablementDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CustomerShippingEnablementDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomerShippingEnablementDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for PolicyGridManifests_ in self.PolicyGridManifests:
            namespaceprefix_ = self.PolicyGridManifests_nsprefix_ + ':' if (UseCapturedNS_ and self.PolicyGridManifests_nsprefix_) else ''
            PolicyGridManifests_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PolicyGridManifests', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PolicyGridManifests':
            obj_ = PolicyGridManifest.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PolicyGridManifests.append(obj_)
            obj_.original_tagname_ = 'PolicyGridManifests'
# end class CustomerShippingEnablementDetail


class CustomerShippingVolumeDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, FirstShipDate=None, LastShipDate=None, TotalPackageCount=None, DomesticPackageCount=None, InternationalPackageCount=None, TotalRevenue=None, DomesticRevenue=None, InternationalRevenue=None, SalesTerritory=None, GlobalSalesTerritory=None, AverageDomesticRevenue=None, AverageRevenue=None, DomesticAverageRevenue=None, InternationalAverageRevenue=None, NationalDomesticRevenue=None, NationalDiscountAccount=None, DebutCompanyId=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if isinstance(FirstShipDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(FirstShipDate, '%Y-%m-%d').date()
        else:
            initvalue_ = FirstShipDate
        self.FirstShipDate = initvalue_
        self.FirstShipDate_nsprefix_ = None
        if isinstance(LastShipDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(LastShipDate, '%Y-%m-%d').date()
        else:
            initvalue_ = LastShipDate
        self.LastShipDate = initvalue_
        self.LastShipDate_nsprefix_ = None
        self.TotalPackageCount = TotalPackageCount
        self.TotalPackageCount_nsprefix_ = None
        self.DomesticPackageCount = DomesticPackageCount
        self.DomesticPackageCount_nsprefix_ = None
        self.InternationalPackageCount = InternationalPackageCount
        self.InternationalPackageCount_nsprefix_ = None
        self.TotalRevenue = TotalRevenue
        self.TotalRevenue_nsprefix_ = "ns"
        self.DomesticRevenue = DomesticRevenue
        self.DomesticRevenue_nsprefix_ = "ns"
        self.InternationalRevenue = InternationalRevenue
        self.InternationalRevenue_nsprefix_ = "ns"
        self.SalesTerritory = SalesTerritory
        self.SalesTerritory_nsprefix_ = None
        self.GlobalSalesTerritory = GlobalSalesTerritory
        self.GlobalSalesTerritory_nsprefix_ = None
        self.AverageDomesticRevenue = AverageDomesticRevenue
        self.AverageDomesticRevenue_nsprefix_ = "ns"
        self.AverageRevenue = AverageRevenue
        self.AverageRevenue_nsprefix_ = "ns"
        self.DomesticAverageRevenue = DomesticAverageRevenue
        self.DomesticAverageRevenue_nsprefix_ = "ns"
        self.InternationalAverageRevenue = InternationalAverageRevenue
        self.InternationalAverageRevenue_nsprefix_ = "ns"
        self.NationalDomesticRevenue = NationalDomesticRevenue
        self.NationalDomesticRevenue_nsprefix_ = "ns"
        self.NationalDiscountAccount = NationalDiscountAccount
        self.NationalDiscountAccount_nsprefix_ = None
        self.DebutCompanyId = DebutCompanyId
        self.DebutCompanyId_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CustomerShippingVolumeDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CustomerShippingVolumeDetail.subclass:
            return CustomerShippingVolumeDetail.subclass(*args_, **kwargs_)
        else:
            return CustomerShippingVolumeDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_FirstShipDate(self):
        return self.FirstShipDate
    def set_FirstShipDate(self, FirstShipDate):
        self.FirstShipDate = FirstShipDate
    def get_LastShipDate(self):
        return self.LastShipDate
    def set_LastShipDate(self, LastShipDate):
        self.LastShipDate = LastShipDate
    def get_TotalPackageCount(self):
        return self.TotalPackageCount
    def set_TotalPackageCount(self, TotalPackageCount):
        self.TotalPackageCount = TotalPackageCount
    def get_DomesticPackageCount(self):
        return self.DomesticPackageCount
    def set_DomesticPackageCount(self, DomesticPackageCount):
        self.DomesticPackageCount = DomesticPackageCount
    def get_InternationalPackageCount(self):
        return self.InternationalPackageCount
    def set_InternationalPackageCount(self, InternationalPackageCount):
        self.InternationalPackageCount = InternationalPackageCount
    def get_TotalRevenue(self):
        return self.TotalRevenue
    def set_TotalRevenue(self, TotalRevenue):
        self.TotalRevenue = TotalRevenue
    def get_DomesticRevenue(self):
        return self.DomesticRevenue
    def set_DomesticRevenue(self, DomesticRevenue):
        self.DomesticRevenue = DomesticRevenue
    def get_InternationalRevenue(self):
        return self.InternationalRevenue
    def set_InternationalRevenue(self, InternationalRevenue):
        self.InternationalRevenue = InternationalRevenue
    def get_SalesTerritory(self):
        return self.SalesTerritory
    def set_SalesTerritory(self, SalesTerritory):
        self.SalesTerritory = SalesTerritory
    def get_GlobalSalesTerritory(self):
        return self.GlobalSalesTerritory
    def set_GlobalSalesTerritory(self, GlobalSalesTerritory):
        self.GlobalSalesTerritory = GlobalSalesTerritory
    def get_AverageDomesticRevenue(self):
        return self.AverageDomesticRevenue
    def set_AverageDomesticRevenue(self, AverageDomesticRevenue):
        self.AverageDomesticRevenue = AverageDomesticRevenue
    def get_AverageRevenue(self):
        return self.AverageRevenue
    def set_AverageRevenue(self, AverageRevenue):
        self.AverageRevenue = AverageRevenue
    def get_DomesticAverageRevenue(self):
        return self.DomesticAverageRevenue
    def set_DomesticAverageRevenue(self, DomesticAverageRevenue):
        self.DomesticAverageRevenue = DomesticAverageRevenue
    def get_InternationalAverageRevenue(self):
        return self.InternationalAverageRevenue
    def set_InternationalAverageRevenue(self, InternationalAverageRevenue):
        self.InternationalAverageRevenue = InternationalAverageRevenue
    def get_NationalDomesticRevenue(self):
        return self.NationalDomesticRevenue
    def set_NationalDomesticRevenue(self, NationalDomesticRevenue):
        self.NationalDomesticRevenue = NationalDomesticRevenue
    def get_NationalDiscountAccount(self):
        return self.NationalDiscountAccount
    def set_NationalDiscountAccount(self, NationalDiscountAccount):
        self.NationalDiscountAccount = NationalDiscountAccount
    def get_DebutCompanyId(self):
        return self.DebutCompanyId
    def set_DebutCompanyId(self, DebutCompanyId):
        self.DebutCompanyId = DebutCompanyId
    def hasContent_(self):
        if (
            self.FirstShipDate is not None or
            self.LastShipDate is not None or
            self.TotalPackageCount is not None or
            self.DomesticPackageCount is not None or
            self.InternationalPackageCount is not None or
            self.TotalRevenue is not None or
            self.DomesticRevenue is not None or
            self.InternationalRevenue is not None or
            self.SalesTerritory is not None or
            self.GlobalSalesTerritory is not None or
            self.AverageDomesticRevenue is not None or
            self.AverageRevenue is not None or
            self.DomesticAverageRevenue is not None or
            self.InternationalAverageRevenue is not None or
            self.NationalDomesticRevenue is not None or
            self.NationalDiscountAccount is not None or
            self.DebutCompanyId is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomerShippingVolumeDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CustomerShippingVolumeDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CustomerShippingVolumeDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CustomerShippingVolumeDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CustomerShippingVolumeDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CustomerShippingVolumeDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomerShippingVolumeDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.FirstShipDate is not None:
            namespaceprefix_ = self.FirstShipDate_nsprefix_ + ':' if (UseCapturedNS_ and self.FirstShipDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFirstShipDate>%s</%sFirstShipDate>%s' % (namespaceprefix_ , self.gds_format_date(self.FirstShipDate, input_name='FirstShipDate'), namespaceprefix_ , eol_))
        if self.LastShipDate is not None:
            namespaceprefix_ = self.LastShipDate_nsprefix_ + ':' if (UseCapturedNS_ and self.LastShipDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLastShipDate>%s</%sLastShipDate>%s' % (namespaceprefix_ , self.gds_format_date(self.LastShipDate, input_name='LastShipDate'), namespaceprefix_ , eol_))
        if self.TotalPackageCount is not None:
            namespaceprefix_ = self.TotalPackageCount_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalPackageCount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTotalPackageCount>%s</%sTotalPackageCount>%s' % (namespaceprefix_ , self.gds_format_integer(self.TotalPackageCount, input_name='TotalPackageCount'), namespaceprefix_ , eol_))
        if self.DomesticPackageCount is not None:
            namespaceprefix_ = self.DomesticPackageCount_nsprefix_ + ':' if (UseCapturedNS_ and self.DomesticPackageCount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDomesticPackageCount>%s</%sDomesticPackageCount>%s' % (namespaceprefix_ , self.gds_format_integer(self.DomesticPackageCount, input_name='DomesticPackageCount'), namespaceprefix_ , eol_))
        if self.InternationalPackageCount is not None:
            namespaceprefix_ = self.InternationalPackageCount_nsprefix_ + ':' if (UseCapturedNS_ and self.InternationalPackageCount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInternationalPackageCount>%s</%sInternationalPackageCount>%s' % (namespaceprefix_ , self.gds_format_integer(self.InternationalPackageCount, input_name='InternationalPackageCount'), namespaceprefix_ , eol_))
        if self.TotalRevenue is not None:
            namespaceprefix_ = self.TotalRevenue_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalRevenue_nsprefix_) else ''
            self.TotalRevenue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TotalRevenue', pretty_print=pretty_print)
        if self.DomesticRevenue is not None:
            namespaceprefix_ = self.DomesticRevenue_nsprefix_ + ':' if (UseCapturedNS_ and self.DomesticRevenue_nsprefix_) else ''
            self.DomesticRevenue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DomesticRevenue', pretty_print=pretty_print)
        if self.InternationalRevenue is not None:
            namespaceprefix_ = self.InternationalRevenue_nsprefix_ + ':' if (UseCapturedNS_ and self.InternationalRevenue_nsprefix_) else ''
            self.InternationalRevenue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='InternationalRevenue', pretty_print=pretty_print)
        if self.SalesTerritory is not None:
            namespaceprefix_ = self.SalesTerritory_nsprefix_ + ':' if (UseCapturedNS_ and self.SalesTerritory_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSalesTerritory>%s</%sSalesTerritory>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SalesTerritory), input_name='SalesTerritory')), namespaceprefix_ , eol_))
        if self.GlobalSalesTerritory is not None:
            namespaceprefix_ = self.GlobalSalesTerritory_nsprefix_ + ':' if (UseCapturedNS_ and self.GlobalSalesTerritory_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGlobalSalesTerritory>%s</%sGlobalSalesTerritory>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.GlobalSalesTerritory), input_name='GlobalSalesTerritory')), namespaceprefix_ , eol_))
        if self.AverageDomesticRevenue is not None:
            namespaceprefix_ = self.AverageDomesticRevenue_nsprefix_ + ':' if (UseCapturedNS_ and self.AverageDomesticRevenue_nsprefix_) else ''
            self.AverageDomesticRevenue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AverageDomesticRevenue', pretty_print=pretty_print)
        if self.AverageRevenue is not None:
            namespaceprefix_ = self.AverageRevenue_nsprefix_ + ':' if (UseCapturedNS_ and self.AverageRevenue_nsprefix_) else ''
            self.AverageRevenue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AverageRevenue', pretty_print=pretty_print)
        if self.DomesticAverageRevenue is not None:
            namespaceprefix_ = self.DomesticAverageRevenue_nsprefix_ + ':' if (UseCapturedNS_ and self.DomesticAverageRevenue_nsprefix_) else ''
            self.DomesticAverageRevenue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DomesticAverageRevenue', pretty_print=pretty_print)
        if self.InternationalAverageRevenue is not None:
            namespaceprefix_ = self.InternationalAverageRevenue_nsprefix_ + ':' if (UseCapturedNS_ and self.InternationalAverageRevenue_nsprefix_) else ''
            self.InternationalAverageRevenue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='InternationalAverageRevenue', pretty_print=pretty_print)
        if self.NationalDomesticRevenue is not None:
            namespaceprefix_ = self.NationalDomesticRevenue_nsprefix_ + ':' if (UseCapturedNS_ and self.NationalDomesticRevenue_nsprefix_) else ''
            self.NationalDomesticRevenue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='NationalDomesticRevenue', pretty_print=pretty_print)
        if self.NationalDiscountAccount is not None:
            namespaceprefix_ = self.NationalDiscountAccount_nsprefix_ + ':' if (UseCapturedNS_ and self.NationalDiscountAccount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNationalDiscountAccount>%s</%sNationalDiscountAccount>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NationalDiscountAccount), input_name='NationalDiscountAccount')), namespaceprefix_ , eol_))
        if self.DebutCompanyId is not None:
            namespaceprefix_ = self.DebutCompanyId_nsprefix_ + ':' if (UseCapturedNS_ and self.DebutCompanyId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDebutCompanyId>%s</%sDebutCompanyId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DebutCompanyId), input_name='DebutCompanyId')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'FirstShipDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.FirstShipDate = dval_
            self.FirstShipDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'LastShipDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.LastShipDate = dval_
            self.LastShipDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'TotalPackageCount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'TotalPackageCount')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'TotalPackageCount')
            self.TotalPackageCount = ival_
            self.TotalPackageCount_nsprefix_ = child_.prefix
        elif nodeName_ == 'DomesticPackageCount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'DomesticPackageCount')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'DomesticPackageCount')
            self.DomesticPackageCount = ival_
            self.DomesticPackageCount_nsprefix_ = child_.prefix
        elif nodeName_ == 'InternationalPackageCount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'InternationalPackageCount')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'InternationalPackageCount')
            self.InternationalPackageCount = ival_
            self.InternationalPackageCount_nsprefix_ = child_.prefix
        elif nodeName_ == 'TotalRevenue':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TotalRevenue = obj_
            obj_.original_tagname_ = 'TotalRevenue'
        elif nodeName_ == 'DomesticRevenue':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DomesticRevenue = obj_
            obj_.original_tagname_ = 'DomesticRevenue'
        elif nodeName_ == 'InternationalRevenue':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.InternationalRevenue = obj_
            obj_.original_tagname_ = 'InternationalRevenue'
        elif nodeName_ == 'SalesTerritory':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SalesTerritory')
            value_ = self.gds_validate_string(value_, node, 'SalesTerritory')
            self.SalesTerritory = value_
            self.SalesTerritory_nsprefix_ = child_.prefix
        elif nodeName_ == 'GlobalSalesTerritory':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'GlobalSalesTerritory')
            value_ = self.gds_validate_string(value_, node, 'GlobalSalesTerritory')
            self.GlobalSalesTerritory = value_
            self.GlobalSalesTerritory_nsprefix_ = child_.prefix
        elif nodeName_ == 'AverageDomesticRevenue':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AverageDomesticRevenue = obj_
            obj_.original_tagname_ = 'AverageDomesticRevenue'
        elif nodeName_ == 'AverageRevenue':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AverageRevenue = obj_
            obj_.original_tagname_ = 'AverageRevenue'
        elif nodeName_ == 'DomesticAverageRevenue':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DomesticAverageRevenue = obj_
            obj_.original_tagname_ = 'DomesticAverageRevenue'
        elif nodeName_ == 'InternationalAverageRevenue':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.InternationalAverageRevenue = obj_
            obj_.original_tagname_ = 'InternationalAverageRevenue'
        elif nodeName_ == 'NationalDomesticRevenue':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.NationalDomesticRevenue = obj_
            obj_.original_tagname_ = 'NationalDomesticRevenue'
        elif nodeName_ == 'NationalDiscountAccount':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'NationalDiscountAccount')
            value_ = self.gds_validate_string(value_, node, 'NationalDiscountAccount')
            self.NationalDiscountAccount = value_
            self.NationalDiscountAccount_nsprefix_ = child_.prefix
        elif nodeName_ == 'DebutCompanyId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DebutCompanyId')
            value_ = self.gds_validate_string(value_, node, 'DebutCompanyId')
            self.DebutCompanyId = value_
            self.DebutCompanyId_nsprefix_ = child_.prefix
# end class CustomerShippingVolumeDetail


class CustomerSpecifiedLabelDetail(GeneratedsSuper):
    """Allows customer-specified control of label content."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, DocTabContent=None, CustomContentPosition=None, CustomContent=None, ConfigurableReferenceEntries=None, MaskedData=None, SecondaryBarcode=None, TermsAndConditionsLocalization=None, RegulatoryLabels=None, AdditionalLabels=None, AirWaybillSuppressionCount=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.DocTabContent = DocTabContent
        self.DocTabContent_nsprefix_ = "ns"
        self.CustomContentPosition = CustomContentPosition
        self.validate_RelativeVerticalPositionType(self.CustomContentPosition)
        self.CustomContentPosition_nsprefix_ = "ns"
        self.CustomContent = CustomContent
        self.CustomContent_nsprefix_ = "ns"
        if ConfigurableReferenceEntries is None:
            self.ConfigurableReferenceEntries = []
        else:
            self.ConfigurableReferenceEntries = ConfigurableReferenceEntries
        self.ConfigurableReferenceEntries_nsprefix_ = "ns"
        if MaskedData is None:
            self.MaskedData = []
        else:
            self.MaskedData = MaskedData
        self.MaskedData_nsprefix_ = "ns"
        self.SecondaryBarcode = SecondaryBarcode
        self.validate_SecondaryBarcodeType(self.SecondaryBarcode)
        self.SecondaryBarcode_nsprefix_ = "ns"
        self.TermsAndConditionsLocalization = TermsAndConditionsLocalization
        self.TermsAndConditionsLocalization_nsprefix_ = "ns"
        if RegulatoryLabels is None:
            self.RegulatoryLabels = []
        else:
            self.RegulatoryLabels = RegulatoryLabels
        self.RegulatoryLabels_nsprefix_ = "ns"
        if AdditionalLabels is None:
            self.AdditionalLabels = []
        else:
            self.AdditionalLabels = AdditionalLabels
        self.AdditionalLabels_nsprefix_ = "ns"
        self.AirWaybillSuppressionCount = AirWaybillSuppressionCount
        self.AirWaybillSuppressionCount_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CustomerSpecifiedLabelDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CustomerSpecifiedLabelDetail.subclass:
            return CustomerSpecifiedLabelDetail.subclass(*args_, **kwargs_)
        else:
            return CustomerSpecifiedLabelDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DocTabContent(self):
        return self.DocTabContent
    def set_DocTabContent(self, DocTabContent):
        self.DocTabContent = DocTabContent
    def get_CustomContentPosition(self):
        return self.CustomContentPosition
    def set_CustomContentPosition(self, CustomContentPosition):
        self.CustomContentPosition = CustomContentPosition
    def get_CustomContent(self):
        return self.CustomContent
    def set_CustomContent(self, CustomContent):
        self.CustomContent = CustomContent
    def get_ConfigurableReferenceEntries(self):
        return self.ConfigurableReferenceEntries
    def set_ConfigurableReferenceEntries(self, ConfigurableReferenceEntries):
        self.ConfigurableReferenceEntries = ConfigurableReferenceEntries
    def add_ConfigurableReferenceEntries(self, value):
        self.ConfigurableReferenceEntries.append(value)
    def insert_ConfigurableReferenceEntries_at(self, index, value):
        self.ConfigurableReferenceEntries.insert(index, value)
    def replace_ConfigurableReferenceEntries_at(self, index, value):
        self.ConfigurableReferenceEntries[index] = value
    def get_MaskedData(self):
        return self.MaskedData
    def set_MaskedData(self, MaskedData):
        self.MaskedData = MaskedData
    def add_MaskedData(self, value):
        self.MaskedData.append(value)
    def insert_MaskedData_at(self, index, value):
        self.MaskedData.insert(index, value)
    def replace_MaskedData_at(self, index, value):
        self.MaskedData[index] = value
    def get_SecondaryBarcode(self):
        return self.SecondaryBarcode
    def set_SecondaryBarcode(self, SecondaryBarcode):
        self.SecondaryBarcode = SecondaryBarcode
    def get_TermsAndConditionsLocalization(self):
        return self.TermsAndConditionsLocalization
    def set_TermsAndConditionsLocalization(self, TermsAndConditionsLocalization):
        self.TermsAndConditionsLocalization = TermsAndConditionsLocalization
    def get_RegulatoryLabels(self):
        return self.RegulatoryLabels
    def set_RegulatoryLabels(self, RegulatoryLabels):
        self.RegulatoryLabels = RegulatoryLabels
    def add_RegulatoryLabels(self, value):
        self.RegulatoryLabels.append(value)
    def insert_RegulatoryLabels_at(self, index, value):
        self.RegulatoryLabels.insert(index, value)
    def replace_RegulatoryLabels_at(self, index, value):
        self.RegulatoryLabels[index] = value
    def get_AdditionalLabels(self):
        return self.AdditionalLabels
    def set_AdditionalLabels(self, AdditionalLabels):
        self.AdditionalLabels = AdditionalLabels
    def add_AdditionalLabels(self, value):
        self.AdditionalLabels.append(value)
    def insert_AdditionalLabels_at(self, index, value):
        self.AdditionalLabels.insert(index, value)
    def replace_AdditionalLabels_at(self, index, value):
        self.AdditionalLabels[index] = value
    def get_AirWaybillSuppressionCount(self):
        return self.AirWaybillSuppressionCount
    def set_AirWaybillSuppressionCount(self, AirWaybillSuppressionCount):
        self.AirWaybillSuppressionCount = AirWaybillSuppressionCount
    def validate_RelativeVerticalPositionType(self, value):
        result = True
        # Validate type RelativeVerticalPositionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ABOVE', 'BELOW']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on RelativeVerticalPositionType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_LabelMaskableDataType(self, value):
        result = True
        # Validate type LabelMaskableDataType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CUSTOMS_VALUE', 'DIMENSIONS', 'DUTIES_AND_TAXES_PAYOR_ACCOUNT_NUMBER', 'FREIGHT_PAYOR_ACCOUNT_NUMBER', 'PACKAGE_SEQUENCE_AND_COUNT', 'SECONDARY_BARCODE', 'SHIPPER_ACCOUNT_NUMBER', 'SUPPLEMENTAL_LABEL_DOC_TAB', 'TERMS_AND_CONDITIONS', 'TOTAL_WEIGHT', 'TRANSPORTATION_CHARGES_PAYOR_ACCOUNT_NUMBER']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on LabelMaskableDataType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_SecondaryBarcodeType(self, value):
        result = True
        # Validate type SecondaryBarcodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['COMMON_2D', 'NONE', 'SSCC_18', 'USPS']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on SecondaryBarcodeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.DocTabContent is not None or
            self.CustomContentPosition is not None or
            self.CustomContent is not None or
            self.ConfigurableReferenceEntries or
            self.MaskedData or
            self.SecondaryBarcode is not None or
            self.TermsAndConditionsLocalization is not None or
            self.RegulatoryLabels or
            self.AdditionalLabels or
            self.AirWaybillSuppressionCount is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomerSpecifiedLabelDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CustomerSpecifiedLabelDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CustomerSpecifiedLabelDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CustomerSpecifiedLabelDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CustomerSpecifiedLabelDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CustomerSpecifiedLabelDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomerSpecifiedLabelDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DocTabContent is not None:
            namespaceprefix_ = self.DocTabContent_nsprefix_ + ':' if (UseCapturedNS_ and self.DocTabContent_nsprefix_) else ''
            self.DocTabContent.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DocTabContent', pretty_print=pretty_print)
        if self.CustomContentPosition is not None:
            namespaceprefix_ = self.CustomContentPosition_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomContentPosition_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCustomContentPosition>%s</%sCustomContentPosition>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CustomContentPosition), input_name='CustomContentPosition')), namespaceprefix_ , eol_))
        if self.CustomContent is not None:
            namespaceprefix_ = self.CustomContent_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomContent_nsprefix_) else ''
            self.CustomContent.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CustomContent', pretty_print=pretty_print)
        for ConfigurableReferenceEntries_ in self.ConfigurableReferenceEntries:
            namespaceprefix_ = self.ConfigurableReferenceEntries_nsprefix_ + ':' if (UseCapturedNS_ and self.ConfigurableReferenceEntries_nsprefix_) else ''
            ConfigurableReferenceEntries_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ConfigurableReferenceEntries', pretty_print=pretty_print)
        for MaskedData_ in self.MaskedData:
            namespaceprefix_ = self.MaskedData_nsprefix_ + ':' if (UseCapturedNS_ and self.MaskedData_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMaskedData>%s</%sMaskedData>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(MaskedData_), input_name='MaskedData')), namespaceprefix_ , eol_))
        if self.SecondaryBarcode is not None:
            namespaceprefix_ = self.SecondaryBarcode_nsprefix_ + ':' if (UseCapturedNS_ and self.SecondaryBarcode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSecondaryBarcode>%s</%sSecondaryBarcode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SecondaryBarcode), input_name='SecondaryBarcode')), namespaceprefix_ , eol_))
        if self.TermsAndConditionsLocalization is not None:
            namespaceprefix_ = self.TermsAndConditionsLocalization_nsprefix_ + ':' if (UseCapturedNS_ and self.TermsAndConditionsLocalization_nsprefix_) else ''
            self.TermsAndConditionsLocalization.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TermsAndConditionsLocalization', pretty_print=pretty_print)
        for RegulatoryLabels_ in self.RegulatoryLabels:
            namespaceprefix_ = self.RegulatoryLabels_nsprefix_ + ':' if (UseCapturedNS_ and self.RegulatoryLabels_nsprefix_) else ''
            RegulatoryLabels_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RegulatoryLabels', pretty_print=pretty_print)
        for AdditionalLabels_ in self.AdditionalLabels:
            namespaceprefix_ = self.AdditionalLabels_nsprefix_ + ':' if (UseCapturedNS_ and self.AdditionalLabels_nsprefix_) else ''
            AdditionalLabels_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AdditionalLabels', pretty_print=pretty_print)
        if self.AirWaybillSuppressionCount is not None:
            namespaceprefix_ = self.AirWaybillSuppressionCount_nsprefix_ + ':' if (UseCapturedNS_ and self.AirWaybillSuppressionCount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAirWaybillSuppressionCount>%s</%sAirWaybillSuppressionCount>%s' % (namespaceprefix_ , self.gds_format_integer(self.AirWaybillSuppressionCount, input_name='AirWaybillSuppressionCount'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DocTabContent':
            obj_ = DocTabContent.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DocTabContent = obj_
            obj_.original_tagname_ = 'DocTabContent'
        elif nodeName_ == 'CustomContentPosition':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CustomContentPosition')
            value_ = self.gds_validate_string(value_, node, 'CustomContentPosition')
            self.CustomContentPosition = value_
            self.CustomContentPosition_nsprefix_ = child_.prefix
            # validate type RelativeVerticalPositionType
            self.validate_RelativeVerticalPositionType(self.CustomContentPosition)
        elif nodeName_ == 'CustomContent':
            obj_ = CustomLabelDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CustomContent = obj_
            obj_.original_tagname_ = 'CustomContent'
        elif nodeName_ == 'ConfigurableReferenceEntries':
            obj_ = ConfigurableLabelReferenceEntry.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ConfigurableReferenceEntries.append(obj_)
            obj_.original_tagname_ = 'ConfigurableReferenceEntries'
        elif nodeName_ == 'MaskedData':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MaskedData')
            value_ = self.gds_validate_string(value_, node, 'MaskedData')
            self.MaskedData.append(value_)
            self.MaskedData_nsprefix_ = child_.prefix
            # validate type LabelMaskableDataType
            self.validate_LabelMaskableDataType(self.MaskedData[-1])
        elif nodeName_ == 'SecondaryBarcode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SecondaryBarcode')
            value_ = self.gds_validate_string(value_, node, 'SecondaryBarcode')
            self.SecondaryBarcode = value_
            self.SecondaryBarcode_nsprefix_ = child_.prefix
            # validate type SecondaryBarcodeType
            self.validate_SecondaryBarcodeType(self.SecondaryBarcode)
        elif nodeName_ == 'TermsAndConditionsLocalization':
            obj_ = Localization.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TermsAndConditionsLocalization = obj_
            obj_.original_tagname_ = 'TermsAndConditionsLocalization'
        elif nodeName_ == 'RegulatoryLabels':
            obj_ = RegulatoryLabelContentDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RegulatoryLabels.append(obj_)
            obj_.original_tagname_ = 'RegulatoryLabels'
        elif nodeName_ == 'AdditionalLabels':
            obj_ = AdditionalLabelsDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AdditionalLabels.append(obj_)
            obj_.original_tagname_ = 'AdditionalLabels'
        elif nodeName_ == 'AirWaybillSuppressionCount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'AirWaybillSuppressionCount')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'AirWaybillSuppressionCount')
            self.AirWaybillSuppressionCount = ival_
            self.AirWaybillSuppressionCount_nsprefix_ = child_.prefix
# end class CustomerSpecifiedLabelDetail


class CustomerSuppliesDetail(GeneratedsSuper):
    """Specifies details about the supplies the customer is contracted to
    receive"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, EligibleSupplies=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if EligibleSupplies is None:
            self.EligibleSupplies = []
        else:
            self.EligibleSupplies = EligibleSupplies
        self.EligibleSupplies_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CustomerSuppliesDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CustomerSuppliesDetail.subclass:
            return CustomerSuppliesDetail.subclass(*args_, **kwargs_)
        else:
            return CustomerSuppliesDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_EligibleSupplies(self):
        return self.EligibleSupplies
    def set_EligibleSupplies(self, EligibleSupplies):
        self.EligibleSupplies = EligibleSupplies
    def add_EligibleSupplies(self, value):
        self.EligibleSupplies.append(value)
    def insert_EligibleSupplies_at(self, index, value):
        self.EligibleSupplies.insert(index, value)
    def replace_EligibleSupplies_at(self, index, value):
        self.EligibleSupplies[index] = value
    def validate_SuppliesTypes(self, value):
        result = True
        # Validate type SuppliesTypes, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FEDEX_PAK', 'FEDEX_SECURITY_BOX', 'NO_SPECIAL_SUPPLIES']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on SuppliesTypes' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.EligibleSupplies
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomerSuppliesDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CustomerSuppliesDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CustomerSuppliesDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CustomerSuppliesDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CustomerSuppliesDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CustomerSuppliesDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomerSuppliesDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for EligibleSupplies_ in self.EligibleSupplies:
            namespaceprefix_ = self.EligibleSupplies_nsprefix_ + ':' if (UseCapturedNS_ and self.EligibleSupplies_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEligibleSupplies>%s</%sEligibleSupplies>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(EligibleSupplies_), input_name='EligibleSupplies')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'EligibleSupplies':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EligibleSupplies')
            value_ = self.gds_validate_string(value_, node, 'EligibleSupplies')
            self.EligibleSupplies.append(value_)
            self.EligibleSupplies_nsprefix_ = child_.prefix
            # validate type SuppliesTypes
            self.validate_SuppliesTypes(self.EligibleSupplies[-1])
# end class CustomerSuppliesDetail


class CustomsClearanceDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Brokers=None, ClearanceBrokerage=None, CustomsOptions=None, ImporterOfRecord=None, RecipientCustomsId=None, DutiesPayment=None, DocumentContent=None, CustomsValue=None, FreightOnValue=None, InsuranceCharges=None, PartiesToTransactionAreRelated=None, CommercialInvoice=None, Commodities=None, ExportDetail=None, RegulatoryControls=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Brokers is None:
            self.Brokers = []
        else:
            self.Brokers = Brokers
        self.Brokers_nsprefix_ = "ns"
        self.ClearanceBrokerage = ClearanceBrokerage
        self.validate_ClearanceBrokerageType(self.ClearanceBrokerage)
        self.ClearanceBrokerage_nsprefix_ = "ns"
        self.CustomsOptions = CustomsOptions
        self.CustomsOptions_nsprefix_ = "ns"
        self.ImporterOfRecord = ImporterOfRecord
        self.ImporterOfRecord_nsprefix_ = "ns"
        self.RecipientCustomsId = RecipientCustomsId
        self.RecipientCustomsId_nsprefix_ = "ns"
        self.DutiesPayment = DutiesPayment
        self.DutiesPayment_nsprefix_ = "ns"
        self.DocumentContent = DocumentContent
        self.validate_InternationalDocumentContentType(self.DocumentContent)
        self.DocumentContent_nsprefix_ = "ns"
        self.CustomsValue = CustomsValue
        self.CustomsValue_nsprefix_ = "ns"
        self.FreightOnValue = FreightOnValue
        self.validate_FreightOnValueType(self.FreightOnValue)
        self.FreightOnValue_nsprefix_ = "ns"
        self.InsuranceCharges = InsuranceCharges
        self.InsuranceCharges_nsprefix_ = "ns"
        self.PartiesToTransactionAreRelated = PartiesToTransactionAreRelated
        self.PartiesToTransactionAreRelated_nsprefix_ = None
        self.CommercialInvoice = CommercialInvoice
        self.CommercialInvoice_nsprefix_ = "ns"
        if Commodities is None:
            self.Commodities = []
        else:
            self.Commodities = Commodities
        self.Commodities_nsprefix_ = "ns"
        self.ExportDetail = ExportDetail
        self.ExportDetail_nsprefix_ = "ns"
        if RegulatoryControls is None:
            self.RegulatoryControls = []
        else:
            self.RegulatoryControls = RegulatoryControls
        self.RegulatoryControls_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CustomsClearanceDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CustomsClearanceDetail.subclass:
            return CustomsClearanceDetail.subclass(*args_, **kwargs_)
        else:
            return CustomsClearanceDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Brokers(self):
        return self.Brokers
    def set_Brokers(self, Brokers):
        self.Brokers = Brokers
    def add_Brokers(self, value):
        self.Brokers.append(value)
    def insert_Brokers_at(self, index, value):
        self.Brokers.insert(index, value)
    def replace_Brokers_at(self, index, value):
        self.Brokers[index] = value
    def get_ClearanceBrokerage(self):
        return self.ClearanceBrokerage
    def set_ClearanceBrokerage(self, ClearanceBrokerage):
        self.ClearanceBrokerage = ClearanceBrokerage
    def get_CustomsOptions(self):
        return self.CustomsOptions
    def set_CustomsOptions(self, CustomsOptions):
        self.CustomsOptions = CustomsOptions
    def get_ImporterOfRecord(self):
        return self.ImporterOfRecord
    def set_ImporterOfRecord(self, ImporterOfRecord):
        self.ImporterOfRecord = ImporterOfRecord
    def get_RecipientCustomsId(self):
        return self.RecipientCustomsId
    def set_RecipientCustomsId(self, RecipientCustomsId):
        self.RecipientCustomsId = RecipientCustomsId
    def get_DutiesPayment(self):
        return self.DutiesPayment
    def set_DutiesPayment(self, DutiesPayment):
        self.DutiesPayment = DutiesPayment
    def get_DocumentContent(self):
        return self.DocumentContent
    def set_DocumentContent(self, DocumentContent):
        self.DocumentContent = DocumentContent
    def get_CustomsValue(self):
        return self.CustomsValue
    def set_CustomsValue(self, CustomsValue):
        self.CustomsValue = CustomsValue
    def get_FreightOnValue(self):
        return self.FreightOnValue
    def set_FreightOnValue(self, FreightOnValue):
        self.FreightOnValue = FreightOnValue
    def get_InsuranceCharges(self):
        return self.InsuranceCharges
    def set_InsuranceCharges(self, InsuranceCharges):
        self.InsuranceCharges = InsuranceCharges
    def get_PartiesToTransactionAreRelated(self):
        return self.PartiesToTransactionAreRelated
    def set_PartiesToTransactionAreRelated(self, PartiesToTransactionAreRelated):
        self.PartiesToTransactionAreRelated = PartiesToTransactionAreRelated
    def get_CommercialInvoice(self):
        return self.CommercialInvoice
    def set_CommercialInvoice(self, CommercialInvoice):
        self.CommercialInvoice = CommercialInvoice
    def get_Commodities(self):
        return self.Commodities
    def set_Commodities(self, Commodities):
        self.Commodities = Commodities
    def add_Commodities(self, value):
        self.Commodities.append(value)
    def insert_Commodities_at(self, index, value):
        self.Commodities.insert(index, value)
    def replace_Commodities_at(self, index, value):
        self.Commodities[index] = value
    def get_ExportDetail(self):
        return self.ExportDetail
    def set_ExportDetail(self, ExportDetail):
        self.ExportDetail = ExportDetail
    def get_RegulatoryControls(self):
        return self.RegulatoryControls
    def set_RegulatoryControls(self, RegulatoryControls):
        self.RegulatoryControls = RegulatoryControls
    def add_RegulatoryControls(self, value):
        self.RegulatoryControls.append(value)
    def insert_RegulatoryControls_at(self, index, value):
        self.RegulatoryControls.insert(index, value)
    def replace_RegulatoryControls_at(self, index, value):
        self.RegulatoryControls[index] = value
    def validate_ClearanceBrokerageType(self, value):
        result = True
        # Validate type ClearanceBrokerageType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BROKER_INCLUSIVE', 'BROKER_INCLUSIVE_NON_RESIDENT_IMPORTER', 'BROKER_SELECT', 'BROKER_SELECT_NON_RESIDENT_IMPORTER', 'BROKER_UNASSIGNED']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ClearanceBrokerageType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_InternationalDocumentContentType(self, value):
        result = True
        # Validate type InternationalDocumentContentType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['DERIVED', 'DOCUMENTS_ONLY', 'NON_DOCUMENTS']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on InternationalDocumentContentType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_FreightOnValueType(self, value):
        result = True
        # Validate type FreightOnValueType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CARRIER_RISK', 'OWN_RISK']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on FreightOnValueType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_RegulatoryControlType(self, value):
        result = True
        # Validate type RegulatoryControlType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FOOD_OR_PERISHABLE', 'NAFTA', 'NOT_APPLICABLE_FOR_LOW_CUSTOMS_VALUE_EXCEPTION', 'NOT_IN_FREE_CIRCULATION']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on RegulatoryControlType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Brokers or
            self.ClearanceBrokerage is not None or
            self.CustomsOptions is not None or
            self.ImporterOfRecord is not None or
            self.RecipientCustomsId is not None or
            self.DutiesPayment is not None or
            self.DocumentContent is not None or
            self.CustomsValue is not None or
            self.FreightOnValue is not None or
            self.InsuranceCharges is not None or
            self.PartiesToTransactionAreRelated is not None or
            self.CommercialInvoice is not None or
            self.Commodities or
            self.ExportDetail is not None or
            self.RegulatoryControls
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomsClearanceDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CustomsClearanceDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CustomsClearanceDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CustomsClearanceDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CustomsClearanceDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CustomsClearanceDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomsClearanceDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Brokers_ in self.Brokers:
            namespaceprefix_ = self.Brokers_nsprefix_ + ':' if (UseCapturedNS_ and self.Brokers_nsprefix_) else ''
            Brokers_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Brokers', pretty_print=pretty_print)
        if self.ClearanceBrokerage is not None:
            namespaceprefix_ = self.ClearanceBrokerage_nsprefix_ + ':' if (UseCapturedNS_ and self.ClearanceBrokerage_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClearanceBrokerage>%s</%sClearanceBrokerage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ClearanceBrokerage), input_name='ClearanceBrokerage')), namespaceprefix_ , eol_))
        if self.CustomsOptions is not None:
            namespaceprefix_ = self.CustomsOptions_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomsOptions_nsprefix_) else ''
            self.CustomsOptions.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CustomsOptions', pretty_print=pretty_print)
        if self.ImporterOfRecord is not None:
            namespaceprefix_ = self.ImporterOfRecord_nsprefix_ + ':' if (UseCapturedNS_ and self.ImporterOfRecord_nsprefix_) else ''
            self.ImporterOfRecord.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ImporterOfRecord', pretty_print=pretty_print)
        if self.RecipientCustomsId is not None:
            namespaceprefix_ = self.RecipientCustomsId_nsprefix_ + ':' if (UseCapturedNS_ and self.RecipientCustomsId_nsprefix_) else ''
            self.RecipientCustomsId.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RecipientCustomsId', pretty_print=pretty_print)
        if self.DutiesPayment is not None:
            namespaceprefix_ = self.DutiesPayment_nsprefix_ + ':' if (UseCapturedNS_ and self.DutiesPayment_nsprefix_) else ''
            self.DutiesPayment.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DutiesPayment', pretty_print=pretty_print)
        if self.DocumentContent is not None:
            namespaceprefix_ = self.DocumentContent_nsprefix_ + ':' if (UseCapturedNS_ and self.DocumentContent_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocumentContent>%s</%sDocumentContent>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DocumentContent), input_name='DocumentContent')), namespaceprefix_ , eol_))
        if self.CustomsValue is not None:
            namespaceprefix_ = self.CustomsValue_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomsValue_nsprefix_) else ''
            self.CustomsValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CustomsValue', pretty_print=pretty_print)
        if self.FreightOnValue is not None:
            namespaceprefix_ = self.FreightOnValue_nsprefix_ + ':' if (UseCapturedNS_ and self.FreightOnValue_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFreightOnValue>%s</%sFreightOnValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FreightOnValue), input_name='FreightOnValue')), namespaceprefix_ , eol_))
        if self.InsuranceCharges is not None:
            namespaceprefix_ = self.InsuranceCharges_nsprefix_ + ':' if (UseCapturedNS_ and self.InsuranceCharges_nsprefix_) else ''
            self.InsuranceCharges.export(outfile, level, namespaceprefix_, namespacedef_='', name_='InsuranceCharges', pretty_print=pretty_print)
        if self.PartiesToTransactionAreRelated is not None:
            namespaceprefix_ = self.PartiesToTransactionAreRelated_nsprefix_ + ':' if (UseCapturedNS_ and self.PartiesToTransactionAreRelated_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPartiesToTransactionAreRelated>%s</%sPartiesToTransactionAreRelated>%s' % (namespaceprefix_ , self.gds_format_boolean(self.PartiesToTransactionAreRelated, input_name='PartiesToTransactionAreRelated'), namespaceprefix_ , eol_))
        if self.CommercialInvoice is not None:
            namespaceprefix_ = self.CommercialInvoice_nsprefix_ + ':' if (UseCapturedNS_ and self.CommercialInvoice_nsprefix_) else ''
            self.CommercialInvoice.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CommercialInvoice', pretty_print=pretty_print)
        for Commodities_ in self.Commodities:
            namespaceprefix_ = self.Commodities_nsprefix_ + ':' if (UseCapturedNS_ and self.Commodities_nsprefix_) else ''
            Commodities_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Commodities', pretty_print=pretty_print)
        if self.ExportDetail is not None:
            namespaceprefix_ = self.ExportDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.ExportDetail_nsprefix_) else ''
            self.ExportDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ExportDetail', pretty_print=pretty_print)
        for RegulatoryControls_ in self.RegulatoryControls:
            namespaceprefix_ = self.RegulatoryControls_nsprefix_ + ':' if (UseCapturedNS_ and self.RegulatoryControls_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRegulatoryControls>%s</%sRegulatoryControls>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(RegulatoryControls_), input_name='RegulatoryControls')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Brokers':
            obj_ = BrokerDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Brokers.append(obj_)
            obj_.original_tagname_ = 'Brokers'
        elif nodeName_ == 'ClearanceBrokerage':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ClearanceBrokerage')
            value_ = self.gds_validate_string(value_, node, 'ClearanceBrokerage')
            self.ClearanceBrokerage = value_
            self.ClearanceBrokerage_nsprefix_ = child_.prefix
            # validate type ClearanceBrokerageType
            self.validate_ClearanceBrokerageType(self.ClearanceBrokerage)
        elif nodeName_ == 'CustomsOptions':
            obj_ = CustomsOptionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CustomsOptions = obj_
            obj_.original_tagname_ = 'CustomsOptions'
        elif nodeName_ == 'ImporterOfRecord':
            obj_ = Party.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ImporterOfRecord = obj_
            obj_.original_tagname_ = 'ImporterOfRecord'
        elif nodeName_ == 'RecipientCustomsId':
            obj_ = RecipientCustomsId.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RecipientCustomsId = obj_
            obj_.original_tagname_ = 'RecipientCustomsId'
        elif nodeName_ == 'DutiesPayment':
            obj_ = Payment.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DutiesPayment = obj_
            obj_.original_tagname_ = 'DutiesPayment'
        elif nodeName_ == 'DocumentContent':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DocumentContent')
            value_ = self.gds_validate_string(value_, node, 'DocumentContent')
            self.DocumentContent = value_
            self.DocumentContent_nsprefix_ = child_.prefix
            # validate type InternationalDocumentContentType
            self.validate_InternationalDocumentContentType(self.DocumentContent)
        elif nodeName_ == 'CustomsValue':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CustomsValue = obj_
            obj_.original_tagname_ = 'CustomsValue'
        elif nodeName_ == 'FreightOnValue':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FreightOnValue')
            value_ = self.gds_validate_string(value_, node, 'FreightOnValue')
            self.FreightOnValue = value_
            self.FreightOnValue_nsprefix_ = child_.prefix
            # validate type FreightOnValueType
            self.validate_FreightOnValueType(self.FreightOnValue)
        elif nodeName_ == 'InsuranceCharges':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.InsuranceCharges = obj_
            obj_.original_tagname_ = 'InsuranceCharges'
        elif nodeName_ == 'PartiesToTransactionAreRelated':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'PartiesToTransactionAreRelated')
            ival_ = self.gds_validate_boolean(ival_, node, 'PartiesToTransactionAreRelated')
            self.PartiesToTransactionAreRelated = ival_
            self.PartiesToTransactionAreRelated_nsprefix_ = child_.prefix
        elif nodeName_ == 'CommercialInvoice':
            obj_ = CommercialInvoice.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CommercialInvoice = obj_
            obj_.original_tagname_ = 'CommercialInvoice'
        elif nodeName_ == 'Commodities':
            obj_ = Commodity.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Commodities.append(obj_)
            obj_.original_tagname_ = 'Commodities'
        elif nodeName_ == 'ExportDetail':
            obj_ = ExportDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ExportDetail = obj_
            obj_.original_tagname_ = 'ExportDetail'
        elif nodeName_ == 'RegulatoryControls':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RegulatoryControls')
            value_ = self.gds_validate_string(value_, node, 'RegulatoryControls')
            self.RegulatoryControls.append(value_)
            self.RegulatoryControls_nsprefix_ = child_.prefix
            # validate type RegulatoryControlType
            self.validate_RegulatoryControlType(self.RegulatoryControls[-1])
# end class CustomsClearanceDetail


class CustomsOptionDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, Description=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.validate_CustomsOptionType(self.Type)
        self.Type_nsprefix_ = "ns"
        self.Description = Description
        self.Description_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CustomsOptionDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CustomsOptionDetail.subclass:
            return CustomsOptionDetail.subclass(*args_, **kwargs_)
        else:
            return CustomsOptionDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def validate_CustomsOptionType(self, value):
        result = True
        # Validate type CustomsOptionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['COURTESY_RETURN_LABEL', 'EXHIBITION_TRADE_SHOW', 'FAULTY_ITEM', 'FOLLOWING_REPAIR', 'FOR_REPAIR', 'ITEM_FOR_LOAN', 'OTHER', 'REJECTED', 'REPLACEMENT', 'TRIAL']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CustomsOptionType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Type is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomsOptionDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CustomsOptionDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CustomsOptionDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CustomsOptionDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CustomsOptionDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CustomsOptionDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomsOptionDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type CustomsOptionType
            self.validate_CustomsOptionType(self.Type)
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
# end class CustomsOptionDetail


class DangerousGoodsContainer(GeneratedsSuper):
    """Describes an approved container used to package dangerous goods
    commodities. This does not describe any individual inner receptacles
    that may be within this container."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PackingType=None, ContainerType=None, RadioactiveContainerClass=None, NumberOfContainers=None, HazardousCommodities=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PackingType = PackingType
        self.validate_HazardousContainerPackingType(self.PackingType)
        self.PackingType_nsprefix_ = "ns"
        self.ContainerType = ContainerType
        self.ContainerType_nsprefix_ = None
        self.RadioactiveContainerClass = RadioactiveContainerClass
        self.validate_RadioactiveContainerClassType(self.RadioactiveContainerClass)
        self.RadioactiveContainerClass_nsprefix_ = "ns"
        self.NumberOfContainers = NumberOfContainers
        self.NumberOfContainers_nsprefix_ = None
        if HazardousCommodities is None:
            self.HazardousCommodities = []
        else:
            self.HazardousCommodities = HazardousCommodities
        self.HazardousCommodities_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DangerousGoodsContainer)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DangerousGoodsContainer.subclass:
            return DangerousGoodsContainer.subclass(*args_, **kwargs_)
        else:
            return DangerousGoodsContainer(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PackingType(self):
        return self.PackingType
    def set_PackingType(self, PackingType):
        self.PackingType = PackingType
    def get_ContainerType(self):
        return self.ContainerType
    def set_ContainerType(self, ContainerType):
        self.ContainerType = ContainerType
    def get_RadioactiveContainerClass(self):
        return self.RadioactiveContainerClass
    def set_RadioactiveContainerClass(self, RadioactiveContainerClass):
        self.RadioactiveContainerClass = RadioactiveContainerClass
    def get_NumberOfContainers(self):
        return self.NumberOfContainers
    def set_NumberOfContainers(self, NumberOfContainers):
        self.NumberOfContainers = NumberOfContainers
    def get_HazardousCommodities(self):
        return self.HazardousCommodities
    def set_HazardousCommodities(self, HazardousCommodities):
        self.HazardousCommodities = HazardousCommodities
    def add_HazardousCommodities(self, value):
        self.HazardousCommodities.append(value)
    def insert_HazardousCommodities_at(self, index, value):
        self.HazardousCommodities.insert(index, value)
    def replace_HazardousCommodities_at(self, index, value):
        self.HazardousCommodities[index] = value
    def validate_HazardousContainerPackingType(self, value):
        result = True
        # Validate type HazardousContainerPackingType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ALL_PACKED_IN_ONE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on HazardousContainerPackingType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_RadioactiveContainerClassType(self, value):
        result = True
        # Validate type RadioactiveContainerClassType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['EXCEPTED_PACKAGE', 'INDUSTRIAL_IP1', 'INDUSTRIAL_IP2', 'INDUSTRIAL_IP3', 'TYPE_A', 'TYPE_B_M', 'TYPE_B_U', 'TYPE_C']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on RadioactiveContainerClassType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.PackingType is not None or
            self.ContainerType is not None or
            self.RadioactiveContainerClass is not None or
            self.NumberOfContainers is not None or
            self.HazardousCommodities
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DangerousGoodsContainer', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DangerousGoodsContainer')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DangerousGoodsContainer':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DangerousGoodsContainer')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DangerousGoodsContainer', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DangerousGoodsContainer'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DangerousGoodsContainer', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PackingType is not None:
            namespaceprefix_ = self.PackingType_nsprefix_ + ':' if (UseCapturedNS_ and self.PackingType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackingType>%s</%sPackingType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PackingType), input_name='PackingType')), namespaceprefix_ , eol_))
        if self.ContainerType is not None:
            namespaceprefix_ = self.ContainerType_nsprefix_ + ':' if (UseCapturedNS_ and self.ContainerType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContainerType>%s</%sContainerType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ContainerType), input_name='ContainerType')), namespaceprefix_ , eol_))
        if self.RadioactiveContainerClass is not None:
            namespaceprefix_ = self.RadioactiveContainerClass_nsprefix_ + ':' if (UseCapturedNS_ and self.RadioactiveContainerClass_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRadioactiveContainerClass>%s</%sRadioactiveContainerClass>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RadioactiveContainerClass), input_name='RadioactiveContainerClass')), namespaceprefix_ , eol_))
        if self.NumberOfContainers is not None:
            namespaceprefix_ = self.NumberOfContainers_nsprefix_ + ':' if (UseCapturedNS_ and self.NumberOfContainers_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumberOfContainers>%s</%sNumberOfContainers>%s' % (namespaceprefix_ , self.gds_format_integer(self.NumberOfContainers, input_name='NumberOfContainers'), namespaceprefix_ , eol_))
        for HazardousCommodities_ in self.HazardousCommodities:
            namespaceprefix_ = self.HazardousCommodities_nsprefix_ + ':' if (UseCapturedNS_ and self.HazardousCommodities_nsprefix_) else ''
            HazardousCommodities_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='HazardousCommodities', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PackingType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PackingType')
            value_ = self.gds_validate_string(value_, node, 'PackingType')
            self.PackingType = value_
            self.PackingType_nsprefix_ = child_.prefix
            # validate type HazardousContainerPackingType
            self.validate_HazardousContainerPackingType(self.PackingType)
        elif nodeName_ == 'ContainerType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ContainerType')
            value_ = self.gds_validate_string(value_, node, 'ContainerType')
            self.ContainerType = value_
            self.ContainerType_nsprefix_ = child_.prefix
        elif nodeName_ == 'RadioactiveContainerClass':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RadioactiveContainerClass')
            value_ = self.gds_validate_string(value_, node, 'RadioactiveContainerClass')
            self.RadioactiveContainerClass = value_
            self.RadioactiveContainerClass_nsprefix_ = child_.prefix
            # validate type RadioactiveContainerClassType
            self.validate_RadioactiveContainerClassType(self.RadioactiveContainerClass)
        elif nodeName_ == 'NumberOfContainers' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'NumberOfContainers')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'NumberOfContainers')
            self.NumberOfContainers = ival_
            self.NumberOfContainers_nsprefix_ = child_.prefix
        elif nodeName_ == 'HazardousCommodities':
            obj_ = HazardousCommodityContent.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.HazardousCommodities.append(obj_)
            obj_.original_tagname_ = 'HazardousCommodities'
# end class DangerousGoodsContainer


class DangerousGoodsDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Accessibility=None, CargoAircraftOnly=None, DangerousGoodsDescriptors=None, Options=None, PackingOption=None, ReferenceId=None, Containers=None, Packaging=None, Signatory=None, EmergencyContactNumber=None, Offeror=None, InfectiousSubstanceResponsibleContact=None, AdditionalHandling=None, RadioactivityDetail=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Accessibility = Accessibility
        self.validate_DangerousGoodsAccessibilityType(self.Accessibility)
        self.Accessibility_nsprefix_ = "ns"
        self.CargoAircraftOnly = CargoAircraftOnly
        self.CargoAircraftOnly_nsprefix_ = None
        if DangerousGoodsDescriptors is None:
            self.DangerousGoodsDescriptors = []
        else:
            self.DangerousGoodsDescriptors = DangerousGoodsDescriptors
        self.DangerousGoodsDescriptors_nsprefix_ = "ns"
        if Options is None:
            self.Options = []
        else:
            self.Options = Options
        self.Options_nsprefix_ = "ns"
        self.PackingOption = PackingOption
        self.validate_DangerousGoodsPackingOptionType(self.PackingOption)
        self.PackingOption_nsprefix_ = "ns"
        self.ReferenceId = ReferenceId
        self.ReferenceId_nsprefix_ = None
        if Containers is None:
            self.Containers = []
        else:
            self.Containers = Containers
        self.Containers_nsprefix_ = "ns"
        self.Packaging = Packaging
        self.Packaging_nsprefix_ = "ns"
        self.Signatory = Signatory
        self.Signatory_nsprefix_ = "ns"
        self.EmergencyContactNumber = EmergencyContactNumber
        self.EmergencyContactNumber_nsprefix_ = None
        self.Offeror = Offeror
        self.Offeror_nsprefix_ = None
        self.InfectiousSubstanceResponsibleContact = InfectiousSubstanceResponsibleContact
        self.InfectiousSubstanceResponsibleContact_nsprefix_ = "ns"
        self.AdditionalHandling = AdditionalHandling
        self.AdditionalHandling_nsprefix_ = None
        self.RadioactivityDetail = RadioactivityDetail
        self.RadioactivityDetail_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DangerousGoodsDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DangerousGoodsDetail.subclass:
            return DangerousGoodsDetail.subclass(*args_, **kwargs_)
        else:
            return DangerousGoodsDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Accessibility(self):
        return self.Accessibility
    def set_Accessibility(self, Accessibility):
        self.Accessibility = Accessibility
    def get_CargoAircraftOnly(self):
        return self.CargoAircraftOnly
    def set_CargoAircraftOnly(self, CargoAircraftOnly):
        self.CargoAircraftOnly = CargoAircraftOnly
    def get_DangerousGoodsDescriptors(self):
        return self.DangerousGoodsDescriptors
    def set_DangerousGoodsDescriptors(self, DangerousGoodsDescriptors):
        self.DangerousGoodsDescriptors = DangerousGoodsDescriptors
    def add_DangerousGoodsDescriptors(self, value):
        self.DangerousGoodsDescriptors.append(value)
    def insert_DangerousGoodsDescriptors_at(self, index, value):
        self.DangerousGoodsDescriptors.insert(index, value)
    def replace_DangerousGoodsDescriptors_at(self, index, value):
        self.DangerousGoodsDescriptors[index] = value
    def get_Options(self):
        return self.Options
    def set_Options(self, Options):
        self.Options = Options
    def add_Options(self, value):
        self.Options.append(value)
    def insert_Options_at(self, index, value):
        self.Options.insert(index, value)
    def replace_Options_at(self, index, value):
        self.Options[index] = value
    def get_PackingOption(self):
        return self.PackingOption
    def set_PackingOption(self, PackingOption):
        self.PackingOption = PackingOption
    def get_ReferenceId(self):
        return self.ReferenceId
    def set_ReferenceId(self, ReferenceId):
        self.ReferenceId = ReferenceId
    def get_Containers(self):
        return self.Containers
    def set_Containers(self, Containers):
        self.Containers = Containers
    def add_Containers(self, value):
        self.Containers.append(value)
    def insert_Containers_at(self, index, value):
        self.Containers.insert(index, value)
    def replace_Containers_at(self, index, value):
        self.Containers[index] = value
    def get_Packaging(self):
        return self.Packaging
    def set_Packaging(self, Packaging):
        self.Packaging = Packaging
    def get_Signatory(self):
        return self.Signatory
    def set_Signatory(self, Signatory):
        self.Signatory = Signatory
    def get_EmergencyContactNumber(self):
        return self.EmergencyContactNumber
    def set_EmergencyContactNumber(self, EmergencyContactNumber):
        self.EmergencyContactNumber = EmergencyContactNumber
    def get_Offeror(self):
        return self.Offeror
    def set_Offeror(self, Offeror):
        self.Offeror = Offeror
    def get_InfectiousSubstanceResponsibleContact(self):
        return self.InfectiousSubstanceResponsibleContact
    def set_InfectiousSubstanceResponsibleContact(self, InfectiousSubstanceResponsibleContact):
        self.InfectiousSubstanceResponsibleContact = InfectiousSubstanceResponsibleContact
    def get_AdditionalHandling(self):
        return self.AdditionalHandling
    def set_AdditionalHandling(self, AdditionalHandling):
        self.AdditionalHandling = AdditionalHandling
    def get_RadioactivityDetail(self):
        return self.RadioactivityDetail
    def set_RadioactivityDetail(self, RadioactivityDetail):
        self.RadioactivityDetail = RadioactivityDetail
    def validate_DangerousGoodsAccessibilityType(self, value):
        result = True
        # Validate type DangerousGoodsAccessibilityType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ACCESSIBLE', 'INACCESSIBLE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on DangerousGoodsAccessibilityType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_DangerousGoodsDescriptorType(self, value):
        result = True
        # Validate type DangerousGoodsDescriptorType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ALCOHOLIC_BEVERAGE', 'DRY_ICE', 'EMERGENCY_CONTACT_PHONE_REQUIRED', 'EXCEPTED_QUANTITIES', 'INFECTIOUS_SUBSTANCE', 'RADIOACTIVE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on DangerousGoodsDescriptorType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_HazardousCommodityOptionType(self, value):
        result = True
        # Validate type HazardousCommodityOptionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BATTERY', 'HAZARDOUS_MATERIALS', 'ORM_D', 'REPORTABLE_QUANTITIES', 'SMALL_QUANTITY_EXCEPTION']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on HazardousCommodityOptionType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_DangerousGoodsPackingOptionType(self, value):
        result = True
        # Validate type DangerousGoodsPackingOptionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['OVERPACK']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on DangerousGoodsPackingOptionType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Accessibility is not None or
            self.CargoAircraftOnly is not None or
            self.DangerousGoodsDescriptors or
            self.Options or
            self.PackingOption is not None or
            self.ReferenceId is not None or
            self.Containers or
            self.Packaging is not None or
            self.Signatory is not None or
            self.EmergencyContactNumber is not None or
            self.Offeror is not None or
            self.InfectiousSubstanceResponsibleContact is not None or
            self.AdditionalHandling is not None or
            self.RadioactivityDetail is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DangerousGoodsDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DangerousGoodsDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DangerousGoodsDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DangerousGoodsDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DangerousGoodsDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DangerousGoodsDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DangerousGoodsDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Accessibility is not None:
            namespaceprefix_ = self.Accessibility_nsprefix_ + ':' if (UseCapturedNS_ and self.Accessibility_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAccessibility>%s</%sAccessibility>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Accessibility), input_name='Accessibility')), namespaceprefix_ , eol_))
        if self.CargoAircraftOnly is not None:
            namespaceprefix_ = self.CargoAircraftOnly_nsprefix_ + ':' if (UseCapturedNS_ and self.CargoAircraftOnly_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCargoAircraftOnly>%s</%sCargoAircraftOnly>%s' % (namespaceprefix_ , self.gds_format_boolean(self.CargoAircraftOnly, input_name='CargoAircraftOnly'), namespaceprefix_ , eol_))
        for DangerousGoodsDescriptors_ in self.DangerousGoodsDescriptors:
            namespaceprefix_ = self.DangerousGoodsDescriptors_nsprefix_ + ':' if (UseCapturedNS_ and self.DangerousGoodsDescriptors_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDangerousGoodsDescriptors>%s</%sDangerousGoodsDescriptors>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(DangerousGoodsDescriptors_), input_name='DangerousGoodsDescriptors')), namespaceprefix_ , eol_))
        for Options_ in self.Options:
            namespaceprefix_ = self.Options_nsprefix_ + ':' if (UseCapturedNS_ and self.Options_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOptions>%s</%sOptions>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Options_), input_name='Options')), namespaceprefix_ , eol_))
        if self.PackingOption is not None:
            namespaceprefix_ = self.PackingOption_nsprefix_ + ':' if (UseCapturedNS_ and self.PackingOption_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackingOption>%s</%sPackingOption>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PackingOption), input_name='PackingOption')), namespaceprefix_ , eol_))
        if self.ReferenceId is not None:
            namespaceprefix_ = self.ReferenceId_nsprefix_ + ':' if (UseCapturedNS_ and self.ReferenceId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceId>%s</%sReferenceId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceId), input_name='ReferenceId')), namespaceprefix_ , eol_))
        for Containers_ in self.Containers:
            namespaceprefix_ = self.Containers_nsprefix_ + ':' if (UseCapturedNS_ and self.Containers_nsprefix_) else ''
            Containers_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Containers', pretty_print=pretty_print)
        if self.Packaging is not None:
            namespaceprefix_ = self.Packaging_nsprefix_ + ':' if (UseCapturedNS_ and self.Packaging_nsprefix_) else ''
            self.Packaging.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Packaging', pretty_print=pretty_print)
        if self.Signatory is not None:
            namespaceprefix_ = self.Signatory_nsprefix_ + ':' if (UseCapturedNS_ and self.Signatory_nsprefix_) else ''
            self.Signatory.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Signatory', pretty_print=pretty_print)
        if self.EmergencyContactNumber is not None:
            namespaceprefix_ = self.EmergencyContactNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.EmergencyContactNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEmergencyContactNumber>%s</%sEmergencyContactNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EmergencyContactNumber), input_name='EmergencyContactNumber')), namespaceprefix_ , eol_))
        if self.Offeror is not None:
            namespaceprefix_ = self.Offeror_nsprefix_ + ':' if (UseCapturedNS_ and self.Offeror_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOfferor>%s</%sOfferor>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Offeror), input_name='Offeror')), namespaceprefix_ , eol_))
        if self.InfectiousSubstanceResponsibleContact is not None:
            namespaceprefix_ = self.InfectiousSubstanceResponsibleContact_nsprefix_ + ':' if (UseCapturedNS_ and self.InfectiousSubstanceResponsibleContact_nsprefix_) else ''
            self.InfectiousSubstanceResponsibleContact.export(outfile, level, namespaceprefix_, namespacedef_='', name_='InfectiousSubstanceResponsibleContact', pretty_print=pretty_print)
        if self.AdditionalHandling is not None:
            namespaceprefix_ = self.AdditionalHandling_nsprefix_ + ':' if (UseCapturedNS_ and self.AdditionalHandling_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAdditionalHandling>%s</%sAdditionalHandling>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AdditionalHandling), input_name='AdditionalHandling')), namespaceprefix_ , eol_))
        if self.RadioactivityDetail is not None:
            namespaceprefix_ = self.RadioactivityDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.RadioactivityDetail_nsprefix_) else ''
            self.RadioactivityDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RadioactivityDetail', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Accessibility':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Accessibility')
            value_ = self.gds_validate_string(value_, node, 'Accessibility')
            self.Accessibility = value_
            self.Accessibility_nsprefix_ = child_.prefix
            # validate type DangerousGoodsAccessibilityType
            self.validate_DangerousGoodsAccessibilityType(self.Accessibility)
        elif nodeName_ == 'CargoAircraftOnly':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'CargoAircraftOnly')
            ival_ = self.gds_validate_boolean(ival_, node, 'CargoAircraftOnly')
            self.CargoAircraftOnly = ival_
            self.CargoAircraftOnly_nsprefix_ = child_.prefix
        elif nodeName_ == 'DangerousGoodsDescriptors':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DangerousGoodsDescriptors')
            value_ = self.gds_validate_string(value_, node, 'DangerousGoodsDescriptors')
            self.DangerousGoodsDescriptors.append(value_)
            self.DangerousGoodsDescriptors_nsprefix_ = child_.prefix
            # validate type DangerousGoodsDescriptorType
            self.validate_DangerousGoodsDescriptorType(self.DangerousGoodsDescriptors[-1])
        elif nodeName_ == 'Options':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Options')
            value_ = self.gds_validate_string(value_, node, 'Options')
            self.Options.append(value_)
            self.Options_nsprefix_ = child_.prefix
            # validate type HazardousCommodityOptionType
            self.validate_HazardousCommodityOptionType(self.Options[-1])
        elif nodeName_ == 'PackingOption':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PackingOption')
            value_ = self.gds_validate_string(value_, node, 'PackingOption')
            self.PackingOption = value_
            self.PackingOption_nsprefix_ = child_.prefix
            # validate type DangerousGoodsPackingOptionType
            self.validate_DangerousGoodsPackingOptionType(self.PackingOption)
        elif nodeName_ == 'ReferenceId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ReferenceId')
            value_ = self.gds_validate_string(value_, node, 'ReferenceId')
            self.ReferenceId = value_
            self.ReferenceId_nsprefix_ = child_.prefix
        elif nodeName_ == 'Containers':
            obj_ = DangerousGoodsContainer.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Containers.append(obj_)
            obj_.original_tagname_ = 'Containers'
        elif nodeName_ == 'Packaging':
            obj_ = HazardousCommodityPackagingDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Packaging = obj_
            obj_.original_tagname_ = 'Packaging'
        elif nodeName_ == 'Signatory':
            obj_ = DangerousGoodsSignatory.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Signatory = obj_
            obj_.original_tagname_ = 'Signatory'
        elif nodeName_ == 'EmergencyContactNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EmergencyContactNumber')
            value_ = self.gds_validate_string(value_, node, 'EmergencyContactNumber')
            self.EmergencyContactNumber = value_
            self.EmergencyContactNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'Offeror':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Offeror')
            value_ = self.gds_validate_string(value_, node, 'Offeror')
            self.Offeror = value_
            self.Offeror_nsprefix_ = child_.prefix
        elif nodeName_ == 'InfectiousSubstanceResponsibleContact':
            obj_ = Contact.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.InfectiousSubstanceResponsibleContact = obj_
            obj_.original_tagname_ = 'InfectiousSubstanceResponsibleContact'
        elif nodeName_ == 'AdditionalHandling':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AdditionalHandling')
            value_ = self.gds_validate_string(value_, node, 'AdditionalHandling')
            self.AdditionalHandling = value_
            self.AdditionalHandling_nsprefix_ = child_.prefix
        elif nodeName_ == 'RadioactivityDetail':
            obj_ = RadioactivityDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RadioactivityDetail = obj_
            obj_.original_tagname_ = 'RadioactivityDetail'
# end class DangerousGoodsDetail


class DangerousGoodsShippersDeclarationDetail(GeneratedsSuper):
    """The instructions indicating how to print the 1421c form for dangerous
    goods shipment."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Format=None, CustomerImageUsages=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Format = Format
        self.Format_nsprefix_ = "ns"
        if CustomerImageUsages is None:
            self.CustomerImageUsages = []
        else:
            self.CustomerImageUsages = CustomerImageUsages
        self.CustomerImageUsages_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DangerousGoodsShippersDeclarationDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DangerousGoodsShippersDeclarationDetail.subclass:
            return DangerousGoodsShippersDeclarationDetail.subclass(*args_, **kwargs_)
        else:
            return DangerousGoodsShippersDeclarationDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Format(self):
        return self.Format
    def set_Format(self, Format):
        self.Format = Format
    def get_CustomerImageUsages(self):
        return self.CustomerImageUsages
    def set_CustomerImageUsages(self, CustomerImageUsages):
        self.CustomerImageUsages = CustomerImageUsages
    def add_CustomerImageUsages(self, value):
        self.CustomerImageUsages.append(value)
    def insert_CustomerImageUsages_at(self, index, value):
        self.CustomerImageUsages.insert(index, value)
    def replace_CustomerImageUsages_at(self, index, value):
        self.CustomerImageUsages[index] = value
    def hasContent_(self):
        if (
            self.Format is not None or
            self.CustomerImageUsages
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DangerousGoodsShippersDeclarationDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DangerousGoodsShippersDeclarationDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DangerousGoodsShippersDeclarationDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DangerousGoodsShippersDeclarationDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DangerousGoodsShippersDeclarationDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DangerousGoodsShippersDeclarationDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DangerousGoodsShippersDeclarationDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Format is not None:
            namespaceprefix_ = self.Format_nsprefix_ + ':' if (UseCapturedNS_ and self.Format_nsprefix_) else ''
            self.Format.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Format', pretty_print=pretty_print)
        for CustomerImageUsages_ in self.CustomerImageUsages:
            namespaceprefix_ = self.CustomerImageUsages_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomerImageUsages_nsprefix_) else ''
            CustomerImageUsages_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CustomerImageUsages', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Format':
            obj_ = ShippingDocumentFormat.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Format = obj_
            obj_.original_tagname_ = 'Format'
        elif nodeName_ == 'CustomerImageUsages':
            obj_ = CustomerImageUsage.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CustomerImageUsages.append(obj_)
            obj_.original_tagname_ = 'CustomerImageUsages'
# end class DangerousGoodsShippersDeclarationDetail


class DangerousGoodsSignatory(GeneratedsSuper):
    """Specifies that name, title and place of the signatory responsible for
    the dangerous goods shipment."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ContactName=None, Title=None, Place=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ContactName = ContactName
        self.ContactName_nsprefix_ = None
        self.Title = Title
        self.Title_nsprefix_ = None
        self.Place = Place
        self.Place_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DangerousGoodsSignatory)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DangerousGoodsSignatory.subclass:
            return DangerousGoodsSignatory.subclass(*args_, **kwargs_)
        else:
            return DangerousGoodsSignatory(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ContactName(self):
        return self.ContactName
    def set_ContactName(self, ContactName):
        self.ContactName = ContactName
    def get_Title(self):
        return self.Title
    def set_Title(self, Title):
        self.Title = Title
    def get_Place(self):
        return self.Place
    def set_Place(self, Place):
        self.Place = Place
    def hasContent_(self):
        if (
            self.ContactName is not None or
            self.Title is not None or
            self.Place is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DangerousGoodsSignatory', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DangerousGoodsSignatory')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DangerousGoodsSignatory':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DangerousGoodsSignatory')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DangerousGoodsSignatory', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DangerousGoodsSignatory'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DangerousGoodsSignatory', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactName is not None:
            namespaceprefix_ = self.ContactName_nsprefix_ + ':' if (UseCapturedNS_ and self.ContactName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContactName>%s</%sContactName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ContactName), input_name='ContactName')), namespaceprefix_ , eol_))
        if self.Title is not None:
            namespaceprefix_ = self.Title_nsprefix_ + ':' if (UseCapturedNS_ and self.Title_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTitle>%s</%sTitle>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Title), input_name='Title')), namespaceprefix_ , eol_))
        if self.Place is not None:
            namespaceprefix_ = self.Place_nsprefix_ + ':' if (UseCapturedNS_ and self.Place_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPlace>%s</%sPlace>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Place), input_name='Place')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ContactName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ContactName')
            value_ = self.gds_validate_string(value_, node, 'ContactName')
            self.ContactName = value_
            self.ContactName_nsprefix_ = child_.prefix
        elif nodeName_ == 'Title':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Title')
            value_ = self.gds_validate_string(value_, node, 'Title')
            self.Title = value_
            self.Title_nsprefix_ = child_.prefix
        elif nodeName_ == 'Place':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Place')
            value_ = self.gds_validate_string(value_, node, 'Place')
            self.Place = value_
            self.Place_nsprefix_ = child_.prefix
# end class DangerousGoodsSignatory


class DateRange(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Begins=None, Ends=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if isinstance(Begins, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Begins, '%Y-%m-%d').date()
        else:
            initvalue_ = Begins
        self.Begins = initvalue_
        self.Begins_nsprefix_ = None
        if isinstance(Ends, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Ends, '%Y-%m-%d').date()
        else:
            initvalue_ = Ends
        self.Ends = initvalue_
        self.Ends_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateRange)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateRange.subclass:
            return DateRange.subclass(*args_, **kwargs_)
        else:
            return DateRange(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Begins(self):
        return self.Begins
    def set_Begins(self, Begins):
        self.Begins = Begins
    def get_Ends(self):
        return self.Ends
    def set_Ends(self, Ends):
        self.Ends = Ends
    def hasContent_(self):
        if (
            self.Begins is not None or
            self.Ends is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DateRange', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DateRange')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DateRange':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DateRange')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DateRange', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DateRange'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DateRange', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Begins is not None:
            namespaceprefix_ = self.Begins_nsprefix_ + ':' if (UseCapturedNS_ and self.Begins_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBegins>%s</%sBegins>%s' % (namespaceprefix_ , self.gds_format_date(self.Begins, input_name='Begins'), namespaceprefix_ , eol_))
        if self.Ends is not None:
            namespaceprefix_ = self.Ends_nsprefix_ + ':' if (UseCapturedNS_ and self.Ends_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEnds>%s</%sEnds>%s' % (namespaceprefix_ , self.gds_format_date(self.Ends, input_name='Ends'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Begins':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Begins = dval_
            self.Begins_nsprefix_ = child_.prefix
        elif nodeName_ == 'Ends':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Ends = dval_
            self.Ends_nsprefix_ = child_.prefix
# end class DateRange


class DelayDetail(GeneratedsSuper):
    """Information about why a shipment delivery is delayed and at what level(
    country/service etc.)."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Date=None, DayOfWeek=None, Level=None, Point=None, Type=None, Description=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if isinstance(Date, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Date, '%Y-%m-%d').date()
        else:
            initvalue_ = Date
        self.Date = initvalue_
        self.Date_nsprefix_ = None
        self.DayOfWeek = DayOfWeek
        self.validate_DayOfWeekType(self.DayOfWeek)
        self.DayOfWeek_nsprefix_ = "ns"
        self.Level = Level
        self.validate_DelayLevelType(self.Level)
        self.Level_nsprefix_ = "ns"
        self.Point = Point
        self.validate_DelayPointType(self.Point)
        self.Point_nsprefix_ = "ns"
        self.Type = Type
        self.validate_CommitmentDelayType(self.Type)
        self.Type_nsprefix_ = "ns"
        self.Description = Description
        self.Description_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DelayDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DelayDetail.subclass:
            return DelayDetail.subclass(*args_, **kwargs_)
        else:
            return DelayDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Date(self):
        return self.Date
    def set_Date(self, Date):
        self.Date = Date
    def get_DayOfWeek(self):
        return self.DayOfWeek
    def set_DayOfWeek(self, DayOfWeek):
        self.DayOfWeek = DayOfWeek
    def get_Level(self):
        return self.Level
    def set_Level(self, Level):
        self.Level = Level
    def get_Point(self):
        return self.Point
    def set_Point(self, Point):
        self.Point = Point
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def validate_DayOfWeekType(self, value):
        result = True
        # Validate type DayOfWeekType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FRI', 'MON', 'SAT', 'SUN', 'THU', 'TUE', 'WED']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on DayOfWeekType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_DelayLevelType(self, value):
        result = True
        # Validate type DelayLevelType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CITY', 'COUNTRY', 'LOCATION', 'POSTAL_CODE', 'SERVICE_AREA', 'SERVICE_AREA_SPECIAL_SERVICE', 'SPECIAL_SERVICE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on DelayLevelType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_DelayPointType(self, value):
        result = True
        # Validate type DelayPointType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BROKER', 'DESTINATION', 'ORIGIN', 'ORIGIN_DESTINATION_PAIR', 'PROOF_OF_DELIVERY_POINT']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on DelayPointType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_CommitmentDelayType(self, value):
        result = True
        # Validate type CommitmentDelayType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['HOLIDAY', 'NON_WORKDAY', 'NO_CITY_DELIVERY', 'NO_HOLD_AT_LOCATION', 'NO_LOCATION_DELIVERY', 'NO_SERVICE_AREA_DELIVERY', 'NO_SERVICE_AREA_SPECIAL_SERVICE_DELIVERY', 'NO_SPECIAL_SERVICE_DELIVERY', 'NO_ZIP_DELIVERY', 'WEEKEND', 'WEEKEND_SPECIAL']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CommitmentDelayType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Date is not None or
            self.DayOfWeek is not None or
            self.Level is not None or
            self.Point is not None or
            self.Type is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DelayDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DelayDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DelayDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DelayDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DelayDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DelayDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DelayDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Date is not None:
            namespaceprefix_ = self.Date_nsprefix_ + ':' if (UseCapturedNS_ and self.Date_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDate>%s</%sDate>%s' % (namespaceprefix_ , self.gds_format_date(self.Date, input_name='Date'), namespaceprefix_ , eol_))
        if self.DayOfWeek is not None:
            namespaceprefix_ = self.DayOfWeek_nsprefix_ + ':' if (UseCapturedNS_ and self.DayOfWeek_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDayOfWeek>%s</%sDayOfWeek>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DayOfWeek), input_name='DayOfWeek')), namespaceprefix_ , eol_))
        if self.Level is not None:
            namespaceprefix_ = self.Level_nsprefix_ + ':' if (UseCapturedNS_ and self.Level_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLevel>%s</%sLevel>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Level), input_name='Level')), namespaceprefix_ , eol_))
        if self.Point is not None:
            namespaceprefix_ = self.Point_nsprefix_ + ':' if (UseCapturedNS_ and self.Point_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPoint>%s</%sPoint>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Point), input_name='Point')), namespaceprefix_ , eol_))
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Date':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Date = dval_
            self.Date_nsprefix_ = child_.prefix
        elif nodeName_ == 'DayOfWeek':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DayOfWeek')
            value_ = self.gds_validate_string(value_, node, 'DayOfWeek')
            self.DayOfWeek = value_
            self.DayOfWeek_nsprefix_ = child_.prefix
            # validate type DayOfWeekType
            self.validate_DayOfWeekType(self.DayOfWeek)
        elif nodeName_ == 'Level':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Level')
            value_ = self.gds_validate_string(value_, node, 'Level')
            self.Level = value_
            self.Level_nsprefix_ = child_.prefix
            # validate type DelayLevelType
            self.validate_DelayLevelType(self.Level)
        elif nodeName_ == 'Point':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Point')
            value_ = self.gds_validate_string(value_, node, 'Point')
            self.Point = value_
            self.Point_nsprefix_ = child_.prefix
            # validate type DelayPointType
            self.validate_DelayPointType(self.Point)
        elif nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type CommitmentDelayType
            self.validate_CommitmentDelayType(self.Type)
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
# end class DelayDetail


class DeliveryOnInvoiceAcceptanceDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Recipient=None, TrackingId=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Recipient = Recipient
        self.Recipient_nsprefix_ = "ns"
        self.TrackingId = TrackingId
        self.TrackingId_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DeliveryOnInvoiceAcceptanceDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DeliveryOnInvoiceAcceptanceDetail.subclass:
            return DeliveryOnInvoiceAcceptanceDetail.subclass(*args_, **kwargs_)
        else:
            return DeliveryOnInvoiceAcceptanceDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Recipient(self):
        return self.Recipient
    def set_Recipient(self, Recipient):
        self.Recipient = Recipient
    def get_TrackingId(self):
        return self.TrackingId
    def set_TrackingId(self, TrackingId):
        self.TrackingId = TrackingId
    def hasContent_(self):
        if (
            self.Recipient is not None or
            self.TrackingId is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DeliveryOnInvoiceAcceptanceDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DeliveryOnInvoiceAcceptanceDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DeliveryOnInvoiceAcceptanceDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DeliveryOnInvoiceAcceptanceDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DeliveryOnInvoiceAcceptanceDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DeliveryOnInvoiceAcceptanceDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DeliveryOnInvoiceAcceptanceDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Recipient is not None:
            namespaceprefix_ = self.Recipient_nsprefix_ + ':' if (UseCapturedNS_ and self.Recipient_nsprefix_) else ''
            self.Recipient.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Recipient', pretty_print=pretty_print)
        if self.TrackingId is not None:
            namespaceprefix_ = self.TrackingId_nsprefix_ + ':' if (UseCapturedNS_ and self.TrackingId_nsprefix_) else ''
            self.TrackingId.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TrackingId', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Recipient':
            obj_ = Party.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Recipient = obj_
            obj_.original_tagname_ = 'Recipient'
        elif nodeName_ == 'TrackingId':
            obj_ = TrackingId.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TrackingId = obj_
            obj_.original_tagname_ = 'TrackingId'
# end class DeliveryOnInvoiceAcceptanceDetail


class DestinationControlDetail(GeneratedsSuper):
    """Data required to complete the Destionation Control Statement for US
    exports."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, StatementTypes=None, DestinationCountries=None, EndUser=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if StatementTypes is None:
            self.StatementTypes = []
        else:
            self.StatementTypes = StatementTypes
        self.StatementTypes_nsprefix_ = "ns"
        self.DestinationCountries = DestinationCountries
        self.DestinationCountries_nsprefix_ = None
        self.EndUser = EndUser
        self.EndUser_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DestinationControlDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DestinationControlDetail.subclass:
            return DestinationControlDetail.subclass(*args_, **kwargs_)
        else:
            return DestinationControlDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_StatementTypes(self):
        return self.StatementTypes
    def set_StatementTypes(self, StatementTypes):
        self.StatementTypes = StatementTypes
    def add_StatementTypes(self, value):
        self.StatementTypes.append(value)
    def insert_StatementTypes_at(self, index, value):
        self.StatementTypes.insert(index, value)
    def replace_StatementTypes_at(self, index, value):
        self.StatementTypes[index] = value
    def get_DestinationCountries(self):
        return self.DestinationCountries
    def set_DestinationCountries(self, DestinationCountries):
        self.DestinationCountries = DestinationCountries
    def get_EndUser(self):
        return self.EndUser
    def set_EndUser(self, EndUser):
        self.EndUser = EndUser
    def validate_DestinationControlStatementType(self, value):
        result = True
        # Validate type DestinationControlStatementType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['DEPARTMENT_OF_COMMERCE', 'DEPARTMENT_OF_STATE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on DestinationControlStatementType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.StatementTypes or
            self.DestinationCountries is not None or
            self.EndUser is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DestinationControlDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DestinationControlDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DestinationControlDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DestinationControlDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DestinationControlDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DestinationControlDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DestinationControlDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for StatementTypes_ in self.StatementTypes:
            namespaceprefix_ = self.StatementTypes_nsprefix_ + ':' if (UseCapturedNS_ and self.StatementTypes_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStatementTypes>%s</%sStatementTypes>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(StatementTypes_), input_name='StatementTypes')), namespaceprefix_ , eol_))
        if self.DestinationCountries is not None:
            namespaceprefix_ = self.DestinationCountries_nsprefix_ + ':' if (UseCapturedNS_ and self.DestinationCountries_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDestinationCountries>%s</%sDestinationCountries>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DestinationCountries), input_name='DestinationCountries')), namespaceprefix_ , eol_))
        if self.EndUser is not None:
            namespaceprefix_ = self.EndUser_nsprefix_ + ':' if (UseCapturedNS_ and self.EndUser_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEndUser>%s</%sEndUser>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EndUser), input_name='EndUser')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'StatementTypes':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'StatementTypes')
            value_ = self.gds_validate_string(value_, node, 'StatementTypes')
            self.StatementTypes.append(value_)
            self.StatementTypes_nsprefix_ = child_.prefix
            # validate type DestinationControlStatementType
            self.validate_DestinationControlStatementType(self.StatementTypes[-1])
        elif nodeName_ == 'DestinationCountries':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DestinationCountries')
            value_ = self.gds_validate_string(value_, node, 'DestinationCountries')
            self.DestinationCountries = value_
            self.DestinationCountries_nsprefix_ = child_.prefix
        elif nodeName_ == 'EndUser':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EndUser')
            value_ = self.gds_validate_string(value_, node, 'EndUser')
            self.EndUser = value_
            self.EndUser_nsprefix_ = child_.prefix
# end class DestinationControlDetail


class DetentionDetail(GeneratedsSuper):
    """Specifications for pup/set or vehicle delayed for loading or
    unloading."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Duration=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Duration = Duration
        self.Duration_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DetentionDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DetentionDetail.subclass:
            return DetentionDetail.subclass(*args_, **kwargs_)
        else:
            return DetentionDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Duration(self):
        return self.Duration
    def set_Duration(self, Duration):
        self.Duration = Duration
    def hasContent_(self):
        if (
            self.Duration is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DetentionDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DetentionDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DetentionDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DetentionDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DetentionDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DetentionDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DetentionDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Duration is not None:
            namespaceprefix_ = self.Duration_nsprefix_ + ':' if (UseCapturedNS_ and self.Duration_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDuration>%s</%sDuration>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Duration), input_name='Duration')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Duration':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Duration')
            value_ = self.gds_validate_string(value_, node, 'Duration')
            self.Duration = value_
            self.Duration_nsprefix_ = child_.prefix
# end class DetentionDetail


class Dimensions(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Length=None, Width=None, Height=None, Units=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Length = Length
        self.Length_nsprefix_ = None
        self.Width = Width
        self.Width_nsprefix_ = None
        self.Height = Height
        self.Height_nsprefix_ = None
        self.Units = Units
        self.validate_LinearUnits(self.Units)
        self.Units_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Dimensions)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Dimensions.subclass:
            return Dimensions.subclass(*args_, **kwargs_)
        else:
            return Dimensions(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Length(self):
        return self.Length
    def set_Length(self, Length):
        self.Length = Length
    def get_Width(self):
        return self.Width
    def set_Width(self, Width):
        self.Width = Width
    def get_Height(self):
        return self.Height
    def set_Height(self, Height):
        self.Height = Height
    def get_Units(self):
        return self.Units
    def set_Units(self, Units):
        self.Units = Units
    def validate_LinearUnits(self, value):
        result = True
        # Validate type LinearUnits, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CM', 'IN']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on LinearUnits' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Length is not None or
            self.Width is not None or
            self.Height is not None or
            self.Units is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Dimensions', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Dimensions')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Dimensions':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Dimensions')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Dimensions', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Dimensions'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Dimensions', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Length is not None:
            namespaceprefix_ = self.Length_nsprefix_ + ':' if (UseCapturedNS_ and self.Length_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLength>%s</%sLength>%s' % (namespaceprefix_ , self.gds_format_integer(self.Length, input_name='Length'), namespaceprefix_ , eol_))
        if self.Width is not None:
            namespaceprefix_ = self.Width_nsprefix_ + ':' if (UseCapturedNS_ and self.Width_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWidth>%s</%sWidth>%s' % (namespaceprefix_ , self.gds_format_integer(self.Width, input_name='Width'), namespaceprefix_ , eol_))
        if self.Height is not None:
            namespaceprefix_ = self.Height_nsprefix_ + ':' if (UseCapturedNS_ and self.Height_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHeight>%s</%sHeight>%s' % (namespaceprefix_ , self.gds_format_integer(self.Height, input_name='Height'), namespaceprefix_ , eol_))
        if self.Units is not None:
            namespaceprefix_ = self.Units_nsprefix_ + ':' if (UseCapturedNS_ and self.Units_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnits>%s</%sUnits>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Units), input_name='Units')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Length' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'Length')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'Length')
            self.Length = ival_
            self.Length_nsprefix_ = child_.prefix
        elif nodeName_ == 'Width' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'Width')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'Width')
            self.Width = ival_
            self.Width_nsprefix_ = child_.prefix
        elif nodeName_ == 'Height' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'Height')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'Height')
            self.Height = ival_
            self.Height_nsprefix_ = child_.prefix
        elif nodeName_ == 'Units':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Units')
            value_ = self.gds_validate_string(value_, node, 'Units')
            self.Units = value_
            self.Units_nsprefix_ = child_.prefix
            # validate type LinearUnits
            self.validate_LinearUnits(self.Units)
# end class Dimensions


class DirectDebitDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ChargeClassifications=None, LegalEntity=None, BankAccount=None, BankDetail=None, Mandate=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if ChargeClassifications is None:
            self.ChargeClassifications = []
        else:
            self.ChargeClassifications = ChargeClassifications
        self.ChargeClassifications_nsprefix_ = "ns"
        self.LegalEntity = LegalEntity
        self.LegalEntity_nsprefix_ = None
        self.BankAccount = BankAccount
        self.BankAccount_nsprefix_ = "ns"
        self.BankDetail = BankDetail
        self.BankDetail_nsprefix_ = "ns"
        self.Mandate = Mandate
        self.Mandate_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DirectDebitDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DirectDebitDetail.subclass:
            return DirectDebitDetail.subclass(*args_, **kwargs_)
        else:
            return DirectDebitDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ChargeClassifications(self):
        return self.ChargeClassifications
    def set_ChargeClassifications(self, ChargeClassifications):
        self.ChargeClassifications = ChargeClassifications
    def add_ChargeClassifications(self, value):
        self.ChargeClassifications.append(value)
    def insert_ChargeClassifications_at(self, index, value):
        self.ChargeClassifications.insert(index, value)
    def replace_ChargeClassifications_at(self, index, value):
        self.ChargeClassifications[index] = value
    def get_LegalEntity(self):
        return self.LegalEntity
    def set_LegalEntity(self, LegalEntity):
        self.LegalEntity = LegalEntity
    def get_BankAccount(self):
        return self.BankAccount
    def set_BankAccount(self, BankAccount):
        self.BankAccount = BankAccount
    def get_BankDetail(self):
        return self.BankDetail
    def set_BankDetail(self, BankDetail):
        self.BankDetail = BankDetail
    def get_Mandate(self):
        return self.Mandate
    def set_Mandate(self, Mandate):
        self.Mandate = Mandate
    def validate_ChargeClassificationType(self, value):
        result = True
        # Validate type ChargeClassificationType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['DUTIES_AND_TAXES', 'TRANSPORTATION']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ChargeClassificationType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.ChargeClassifications or
            self.LegalEntity is not None or
            self.BankAccount is not None or
            self.BankDetail is not None or
            self.Mandate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DirectDebitDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DirectDebitDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DirectDebitDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DirectDebitDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DirectDebitDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DirectDebitDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DirectDebitDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ChargeClassifications_ in self.ChargeClassifications:
            namespaceprefix_ = self.ChargeClassifications_nsprefix_ + ':' if (UseCapturedNS_ and self.ChargeClassifications_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sChargeClassifications>%s</%sChargeClassifications>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(ChargeClassifications_), input_name='ChargeClassifications')), namespaceprefix_ , eol_))
        if self.LegalEntity is not None:
            namespaceprefix_ = self.LegalEntity_nsprefix_ + ':' if (UseCapturedNS_ and self.LegalEntity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLegalEntity>%s</%sLegalEntity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LegalEntity), input_name='LegalEntity')), namespaceprefix_ , eol_))
        if self.BankAccount is not None:
            namespaceprefix_ = self.BankAccount_nsprefix_ + ':' if (UseCapturedNS_ and self.BankAccount_nsprefix_) else ''
            self.BankAccount.export(outfile, level, namespaceprefix_, namespacedef_='', name_='BankAccount', pretty_print=pretty_print)
        if self.BankDetail is not None:
            namespaceprefix_ = self.BankDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.BankDetail_nsprefix_) else ''
            self.BankDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='BankDetail', pretty_print=pretty_print)
        if self.Mandate is not None:
            namespaceprefix_ = self.Mandate_nsprefix_ + ':' if (UseCapturedNS_ and self.Mandate_nsprefix_) else ''
            self.Mandate.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Mandate', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ChargeClassifications':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ChargeClassifications')
            value_ = self.gds_validate_string(value_, node, 'ChargeClassifications')
            self.ChargeClassifications.append(value_)
            self.ChargeClassifications_nsprefix_ = child_.prefix
            # validate type ChargeClassificationType
            self.validate_ChargeClassificationType(self.ChargeClassifications[-1])
        elif nodeName_ == 'LegalEntity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LegalEntity')
            value_ = self.gds_validate_string(value_, node, 'LegalEntity')
            self.LegalEntity = value_
            self.LegalEntity_nsprefix_ = child_.prefix
        elif nodeName_ == 'BankAccount':
            obj_ = BankAccountDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.BankAccount = obj_
            obj_.original_tagname_ = 'BankAccount'
        elif nodeName_ == 'BankDetail':
            obj_ = BankDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.BankDetail = obj_
            obj_.original_tagname_ = 'BankDetail'
        elif nodeName_ == 'Mandate':
            obj_ = DirectDebitMandateDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Mandate = obj_
            obj_.original_tagname_ = 'Mandate'
# end class DirectDebitDetail


class DirectDebitMandateDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Id=None, AuthenticationDate=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Id = Id
        self.Id_nsprefix_ = None
        if isinstance(AuthenticationDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(AuthenticationDate, '%Y-%m-%d').date()
        else:
            initvalue_ = AuthenticationDate
        self.AuthenticationDate = initvalue_
        self.AuthenticationDate_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DirectDebitMandateDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DirectDebitMandateDetail.subclass:
            return DirectDebitMandateDetail.subclass(*args_, **kwargs_)
        else:
            return DirectDebitMandateDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Id(self):
        return self.Id
    def set_Id(self, Id):
        self.Id = Id
    def get_AuthenticationDate(self):
        return self.AuthenticationDate
    def set_AuthenticationDate(self, AuthenticationDate):
        self.AuthenticationDate = AuthenticationDate
    def hasContent_(self):
        if (
            self.Id is not None or
            self.AuthenticationDate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DirectDebitMandateDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DirectDebitMandateDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DirectDebitMandateDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DirectDebitMandateDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DirectDebitMandateDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DirectDebitMandateDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DirectDebitMandateDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Id is not None:
            namespaceprefix_ = self.Id_nsprefix_ + ':' if (UseCapturedNS_ and self.Id_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sId>%s</%sId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Id), input_name='Id')), namespaceprefix_ , eol_))
        if self.AuthenticationDate is not None:
            namespaceprefix_ = self.AuthenticationDate_nsprefix_ + ':' if (UseCapturedNS_ and self.AuthenticationDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAuthenticationDate>%s</%sAuthenticationDate>%s' % (namespaceprefix_ , self.gds_format_date(self.AuthenticationDate, input_name='AuthenticationDate'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Id':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Id')
            value_ = self.gds_validate_string(value_, node, 'Id')
            self.Id = value_
            self.Id_nsprefix_ = child_.prefix
        elif nodeName_ == 'AuthenticationDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.AuthenticationDate = dval_
            self.AuthenticationDate_nsprefix_ = child_.prefix
# end class DirectDebitMandateDetail


class Distance(GeneratedsSuper):
    """Driving or other transportation distances, distinct from dimension
    measurements."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Value=None, Units=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Value = Value
        self.Value_nsprefix_ = None
        self.Units = Units
        self.validate_DistanceUnits(self.Units)
        self.Units_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Distance)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Distance.subclass:
            return Distance.subclass(*args_, **kwargs_)
        else:
            return Distance(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Value(self):
        return self.Value
    def set_Value(self, Value):
        self.Value = Value
    def get_Units(self):
        return self.Units
    def set_Units(self, Units):
        self.Units = Units
    def validate_DistanceUnits(self, value):
        result = True
        # Validate type DistanceUnits, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['KM', 'MI']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on DistanceUnits' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Value is not None or
            self.Units is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Distance', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Distance')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Distance':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Distance')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Distance', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Distance'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Distance', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Value is not None:
            namespaceprefix_ = self.Value_nsprefix_ + ':' if (UseCapturedNS_ and self.Value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValue>%s</%sValue>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Value, input_name='Value'), namespaceprefix_ , eol_))
        if self.Units is not None:
            namespaceprefix_ = self.Units_nsprefix_ + ':' if (UseCapturedNS_ and self.Units_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnits>%s</%sUnits>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Units), input_name='Units')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Value' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Value')
            fval_ = self.gds_validate_decimal(fval_, node, 'Value')
            self.Value = fval_
            self.Value_nsprefix_ = child_.prefix
        elif nodeName_ == 'Units':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Units')
            value_ = self.gds_validate_string(value_, node, 'Units')
            self.Units = value_
            self.Units_nsprefix_ = child_.prefix
            # validate type DistanceUnits
            self.validate_DistanceUnits(self.Units)
# end class Distance


class DocTabContent(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, DocTabContentType=None, Zone001=None, Barcoded=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.DocTabContentType = DocTabContentType
        self.validate_DocTabContentType(self.DocTabContentType)
        self.DocTabContentType_nsprefix_ = "ns"
        self.Zone001 = Zone001
        self.Zone001_nsprefix_ = "ns"
        self.Barcoded = Barcoded
        self.Barcoded_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DocTabContent)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DocTabContent.subclass:
            return DocTabContent.subclass(*args_, **kwargs_)
        else:
            return DocTabContent(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DocTabContentType(self):
        return self.DocTabContentType
    def set_DocTabContentType(self, DocTabContentType):
        self.DocTabContentType = DocTabContentType
    def get_Zone001(self):
        return self.Zone001
    def set_Zone001(self, Zone001):
        self.Zone001 = Zone001
    def get_Barcoded(self):
        return self.Barcoded
    def set_Barcoded(self, Barcoded):
        self.Barcoded = Barcoded
    def validate_DocTabContentType(self, value):
        result = True
        # Validate type DocTabContentType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BARCODED', 'CUSTOM', 'MINIMUM', 'STANDARD', 'ZONE001']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on DocTabContentType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.DocTabContentType is not None or
            self.Zone001 is not None or
            self.Barcoded is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DocTabContent', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DocTabContent')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DocTabContent':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DocTabContent')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DocTabContent', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DocTabContent'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DocTabContent', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DocTabContentType is not None:
            namespaceprefix_ = self.DocTabContentType_nsprefix_ + ':' if (UseCapturedNS_ and self.DocTabContentType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocTabContentType>%s</%sDocTabContentType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DocTabContentType), input_name='DocTabContentType')), namespaceprefix_ , eol_))
        if self.Zone001 is not None:
            namespaceprefix_ = self.Zone001_nsprefix_ + ':' if (UseCapturedNS_ and self.Zone001_nsprefix_) else ''
            self.Zone001.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Zone001', pretty_print=pretty_print)
        if self.Barcoded is not None:
            namespaceprefix_ = self.Barcoded_nsprefix_ + ':' if (UseCapturedNS_ and self.Barcoded_nsprefix_) else ''
            self.Barcoded.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Barcoded', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DocTabContentType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DocTabContentType')
            value_ = self.gds_validate_string(value_, node, 'DocTabContentType')
            self.DocTabContentType = value_
            self.DocTabContentType_nsprefix_ = child_.prefix
            # validate type DocTabContentType
            self.validate_DocTabContentType(self.DocTabContentType)
        elif nodeName_ == 'Zone001':
            obj_ = DocTabContentZone001.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Zone001 = obj_
            obj_.original_tagname_ = 'Zone001'
        elif nodeName_ == 'Barcoded':
            obj_ = DocTabContentBarcoded.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Barcoded = obj_
            obj_.original_tagname_ = 'Barcoded'
# end class DocTabContent


class DocTabContentBarcoded(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Symbology=None, Specification=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Symbology = Symbology
        self.validate_BarcodeSymbologyType(self.Symbology)
        self.Symbology_nsprefix_ = "ns"
        self.Specification = Specification
        self.Specification_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DocTabContentBarcoded)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DocTabContentBarcoded.subclass:
            return DocTabContentBarcoded.subclass(*args_, **kwargs_)
        else:
            return DocTabContentBarcoded(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Symbology(self):
        return self.Symbology
    def set_Symbology(self, Symbology):
        self.Symbology = Symbology
    def get_Specification(self):
        return self.Specification
    def set_Specification(self, Specification):
        self.Specification = Specification
    def validate_BarcodeSymbologyType(self, value):
        result = True
        # Validate type BarcodeSymbologyType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CODABAR', 'CODE128', 'CODE128B', 'CODE128C', 'CODE128_WIDEBAR', 'CODE39', 'CODE93', 'I2OF5', 'MANUAL', 'PDF417', 'POSTNET', 'QR_CODE', 'UCC128']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on BarcodeSymbologyType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Symbology is not None or
            self.Specification is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DocTabContentBarcoded', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DocTabContentBarcoded')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DocTabContentBarcoded':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DocTabContentBarcoded')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DocTabContentBarcoded', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DocTabContentBarcoded'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DocTabContentBarcoded', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Symbology is not None:
            namespaceprefix_ = self.Symbology_nsprefix_ + ':' if (UseCapturedNS_ and self.Symbology_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSymbology>%s</%sSymbology>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Symbology), input_name='Symbology')), namespaceprefix_ , eol_))
        if self.Specification is not None:
            namespaceprefix_ = self.Specification_nsprefix_ + ':' if (UseCapturedNS_ and self.Specification_nsprefix_) else ''
            self.Specification.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Specification', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Symbology':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Symbology')
            value_ = self.gds_validate_string(value_, node, 'Symbology')
            self.Symbology = value_
            self.Symbology_nsprefix_ = child_.prefix
            # validate type BarcodeSymbologyType
            self.validate_BarcodeSymbologyType(self.Symbology)
        elif nodeName_ == 'Specification':
            obj_ = DocTabZoneSpecification.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Specification = obj_
            obj_.original_tagname_ = 'Specification'
# end class DocTabContentBarcoded


class DocTabContentZone001(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, DocTabZoneSpecifications=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if DocTabZoneSpecifications is None:
            self.DocTabZoneSpecifications = []
        else:
            self.DocTabZoneSpecifications = DocTabZoneSpecifications
        self.DocTabZoneSpecifications_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DocTabContentZone001)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DocTabContentZone001.subclass:
            return DocTabContentZone001.subclass(*args_, **kwargs_)
        else:
            return DocTabContentZone001(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DocTabZoneSpecifications(self):
        return self.DocTabZoneSpecifications
    def set_DocTabZoneSpecifications(self, DocTabZoneSpecifications):
        self.DocTabZoneSpecifications = DocTabZoneSpecifications
    def add_DocTabZoneSpecifications(self, value):
        self.DocTabZoneSpecifications.append(value)
    def insert_DocTabZoneSpecifications_at(self, index, value):
        self.DocTabZoneSpecifications.insert(index, value)
    def replace_DocTabZoneSpecifications_at(self, index, value):
        self.DocTabZoneSpecifications[index] = value
    def hasContent_(self):
        if (
            self.DocTabZoneSpecifications
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DocTabContentZone001', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DocTabContentZone001')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DocTabContentZone001':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DocTabContentZone001')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DocTabContentZone001', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DocTabContentZone001'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DocTabContentZone001', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DocTabZoneSpecifications_ in self.DocTabZoneSpecifications:
            namespaceprefix_ = self.DocTabZoneSpecifications_nsprefix_ + ':' if (UseCapturedNS_ and self.DocTabZoneSpecifications_nsprefix_) else ''
            DocTabZoneSpecifications_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DocTabZoneSpecifications', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DocTabZoneSpecifications':
            obj_ = DocTabZoneSpecification.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DocTabZoneSpecifications.append(obj_)
            obj_.original_tagname_ = 'DocTabZoneSpecifications'
# end class DocTabContentZone001


class DocTabZoneSpecification(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ZoneNumber=None, Header=None, DataField=None, LiteralValue=None, Justification=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ZoneNumber = ZoneNumber
        self.ZoneNumber_nsprefix_ = None
        self.Header = Header
        self.Header_nsprefix_ = None
        self.DataField = DataField
        self.DataField_nsprefix_ = None
        self.LiteralValue = LiteralValue
        self.LiteralValue_nsprefix_ = None
        self.Justification = Justification
        self.validate_DocTabZoneJustificationType(self.Justification)
        self.Justification_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DocTabZoneSpecification)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DocTabZoneSpecification.subclass:
            return DocTabZoneSpecification.subclass(*args_, **kwargs_)
        else:
            return DocTabZoneSpecification(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ZoneNumber(self):
        return self.ZoneNumber
    def set_ZoneNumber(self, ZoneNumber):
        self.ZoneNumber = ZoneNumber
    def get_Header(self):
        return self.Header
    def set_Header(self, Header):
        self.Header = Header
    def get_DataField(self):
        return self.DataField
    def set_DataField(self, DataField):
        self.DataField = DataField
    def get_LiteralValue(self):
        return self.LiteralValue
    def set_LiteralValue(self, LiteralValue):
        self.LiteralValue = LiteralValue
    def get_Justification(self):
        return self.Justification
    def set_Justification(self, Justification):
        self.Justification = Justification
    def validate_DocTabZoneJustificationType(self, value):
        result = True
        # Validate type DocTabZoneJustificationType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['LEFT', 'RIGHT']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on DocTabZoneJustificationType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.ZoneNumber is not None or
            self.Header is not None or
            self.DataField is not None or
            self.LiteralValue is not None or
            self.Justification is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DocTabZoneSpecification', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DocTabZoneSpecification')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DocTabZoneSpecification':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DocTabZoneSpecification')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DocTabZoneSpecification', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DocTabZoneSpecification'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DocTabZoneSpecification', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ZoneNumber is not None:
            namespaceprefix_ = self.ZoneNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.ZoneNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sZoneNumber>%s</%sZoneNumber>%s' % (namespaceprefix_ , self.gds_format_integer(self.ZoneNumber, input_name='ZoneNumber'), namespaceprefix_ , eol_))
        if self.Header is not None:
            namespaceprefix_ = self.Header_nsprefix_ + ':' if (UseCapturedNS_ and self.Header_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHeader>%s</%sHeader>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Header), input_name='Header')), namespaceprefix_ , eol_))
        if self.DataField is not None:
            namespaceprefix_ = self.DataField_nsprefix_ + ':' if (UseCapturedNS_ and self.DataField_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDataField>%s</%sDataField>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DataField), input_name='DataField')), namespaceprefix_ , eol_))
        if self.LiteralValue is not None:
            namespaceprefix_ = self.LiteralValue_nsprefix_ + ':' if (UseCapturedNS_ and self.LiteralValue_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLiteralValue>%s</%sLiteralValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LiteralValue), input_name='LiteralValue')), namespaceprefix_ , eol_))
        if self.Justification is not None:
            namespaceprefix_ = self.Justification_nsprefix_ + ':' if (UseCapturedNS_ and self.Justification_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sJustification>%s</%sJustification>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Justification), input_name='Justification')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ZoneNumber' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'ZoneNumber')
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'ZoneNumber')
            self.ZoneNumber = ival_
            self.ZoneNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'Header':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Header')
            value_ = self.gds_validate_string(value_, node, 'Header')
            self.Header = value_
            self.Header_nsprefix_ = child_.prefix
        elif nodeName_ == 'DataField':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DataField')
            value_ = self.gds_validate_string(value_, node, 'DataField')
            self.DataField = value_
            self.DataField_nsprefix_ = child_.prefix
        elif nodeName_ == 'LiteralValue':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LiteralValue')
            value_ = self.gds_validate_string(value_, node, 'LiteralValue')
            self.LiteralValue = value_
            self.LiteralValue_nsprefix_ = child_.prefix
        elif nodeName_ == 'Justification':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Justification')
            value_ = self.gds_validate_string(value_, node, 'Justification')
            self.Justification = value_
            self.Justification_nsprefix_ = child_.prefix
            # validate type DocTabZoneJustificationType
            self.validate_DocTabZoneJustificationType(self.Justification)
# end class DocTabZoneSpecification


class DocumentFormatOptionsRequested(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Options=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Options is None:
            self.Options = []
        else:
            self.Options = Options
        self.Options_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DocumentFormatOptionsRequested)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DocumentFormatOptionsRequested.subclass:
            return DocumentFormatOptionsRequested.subclass(*args_, **kwargs_)
        else:
            return DocumentFormatOptionsRequested(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Options(self):
        return self.Options
    def set_Options(self, Options):
        self.Options = Options
    def add_Options(self, value):
        self.Options.append(value)
    def insert_Options_at(self, index, value):
        self.Options.insert(index, value)
    def replace_Options_at(self, index, value):
        self.Options[index] = value
    def validate_DocumentFormatOptionType(self, value):
        result = True
        # Validate type DocumentFormatOptionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['SUPPRESS_ADDITIONAL_LANGUAGES']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on DocumentFormatOptionType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Options
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DocumentFormatOptionsRequested', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DocumentFormatOptionsRequested')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DocumentFormatOptionsRequested':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DocumentFormatOptionsRequested')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DocumentFormatOptionsRequested', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DocumentFormatOptionsRequested'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DocumentFormatOptionsRequested', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Options_ in self.Options:
            namespaceprefix_ = self.Options_nsprefix_ + ':' if (UseCapturedNS_ and self.Options_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOptions>%s</%sOptions>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Options_), input_name='Options')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Options':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Options')
            value_ = self.gds_validate_string(value_, node, 'Options')
            self.Options.append(value_)
            self.Options_nsprefix_ = child_.prefix
            # validate type DocumentFormatOptionType
            self.validate_DocumentFormatOptionType(self.Options[-1])
# end class DocumentFormatOptionsRequested


class EMailAddressDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Address=None, ContactPermission=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Address = Address
        self.Address_nsprefix_ = None
        self.ContactPermission = ContactPermission
        self.validate_PermissionType(self.ContactPermission)
        self.ContactPermission_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EMailAddressDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EMailAddressDetail.subclass:
            return EMailAddressDetail.subclass(*args_, **kwargs_)
        else:
            return EMailAddressDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Address(self):
        return self.Address
    def set_Address(self, Address):
        self.Address = Address
    def get_ContactPermission(self):
        return self.ContactPermission
    def set_ContactPermission(self, ContactPermission):
        self.ContactPermission = ContactPermission
    def validate_PermissionType(self, value):
        result = True
        # Validate type PermissionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ALLOWED', 'DISALLOWED']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on PermissionType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Address is not None or
            self.ContactPermission is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EMailAddressDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EMailAddressDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EMailAddressDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EMailAddressDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='EMailAddressDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EMailAddressDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EMailAddressDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Address is not None:
            namespaceprefix_ = self.Address_nsprefix_ + ':' if (UseCapturedNS_ and self.Address_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddress>%s</%sAddress>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Address), input_name='Address')), namespaceprefix_ , eol_))
        if self.ContactPermission is not None:
            namespaceprefix_ = self.ContactPermission_nsprefix_ + ':' if (UseCapturedNS_ and self.ContactPermission_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContactPermission>%s</%sContactPermission>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ContactPermission), input_name='ContactPermission')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Address':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Address')
            value_ = self.gds_validate_string(value_, node, 'Address')
            self.Address = value_
            self.Address_nsprefix_ = child_.prefix
        elif nodeName_ == 'ContactPermission':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ContactPermission')
            value_ = self.gds_validate_string(value_, node, 'ContactPermission')
            self.ContactPermission = value_
            self.ContactPermission_nsprefix_ = child_.prefix
            # validate type PermissionType
            self.validate_PermissionType(self.ContactPermission)
# end class EMailAddressDetail


class EMailDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, EmailAddress=None, Name=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.EmailAddress = EmailAddress
        self.EmailAddress_nsprefix_ = None
        self.Name = Name
        self.Name_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EMailDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EMailDetail.subclass:
            return EMailDetail.subclass(*args_, **kwargs_)
        else:
            return EMailDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_EmailAddress(self):
        return self.EmailAddress
    def set_EmailAddress(self, EmailAddress):
        self.EmailAddress = EmailAddress
    def get_Name(self):
        return self.Name
    def set_Name(self, Name):
        self.Name = Name
    def hasContent_(self):
        if (
            self.EmailAddress is not None or
            self.Name is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EMailDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EMailDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EMailDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EMailDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='EMailDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EMailDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EMailDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.EmailAddress is not None:
            namespaceprefix_ = self.EmailAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.EmailAddress_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEmailAddress>%s</%sEmailAddress>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EmailAddress), input_name='EmailAddress')), namespaceprefix_ , eol_))
        if self.Name is not None:
            namespaceprefix_ = self.Name_nsprefix_ + ':' if (UseCapturedNS_ and self.Name_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sName>%s</%sName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'EmailAddress':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EmailAddress')
            value_ = self.gds_validate_string(value_, node, 'EmailAddress')
            self.EmailAddress = value_
            self.EmailAddress_nsprefix_ = child_.prefix
        elif nodeName_ == 'Name':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Name')
            value_ = self.gds_validate_string(value_, node, 'Name')
            self.Name = value_
            self.Name_nsprefix_ = child_.prefix
# end class EMailDetail


class EMailLabelDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Message=None, Recipients=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Message = Message
        self.Message_nsprefix_ = None
        if Recipients is None:
            self.Recipients = []
        else:
            self.Recipients = Recipients
        self.Recipients_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EMailLabelDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EMailLabelDetail.subclass:
            return EMailLabelDetail.subclass(*args_, **kwargs_)
        else:
            return EMailLabelDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Message(self):
        return self.Message
    def set_Message(self, Message):
        self.Message = Message
    def get_Recipients(self):
        return self.Recipients
    def set_Recipients(self, Recipients):
        self.Recipients = Recipients
    def add_Recipients(self, value):
        self.Recipients.append(value)
    def insert_Recipients_at(self, index, value):
        self.Recipients.insert(index, value)
    def replace_Recipients_at(self, index, value):
        self.Recipients[index] = value
    def hasContent_(self):
        if (
            self.Message is not None or
            self.Recipients
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EMailLabelDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EMailLabelDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EMailLabelDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EMailLabelDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='EMailLabelDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EMailLabelDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EMailLabelDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Message is not None:
            namespaceprefix_ = self.Message_nsprefix_ + ':' if (UseCapturedNS_ and self.Message_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMessage>%s</%sMessage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Message), input_name='Message')), namespaceprefix_ , eol_))
        for Recipients_ in self.Recipients:
            namespaceprefix_ = self.Recipients_nsprefix_ + ':' if (UseCapturedNS_ and self.Recipients_nsprefix_) else ''
            Recipients_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Recipients', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Message':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Message')
            value_ = self.gds_validate_string(value_, node, 'Message')
            self.Message = value_
            self.Message_nsprefix_ = child_.prefix
        elif nodeName_ == 'Recipients':
            obj_ = EMailRecipient.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Recipients.append(obj_)
            obj_.original_tagname_ = 'Recipients'
# end class EMailLabelDetail


class EMailRecipient(GeneratedsSuper):
    """Information describing the address of of the email recipient, role of
    the email recipient and languages that are requested to be
    supported."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, EmailAddress=None, Role=None, OptionsRequested=None, Localization=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.EmailAddress = EmailAddress
        self.EmailAddress_nsprefix_ = None
        self.Role = Role
        self.validate_AccessorRoleType(self.Role)
        self.Role_nsprefix_ = "ns"
        self.OptionsRequested = OptionsRequested
        self.OptionsRequested_nsprefix_ = "ns"
        self.Localization = Localization
        self.Localization_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EMailRecipient)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EMailRecipient.subclass:
            return EMailRecipient.subclass(*args_, **kwargs_)
        else:
            return EMailRecipient(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_EmailAddress(self):
        return self.EmailAddress
    def set_EmailAddress(self, EmailAddress):
        self.EmailAddress = EmailAddress
    def get_Role(self):
        return self.Role
    def set_Role(self, Role):
        self.Role = Role
    def get_OptionsRequested(self):
        return self.OptionsRequested
    def set_OptionsRequested(self, OptionsRequested):
        self.OptionsRequested = OptionsRequested
    def get_Localization(self):
        return self.Localization
    def set_Localization(self, Localization):
        self.Localization = Localization
    def validate_AccessorRoleType(self, value):
        result = True
        # Validate type AccessorRoleType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['SHIPMENT_COMPLETOR', 'SHIPMENT_INITIATOR']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on AccessorRoleType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.EmailAddress is not None or
            self.Role is not None or
            self.OptionsRequested is not None or
            self.Localization is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EMailRecipient', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EMailRecipient')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EMailRecipient':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EMailRecipient')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='EMailRecipient', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EMailRecipient'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EMailRecipient', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.EmailAddress is not None:
            namespaceprefix_ = self.EmailAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.EmailAddress_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEmailAddress>%s</%sEmailAddress>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EmailAddress), input_name='EmailAddress')), namespaceprefix_ , eol_))
        if self.Role is not None:
            namespaceprefix_ = self.Role_nsprefix_ + ':' if (UseCapturedNS_ and self.Role_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRole>%s</%sRole>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Role), input_name='Role')), namespaceprefix_ , eol_))
        if self.OptionsRequested is not None:
            namespaceprefix_ = self.OptionsRequested_nsprefix_ + ':' if (UseCapturedNS_ and self.OptionsRequested_nsprefix_) else ''
            self.OptionsRequested.export(outfile, level, namespaceprefix_, namespacedef_='', name_='OptionsRequested', pretty_print=pretty_print)
        if self.Localization is not None:
            namespaceprefix_ = self.Localization_nsprefix_ + ':' if (UseCapturedNS_ and self.Localization_nsprefix_) else ''
            self.Localization.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Localization', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'EmailAddress':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EmailAddress')
            value_ = self.gds_validate_string(value_, node, 'EmailAddress')
            self.EmailAddress = value_
            self.EmailAddress_nsprefix_ = child_.prefix
        elif nodeName_ == 'Role':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Role')
            value_ = self.gds_validate_string(value_, node, 'Role')
            self.Role = value_
            self.Role_nsprefix_ = child_.prefix
            # validate type AccessorRoleType
            self.validate_AccessorRoleType(self.Role)
        elif nodeName_ == 'OptionsRequested':
            obj_ = EmailOptionsRequested.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.OptionsRequested = obj_
            obj_.original_tagname_ = 'OptionsRequested'
        elif nodeName_ == 'Localization':
            obj_ = Localization.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Localization = obj_
            obj_.original_tagname_ = 'Localization'
# end class EMailRecipient


class EdtExciseCondition(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Category=None, Value=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Category = Category
        self.Category_nsprefix_ = None
        self.Value = Value
        self.Value_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EdtExciseCondition)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EdtExciseCondition.subclass:
            return EdtExciseCondition.subclass(*args_, **kwargs_)
        else:
            return EdtExciseCondition(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Category(self):
        return self.Category
    def set_Category(self, Category):
        self.Category = Category
    def get_Value(self):
        return self.Value
    def set_Value(self, Value):
        self.Value = Value
    def hasContent_(self):
        if (
            self.Category is not None or
            self.Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EdtExciseCondition', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EdtExciseCondition')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EdtExciseCondition':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EdtExciseCondition')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='EdtExciseCondition', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EdtExciseCondition'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EdtExciseCondition', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Category is not None:
            namespaceprefix_ = self.Category_nsprefix_ + ':' if (UseCapturedNS_ and self.Category_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCategory>%s</%sCategory>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Category), input_name='Category')), namespaceprefix_ , eol_))
        if self.Value is not None:
            namespaceprefix_ = self.Value_nsprefix_ + ':' if (UseCapturedNS_ and self.Value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValue>%s</%sValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Value), input_name='Value')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Category':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Category')
            value_ = self.gds_validate_string(value_, node, 'Category')
            self.Category = value_
            self.Category_nsprefix_ = child_.prefix
        elif nodeName_ == 'Value':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Value')
            value_ = self.gds_validate_string(value_, node, 'Value')
            self.Value = value_
            self.Value_nsprefix_ = child_.prefix
# end class EdtExciseCondition


class EmailOptionsRequested(GeneratedsSuper):
    """Specifies how to apply the localization detail to the current
    context."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Options=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Options is None:
            self.Options = []
        else:
            self.Options = Options
        self.Options_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EmailOptionsRequested)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EmailOptionsRequested.subclass:
            return EmailOptionsRequested.subclass(*args_, **kwargs_)
        else:
            return EmailOptionsRequested(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Options(self):
        return self.Options
    def set_Options(self, Options):
        self.Options = Options
    def add_Options(self, value):
        self.Options.append(value)
    def insert_Options_at(self, index, value):
        self.Options.insert(index, value)
    def replace_Options_at(self, index, value):
        self.Options[index] = value
    def validate_EmailOptionType(self, value):
        result = True
        # Validate type EmailOptionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['SUPPRESS_ACCESS_EMAILS', 'SUPPRESS_ADDITIONAL_LANGUAGES']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on EmailOptionType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Options
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EmailOptionsRequested', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EmailOptionsRequested')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EmailOptionsRequested':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EmailOptionsRequested')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='EmailOptionsRequested', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EmailOptionsRequested'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EmailOptionsRequested', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Options_ in self.Options:
            namespaceprefix_ = self.Options_nsprefix_ + ':' if (UseCapturedNS_ and self.Options_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOptions>%s</%sOptions>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Options_), input_name='Options')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Options':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Options')
            value_ = self.gds_validate_string(value_, node, 'Options')
            self.Options.append(value_)
            self.Options_nsprefix_ = child_.prefix
            # validate type EmailOptionType
            self.validate_EmailOptionType(self.Options[-1])
# end class EmailOptionsRequested


class EnterpriseCustomer(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, DetailLevel=None, ShippingEnablementDetail=None, EnterpriseProfile=None, ExpressProfile=None, FreightProfile=None, RecipientProfile=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.DetailLevel = DetailLevel
        self.validate_CustomerDetailType(self.DetailLevel)
        self.DetailLevel_nsprefix_ = "ns"
        self.ShippingEnablementDetail = ShippingEnablementDetail
        self.ShippingEnablementDetail_nsprefix_ = "ns"
        self.EnterpriseProfile = EnterpriseProfile
        self.EnterpriseProfile_nsprefix_ = "ns"
        self.ExpressProfile = ExpressProfile
        self.ExpressProfile_nsprefix_ = "ns"
        self.FreightProfile = FreightProfile
        self.FreightProfile_nsprefix_ = "ns"
        self.RecipientProfile = RecipientProfile
        self.RecipientProfile_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EnterpriseCustomer)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EnterpriseCustomer.subclass:
            return EnterpriseCustomer.subclass(*args_, **kwargs_)
        else:
            return EnterpriseCustomer(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DetailLevel(self):
        return self.DetailLevel
    def set_DetailLevel(self, DetailLevel):
        self.DetailLevel = DetailLevel
    def get_ShippingEnablementDetail(self):
        return self.ShippingEnablementDetail
    def set_ShippingEnablementDetail(self, ShippingEnablementDetail):
        self.ShippingEnablementDetail = ShippingEnablementDetail
    def get_EnterpriseProfile(self):
        return self.EnterpriseProfile
    def set_EnterpriseProfile(self, EnterpriseProfile):
        self.EnterpriseProfile = EnterpriseProfile
    def get_ExpressProfile(self):
        return self.ExpressProfile
    def set_ExpressProfile(self, ExpressProfile):
        self.ExpressProfile = ExpressProfile
    def get_FreightProfile(self):
        return self.FreightProfile
    def set_FreightProfile(self, FreightProfile):
        self.FreightProfile = FreightProfile
    def get_RecipientProfile(self):
        return self.RecipientProfile
    def set_RecipientProfile(self, RecipientProfile):
        self.RecipientProfile = RecipientProfile
    def validate_CustomerDetailType(self, value):
        result = True
        # Validate type CustomerDetailType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FULL', 'INTERACTIVE', 'MINIMUM']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CustomerDetailType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.DetailLevel is not None or
            self.ShippingEnablementDetail is not None or
            self.EnterpriseProfile is not None or
            self.ExpressProfile is not None or
            self.FreightProfile is not None or
            self.RecipientProfile is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EnterpriseCustomer', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EnterpriseCustomer')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EnterpriseCustomer':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EnterpriseCustomer')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='EnterpriseCustomer', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EnterpriseCustomer'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EnterpriseCustomer', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DetailLevel is not None:
            namespaceprefix_ = self.DetailLevel_nsprefix_ + ':' if (UseCapturedNS_ and self.DetailLevel_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDetailLevel>%s</%sDetailLevel>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DetailLevel), input_name='DetailLevel')), namespaceprefix_ , eol_))
        if self.ShippingEnablementDetail is not None:
            namespaceprefix_ = self.ShippingEnablementDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.ShippingEnablementDetail_nsprefix_) else ''
            self.ShippingEnablementDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ShippingEnablementDetail', pretty_print=pretty_print)
        if self.EnterpriseProfile is not None:
            namespaceprefix_ = self.EnterpriseProfile_nsprefix_ + ':' if (UseCapturedNS_ and self.EnterpriseProfile_nsprefix_) else ''
            self.EnterpriseProfile.export(outfile, level, namespaceprefix_, namespacedef_='', name_='EnterpriseProfile', pretty_print=pretty_print)
        if self.ExpressProfile is not None:
            namespaceprefix_ = self.ExpressProfile_nsprefix_ + ':' if (UseCapturedNS_ and self.ExpressProfile_nsprefix_) else ''
            self.ExpressProfile.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ExpressProfile', pretty_print=pretty_print)
        if self.FreightProfile is not None:
            namespaceprefix_ = self.FreightProfile_nsprefix_ + ':' if (UseCapturedNS_ and self.FreightProfile_nsprefix_) else ''
            self.FreightProfile.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FreightProfile', pretty_print=pretty_print)
        if self.RecipientProfile is not None:
            namespaceprefix_ = self.RecipientProfile_nsprefix_ + ':' if (UseCapturedNS_ and self.RecipientProfile_nsprefix_) else ''
            self.RecipientProfile.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RecipientProfile', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DetailLevel':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DetailLevel')
            value_ = self.gds_validate_string(value_, node, 'DetailLevel')
            self.DetailLevel = value_
            self.DetailLevel_nsprefix_ = child_.prefix
            # validate type CustomerDetailType
            self.validate_CustomerDetailType(self.DetailLevel)
        elif nodeName_ == 'ShippingEnablementDetail':
            obj_ = CustomerShippingEnablementDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ShippingEnablementDetail = obj_
            obj_.original_tagname_ = 'ShippingEnablementDetail'
        elif nodeName_ == 'EnterpriseProfile':
            obj_ = EnterpriseProfile.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.EnterpriseProfile = obj_
            obj_.original_tagname_ = 'EnterpriseProfile'
        elif nodeName_ == 'ExpressProfile':
            obj_ = ExpressProfile.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ExpressProfile = obj_
            obj_.original_tagname_ = 'ExpressProfile'
        elif nodeName_ == 'FreightProfile':
            obj_ = FreightProfile.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FreightProfile = obj_
            obj_.original_tagname_ = 'FreightProfile'
        elif nodeName_ == 'RecipientProfile':
            obj_ = RecipientProfile.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RecipientProfile = obj_
            obj_.original_tagname_ = 'RecipientProfile'
# end class EnterpriseCustomer


class EnterprisePrivilegeDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Id=None, Permission=None, CarrierCode=None, EffectiveDateRange=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Id = Id
        self.Id_nsprefix_ = None
        self.Permission = Permission
        self.validate_EnterprisePermissionType(self.Permission)
        self.Permission_nsprefix_ = "ns"
        self.CarrierCode = CarrierCode
        self.validate_CarrierCodeType(self.CarrierCode)
        self.CarrierCode_nsprefix_ = "ns"
        self.EffectiveDateRange = EffectiveDateRange
        self.EffectiveDateRange_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EnterprisePrivilegeDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EnterprisePrivilegeDetail.subclass:
            return EnterprisePrivilegeDetail.subclass(*args_, **kwargs_)
        else:
            return EnterprisePrivilegeDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Id(self):
        return self.Id
    def set_Id(self, Id):
        self.Id = Id
    def get_Permission(self):
        return self.Permission
    def set_Permission(self, Permission):
        self.Permission = Permission
    def get_CarrierCode(self):
        return self.CarrierCode
    def set_CarrierCode(self, CarrierCode):
        self.CarrierCode = CarrierCode
    def get_EffectiveDateRange(self):
        return self.EffectiveDateRange
    def set_EffectiveDateRange(self, EffectiveDateRange):
        self.EffectiveDateRange = EffectiveDateRange
    def validate_EnterprisePermissionType(self, value):
        result = True
        # Validate type EnterprisePermissionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ALLOWED', 'ALLOWED_BY_EXCEPTION', 'DISALLOWED']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on EnterprisePermissionType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_CarrierCodeType(self, value):
        result = True
        # Validate type CarrierCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FDXC', 'FDXE', 'FDXG', 'FDXO', 'FXCC', 'FXFR', 'FXSP']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CarrierCodeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Id is not None or
            self.Permission is not None or
            self.CarrierCode is not None or
            self.EffectiveDateRange is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EnterprisePrivilegeDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EnterprisePrivilegeDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EnterprisePrivilegeDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EnterprisePrivilegeDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='EnterprisePrivilegeDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EnterprisePrivilegeDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EnterprisePrivilegeDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Id is not None:
            namespaceprefix_ = self.Id_nsprefix_ + ':' if (UseCapturedNS_ and self.Id_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sId>%s</%sId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Id), input_name='Id')), namespaceprefix_ , eol_))
        if self.Permission is not None:
            namespaceprefix_ = self.Permission_nsprefix_ + ':' if (UseCapturedNS_ and self.Permission_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPermission>%s</%sPermission>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Permission), input_name='Permission')), namespaceprefix_ , eol_))
        if self.CarrierCode is not None:
            namespaceprefix_ = self.CarrierCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CarrierCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCarrierCode>%s</%sCarrierCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CarrierCode), input_name='CarrierCode')), namespaceprefix_ , eol_))
        if self.EffectiveDateRange is not None:
            namespaceprefix_ = self.EffectiveDateRange_nsprefix_ + ':' if (UseCapturedNS_ and self.EffectiveDateRange_nsprefix_) else ''
            self.EffectiveDateRange.export(outfile, level, namespaceprefix_, namespacedef_='', name_='EffectiveDateRange', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Id':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Id')
            value_ = self.gds_validate_string(value_, node, 'Id')
            self.Id = value_
            self.Id_nsprefix_ = child_.prefix
        elif nodeName_ == 'Permission':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Permission')
            value_ = self.gds_validate_string(value_, node, 'Permission')
            self.Permission = value_
            self.Permission_nsprefix_ = child_.prefix
            # validate type EnterprisePermissionType
            self.validate_EnterprisePermissionType(self.Permission)
        elif nodeName_ == 'CarrierCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CarrierCode')
            value_ = self.gds_validate_string(value_, node, 'CarrierCode')
            self.CarrierCode = value_
            self.CarrierCode_nsprefix_ = child_.prefix
            # validate type CarrierCodeType
            self.validate_CarrierCodeType(self.CarrierCode)
        elif nodeName_ == 'EffectiveDateRange':
            obj_ = DateRange.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.EffectiveDateRange = obj_
            obj_.original_tagname_ = 'EffectiveDateRange'
# end class EnterprisePrivilegeDetail


class EnterpriseProfile(GeneratedsSuper):
    """Specifies the details for an Enterprise profile."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Contacts=None, AccountNumber=None, AccountStatus=None, AccountType=None, AccountGroups=None, EntityType=None, Tins=None, WelcomeKit=None, Attributes=None, GroupReferenceDetails=None, CreationDate=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Contacts is None:
            self.Contacts = []
        else:
            self.Contacts = Contacts
        self.Contacts_nsprefix_ = "ns"
        self.AccountNumber = AccountNumber
        self.AccountNumber_nsprefix_ = None
        self.AccountStatus = AccountStatus
        self.validate_CustomerAccountStatusType(self.AccountStatus)
        self.AccountStatus_nsprefix_ = "ns"
        self.AccountType = AccountType
        self.validate_EnterpriseAccountType(self.AccountType)
        self.AccountType_nsprefix_ = "ns"
        if AccountGroups is None:
            self.AccountGroups = []
        else:
            self.AccountGroups = AccountGroups
        self.AccountGroups_nsprefix_ = "ns"
        self.EntityType = EntityType
        self.validate_CustomerAccountEntityType(self.EntityType)
        self.EntityType_nsprefix_ = "ns"
        if Tins is None:
            self.Tins = []
        else:
            self.Tins = Tins
        self.Tins_nsprefix_ = "ns"
        self.WelcomeKit = WelcomeKit
        self.WelcomeKit_nsprefix_ = "ns"
        if Attributes is None:
            self.Attributes = []
        else:
            self.Attributes = Attributes
        self.Attributes_nsprefix_ = "ns"
        if GroupReferenceDetails is None:
            self.GroupReferenceDetails = []
        else:
            self.GroupReferenceDetails = GroupReferenceDetails
        self.GroupReferenceDetails_nsprefix_ = "ns"
        if isinstance(CreationDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(CreationDate, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = CreationDate
        self.CreationDate = initvalue_
        self.CreationDate_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EnterpriseProfile)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EnterpriseProfile.subclass:
            return EnterpriseProfile.subclass(*args_, **kwargs_)
        else:
            return EnterpriseProfile(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Contacts(self):
        return self.Contacts
    def set_Contacts(self, Contacts):
        self.Contacts = Contacts
    def add_Contacts(self, value):
        self.Contacts.append(value)
    def insert_Contacts_at(self, index, value):
        self.Contacts.insert(index, value)
    def replace_Contacts_at(self, index, value):
        self.Contacts[index] = value
    def get_AccountNumber(self):
        return self.AccountNumber
    def set_AccountNumber(self, AccountNumber):
        self.AccountNumber = AccountNumber
    def get_AccountStatus(self):
        return self.AccountStatus
    def set_AccountStatus(self, AccountStatus):
        self.AccountStatus = AccountStatus
    def get_AccountType(self):
        return self.AccountType
    def set_AccountType(self, AccountType):
        self.AccountType = AccountType
    def get_AccountGroups(self):
        return self.AccountGroups
    def set_AccountGroups(self, AccountGroups):
        self.AccountGroups = AccountGroups
    def add_AccountGroups(self, value):
        self.AccountGroups.append(value)
    def insert_AccountGroups_at(self, index, value):
        self.AccountGroups.insert(index, value)
    def replace_AccountGroups_at(self, index, value):
        self.AccountGroups[index] = value
    def get_EntityType(self):
        return self.EntityType
    def set_EntityType(self, EntityType):
        self.EntityType = EntityType
    def get_Tins(self):
        return self.Tins
    def set_Tins(self, Tins):
        self.Tins = Tins
    def add_Tins(self, value):
        self.Tins.append(value)
    def insert_Tins_at(self, index, value):
        self.Tins.insert(index, value)
    def replace_Tins_at(self, index, value):
        self.Tins[index] = value
    def get_WelcomeKit(self):
        return self.WelcomeKit
    def set_WelcomeKit(self, WelcomeKit):
        self.WelcomeKit = WelcomeKit
    def get_Attributes(self):
        return self.Attributes
    def set_Attributes(self, Attributes):
        self.Attributes = Attributes
    def add_Attributes(self, value):
        self.Attributes.append(value)
    def insert_Attributes_at(self, index, value):
        self.Attributes.insert(index, value)
    def replace_Attributes_at(self, index, value):
        self.Attributes[index] = value
    def get_GroupReferenceDetails(self):
        return self.GroupReferenceDetails
    def set_GroupReferenceDetails(self, GroupReferenceDetails):
        self.GroupReferenceDetails = GroupReferenceDetails
    def add_GroupReferenceDetails(self, value):
        self.GroupReferenceDetails.append(value)
    def insert_GroupReferenceDetails_at(self, index, value):
        self.GroupReferenceDetails.insert(index, value)
    def replace_GroupReferenceDetails_at(self, index, value):
        self.GroupReferenceDetails[index] = value
    def get_CreationDate(self):
        return self.CreationDate
    def set_CreationDate(self, CreationDate):
        self.CreationDate = CreationDate
    def validate_CustomerAccountStatusType(self, value):
        result = True
        # Validate type CustomerAccountStatusType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ACTIVE', 'CASH', 'DEACTIVATED']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CustomerAccountStatusType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_EnterpriseAccountType(self, value):
        result = True
        # Validate type EnterpriseAccountType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ACTIVATION_DESK', 'AIR_CARGO', 'BILLING', 'BROKER', 'BUSINESS', 'CATALOG_SHIPPER', 'CITY_CENTER', 'EMPLOYEE', 'FEDEX_AUTHORIZED_SERVICE_CENTER', 'FREIGHT_FORWARDER', 'GLOBAL_SERVICE_PROVIDER', 'GOVERNMENT', 'INDIVIDUAL', 'INTERLINE_CUSTOMER', 'INTERNAL_CONTROL_CUSTOMER', 'INTERNAL_TESTING_ACCOUNT', 'JOINT_VENTURE_PARTNER', 'MIDDLEMAN', 'NON_PROFIT', 'NON_REVENUE', 'OTHER', 'PACKAGE_CONSOLIDATOR', 'POLITICAL_CAMPAIGN', 'RESIDENTIAL_BUSINESS', 'UNKNOWN']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on EnterpriseAccountType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_CustomerAccountEntityType(self, value):
        result = True
        # Validate type CustomerAccountEntityType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BUSINESS', 'INDIVIDUAL']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CustomerAccountEntityType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_EnterpriseProfileAttributeType(self, value):
        result = True
        # Validate type EnterpriseProfileAttributeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CREDIT_CARD_ELIGIBLE', 'DO_NOT_LINK_ACCOUNTS', 'EXPRESS_ELIGIBLE', 'FEDEX_CAN_CALL_FOR_MARKETING', 'FREIGHT_ELIGIBLE', 'TAX_EXEMPT']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on EnterpriseProfileAttributeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Contacts or
            self.AccountNumber is not None or
            self.AccountStatus is not None or
            self.AccountType is not None or
            self.AccountGroups or
            self.EntityType is not None or
            self.Tins or
            self.WelcomeKit is not None or
            self.Attributes or
            self.GroupReferenceDetails or
            self.CreationDate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EnterpriseProfile', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EnterpriseProfile')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EnterpriseProfile':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EnterpriseProfile')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='EnterpriseProfile', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EnterpriseProfile'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EnterpriseProfile', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Contacts_ in self.Contacts:
            namespaceprefix_ = self.Contacts_nsprefix_ + ':' if (UseCapturedNS_ and self.Contacts_nsprefix_) else ''
            Contacts_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Contacts', pretty_print=pretty_print)
        if self.AccountNumber is not None:
            namespaceprefix_ = self.AccountNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.AccountNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAccountNumber>%s</%sAccountNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AccountNumber), input_name='AccountNumber')), namespaceprefix_ , eol_))
        if self.AccountStatus is not None:
            namespaceprefix_ = self.AccountStatus_nsprefix_ + ':' if (UseCapturedNS_ and self.AccountStatus_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAccountStatus>%s</%sAccountStatus>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AccountStatus), input_name='AccountStatus')), namespaceprefix_ , eol_))
        if self.AccountType is not None:
            namespaceprefix_ = self.AccountType_nsprefix_ + ':' if (UseCapturedNS_ and self.AccountType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAccountType>%s</%sAccountType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AccountType), input_name='AccountType')), namespaceprefix_ , eol_))
        for AccountGroups_ in self.AccountGroups:
            namespaceprefix_ = self.AccountGroups_nsprefix_ + ':' if (UseCapturedNS_ and self.AccountGroups_nsprefix_) else ''
            AccountGroups_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AccountGroups', pretty_print=pretty_print)
        if self.EntityType is not None:
            namespaceprefix_ = self.EntityType_nsprefix_ + ':' if (UseCapturedNS_ and self.EntityType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEntityType>%s</%sEntityType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EntityType), input_name='EntityType')), namespaceprefix_ , eol_))
        for Tins_ in self.Tins:
            namespaceprefix_ = self.Tins_nsprefix_ + ':' if (UseCapturedNS_ and self.Tins_nsprefix_) else ''
            Tins_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Tins', pretty_print=pretty_print)
        if self.WelcomeKit is not None:
            namespaceprefix_ = self.WelcomeKit_nsprefix_ + ':' if (UseCapturedNS_ and self.WelcomeKit_nsprefix_) else ''
            self.WelcomeKit.export(outfile, level, namespaceprefix_, namespacedef_='', name_='WelcomeKit', pretty_print=pretty_print)
        for Attributes_ in self.Attributes:
            namespaceprefix_ = self.Attributes_nsprefix_ + ':' if (UseCapturedNS_ and self.Attributes_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAttributes>%s</%sAttributes>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Attributes_), input_name='Attributes')), namespaceprefix_ , eol_))
        for GroupReferenceDetails_ in self.GroupReferenceDetails:
            namespaceprefix_ = self.GroupReferenceDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.GroupReferenceDetails_nsprefix_) else ''
            GroupReferenceDetails_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='GroupReferenceDetails', pretty_print=pretty_print)
        if self.CreationDate is not None:
            namespaceprefix_ = self.CreationDate_nsprefix_ + ':' if (UseCapturedNS_ and self.CreationDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCreationDate>%s</%sCreationDate>%s' % (namespaceprefix_ , self.gds_format_datetime(self.CreationDate, input_name='CreationDate'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Contacts':
            obj_ = ProfileContact.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Contacts.append(obj_)
            obj_.original_tagname_ = 'Contacts'
        elif nodeName_ == 'AccountNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AccountNumber')
            value_ = self.gds_validate_string(value_, node, 'AccountNumber')
            self.AccountNumber = value_
            self.AccountNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'AccountStatus':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AccountStatus')
            value_ = self.gds_validate_string(value_, node, 'AccountStatus')
            self.AccountStatus = value_
            self.AccountStatus_nsprefix_ = child_.prefix
            # validate type CustomerAccountStatusType
            self.validate_CustomerAccountStatusType(self.AccountStatus)
        elif nodeName_ == 'AccountType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AccountType')
            value_ = self.gds_validate_string(value_, node, 'AccountType')
            self.AccountType = value_
            self.AccountType_nsprefix_ = child_.prefix
            # validate type EnterpriseAccountType
            self.validate_EnterpriseAccountType(self.AccountType)
        elif nodeName_ == 'AccountGroups':
            obj_ = AccountGroupMembershipDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AccountGroups.append(obj_)
            obj_.original_tagname_ = 'AccountGroups'
        elif nodeName_ == 'EntityType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EntityType')
            value_ = self.gds_validate_string(value_, node, 'EntityType')
            self.EntityType = value_
            self.EntityType_nsprefix_ = child_.prefix
            # validate type CustomerAccountEntityType
            self.validate_CustomerAccountEntityType(self.EntityType)
        elif nodeName_ == 'Tins':
            obj_ = TaxpayerIdentification.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Tins.append(obj_)
            obj_.original_tagname_ = 'Tins'
        elif nodeName_ == 'WelcomeKit':
            obj_ = WelcomeKitDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.WelcomeKit = obj_
            obj_.original_tagname_ = 'WelcomeKit'
        elif nodeName_ == 'Attributes':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Attributes')
            value_ = self.gds_validate_string(value_, node, 'Attributes')
            self.Attributes.append(value_)
            self.Attributes_nsprefix_ = child_.prefix
            # validate type EnterpriseProfileAttributeType
            self.validate_EnterpriseProfileAttributeType(self.Attributes[-1])
        elif nodeName_ == 'GroupReferenceDetails':
            obj_ = GroupReferenceDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.GroupReferenceDetails.append(obj_)
            obj_.original_tagname_ = 'GroupReferenceDetails'
        elif nodeName_ == 'CreationDate':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.CreationDate = dval_
            self.CreationDate_nsprefix_ = child_.prefix
# end class EnterpriseProfile


class EtdDetail(GeneratedsSuper):
    """Electronic Trade document references used with the ETD special
    service."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Confirmation=None, Attributes=None, RequestedDocumentCopies=None, DocumentReferences=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Confirmation = Confirmation
        self.validate_EtdConfirmationType(self.Confirmation)
        self.Confirmation_nsprefix_ = "ns"
        if Attributes is None:
            self.Attributes = []
        else:
            self.Attributes = Attributes
        self.Attributes_nsprefix_ = "ns"
        if RequestedDocumentCopies is None:
            self.RequestedDocumentCopies = []
        else:
            self.RequestedDocumentCopies = RequestedDocumentCopies
        self.RequestedDocumentCopies_nsprefix_ = "ns"
        if DocumentReferences is None:
            self.DocumentReferences = []
        else:
            self.DocumentReferences = DocumentReferences
        self.DocumentReferences_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EtdDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EtdDetail.subclass:
            return EtdDetail.subclass(*args_, **kwargs_)
        else:
            return EtdDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Confirmation(self):
        return self.Confirmation
    def set_Confirmation(self, Confirmation):
        self.Confirmation = Confirmation
    def get_Attributes(self):
        return self.Attributes
    def set_Attributes(self, Attributes):
        self.Attributes = Attributes
    def add_Attributes(self, value):
        self.Attributes.append(value)
    def insert_Attributes_at(self, index, value):
        self.Attributes.insert(index, value)
    def replace_Attributes_at(self, index, value):
        self.Attributes[index] = value
    def get_RequestedDocumentCopies(self):
        return self.RequestedDocumentCopies
    def set_RequestedDocumentCopies(self, RequestedDocumentCopies):
        self.RequestedDocumentCopies = RequestedDocumentCopies
    def add_RequestedDocumentCopies(self, value):
        self.RequestedDocumentCopies.append(value)
    def insert_RequestedDocumentCopies_at(self, index, value):
        self.RequestedDocumentCopies.insert(index, value)
    def replace_RequestedDocumentCopies_at(self, index, value):
        self.RequestedDocumentCopies[index] = value
    def get_DocumentReferences(self):
        return self.DocumentReferences
    def set_DocumentReferences(self, DocumentReferences):
        self.DocumentReferences = DocumentReferences
    def add_DocumentReferences(self, value):
        self.DocumentReferences.append(value)
    def insert_DocumentReferences_at(self, index, value):
        self.DocumentReferences.insert(index, value)
    def replace_DocumentReferences_at(self, index, value):
        self.DocumentReferences[index] = value
    def validate_EtdConfirmationType(self, value):
        result = True
        # Validate type EtdConfirmationType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CONFIRMED', 'DEFERRED']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on EtdConfirmationType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_EtdAttributeType(self, value):
        result = True
        # Validate type EtdAttributeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['POST_SHIPMENT_UPLOAD_REQUESTED']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on EtdAttributeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_RequestedShippingDocumentType(self, value):
        result = True
        # Validate type RequestedShippingDocumentType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CERTIFICATE_OF_ORIGIN', 'COMMERCIAL_INVOICE', 'CUSTOMER_SPECIFIED_LABELS', 'CUSTOM_PACKAGE_DOCUMENT', 'CUSTOM_SHIPMENT_DOCUMENT', 'DANGEROUS_GOODS_SHIPPERS_DECLARATION', 'EXPORT_DECLARATION', 'FEDEX_FREIGHT_STRAIGHT_BILL_OF_LADING', 'FREIGHT_ADDRESS_LABEL', 'GENERAL_AGENCY_AGREEMENT', 'LABEL', 'NAFTA_CERTIFICATE_OF_ORIGIN', 'OP_900', 'PRO_FORMA_INVOICE', 'RETURN_INSTRUCTIONS', 'VICS_BILL_OF_LADING']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on RequestedShippingDocumentType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Confirmation is not None or
            self.Attributes or
            self.RequestedDocumentCopies or
            self.DocumentReferences
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EtdDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EtdDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EtdDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EtdDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='EtdDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EtdDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EtdDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Confirmation is not None:
            namespaceprefix_ = self.Confirmation_nsprefix_ + ':' if (UseCapturedNS_ and self.Confirmation_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConfirmation>%s</%sConfirmation>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Confirmation), input_name='Confirmation')), namespaceprefix_ , eol_))
        for Attributes_ in self.Attributes:
            namespaceprefix_ = self.Attributes_nsprefix_ + ':' if (UseCapturedNS_ and self.Attributes_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAttributes>%s</%sAttributes>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Attributes_), input_name='Attributes')), namespaceprefix_ , eol_))
        for RequestedDocumentCopies_ in self.RequestedDocumentCopies:
            namespaceprefix_ = self.RequestedDocumentCopies_nsprefix_ + ':' if (UseCapturedNS_ and self.RequestedDocumentCopies_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRequestedDocumentCopies>%s</%sRequestedDocumentCopies>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(RequestedDocumentCopies_), input_name='RequestedDocumentCopies')), namespaceprefix_ , eol_))
        for DocumentReferences_ in self.DocumentReferences:
            namespaceprefix_ = self.DocumentReferences_nsprefix_ + ':' if (UseCapturedNS_ and self.DocumentReferences_nsprefix_) else ''
            DocumentReferences_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DocumentReferences', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Confirmation':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Confirmation')
            value_ = self.gds_validate_string(value_, node, 'Confirmation')
            self.Confirmation = value_
            self.Confirmation_nsprefix_ = child_.prefix
            # validate type EtdConfirmationType
            self.validate_EtdConfirmationType(self.Confirmation)
        elif nodeName_ == 'Attributes':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Attributes')
            value_ = self.gds_validate_string(value_, node, 'Attributes')
            self.Attributes.append(value_)
            self.Attributes_nsprefix_ = child_.prefix
            # validate type EtdAttributeType
            self.validate_EtdAttributeType(self.Attributes[-1])
        elif nodeName_ == 'RequestedDocumentCopies':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RequestedDocumentCopies')
            value_ = self.gds_validate_string(value_, node, 'RequestedDocumentCopies')
            self.RequestedDocumentCopies.append(value_)
            self.RequestedDocumentCopies_nsprefix_ = child_.prefix
            # validate type RequestedShippingDocumentType
            self.validate_RequestedShippingDocumentType(self.RequestedDocumentCopies[-1])
        elif nodeName_ == 'DocumentReferences':
            obj_ = UploadDocumentReferenceDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DocumentReferences.append(obj_)
            obj_.original_tagname_ = 'DocumentReferences'
# end class EtdDetail


class ExportDeclarationDetail(GeneratedsSuper):
    """The instructions indicating how to print the Export Declaration."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, DocumentFormat=None, CustomerImageUsages=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.DocumentFormat = DocumentFormat
        self.DocumentFormat_nsprefix_ = "ns"
        if CustomerImageUsages is None:
            self.CustomerImageUsages = []
        else:
            self.CustomerImageUsages = CustomerImageUsages
        self.CustomerImageUsages_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ExportDeclarationDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ExportDeclarationDetail.subclass:
            return ExportDeclarationDetail.subclass(*args_, **kwargs_)
        else:
            return ExportDeclarationDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DocumentFormat(self):
        return self.DocumentFormat
    def set_DocumentFormat(self, DocumentFormat):
        self.DocumentFormat = DocumentFormat
    def get_CustomerImageUsages(self):
        return self.CustomerImageUsages
    def set_CustomerImageUsages(self, CustomerImageUsages):
        self.CustomerImageUsages = CustomerImageUsages
    def add_CustomerImageUsages(self, value):
        self.CustomerImageUsages.append(value)
    def insert_CustomerImageUsages_at(self, index, value):
        self.CustomerImageUsages.insert(index, value)
    def replace_CustomerImageUsages_at(self, index, value):
        self.CustomerImageUsages[index] = value
    def hasContent_(self):
        if (
            self.DocumentFormat is not None or
            self.CustomerImageUsages
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ExportDeclarationDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ExportDeclarationDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ExportDeclarationDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ExportDeclarationDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ExportDeclarationDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ExportDeclarationDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ExportDeclarationDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DocumentFormat is not None:
            namespaceprefix_ = self.DocumentFormat_nsprefix_ + ':' if (UseCapturedNS_ and self.DocumentFormat_nsprefix_) else ''
            self.DocumentFormat.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DocumentFormat', pretty_print=pretty_print)
        for CustomerImageUsages_ in self.CustomerImageUsages:
            namespaceprefix_ = self.CustomerImageUsages_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomerImageUsages_nsprefix_) else ''
            CustomerImageUsages_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CustomerImageUsages', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DocumentFormat':
            obj_ = ShippingDocumentFormat.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DocumentFormat = obj_
            obj_.original_tagname_ = 'DocumentFormat'
        elif nodeName_ == 'CustomerImageUsages':
            obj_ = CustomerImageUsage.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CustomerImageUsages.append(obj_)
            obj_.original_tagname_ = 'CustomerImageUsages'
# end class ExportDeclarationDetail


class ExportDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, B13AFilingOption=None, ExportComplianceStatement=None, PermitNumber=None, DestinationControlDetail=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.B13AFilingOption = B13AFilingOption
        self.validate_B13AFilingOptionType(self.B13AFilingOption)
        self.B13AFilingOption_nsprefix_ = "ns"
        self.ExportComplianceStatement = ExportComplianceStatement
        self.ExportComplianceStatement_nsprefix_ = None
        self.PermitNumber = PermitNumber
        self.PermitNumber_nsprefix_ = None
        self.DestinationControlDetail = DestinationControlDetail
        self.DestinationControlDetail_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ExportDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ExportDetail.subclass:
            return ExportDetail.subclass(*args_, **kwargs_)
        else:
            return ExportDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_B13AFilingOption(self):
        return self.B13AFilingOption
    def set_B13AFilingOption(self, B13AFilingOption):
        self.B13AFilingOption = B13AFilingOption
    def get_ExportComplianceStatement(self):
        return self.ExportComplianceStatement
    def set_ExportComplianceStatement(self, ExportComplianceStatement):
        self.ExportComplianceStatement = ExportComplianceStatement
    def get_PermitNumber(self):
        return self.PermitNumber
    def set_PermitNumber(self, PermitNumber):
        self.PermitNumber = PermitNumber
    def get_DestinationControlDetail(self):
        return self.DestinationControlDetail
    def set_DestinationControlDetail(self, DestinationControlDetail):
        self.DestinationControlDetail = DestinationControlDetail
    def validate_B13AFilingOptionType(self, value):
        result = True
        # Validate type B13AFilingOptionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FEDEX_TO_STAMP', 'FILED_ELECTRONICALLY', 'MANUALLY_ATTACHED', 'NOT_REQUIRED', 'SUMMARY_REPORTING']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on B13AFilingOptionType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.B13AFilingOption is not None or
            self.ExportComplianceStatement is not None or
            self.PermitNumber is not None or
            self.DestinationControlDetail is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ExportDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ExportDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ExportDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ExportDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ExportDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ExportDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ExportDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.B13AFilingOption is not None:
            namespaceprefix_ = self.B13AFilingOption_nsprefix_ + ':' if (UseCapturedNS_ and self.B13AFilingOption_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sB13AFilingOption>%s</%sB13AFilingOption>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.B13AFilingOption), input_name='B13AFilingOption')), namespaceprefix_ , eol_))
        if self.ExportComplianceStatement is not None:
            namespaceprefix_ = self.ExportComplianceStatement_nsprefix_ + ':' if (UseCapturedNS_ and self.ExportComplianceStatement_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExportComplianceStatement>%s</%sExportComplianceStatement>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ExportComplianceStatement), input_name='ExportComplianceStatement')), namespaceprefix_ , eol_))
        if self.PermitNumber is not None:
            namespaceprefix_ = self.PermitNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.PermitNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPermitNumber>%s</%sPermitNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PermitNumber), input_name='PermitNumber')), namespaceprefix_ , eol_))
        if self.DestinationControlDetail is not None:
            namespaceprefix_ = self.DestinationControlDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.DestinationControlDetail_nsprefix_) else ''
            self.DestinationControlDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DestinationControlDetail', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'B13AFilingOption':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'B13AFilingOption')
            value_ = self.gds_validate_string(value_, node, 'B13AFilingOption')
            self.B13AFilingOption = value_
            self.B13AFilingOption_nsprefix_ = child_.prefix
            # validate type B13AFilingOptionType
            self.validate_B13AFilingOptionType(self.B13AFilingOption)
        elif nodeName_ == 'ExportComplianceStatement':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ExportComplianceStatement')
            value_ = self.gds_validate_string(value_, node, 'ExportComplianceStatement')
            self.ExportComplianceStatement = value_
            self.ExportComplianceStatement_nsprefix_ = child_.prefix
        elif nodeName_ == 'PermitNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PermitNumber')
            value_ = self.gds_validate_string(value_, node, 'PermitNumber')
            self.PermitNumber = value_
            self.PermitNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'DestinationControlDetail':
            obj_ = DestinationControlDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DestinationControlDetail = obj_
            obj_.original_tagname_ = 'DestinationControlDetail'
# end class ExportDetail


class ExpressFreightDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PackingListEnclosed=None, ShippersLoadAndCount=None, BookingConfirmationNumber=None, ReferenceLabelRequested=None, BeforeDeliveryContact=None, UndeliverableContact=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PackingListEnclosed = PackingListEnclosed
        self.PackingListEnclosed_nsprefix_ = None
        self.ShippersLoadAndCount = ShippersLoadAndCount
        self.ShippersLoadAndCount_nsprefix_ = None
        self.BookingConfirmationNumber = BookingConfirmationNumber
        self.BookingConfirmationNumber_nsprefix_ = None
        self.ReferenceLabelRequested = ReferenceLabelRequested
        self.ReferenceLabelRequested_nsprefix_ = None
        self.BeforeDeliveryContact = BeforeDeliveryContact
        self.BeforeDeliveryContact_nsprefix_ = "ns"
        self.UndeliverableContact = UndeliverableContact
        self.UndeliverableContact_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ExpressFreightDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ExpressFreightDetail.subclass:
            return ExpressFreightDetail.subclass(*args_, **kwargs_)
        else:
            return ExpressFreightDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PackingListEnclosed(self):
        return self.PackingListEnclosed
    def set_PackingListEnclosed(self, PackingListEnclosed):
        self.PackingListEnclosed = PackingListEnclosed
    def get_ShippersLoadAndCount(self):
        return self.ShippersLoadAndCount
    def set_ShippersLoadAndCount(self, ShippersLoadAndCount):
        self.ShippersLoadAndCount = ShippersLoadAndCount
    def get_BookingConfirmationNumber(self):
        return self.BookingConfirmationNumber
    def set_BookingConfirmationNumber(self, BookingConfirmationNumber):
        self.BookingConfirmationNumber = BookingConfirmationNumber
    def get_ReferenceLabelRequested(self):
        return self.ReferenceLabelRequested
    def set_ReferenceLabelRequested(self, ReferenceLabelRequested):
        self.ReferenceLabelRequested = ReferenceLabelRequested
    def get_BeforeDeliveryContact(self):
        return self.BeforeDeliveryContact
    def set_BeforeDeliveryContact(self, BeforeDeliveryContact):
        self.BeforeDeliveryContact = BeforeDeliveryContact
    def get_UndeliverableContact(self):
        return self.UndeliverableContact
    def set_UndeliverableContact(self, UndeliverableContact):
        self.UndeliverableContact = UndeliverableContact
    def hasContent_(self):
        if (
            self.PackingListEnclosed is not None or
            self.ShippersLoadAndCount is not None or
            self.BookingConfirmationNumber is not None or
            self.ReferenceLabelRequested is not None or
            self.BeforeDeliveryContact is not None or
            self.UndeliverableContact is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ExpressFreightDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ExpressFreightDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ExpressFreightDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ExpressFreightDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ExpressFreightDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ExpressFreightDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ExpressFreightDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PackingListEnclosed is not None:
            namespaceprefix_ = self.PackingListEnclosed_nsprefix_ + ':' if (UseCapturedNS_ and self.PackingListEnclosed_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackingListEnclosed>%s</%sPackingListEnclosed>%s' % (namespaceprefix_ , self.gds_format_boolean(self.PackingListEnclosed, input_name='PackingListEnclosed'), namespaceprefix_ , eol_))
        if self.ShippersLoadAndCount is not None:
            namespaceprefix_ = self.ShippersLoadAndCount_nsprefix_ + ':' if (UseCapturedNS_ and self.ShippersLoadAndCount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShippersLoadAndCount>%s</%sShippersLoadAndCount>%s' % (namespaceprefix_ , self.gds_format_integer(self.ShippersLoadAndCount, input_name='ShippersLoadAndCount'), namespaceprefix_ , eol_))
        if self.BookingConfirmationNumber is not None:
            namespaceprefix_ = self.BookingConfirmationNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.BookingConfirmationNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBookingConfirmationNumber>%s</%sBookingConfirmationNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BookingConfirmationNumber), input_name='BookingConfirmationNumber')), namespaceprefix_ , eol_))
        if self.ReferenceLabelRequested is not None:
            namespaceprefix_ = self.ReferenceLabelRequested_nsprefix_ + ':' if (UseCapturedNS_ and self.ReferenceLabelRequested_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceLabelRequested>%s</%sReferenceLabelRequested>%s' % (namespaceprefix_ , self.gds_format_boolean(self.ReferenceLabelRequested, input_name='ReferenceLabelRequested'), namespaceprefix_ , eol_))
        if self.BeforeDeliveryContact is not None:
            namespaceprefix_ = self.BeforeDeliveryContact_nsprefix_ + ':' if (UseCapturedNS_ and self.BeforeDeliveryContact_nsprefix_) else ''
            self.BeforeDeliveryContact.export(outfile, level, namespaceprefix_, namespacedef_='', name_='BeforeDeliveryContact', pretty_print=pretty_print)
        if self.UndeliverableContact is not None:
            namespaceprefix_ = self.UndeliverableContact_nsprefix_ + ':' if (UseCapturedNS_ and self.UndeliverableContact_nsprefix_) else ''
            self.UndeliverableContact.export(outfile, level, namespaceprefix_, namespacedef_='', name_='UndeliverableContact', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PackingListEnclosed':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'PackingListEnclosed')
            ival_ = self.gds_validate_boolean(ival_, node, 'PackingListEnclosed')
            self.PackingListEnclosed = ival_
            self.PackingListEnclosed_nsprefix_ = child_.prefix
        elif nodeName_ == 'ShippersLoadAndCount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'ShippersLoadAndCount')
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'ShippersLoadAndCount')
            self.ShippersLoadAndCount = ival_
            self.ShippersLoadAndCount_nsprefix_ = child_.prefix
        elif nodeName_ == 'BookingConfirmationNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'BookingConfirmationNumber')
            value_ = self.gds_validate_string(value_, node, 'BookingConfirmationNumber')
            self.BookingConfirmationNumber = value_
            self.BookingConfirmationNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'ReferenceLabelRequested':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'ReferenceLabelRequested')
            ival_ = self.gds_validate_boolean(ival_, node, 'ReferenceLabelRequested')
            self.ReferenceLabelRequested = ival_
            self.ReferenceLabelRequested_nsprefix_ = child_.prefix
        elif nodeName_ == 'BeforeDeliveryContact':
            obj_ = ExpressFreightDetailContact.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.BeforeDeliveryContact = obj_
            obj_.original_tagname_ = 'BeforeDeliveryContact'
        elif nodeName_ == 'UndeliverableContact':
            obj_ = ExpressFreightDetailContact.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.UndeliverableContact = obj_
            obj_.original_tagname_ = 'UndeliverableContact'
# end class ExpressFreightDetail


class ExpressFreightDetailContact(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Name=None, Phone=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Name = Name
        self.Name_nsprefix_ = None
        self.Phone = Phone
        self.Phone_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ExpressFreightDetailContact)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ExpressFreightDetailContact.subclass:
            return ExpressFreightDetailContact.subclass(*args_, **kwargs_)
        else:
            return ExpressFreightDetailContact(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Name(self):
        return self.Name
    def set_Name(self, Name):
        self.Name = Name
    def get_Phone(self):
        return self.Phone
    def set_Phone(self, Phone):
        self.Phone = Phone
    def hasContent_(self):
        if (
            self.Name is not None or
            self.Phone is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ExpressFreightDetailContact', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ExpressFreightDetailContact')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ExpressFreightDetailContact':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ExpressFreightDetailContact')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ExpressFreightDetailContact', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ExpressFreightDetailContact'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ExpressFreightDetailContact', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Name is not None:
            namespaceprefix_ = self.Name_nsprefix_ + ':' if (UseCapturedNS_ and self.Name_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sName>%s</%sName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), namespaceprefix_ , eol_))
        if self.Phone is not None:
            namespaceprefix_ = self.Phone_nsprefix_ + ':' if (UseCapturedNS_ and self.Phone_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPhone>%s</%sPhone>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Phone), input_name='Phone')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Name':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Name')
            value_ = self.gds_validate_string(value_, node, 'Name')
            self.Name = value_
            self.Name_nsprefix_ = child_.prefix
        elif nodeName_ == 'Phone':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Phone')
            value_ = self.gds_validate_string(value_, node, 'Phone')
            self.Phone = value_
            self.Phone_nsprefix_ = child_.prefix
# end class ExpressFreightDetailContact


class ExpressProfile(GeneratedsSuper):
    """Specifies the details for an Express profile."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Contacts=None, AccountStatus=None, CreationUserGroup=None, ManagementStatus=None, ProfileStatus=None, AccountType=None, PremierType=None, Tins=None, AccountGroups=None, Attributes=None, CashType=None, FreightChargesPaymentType=None, CreditStatusDetail=None, CostCenterAccountNumber=None, BillToAccountNumber=None, GroundProfile=None, ShippingVolumeDetail=None, SuppliesDetail=None, StationNumber=None, StationId=None, AirCargoDetail=None, BankDetails=None, DirectDebitDetails=None, VatDetails=None, InterlineDetail=None, RevenueDetail=None, DiscountDetails=None, SalesContact=None, SmartPostAccountDetail=None, FranchiseeDetail=None, CreationDate=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Contacts is None:
            self.Contacts = []
        else:
            self.Contacts = Contacts
        self.Contacts_nsprefix_ = "ns"
        self.AccountStatus = AccountStatus
        self.validate_CustomerAccountStatusType(self.AccountStatus)
        self.AccountStatus_nsprefix_ = "ns"
        self.CreationUserGroup = CreationUserGroup
        self.CreationUserGroup_nsprefix_ = None
        self.ManagementStatus = ManagementStatus
        self.validate_CustomerAccountManagementStatusType(self.ManagementStatus)
        self.ManagementStatus_nsprefix_ = "ns"
        self.ProfileStatus = ProfileStatus
        self.validate_StatusType(self.ProfileStatus)
        self.ProfileStatus_nsprefix_ = "ns"
        self.AccountType = AccountType
        self.validate_ExpressAccountType(self.AccountType)
        self.AccountType_nsprefix_ = "ns"
        self.PremierType = PremierType
        self.validate_PremierType(self.PremierType)
        self.PremierType_nsprefix_ = "ns"
        if Tins is None:
            self.Tins = []
        else:
            self.Tins = Tins
        self.Tins_nsprefix_ = "ns"
        if AccountGroups is None:
            self.AccountGroups = []
        else:
            self.AccountGroups = AccountGroups
        self.AccountGroups_nsprefix_ = "ns"
        if Attributes is None:
            self.Attributes = []
        else:
            self.Attributes = Attributes
        self.Attributes_nsprefix_ = "ns"
        self.CashType = CashType
        self.validate_CustomerCashType(self.CashType)
        self.CashType_nsprefix_ = "ns"
        self.FreightChargesPaymentType = FreightChargesPaymentType
        self.FreightChargesPaymentType_nsprefix_ = None
        self.CreditStatusDetail = CreditStatusDetail
        self.CreditStatusDetail_nsprefix_ = "ns"
        self.CostCenterAccountNumber = CostCenterAccountNumber
        self.CostCenterAccountNumber_nsprefix_ = None
        self.BillToAccountNumber = BillToAccountNumber
        self.BillToAccountNumber_nsprefix_ = None
        self.GroundProfile = GroundProfile
        self.GroundProfile_nsprefix_ = "ns"
        self.ShippingVolumeDetail = ShippingVolumeDetail
        self.ShippingVolumeDetail_nsprefix_ = "ns"
        self.SuppliesDetail = SuppliesDetail
        self.SuppliesDetail_nsprefix_ = "ns"
        self.StationNumber = StationNumber
        self.StationNumber_nsprefix_ = None
        self.StationId = StationId
        self.StationId_nsprefix_ = None
        self.AirCargoDetail = AirCargoDetail
        self.AirCargoDetail_nsprefix_ = "ns"
        if BankDetails is None:
            self.BankDetails = []
        else:
            self.BankDetails = BankDetails
        self.BankDetails_nsprefix_ = "ns"
        if DirectDebitDetails is None:
            self.DirectDebitDetails = []
        else:
            self.DirectDebitDetails = DirectDebitDetails
        self.DirectDebitDetails_nsprefix_ = "ns"
        if VatDetails is None:
            self.VatDetails = []
        else:
            self.VatDetails = VatDetails
        self.VatDetails_nsprefix_ = "ns"
        self.InterlineDetail = InterlineDetail
        self.InterlineDetail_nsprefix_ = "ns"
        self.RevenueDetail = RevenueDetail
        self.RevenueDetail_nsprefix_ = "ns"
        if DiscountDetails is None:
            self.DiscountDetails = []
        else:
            self.DiscountDetails = DiscountDetails
        self.DiscountDetails_nsprefix_ = "ns"
        self.SalesContact = SalesContact
        self.SalesContact_nsprefix_ = "ns"
        self.SmartPostAccountDetail = SmartPostAccountDetail
        self.SmartPostAccountDetail_nsprefix_ = "ns"
        self.FranchiseeDetail = FranchiseeDetail
        self.FranchiseeDetail_nsprefix_ = "ns"
        if isinstance(CreationDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(CreationDate, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = CreationDate
        self.CreationDate = initvalue_
        self.CreationDate_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ExpressProfile)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ExpressProfile.subclass:
            return ExpressProfile.subclass(*args_, **kwargs_)
        else:
            return ExpressProfile(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Contacts(self):
        return self.Contacts
    def set_Contacts(self, Contacts):
        self.Contacts = Contacts
    def add_Contacts(self, value):
        self.Contacts.append(value)
    def insert_Contacts_at(self, index, value):
        self.Contacts.insert(index, value)
    def replace_Contacts_at(self, index, value):
        self.Contacts[index] = value
    def get_AccountStatus(self):
        return self.AccountStatus
    def set_AccountStatus(self, AccountStatus):
        self.AccountStatus = AccountStatus
    def get_CreationUserGroup(self):
        return self.CreationUserGroup
    def set_CreationUserGroup(self, CreationUserGroup):
        self.CreationUserGroup = CreationUserGroup
    def get_ManagementStatus(self):
        return self.ManagementStatus
    def set_ManagementStatus(self, ManagementStatus):
        self.ManagementStatus = ManagementStatus
    def get_ProfileStatus(self):
        return self.ProfileStatus
    def set_ProfileStatus(self, ProfileStatus):
        self.ProfileStatus = ProfileStatus
    def get_AccountType(self):
        return self.AccountType
    def set_AccountType(self, AccountType):
        self.AccountType = AccountType
    def get_PremierType(self):
        return self.PremierType
    def set_PremierType(self, PremierType):
        self.PremierType = PremierType
    def get_Tins(self):
        return self.Tins
    def set_Tins(self, Tins):
        self.Tins = Tins
    def add_Tins(self, value):
        self.Tins.append(value)
    def insert_Tins_at(self, index, value):
        self.Tins.insert(index, value)
    def replace_Tins_at(self, index, value):
        self.Tins[index] = value
    def get_AccountGroups(self):
        return self.AccountGroups
    def set_AccountGroups(self, AccountGroups):
        self.AccountGroups = AccountGroups
    def add_AccountGroups(self, value):
        self.AccountGroups.append(value)
    def insert_AccountGroups_at(self, index, value):
        self.AccountGroups.insert(index, value)
    def replace_AccountGroups_at(self, index, value):
        self.AccountGroups[index] = value
    def get_Attributes(self):
        return self.Attributes
    def set_Attributes(self, Attributes):
        self.Attributes = Attributes
    def add_Attributes(self, value):
        self.Attributes.append(value)
    def insert_Attributes_at(self, index, value):
        self.Attributes.insert(index, value)
    def replace_Attributes_at(self, index, value):
        self.Attributes[index] = value
    def get_CashType(self):
        return self.CashType
    def set_CashType(self, CashType):
        self.CashType = CashType
    def get_FreightChargesPaymentType(self):
        return self.FreightChargesPaymentType
    def set_FreightChargesPaymentType(self, FreightChargesPaymentType):
        self.FreightChargesPaymentType = FreightChargesPaymentType
    def get_CreditStatusDetail(self):
        return self.CreditStatusDetail
    def set_CreditStatusDetail(self, CreditStatusDetail):
        self.CreditStatusDetail = CreditStatusDetail
    def get_CostCenterAccountNumber(self):
        return self.CostCenterAccountNumber
    def set_CostCenterAccountNumber(self, CostCenterAccountNumber):
        self.CostCenterAccountNumber = CostCenterAccountNumber
    def get_BillToAccountNumber(self):
        return self.BillToAccountNumber
    def set_BillToAccountNumber(self, BillToAccountNumber):
        self.BillToAccountNumber = BillToAccountNumber
    def get_GroundProfile(self):
        return self.GroundProfile
    def set_GroundProfile(self, GroundProfile):
        self.GroundProfile = GroundProfile
    def get_ShippingVolumeDetail(self):
        return self.ShippingVolumeDetail
    def set_ShippingVolumeDetail(self, ShippingVolumeDetail):
        self.ShippingVolumeDetail = ShippingVolumeDetail
    def get_SuppliesDetail(self):
        return self.SuppliesDetail
    def set_SuppliesDetail(self, SuppliesDetail):
        self.SuppliesDetail = SuppliesDetail
    def get_StationNumber(self):
        return self.StationNumber
    def set_StationNumber(self, StationNumber):
        self.StationNumber = StationNumber
    def get_StationId(self):
        return self.StationId
    def set_StationId(self, StationId):
        self.StationId = StationId
    def get_AirCargoDetail(self):
        return self.AirCargoDetail
    def set_AirCargoDetail(self, AirCargoDetail):
        self.AirCargoDetail = AirCargoDetail
    def get_BankDetails(self):
        return self.BankDetails
    def set_BankDetails(self, BankDetails):
        self.BankDetails = BankDetails
    def add_BankDetails(self, value):
        self.BankDetails.append(value)
    def insert_BankDetails_at(self, index, value):
        self.BankDetails.insert(index, value)
    def replace_BankDetails_at(self, index, value):
        self.BankDetails[index] = value
    def get_DirectDebitDetails(self):
        return self.DirectDebitDetails
    def set_DirectDebitDetails(self, DirectDebitDetails):
        self.DirectDebitDetails = DirectDebitDetails
    def add_DirectDebitDetails(self, value):
        self.DirectDebitDetails.append(value)
    def insert_DirectDebitDetails_at(self, index, value):
        self.DirectDebitDetails.insert(index, value)
    def replace_DirectDebitDetails_at(self, index, value):
        self.DirectDebitDetails[index] = value
    def get_VatDetails(self):
        return self.VatDetails
    def set_VatDetails(self, VatDetails):
        self.VatDetails = VatDetails
    def add_VatDetails(self, value):
        self.VatDetails.append(value)
    def insert_VatDetails_at(self, index, value):
        self.VatDetails.insert(index, value)
    def replace_VatDetails_at(self, index, value):
        self.VatDetails[index] = value
    def get_InterlineDetail(self):
        return self.InterlineDetail
    def set_InterlineDetail(self, InterlineDetail):
        self.InterlineDetail = InterlineDetail
    def get_RevenueDetail(self):
        return self.RevenueDetail
    def set_RevenueDetail(self, RevenueDetail):
        self.RevenueDetail = RevenueDetail
    def get_DiscountDetails(self):
        return self.DiscountDetails
    def set_DiscountDetails(self, DiscountDetails):
        self.DiscountDetails = DiscountDetails
    def add_DiscountDetails(self, value):
        self.DiscountDetails.append(value)
    def insert_DiscountDetails_at(self, index, value):
        self.DiscountDetails.insert(index, value)
    def replace_DiscountDetails_at(self, index, value):
        self.DiscountDetails[index] = value
    def get_SalesContact(self):
        return self.SalesContact
    def set_SalesContact(self, SalesContact):
        self.SalesContact = SalesContact
    def get_SmartPostAccountDetail(self):
        return self.SmartPostAccountDetail
    def set_SmartPostAccountDetail(self, SmartPostAccountDetail):
        self.SmartPostAccountDetail = SmartPostAccountDetail
    def get_FranchiseeDetail(self):
        return self.FranchiseeDetail
    def set_FranchiseeDetail(self, FranchiseeDetail):
        self.FranchiseeDetail = FranchiseeDetail
    def get_CreationDate(self):
        return self.CreationDate
    def set_CreationDate(self, CreationDate):
        self.CreationDate = CreationDate
    def validate_CustomerAccountStatusType(self, value):
        result = True
        # Validate type CustomerAccountStatusType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ACTIVE', 'CASH', 'DEACTIVATED']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CustomerAccountStatusType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_CustomerAccountManagementStatusType(self, value):
        result = True
        # Validate type CustomerAccountManagementStatusType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ABUSED', 'ACCOUNT_EXCEPTION', 'DELETED_BY_REQUEST', 'DELETED_BY_SYSTEM', 'MAILING_ADDRESS_SPECIFIED', 'MODIFIED', 'NOT_MODIFIED', 'REINSTATED', 'UNABLE_TO_LOCATE_CUSTOMER']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CustomerAccountManagementStatusType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_StatusType(self, value):
        result = True
        # Validate type StatusType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ACTIVE', 'EXPIRED', 'EXPIRED_WITHIN_GRACE_PERIOD', 'PENDING_RENEWAL']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on StatusType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_ExpressAccountType(self, value):
        result = True
        # Validate type ExpressAccountType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ACTIVATION_DESK', 'AIR_CARGO', 'AIR_CARGO_BILLING', 'BILLING', 'BROKER', 'BUSINESS_SHIPPER', 'CATALOG_SHIPPER', 'CITY_CENTER', 'EMPLOYEE', 'FEDEX_OFFICE_RETAIL_OPERATIONS', 'FREIGHT_FORWARDER', 'GLOBAL_SERVICE_PROVIDER', 'GOVERNMENT', 'INDIVIDUAL', 'INTERLINE_CUSTOMER', 'INTERNAL_CONTROL_ACCOUNT', 'INTERNAL_TESTING_ACCOUNT', 'INVOICING', 'JOINT_VENTURE_PARTNER', 'MIDDLEMAN', 'NON_INVOICING', 'NON_PROFIT', 'NON_REVENUE', 'OTHER', 'PACKAGE_CONSOLIDATOR', 'POLITICAL_CAMPAIGN', 'RESIDENTIAL_BUSINESS', 'UNKNOWN']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ExpressAccountType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_PremierType(self, value):
        result = True
        # Validate type PremierType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BRONZE_ACCOUNT', 'FEDEX_ONE_CALL_CUSTOMER', 'GOLD_ACCOUNT', 'SILVER_ACCOUNT', 'SPECIAL_CUSTOMER_ROUTING']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on PremierType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_ExpressProfileAttributeType(self, value):
        result = True
        # Validate type ExpressProfileAttributeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ACCEPT_CREDIT', 'EDI_MASTER', 'EXPORT_DECLARATION_FILED_BY_CUSTOMER', 'FEDEX_CAN_CALL_FOR_MARKETING', 'FEDEX_FRANCHISEE_ACCOUNT', 'FEDEX_MARKETING_CORRESPONDENCE_ALLOWED', 'GROUND_ELIGIBLE', 'IMPORT_DECLARATION_FILED_BY_CUSTOMER', 'INSIGHT_VISIBLE', 'PREFERRED_CUSTOMER', 'PROOF_OF_DELIVERY_NEEDED', 'REGULAR_PICKUP_SCHEDULED', 'RESTRICTED_COMMODITY_LIMIT_EXEMPT', 'SIGNATURE_ON_FILE', 'SIGNATURE_REQUIRED', 'VAT_EXEMPT']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ExpressProfileAttributeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_CustomerCashType(self, value):
        result = True
        # Validate type CustomerCashType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BAD', 'GOOD']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CustomerCashType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Contacts or
            self.AccountStatus is not None or
            self.CreationUserGroup is not None or
            self.ManagementStatus is not None or
            self.ProfileStatus is not None or
            self.AccountType is not None or
            self.PremierType is not None or
            self.Tins or
            self.AccountGroups or
            self.Attributes or
            self.CashType is not None or
            self.FreightChargesPaymentType is not None or
            self.CreditStatusDetail is not None or
            self.CostCenterAccountNumber is not None or
            self.BillToAccountNumber is not None or
            self.GroundProfile is not None or
            self.ShippingVolumeDetail is not None or
            self.SuppliesDetail is not None or
            self.StationNumber is not None or
            self.StationId is not None or
            self.AirCargoDetail is not None or
            self.BankDetails or
            self.DirectDebitDetails or
            self.VatDetails or
            self.InterlineDetail is not None or
            self.RevenueDetail is not None or
            self.DiscountDetails or
            self.SalesContact is not None or
            self.SmartPostAccountDetail is not None or
            self.FranchiseeDetail is not None or
            self.CreationDate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ExpressProfile', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ExpressProfile')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ExpressProfile':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ExpressProfile')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ExpressProfile', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ExpressProfile'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ExpressProfile', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Contacts_ in self.Contacts:
            namespaceprefix_ = self.Contacts_nsprefix_ + ':' if (UseCapturedNS_ and self.Contacts_nsprefix_) else ''
            Contacts_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Contacts', pretty_print=pretty_print)
        if self.AccountStatus is not None:
            namespaceprefix_ = self.AccountStatus_nsprefix_ + ':' if (UseCapturedNS_ and self.AccountStatus_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAccountStatus>%s</%sAccountStatus>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AccountStatus), input_name='AccountStatus')), namespaceprefix_ , eol_))
        if self.CreationUserGroup is not None:
            namespaceprefix_ = self.CreationUserGroup_nsprefix_ + ':' if (UseCapturedNS_ and self.CreationUserGroup_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCreationUserGroup>%s</%sCreationUserGroup>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CreationUserGroup), input_name='CreationUserGroup')), namespaceprefix_ , eol_))
        if self.ManagementStatus is not None:
            namespaceprefix_ = self.ManagementStatus_nsprefix_ + ':' if (UseCapturedNS_ and self.ManagementStatus_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sManagementStatus>%s</%sManagementStatus>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ManagementStatus), input_name='ManagementStatus')), namespaceprefix_ , eol_))
        if self.ProfileStatus is not None:
            namespaceprefix_ = self.ProfileStatus_nsprefix_ + ':' if (UseCapturedNS_ and self.ProfileStatus_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProfileStatus>%s</%sProfileStatus>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ProfileStatus), input_name='ProfileStatus')), namespaceprefix_ , eol_))
        if self.AccountType is not None:
            namespaceprefix_ = self.AccountType_nsprefix_ + ':' if (UseCapturedNS_ and self.AccountType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAccountType>%s</%sAccountType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AccountType), input_name='AccountType')), namespaceprefix_ , eol_))
        if self.PremierType is not None:
            namespaceprefix_ = self.PremierType_nsprefix_ + ':' if (UseCapturedNS_ and self.PremierType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPremierType>%s</%sPremierType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PremierType), input_name='PremierType')), namespaceprefix_ , eol_))
        for Tins_ in self.Tins:
            namespaceprefix_ = self.Tins_nsprefix_ + ':' if (UseCapturedNS_ and self.Tins_nsprefix_) else ''
            Tins_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Tins', pretty_print=pretty_print)
        for AccountGroups_ in self.AccountGroups:
            namespaceprefix_ = self.AccountGroups_nsprefix_ + ':' if (UseCapturedNS_ and self.AccountGroups_nsprefix_) else ''
            AccountGroups_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AccountGroups', pretty_print=pretty_print)
        for Attributes_ in self.Attributes:
            namespaceprefix_ = self.Attributes_nsprefix_ + ':' if (UseCapturedNS_ and self.Attributes_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAttributes>%s</%sAttributes>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Attributes_), input_name='Attributes')), namespaceprefix_ , eol_))
        if self.CashType is not None:
            namespaceprefix_ = self.CashType_nsprefix_ + ':' if (UseCapturedNS_ and self.CashType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCashType>%s</%sCashType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CashType), input_name='CashType')), namespaceprefix_ , eol_))
        if self.FreightChargesPaymentType is not None:
            namespaceprefix_ = self.FreightChargesPaymentType_nsprefix_ + ':' if (UseCapturedNS_ and self.FreightChargesPaymentType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFreightChargesPaymentType>%s</%sFreightChargesPaymentType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FreightChargesPaymentType), input_name='FreightChargesPaymentType')), namespaceprefix_ , eol_))
        if self.CreditStatusDetail is not None:
            namespaceprefix_ = self.CreditStatusDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.CreditStatusDetail_nsprefix_) else ''
            self.CreditStatusDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CreditStatusDetail', pretty_print=pretty_print)
        if self.CostCenterAccountNumber is not None:
            namespaceprefix_ = self.CostCenterAccountNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.CostCenterAccountNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCostCenterAccountNumber>%s</%sCostCenterAccountNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CostCenterAccountNumber), input_name='CostCenterAccountNumber')), namespaceprefix_ , eol_))
        if self.BillToAccountNumber is not None:
            namespaceprefix_ = self.BillToAccountNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.BillToAccountNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBillToAccountNumber>%s</%sBillToAccountNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BillToAccountNumber), input_name='BillToAccountNumber')), namespaceprefix_ , eol_))
        if self.GroundProfile is not None:
            namespaceprefix_ = self.GroundProfile_nsprefix_ + ':' if (UseCapturedNS_ and self.GroundProfile_nsprefix_) else ''
            self.GroundProfile.export(outfile, level, namespaceprefix_, namespacedef_='', name_='GroundProfile', pretty_print=pretty_print)
        if self.ShippingVolumeDetail is not None:
            namespaceprefix_ = self.ShippingVolumeDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.ShippingVolumeDetail_nsprefix_) else ''
            self.ShippingVolumeDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ShippingVolumeDetail', pretty_print=pretty_print)
        if self.SuppliesDetail is not None:
            namespaceprefix_ = self.SuppliesDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.SuppliesDetail_nsprefix_) else ''
            self.SuppliesDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SuppliesDetail', pretty_print=pretty_print)
        if self.StationNumber is not None:
            namespaceprefix_ = self.StationNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.StationNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStationNumber>%s</%sStationNumber>%s' % (namespaceprefix_ , self.gds_format_integer(self.StationNumber, input_name='StationNumber'), namespaceprefix_ , eol_))
        if self.StationId is not None:
            namespaceprefix_ = self.StationId_nsprefix_ + ':' if (UseCapturedNS_ and self.StationId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStationId>%s</%sStationId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.StationId), input_name='StationId')), namespaceprefix_ , eol_))
        if self.AirCargoDetail is not None:
            namespaceprefix_ = self.AirCargoDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.AirCargoDetail_nsprefix_) else ''
            self.AirCargoDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AirCargoDetail', pretty_print=pretty_print)
        for BankDetails_ in self.BankDetails:
            namespaceprefix_ = self.BankDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.BankDetails_nsprefix_) else ''
            BankDetails_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='BankDetails', pretty_print=pretty_print)
        for DirectDebitDetails_ in self.DirectDebitDetails:
            namespaceprefix_ = self.DirectDebitDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.DirectDebitDetails_nsprefix_) else ''
            DirectDebitDetails_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DirectDebitDetails', pretty_print=pretty_print)
        for VatDetails_ in self.VatDetails:
            namespaceprefix_ = self.VatDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.VatDetails_nsprefix_) else ''
            VatDetails_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='VatDetails', pretty_print=pretty_print)
        if self.InterlineDetail is not None:
            namespaceprefix_ = self.InterlineDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.InterlineDetail_nsprefix_) else ''
            self.InterlineDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='InterlineDetail', pretty_print=pretty_print)
        if self.RevenueDetail is not None:
            namespaceprefix_ = self.RevenueDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.RevenueDetail_nsprefix_) else ''
            self.RevenueDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RevenueDetail', pretty_print=pretty_print)
        for DiscountDetails_ in self.DiscountDetails:
            namespaceprefix_ = self.DiscountDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.DiscountDetails_nsprefix_) else ''
            DiscountDetails_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DiscountDetails', pretty_print=pretty_print)
        if self.SalesContact is not None:
            namespaceprefix_ = self.SalesContact_nsprefix_ + ':' if (UseCapturedNS_ and self.SalesContact_nsprefix_) else ''
            self.SalesContact.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SalesContact', pretty_print=pretty_print)
        if self.SmartPostAccountDetail is not None:
            namespaceprefix_ = self.SmartPostAccountDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.SmartPostAccountDetail_nsprefix_) else ''
            self.SmartPostAccountDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SmartPostAccountDetail', pretty_print=pretty_print)
        if self.FranchiseeDetail is not None:
            namespaceprefix_ = self.FranchiseeDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.FranchiseeDetail_nsprefix_) else ''
            self.FranchiseeDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FranchiseeDetail', pretty_print=pretty_print)
        if self.CreationDate is not None:
            namespaceprefix_ = self.CreationDate_nsprefix_ + ':' if (UseCapturedNS_ and self.CreationDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCreationDate>%s</%sCreationDate>%s' % (namespaceprefix_ , self.gds_format_datetime(self.CreationDate, input_name='CreationDate'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Contacts':
            obj_ = ProfileContact.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Contacts.append(obj_)
            obj_.original_tagname_ = 'Contacts'
        elif nodeName_ == 'AccountStatus':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AccountStatus')
            value_ = self.gds_validate_string(value_, node, 'AccountStatus')
            self.AccountStatus = value_
            self.AccountStatus_nsprefix_ = child_.prefix
            # validate type CustomerAccountStatusType
            self.validate_CustomerAccountStatusType(self.AccountStatus)
        elif nodeName_ == 'CreationUserGroup':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CreationUserGroup')
            value_ = self.gds_validate_string(value_, node, 'CreationUserGroup')
            self.CreationUserGroup = value_
            self.CreationUserGroup_nsprefix_ = child_.prefix
        elif nodeName_ == 'ManagementStatus':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ManagementStatus')
            value_ = self.gds_validate_string(value_, node, 'ManagementStatus')
            self.ManagementStatus = value_
            self.ManagementStatus_nsprefix_ = child_.prefix
            # validate type CustomerAccountManagementStatusType
            self.validate_CustomerAccountManagementStatusType(self.ManagementStatus)
        elif nodeName_ == 'ProfileStatus':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ProfileStatus')
            value_ = self.gds_validate_string(value_, node, 'ProfileStatus')
            self.ProfileStatus = value_
            self.ProfileStatus_nsprefix_ = child_.prefix
            # validate type StatusType
            self.validate_StatusType(self.ProfileStatus)
        elif nodeName_ == 'AccountType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AccountType')
            value_ = self.gds_validate_string(value_, node, 'AccountType')
            self.AccountType = value_
            self.AccountType_nsprefix_ = child_.prefix
            # validate type ExpressAccountType
            self.validate_ExpressAccountType(self.AccountType)
        elif nodeName_ == 'PremierType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PremierType')
            value_ = self.gds_validate_string(value_, node, 'PremierType')
            self.PremierType = value_
            self.PremierType_nsprefix_ = child_.prefix
            # validate type PremierType
            self.validate_PremierType(self.PremierType)
        elif nodeName_ == 'Tins':
            obj_ = TaxpayerIdentification.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Tins.append(obj_)
            obj_.original_tagname_ = 'Tins'
        elif nodeName_ == 'AccountGroups':
            obj_ = AccountGroupMembershipDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AccountGroups.append(obj_)
            obj_.original_tagname_ = 'AccountGroups'
        elif nodeName_ == 'Attributes':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Attributes')
            value_ = self.gds_validate_string(value_, node, 'Attributes')
            self.Attributes.append(value_)
            self.Attributes_nsprefix_ = child_.prefix
            # validate type ExpressProfileAttributeType
            self.validate_ExpressProfileAttributeType(self.Attributes[-1])
        elif nodeName_ == 'CashType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CashType')
            value_ = self.gds_validate_string(value_, node, 'CashType')
            self.CashType = value_
            self.CashType_nsprefix_ = child_.prefix
            # validate type CustomerCashType
            self.validate_CustomerCashType(self.CashType)
        elif nodeName_ == 'FreightChargesPaymentType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FreightChargesPaymentType')
            value_ = self.gds_validate_string(value_, node, 'FreightChargesPaymentType')
            self.FreightChargesPaymentType = value_
            self.FreightChargesPaymentType_nsprefix_ = child_.prefix
        elif nodeName_ == 'CreditStatusDetail':
            obj_ = ProfileCreditStatusDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CreditStatusDetail = obj_
            obj_.original_tagname_ = 'CreditStatusDetail'
        elif nodeName_ == 'CostCenterAccountNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CostCenterAccountNumber')
            value_ = self.gds_validate_string(value_, node, 'CostCenterAccountNumber')
            self.CostCenterAccountNumber = value_
            self.CostCenterAccountNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'BillToAccountNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'BillToAccountNumber')
            value_ = self.gds_validate_string(value_, node, 'BillToAccountNumber')
            self.BillToAccountNumber = value_
            self.BillToAccountNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'GroundProfile':
            obj_ = GroundProfile.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.GroundProfile = obj_
            obj_.original_tagname_ = 'GroundProfile'
        elif nodeName_ == 'ShippingVolumeDetail':
            obj_ = CustomerShippingVolumeDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ShippingVolumeDetail = obj_
            obj_.original_tagname_ = 'ShippingVolumeDetail'
        elif nodeName_ == 'SuppliesDetail':
            obj_ = CustomerSuppliesDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SuppliesDetail = obj_
            obj_.original_tagname_ = 'SuppliesDetail'
        elif nodeName_ == 'StationNumber' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'StationNumber')
            ival_ = self.gds_validate_integer(ival_, node, 'StationNumber')
            self.StationNumber = ival_
            self.StationNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'StationId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'StationId')
            value_ = self.gds_validate_string(value_, node, 'StationId')
            self.StationId = value_
            self.StationId_nsprefix_ = child_.prefix
        elif nodeName_ == 'AirCargoDetail':
            obj_ = AirCargoDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AirCargoDetail = obj_
            obj_.original_tagname_ = 'AirCargoDetail'
        elif nodeName_ == 'BankDetails':
            obj_ = CustomerProfileBankDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.BankDetails.append(obj_)
            obj_.original_tagname_ = 'BankDetails'
        elif nodeName_ == 'DirectDebitDetails':
            obj_ = DirectDebitDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DirectDebitDetails.append(obj_)
            obj_.original_tagname_ = 'DirectDebitDetails'
        elif nodeName_ == 'VatDetails':
            obj_ = CustomerProfileVATDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.VatDetails.append(obj_)
            obj_.original_tagname_ = 'VatDetails'
        elif nodeName_ == 'InterlineDetail':
            obj_ = InterlineCustomerDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.InterlineDetail = obj_
            obj_.original_tagname_ = 'InterlineDetail'
        elif nodeName_ == 'RevenueDetail':
            obj_ = CustomerRevenueDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RevenueDetail = obj_
            obj_.original_tagname_ = 'RevenueDetail'
        elif nodeName_ == 'DiscountDetails':
            obj_ = CustomerDiscountDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DiscountDetails.append(obj_)
            obj_.original_tagname_ = 'DiscountDetails'
        elif nodeName_ == 'SalesContact':
            obj_ = FedExEmployee.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SalesContact = obj_
            obj_.original_tagname_ = 'SalesContact'
        elif nodeName_ == 'SmartPostAccountDetail':
            obj_ = SmartPostAccountDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SmartPostAccountDetail = obj_
            obj_.original_tagname_ = 'SmartPostAccountDetail'
        elif nodeName_ == 'FranchiseeDetail':
            obj_ = CustomerAccountFranchiseeDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FranchiseeDetail = obj_
            obj_.original_tagname_ = 'FranchiseeDetail'
        elif nodeName_ == 'CreationDate':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.CreationDate = dval_
            self.CreationDate_nsprefix_ = child_.prefix
# end class ExpressProfile


class ExtraHoursMetroAvailabilityPostalDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PostalCode=None, AvailableServices=None, AvailableSpecialServices=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PostalCode = PostalCode
        self.PostalCode_nsprefix_ = None
        if AvailableServices is None:
            self.AvailableServices = []
        else:
            self.AvailableServices = AvailableServices
        self.AvailableServices_nsprefix_ = None
        if AvailableSpecialServices is None:
            self.AvailableSpecialServices = []
        else:
            self.AvailableSpecialServices = AvailableSpecialServices
        self.AvailableSpecialServices_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ExtraHoursMetroAvailabilityPostalDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ExtraHoursMetroAvailabilityPostalDetail.subclass:
            return ExtraHoursMetroAvailabilityPostalDetail.subclass(*args_, **kwargs_)
        else:
            return ExtraHoursMetroAvailabilityPostalDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PostalCode(self):
        return self.PostalCode
    def set_PostalCode(self, PostalCode):
        self.PostalCode = PostalCode
    def get_AvailableServices(self):
        return self.AvailableServices
    def set_AvailableServices(self, AvailableServices):
        self.AvailableServices = AvailableServices
    def add_AvailableServices(self, value):
        self.AvailableServices.append(value)
    def insert_AvailableServices_at(self, index, value):
        self.AvailableServices.insert(index, value)
    def replace_AvailableServices_at(self, index, value):
        self.AvailableServices[index] = value
    def get_AvailableSpecialServices(self):
        return self.AvailableSpecialServices
    def set_AvailableSpecialServices(self, AvailableSpecialServices):
        self.AvailableSpecialServices = AvailableSpecialServices
    def add_AvailableSpecialServices(self, value):
        self.AvailableSpecialServices.append(value)
    def insert_AvailableSpecialServices_at(self, index, value):
        self.AvailableSpecialServices.insert(index, value)
    def replace_AvailableSpecialServices_at(self, index, value):
        self.AvailableSpecialServices[index] = value
    def hasContent_(self):
        if (
            self.PostalCode is not None or
            self.AvailableServices or
            self.AvailableSpecialServices
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ExtraHoursMetroAvailabilityPostalDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ExtraHoursMetroAvailabilityPostalDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ExtraHoursMetroAvailabilityPostalDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ExtraHoursMetroAvailabilityPostalDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ExtraHoursMetroAvailabilityPostalDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ExtraHoursMetroAvailabilityPostalDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ExtraHoursMetroAvailabilityPostalDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PostalCode is not None:
            namespaceprefix_ = self.PostalCode_nsprefix_ + ':' if (UseCapturedNS_ and self.PostalCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPostalCode>%s</%sPostalCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PostalCode), input_name='PostalCode')), namespaceprefix_ , eol_))
        for AvailableServices_ in self.AvailableServices:
            namespaceprefix_ = self.AvailableServices_nsprefix_ + ':' if (UseCapturedNS_ and self.AvailableServices_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAvailableServices>%s</%sAvailableServices>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(AvailableServices_), input_name='AvailableServices')), namespaceprefix_ , eol_))
        for AvailableSpecialServices_ in self.AvailableSpecialServices:
            namespaceprefix_ = self.AvailableSpecialServices_nsprefix_ + ':' if (UseCapturedNS_ and self.AvailableSpecialServices_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAvailableSpecialServices>%s</%sAvailableSpecialServices>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(AvailableSpecialServices_), input_name='AvailableSpecialServices')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PostalCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PostalCode')
            value_ = self.gds_validate_string(value_, node, 'PostalCode')
            self.PostalCode = value_
            self.PostalCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'AvailableServices':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AvailableServices')
            value_ = self.gds_validate_string(value_, node, 'AvailableServices')
            self.AvailableServices.append(value_)
            self.AvailableServices_nsprefix_ = child_.prefix
        elif nodeName_ == 'AvailableSpecialServices':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AvailableSpecialServices')
            value_ = self.gds_validate_string(value_, node, 'AvailableSpecialServices')
            self.AvailableSpecialServices.append(value_)
            self.AvailableSpecialServices_nsprefix_ = child_.prefix
# end class ExtraHoursMetroAvailabilityPostalDetail


class ExtraHoursMetroAvailabilityReply(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, HighestSeverity=None, Notifications=None, TransactionDetail=None, Version=None, RampCode=None, PostalDetails=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.HighestSeverity = HighestSeverity
        self.validate_NotificationSeverityType(self.HighestSeverity)
        self.HighestSeverity_nsprefix_ = "ns"
        if Notifications is None:
            self.Notifications = []
        else:
            self.Notifications = Notifications
        self.Notifications_nsprefix_ = "ns"
        self.TransactionDetail = TransactionDetail
        self.TransactionDetail_nsprefix_ = "ns"
        self.Version = Version
        self.Version_nsprefix_ = "ns"
        self.RampCode = RampCode
        self.RampCode_nsprefix_ = None
        if PostalDetails is None:
            self.PostalDetails = []
        else:
            self.PostalDetails = PostalDetails
        self.PostalDetails_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ExtraHoursMetroAvailabilityReply)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ExtraHoursMetroAvailabilityReply.subclass:
            return ExtraHoursMetroAvailabilityReply.subclass(*args_, **kwargs_)
        else:
            return ExtraHoursMetroAvailabilityReply(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_HighestSeverity(self):
        return self.HighestSeverity
    def set_HighestSeverity(self, HighestSeverity):
        self.HighestSeverity = HighestSeverity
    def get_Notifications(self):
        return self.Notifications
    def set_Notifications(self, Notifications):
        self.Notifications = Notifications
    def add_Notifications(self, value):
        self.Notifications.append(value)
    def insert_Notifications_at(self, index, value):
        self.Notifications.insert(index, value)
    def replace_Notifications_at(self, index, value):
        self.Notifications[index] = value
    def get_TransactionDetail(self):
        return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail):
        self.TransactionDetail = TransactionDetail
    def get_Version(self):
        return self.Version
    def set_Version(self, Version):
        self.Version = Version
    def get_RampCode(self):
        return self.RampCode
    def set_RampCode(self, RampCode):
        self.RampCode = RampCode
    def get_PostalDetails(self):
        return self.PostalDetails
    def set_PostalDetails(self, PostalDetails):
        self.PostalDetails = PostalDetails
    def add_PostalDetails(self, value):
        self.PostalDetails.append(value)
    def insert_PostalDetails_at(self, index, value):
        self.PostalDetails.insert(index, value)
    def replace_PostalDetails_at(self, index, value):
        self.PostalDetails[index] = value
    def validate_NotificationSeverityType(self, value):
        result = True
        # Validate type NotificationSeverityType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ERROR', 'FAILURE', 'NOTE', 'SUCCESS', 'WARNING']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on NotificationSeverityType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.HighestSeverity is not None or
            self.Notifications or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.RampCode is not None or
            self.PostalDetails
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ExtraHoursMetroAvailabilityReply', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ExtraHoursMetroAvailabilityReply')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ExtraHoursMetroAvailabilityReply':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ExtraHoursMetroAvailabilityReply')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ExtraHoursMetroAvailabilityReply', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ExtraHoursMetroAvailabilityReply'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ExtraHoursMetroAvailabilityReply', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.HighestSeverity is not None:
            namespaceprefix_ = self.HighestSeverity_nsprefix_ + ':' if (UseCapturedNS_ and self.HighestSeverity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHighestSeverity>%s</%sHighestSeverity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.HighestSeverity), input_name='HighestSeverity')), namespaceprefix_ , eol_))
        for Notifications_ in self.Notifications:
            namespaceprefix_ = self.Notifications_nsprefix_ + ':' if (UseCapturedNS_ and self.Notifications_nsprefix_) else ''
            Notifications_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Notifications', pretty_print=pretty_print)
        if self.TransactionDetail is not None:
            namespaceprefix_ = self.TransactionDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.TransactionDetail_nsprefix_) else ''
            self.TransactionDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TransactionDetail', pretty_print=pretty_print)
        if self.Version is not None:
            namespaceprefix_ = self.Version_nsprefix_ + ':' if (UseCapturedNS_ and self.Version_nsprefix_) else ''
            self.Version.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Version', pretty_print=pretty_print)
        if self.RampCode is not None:
            namespaceprefix_ = self.RampCode_nsprefix_ + ':' if (UseCapturedNS_ and self.RampCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRampCode>%s</%sRampCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RampCode), input_name='RampCode')), namespaceprefix_ , eol_))
        for PostalDetails_ in self.PostalDetails:
            namespaceprefix_ = self.PostalDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.PostalDetails_nsprefix_) else ''
            PostalDetails_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PostalDetails', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'HighestSeverity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'HighestSeverity')
            value_ = self.gds_validate_string(value_, node, 'HighestSeverity')
            self.HighestSeverity = value_
            self.HighestSeverity_nsprefix_ = child_.prefix
            # validate type NotificationSeverityType
            self.validate_NotificationSeverityType(self.HighestSeverity)
        elif nodeName_ == 'Notifications':
            obj_ = Notification.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Notifications.append(obj_)
            obj_.original_tagname_ = 'Notifications'
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TransactionDetail = obj_
            obj_.original_tagname_ = 'TransactionDetail'
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Version = obj_
            obj_.original_tagname_ = 'Version'
        elif nodeName_ == 'RampCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RampCode')
            value_ = self.gds_validate_string(value_, node, 'RampCode')
            self.RampCode = value_
            self.RampCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'PostalDetails':
            obj_ = ExtraHoursMetroAvailabilityPostalDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PostalDetails.append(obj_)
            obj_.original_tagname_ = 'PostalDetails'
# end class ExtraHoursMetroAvailabilityReply


class ExtraHoursMetroAvailabilityRequest(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, WebAuthenticationDetail=None, ClientDetail=None, UserDetail=None, TransactionDetail=None, Version=None, ApplicationId=None, PostalCode=None, RampCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.WebAuthenticationDetail = WebAuthenticationDetail
        self.WebAuthenticationDetail_nsprefix_ = "ns"
        self.ClientDetail = ClientDetail
        self.ClientDetail_nsprefix_ = "ns"
        self.UserDetail = UserDetail
        self.UserDetail_nsprefix_ = "ns"
        self.TransactionDetail = TransactionDetail
        self.TransactionDetail_nsprefix_ = "ns"
        self.Version = Version
        self.Version_nsprefix_ = "ns"
        self.ApplicationId = ApplicationId
        self.ApplicationId_nsprefix_ = None
        self.PostalCode = PostalCode
        self.PostalCode_nsprefix_ = None
        self.RampCode = RampCode
        self.RampCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ExtraHoursMetroAvailabilityRequest)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ExtraHoursMetroAvailabilityRequest.subclass:
            return ExtraHoursMetroAvailabilityRequest.subclass(*args_, **kwargs_)
        else:
            return ExtraHoursMetroAvailabilityRequest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_WebAuthenticationDetail(self):
        return self.WebAuthenticationDetail
    def set_WebAuthenticationDetail(self, WebAuthenticationDetail):
        self.WebAuthenticationDetail = WebAuthenticationDetail
    def get_ClientDetail(self):
        return self.ClientDetail
    def set_ClientDetail(self, ClientDetail):
        self.ClientDetail = ClientDetail
    def get_UserDetail(self):
        return self.UserDetail
    def set_UserDetail(self, UserDetail):
        self.UserDetail = UserDetail
    def get_TransactionDetail(self):
        return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail):
        self.TransactionDetail = TransactionDetail
    def get_Version(self):
        return self.Version
    def set_Version(self, Version):
        self.Version = Version
    def get_ApplicationId(self):
        return self.ApplicationId
    def set_ApplicationId(self, ApplicationId):
        self.ApplicationId = ApplicationId
    def get_PostalCode(self):
        return self.PostalCode
    def set_PostalCode(self, PostalCode):
        self.PostalCode = PostalCode
    def get_RampCode(self):
        return self.RampCode
    def set_RampCode(self, RampCode):
        self.RampCode = RampCode
    def hasContent_(self):
        if (
            self.WebAuthenticationDetail is not None or
            self.ClientDetail is not None or
            self.UserDetail is not None or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.ApplicationId is not None or
            self.PostalCode is not None or
            self.RampCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ExtraHoursMetroAvailabilityRequest', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ExtraHoursMetroAvailabilityRequest')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ExtraHoursMetroAvailabilityRequest':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ExtraHoursMetroAvailabilityRequest')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ExtraHoursMetroAvailabilityRequest', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ExtraHoursMetroAvailabilityRequest'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ExtraHoursMetroAvailabilityRequest', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.WebAuthenticationDetail is not None:
            namespaceprefix_ = self.WebAuthenticationDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.WebAuthenticationDetail_nsprefix_) else ''
            self.WebAuthenticationDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='WebAuthenticationDetail', pretty_print=pretty_print)
        if self.ClientDetail is not None:
            namespaceprefix_ = self.ClientDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.ClientDetail_nsprefix_) else ''
            self.ClientDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ClientDetail', pretty_print=pretty_print)
        if self.UserDetail is not None:
            namespaceprefix_ = self.UserDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.UserDetail_nsprefix_) else ''
            self.UserDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='UserDetail', pretty_print=pretty_print)
        if self.TransactionDetail is not None:
            namespaceprefix_ = self.TransactionDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.TransactionDetail_nsprefix_) else ''
            self.TransactionDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TransactionDetail', pretty_print=pretty_print)
        if self.Version is not None:
            namespaceprefix_ = self.Version_nsprefix_ + ':' if (UseCapturedNS_ and self.Version_nsprefix_) else ''
            self.Version.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Version', pretty_print=pretty_print)
        if self.ApplicationId is not None:
            namespaceprefix_ = self.ApplicationId_nsprefix_ + ':' if (UseCapturedNS_ and self.ApplicationId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sApplicationId>%s</%sApplicationId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ApplicationId), input_name='ApplicationId')), namespaceprefix_ , eol_))
        if self.PostalCode is not None:
            namespaceprefix_ = self.PostalCode_nsprefix_ + ':' if (UseCapturedNS_ and self.PostalCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPostalCode>%s</%sPostalCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PostalCode), input_name='PostalCode')), namespaceprefix_ , eol_))
        if self.RampCode is not None:
            namespaceprefix_ = self.RampCode_nsprefix_ + ':' if (UseCapturedNS_ and self.RampCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRampCode>%s</%sRampCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RampCode), input_name='RampCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'WebAuthenticationDetail':
            obj_ = WebAuthenticationDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.WebAuthenticationDetail = obj_
            obj_.original_tagname_ = 'WebAuthenticationDetail'
        elif nodeName_ == 'ClientDetail':
            obj_ = ClientDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ClientDetail = obj_
            obj_.original_tagname_ = 'ClientDetail'
        elif nodeName_ == 'UserDetail':
            obj_ = UserDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.UserDetail = obj_
            obj_.original_tagname_ = 'UserDetail'
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TransactionDetail = obj_
            obj_.original_tagname_ = 'TransactionDetail'
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Version = obj_
            obj_.original_tagname_ = 'Version'
        elif nodeName_ == 'ApplicationId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ApplicationId')
            value_ = self.gds_validate_string(value_, node, 'ApplicationId')
            self.ApplicationId = value_
            self.ApplicationId_nsprefix_ = child_.prefix
        elif nodeName_ == 'PostalCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PostalCode')
            value_ = self.gds_validate_string(value_, node, 'PostalCode')
            self.PostalCode = value_
            self.PostalCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'RampCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RampCode')
            value_ = self.gds_validate_string(value_, node, 'RampCode')
            self.RampCode = value_
            self.RampCode_nsprefix_ = child_.prefix
# end class ExtraHoursMetroAvailabilityRequest


class ExtraLaborDetail(GeneratedsSuper):
    """Specification for labor time spent handling shipment."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Duration=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Duration = Duration
        self.Duration_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ExtraLaborDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ExtraLaborDetail.subclass:
            return ExtraLaborDetail.subclass(*args_, **kwargs_)
        else:
            return ExtraLaborDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Duration(self):
        return self.Duration
    def set_Duration(self, Duration):
        self.Duration = Duration
    def hasContent_(self):
        if (
            self.Duration is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ExtraLaborDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ExtraLaborDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ExtraLaborDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ExtraLaborDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ExtraLaborDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ExtraLaborDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ExtraLaborDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Duration is not None:
            namespaceprefix_ = self.Duration_nsprefix_ + ':' if (UseCapturedNS_ and self.Duration_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDuration>%s</%sDuration>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Duration), input_name='Duration')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Duration':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Duration')
            value_ = self.gds_validate_string(value_, node, 'Duration')
            self.Duration = value_
            self.Duration_nsprefix_ = child_.prefix
# end class ExtraLaborDetail


class FedExCommodityDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Name=None, Description=None, Primary=None, Types=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Name = Name
        self.Name_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
        self.Primary = Primary
        self.Primary_nsprefix_ = None
        if Types is None:
            self.Types = []
        else:
            self.Types = Types
        self.Types_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FedExCommodityDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FedExCommodityDetail.subclass:
            return FedExCommodityDetail.subclass(*args_, **kwargs_)
        else:
            return FedExCommodityDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Name(self):
        return self.Name
    def set_Name(self, Name):
        self.Name = Name
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def get_Primary(self):
        return self.Primary
    def set_Primary(self, Primary):
        self.Primary = Primary
    def get_Types(self):
        return self.Types
    def set_Types(self, Types):
        self.Types = Types
    def add_Types(self, value):
        self.Types.append(value)
    def insert_Types_at(self, index, value):
        self.Types.insert(index, value)
    def replace_Types_at(self, index, value):
        self.Types[index] = value
    def validate_FedExCommodityType(self, value):
        result = True
        # Validate type FedExCommodityType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['DANGEROUS_GOODS', 'DOCUMENT']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on FedExCommodityType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Name is not None or
            self.Description is not None or
            self.Primary is not None or
            self.Types
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FedExCommodityDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FedExCommodityDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'FedExCommodityDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FedExCommodityDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='FedExCommodityDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='FedExCommodityDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FedExCommodityDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Name is not None:
            namespaceprefix_ = self.Name_nsprefix_ + ':' if (UseCapturedNS_ and self.Name_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sName>%s</%sName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
        if self.Primary is not None:
            namespaceprefix_ = self.Primary_nsprefix_ + ':' if (UseCapturedNS_ and self.Primary_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPrimary>%s</%sPrimary>%s' % (namespaceprefix_ , self.gds_format_boolean(self.Primary, input_name='Primary'), namespaceprefix_ , eol_))
        for Types_ in self.Types:
            namespaceprefix_ = self.Types_nsprefix_ + ':' if (UseCapturedNS_ and self.Types_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTypes>%s</%sTypes>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Types_), input_name='Types')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Name':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Name')
            value_ = self.gds_validate_string(value_, node, 'Name')
            self.Name = value_
            self.Name_nsprefix_ = child_.prefix
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
        elif nodeName_ == 'Primary':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'Primary')
            ival_ = self.gds_validate_boolean(ival_, node, 'Primary')
            self.Primary = ival_
            self.Primary_nsprefix_ = child_.prefix
        elif nodeName_ == 'Types':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Types')
            value_ = self.gds_validate_string(value_, node, 'Types')
            self.Types.append(value_)
            self.Types_nsprefix_ = child_.prefix
            # validate type FedExCommodityType
            self.validate_FedExCommodityType(self.Types[-1])
# end class FedExCommodityDetail


class FedExEmployee(GeneratedsSuper):
    """Specifies the details about a FedEx employee."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, EmployeeId=None, Contact=None, OperatingCompany=None, CallCenterAssignedTo=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.EmployeeId = EmployeeId
        self.EmployeeId_nsprefix_ = None
        self.Contact = Contact
        self.Contact_nsprefix_ = "ns"
        self.OperatingCompany = OperatingCompany
        self.validate_OperatingCompanyType(self.OperatingCompany)
        self.OperatingCompany_nsprefix_ = "ns"
        self.CallCenterAssignedTo = CallCenterAssignedTo
        self.CallCenterAssignedTo_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FedExEmployee)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FedExEmployee.subclass:
            return FedExEmployee.subclass(*args_, **kwargs_)
        else:
            return FedExEmployee(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_EmployeeId(self):
        return self.EmployeeId
    def set_EmployeeId(self, EmployeeId):
        self.EmployeeId = EmployeeId
    def get_Contact(self):
        return self.Contact
    def set_Contact(self, Contact):
        self.Contact = Contact
    def get_OperatingCompany(self):
        return self.OperatingCompany
    def set_OperatingCompany(self, OperatingCompany):
        self.OperatingCompany = OperatingCompany
    def get_CallCenterAssignedTo(self):
        return self.CallCenterAssignedTo
    def set_CallCenterAssignedTo(self, CallCenterAssignedTo):
        self.CallCenterAssignedTo = CallCenterAssignedTo
    def validate_OperatingCompanyType(self, value):
        result = True
        # Validate type OperatingCompanyType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FEDEX_CARGO', 'FEDEX_CORPORATE_SERVICES', 'FEDEX_CORPORATION', 'FEDEX_CUSTOMER_INFORMATION_SYSTEMS', 'FEDEX_CUSTOM_CRITICAL', 'FEDEX_EXPRESS', 'FEDEX_FREIGHT', 'FEDEX_GROUND', 'FEDEX_KINKOS', 'FEDEX_OFFICE', 'FEDEX_SERVICES', 'FEDEX_TRADE_NETWORKS']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on OperatingCompanyType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.EmployeeId is not None or
            self.Contact is not None or
            self.OperatingCompany is not None or
            self.CallCenterAssignedTo is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FedExEmployee', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FedExEmployee')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'FedExEmployee':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FedExEmployee')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='FedExEmployee', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='FedExEmployee'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FedExEmployee', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.EmployeeId is not None:
            namespaceprefix_ = self.EmployeeId_nsprefix_ + ':' if (UseCapturedNS_ and self.EmployeeId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEmployeeId>%s</%sEmployeeId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EmployeeId), input_name='EmployeeId')), namespaceprefix_ , eol_))
        if self.Contact is not None:
            namespaceprefix_ = self.Contact_nsprefix_ + ':' if (UseCapturedNS_ and self.Contact_nsprefix_) else ''
            self.Contact.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Contact', pretty_print=pretty_print)
        if self.OperatingCompany is not None:
            namespaceprefix_ = self.OperatingCompany_nsprefix_ + ':' if (UseCapturedNS_ and self.OperatingCompany_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOperatingCompany>%s</%sOperatingCompany>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OperatingCompany), input_name='OperatingCompany')), namespaceprefix_ , eol_))
        if self.CallCenterAssignedTo is not None:
            namespaceprefix_ = self.CallCenterAssignedTo_nsprefix_ + ':' if (UseCapturedNS_ and self.CallCenterAssignedTo_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCallCenterAssignedTo>%s</%sCallCenterAssignedTo>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CallCenterAssignedTo), input_name='CallCenterAssignedTo')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'EmployeeId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EmployeeId')
            value_ = self.gds_validate_string(value_, node, 'EmployeeId')
            self.EmployeeId = value_
            self.EmployeeId_nsprefix_ = child_.prefix
        elif nodeName_ == 'Contact':
            obj_ = Contact.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Contact = obj_
            obj_.original_tagname_ = 'Contact'
        elif nodeName_ == 'OperatingCompany':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'OperatingCompany')
            value_ = self.gds_validate_string(value_, node, 'OperatingCompany')
            self.OperatingCompany = value_
            self.OperatingCompany_nsprefix_ = child_.prefix
            # validate type OperatingCompanyType
            self.validate_OperatingCompanyType(self.OperatingCompany)
        elif nodeName_ == 'CallCenterAssignedTo':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CallCenterAssignedTo')
            value_ = self.gds_validate_string(value_, node, 'CallCenterAssignedTo')
            self.CallCenterAssignedTo = value_
            self.CallCenterAssignedTo_nsprefix_ = child_.prefix
# end class FedExEmployee


class FlatbedTrailerDetail(GeneratedsSuper):
    """Specifies the optional features/characteristics requested for a Freight
    shipment utilizing a flatbed trailer."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Options=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Options is None:
            self.Options = []
        else:
            self.Options = Options
        self.Options_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FlatbedTrailerDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FlatbedTrailerDetail.subclass:
            return FlatbedTrailerDetail.subclass(*args_, **kwargs_)
        else:
            return FlatbedTrailerDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Options(self):
        return self.Options
    def set_Options(self, Options):
        self.Options = Options
    def add_Options(self, value):
        self.Options.append(value)
    def insert_Options_at(self, index, value):
        self.Options.insert(index, value)
    def replace_Options_at(self, index, value):
        self.Options[index] = value
    def validate_FlatbedTrailerOption(self, value):
        result = True
        # Validate type FlatbedTrailerOption, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['OVER_DIMENSION', 'TARP']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on FlatbedTrailerOption' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Options
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FlatbedTrailerDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FlatbedTrailerDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'FlatbedTrailerDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FlatbedTrailerDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='FlatbedTrailerDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='FlatbedTrailerDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FlatbedTrailerDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Options_ in self.Options:
            namespaceprefix_ = self.Options_nsprefix_ + ':' if (UseCapturedNS_ and self.Options_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOptions>%s</%sOptions>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Options_), input_name='Options')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Options':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Options')
            value_ = self.gds_validate_string(value_, node, 'Options')
            self.Options.append(value_)
            self.Options_nsprefix_ = child_.prefix
            # validate type FlatbedTrailerOption
            self.validate_FlatbedTrailerOption(self.Options[-1])
# end class FlatbedTrailerDetail


class FreightAccountDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, AccountNumber=None, Scac=None, Type=None, Tariff=None, Status=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.AccountNumber = AccountNumber
        self.AccountNumber_nsprefix_ = None
        self.Scac = Scac
        self.Scac_nsprefix_ = None
        self.Type = Type
        self.validate_FreightAccountType(self.Type)
        self.Type_nsprefix_ = "ns"
        self.Tariff = Tariff
        self.validate_FreightTariffType(self.Tariff)
        self.Tariff_nsprefix_ = "ns"
        self.Status = Status
        self.validate_FreightAccountStatusType(self.Status)
        self.Status_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FreightAccountDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FreightAccountDetail.subclass:
            return FreightAccountDetail.subclass(*args_, **kwargs_)
        else:
            return FreightAccountDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_AccountNumber(self):
        return self.AccountNumber
    def set_AccountNumber(self, AccountNumber):
        self.AccountNumber = AccountNumber
    def get_Scac(self):
        return self.Scac
    def set_Scac(self, Scac):
        self.Scac = Scac
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_Tariff(self):
        return self.Tariff
    def set_Tariff(self, Tariff):
        self.Tariff = Tariff
    def get_Status(self):
        return self.Status
    def set_Status(self, Status):
        self.Status = Status
    def validate_FreightAccountType(self, value):
        result = True
        # Validate type FreightAccountType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BILL_TO', 'CORPORATE_NATIONAL', 'INTERLINE', 'SHIPPER']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on FreightAccountType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_FreightTariffType(self, value):
        result = True
        # Validate type FreightTariffType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BASE_RATE', 'CUSTOMER_PRICING', 'PRICING_EXPIRED']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on FreightTariffType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_FreightAccountStatusType(self, value):
        result = True
        # Validate type FreightAccountStatusType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ESTABLISHED', 'SCHEDULED_FOR_DELETION', 'UNESTABLISHED']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on FreightAccountStatusType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.AccountNumber is not None or
            self.Scac is not None or
            self.Type is not None or
            self.Tariff is not None or
            self.Status is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightAccountDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FreightAccountDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'FreightAccountDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FreightAccountDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='FreightAccountDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='FreightAccountDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightAccountDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AccountNumber is not None:
            namespaceprefix_ = self.AccountNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.AccountNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAccountNumber>%s</%sAccountNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AccountNumber), input_name='AccountNumber')), namespaceprefix_ , eol_))
        if self.Scac is not None:
            namespaceprefix_ = self.Scac_nsprefix_ + ':' if (UseCapturedNS_ and self.Scac_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sScac>%s</%sScac>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Scac), input_name='Scac')), namespaceprefix_ , eol_))
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.Tariff is not None:
            namespaceprefix_ = self.Tariff_nsprefix_ + ':' if (UseCapturedNS_ and self.Tariff_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTariff>%s</%sTariff>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Tariff), input_name='Tariff')), namespaceprefix_ , eol_))
        if self.Status is not None:
            namespaceprefix_ = self.Status_nsprefix_ + ':' if (UseCapturedNS_ and self.Status_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStatus>%s</%sStatus>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Status), input_name='Status')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'AccountNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AccountNumber')
            value_ = self.gds_validate_string(value_, node, 'AccountNumber')
            self.AccountNumber = value_
            self.AccountNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'Scac':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Scac')
            value_ = self.gds_validate_string(value_, node, 'Scac')
            self.Scac = value_
            self.Scac_nsprefix_ = child_.prefix
        elif nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type FreightAccountType
            self.validate_FreightAccountType(self.Type)
        elif nodeName_ == 'Tariff':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Tariff')
            value_ = self.gds_validate_string(value_, node, 'Tariff')
            self.Tariff = value_
            self.Tariff_nsprefix_ = child_.prefix
            # validate type FreightTariffType
            self.validate_FreightTariffType(self.Tariff)
        elif nodeName_ == 'Status':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Status')
            value_ = self.gds_validate_string(value_, node, 'Status')
            self.Status = value_
            self.Status_nsprefix_ = child_.prefix
            # validate type FreightAccountStatusType
            self.validate_FreightAccountStatusType(self.Status)
# end class FreightAccountDetail


class FreightAddressLabelDetail(GeneratedsSuper):
    """Data required to produce the Freight handling-unit-level address labels.
    Note that the number of UNIQUE labels (the N as in 1 of N, 2 of N,
    etc.) is determined by total handling units."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Format=None, Copies=None, StartingPosition=None, DocTabContent=None, CustomContentPosition=None, CustomContent=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Format = Format
        self.Format_nsprefix_ = "ns"
        self.Copies = Copies
        self.Copies_nsprefix_ = None
        self.StartingPosition = StartingPosition
        self.validate_PageQuadrantType(self.StartingPosition)
        self.StartingPosition_nsprefix_ = "ns"
        self.DocTabContent = DocTabContent
        self.DocTabContent_nsprefix_ = "ns"
        self.CustomContentPosition = CustomContentPosition
        self.validate_RelativeVerticalPositionType(self.CustomContentPosition)
        self.CustomContentPosition_nsprefix_ = "ns"
        self.CustomContent = CustomContent
        self.CustomContent_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FreightAddressLabelDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FreightAddressLabelDetail.subclass:
            return FreightAddressLabelDetail.subclass(*args_, **kwargs_)
        else:
            return FreightAddressLabelDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Format(self):
        return self.Format
    def set_Format(self, Format):
        self.Format = Format
    def get_Copies(self):
        return self.Copies
    def set_Copies(self, Copies):
        self.Copies = Copies
    def get_StartingPosition(self):
        return self.StartingPosition
    def set_StartingPosition(self, StartingPosition):
        self.StartingPosition = StartingPosition
    def get_DocTabContent(self):
        return self.DocTabContent
    def set_DocTabContent(self, DocTabContent):
        self.DocTabContent = DocTabContent
    def get_CustomContentPosition(self):
        return self.CustomContentPosition
    def set_CustomContentPosition(self, CustomContentPosition):
        self.CustomContentPosition = CustomContentPosition
    def get_CustomContent(self):
        return self.CustomContent
    def set_CustomContent(self, CustomContent):
        self.CustomContent = CustomContent
    def validate_PageQuadrantType(self, value):
        result = True
        # Validate type PageQuadrantType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BOTTOM_LEFT', 'BOTTOM_RIGHT', 'TOP_LEFT', 'TOP_RIGHT']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on PageQuadrantType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_RelativeVerticalPositionType(self, value):
        result = True
        # Validate type RelativeVerticalPositionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ABOVE', 'BELOW']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on RelativeVerticalPositionType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Format is not None or
            self.Copies is not None or
            self.StartingPosition is not None or
            self.DocTabContent is not None or
            self.CustomContentPosition is not None or
            self.CustomContent is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightAddressLabelDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FreightAddressLabelDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'FreightAddressLabelDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FreightAddressLabelDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='FreightAddressLabelDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='FreightAddressLabelDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightAddressLabelDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Format is not None:
            namespaceprefix_ = self.Format_nsprefix_ + ':' if (UseCapturedNS_ and self.Format_nsprefix_) else ''
            self.Format.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Format', pretty_print=pretty_print)
        if self.Copies is not None:
            namespaceprefix_ = self.Copies_nsprefix_ + ':' if (UseCapturedNS_ and self.Copies_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCopies>%s</%sCopies>%s' % (namespaceprefix_ , self.gds_format_integer(self.Copies, input_name='Copies'), namespaceprefix_ , eol_))
        if self.StartingPosition is not None:
            namespaceprefix_ = self.StartingPosition_nsprefix_ + ':' if (UseCapturedNS_ and self.StartingPosition_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStartingPosition>%s</%sStartingPosition>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.StartingPosition), input_name='StartingPosition')), namespaceprefix_ , eol_))
        if self.DocTabContent is not None:
            namespaceprefix_ = self.DocTabContent_nsprefix_ + ':' if (UseCapturedNS_ and self.DocTabContent_nsprefix_) else ''
            self.DocTabContent.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DocTabContent', pretty_print=pretty_print)
        if self.CustomContentPosition is not None:
            namespaceprefix_ = self.CustomContentPosition_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomContentPosition_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCustomContentPosition>%s</%sCustomContentPosition>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CustomContentPosition), input_name='CustomContentPosition')), namespaceprefix_ , eol_))
        if self.CustomContent is not None:
            namespaceprefix_ = self.CustomContent_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomContent_nsprefix_) else ''
            self.CustomContent.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CustomContent', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Format':
            obj_ = ShippingDocumentFormat.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Format = obj_
            obj_.original_tagname_ = 'Format'
        elif nodeName_ == 'Copies' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'Copies')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'Copies')
            self.Copies = ival_
            self.Copies_nsprefix_ = child_.prefix
        elif nodeName_ == 'StartingPosition':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'StartingPosition')
            value_ = self.gds_validate_string(value_, node, 'StartingPosition')
            self.StartingPosition = value_
            self.StartingPosition_nsprefix_ = child_.prefix
            # validate type PageQuadrantType
            self.validate_PageQuadrantType(self.StartingPosition)
        elif nodeName_ == 'DocTabContent':
            obj_ = DocTabContent.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DocTabContent = obj_
            obj_.original_tagname_ = 'DocTabContent'
        elif nodeName_ == 'CustomContentPosition':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CustomContentPosition')
            value_ = self.gds_validate_string(value_, node, 'CustomContentPosition')
            self.CustomContentPosition = value_
            self.CustomContentPosition_nsprefix_ = child_.prefix
            # validate type RelativeVerticalPositionType
            self.validate_RelativeVerticalPositionType(self.CustomContentPosition)
        elif nodeName_ == 'CustomContent':
            obj_ = CustomLabelDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CustomContent = obj_
            obj_.original_tagname_ = 'CustomContent'
# end class FreightAddressLabelDetail


class FreightCommitDetail(GeneratedsSuper):
    """Information about the Freight Service Centers associated with this
    shipment."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, OriginDetail=None, DestinationDetail=None, ProductTypeCode=None, TotalDistance=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.OriginDetail = OriginDetail
        self.OriginDetail_nsprefix_ = "ns"
        self.DestinationDetail = DestinationDetail
        self.DestinationDetail_nsprefix_ = "ns"
        self.ProductTypeCode = ProductTypeCode
        self.ProductTypeCode_nsprefix_ = None
        self.TotalDistance = TotalDistance
        self.TotalDistance_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FreightCommitDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FreightCommitDetail.subclass:
            return FreightCommitDetail.subclass(*args_, **kwargs_)
        else:
            return FreightCommitDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_OriginDetail(self):
        return self.OriginDetail
    def set_OriginDetail(self, OriginDetail):
        self.OriginDetail = OriginDetail
    def get_DestinationDetail(self):
        return self.DestinationDetail
    def set_DestinationDetail(self, DestinationDetail):
        self.DestinationDetail = DestinationDetail
    def get_ProductTypeCode(self):
        return self.ProductTypeCode
    def set_ProductTypeCode(self, ProductTypeCode):
        self.ProductTypeCode = ProductTypeCode
    def get_TotalDistance(self):
        return self.TotalDistance
    def set_TotalDistance(self, TotalDistance):
        self.TotalDistance = TotalDistance
    def hasContent_(self):
        if (
            self.OriginDetail is not None or
            self.DestinationDetail is not None or
            self.ProductTypeCode is not None or
            self.TotalDistance is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightCommitDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FreightCommitDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'FreightCommitDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FreightCommitDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='FreightCommitDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='FreightCommitDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightCommitDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.OriginDetail is not None:
            namespaceprefix_ = self.OriginDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.OriginDetail_nsprefix_) else ''
            self.OriginDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='OriginDetail', pretty_print=pretty_print)
        if self.DestinationDetail is not None:
            namespaceprefix_ = self.DestinationDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.DestinationDetail_nsprefix_) else ''
            self.DestinationDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DestinationDetail', pretty_print=pretty_print)
        if self.ProductTypeCode is not None:
            namespaceprefix_ = self.ProductTypeCode_nsprefix_ + ':' if (UseCapturedNS_ and self.ProductTypeCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProductTypeCode>%s</%sProductTypeCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ProductTypeCode), input_name='ProductTypeCode')), namespaceprefix_ , eol_))
        if self.TotalDistance is not None:
            namespaceprefix_ = self.TotalDistance_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalDistance_nsprefix_) else ''
            self.TotalDistance.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TotalDistance', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'OriginDetail':
            obj_ = FreightServiceCenterDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.OriginDetail = obj_
            obj_.original_tagname_ = 'OriginDetail'
        elif nodeName_ == 'DestinationDetail':
            obj_ = FreightServiceCenterDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DestinationDetail = obj_
            obj_.original_tagname_ = 'DestinationDetail'
        elif nodeName_ == 'ProductTypeCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ProductTypeCode')
            value_ = self.gds_validate_string(value_, node, 'ProductTypeCode')
            self.ProductTypeCode = value_
            self.ProductTypeCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'TotalDistance':
            obj_ = Distance.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TotalDistance = obj_
            obj_.original_tagname_ = 'TotalDistance'
# end class FreightCommitDetail


class FreightGuaranteeDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, Date=None, Time=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.validate_FreightGuaranteeType(self.Type)
        self.Type_nsprefix_ = "ns"
        if isinstance(Date, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Date, '%Y-%m-%d').date()
        else:
            initvalue_ = Date
        self.Date = initvalue_
        self.Date_nsprefix_ = None
        if isinstance(Time, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Time, '%H:%M:%S').time()
        else:
            initvalue_ = Time
        self.Time = initvalue_
        self.Time_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FreightGuaranteeDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FreightGuaranteeDetail.subclass:
            return FreightGuaranteeDetail.subclass(*args_, **kwargs_)
        else:
            return FreightGuaranteeDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_Date(self):
        return self.Date
    def set_Date(self, Date):
        self.Date = Date
    def get_Time(self):
        return self.Time
    def set_Time(self, Time):
        self.Time = Time
    def validate_FreightGuaranteeType(self, value):
        result = True
        # Validate type FreightGuaranteeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['GUARANTEED_DATE', 'GUARANTEED_MORNING', 'GUARANTEED_TIME']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on FreightGuaranteeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Type is not None or
            self.Date is not None or
            self.Time is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightGuaranteeDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FreightGuaranteeDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'FreightGuaranteeDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FreightGuaranteeDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='FreightGuaranteeDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='FreightGuaranteeDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightGuaranteeDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.Date is not None:
            namespaceprefix_ = self.Date_nsprefix_ + ':' if (UseCapturedNS_ and self.Date_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDate>%s</%sDate>%s' % (namespaceprefix_ , self.gds_format_date(self.Date, input_name='Date'), namespaceprefix_ , eol_))
        if self.Time is not None:
            namespaceprefix_ = self.Time_nsprefix_ + ':' if (UseCapturedNS_ and self.Time_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTime>%s</%sTime>%s' % (namespaceprefix_ , self.gds_format_time(self.Time, input_name='Time'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type FreightGuaranteeType
            self.validate_FreightGuaranteeType(self.Type)
        elif nodeName_ == 'Date':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Date = dval_
            self.Date_nsprefix_ = child_.prefix
        elif nodeName_ == 'Time':
            sval_ = child_.text
            dval_ = self.gds_parse_time(sval_)
            self.Time = dval_
            self.Time_nsprefix_ = child_.prefix
# end class FreightGuaranteeDetail


class FreightProfile(GeneratedsSuper):
    """Specifies the details for a Freight profile."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Contacts=None, Aliases=None, PremierType=None, Tins=None, ProfileStatus=None, CreationUserGroup=None, ManagementStatus=None, RevenueDetail=None, FreightAccountDetail=None, CreditStatusDetail=None, AccountGroups=None, CreationDate=None, Attributes=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Contacts is None:
            self.Contacts = []
        else:
            self.Contacts = Contacts
        self.Contacts_nsprefix_ = "ns"
        if Aliases is None:
            self.Aliases = []
        else:
            self.Aliases = Aliases
        self.Aliases_nsprefix_ = "ns"
        self.PremierType = PremierType
        self.validate_PremierType(self.PremierType)
        self.PremierType_nsprefix_ = "ns"
        if Tins is None:
            self.Tins = []
        else:
            self.Tins = Tins
        self.Tins_nsprefix_ = "ns"
        self.ProfileStatus = ProfileStatus
        self.validate_StatusType(self.ProfileStatus)
        self.ProfileStatus_nsprefix_ = "ns"
        self.CreationUserGroup = CreationUserGroup
        self.CreationUserGroup_nsprefix_ = None
        self.ManagementStatus = ManagementStatus
        self.validate_CustomerAccountManagementStatusType(self.ManagementStatus)
        self.ManagementStatus_nsprefix_ = "ns"
        self.RevenueDetail = RevenueDetail
        self.RevenueDetail_nsprefix_ = "ns"
        self.FreightAccountDetail = FreightAccountDetail
        self.FreightAccountDetail_nsprefix_ = "ns"
        self.CreditStatusDetail = CreditStatusDetail
        self.CreditStatusDetail_nsprefix_ = "ns"
        if AccountGroups is None:
            self.AccountGroups = []
        else:
            self.AccountGroups = AccountGroups
        self.AccountGroups_nsprefix_ = "ns"
        if isinstance(CreationDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(CreationDate, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = CreationDate
        self.CreationDate = initvalue_
        self.CreationDate_nsprefix_ = None
        if Attributes is None:
            self.Attributes = []
        else:
            self.Attributes = Attributes
        self.Attributes_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FreightProfile)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FreightProfile.subclass:
            return FreightProfile.subclass(*args_, **kwargs_)
        else:
            return FreightProfile(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Contacts(self):
        return self.Contacts
    def set_Contacts(self, Contacts):
        self.Contacts = Contacts
    def add_Contacts(self, value):
        self.Contacts.append(value)
    def insert_Contacts_at(self, index, value):
        self.Contacts.insert(index, value)
    def replace_Contacts_at(self, index, value):
        self.Contacts[index] = value
    def get_Aliases(self):
        return self.Aliases
    def set_Aliases(self, Aliases):
        self.Aliases = Aliases
    def add_Aliases(self, value):
        self.Aliases.append(value)
    def insert_Aliases_at(self, index, value):
        self.Aliases.insert(index, value)
    def replace_Aliases_at(self, index, value):
        self.Aliases[index] = value
    def get_PremierType(self):
        return self.PremierType
    def set_PremierType(self, PremierType):
        self.PremierType = PremierType
    def get_Tins(self):
        return self.Tins
    def set_Tins(self, Tins):
        self.Tins = Tins
    def add_Tins(self, value):
        self.Tins.append(value)
    def insert_Tins_at(self, index, value):
        self.Tins.insert(index, value)
    def replace_Tins_at(self, index, value):
        self.Tins[index] = value
    def get_ProfileStatus(self):
        return self.ProfileStatus
    def set_ProfileStatus(self, ProfileStatus):
        self.ProfileStatus = ProfileStatus
    def get_CreationUserGroup(self):
        return self.CreationUserGroup
    def set_CreationUserGroup(self, CreationUserGroup):
        self.CreationUserGroup = CreationUserGroup
    def get_ManagementStatus(self):
        return self.ManagementStatus
    def set_ManagementStatus(self, ManagementStatus):
        self.ManagementStatus = ManagementStatus
    def get_RevenueDetail(self):
        return self.RevenueDetail
    def set_RevenueDetail(self, RevenueDetail):
        self.RevenueDetail = RevenueDetail
    def get_FreightAccountDetail(self):
        return self.FreightAccountDetail
    def set_FreightAccountDetail(self, FreightAccountDetail):
        self.FreightAccountDetail = FreightAccountDetail
    def get_CreditStatusDetail(self):
        return self.CreditStatusDetail
    def set_CreditStatusDetail(self, CreditStatusDetail):
        self.CreditStatusDetail = CreditStatusDetail
    def get_AccountGroups(self):
        return self.AccountGroups
    def set_AccountGroups(self, AccountGroups):
        self.AccountGroups = AccountGroups
    def add_AccountGroups(self, value):
        self.AccountGroups.append(value)
    def insert_AccountGroups_at(self, index, value):
        self.AccountGroups.insert(index, value)
    def replace_AccountGroups_at(self, index, value):
        self.AccountGroups[index] = value
    def get_CreationDate(self):
        return self.CreationDate
    def set_CreationDate(self, CreationDate):
        self.CreationDate = CreationDate
    def get_Attributes(self):
        return self.Attributes
    def set_Attributes(self, Attributes):
        self.Attributes = Attributes
    def add_Attributes(self, value):
        self.Attributes.append(value)
    def insert_Attributes_at(self, index, value):
        self.Attributes.insert(index, value)
    def replace_Attributes_at(self, index, value):
        self.Attributes[index] = value
    def validate_PremierType(self, value):
        result = True
        # Validate type PremierType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BRONZE_ACCOUNT', 'FEDEX_ONE_CALL_CUSTOMER', 'GOLD_ACCOUNT', 'SILVER_ACCOUNT', 'SPECIAL_CUSTOMER_ROUTING']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on PremierType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_StatusType(self, value):
        result = True
        # Validate type StatusType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ACTIVE', 'EXPIRED', 'EXPIRED_WITHIN_GRACE_PERIOD', 'PENDING_RENEWAL']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on StatusType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_CustomerAccountManagementStatusType(self, value):
        result = True
        # Validate type CustomerAccountManagementStatusType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ABUSED', 'ACCOUNT_EXCEPTION', 'DELETED_BY_REQUEST', 'DELETED_BY_SYSTEM', 'MAILING_ADDRESS_SPECIFIED', 'MODIFIED', 'NOT_MODIFIED', 'REINSTATED', 'UNABLE_TO_LOCATE_CUSTOMER']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CustomerAccountManagementStatusType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_FreightProfileAttributeType(self, value):
        result = True
        # Validate type FreightProfileAttributeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['AUDIT_OR_INVOICE_SERVICE', 'BANK_DEBTOR_INVOICING', 'BANK_INVOICING', 'BLIND_SHIPPER', 'DOCK', 'EDI_210_INVOICING', 'FEDEX_CAN_CALL_FOR_MARKETING', 'FEDEX_FACILITY', 'FREIGHT_FORWARDING_FACILITY', 'GOVERNMENT', 'NATIONAL_ACCOUNT', 'OFF_BILL_DISCOUNT', 'THIRD_PARTY_LOGISTICS', 'WAREHOUSE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on FreightProfileAttributeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Contacts or
            self.Aliases or
            self.PremierType is not None or
            self.Tins or
            self.ProfileStatus is not None or
            self.CreationUserGroup is not None or
            self.ManagementStatus is not None or
            self.RevenueDetail is not None or
            self.FreightAccountDetail is not None or
            self.CreditStatusDetail is not None or
            self.AccountGroups or
            self.CreationDate is not None or
            self.Attributes
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightProfile', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FreightProfile')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'FreightProfile':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FreightProfile')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='FreightProfile', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='FreightProfile'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightProfile', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Contacts_ in self.Contacts:
            namespaceprefix_ = self.Contacts_nsprefix_ + ':' if (UseCapturedNS_ and self.Contacts_nsprefix_) else ''
            Contacts_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Contacts', pretty_print=pretty_print)
        for Aliases_ in self.Aliases:
            namespaceprefix_ = self.Aliases_nsprefix_ + ':' if (UseCapturedNS_ and self.Aliases_nsprefix_) else ''
            Aliases_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Aliases', pretty_print=pretty_print)
        if self.PremierType is not None:
            namespaceprefix_ = self.PremierType_nsprefix_ + ':' if (UseCapturedNS_ and self.PremierType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPremierType>%s</%sPremierType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PremierType), input_name='PremierType')), namespaceprefix_ , eol_))
        for Tins_ in self.Tins:
            namespaceprefix_ = self.Tins_nsprefix_ + ':' if (UseCapturedNS_ and self.Tins_nsprefix_) else ''
            Tins_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Tins', pretty_print=pretty_print)
        if self.ProfileStatus is not None:
            namespaceprefix_ = self.ProfileStatus_nsprefix_ + ':' if (UseCapturedNS_ and self.ProfileStatus_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProfileStatus>%s</%sProfileStatus>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ProfileStatus), input_name='ProfileStatus')), namespaceprefix_ , eol_))
        if self.CreationUserGroup is not None:
            namespaceprefix_ = self.CreationUserGroup_nsprefix_ + ':' if (UseCapturedNS_ and self.CreationUserGroup_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCreationUserGroup>%s</%sCreationUserGroup>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CreationUserGroup), input_name='CreationUserGroup')), namespaceprefix_ , eol_))
        if self.ManagementStatus is not None:
            namespaceprefix_ = self.ManagementStatus_nsprefix_ + ':' if (UseCapturedNS_ and self.ManagementStatus_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sManagementStatus>%s</%sManagementStatus>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ManagementStatus), input_name='ManagementStatus')), namespaceprefix_ , eol_))
        if self.RevenueDetail is not None:
            namespaceprefix_ = self.RevenueDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.RevenueDetail_nsprefix_) else ''
            self.RevenueDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RevenueDetail', pretty_print=pretty_print)
        if self.FreightAccountDetail is not None:
            namespaceprefix_ = self.FreightAccountDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.FreightAccountDetail_nsprefix_) else ''
            self.FreightAccountDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FreightAccountDetail', pretty_print=pretty_print)
        if self.CreditStatusDetail is not None:
            namespaceprefix_ = self.CreditStatusDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.CreditStatusDetail_nsprefix_) else ''
            self.CreditStatusDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CreditStatusDetail', pretty_print=pretty_print)
        for AccountGroups_ in self.AccountGroups:
            namespaceprefix_ = self.AccountGroups_nsprefix_ + ':' if (UseCapturedNS_ and self.AccountGroups_nsprefix_) else ''
            AccountGroups_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AccountGroups', pretty_print=pretty_print)
        if self.CreationDate is not None:
            namespaceprefix_ = self.CreationDate_nsprefix_ + ':' if (UseCapturedNS_ and self.CreationDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCreationDate>%s</%sCreationDate>%s' % (namespaceprefix_ , self.gds_format_datetime(self.CreationDate, input_name='CreationDate'), namespaceprefix_ , eol_))
        for Attributes_ in self.Attributes:
            namespaceprefix_ = self.Attributes_nsprefix_ + ':' if (UseCapturedNS_ and self.Attributes_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAttributes>%s</%sAttributes>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Attributes_), input_name='Attributes')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Contacts':
            obj_ = ProfileContact.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Contacts.append(obj_)
            obj_.original_tagname_ = 'Contacts'
        elif nodeName_ == 'Aliases':
            obj_ = AccountAliasDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Aliases.append(obj_)
            obj_.original_tagname_ = 'Aliases'
        elif nodeName_ == 'PremierType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PremierType')
            value_ = self.gds_validate_string(value_, node, 'PremierType')
            self.PremierType = value_
            self.PremierType_nsprefix_ = child_.prefix
            # validate type PremierType
            self.validate_PremierType(self.PremierType)
        elif nodeName_ == 'Tins':
            obj_ = TaxpayerIdentification.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Tins.append(obj_)
            obj_.original_tagname_ = 'Tins'
        elif nodeName_ == 'ProfileStatus':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ProfileStatus')
            value_ = self.gds_validate_string(value_, node, 'ProfileStatus')
            self.ProfileStatus = value_
            self.ProfileStatus_nsprefix_ = child_.prefix
            # validate type StatusType
            self.validate_StatusType(self.ProfileStatus)
        elif nodeName_ == 'CreationUserGroup':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CreationUserGroup')
            value_ = self.gds_validate_string(value_, node, 'CreationUserGroup')
            self.CreationUserGroup = value_
            self.CreationUserGroup_nsprefix_ = child_.prefix
        elif nodeName_ == 'ManagementStatus':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ManagementStatus')
            value_ = self.gds_validate_string(value_, node, 'ManagementStatus')
            self.ManagementStatus = value_
            self.ManagementStatus_nsprefix_ = child_.prefix
            # validate type CustomerAccountManagementStatusType
            self.validate_CustomerAccountManagementStatusType(self.ManagementStatus)
        elif nodeName_ == 'RevenueDetail':
            obj_ = CustomerRevenueDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RevenueDetail = obj_
            obj_.original_tagname_ = 'RevenueDetail'
        elif nodeName_ == 'FreightAccountDetail':
            obj_ = FreightAccountDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FreightAccountDetail = obj_
            obj_.original_tagname_ = 'FreightAccountDetail'
        elif nodeName_ == 'CreditStatusDetail':
            obj_ = ProfileCreditStatusDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CreditStatusDetail = obj_
            obj_.original_tagname_ = 'CreditStatusDetail'
        elif nodeName_ == 'AccountGroups':
            obj_ = AccountGroupMembershipDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AccountGroups.append(obj_)
            obj_.original_tagname_ = 'AccountGroups'
        elif nodeName_ == 'CreationDate':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.CreationDate = dval_
            self.CreationDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'Attributes':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Attributes')
            value_ = self.gds_validate_string(value_, node, 'Attributes')
            self.Attributes.append(value_)
            self.Attributes_nsprefix_ = child_.prefix
            # validate type FreightProfileAttributeType
            self.validate_FreightProfileAttributeType(self.Attributes[-1])
# end class FreightProfile


class FreightServiceCenterDetail(GeneratedsSuper):
    """This class describes the relationship between a customer-specified
    address and the FedEx Freight / FedEx National Freight Service Center
    that supports that address."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, InterlineCarrierCode=None, InterlineCarrierName=None, AdditionalDays=None, LocalService=None, LocalDistance=None, LocalDuration=None, LocalServiceScheduling=None, LimitedServiceDays=None, GatewayLocationId=None, Location=None, ContactAndAddress=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.InterlineCarrierCode = InterlineCarrierCode
        self.InterlineCarrierCode_nsprefix_ = None
        self.InterlineCarrierName = InterlineCarrierName
        self.InterlineCarrierName_nsprefix_ = None
        self.AdditionalDays = AdditionalDays
        self.AdditionalDays_nsprefix_ = None
        self.LocalService = LocalService
        self.LocalService_nsprefix_ = None
        self.LocalDistance = LocalDistance
        self.LocalDistance_nsprefix_ = "ns"
        self.LocalDuration = LocalDuration
        self.LocalDuration_nsprefix_ = None
        self.LocalServiceScheduling = LocalServiceScheduling
        self.validate_FreightServiceSchedulingType(self.LocalServiceScheduling)
        self.LocalServiceScheduling_nsprefix_ = "ns"
        if LimitedServiceDays is None:
            self.LimitedServiceDays = []
        else:
            self.LimitedServiceDays = LimitedServiceDays
        self.LimitedServiceDays_nsprefix_ = "ns"
        self.GatewayLocationId = GatewayLocationId
        self.GatewayLocationId_nsprefix_ = None
        self.Location = Location
        self.Location_nsprefix_ = None
        self.ContactAndAddress = ContactAndAddress
        self.ContactAndAddress_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FreightServiceCenterDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FreightServiceCenterDetail.subclass:
            return FreightServiceCenterDetail.subclass(*args_, **kwargs_)
        else:
            return FreightServiceCenterDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_InterlineCarrierCode(self):
        return self.InterlineCarrierCode
    def set_InterlineCarrierCode(self, InterlineCarrierCode):
        self.InterlineCarrierCode = InterlineCarrierCode
    def get_InterlineCarrierName(self):
        return self.InterlineCarrierName
    def set_InterlineCarrierName(self, InterlineCarrierName):
        self.InterlineCarrierName = InterlineCarrierName
    def get_AdditionalDays(self):
        return self.AdditionalDays
    def set_AdditionalDays(self, AdditionalDays):
        self.AdditionalDays = AdditionalDays
    def get_LocalService(self):
        return self.LocalService
    def set_LocalService(self, LocalService):
        self.LocalService = LocalService
    def get_LocalDistance(self):
        return self.LocalDistance
    def set_LocalDistance(self, LocalDistance):
        self.LocalDistance = LocalDistance
    def get_LocalDuration(self):
        return self.LocalDuration
    def set_LocalDuration(self, LocalDuration):
        self.LocalDuration = LocalDuration
    def get_LocalServiceScheduling(self):
        return self.LocalServiceScheduling
    def set_LocalServiceScheduling(self, LocalServiceScheduling):
        self.LocalServiceScheduling = LocalServiceScheduling
    def get_LimitedServiceDays(self):
        return self.LimitedServiceDays
    def set_LimitedServiceDays(self, LimitedServiceDays):
        self.LimitedServiceDays = LimitedServiceDays
    def add_LimitedServiceDays(self, value):
        self.LimitedServiceDays.append(value)
    def insert_LimitedServiceDays_at(self, index, value):
        self.LimitedServiceDays.insert(index, value)
    def replace_LimitedServiceDays_at(self, index, value):
        self.LimitedServiceDays[index] = value
    def get_GatewayLocationId(self):
        return self.GatewayLocationId
    def set_GatewayLocationId(self, GatewayLocationId):
        self.GatewayLocationId = GatewayLocationId
    def get_Location(self):
        return self.Location
    def set_Location(self, Location):
        self.Location = Location
    def get_ContactAndAddress(self):
        return self.ContactAndAddress
    def set_ContactAndAddress(self, ContactAndAddress):
        self.ContactAndAddress = ContactAndAddress
    def validate_FreightServiceSchedulingType(self, value):
        result = True
        # Validate type FreightServiceSchedulingType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['LIMITED', 'STANDARD', 'WILL_CALL']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on FreightServiceSchedulingType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_DayOfWeekType(self, value):
        result = True
        # Validate type DayOfWeekType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FRI', 'MON', 'SAT', 'SUN', 'THU', 'TUE', 'WED']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on DayOfWeekType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.InterlineCarrierCode is not None or
            self.InterlineCarrierName is not None or
            self.AdditionalDays is not None or
            self.LocalService is not None or
            self.LocalDistance is not None or
            self.LocalDuration is not None or
            self.LocalServiceScheduling is not None or
            self.LimitedServiceDays or
            self.GatewayLocationId is not None or
            self.Location is not None or
            self.ContactAndAddress is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightServiceCenterDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FreightServiceCenterDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'FreightServiceCenterDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FreightServiceCenterDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='FreightServiceCenterDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='FreightServiceCenterDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightServiceCenterDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.InterlineCarrierCode is not None:
            namespaceprefix_ = self.InterlineCarrierCode_nsprefix_ + ':' if (UseCapturedNS_ and self.InterlineCarrierCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInterlineCarrierCode>%s</%sInterlineCarrierCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InterlineCarrierCode), input_name='InterlineCarrierCode')), namespaceprefix_ , eol_))
        if self.InterlineCarrierName is not None:
            namespaceprefix_ = self.InterlineCarrierName_nsprefix_ + ':' if (UseCapturedNS_ and self.InterlineCarrierName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInterlineCarrierName>%s</%sInterlineCarrierName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InterlineCarrierName), input_name='InterlineCarrierName')), namespaceprefix_ , eol_))
        if self.AdditionalDays is not None:
            namespaceprefix_ = self.AdditionalDays_nsprefix_ + ':' if (UseCapturedNS_ and self.AdditionalDays_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAdditionalDays>%s</%sAdditionalDays>%s' % (namespaceprefix_ , self.gds_format_integer(self.AdditionalDays, input_name='AdditionalDays'), namespaceprefix_ , eol_))
        if self.LocalService is not None:
            namespaceprefix_ = self.LocalService_nsprefix_ + ':' if (UseCapturedNS_ and self.LocalService_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocalService>%s</%sLocalService>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LocalService), input_name='LocalService')), namespaceprefix_ , eol_))
        if self.LocalDistance is not None:
            namespaceprefix_ = self.LocalDistance_nsprefix_ + ':' if (UseCapturedNS_ and self.LocalDistance_nsprefix_) else ''
            self.LocalDistance.export(outfile, level, namespaceprefix_, namespacedef_='', name_='LocalDistance', pretty_print=pretty_print)
        if self.LocalDuration is not None:
            namespaceprefix_ = self.LocalDuration_nsprefix_ + ':' if (UseCapturedNS_ and self.LocalDuration_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocalDuration>%s</%sLocalDuration>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LocalDuration), input_name='LocalDuration')), namespaceprefix_ , eol_))
        if self.LocalServiceScheduling is not None:
            namespaceprefix_ = self.LocalServiceScheduling_nsprefix_ + ':' if (UseCapturedNS_ and self.LocalServiceScheduling_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocalServiceScheduling>%s</%sLocalServiceScheduling>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LocalServiceScheduling), input_name='LocalServiceScheduling')), namespaceprefix_ , eol_))
        for LimitedServiceDays_ in self.LimitedServiceDays:
            namespaceprefix_ = self.LimitedServiceDays_nsprefix_ + ':' if (UseCapturedNS_ and self.LimitedServiceDays_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLimitedServiceDays>%s</%sLimitedServiceDays>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(LimitedServiceDays_), input_name='LimitedServiceDays')), namespaceprefix_ , eol_))
        if self.GatewayLocationId is not None:
            namespaceprefix_ = self.GatewayLocationId_nsprefix_ + ':' if (UseCapturedNS_ and self.GatewayLocationId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGatewayLocationId>%s</%sGatewayLocationId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.GatewayLocationId), input_name='GatewayLocationId')), namespaceprefix_ , eol_))
        if self.Location is not None:
            namespaceprefix_ = self.Location_nsprefix_ + ':' if (UseCapturedNS_ and self.Location_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocation>%s</%sLocation>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Location), input_name='Location')), namespaceprefix_ , eol_))
        if self.ContactAndAddress is not None:
            namespaceprefix_ = self.ContactAndAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.ContactAndAddress_nsprefix_) else ''
            self.ContactAndAddress.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ContactAndAddress', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'InterlineCarrierCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'InterlineCarrierCode')
            value_ = self.gds_validate_string(value_, node, 'InterlineCarrierCode')
            self.InterlineCarrierCode = value_
            self.InterlineCarrierCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'InterlineCarrierName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'InterlineCarrierName')
            value_ = self.gds_validate_string(value_, node, 'InterlineCarrierName')
            self.InterlineCarrierName = value_
            self.InterlineCarrierName_nsprefix_ = child_.prefix
        elif nodeName_ == 'AdditionalDays' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'AdditionalDays')
            ival_ = self.gds_validate_integer(ival_, node, 'AdditionalDays')
            self.AdditionalDays = ival_
            self.AdditionalDays_nsprefix_ = child_.prefix
        elif nodeName_ == 'LocalService':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LocalService')
            value_ = self.gds_validate_string(value_, node, 'LocalService')
            self.LocalService = value_
            self.LocalService_nsprefix_ = child_.prefix
        elif nodeName_ == 'LocalDistance':
            obj_ = Distance.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.LocalDistance = obj_
            obj_.original_tagname_ = 'LocalDistance'
        elif nodeName_ == 'LocalDuration':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LocalDuration')
            value_ = self.gds_validate_string(value_, node, 'LocalDuration')
            self.LocalDuration = value_
            self.LocalDuration_nsprefix_ = child_.prefix
        elif nodeName_ == 'LocalServiceScheduling':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LocalServiceScheduling')
            value_ = self.gds_validate_string(value_, node, 'LocalServiceScheduling')
            self.LocalServiceScheduling = value_
            self.LocalServiceScheduling_nsprefix_ = child_.prefix
            # validate type FreightServiceSchedulingType
            self.validate_FreightServiceSchedulingType(self.LocalServiceScheduling)
        elif nodeName_ == 'LimitedServiceDays':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LimitedServiceDays')
            value_ = self.gds_validate_string(value_, node, 'LimitedServiceDays')
            self.LimitedServiceDays.append(value_)
            self.LimitedServiceDays_nsprefix_ = child_.prefix
            # validate type DayOfWeekType
            self.validate_DayOfWeekType(self.LimitedServiceDays[-1])
        elif nodeName_ == 'GatewayLocationId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'GatewayLocationId')
            value_ = self.gds_validate_string(value_, node, 'GatewayLocationId')
            self.GatewayLocationId = value_
            self.GatewayLocationId_nsprefix_ = child_.prefix
        elif nodeName_ == 'Location':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Location')
            value_ = self.gds_validate_string(value_, node, 'Location')
            self.Location = value_
            self.Location_nsprefix_ = child_.prefix
        elif nodeName_ == 'ContactAndAddress':
            obj_ = ContactAndAddress.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ContactAndAddress = obj_
            obj_.original_tagname_ = 'ContactAndAddress'
# end class FreightServiceCenterDetail


class FreightShipmentDetail(GeneratedsSuper):
    """Data applicable to shipments using FEDEX_FREIGHT_ECONOMY and
    FEDEX_FREIGHT_PRIORITY services."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, FedExFreightAccountNumber=None, FedExFreightBillingContactAndAddress=None, AlternateBilling=None, PrintedReferences=None, Role=None, CollectTermsType=None, DeclaredValuePerUnit=None, DeclaredValueUnits=None, LiabilityCoverageDetail=None, Coupons=None, TotalHandlingUnits=None, ClientDiscountPercent=None, PalletWeight=None, ShipmentDimensions=None, Comment=None, SpecialServicePayments=None, HazardousMaterialsEmergencyContactNumber=None, HazardousMaterialsOfferor=None, LineItems=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.FedExFreightAccountNumber = FedExFreightAccountNumber
        self.FedExFreightAccountNumber_nsprefix_ = None
        self.FedExFreightBillingContactAndAddress = FedExFreightBillingContactAndAddress
        self.FedExFreightBillingContactAndAddress_nsprefix_ = "ns"
        self.AlternateBilling = AlternateBilling
        self.AlternateBilling_nsprefix_ = "ns"
        if PrintedReferences is None:
            self.PrintedReferences = []
        else:
            self.PrintedReferences = PrintedReferences
        self.PrintedReferences_nsprefix_ = "ns"
        self.Role = Role
        self.validate_FreightShipmentRoleType(self.Role)
        self.Role_nsprefix_ = "ns"
        self.CollectTermsType = CollectTermsType
        self.validate_FreightCollectTermsType(self.CollectTermsType)
        self.CollectTermsType_nsprefix_ = "ns"
        self.DeclaredValuePerUnit = DeclaredValuePerUnit
        self.DeclaredValuePerUnit_nsprefix_ = "ns"
        self.DeclaredValueUnits = DeclaredValueUnits
        self.DeclaredValueUnits_nsprefix_ = None
        self.LiabilityCoverageDetail = LiabilityCoverageDetail
        self.LiabilityCoverageDetail_nsprefix_ = "ns"
        if Coupons is None:
            self.Coupons = []
        else:
            self.Coupons = Coupons
        self.Coupons_nsprefix_ = None
        self.TotalHandlingUnits = TotalHandlingUnits
        self.TotalHandlingUnits_nsprefix_ = None
        self.ClientDiscountPercent = ClientDiscountPercent
        self.ClientDiscountPercent_nsprefix_ = None
        self.PalletWeight = PalletWeight
        self.PalletWeight_nsprefix_ = "ns"
        self.ShipmentDimensions = ShipmentDimensions
        self.ShipmentDimensions_nsprefix_ = "ns"
        self.Comment = Comment
        self.Comment_nsprefix_ = None
        if SpecialServicePayments is None:
            self.SpecialServicePayments = []
        else:
            self.SpecialServicePayments = SpecialServicePayments
        self.SpecialServicePayments_nsprefix_ = "ns"
        self.HazardousMaterialsEmergencyContactNumber = HazardousMaterialsEmergencyContactNumber
        self.HazardousMaterialsEmergencyContactNumber_nsprefix_ = None
        self.HazardousMaterialsOfferor = HazardousMaterialsOfferor
        self.HazardousMaterialsOfferor_nsprefix_ = None
        if LineItems is None:
            self.LineItems = []
        else:
            self.LineItems = LineItems
        self.LineItems_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FreightShipmentDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FreightShipmentDetail.subclass:
            return FreightShipmentDetail.subclass(*args_, **kwargs_)
        else:
            return FreightShipmentDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_FedExFreightAccountNumber(self):
        return self.FedExFreightAccountNumber
    def set_FedExFreightAccountNumber(self, FedExFreightAccountNumber):
        self.FedExFreightAccountNumber = FedExFreightAccountNumber
    def get_FedExFreightBillingContactAndAddress(self):
        return self.FedExFreightBillingContactAndAddress
    def set_FedExFreightBillingContactAndAddress(self, FedExFreightBillingContactAndAddress):
        self.FedExFreightBillingContactAndAddress = FedExFreightBillingContactAndAddress
    def get_AlternateBilling(self):
        return self.AlternateBilling
    def set_AlternateBilling(self, AlternateBilling):
        self.AlternateBilling = AlternateBilling
    def get_PrintedReferences(self):
        return self.PrintedReferences
    def set_PrintedReferences(self, PrintedReferences):
        self.PrintedReferences = PrintedReferences
    def add_PrintedReferences(self, value):
        self.PrintedReferences.append(value)
    def insert_PrintedReferences_at(self, index, value):
        self.PrintedReferences.insert(index, value)
    def replace_PrintedReferences_at(self, index, value):
        self.PrintedReferences[index] = value
    def get_Role(self):
        return self.Role
    def set_Role(self, Role):
        self.Role = Role
    def get_CollectTermsType(self):
        return self.CollectTermsType
    def set_CollectTermsType(self, CollectTermsType):
        self.CollectTermsType = CollectTermsType
    def get_DeclaredValuePerUnit(self):
        return self.DeclaredValuePerUnit
    def set_DeclaredValuePerUnit(self, DeclaredValuePerUnit):
        self.DeclaredValuePerUnit = DeclaredValuePerUnit
    def get_DeclaredValueUnits(self):
        return self.DeclaredValueUnits
    def set_DeclaredValueUnits(self, DeclaredValueUnits):
        self.DeclaredValueUnits = DeclaredValueUnits
    def get_LiabilityCoverageDetail(self):
        return self.LiabilityCoverageDetail
    def set_LiabilityCoverageDetail(self, LiabilityCoverageDetail):
        self.LiabilityCoverageDetail = LiabilityCoverageDetail
    def get_Coupons(self):
        return self.Coupons
    def set_Coupons(self, Coupons):
        self.Coupons = Coupons
    def add_Coupons(self, value):
        self.Coupons.append(value)
    def insert_Coupons_at(self, index, value):
        self.Coupons.insert(index, value)
    def replace_Coupons_at(self, index, value):
        self.Coupons[index] = value
    def get_TotalHandlingUnits(self):
        return self.TotalHandlingUnits
    def set_TotalHandlingUnits(self, TotalHandlingUnits):
        self.TotalHandlingUnits = TotalHandlingUnits
    def get_ClientDiscountPercent(self):
        return self.ClientDiscountPercent
    def set_ClientDiscountPercent(self, ClientDiscountPercent):
        self.ClientDiscountPercent = ClientDiscountPercent
    def get_PalletWeight(self):
        return self.PalletWeight
    def set_PalletWeight(self, PalletWeight):
        self.PalletWeight = PalletWeight
    def get_ShipmentDimensions(self):
        return self.ShipmentDimensions
    def set_ShipmentDimensions(self, ShipmentDimensions):
        self.ShipmentDimensions = ShipmentDimensions
    def get_Comment(self):
        return self.Comment
    def set_Comment(self, Comment):
        self.Comment = Comment
    def get_SpecialServicePayments(self):
        return self.SpecialServicePayments
    def set_SpecialServicePayments(self, SpecialServicePayments):
        self.SpecialServicePayments = SpecialServicePayments
    def add_SpecialServicePayments(self, value):
        self.SpecialServicePayments.append(value)
    def insert_SpecialServicePayments_at(self, index, value):
        self.SpecialServicePayments.insert(index, value)
    def replace_SpecialServicePayments_at(self, index, value):
        self.SpecialServicePayments[index] = value
    def get_HazardousMaterialsEmergencyContactNumber(self):
        return self.HazardousMaterialsEmergencyContactNumber
    def set_HazardousMaterialsEmergencyContactNumber(self, HazardousMaterialsEmergencyContactNumber):
        self.HazardousMaterialsEmergencyContactNumber = HazardousMaterialsEmergencyContactNumber
    def get_HazardousMaterialsOfferor(self):
        return self.HazardousMaterialsOfferor
    def set_HazardousMaterialsOfferor(self, HazardousMaterialsOfferor):
        self.HazardousMaterialsOfferor = HazardousMaterialsOfferor
    def get_LineItems(self):
        return self.LineItems
    def set_LineItems(self, LineItems):
        self.LineItems = LineItems
    def add_LineItems(self, value):
        self.LineItems.append(value)
    def insert_LineItems_at(self, index, value):
        self.LineItems.insert(index, value)
    def replace_LineItems_at(self, index, value):
        self.LineItems[index] = value
    def validate_FreightShipmentRoleType(self, value):
        result = True
        # Validate type FreightShipmentRoleType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CONSIGNEE', 'SHIPPER']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on FreightShipmentRoleType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_FreightCollectTermsType(self, value):
        result = True
        # Validate type FreightCollectTermsType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['NON_RECOURSE_SHIPPER_SIGNED', 'STANDARD']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on FreightCollectTermsType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.FedExFreightAccountNumber is not None or
            self.FedExFreightBillingContactAndAddress is not None or
            self.AlternateBilling is not None or
            self.PrintedReferences or
            self.Role is not None or
            self.CollectTermsType is not None or
            self.DeclaredValuePerUnit is not None or
            self.DeclaredValueUnits is not None or
            self.LiabilityCoverageDetail is not None or
            self.Coupons or
            self.TotalHandlingUnits is not None or
            self.ClientDiscountPercent is not None or
            self.PalletWeight is not None or
            self.ShipmentDimensions is not None or
            self.Comment is not None or
            self.SpecialServicePayments or
            self.HazardousMaterialsEmergencyContactNumber is not None or
            self.HazardousMaterialsOfferor is not None or
            self.LineItems
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightShipmentDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FreightShipmentDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'FreightShipmentDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FreightShipmentDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='FreightShipmentDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='FreightShipmentDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightShipmentDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.FedExFreightAccountNumber is not None:
            namespaceprefix_ = self.FedExFreightAccountNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.FedExFreightAccountNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFedExFreightAccountNumber>%s</%sFedExFreightAccountNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FedExFreightAccountNumber), input_name='FedExFreightAccountNumber')), namespaceprefix_ , eol_))
        if self.FedExFreightBillingContactAndAddress is not None:
            namespaceprefix_ = self.FedExFreightBillingContactAndAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.FedExFreightBillingContactAndAddress_nsprefix_) else ''
            self.FedExFreightBillingContactAndAddress.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FedExFreightBillingContactAndAddress', pretty_print=pretty_print)
        if self.AlternateBilling is not None:
            namespaceprefix_ = self.AlternateBilling_nsprefix_ + ':' if (UseCapturedNS_ and self.AlternateBilling_nsprefix_) else ''
            self.AlternateBilling.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AlternateBilling', pretty_print=pretty_print)
        for PrintedReferences_ in self.PrintedReferences:
            namespaceprefix_ = self.PrintedReferences_nsprefix_ + ':' if (UseCapturedNS_ and self.PrintedReferences_nsprefix_) else ''
            PrintedReferences_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PrintedReferences', pretty_print=pretty_print)
        if self.Role is not None:
            namespaceprefix_ = self.Role_nsprefix_ + ':' if (UseCapturedNS_ and self.Role_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRole>%s</%sRole>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Role), input_name='Role')), namespaceprefix_ , eol_))
        if self.CollectTermsType is not None:
            namespaceprefix_ = self.CollectTermsType_nsprefix_ + ':' if (UseCapturedNS_ and self.CollectTermsType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCollectTermsType>%s</%sCollectTermsType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CollectTermsType), input_name='CollectTermsType')), namespaceprefix_ , eol_))
        if self.DeclaredValuePerUnit is not None:
            namespaceprefix_ = self.DeclaredValuePerUnit_nsprefix_ + ':' if (UseCapturedNS_ and self.DeclaredValuePerUnit_nsprefix_) else ''
            self.DeclaredValuePerUnit.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DeclaredValuePerUnit', pretty_print=pretty_print)
        if self.DeclaredValueUnits is not None:
            namespaceprefix_ = self.DeclaredValueUnits_nsprefix_ + ':' if (UseCapturedNS_ and self.DeclaredValueUnits_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDeclaredValueUnits>%s</%sDeclaredValueUnits>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DeclaredValueUnits), input_name='DeclaredValueUnits')), namespaceprefix_ , eol_))
        if self.LiabilityCoverageDetail is not None:
            namespaceprefix_ = self.LiabilityCoverageDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.LiabilityCoverageDetail_nsprefix_) else ''
            self.LiabilityCoverageDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='LiabilityCoverageDetail', pretty_print=pretty_print)
        for Coupons_ in self.Coupons:
            namespaceprefix_ = self.Coupons_nsprefix_ + ':' if (UseCapturedNS_ and self.Coupons_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCoupons>%s</%sCoupons>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Coupons_), input_name='Coupons')), namespaceprefix_ , eol_))
        if self.TotalHandlingUnits is not None:
            namespaceprefix_ = self.TotalHandlingUnits_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalHandlingUnits_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTotalHandlingUnits>%s</%sTotalHandlingUnits>%s' % (namespaceprefix_ , self.gds_format_integer(self.TotalHandlingUnits, input_name='TotalHandlingUnits'), namespaceprefix_ , eol_))
        if self.ClientDiscountPercent is not None:
            namespaceprefix_ = self.ClientDiscountPercent_nsprefix_ + ':' if (UseCapturedNS_ and self.ClientDiscountPercent_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClientDiscountPercent>%s</%sClientDiscountPercent>%s' % (namespaceprefix_ , self.gds_format_decimal(self.ClientDiscountPercent, input_name='ClientDiscountPercent'), namespaceprefix_ , eol_))
        if self.PalletWeight is not None:
            namespaceprefix_ = self.PalletWeight_nsprefix_ + ':' if (UseCapturedNS_ and self.PalletWeight_nsprefix_) else ''
            self.PalletWeight.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PalletWeight', pretty_print=pretty_print)
        if self.ShipmentDimensions is not None:
            namespaceprefix_ = self.ShipmentDimensions_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipmentDimensions_nsprefix_) else ''
            self.ShipmentDimensions.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ShipmentDimensions', pretty_print=pretty_print)
        if self.Comment is not None:
            namespaceprefix_ = self.Comment_nsprefix_ + ':' if (UseCapturedNS_ and self.Comment_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sComment>%s</%sComment>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Comment), input_name='Comment')), namespaceprefix_ , eol_))
        for SpecialServicePayments_ in self.SpecialServicePayments:
            namespaceprefix_ = self.SpecialServicePayments_nsprefix_ + ':' if (UseCapturedNS_ and self.SpecialServicePayments_nsprefix_) else ''
            SpecialServicePayments_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SpecialServicePayments', pretty_print=pretty_print)
        if self.HazardousMaterialsEmergencyContactNumber is not None:
            namespaceprefix_ = self.HazardousMaterialsEmergencyContactNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.HazardousMaterialsEmergencyContactNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHazardousMaterialsEmergencyContactNumber>%s</%sHazardousMaterialsEmergencyContactNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.HazardousMaterialsEmergencyContactNumber), input_name='HazardousMaterialsEmergencyContactNumber')), namespaceprefix_ , eol_))
        if self.HazardousMaterialsOfferor is not None:
            namespaceprefix_ = self.HazardousMaterialsOfferor_nsprefix_ + ':' if (UseCapturedNS_ and self.HazardousMaterialsOfferor_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHazardousMaterialsOfferor>%s</%sHazardousMaterialsOfferor>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.HazardousMaterialsOfferor), input_name='HazardousMaterialsOfferor')), namespaceprefix_ , eol_))
        for LineItems_ in self.LineItems:
            namespaceprefix_ = self.LineItems_nsprefix_ + ':' if (UseCapturedNS_ and self.LineItems_nsprefix_) else ''
            LineItems_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='LineItems', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'FedExFreightAccountNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FedExFreightAccountNumber')
            value_ = self.gds_validate_string(value_, node, 'FedExFreightAccountNumber')
            self.FedExFreightAccountNumber = value_
            self.FedExFreightAccountNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'FedExFreightBillingContactAndAddress':
            obj_ = ContactAndAddress.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FedExFreightBillingContactAndAddress = obj_
            obj_.original_tagname_ = 'FedExFreightBillingContactAndAddress'
        elif nodeName_ == 'AlternateBilling':
            obj_ = Party.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AlternateBilling = obj_
            obj_.original_tagname_ = 'AlternateBilling'
        elif nodeName_ == 'PrintedReferences':
            obj_ = PrintedReference.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PrintedReferences.append(obj_)
            obj_.original_tagname_ = 'PrintedReferences'
        elif nodeName_ == 'Role':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Role')
            value_ = self.gds_validate_string(value_, node, 'Role')
            self.Role = value_
            self.Role_nsprefix_ = child_.prefix
            # validate type FreightShipmentRoleType
            self.validate_FreightShipmentRoleType(self.Role)
        elif nodeName_ == 'CollectTermsType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CollectTermsType')
            value_ = self.gds_validate_string(value_, node, 'CollectTermsType')
            self.CollectTermsType = value_
            self.CollectTermsType_nsprefix_ = child_.prefix
            # validate type FreightCollectTermsType
            self.validate_FreightCollectTermsType(self.CollectTermsType)
        elif nodeName_ == 'DeclaredValuePerUnit':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DeclaredValuePerUnit = obj_
            obj_.original_tagname_ = 'DeclaredValuePerUnit'
        elif nodeName_ == 'DeclaredValueUnits':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DeclaredValueUnits')
            value_ = self.gds_validate_string(value_, node, 'DeclaredValueUnits')
            self.DeclaredValueUnits = value_
            self.DeclaredValueUnits_nsprefix_ = child_.prefix
        elif nodeName_ == 'LiabilityCoverageDetail':
            obj_ = LiabilityCoverageDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.LiabilityCoverageDetail = obj_
            obj_.original_tagname_ = 'LiabilityCoverageDetail'
        elif nodeName_ == 'Coupons':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Coupons')
            value_ = self.gds_validate_string(value_, node, 'Coupons')
            self.Coupons.append(value_)
            self.Coupons_nsprefix_ = child_.prefix
        elif nodeName_ == 'TotalHandlingUnits' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'TotalHandlingUnits')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'TotalHandlingUnits')
            self.TotalHandlingUnits = ival_
            self.TotalHandlingUnits_nsprefix_ = child_.prefix
        elif nodeName_ == 'ClientDiscountPercent' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'ClientDiscountPercent')
            fval_ = self.gds_validate_decimal(fval_, node, 'ClientDiscountPercent')
            self.ClientDiscountPercent = fval_
            self.ClientDiscountPercent_nsprefix_ = child_.prefix
        elif nodeName_ == 'PalletWeight':
            obj_ = Weight.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PalletWeight = obj_
            obj_.original_tagname_ = 'PalletWeight'
        elif nodeName_ == 'ShipmentDimensions':
            obj_ = Dimensions.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ShipmentDimensions = obj_
            obj_.original_tagname_ = 'ShipmentDimensions'
        elif nodeName_ == 'Comment':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Comment')
            value_ = self.gds_validate_string(value_, node, 'Comment')
            self.Comment = value_
            self.Comment_nsprefix_ = child_.prefix
        elif nodeName_ == 'SpecialServicePayments':
            obj_ = FreightSpecialServicePayment.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SpecialServicePayments.append(obj_)
            obj_.original_tagname_ = 'SpecialServicePayments'
        elif nodeName_ == 'HazardousMaterialsEmergencyContactNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'HazardousMaterialsEmergencyContactNumber')
            value_ = self.gds_validate_string(value_, node, 'HazardousMaterialsEmergencyContactNumber')
            self.HazardousMaterialsEmergencyContactNumber = value_
            self.HazardousMaterialsEmergencyContactNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'HazardousMaterialsOfferor':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'HazardousMaterialsOfferor')
            value_ = self.gds_validate_string(value_, node, 'HazardousMaterialsOfferor')
            self.HazardousMaterialsOfferor = value_
            self.HazardousMaterialsOfferor_nsprefix_ = child_.prefix
        elif nodeName_ == 'LineItems':
            obj_ = FreightShipmentLineItem.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.LineItems.append(obj_)
            obj_.original_tagname_ = 'LineItems'
# end class FreightShipmentDetail


class FreightShipmentLineItem(GeneratedsSuper):
    """Description of an individual commodity or class of content in a
    shipment."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Id=None, FreightClass=None, ClassProvidedByCustomer=None, BillingMaskName=None, LiabilityCoverageDetail=None, HandlingUnits=None, Packaging=None, Pieces=None, NmfcCode=None, HazardousMaterials=None, PurchaseOrderNumber=None, Description=None, Weight=None, Dimensions=None, Volume=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Id = Id
        self.Id_nsprefix_ = None
        self.FreightClass = FreightClass
        self.validate_FreightClassType(self.FreightClass)
        self.FreightClass_nsprefix_ = "ns"
        self.ClassProvidedByCustomer = ClassProvidedByCustomer
        self.ClassProvidedByCustomer_nsprefix_ = None
        self.BillingMaskName = BillingMaskName
        self.BillingMaskName_nsprefix_ = None
        self.LiabilityCoverageDetail = LiabilityCoverageDetail
        self.LiabilityCoverageDetail_nsprefix_ = "ns"
        self.HandlingUnits = HandlingUnits
        self.HandlingUnits_nsprefix_ = None
        self.Packaging = Packaging
        self.validate_PhysicalPackagingType(self.Packaging)
        self.Packaging_nsprefix_ = "ns"
        self.Pieces = Pieces
        self.Pieces_nsprefix_ = None
        self.NmfcCode = NmfcCode
        self.NmfcCode_nsprefix_ = None
        self.HazardousMaterials = HazardousMaterials
        self.validate_HazardousCommodityOptionType(self.HazardousMaterials)
        self.HazardousMaterials_nsprefix_ = "ns"
        self.PurchaseOrderNumber = PurchaseOrderNumber
        self.PurchaseOrderNumber_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
        self.Weight = Weight
        self.Weight_nsprefix_ = "ns"
        self.Dimensions = Dimensions
        self.Dimensions_nsprefix_ = "ns"
        self.Volume = Volume
        self.Volume_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FreightShipmentLineItem)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FreightShipmentLineItem.subclass:
            return FreightShipmentLineItem.subclass(*args_, **kwargs_)
        else:
            return FreightShipmentLineItem(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Id(self):
        return self.Id
    def set_Id(self, Id):
        self.Id = Id
    def get_FreightClass(self):
        return self.FreightClass
    def set_FreightClass(self, FreightClass):
        self.FreightClass = FreightClass
    def get_ClassProvidedByCustomer(self):
        return self.ClassProvidedByCustomer
    def set_ClassProvidedByCustomer(self, ClassProvidedByCustomer):
        self.ClassProvidedByCustomer = ClassProvidedByCustomer
    def get_BillingMaskName(self):
        return self.BillingMaskName
    def set_BillingMaskName(self, BillingMaskName):
        self.BillingMaskName = BillingMaskName
    def get_LiabilityCoverageDetail(self):
        return self.LiabilityCoverageDetail
    def set_LiabilityCoverageDetail(self, LiabilityCoverageDetail):
        self.LiabilityCoverageDetail = LiabilityCoverageDetail
    def get_HandlingUnits(self):
        return self.HandlingUnits
    def set_HandlingUnits(self, HandlingUnits):
        self.HandlingUnits = HandlingUnits
    def get_Packaging(self):
        return self.Packaging
    def set_Packaging(self, Packaging):
        self.Packaging = Packaging
    def get_Pieces(self):
        return self.Pieces
    def set_Pieces(self, Pieces):
        self.Pieces = Pieces
    def get_NmfcCode(self):
        return self.NmfcCode
    def set_NmfcCode(self, NmfcCode):
        self.NmfcCode = NmfcCode
    def get_HazardousMaterials(self):
        return self.HazardousMaterials
    def set_HazardousMaterials(self, HazardousMaterials):
        self.HazardousMaterials = HazardousMaterials
    def get_PurchaseOrderNumber(self):
        return self.PurchaseOrderNumber
    def set_PurchaseOrderNumber(self, PurchaseOrderNumber):
        self.PurchaseOrderNumber = PurchaseOrderNumber
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def get_Weight(self):
        return self.Weight
    def set_Weight(self, Weight):
        self.Weight = Weight
    def get_Dimensions(self):
        return self.Dimensions
    def set_Dimensions(self, Dimensions):
        self.Dimensions = Dimensions
    def get_Volume(self):
        return self.Volume
    def set_Volume(self, Volume):
        self.Volume = Volume
    def validate_FreightClassType(self, value):
        result = True
        # Validate type FreightClassType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CLASS_050', 'CLASS_055', 'CLASS_060', 'CLASS_065', 'CLASS_070', 'CLASS_077_5', 'CLASS_085', 'CLASS_092_5', 'CLASS_100', 'CLASS_110', 'CLASS_125', 'CLASS_150', 'CLASS_175', 'CLASS_200', 'CLASS_250', 'CLASS_300', 'CLASS_400', 'CLASS_500']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on FreightClassType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_PhysicalPackagingType(self, value):
        result = True
        # Validate type PhysicalPackagingType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BAG', 'BARREL', 'BASKET', 'BOX', 'BUCKET', 'BUNDLE', 'CAGE', 'CARTON', 'CASE', 'CHEST', 'CONTAINER', 'CRATE', 'CYLINDER', 'DRUM', 'ENVELOPE', 'HAMPER', 'OTHER', 'PACKAGE', 'PAIL', 'PALLET', 'PARCEL', 'PIECE', 'REEL', 'ROLL', 'SACK', 'SHRINK_WRAPPED', 'SKID', 'TANK', 'TOTE_BIN', 'TUBE', 'UNIT']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on PhysicalPackagingType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_HazardousCommodityOptionType(self, value):
        result = True
        # Validate type HazardousCommodityOptionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BATTERY', 'HAZARDOUS_MATERIALS', 'ORM_D', 'REPORTABLE_QUANTITIES', 'SMALL_QUANTITY_EXCEPTION']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on HazardousCommodityOptionType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Id is not None or
            self.FreightClass is not None or
            self.ClassProvidedByCustomer is not None or
            self.BillingMaskName is not None or
            self.LiabilityCoverageDetail is not None or
            self.HandlingUnits is not None or
            self.Packaging is not None or
            self.Pieces is not None or
            self.NmfcCode is not None or
            self.HazardousMaterials is not None or
            self.PurchaseOrderNumber is not None or
            self.Description is not None or
            self.Weight is not None or
            self.Dimensions is not None or
            self.Volume is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightShipmentLineItem', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FreightShipmentLineItem')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'FreightShipmentLineItem':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FreightShipmentLineItem')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='FreightShipmentLineItem', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='FreightShipmentLineItem'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightShipmentLineItem', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Id is not None:
            namespaceprefix_ = self.Id_nsprefix_ + ':' if (UseCapturedNS_ and self.Id_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sId>%s</%sId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Id), input_name='Id')), namespaceprefix_ , eol_))
        if self.FreightClass is not None:
            namespaceprefix_ = self.FreightClass_nsprefix_ + ':' if (UseCapturedNS_ and self.FreightClass_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFreightClass>%s</%sFreightClass>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FreightClass), input_name='FreightClass')), namespaceprefix_ , eol_))
        if self.ClassProvidedByCustomer is not None:
            namespaceprefix_ = self.ClassProvidedByCustomer_nsprefix_ + ':' if (UseCapturedNS_ and self.ClassProvidedByCustomer_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClassProvidedByCustomer>%s</%sClassProvidedByCustomer>%s' % (namespaceprefix_ , self.gds_format_boolean(self.ClassProvidedByCustomer, input_name='ClassProvidedByCustomer'), namespaceprefix_ , eol_))
        if self.BillingMaskName is not None:
            namespaceprefix_ = self.BillingMaskName_nsprefix_ + ':' if (UseCapturedNS_ and self.BillingMaskName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBillingMaskName>%s</%sBillingMaskName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BillingMaskName), input_name='BillingMaskName')), namespaceprefix_ , eol_))
        if self.LiabilityCoverageDetail is not None:
            namespaceprefix_ = self.LiabilityCoverageDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.LiabilityCoverageDetail_nsprefix_) else ''
            self.LiabilityCoverageDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='LiabilityCoverageDetail', pretty_print=pretty_print)
        if self.HandlingUnits is not None:
            namespaceprefix_ = self.HandlingUnits_nsprefix_ + ':' if (UseCapturedNS_ and self.HandlingUnits_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHandlingUnits>%s</%sHandlingUnits>%s' % (namespaceprefix_ , self.gds_format_integer(self.HandlingUnits, input_name='HandlingUnits'), namespaceprefix_ , eol_))
        if self.Packaging is not None:
            namespaceprefix_ = self.Packaging_nsprefix_ + ':' if (UseCapturedNS_ and self.Packaging_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackaging>%s</%sPackaging>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Packaging), input_name='Packaging')), namespaceprefix_ , eol_))
        if self.Pieces is not None:
            namespaceprefix_ = self.Pieces_nsprefix_ + ':' if (UseCapturedNS_ and self.Pieces_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPieces>%s</%sPieces>%s' % (namespaceprefix_ , self.gds_format_integer(self.Pieces, input_name='Pieces'), namespaceprefix_ , eol_))
        if self.NmfcCode is not None:
            namespaceprefix_ = self.NmfcCode_nsprefix_ + ':' if (UseCapturedNS_ and self.NmfcCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNmfcCode>%s</%sNmfcCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NmfcCode), input_name='NmfcCode')), namespaceprefix_ , eol_))
        if self.HazardousMaterials is not None:
            namespaceprefix_ = self.HazardousMaterials_nsprefix_ + ':' if (UseCapturedNS_ and self.HazardousMaterials_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHazardousMaterials>%s</%sHazardousMaterials>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.HazardousMaterials), input_name='HazardousMaterials')), namespaceprefix_ , eol_))
        if self.PurchaseOrderNumber is not None:
            namespaceprefix_ = self.PurchaseOrderNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.PurchaseOrderNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPurchaseOrderNumber>%s</%sPurchaseOrderNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PurchaseOrderNumber), input_name='PurchaseOrderNumber')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
        if self.Weight is not None:
            namespaceprefix_ = self.Weight_nsprefix_ + ':' if (UseCapturedNS_ and self.Weight_nsprefix_) else ''
            self.Weight.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Weight', pretty_print=pretty_print)
        if self.Dimensions is not None:
            namespaceprefix_ = self.Dimensions_nsprefix_ + ':' if (UseCapturedNS_ and self.Dimensions_nsprefix_) else ''
            self.Dimensions.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Dimensions', pretty_print=pretty_print)
        if self.Volume is not None:
            namespaceprefix_ = self.Volume_nsprefix_ + ':' if (UseCapturedNS_ and self.Volume_nsprefix_) else ''
            self.Volume.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Volume', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Id':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Id')
            value_ = self.gds_validate_string(value_, node, 'Id')
            self.Id = value_
            self.Id_nsprefix_ = child_.prefix
        elif nodeName_ == 'FreightClass':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FreightClass')
            value_ = self.gds_validate_string(value_, node, 'FreightClass')
            self.FreightClass = value_
            self.FreightClass_nsprefix_ = child_.prefix
            # validate type FreightClassType
            self.validate_FreightClassType(self.FreightClass)
        elif nodeName_ == 'ClassProvidedByCustomer':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'ClassProvidedByCustomer')
            ival_ = self.gds_validate_boolean(ival_, node, 'ClassProvidedByCustomer')
            self.ClassProvidedByCustomer = ival_
            self.ClassProvidedByCustomer_nsprefix_ = child_.prefix
        elif nodeName_ == 'BillingMaskName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'BillingMaskName')
            value_ = self.gds_validate_string(value_, node, 'BillingMaskName')
            self.BillingMaskName = value_
            self.BillingMaskName_nsprefix_ = child_.prefix
        elif nodeName_ == 'LiabilityCoverageDetail':
            obj_ = LiabilityCoverageDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.LiabilityCoverageDetail = obj_
            obj_.original_tagname_ = 'LiabilityCoverageDetail'
        elif nodeName_ == 'HandlingUnits' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'HandlingUnits')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'HandlingUnits')
            self.HandlingUnits = ival_
            self.HandlingUnits_nsprefix_ = child_.prefix
        elif nodeName_ == 'Packaging':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Packaging')
            value_ = self.gds_validate_string(value_, node, 'Packaging')
            self.Packaging = value_
            self.Packaging_nsprefix_ = child_.prefix
            # validate type PhysicalPackagingType
            self.validate_PhysicalPackagingType(self.Packaging)
        elif nodeName_ == 'Pieces' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'Pieces')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'Pieces')
            self.Pieces = ival_
            self.Pieces_nsprefix_ = child_.prefix
        elif nodeName_ == 'NmfcCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'NmfcCode')
            value_ = self.gds_validate_string(value_, node, 'NmfcCode')
            self.NmfcCode = value_
            self.NmfcCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'HazardousMaterials':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'HazardousMaterials')
            value_ = self.gds_validate_string(value_, node, 'HazardousMaterials')
            self.HazardousMaterials = value_
            self.HazardousMaterials_nsprefix_ = child_.prefix
            # validate type HazardousCommodityOptionType
            self.validate_HazardousCommodityOptionType(self.HazardousMaterials)
        elif nodeName_ == 'PurchaseOrderNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PurchaseOrderNumber')
            value_ = self.gds_validate_string(value_, node, 'PurchaseOrderNumber')
            self.PurchaseOrderNumber = value_
            self.PurchaseOrderNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
        elif nodeName_ == 'Weight':
            obj_ = Weight.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Weight = obj_
            obj_.original_tagname_ = 'Weight'
        elif nodeName_ == 'Dimensions':
            obj_ = Dimensions.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Dimensions = obj_
            obj_.original_tagname_ = 'Dimensions'
        elif nodeName_ == 'Volume':
            obj_ = Volume.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Volume = obj_
            obj_.original_tagname_ = 'Volume'
# end class FreightShipmentLineItem


class FreightSpecialServicePayment(GeneratedsSuper):
    """Specifies which party will be responsible for payment of any surcharges
    for Freight special services for which split billing is allowed."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, SpecialService=None, PaymentType=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.SpecialService = SpecialService
        self.SpecialService_nsprefix_ = None
        self.PaymentType = PaymentType
        self.validate_FreightShipmentRoleType(self.PaymentType)
        self.PaymentType_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FreightSpecialServicePayment)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FreightSpecialServicePayment.subclass:
            return FreightSpecialServicePayment.subclass(*args_, **kwargs_)
        else:
            return FreightSpecialServicePayment(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_SpecialService(self):
        return self.SpecialService
    def set_SpecialService(self, SpecialService):
        self.SpecialService = SpecialService
    def get_PaymentType(self):
        return self.PaymentType
    def set_PaymentType(self, PaymentType):
        self.PaymentType = PaymentType
    def validate_FreightShipmentRoleType(self, value):
        result = True
        # Validate type FreightShipmentRoleType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CONSIGNEE', 'SHIPPER']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on FreightShipmentRoleType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.SpecialService is not None or
            self.PaymentType is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightSpecialServicePayment', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FreightSpecialServicePayment')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'FreightSpecialServicePayment':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FreightSpecialServicePayment')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='FreightSpecialServicePayment', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='FreightSpecialServicePayment'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightSpecialServicePayment', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SpecialService is not None:
            namespaceprefix_ = self.SpecialService_nsprefix_ + ':' if (UseCapturedNS_ and self.SpecialService_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSpecialService>%s</%sSpecialService>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SpecialService), input_name='SpecialService')), namespaceprefix_ , eol_))
        if self.PaymentType is not None:
            namespaceprefix_ = self.PaymentType_nsprefix_ + ':' if (UseCapturedNS_ and self.PaymentType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPaymentType>%s</%sPaymentType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PaymentType), input_name='PaymentType')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'SpecialService':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SpecialService')
            value_ = self.gds_validate_string(value_, node, 'SpecialService')
            self.SpecialService = value_
            self.SpecialService_nsprefix_ = child_.prefix
        elif nodeName_ == 'PaymentType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PaymentType')
            value_ = self.gds_validate_string(value_, node, 'PaymentType')
            self.PaymentType = value_
            self.PaymentType_nsprefix_ = child_.prefix
            # validate type FreightShipmentRoleType
            self.validate_FreightShipmentRoleType(self.PaymentType)
# end class FreightSpecialServicePayment


class GeneralAgencyAgreementDetail(GeneratedsSuper):
    """Data required to produce a General Agency Agreement document. Remaining
    content (business data) to be defined once requirements have been
    completed."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Format=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Format = Format
        self.Format_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GeneralAgencyAgreementDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GeneralAgencyAgreementDetail.subclass:
            return GeneralAgencyAgreementDetail.subclass(*args_, **kwargs_)
        else:
            return GeneralAgencyAgreementDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Format(self):
        return self.Format
    def set_Format(self, Format):
        self.Format = Format
    def hasContent_(self):
        if (
            self.Format is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralAgencyAgreementDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GeneralAgencyAgreementDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'GeneralAgencyAgreementDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GeneralAgencyAgreementDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GeneralAgencyAgreementDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GeneralAgencyAgreementDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralAgencyAgreementDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Format is not None:
            namespaceprefix_ = self.Format_nsprefix_ + ':' if (UseCapturedNS_ and self.Format_nsprefix_) else ''
            self.Format.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Format', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Format':
            obj_ = ShippingDocumentFormat.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Format = obj_
            obj_.original_tagname_ = 'Format'
# end class GeneralAgencyAgreementDetail


class GetAllServicesAndPackagingProcessingOptionsRequested(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Options=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Options is None:
            self.Options = []
        else:
            self.Options = Options
        self.Options_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GetAllServicesAndPackagingProcessingOptionsRequested)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GetAllServicesAndPackagingProcessingOptionsRequested.subclass:
            return GetAllServicesAndPackagingProcessingOptionsRequested.subclass(*args_, **kwargs_)
        else:
            return GetAllServicesAndPackagingProcessingOptionsRequested(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Options(self):
        return self.Options
    def set_Options(self, Options):
        self.Options = Options
    def add_Options(self, value):
        self.Options.append(value)
    def insert_Options_at(self, index, value):
        self.Options.insert(index, value)
    def replace_Options_at(self, index, value):
        self.Options[index] = value
    def validate_GetAllServicesAndPackagingProcessingOptionType(self, value):
        result = True
        # Validate type GetAllServicesAndPackagingProcessingOptionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['EXCLUDE_ACCOUNT_ENABLEMENTS', 'EXCLUDE_CHANNEL_RESTRICTIONS', 'EXCLUDE_EXTENDED_ACCOUNT_RULES', 'EXCLUDE_GLOBAL_REGULATORY_RULES', 'EXCLUDE_INSURED_VALUE_RULES', 'EXCLUDE_RESTRICTIONS_AND_PRIVILEGES', 'EXCLUDE_WEIGHT_DIM_RULES', 'WEIGHT_AND_DROPOFF_NOT_REQUIRED']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on GetAllServicesAndPackagingProcessingOptionType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Options
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GetAllServicesAndPackagingProcessingOptionsRequested', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GetAllServicesAndPackagingProcessingOptionsRequested')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'GetAllServicesAndPackagingProcessingOptionsRequested':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GetAllServicesAndPackagingProcessingOptionsRequested')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GetAllServicesAndPackagingProcessingOptionsRequested', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GetAllServicesAndPackagingProcessingOptionsRequested'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GetAllServicesAndPackagingProcessingOptionsRequested', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Options_ in self.Options:
            namespaceprefix_ = self.Options_nsprefix_ + ':' if (UseCapturedNS_ and self.Options_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOptions>%s</%sOptions>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Options_), input_name='Options')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Options':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Options')
            value_ = self.gds_validate_string(value_, node, 'Options')
            self.Options.append(value_)
            self.Options_nsprefix_ = child_.prefix
            # validate type GetAllServicesAndPackagingProcessingOptionType
            self.validate_GetAllServicesAndPackagingProcessingOptionType(self.Options[-1])
# end class GetAllServicesAndPackagingProcessingOptionsRequested


class GetAllServicesAndPackagingReply(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, HighestSeverity=None, Notifications=None, TransactionDetail=None, Version=None, ProductDetails=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.HighestSeverity = HighestSeverity
        self.validate_NotificationSeverityType(self.HighestSeverity)
        self.HighestSeverity_nsprefix_ = "ns"
        if Notifications is None:
            self.Notifications = []
        else:
            self.Notifications = Notifications
        self.Notifications_nsprefix_ = "ns"
        self.TransactionDetail = TransactionDetail
        self.TransactionDetail_nsprefix_ = "ns"
        self.Version = Version
        self.Version_nsprefix_ = "ns"
        if ProductDetails is None:
            self.ProductDetails = []
        else:
            self.ProductDetails = ProductDetails
        self.ProductDetails_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GetAllServicesAndPackagingReply)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GetAllServicesAndPackagingReply.subclass:
            return GetAllServicesAndPackagingReply.subclass(*args_, **kwargs_)
        else:
            return GetAllServicesAndPackagingReply(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_HighestSeverity(self):
        return self.HighestSeverity
    def set_HighestSeverity(self, HighestSeverity):
        self.HighestSeverity = HighestSeverity
    def get_Notifications(self):
        return self.Notifications
    def set_Notifications(self, Notifications):
        self.Notifications = Notifications
    def add_Notifications(self, value):
        self.Notifications.append(value)
    def insert_Notifications_at(self, index, value):
        self.Notifications.insert(index, value)
    def replace_Notifications_at(self, index, value):
        self.Notifications[index] = value
    def get_TransactionDetail(self):
        return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail):
        self.TransactionDetail = TransactionDetail
    def get_Version(self):
        return self.Version
    def set_Version(self, Version):
        self.Version = Version
    def get_ProductDetails(self):
        return self.ProductDetails
    def set_ProductDetails(self, ProductDetails):
        self.ProductDetails = ProductDetails
    def add_ProductDetails(self, value):
        self.ProductDetails.append(value)
    def insert_ProductDetails_at(self, index, value):
        self.ProductDetails.insert(index, value)
    def replace_ProductDetails_at(self, index, value):
        self.ProductDetails[index] = value
    def validate_NotificationSeverityType(self, value):
        result = True
        # Validate type NotificationSeverityType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ERROR', 'FAILURE', 'NOTE', 'SUCCESS', 'WARNING']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on NotificationSeverityType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.HighestSeverity is not None or
            self.Notifications or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.ProductDetails
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GetAllServicesAndPackagingReply', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GetAllServicesAndPackagingReply')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'GetAllServicesAndPackagingReply':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GetAllServicesAndPackagingReply')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GetAllServicesAndPackagingReply', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GetAllServicesAndPackagingReply'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GetAllServicesAndPackagingReply', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.HighestSeverity is not None:
            namespaceprefix_ = self.HighestSeverity_nsprefix_ + ':' if (UseCapturedNS_ and self.HighestSeverity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHighestSeverity>%s</%sHighestSeverity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.HighestSeverity), input_name='HighestSeverity')), namespaceprefix_ , eol_))
        for Notifications_ in self.Notifications:
            namespaceprefix_ = self.Notifications_nsprefix_ + ':' if (UseCapturedNS_ and self.Notifications_nsprefix_) else ''
            Notifications_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Notifications', pretty_print=pretty_print)
        if self.TransactionDetail is not None:
            namespaceprefix_ = self.TransactionDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.TransactionDetail_nsprefix_) else ''
            self.TransactionDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TransactionDetail', pretty_print=pretty_print)
        if self.Version is not None:
            namespaceprefix_ = self.Version_nsprefix_ + ':' if (UseCapturedNS_ and self.Version_nsprefix_) else ''
            self.Version.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Version', pretty_print=pretty_print)
        for ProductDetails_ in self.ProductDetails:
            namespaceprefix_ = self.ProductDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.ProductDetails_nsprefix_) else ''
            ProductDetails_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ProductDetails', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'HighestSeverity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'HighestSeverity')
            value_ = self.gds_validate_string(value_, node, 'HighestSeverity')
            self.HighestSeverity = value_
            self.HighestSeverity_nsprefix_ = child_.prefix
            # validate type NotificationSeverityType
            self.validate_NotificationSeverityType(self.HighestSeverity)
        elif nodeName_ == 'Notifications':
            obj_ = Notification.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Notifications.append(obj_)
            obj_.original_tagname_ = 'Notifications'
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TransactionDetail = obj_
            obj_.original_tagname_ = 'TransactionDetail'
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Version = obj_
            obj_.original_tagname_ = 'Version'
        elif nodeName_ == 'ProductDetails':
            obj_ = ProductDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ProductDetails.append(obj_)
            obj_.original_tagname_ = 'ProductDetails'
# end class GetAllServicesAndPackagingReply


class GetAllServicesAndPackagingRequest(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, WebAuthenticationDetail=None, ClientDetail=None, UserDetail=None, TransactionDetail=None, Version=None, ApplicationId=None, ServiceLevel=None, ProcessingOptions=None, VariableOptions=None, Customer=None, RestrictionsAndPrivileges=None, OriginRoutingCode=None, DestinationRoutingCode=None, FormId=None, CarrierCodes=None, RequestedShipment=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.WebAuthenticationDetail = WebAuthenticationDetail
        self.WebAuthenticationDetail_nsprefix_ = "ns"
        self.ClientDetail = ClientDetail
        self.ClientDetail_nsprefix_ = "ns"
        self.UserDetail = UserDetail
        self.UserDetail_nsprefix_ = "ns"
        self.TransactionDetail = TransactionDetail
        self.TransactionDetail_nsprefix_ = "ns"
        self.Version = Version
        self.Version_nsprefix_ = "ns"
        self.ApplicationId = ApplicationId
        self.ApplicationId_nsprefix_ = None
        self.ServiceLevel = ServiceLevel
        self.validate_GetAllServicesAndPackagingServiceLevel(self.ServiceLevel)
        self.ServiceLevel_nsprefix_ = "ns"
        self.ProcessingOptions = ProcessingOptions
        self.ProcessingOptions_nsprefix_ = "ns"
        if VariableOptions is None:
            self.VariableOptions = []
        else:
            self.VariableOptions = VariableOptions
        self.VariableOptions_nsprefix_ = "ns"
        self.Customer = Customer
        self.Customer_nsprefix_ = "ns"
        self.RestrictionsAndPrivileges = RestrictionsAndPrivileges
        self.RestrictionsAndPrivileges_nsprefix_ = "ns"
        self.OriginRoutingCode = OriginRoutingCode
        self.OriginRoutingCode_nsprefix_ = None
        self.DestinationRoutingCode = DestinationRoutingCode
        self.DestinationRoutingCode_nsprefix_ = None
        self.FormId = FormId
        self.FormId_nsprefix_ = None
        if CarrierCodes is None:
            self.CarrierCodes = []
        else:
            self.CarrierCodes = CarrierCodes
        self.CarrierCodes_nsprefix_ = "ns"
        self.RequestedShipment = RequestedShipment
        self.RequestedShipment_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GetAllServicesAndPackagingRequest)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GetAllServicesAndPackagingRequest.subclass:
            return GetAllServicesAndPackagingRequest.subclass(*args_, **kwargs_)
        else:
            return GetAllServicesAndPackagingRequest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_WebAuthenticationDetail(self):
        return self.WebAuthenticationDetail
    def set_WebAuthenticationDetail(self, WebAuthenticationDetail):
        self.WebAuthenticationDetail = WebAuthenticationDetail
    def get_ClientDetail(self):
        return self.ClientDetail
    def set_ClientDetail(self, ClientDetail):
        self.ClientDetail = ClientDetail
    def get_UserDetail(self):
        return self.UserDetail
    def set_UserDetail(self, UserDetail):
        self.UserDetail = UserDetail
    def get_TransactionDetail(self):
        return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail):
        self.TransactionDetail = TransactionDetail
    def get_Version(self):
        return self.Version
    def set_Version(self, Version):
        self.Version = Version
    def get_ApplicationId(self):
        return self.ApplicationId
    def set_ApplicationId(self, ApplicationId):
        self.ApplicationId = ApplicationId
    def get_ServiceLevel(self):
        return self.ServiceLevel
    def set_ServiceLevel(self, ServiceLevel):
        self.ServiceLevel = ServiceLevel
    def get_ProcessingOptions(self):
        return self.ProcessingOptions
    def set_ProcessingOptions(self, ProcessingOptions):
        self.ProcessingOptions = ProcessingOptions
    def get_VariableOptions(self):
        return self.VariableOptions
    def set_VariableOptions(self, VariableOptions):
        self.VariableOptions = VariableOptions
    def add_VariableOptions(self, value):
        self.VariableOptions.append(value)
    def insert_VariableOptions_at(self, index, value):
        self.VariableOptions.insert(index, value)
    def replace_VariableOptions_at(self, index, value):
        self.VariableOptions[index] = value
    def get_Customer(self):
        return self.Customer
    def set_Customer(self, Customer):
        self.Customer = Customer
    def get_RestrictionsAndPrivileges(self):
        return self.RestrictionsAndPrivileges
    def set_RestrictionsAndPrivileges(self, RestrictionsAndPrivileges):
        self.RestrictionsAndPrivileges = RestrictionsAndPrivileges
    def get_OriginRoutingCode(self):
        return self.OriginRoutingCode
    def set_OriginRoutingCode(self, OriginRoutingCode):
        self.OriginRoutingCode = OriginRoutingCode
    def get_DestinationRoutingCode(self):
        return self.DestinationRoutingCode
    def set_DestinationRoutingCode(self, DestinationRoutingCode):
        self.DestinationRoutingCode = DestinationRoutingCode
    def get_FormId(self):
        return self.FormId
    def set_FormId(self, FormId):
        self.FormId = FormId
    def get_CarrierCodes(self):
        return self.CarrierCodes
    def set_CarrierCodes(self, CarrierCodes):
        self.CarrierCodes = CarrierCodes
    def add_CarrierCodes(self, value):
        self.CarrierCodes.append(value)
    def insert_CarrierCodes_at(self, index, value):
        self.CarrierCodes.insert(index, value)
    def replace_CarrierCodes_at(self, index, value):
        self.CarrierCodes[index] = value
    def get_RequestedShipment(self):
        return self.RequestedShipment
    def set_RequestedShipment(self, RequestedShipment):
        self.RequestedShipment = RequestedShipment
    def validate_GetAllServicesAndPackagingServiceLevel(self, value):
        result = True
        # Validate type GetAllServicesAndPackagingServiceLevel, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['EXTERNAL', 'INTERNAL', 'OPERATIONS']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on GetAllServicesAndPackagingServiceLevel' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_ServiceOptionType(self, value):
        result = True
        # Validate type ServiceOptionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FEDEX_ONE_RATE', 'FREIGHT_GUARANTEE', 'SATURDAY_DELIVERY', 'SMART_POST_ALLOWED_INDICIA', 'SMART_POST_HUB_ID']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ServiceOptionType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_CarrierCodeType(self, value):
        result = True
        # Validate type CarrierCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FDXC', 'FDXE', 'FDXG', 'FDXO', 'FXCC', 'FXFR', 'FXSP']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CarrierCodeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.WebAuthenticationDetail is not None or
            self.ClientDetail is not None or
            self.UserDetail is not None or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.ApplicationId is not None or
            self.ServiceLevel is not None or
            self.ProcessingOptions is not None or
            self.VariableOptions or
            self.Customer is not None or
            self.RestrictionsAndPrivileges is not None or
            self.OriginRoutingCode is not None or
            self.DestinationRoutingCode is not None or
            self.FormId is not None or
            self.CarrierCodes or
            self.RequestedShipment is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GetAllServicesAndPackagingRequest', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GetAllServicesAndPackagingRequest')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'GetAllServicesAndPackagingRequest':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GetAllServicesAndPackagingRequest')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GetAllServicesAndPackagingRequest', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GetAllServicesAndPackagingRequest'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GetAllServicesAndPackagingRequest', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.WebAuthenticationDetail is not None:
            namespaceprefix_ = self.WebAuthenticationDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.WebAuthenticationDetail_nsprefix_) else ''
            self.WebAuthenticationDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='WebAuthenticationDetail', pretty_print=pretty_print)
        if self.ClientDetail is not None:
            namespaceprefix_ = self.ClientDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.ClientDetail_nsprefix_) else ''
            self.ClientDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ClientDetail', pretty_print=pretty_print)
        if self.UserDetail is not None:
            namespaceprefix_ = self.UserDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.UserDetail_nsprefix_) else ''
            self.UserDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='UserDetail', pretty_print=pretty_print)
        if self.TransactionDetail is not None:
            namespaceprefix_ = self.TransactionDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.TransactionDetail_nsprefix_) else ''
            self.TransactionDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TransactionDetail', pretty_print=pretty_print)
        if self.Version is not None:
            namespaceprefix_ = self.Version_nsprefix_ + ':' if (UseCapturedNS_ and self.Version_nsprefix_) else ''
            self.Version.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Version', pretty_print=pretty_print)
        if self.ApplicationId is not None:
            namespaceprefix_ = self.ApplicationId_nsprefix_ + ':' if (UseCapturedNS_ and self.ApplicationId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sApplicationId>%s</%sApplicationId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ApplicationId), input_name='ApplicationId')), namespaceprefix_ , eol_))
        if self.ServiceLevel is not None:
            namespaceprefix_ = self.ServiceLevel_nsprefix_ + ':' if (UseCapturedNS_ and self.ServiceLevel_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sServiceLevel>%s</%sServiceLevel>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ServiceLevel), input_name='ServiceLevel')), namespaceprefix_ , eol_))
        if self.ProcessingOptions is not None:
            namespaceprefix_ = self.ProcessingOptions_nsprefix_ + ':' if (UseCapturedNS_ and self.ProcessingOptions_nsprefix_) else ''
            self.ProcessingOptions.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ProcessingOptions', pretty_print=pretty_print)
        for VariableOptions_ in self.VariableOptions:
            namespaceprefix_ = self.VariableOptions_nsprefix_ + ':' if (UseCapturedNS_ and self.VariableOptions_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVariableOptions>%s</%sVariableOptions>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(VariableOptions_), input_name='VariableOptions')), namespaceprefix_ , eol_))
        if self.Customer is not None:
            namespaceprefix_ = self.Customer_nsprefix_ + ':' if (UseCapturedNS_ and self.Customer_nsprefix_) else ''
            self.Customer.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Customer', pretty_print=pretty_print)
        if self.RestrictionsAndPrivileges is not None:
            namespaceprefix_ = self.RestrictionsAndPrivileges_nsprefix_ + ':' if (UseCapturedNS_ and self.RestrictionsAndPrivileges_nsprefix_) else ''
            self.RestrictionsAndPrivileges.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RestrictionsAndPrivileges', pretty_print=pretty_print)
        if self.OriginRoutingCode is not None:
            namespaceprefix_ = self.OriginRoutingCode_nsprefix_ + ':' if (UseCapturedNS_ and self.OriginRoutingCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOriginRoutingCode>%s</%sOriginRoutingCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OriginRoutingCode), input_name='OriginRoutingCode')), namespaceprefix_ , eol_))
        if self.DestinationRoutingCode is not None:
            namespaceprefix_ = self.DestinationRoutingCode_nsprefix_ + ':' if (UseCapturedNS_ and self.DestinationRoutingCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDestinationRoutingCode>%s</%sDestinationRoutingCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DestinationRoutingCode), input_name='DestinationRoutingCode')), namespaceprefix_ , eol_))
        if self.FormId is not None:
            namespaceprefix_ = self.FormId_nsprefix_ + ':' if (UseCapturedNS_ and self.FormId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFormId>%s</%sFormId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FormId), input_name='FormId')), namespaceprefix_ , eol_))
        for CarrierCodes_ in self.CarrierCodes:
            namespaceprefix_ = self.CarrierCodes_nsprefix_ + ':' if (UseCapturedNS_ and self.CarrierCodes_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCarrierCodes>%s</%sCarrierCodes>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(CarrierCodes_), input_name='CarrierCodes')), namespaceprefix_ , eol_))
        if self.RequestedShipment is not None:
            namespaceprefix_ = self.RequestedShipment_nsprefix_ + ':' if (UseCapturedNS_ and self.RequestedShipment_nsprefix_) else ''
            self.RequestedShipment.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RequestedShipment', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'WebAuthenticationDetail':
            obj_ = WebAuthenticationDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.WebAuthenticationDetail = obj_
            obj_.original_tagname_ = 'WebAuthenticationDetail'
        elif nodeName_ == 'ClientDetail':
            obj_ = ClientDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ClientDetail = obj_
            obj_.original_tagname_ = 'ClientDetail'
        elif nodeName_ == 'UserDetail':
            obj_ = UserDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.UserDetail = obj_
            obj_.original_tagname_ = 'UserDetail'
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TransactionDetail = obj_
            obj_.original_tagname_ = 'TransactionDetail'
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Version = obj_
            obj_.original_tagname_ = 'Version'
        elif nodeName_ == 'ApplicationId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ApplicationId')
            value_ = self.gds_validate_string(value_, node, 'ApplicationId')
            self.ApplicationId = value_
            self.ApplicationId_nsprefix_ = child_.prefix
        elif nodeName_ == 'ServiceLevel':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ServiceLevel')
            value_ = self.gds_validate_string(value_, node, 'ServiceLevel')
            self.ServiceLevel = value_
            self.ServiceLevel_nsprefix_ = child_.prefix
            # validate type GetAllServicesAndPackagingServiceLevel
            self.validate_GetAllServicesAndPackagingServiceLevel(self.ServiceLevel)
        elif nodeName_ == 'ProcessingOptions':
            obj_ = GetAllServicesAndPackagingProcessingOptionsRequested.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ProcessingOptions = obj_
            obj_.original_tagname_ = 'ProcessingOptions'
        elif nodeName_ == 'VariableOptions':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'VariableOptions')
            value_ = self.gds_validate_string(value_, node, 'VariableOptions')
            self.VariableOptions.append(value_)
            self.VariableOptions_nsprefix_ = child_.prefix
            # validate type ServiceOptionType
            self.validate_ServiceOptionType(self.VariableOptions[-1])
        elif nodeName_ == 'Customer':
            obj_ = EnterpriseCustomer.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Customer = obj_
            obj_.original_tagname_ = 'Customer'
        elif nodeName_ == 'RestrictionsAndPrivileges':
            obj_ = RestrictionsAndPrivilegesPolicyDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RestrictionsAndPrivileges = obj_
            obj_.original_tagname_ = 'RestrictionsAndPrivileges'
        elif nodeName_ == 'OriginRoutingCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'OriginRoutingCode')
            value_ = self.gds_validate_string(value_, node, 'OriginRoutingCode')
            self.OriginRoutingCode = value_
            self.OriginRoutingCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'DestinationRoutingCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DestinationRoutingCode')
            value_ = self.gds_validate_string(value_, node, 'DestinationRoutingCode')
            self.DestinationRoutingCode = value_
            self.DestinationRoutingCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'FormId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FormId')
            value_ = self.gds_validate_string(value_, node, 'FormId')
            self.FormId = value_
            self.FormId_nsprefix_ = child_.prefix
        elif nodeName_ == 'CarrierCodes':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CarrierCodes')
            value_ = self.gds_validate_string(value_, node, 'CarrierCodes')
            self.CarrierCodes.append(value_)
            self.CarrierCodes_nsprefix_ = child_.prefix
            # validate type CarrierCodeType
            self.validate_CarrierCodeType(self.CarrierCodes[-1])
        elif nodeName_ == 'RequestedShipment':
            obj_ = RequestedShipment.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RequestedShipment = obj_
            obj_.original_tagname_ = 'RequestedShipment'
# end class GetAllServicesAndPackagingRequest


class GetAllSignatureOptionsReply(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, HighestSeverity=None, Notifications=None, TransactionDetail=None, Version=None, SignatureOptionsShipmentDetail=None, SignatureOptionsPackageDetails=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.HighestSeverity = HighestSeverity
        self.validate_NotificationSeverityType(self.HighestSeverity)
        self.HighestSeverity_nsprefix_ = "ns"
        if Notifications is None:
            self.Notifications = []
        else:
            self.Notifications = Notifications
        self.Notifications_nsprefix_ = "ns"
        self.TransactionDetail = TransactionDetail
        self.TransactionDetail_nsprefix_ = "ns"
        self.Version = Version
        self.Version_nsprefix_ = "ns"
        self.SignatureOptionsShipmentDetail = SignatureOptionsShipmentDetail
        self.SignatureOptionsShipmentDetail_nsprefix_ = "ns"
        if SignatureOptionsPackageDetails is None:
            self.SignatureOptionsPackageDetails = []
        else:
            self.SignatureOptionsPackageDetails = SignatureOptionsPackageDetails
        self.SignatureOptionsPackageDetails_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GetAllSignatureOptionsReply)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GetAllSignatureOptionsReply.subclass:
            return GetAllSignatureOptionsReply.subclass(*args_, **kwargs_)
        else:
            return GetAllSignatureOptionsReply(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_HighestSeverity(self):
        return self.HighestSeverity
    def set_HighestSeverity(self, HighestSeverity):
        self.HighestSeverity = HighestSeverity
    def get_Notifications(self):
        return self.Notifications
    def set_Notifications(self, Notifications):
        self.Notifications = Notifications
    def add_Notifications(self, value):
        self.Notifications.append(value)
    def insert_Notifications_at(self, index, value):
        self.Notifications.insert(index, value)
    def replace_Notifications_at(self, index, value):
        self.Notifications[index] = value
    def get_TransactionDetail(self):
        return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail):
        self.TransactionDetail = TransactionDetail
    def get_Version(self):
        return self.Version
    def set_Version(self, Version):
        self.Version = Version
    def get_SignatureOptionsShipmentDetail(self):
        return self.SignatureOptionsShipmentDetail
    def set_SignatureOptionsShipmentDetail(self, SignatureOptionsShipmentDetail):
        self.SignatureOptionsShipmentDetail = SignatureOptionsShipmentDetail
    def get_SignatureOptionsPackageDetails(self):
        return self.SignatureOptionsPackageDetails
    def set_SignatureOptionsPackageDetails(self, SignatureOptionsPackageDetails):
        self.SignatureOptionsPackageDetails = SignatureOptionsPackageDetails
    def add_SignatureOptionsPackageDetails(self, value):
        self.SignatureOptionsPackageDetails.append(value)
    def insert_SignatureOptionsPackageDetails_at(self, index, value):
        self.SignatureOptionsPackageDetails.insert(index, value)
    def replace_SignatureOptionsPackageDetails_at(self, index, value):
        self.SignatureOptionsPackageDetails[index] = value
    def validate_NotificationSeverityType(self, value):
        result = True
        # Validate type NotificationSeverityType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ERROR', 'FAILURE', 'NOTE', 'SUCCESS', 'WARNING']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on NotificationSeverityType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.HighestSeverity is not None or
            self.Notifications or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.SignatureOptionsShipmentDetail is not None or
            self.SignatureOptionsPackageDetails
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GetAllSignatureOptionsReply', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GetAllSignatureOptionsReply')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'GetAllSignatureOptionsReply':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GetAllSignatureOptionsReply')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GetAllSignatureOptionsReply', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GetAllSignatureOptionsReply'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GetAllSignatureOptionsReply', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.HighestSeverity is not None:
            namespaceprefix_ = self.HighestSeverity_nsprefix_ + ':' if (UseCapturedNS_ and self.HighestSeverity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHighestSeverity>%s</%sHighestSeverity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.HighestSeverity), input_name='HighestSeverity')), namespaceprefix_ , eol_))
        for Notifications_ in self.Notifications:
            namespaceprefix_ = self.Notifications_nsprefix_ + ':' if (UseCapturedNS_ and self.Notifications_nsprefix_) else ''
            Notifications_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Notifications', pretty_print=pretty_print)
        if self.TransactionDetail is not None:
            namespaceprefix_ = self.TransactionDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.TransactionDetail_nsprefix_) else ''
            self.TransactionDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TransactionDetail', pretty_print=pretty_print)
        if self.Version is not None:
            namespaceprefix_ = self.Version_nsprefix_ + ':' if (UseCapturedNS_ and self.Version_nsprefix_) else ''
            self.Version.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Version', pretty_print=pretty_print)
        if self.SignatureOptionsShipmentDetail is not None:
            namespaceprefix_ = self.SignatureOptionsShipmentDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.SignatureOptionsShipmentDetail_nsprefix_) else ''
            self.SignatureOptionsShipmentDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SignatureOptionsShipmentDetail', pretty_print=pretty_print)
        for SignatureOptionsPackageDetails_ in self.SignatureOptionsPackageDetails:
            namespaceprefix_ = self.SignatureOptionsPackageDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.SignatureOptionsPackageDetails_nsprefix_) else ''
            SignatureOptionsPackageDetails_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SignatureOptionsPackageDetails', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'HighestSeverity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'HighestSeverity')
            value_ = self.gds_validate_string(value_, node, 'HighestSeverity')
            self.HighestSeverity = value_
            self.HighestSeverity_nsprefix_ = child_.prefix
            # validate type NotificationSeverityType
            self.validate_NotificationSeverityType(self.HighestSeverity)
        elif nodeName_ == 'Notifications':
            obj_ = Notification.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Notifications.append(obj_)
            obj_.original_tagname_ = 'Notifications'
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TransactionDetail = obj_
            obj_.original_tagname_ = 'TransactionDetail'
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Version = obj_
            obj_.original_tagname_ = 'Version'
        elif nodeName_ == 'SignatureOptionsShipmentDetail':
            obj_ = AllSignatureOptionsDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SignatureOptionsShipmentDetail = obj_
            obj_.original_tagname_ = 'SignatureOptionsShipmentDetail'
        elif nodeName_ == 'SignatureOptionsPackageDetails':
            obj_ = AllSignatureOptionsDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SignatureOptionsPackageDetails.append(obj_)
            obj_.original_tagname_ = 'SignatureOptionsPackageDetails'
# end class GetAllSignatureOptionsReply


class GetAllSignatureOptionsRequest(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, WebAuthenticationDetail=None, ClientDetail=None, UserDetail=None, TransactionDetail=None, Version=None, ApplicationId=None, FormId=None, RequestedShipment=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.WebAuthenticationDetail = WebAuthenticationDetail
        self.WebAuthenticationDetail_nsprefix_ = "ns"
        self.ClientDetail = ClientDetail
        self.ClientDetail_nsprefix_ = "ns"
        self.UserDetail = UserDetail
        self.UserDetail_nsprefix_ = "ns"
        self.TransactionDetail = TransactionDetail
        self.TransactionDetail_nsprefix_ = "ns"
        self.Version = Version
        self.Version_nsprefix_ = "ns"
        self.ApplicationId = ApplicationId
        self.ApplicationId_nsprefix_ = None
        self.FormId = FormId
        self.FormId_nsprefix_ = None
        self.RequestedShipment = RequestedShipment
        self.RequestedShipment_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GetAllSignatureOptionsRequest)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GetAllSignatureOptionsRequest.subclass:
            return GetAllSignatureOptionsRequest.subclass(*args_, **kwargs_)
        else:
            return GetAllSignatureOptionsRequest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_WebAuthenticationDetail(self):
        return self.WebAuthenticationDetail
    def set_WebAuthenticationDetail(self, WebAuthenticationDetail):
        self.WebAuthenticationDetail = WebAuthenticationDetail
    def get_ClientDetail(self):
        return self.ClientDetail
    def set_ClientDetail(self, ClientDetail):
        self.ClientDetail = ClientDetail
    def get_UserDetail(self):
        return self.UserDetail
    def set_UserDetail(self, UserDetail):
        self.UserDetail = UserDetail
    def get_TransactionDetail(self):
        return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail):
        self.TransactionDetail = TransactionDetail
    def get_Version(self):
        return self.Version
    def set_Version(self, Version):
        self.Version = Version
    def get_ApplicationId(self):
        return self.ApplicationId
    def set_ApplicationId(self, ApplicationId):
        self.ApplicationId = ApplicationId
    def get_FormId(self):
        return self.FormId
    def set_FormId(self, FormId):
        self.FormId = FormId
    def get_RequestedShipment(self):
        return self.RequestedShipment
    def set_RequestedShipment(self, RequestedShipment):
        self.RequestedShipment = RequestedShipment
    def hasContent_(self):
        if (
            self.WebAuthenticationDetail is not None or
            self.ClientDetail is not None or
            self.UserDetail is not None or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.ApplicationId is not None or
            self.FormId is not None or
            self.RequestedShipment is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GetAllSignatureOptionsRequest', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GetAllSignatureOptionsRequest')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'GetAllSignatureOptionsRequest':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GetAllSignatureOptionsRequest')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GetAllSignatureOptionsRequest', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GetAllSignatureOptionsRequest'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GetAllSignatureOptionsRequest', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.WebAuthenticationDetail is not None:
            namespaceprefix_ = self.WebAuthenticationDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.WebAuthenticationDetail_nsprefix_) else ''
            self.WebAuthenticationDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='WebAuthenticationDetail', pretty_print=pretty_print)
        if self.ClientDetail is not None:
            namespaceprefix_ = self.ClientDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.ClientDetail_nsprefix_) else ''
            self.ClientDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ClientDetail', pretty_print=pretty_print)
        if self.UserDetail is not None:
            namespaceprefix_ = self.UserDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.UserDetail_nsprefix_) else ''
            self.UserDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='UserDetail', pretty_print=pretty_print)
        if self.TransactionDetail is not None:
            namespaceprefix_ = self.TransactionDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.TransactionDetail_nsprefix_) else ''
            self.TransactionDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TransactionDetail', pretty_print=pretty_print)
        if self.Version is not None:
            namespaceprefix_ = self.Version_nsprefix_ + ':' if (UseCapturedNS_ and self.Version_nsprefix_) else ''
            self.Version.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Version', pretty_print=pretty_print)
        if self.ApplicationId is not None:
            namespaceprefix_ = self.ApplicationId_nsprefix_ + ':' if (UseCapturedNS_ and self.ApplicationId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sApplicationId>%s</%sApplicationId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ApplicationId), input_name='ApplicationId')), namespaceprefix_ , eol_))
        if self.FormId is not None:
            namespaceprefix_ = self.FormId_nsprefix_ + ':' if (UseCapturedNS_ and self.FormId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFormId>%s</%sFormId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FormId), input_name='FormId')), namespaceprefix_ , eol_))
        if self.RequestedShipment is not None:
            namespaceprefix_ = self.RequestedShipment_nsprefix_ + ':' if (UseCapturedNS_ and self.RequestedShipment_nsprefix_) else ''
            self.RequestedShipment.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RequestedShipment', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'WebAuthenticationDetail':
            obj_ = WebAuthenticationDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.WebAuthenticationDetail = obj_
            obj_.original_tagname_ = 'WebAuthenticationDetail'
        elif nodeName_ == 'ClientDetail':
            obj_ = ClientDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ClientDetail = obj_
            obj_.original_tagname_ = 'ClientDetail'
        elif nodeName_ == 'UserDetail':
            obj_ = UserDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.UserDetail = obj_
            obj_.original_tagname_ = 'UserDetail'
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TransactionDetail = obj_
            obj_.original_tagname_ = 'TransactionDetail'
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Version = obj_
            obj_.original_tagname_ = 'Version'
        elif nodeName_ == 'ApplicationId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ApplicationId')
            value_ = self.gds_validate_string(value_, node, 'ApplicationId')
            self.ApplicationId = value_
            self.ApplicationId_nsprefix_ = child_.prefix
        elif nodeName_ == 'FormId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FormId')
            value_ = self.gds_validate_string(value_, node, 'FormId')
            self.FormId = value_
            self.FormId_nsprefix_ = child_.prefix
        elif nodeName_ == 'RequestedShipment':
            obj_ = RequestedShipment.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RequestedShipment = obj_
            obj_.original_tagname_ = 'RequestedShipment'
# end class GetAllSignatureOptionsRequest


class GetAllSpecialServicesProcessingOptionsRequested(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Options=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Options is None:
            self.Options = []
        else:
            self.Options = Options
        self.Options_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GetAllSpecialServicesProcessingOptionsRequested)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GetAllSpecialServicesProcessingOptionsRequested.subclass:
            return GetAllSpecialServicesProcessingOptionsRequested.subclass(*args_, **kwargs_)
        else:
            return GetAllSpecialServicesProcessingOptionsRequested(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Options(self):
        return self.Options
    def set_Options(self, Options):
        self.Options = Options
    def add_Options(self, value):
        self.Options.append(value)
    def insert_Options_at(self, index, value):
        self.Options.insert(index, value)
    def replace_Options_at(self, index, value):
        self.Options[index] = value
    def validate_GetAllSpecialServicesProcessingOptionType(self, value):
        result = True
        # Validate type GetAllSpecialServicesProcessingOptionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['EXCLUDE_ACCOUNT_ENABLEMENTS', 'EXCLUDE_CHANNEL_RESTRICTIONS', 'EXCLUDE_EXTENDED_ACCOUNT_RULES', 'EXCLUDE_GLOBAL_REGULATORY_RULES', 'EXCLUDE_INSURED_VALUE_RULES', 'EXCLUDE_RESTRICTIONS_AND_PRIVILEGES', 'EXCLUDE_WEIGHT_DIM_RULES', 'INCLUDE_OPERATIONAL_SERVICE_OPTIONS']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on GetAllSpecialServicesProcessingOptionType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Options
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GetAllSpecialServicesProcessingOptionsRequested', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GetAllSpecialServicesProcessingOptionsRequested')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'GetAllSpecialServicesProcessingOptionsRequested':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GetAllSpecialServicesProcessingOptionsRequested')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GetAllSpecialServicesProcessingOptionsRequested', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GetAllSpecialServicesProcessingOptionsRequested'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GetAllSpecialServicesProcessingOptionsRequested', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Options_ in self.Options:
            namespaceprefix_ = self.Options_nsprefix_ + ':' if (UseCapturedNS_ and self.Options_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOptions>%s</%sOptions>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Options_), input_name='Options')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Options':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Options')
            value_ = self.gds_validate_string(value_, node, 'Options')
            self.Options.append(value_)
            self.Options_nsprefix_ = child_.prefix
            # validate type GetAllSpecialServicesProcessingOptionType
            self.validate_GetAllSpecialServicesProcessingOptionType(self.Options[-1])
# end class GetAllSpecialServicesProcessingOptionsRequested


class GetAllSpecialServicesReply(GeneratedsSuper):
    """The response from PMIS requests for special services data."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, HighestSeverity=None, Notifications=None, TransactionDetail=None, Version=None, ValidShipmentSpecialServices=None, ValidPackageSpecialServices=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.HighestSeverity = HighestSeverity
        self.validate_NotificationSeverityType(self.HighestSeverity)
        self.HighestSeverity_nsprefix_ = "ns"
        if Notifications is None:
            self.Notifications = []
        else:
            self.Notifications = Notifications
        self.Notifications_nsprefix_ = "ns"
        self.TransactionDetail = TransactionDetail
        self.TransactionDetail_nsprefix_ = "ns"
        self.Version = Version
        self.Version_nsprefix_ = "ns"
        if ValidShipmentSpecialServices is None:
            self.ValidShipmentSpecialServices = []
        else:
            self.ValidShipmentSpecialServices = ValidShipmentSpecialServices
        self.ValidShipmentSpecialServices_nsprefix_ = "ns"
        if ValidPackageSpecialServices is None:
            self.ValidPackageSpecialServices = []
        else:
            self.ValidPackageSpecialServices = ValidPackageSpecialServices
        self.ValidPackageSpecialServices_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GetAllSpecialServicesReply)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GetAllSpecialServicesReply.subclass:
            return GetAllSpecialServicesReply.subclass(*args_, **kwargs_)
        else:
            return GetAllSpecialServicesReply(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_HighestSeverity(self):
        return self.HighestSeverity
    def set_HighestSeverity(self, HighestSeverity):
        self.HighestSeverity = HighestSeverity
    def get_Notifications(self):
        return self.Notifications
    def set_Notifications(self, Notifications):
        self.Notifications = Notifications
    def add_Notifications(self, value):
        self.Notifications.append(value)
    def insert_Notifications_at(self, index, value):
        self.Notifications.insert(index, value)
    def replace_Notifications_at(self, index, value):
        self.Notifications[index] = value
    def get_TransactionDetail(self):
        return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail):
        self.TransactionDetail = TransactionDetail
    def get_Version(self):
        return self.Version
    def set_Version(self, Version):
        self.Version = Version
    def get_ValidShipmentSpecialServices(self):
        return self.ValidShipmentSpecialServices
    def set_ValidShipmentSpecialServices(self, ValidShipmentSpecialServices):
        self.ValidShipmentSpecialServices = ValidShipmentSpecialServices
    def add_ValidShipmentSpecialServices(self, value):
        self.ValidShipmentSpecialServices.append(value)
    def insert_ValidShipmentSpecialServices_at(self, index, value):
        self.ValidShipmentSpecialServices.insert(index, value)
    def replace_ValidShipmentSpecialServices_at(self, index, value):
        self.ValidShipmentSpecialServices[index] = value
    def get_ValidPackageSpecialServices(self):
        return self.ValidPackageSpecialServices
    def set_ValidPackageSpecialServices(self, ValidPackageSpecialServices):
        self.ValidPackageSpecialServices = ValidPackageSpecialServices
    def add_ValidPackageSpecialServices(self, value):
        self.ValidPackageSpecialServices.append(value)
    def insert_ValidPackageSpecialServices_at(self, index, value):
        self.ValidPackageSpecialServices.insert(index, value)
    def replace_ValidPackageSpecialServices_at(self, index, value):
        self.ValidPackageSpecialServices[index] = value
    def validate_NotificationSeverityType(self, value):
        result = True
        # Validate type NotificationSeverityType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ERROR', 'FAILURE', 'NOTE', 'SUCCESS', 'WARNING']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on NotificationSeverityType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.HighestSeverity is not None or
            self.Notifications or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.ValidShipmentSpecialServices or
            self.ValidPackageSpecialServices
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GetAllSpecialServicesReply', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GetAllSpecialServicesReply')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'GetAllSpecialServicesReply':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GetAllSpecialServicesReply')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GetAllSpecialServicesReply', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GetAllSpecialServicesReply'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GetAllSpecialServicesReply', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.HighestSeverity is not None:
            namespaceprefix_ = self.HighestSeverity_nsprefix_ + ':' if (UseCapturedNS_ and self.HighestSeverity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHighestSeverity>%s</%sHighestSeverity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.HighestSeverity), input_name='HighestSeverity')), namespaceprefix_ , eol_))
        for Notifications_ in self.Notifications:
            namespaceprefix_ = self.Notifications_nsprefix_ + ':' if (UseCapturedNS_ and self.Notifications_nsprefix_) else ''
            Notifications_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Notifications', pretty_print=pretty_print)
        if self.TransactionDetail is not None:
            namespaceprefix_ = self.TransactionDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.TransactionDetail_nsprefix_) else ''
            self.TransactionDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TransactionDetail', pretty_print=pretty_print)
        if self.Version is not None:
            namespaceprefix_ = self.Version_nsprefix_ + ':' if (UseCapturedNS_ and self.Version_nsprefix_) else ''
            self.Version.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Version', pretty_print=pretty_print)
        for ValidShipmentSpecialServices_ in self.ValidShipmentSpecialServices:
            namespaceprefix_ = self.ValidShipmentSpecialServices_nsprefix_ + ':' if (UseCapturedNS_ and self.ValidShipmentSpecialServices_nsprefix_) else ''
            ValidShipmentSpecialServices_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ValidShipmentSpecialServices', pretty_print=pretty_print)
        for ValidPackageSpecialServices_ in self.ValidPackageSpecialServices:
            namespaceprefix_ = self.ValidPackageSpecialServices_nsprefix_ + ':' if (UseCapturedNS_ and self.ValidPackageSpecialServices_nsprefix_) else ''
            ValidPackageSpecialServices_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ValidPackageSpecialServices', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'HighestSeverity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'HighestSeverity')
            value_ = self.gds_validate_string(value_, node, 'HighestSeverity')
            self.HighestSeverity = value_
            self.HighestSeverity_nsprefix_ = child_.prefix
            # validate type NotificationSeverityType
            self.validate_NotificationSeverityType(self.HighestSeverity)
        elif nodeName_ == 'Notifications':
            obj_ = Notification.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Notifications.append(obj_)
            obj_.original_tagname_ = 'Notifications'
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TransactionDetail = obj_
            obj_.original_tagname_ = 'TransactionDetail'
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Version = obj_
            obj_.original_tagname_ = 'Version'
        elif nodeName_ == 'ValidShipmentSpecialServices':
            obj_ = ShipmentSpecialServiceDescription.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ValidShipmentSpecialServices.append(obj_)
            obj_.original_tagname_ = 'ValidShipmentSpecialServices'
        elif nodeName_ == 'ValidPackageSpecialServices':
            obj_ = PackageSpecialServiceDescription.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ValidPackageSpecialServices.append(obj_)
            obj_.original_tagname_ = 'ValidPackageSpecialServices'
# end class GetAllSpecialServicesReply


class GetAllSpecialServicesRequest(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, WebAuthenticationDetail=None, ClientDetail=None, UserDetail=None, TransactionDetail=None, Version=None, ServiceLevel=None, ProcessingOptions=None, Customer=None, RestrictionsAndPrivileges=None, OriginRoutingCode=None, DestinationRoutingCode=None, FormId=None, CarrierCodes=None, RequestedShipment=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.WebAuthenticationDetail = WebAuthenticationDetail
        self.WebAuthenticationDetail_nsprefix_ = "ns"
        self.ClientDetail = ClientDetail
        self.ClientDetail_nsprefix_ = "ns"
        self.UserDetail = UserDetail
        self.UserDetail_nsprefix_ = "ns"
        self.TransactionDetail = TransactionDetail
        self.TransactionDetail_nsprefix_ = "ns"
        self.Version = Version
        self.Version_nsprefix_ = "ns"
        self.ServiceLevel = ServiceLevel
        self.validate_GetAllSpecialServicesServiceLevel(self.ServiceLevel)
        self.ServiceLevel_nsprefix_ = "ns"
        self.ProcessingOptions = ProcessingOptions
        self.ProcessingOptions_nsprefix_ = "ns"
        self.Customer = Customer
        self.Customer_nsprefix_ = "ns"
        self.RestrictionsAndPrivileges = RestrictionsAndPrivileges
        self.RestrictionsAndPrivileges_nsprefix_ = "ns"
        self.OriginRoutingCode = OriginRoutingCode
        self.OriginRoutingCode_nsprefix_ = None
        self.DestinationRoutingCode = DestinationRoutingCode
        self.DestinationRoutingCode_nsprefix_ = None
        self.FormId = FormId
        self.FormId_nsprefix_ = None
        if CarrierCodes is None:
            self.CarrierCodes = []
        else:
            self.CarrierCodes = CarrierCodes
        self.CarrierCodes_nsprefix_ = "ns"
        self.RequestedShipment = RequestedShipment
        self.RequestedShipment_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GetAllSpecialServicesRequest)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GetAllSpecialServicesRequest.subclass:
            return GetAllSpecialServicesRequest.subclass(*args_, **kwargs_)
        else:
            return GetAllSpecialServicesRequest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_WebAuthenticationDetail(self):
        return self.WebAuthenticationDetail
    def set_WebAuthenticationDetail(self, WebAuthenticationDetail):
        self.WebAuthenticationDetail = WebAuthenticationDetail
    def get_ClientDetail(self):
        return self.ClientDetail
    def set_ClientDetail(self, ClientDetail):
        self.ClientDetail = ClientDetail
    def get_UserDetail(self):
        return self.UserDetail
    def set_UserDetail(self, UserDetail):
        self.UserDetail = UserDetail
    def get_TransactionDetail(self):
        return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail):
        self.TransactionDetail = TransactionDetail
    def get_Version(self):
        return self.Version
    def set_Version(self, Version):
        self.Version = Version
    def get_ServiceLevel(self):
        return self.ServiceLevel
    def set_ServiceLevel(self, ServiceLevel):
        self.ServiceLevel = ServiceLevel
    def get_ProcessingOptions(self):
        return self.ProcessingOptions
    def set_ProcessingOptions(self, ProcessingOptions):
        self.ProcessingOptions = ProcessingOptions
    def get_Customer(self):
        return self.Customer
    def set_Customer(self, Customer):
        self.Customer = Customer
    def get_RestrictionsAndPrivileges(self):
        return self.RestrictionsAndPrivileges
    def set_RestrictionsAndPrivileges(self, RestrictionsAndPrivileges):
        self.RestrictionsAndPrivileges = RestrictionsAndPrivileges
    def get_OriginRoutingCode(self):
        return self.OriginRoutingCode
    def set_OriginRoutingCode(self, OriginRoutingCode):
        self.OriginRoutingCode = OriginRoutingCode
    def get_DestinationRoutingCode(self):
        return self.DestinationRoutingCode
    def set_DestinationRoutingCode(self, DestinationRoutingCode):
        self.DestinationRoutingCode = DestinationRoutingCode
    def get_FormId(self):
        return self.FormId
    def set_FormId(self, FormId):
        self.FormId = FormId
    def get_CarrierCodes(self):
        return self.CarrierCodes
    def set_CarrierCodes(self, CarrierCodes):
        self.CarrierCodes = CarrierCodes
    def add_CarrierCodes(self, value):
        self.CarrierCodes.append(value)
    def insert_CarrierCodes_at(self, index, value):
        self.CarrierCodes.insert(index, value)
    def replace_CarrierCodes_at(self, index, value):
        self.CarrierCodes[index] = value
    def get_RequestedShipment(self):
        return self.RequestedShipment
    def set_RequestedShipment(self, RequestedShipment):
        self.RequestedShipment = RequestedShipment
    def validate_GetAllSpecialServicesServiceLevel(self, value):
        result = True
        # Validate type GetAllSpecialServicesServiceLevel, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['EXTERNAL', 'INTERNAL', 'OPERATIONS']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on GetAllSpecialServicesServiceLevel' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_CarrierCodeType(self, value):
        result = True
        # Validate type CarrierCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FDXC', 'FDXE', 'FDXG', 'FDXO', 'FXCC', 'FXFR', 'FXSP']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CarrierCodeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.WebAuthenticationDetail is not None or
            self.ClientDetail is not None or
            self.UserDetail is not None or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.ServiceLevel is not None or
            self.ProcessingOptions is not None or
            self.Customer is not None or
            self.RestrictionsAndPrivileges is not None or
            self.OriginRoutingCode is not None or
            self.DestinationRoutingCode is not None or
            self.FormId is not None or
            self.CarrierCodes or
            self.RequestedShipment is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GetAllSpecialServicesRequest', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GetAllSpecialServicesRequest')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'GetAllSpecialServicesRequest':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GetAllSpecialServicesRequest')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GetAllSpecialServicesRequest', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GetAllSpecialServicesRequest'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GetAllSpecialServicesRequest', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.WebAuthenticationDetail is not None:
            namespaceprefix_ = self.WebAuthenticationDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.WebAuthenticationDetail_nsprefix_) else ''
            self.WebAuthenticationDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='WebAuthenticationDetail', pretty_print=pretty_print)
        if self.ClientDetail is not None:
            namespaceprefix_ = self.ClientDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.ClientDetail_nsprefix_) else ''
            self.ClientDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ClientDetail', pretty_print=pretty_print)
        if self.UserDetail is not None:
            namespaceprefix_ = self.UserDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.UserDetail_nsprefix_) else ''
            self.UserDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='UserDetail', pretty_print=pretty_print)
        if self.TransactionDetail is not None:
            namespaceprefix_ = self.TransactionDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.TransactionDetail_nsprefix_) else ''
            self.TransactionDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TransactionDetail', pretty_print=pretty_print)
        if self.Version is not None:
            namespaceprefix_ = self.Version_nsprefix_ + ':' if (UseCapturedNS_ and self.Version_nsprefix_) else ''
            self.Version.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Version', pretty_print=pretty_print)
        if self.ServiceLevel is not None:
            namespaceprefix_ = self.ServiceLevel_nsprefix_ + ':' if (UseCapturedNS_ and self.ServiceLevel_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sServiceLevel>%s</%sServiceLevel>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ServiceLevel), input_name='ServiceLevel')), namespaceprefix_ , eol_))
        if self.ProcessingOptions is not None:
            namespaceprefix_ = self.ProcessingOptions_nsprefix_ + ':' if (UseCapturedNS_ and self.ProcessingOptions_nsprefix_) else ''
            self.ProcessingOptions.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ProcessingOptions', pretty_print=pretty_print)
        if self.Customer is not None:
            namespaceprefix_ = self.Customer_nsprefix_ + ':' if (UseCapturedNS_ and self.Customer_nsprefix_) else ''
            self.Customer.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Customer', pretty_print=pretty_print)
        if self.RestrictionsAndPrivileges is not None:
            namespaceprefix_ = self.RestrictionsAndPrivileges_nsprefix_ + ':' if (UseCapturedNS_ and self.RestrictionsAndPrivileges_nsprefix_) else ''
            self.RestrictionsAndPrivileges.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RestrictionsAndPrivileges', pretty_print=pretty_print)
        if self.OriginRoutingCode is not None:
            namespaceprefix_ = self.OriginRoutingCode_nsprefix_ + ':' if (UseCapturedNS_ and self.OriginRoutingCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOriginRoutingCode>%s</%sOriginRoutingCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OriginRoutingCode), input_name='OriginRoutingCode')), namespaceprefix_ , eol_))
        if self.DestinationRoutingCode is not None:
            namespaceprefix_ = self.DestinationRoutingCode_nsprefix_ + ':' if (UseCapturedNS_ and self.DestinationRoutingCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDestinationRoutingCode>%s</%sDestinationRoutingCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DestinationRoutingCode), input_name='DestinationRoutingCode')), namespaceprefix_ , eol_))
        if self.FormId is not None:
            namespaceprefix_ = self.FormId_nsprefix_ + ':' if (UseCapturedNS_ and self.FormId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFormId>%s</%sFormId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FormId), input_name='FormId')), namespaceprefix_ , eol_))
        for CarrierCodes_ in self.CarrierCodes:
            namespaceprefix_ = self.CarrierCodes_nsprefix_ + ':' if (UseCapturedNS_ and self.CarrierCodes_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCarrierCodes>%s</%sCarrierCodes>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(CarrierCodes_), input_name='CarrierCodes')), namespaceprefix_ , eol_))
        if self.RequestedShipment is not None:
            namespaceprefix_ = self.RequestedShipment_nsprefix_ + ':' if (UseCapturedNS_ and self.RequestedShipment_nsprefix_) else ''
            self.RequestedShipment.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RequestedShipment', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'WebAuthenticationDetail':
            obj_ = WebAuthenticationDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.WebAuthenticationDetail = obj_
            obj_.original_tagname_ = 'WebAuthenticationDetail'
        elif nodeName_ == 'ClientDetail':
            obj_ = ClientDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ClientDetail = obj_
            obj_.original_tagname_ = 'ClientDetail'
        elif nodeName_ == 'UserDetail':
            obj_ = UserDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.UserDetail = obj_
            obj_.original_tagname_ = 'UserDetail'
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TransactionDetail = obj_
            obj_.original_tagname_ = 'TransactionDetail'
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Version = obj_
            obj_.original_tagname_ = 'Version'
        elif nodeName_ == 'ServiceLevel':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ServiceLevel')
            value_ = self.gds_validate_string(value_, node, 'ServiceLevel')
            self.ServiceLevel = value_
            self.ServiceLevel_nsprefix_ = child_.prefix
            # validate type GetAllSpecialServicesServiceLevel
            self.validate_GetAllSpecialServicesServiceLevel(self.ServiceLevel)
        elif nodeName_ == 'ProcessingOptions':
            obj_ = GetAllSpecialServicesProcessingOptionsRequested.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ProcessingOptions = obj_
            obj_.original_tagname_ = 'ProcessingOptions'
        elif nodeName_ == 'Customer':
            obj_ = EnterpriseCustomer.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Customer = obj_
            obj_.original_tagname_ = 'Customer'
        elif nodeName_ == 'RestrictionsAndPrivileges':
            obj_ = RestrictionsAndPrivilegesPolicyDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RestrictionsAndPrivileges = obj_
            obj_.original_tagname_ = 'RestrictionsAndPrivileges'
        elif nodeName_ == 'OriginRoutingCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'OriginRoutingCode')
            value_ = self.gds_validate_string(value_, node, 'OriginRoutingCode')
            self.OriginRoutingCode = value_
            self.OriginRoutingCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'DestinationRoutingCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DestinationRoutingCode')
            value_ = self.gds_validate_string(value_, node, 'DestinationRoutingCode')
            self.DestinationRoutingCode = value_
            self.DestinationRoutingCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'FormId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FormId')
            value_ = self.gds_validate_string(value_, node, 'FormId')
            self.FormId = value_
            self.FormId_nsprefix_ = child_.prefix
        elif nodeName_ == 'CarrierCodes':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CarrierCodes')
            value_ = self.gds_validate_string(value_, node, 'CarrierCodes')
            self.CarrierCodes.append(value_)
            self.CarrierCodes_nsprefix_ = child_.prefix
            # validate type CarrierCodeType
            self.validate_CarrierCodeType(self.CarrierCodes[-1])
        elif nodeName_ == 'RequestedShipment':
            obj_ = RequestedShipment.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RequestedShipment = obj_
            obj_.original_tagname_ = 'RequestedShipment'
# end class GetAllSpecialServicesRequest


class GetCommitmentProcessingOptionsRequested(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Options=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Options is None:
            self.Options = []
        else:
            self.Options = Options
        self.Options_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GetCommitmentProcessingOptionsRequested)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GetCommitmentProcessingOptionsRequested.subclass:
            return GetCommitmentProcessingOptionsRequested.subclass(*args_, **kwargs_)
        else:
            return GetCommitmentProcessingOptionsRequested(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Options(self):
        return self.Options
    def set_Options(self, Options):
        self.Options = Options
    def add_Options(self, value):
        self.Options.append(value)
    def insert_Options_at(self, index, value):
        self.Options.insert(index, value)
    def replace_Options_at(self, index, value):
        self.Options[index] = value
    def validate_GetCommitmentProcessingOptionType(self, value):
        result = True
        # Validate type GetCommitmentProcessingOptionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BYPASS_REALTIME_COMMIT', 'DERIVE_SIGNATURE_OPTION', 'EXCLUDE_ACCOUNT_ENABLEMENTS', 'EXCLUDE_CHANNEL_RESTRICTIONS', 'EXCLUDE_EXTENDED_ACCOUNT_RULES', 'EXCLUDE_GLOBAL_REGULATORY_RULES', 'EXCLUDE_INSURED_VALUE_RULES', 'EXCLUDE_RESTRICTIONS_AND_PRIVILEGES', 'EXCLUDE_WEIGHT_DIM_RULES', 'INCLUDE_OPERATIONAL_SERVICE_OPTIONS']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on GetCommitmentProcessingOptionType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Options
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GetCommitmentProcessingOptionsRequested', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GetCommitmentProcessingOptionsRequested')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'GetCommitmentProcessingOptionsRequested':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GetCommitmentProcessingOptionsRequested')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GetCommitmentProcessingOptionsRequested', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GetCommitmentProcessingOptionsRequested'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GetCommitmentProcessingOptionsRequested', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Options_ in self.Options:
            namespaceprefix_ = self.Options_nsprefix_ + ':' if (UseCapturedNS_ and self.Options_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOptions>%s</%sOptions>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Options_), input_name='Options')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Options':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Options')
            value_ = self.gds_validate_string(value_, node, 'Options')
            self.Options.append(value_)
            self.Options_nsprefix_ = child_.prefix
            # validate type GetCommitmentProcessingOptionType
            self.validate_GetCommitmentProcessingOptionType(self.Options[-1])
# end class GetCommitmentProcessingOptionsRequested


class GetCommitmentReply(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, HighestSeverity=None, Notifications=None, TransactionDetail=None, Version=None, DetailLevel=None, CommitDetails=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.HighestSeverity = HighestSeverity
        self.validate_NotificationSeverityType(self.HighestSeverity)
        self.HighestSeverity_nsprefix_ = "ns"
        if Notifications is None:
            self.Notifications = []
        else:
            self.Notifications = Notifications
        self.Notifications_nsprefix_ = "ns"
        self.TransactionDetail = TransactionDetail
        self.TransactionDetail_nsprefix_ = "ns"
        self.Version = Version
        self.Version_nsprefix_ = "ns"
        self.DetailLevel = DetailLevel
        self.validate_CommitDetailType(self.DetailLevel)
        self.DetailLevel_nsprefix_ = "ns"
        if CommitDetails is None:
            self.CommitDetails = []
        else:
            self.CommitDetails = CommitDetails
        self.CommitDetails_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GetCommitmentReply)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GetCommitmentReply.subclass:
            return GetCommitmentReply.subclass(*args_, **kwargs_)
        else:
            return GetCommitmentReply(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_HighestSeverity(self):
        return self.HighestSeverity
    def set_HighestSeverity(self, HighestSeverity):
        self.HighestSeverity = HighestSeverity
    def get_Notifications(self):
        return self.Notifications
    def set_Notifications(self, Notifications):
        self.Notifications = Notifications
    def add_Notifications(self, value):
        self.Notifications.append(value)
    def insert_Notifications_at(self, index, value):
        self.Notifications.insert(index, value)
    def replace_Notifications_at(self, index, value):
        self.Notifications[index] = value
    def get_TransactionDetail(self):
        return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail):
        self.TransactionDetail = TransactionDetail
    def get_Version(self):
        return self.Version
    def set_Version(self, Version):
        self.Version = Version
    def get_DetailLevel(self):
        return self.DetailLevel
    def set_DetailLevel(self, DetailLevel):
        self.DetailLevel = DetailLevel
    def get_CommitDetails(self):
        return self.CommitDetails
    def set_CommitDetails(self, CommitDetails):
        self.CommitDetails = CommitDetails
    def add_CommitDetails(self, value):
        self.CommitDetails.append(value)
    def insert_CommitDetails_at(self, index, value):
        self.CommitDetails.insert(index, value)
    def replace_CommitDetails_at(self, index, value):
        self.CommitDetails[index] = value
    def validate_NotificationSeverityType(self, value):
        result = True
        # Validate type NotificationSeverityType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ERROR', 'FAILURE', 'NOTE', 'SUCCESS', 'WARNING']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on NotificationSeverityType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_CommitDetailType(self, value):
        result = True
        # Validate type CommitDetailType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['PLANNED', 'REAL_TIME']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CommitDetailType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.HighestSeverity is not None or
            self.Notifications or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.DetailLevel is not None or
            self.CommitDetails
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GetCommitmentReply', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GetCommitmentReply')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'GetCommitmentReply':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GetCommitmentReply')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GetCommitmentReply', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GetCommitmentReply'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GetCommitmentReply', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.HighestSeverity is not None:
            namespaceprefix_ = self.HighestSeverity_nsprefix_ + ':' if (UseCapturedNS_ and self.HighestSeverity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHighestSeverity>%s</%sHighestSeverity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.HighestSeverity), input_name='HighestSeverity')), namespaceprefix_ , eol_))
        for Notifications_ in self.Notifications:
            namespaceprefix_ = self.Notifications_nsprefix_ + ':' if (UseCapturedNS_ and self.Notifications_nsprefix_) else ''
            Notifications_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Notifications', pretty_print=pretty_print)
        if self.TransactionDetail is not None:
            namespaceprefix_ = self.TransactionDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.TransactionDetail_nsprefix_) else ''
            self.TransactionDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TransactionDetail', pretty_print=pretty_print)
        if self.Version is not None:
            namespaceprefix_ = self.Version_nsprefix_ + ':' if (UseCapturedNS_ and self.Version_nsprefix_) else ''
            self.Version.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Version', pretty_print=pretty_print)
        if self.DetailLevel is not None:
            namespaceprefix_ = self.DetailLevel_nsprefix_ + ':' if (UseCapturedNS_ and self.DetailLevel_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDetailLevel>%s</%sDetailLevel>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DetailLevel), input_name='DetailLevel')), namespaceprefix_ , eol_))
        for CommitDetails_ in self.CommitDetails:
            namespaceprefix_ = self.CommitDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.CommitDetails_nsprefix_) else ''
            CommitDetails_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CommitDetails', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'HighestSeverity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'HighestSeverity')
            value_ = self.gds_validate_string(value_, node, 'HighestSeverity')
            self.HighestSeverity = value_
            self.HighestSeverity_nsprefix_ = child_.prefix
            # validate type NotificationSeverityType
            self.validate_NotificationSeverityType(self.HighestSeverity)
        elif nodeName_ == 'Notifications':
            obj_ = Notification.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Notifications.append(obj_)
            obj_.original_tagname_ = 'Notifications'
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TransactionDetail = obj_
            obj_.original_tagname_ = 'TransactionDetail'
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Version = obj_
            obj_.original_tagname_ = 'Version'
        elif nodeName_ == 'DetailLevel':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DetailLevel')
            value_ = self.gds_validate_string(value_, node, 'DetailLevel')
            self.DetailLevel = value_
            self.DetailLevel_nsprefix_ = child_.prefix
            # validate type CommitDetailType
            self.validate_CommitDetailType(self.DetailLevel)
        elif nodeName_ == 'CommitDetails':
            obj_ = CommitDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CommitDetails.append(obj_)
            obj_.original_tagname_ = 'CommitDetails'
# end class GetCommitmentReply


class GetCommitmentRequest(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, WebAuthenticationDetail=None, ClientDetail=None, UserDetail=None, TransactionDetail=None, Version=None, ApplicationId=None, ServiceLevel=None, ProcessingOptions=None, FormId=None, RequestedShipment=None, CarrierCodes=None, VariableOptions=None, Customer=None, RestrictionsAndPrivileges=None, OriginRoutingCode=None, DestinationRoutingCode=None, BrokerLocationId=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.WebAuthenticationDetail = WebAuthenticationDetail
        self.WebAuthenticationDetail_nsprefix_ = "ns"
        self.ClientDetail = ClientDetail
        self.ClientDetail_nsprefix_ = "ns"
        self.UserDetail = UserDetail
        self.UserDetail_nsprefix_ = "ns"
        self.TransactionDetail = TransactionDetail
        self.TransactionDetail_nsprefix_ = "ns"
        self.Version = Version
        self.Version_nsprefix_ = "ns"
        self.ApplicationId = ApplicationId
        self.ApplicationId_nsprefix_ = None
        self.ServiceLevel = ServiceLevel
        self.validate_GetCommitmentServiceLevel(self.ServiceLevel)
        self.ServiceLevel_nsprefix_ = "ns"
        self.ProcessingOptions = ProcessingOptions
        self.ProcessingOptions_nsprefix_ = "ns"
        self.FormId = FormId
        self.FormId_nsprefix_ = None
        self.RequestedShipment = RequestedShipment
        self.RequestedShipment_nsprefix_ = "ns"
        if CarrierCodes is None:
            self.CarrierCodes = []
        else:
            self.CarrierCodes = CarrierCodes
        self.CarrierCodes_nsprefix_ = "ns"
        if VariableOptions is None:
            self.VariableOptions = []
        else:
            self.VariableOptions = VariableOptions
        self.VariableOptions_nsprefix_ = "ns"
        self.Customer = Customer
        self.Customer_nsprefix_ = "ns"
        self.RestrictionsAndPrivileges = RestrictionsAndPrivileges
        self.RestrictionsAndPrivileges_nsprefix_ = "ns"
        self.OriginRoutingCode = OriginRoutingCode
        self.OriginRoutingCode_nsprefix_ = None
        self.DestinationRoutingCode = DestinationRoutingCode
        self.DestinationRoutingCode_nsprefix_ = None
        self.BrokerLocationId = BrokerLocationId
        self.BrokerLocationId_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GetCommitmentRequest)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GetCommitmentRequest.subclass:
            return GetCommitmentRequest.subclass(*args_, **kwargs_)
        else:
            return GetCommitmentRequest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_WebAuthenticationDetail(self):
        return self.WebAuthenticationDetail
    def set_WebAuthenticationDetail(self, WebAuthenticationDetail):
        self.WebAuthenticationDetail = WebAuthenticationDetail
    def get_ClientDetail(self):
        return self.ClientDetail
    def set_ClientDetail(self, ClientDetail):
        self.ClientDetail = ClientDetail
    def get_UserDetail(self):
        return self.UserDetail
    def set_UserDetail(self, UserDetail):
        self.UserDetail = UserDetail
    def get_TransactionDetail(self):
        return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail):
        self.TransactionDetail = TransactionDetail
    def get_Version(self):
        return self.Version
    def set_Version(self, Version):
        self.Version = Version
    def get_ApplicationId(self):
        return self.ApplicationId
    def set_ApplicationId(self, ApplicationId):
        self.ApplicationId = ApplicationId
    def get_ServiceLevel(self):
        return self.ServiceLevel
    def set_ServiceLevel(self, ServiceLevel):
        self.ServiceLevel = ServiceLevel
    def get_ProcessingOptions(self):
        return self.ProcessingOptions
    def set_ProcessingOptions(self, ProcessingOptions):
        self.ProcessingOptions = ProcessingOptions
    def get_FormId(self):
        return self.FormId
    def set_FormId(self, FormId):
        self.FormId = FormId
    def get_RequestedShipment(self):
        return self.RequestedShipment
    def set_RequestedShipment(self, RequestedShipment):
        self.RequestedShipment = RequestedShipment
    def get_CarrierCodes(self):
        return self.CarrierCodes
    def set_CarrierCodes(self, CarrierCodes):
        self.CarrierCodes = CarrierCodes
    def add_CarrierCodes(self, value):
        self.CarrierCodes.append(value)
    def insert_CarrierCodes_at(self, index, value):
        self.CarrierCodes.insert(index, value)
    def replace_CarrierCodes_at(self, index, value):
        self.CarrierCodes[index] = value
    def get_VariableOptions(self):
        return self.VariableOptions
    def set_VariableOptions(self, VariableOptions):
        self.VariableOptions = VariableOptions
    def add_VariableOptions(self, value):
        self.VariableOptions.append(value)
    def insert_VariableOptions_at(self, index, value):
        self.VariableOptions.insert(index, value)
    def replace_VariableOptions_at(self, index, value):
        self.VariableOptions[index] = value
    def get_Customer(self):
        return self.Customer
    def set_Customer(self, Customer):
        self.Customer = Customer
    def get_RestrictionsAndPrivileges(self):
        return self.RestrictionsAndPrivileges
    def set_RestrictionsAndPrivileges(self, RestrictionsAndPrivileges):
        self.RestrictionsAndPrivileges = RestrictionsAndPrivileges
    def get_OriginRoutingCode(self):
        return self.OriginRoutingCode
    def set_OriginRoutingCode(self, OriginRoutingCode):
        self.OriginRoutingCode = OriginRoutingCode
    def get_DestinationRoutingCode(self):
        return self.DestinationRoutingCode
    def set_DestinationRoutingCode(self, DestinationRoutingCode):
        self.DestinationRoutingCode = DestinationRoutingCode
    def get_BrokerLocationId(self):
        return self.BrokerLocationId
    def set_BrokerLocationId(self, BrokerLocationId):
        self.BrokerLocationId = BrokerLocationId
    def validate_GetCommitmentServiceLevel(self, value):
        result = True
        # Validate type GetCommitmentServiceLevel, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['EXTERNAL', 'INTERNAL', 'OPERATIONS']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on GetCommitmentServiceLevel' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_CarrierCodeType(self, value):
        result = True
        # Validate type CarrierCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FDXC', 'FDXE', 'FDXG', 'FDXO', 'FXCC', 'FXFR', 'FXSP']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CarrierCodeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_ServiceOptionType(self, value):
        result = True
        # Validate type ServiceOptionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FEDEX_ONE_RATE', 'FREIGHT_GUARANTEE', 'SATURDAY_DELIVERY', 'SMART_POST_ALLOWED_INDICIA', 'SMART_POST_HUB_ID']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ServiceOptionType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.WebAuthenticationDetail is not None or
            self.ClientDetail is not None or
            self.UserDetail is not None or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.ApplicationId is not None or
            self.ServiceLevel is not None or
            self.ProcessingOptions is not None or
            self.FormId is not None or
            self.RequestedShipment is not None or
            self.CarrierCodes or
            self.VariableOptions or
            self.Customer is not None or
            self.RestrictionsAndPrivileges is not None or
            self.OriginRoutingCode is not None or
            self.DestinationRoutingCode is not None or
            self.BrokerLocationId is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GetCommitmentRequest', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GetCommitmentRequest')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'GetCommitmentRequest':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GetCommitmentRequest')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GetCommitmentRequest', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GetCommitmentRequest'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GetCommitmentRequest', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.WebAuthenticationDetail is not None:
            namespaceprefix_ = self.WebAuthenticationDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.WebAuthenticationDetail_nsprefix_) else ''
            self.WebAuthenticationDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='WebAuthenticationDetail', pretty_print=pretty_print)
        if self.ClientDetail is not None:
            namespaceprefix_ = self.ClientDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.ClientDetail_nsprefix_) else ''
            self.ClientDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ClientDetail', pretty_print=pretty_print)
        if self.UserDetail is not None:
            namespaceprefix_ = self.UserDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.UserDetail_nsprefix_) else ''
            self.UserDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='UserDetail', pretty_print=pretty_print)
        if self.TransactionDetail is not None:
            namespaceprefix_ = self.TransactionDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.TransactionDetail_nsprefix_) else ''
            self.TransactionDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TransactionDetail', pretty_print=pretty_print)
        if self.Version is not None:
            namespaceprefix_ = self.Version_nsprefix_ + ':' if (UseCapturedNS_ and self.Version_nsprefix_) else ''
            self.Version.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Version', pretty_print=pretty_print)
        if self.ApplicationId is not None:
            namespaceprefix_ = self.ApplicationId_nsprefix_ + ':' if (UseCapturedNS_ and self.ApplicationId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sApplicationId>%s</%sApplicationId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ApplicationId), input_name='ApplicationId')), namespaceprefix_ , eol_))
        if self.ServiceLevel is not None:
            namespaceprefix_ = self.ServiceLevel_nsprefix_ + ':' if (UseCapturedNS_ and self.ServiceLevel_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sServiceLevel>%s</%sServiceLevel>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ServiceLevel), input_name='ServiceLevel')), namespaceprefix_ , eol_))
        if self.ProcessingOptions is not None:
            namespaceprefix_ = self.ProcessingOptions_nsprefix_ + ':' if (UseCapturedNS_ and self.ProcessingOptions_nsprefix_) else ''
            self.ProcessingOptions.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ProcessingOptions', pretty_print=pretty_print)
        if self.FormId is not None:
            namespaceprefix_ = self.FormId_nsprefix_ + ':' if (UseCapturedNS_ and self.FormId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFormId>%s</%sFormId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FormId), input_name='FormId')), namespaceprefix_ , eol_))
        if self.RequestedShipment is not None:
            namespaceprefix_ = self.RequestedShipment_nsprefix_ + ':' if (UseCapturedNS_ and self.RequestedShipment_nsprefix_) else ''
            self.RequestedShipment.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RequestedShipment', pretty_print=pretty_print)
        for CarrierCodes_ in self.CarrierCodes:
            namespaceprefix_ = self.CarrierCodes_nsprefix_ + ':' if (UseCapturedNS_ and self.CarrierCodes_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCarrierCodes>%s</%sCarrierCodes>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(CarrierCodes_), input_name='CarrierCodes')), namespaceprefix_ , eol_))
        for VariableOptions_ in self.VariableOptions:
            namespaceprefix_ = self.VariableOptions_nsprefix_ + ':' if (UseCapturedNS_ and self.VariableOptions_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVariableOptions>%s</%sVariableOptions>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(VariableOptions_), input_name='VariableOptions')), namespaceprefix_ , eol_))
        if self.Customer is not None:
            namespaceprefix_ = self.Customer_nsprefix_ + ':' if (UseCapturedNS_ and self.Customer_nsprefix_) else ''
            self.Customer.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Customer', pretty_print=pretty_print)
        if self.RestrictionsAndPrivileges is not None:
            namespaceprefix_ = self.RestrictionsAndPrivileges_nsprefix_ + ':' if (UseCapturedNS_ and self.RestrictionsAndPrivileges_nsprefix_) else ''
            self.RestrictionsAndPrivileges.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RestrictionsAndPrivileges', pretty_print=pretty_print)
        if self.OriginRoutingCode is not None:
            namespaceprefix_ = self.OriginRoutingCode_nsprefix_ + ':' if (UseCapturedNS_ and self.OriginRoutingCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOriginRoutingCode>%s</%sOriginRoutingCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OriginRoutingCode), input_name='OriginRoutingCode')), namespaceprefix_ , eol_))
        if self.DestinationRoutingCode is not None:
            namespaceprefix_ = self.DestinationRoutingCode_nsprefix_ + ':' if (UseCapturedNS_ and self.DestinationRoutingCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDestinationRoutingCode>%s</%sDestinationRoutingCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DestinationRoutingCode), input_name='DestinationRoutingCode')), namespaceprefix_ , eol_))
        if self.BrokerLocationId is not None:
            namespaceprefix_ = self.BrokerLocationId_nsprefix_ + ':' if (UseCapturedNS_ and self.BrokerLocationId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBrokerLocationId>%s</%sBrokerLocationId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BrokerLocationId), input_name='BrokerLocationId')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'WebAuthenticationDetail':
            obj_ = WebAuthenticationDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.WebAuthenticationDetail = obj_
            obj_.original_tagname_ = 'WebAuthenticationDetail'
        elif nodeName_ == 'ClientDetail':
            obj_ = ClientDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ClientDetail = obj_
            obj_.original_tagname_ = 'ClientDetail'
        elif nodeName_ == 'UserDetail':
            obj_ = UserDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.UserDetail = obj_
            obj_.original_tagname_ = 'UserDetail'
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TransactionDetail = obj_
            obj_.original_tagname_ = 'TransactionDetail'
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Version = obj_
            obj_.original_tagname_ = 'Version'
        elif nodeName_ == 'ApplicationId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ApplicationId')
            value_ = self.gds_validate_string(value_, node, 'ApplicationId')
            self.ApplicationId = value_
            self.ApplicationId_nsprefix_ = child_.prefix
        elif nodeName_ == 'ServiceLevel':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ServiceLevel')
            value_ = self.gds_validate_string(value_, node, 'ServiceLevel')
            self.ServiceLevel = value_
            self.ServiceLevel_nsprefix_ = child_.prefix
            # validate type GetCommitmentServiceLevel
            self.validate_GetCommitmentServiceLevel(self.ServiceLevel)
        elif nodeName_ == 'ProcessingOptions':
            obj_ = GetCommitmentProcessingOptionsRequested.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ProcessingOptions = obj_
            obj_.original_tagname_ = 'ProcessingOptions'
        elif nodeName_ == 'FormId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FormId')
            value_ = self.gds_validate_string(value_, node, 'FormId')
            self.FormId = value_
            self.FormId_nsprefix_ = child_.prefix
        elif nodeName_ == 'RequestedShipment':
            obj_ = RequestedShipment.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RequestedShipment = obj_
            obj_.original_tagname_ = 'RequestedShipment'
        elif nodeName_ == 'CarrierCodes':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CarrierCodes')
            value_ = self.gds_validate_string(value_, node, 'CarrierCodes')
            self.CarrierCodes.append(value_)
            self.CarrierCodes_nsprefix_ = child_.prefix
            # validate type CarrierCodeType
            self.validate_CarrierCodeType(self.CarrierCodes[-1])
        elif nodeName_ == 'VariableOptions':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'VariableOptions')
            value_ = self.gds_validate_string(value_, node, 'VariableOptions')
            self.VariableOptions.append(value_)
            self.VariableOptions_nsprefix_ = child_.prefix
            # validate type ServiceOptionType
            self.validate_ServiceOptionType(self.VariableOptions[-1])
        elif nodeName_ == 'Customer':
            obj_ = EnterpriseCustomer.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Customer = obj_
            obj_.original_tagname_ = 'Customer'
        elif nodeName_ == 'RestrictionsAndPrivileges':
            obj_ = RestrictionsAndPrivilegesPolicyDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RestrictionsAndPrivileges = obj_
            obj_.original_tagname_ = 'RestrictionsAndPrivileges'
        elif nodeName_ == 'OriginRoutingCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'OriginRoutingCode')
            value_ = self.gds_validate_string(value_, node, 'OriginRoutingCode')
            self.OriginRoutingCode = value_
            self.OriginRoutingCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'DestinationRoutingCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DestinationRoutingCode')
            value_ = self.gds_validate_string(value_, node, 'DestinationRoutingCode')
            self.DestinationRoutingCode = value_
            self.DestinationRoutingCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'BrokerLocationId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'BrokerLocationId')
            value_ = self.gds_validate_string(value_, node, 'BrokerLocationId')
            self.BrokerLocationId = value_
            self.BrokerLocationId_nsprefix_ = child_.prefix
# end class GetCommitmentRequest


class GetFedExCommoditiesReply(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, HighestSeverity=None, Notifications=None, TransactionDetail=None, Version=None, FedExCommodities=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.HighestSeverity = HighestSeverity
        self.validate_NotificationSeverityType(self.HighestSeverity)
        self.HighestSeverity_nsprefix_ = "ns"
        if Notifications is None:
            self.Notifications = []
        else:
            self.Notifications = Notifications
        self.Notifications_nsprefix_ = "ns"
        self.TransactionDetail = TransactionDetail
        self.TransactionDetail_nsprefix_ = "ns"
        self.Version = Version
        self.Version_nsprefix_ = "ns"
        if FedExCommodities is None:
            self.FedExCommodities = []
        else:
            self.FedExCommodities = FedExCommodities
        self.FedExCommodities_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GetFedExCommoditiesReply)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GetFedExCommoditiesReply.subclass:
            return GetFedExCommoditiesReply.subclass(*args_, **kwargs_)
        else:
            return GetFedExCommoditiesReply(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_HighestSeverity(self):
        return self.HighestSeverity
    def set_HighestSeverity(self, HighestSeverity):
        self.HighestSeverity = HighestSeverity
    def get_Notifications(self):
        return self.Notifications
    def set_Notifications(self, Notifications):
        self.Notifications = Notifications
    def add_Notifications(self, value):
        self.Notifications.append(value)
    def insert_Notifications_at(self, index, value):
        self.Notifications.insert(index, value)
    def replace_Notifications_at(self, index, value):
        self.Notifications[index] = value
    def get_TransactionDetail(self):
        return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail):
        self.TransactionDetail = TransactionDetail
    def get_Version(self):
        return self.Version
    def set_Version(self, Version):
        self.Version = Version
    def get_FedExCommodities(self):
        return self.FedExCommodities
    def set_FedExCommodities(self, FedExCommodities):
        self.FedExCommodities = FedExCommodities
    def add_FedExCommodities(self, value):
        self.FedExCommodities.append(value)
    def insert_FedExCommodities_at(self, index, value):
        self.FedExCommodities.insert(index, value)
    def replace_FedExCommodities_at(self, index, value):
        self.FedExCommodities[index] = value
    def validate_NotificationSeverityType(self, value):
        result = True
        # Validate type NotificationSeverityType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ERROR', 'FAILURE', 'NOTE', 'SUCCESS', 'WARNING']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on NotificationSeverityType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.HighestSeverity is not None or
            self.Notifications or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.FedExCommodities
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GetFedExCommoditiesReply', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GetFedExCommoditiesReply')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'GetFedExCommoditiesReply':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GetFedExCommoditiesReply')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GetFedExCommoditiesReply', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GetFedExCommoditiesReply'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GetFedExCommoditiesReply', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.HighestSeverity is not None:
            namespaceprefix_ = self.HighestSeverity_nsprefix_ + ':' if (UseCapturedNS_ and self.HighestSeverity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHighestSeverity>%s</%sHighestSeverity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.HighestSeverity), input_name='HighestSeverity')), namespaceprefix_ , eol_))
        for Notifications_ in self.Notifications:
            namespaceprefix_ = self.Notifications_nsprefix_ + ':' if (UseCapturedNS_ and self.Notifications_nsprefix_) else ''
            Notifications_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Notifications', pretty_print=pretty_print)
        if self.TransactionDetail is not None:
            namespaceprefix_ = self.TransactionDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.TransactionDetail_nsprefix_) else ''
            self.TransactionDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TransactionDetail', pretty_print=pretty_print)
        if self.Version is not None:
            namespaceprefix_ = self.Version_nsprefix_ + ':' if (UseCapturedNS_ and self.Version_nsprefix_) else ''
            self.Version.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Version', pretty_print=pretty_print)
        for FedExCommodities_ in self.FedExCommodities:
            namespaceprefix_ = self.FedExCommodities_nsprefix_ + ':' if (UseCapturedNS_ and self.FedExCommodities_nsprefix_) else ''
            FedExCommodities_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FedExCommodities', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'HighestSeverity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'HighestSeverity')
            value_ = self.gds_validate_string(value_, node, 'HighestSeverity')
            self.HighestSeverity = value_
            self.HighestSeverity_nsprefix_ = child_.prefix
            # validate type NotificationSeverityType
            self.validate_NotificationSeverityType(self.HighestSeverity)
        elif nodeName_ == 'Notifications':
            obj_ = Notification.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Notifications.append(obj_)
            obj_.original_tagname_ = 'Notifications'
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TransactionDetail = obj_
            obj_.original_tagname_ = 'TransactionDetail'
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Version = obj_
            obj_.original_tagname_ = 'Version'
        elif nodeName_ == 'FedExCommodities':
            obj_ = FedExCommodityDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FedExCommodities.append(obj_)
            obj_.original_tagname_ = 'FedExCommodities'
# end class GetFedExCommoditiesReply


class GetFedExCommoditiesRequest(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, WebAuthenticationDetail=None, ClientDetail=None, UserDetail=None, TransactionDetail=None, Version=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.WebAuthenticationDetail = WebAuthenticationDetail
        self.WebAuthenticationDetail_nsprefix_ = "ns"
        self.ClientDetail = ClientDetail
        self.ClientDetail_nsprefix_ = "ns"
        self.UserDetail = UserDetail
        self.UserDetail_nsprefix_ = "ns"
        self.TransactionDetail = TransactionDetail
        self.TransactionDetail_nsprefix_ = "ns"
        self.Version = Version
        self.Version_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GetFedExCommoditiesRequest)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GetFedExCommoditiesRequest.subclass:
            return GetFedExCommoditiesRequest.subclass(*args_, **kwargs_)
        else:
            return GetFedExCommoditiesRequest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_WebAuthenticationDetail(self):
        return self.WebAuthenticationDetail
    def set_WebAuthenticationDetail(self, WebAuthenticationDetail):
        self.WebAuthenticationDetail = WebAuthenticationDetail
    def get_ClientDetail(self):
        return self.ClientDetail
    def set_ClientDetail(self, ClientDetail):
        self.ClientDetail = ClientDetail
    def get_UserDetail(self):
        return self.UserDetail
    def set_UserDetail(self, UserDetail):
        self.UserDetail = UserDetail
    def get_TransactionDetail(self):
        return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail):
        self.TransactionDetail = TransactionDetail
    def get_Version(self):
        return self.Version
    def set_Version(self, Version):
        self.Version = Version
    def hasContent_(self):
        if (
            self.WebAuthenticationDetail is not None or
            self.ClientDetail is not None or
            self.UserDetail is not None or
            self.TransactionDetail is not None or
            self.Version is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GetFedExCommoditiesRequest', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GetFedExCommoditiesRequest')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'GetFedExCommoditiesRequest':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GetFedExCommoditiesRequest')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GetFedExCommoditiesRequest', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GetFedExCommoditiesRequest'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GetFedExCommoditiesRequest', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.WebAuthenticationDetail is not None:
            namespaceprefix_ = self.WebAuthenticationDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.WebAuthenticationDetail_nsprefix_) else ''
            self.WebAuthenticationDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='WebAuthenticationDetail', pretty_print=pretty_print)
        if self.ClientDetail is not None:
            namespaceprefix_ = self.ClientDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.ClientDetail_nsprefix_) else ''
            self.ClientDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ClientDetail', pretty_print=pretty_print)
        if self.UserDetail is not None:
            namespaceprefix_ = self.UserDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.UserDetail_nsprefix_) else ''
            self.UserDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='UserDetail', pretty_print=pretty_print)
        if self.TransactionDetail is not None:
            namespaceprefix_ = self.TransactionDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.TransactionDetail_nsprefix_) else ''
            self.TransactionDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TransactionDetail', pretty_print=pretty_print)
        if self.Version is not None:
            namespaceprefix_ = self.Version_nsprefix_ + ':' if (UseCapturedNS_ and self.Version_nsprefix_) else ''
            self.Version.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Version', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'WebAuthenticationDetail':
            obj_ = WebAuthenticationDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.WebAuthenticationDetail = obj_
            obj_.original_tagname_ = 'WebAuthenticationDetail'
        elif nodeName_ == 'ClientDetail':
            obj_ = ClientDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ClientDetail = obj_
            obj_.original_tagname_ = 'ClientDetail'
        elif nodeName_ == 'UserDetail':
            obj_ = UserDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.UserDetail = obj_
            obj_.original_tagname_ = 'UserDetail'
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TransactionDetail = obj_
            obj_.original_tagname_ = 'TransactionDetail'
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Version = obj_
            obj_.original_tagname_ = 'Version'
# end class GetFedExCommoditiesRequest


class GetPackagingOptionsReply(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, HighestSeverity=None, Notifications=None, TransactionDetail=None, Version=None, Options=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.HighestSeverity = HighestSeverity
        self.validate_NotificationSeverityType(self.HighestSeverity)
        self.HighestSeverity_nsprefix_ = "ns"
        if Notifications is None:
            self.Notifications = []
        else:
            self.Notifications = Notifications
        self.Notifications_nsprefix_ = "ns"
        self.TransactionDetail = TransactionDetail
        self.TransactionDetail_nsprefix_ = "ns"
        self.Version = Version
        self.Version_nsprefix_ = "ns"
        if Options is None:
            self.Options = []
        else:
            self.Options = Options
        self.Options_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GetPackagingOptionsReply)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GetPackagingOptionsReply.subclass:
            return GetPackagingOptionsReply.subclass(*args_, **kwargs_)
        else:
            return GetPackagingOptionsReply(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_HighestSeverity(self):
        return self.HighestSeverity
    def set_HighestSeverity(self, HighestSeverity):
        self.HighestSeverity = HighestSeverity
    def get_Notifications(self):
        return self.Notifications
    def set_Notifications(self, Notifications):
        self.Notifications = Notifications
    def add_Notifications(self, value):
        self.Notifications.append(value)
    def insert_Notifications_at(self, index, value):
        self.Notifications.insert(index, value)
    def replace_Notifications_at(self, index, value):
        self.Notifications[index] = value
    def get_TransactionDetail(self):
        return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail):
        self.TransactionDetail = TransactionDetail
    def get_Version(self):
        return self.Version
    def set_Version(self, Version):
        self.Version = Version
    def get_Options(self):
        return self.Options
    def set_Options(self, Options):
        self.Options = Options
    def add_Options(self, value):
        self.Options.append(value)
    def insert_Options_at(self, index, value):
        self.Options.insert(index, value)
    def replace_Options_at(self, index, value):
        self.Options[index] = value
    def validate_NotificationSeverityType(self, value):
        result = True
        # Validate type NotificationSeverityType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ERROR', 'FAILURE', 'NOTE', 'SUCCESS', 'WARNING']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on NotificationSeverityType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.HighestSeverity is not None or
            self.Notifications or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.Options
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GetPackagingOptionsReply', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GetPackagingOptionsReply')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'GetPackagingOptionsReply':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GetPackagingOptionsReply')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GetPackagingOptionsReply', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GetPackagingOptionsReply'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GetPackagingOptionsReply', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.HighestSeverity is not None:
            namespaceprefix_ = self.HighestSeverity_nsprefix_ + ':' if (UseCapturedNS_ and self.HighestSeverity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHighestSeverity>%s</%sHighestSeverity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.HighestSeverity), input_name='HighestSeverity')), namespaceprefix_ , eol_))
        for Notifications_ in self.Notifications:
            namespaceprefix_ = self.Notifications_nsprefix_ + ':' if (UseCapturedNS_ and self.Notifications_nsprefix_) else ''
            Notifications_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Notifications', pretty_print=pretty_print)
        if self.TransactionDetail is not None:
            namespaceprefix_ = self.TransactionDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.TransactionDetail_nsprefix_) else ''
            self.TransactionDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TransactionDetail', pretty_print=pretty_print)
        if self.Version is not None:
            namespaceprefix_ = self.Version_nsprefix_ + ':' if (UseCapturedNS_ and self.Version_nsprefix_) else ''
            self.Version.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Version', pretty_print=pretty_print)
        for Options_ in self.Options:
            namespaceprefix_ = self.Options_nsprefix_ + ':' if (UseCapturedNS_ and self.Options_nsprefix_) else ''
            Options_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Options', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'HighestSeverity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'HighestSeverity')
            value_ = self.gds_validate_string(value_, node, 'HighestSeverity')
            self.HighestSeverity = value_
            self.HighestSeverity_nsprefix_ = child_.prefix
            # validate type NotificationSeverityType
            self.validate_NotificationSeverityType(self.HighestSeverity)
        elif nodeName_ == 'Notifications':
            obj_ = Notification.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Notifications.append(obj_)
            obj_.original_tagname_ = 'Notifications'
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TransactionDetail = obj_
            obj_.original_tagname_ = 'TransactionDetail'
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Version = obj_
            obj_.original_tagname_ = 'Version'
        elif nodeName_ == 'Options':
            obj_ = PackagingOptionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Options.append(obj_)
            obj_.original_tagname_ = 'Options'
# end class GetPackagingOptionsReply


class GetPackagingOptionsRequest(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, WebAuthenticationDetail=None, ClientDetail=None, UserDetail=None, TransactionDetail=None, Version=None, ShipDate=None, Origin=None, Destination=None, CarrierCodes=None, Customer=None, RestrictionsAndPrivileges=None, VariableOptions=None, SpecialServices=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.WebAuthenticationDetail = WebAuthenticationDetail
        self.WebAuthenticationDetail_nsprefix_ = "ns"
        self.ClientDetail = ClientDetail
        self.ClientDetail_nsprefix_ = "ns"
        self.UserDetail = UserDetail
        self.UserDetail_nsprefix_ = "ns"
        self.TransactionDetail = TransactionDetail
        self.TransactionDetail_nsprefix_ = "ns"
        self.Version = Version
        self.Version_nsprefix_ = "ns"
        if isinstance(ShipDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ShipDate, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = ShipDate
        self.ShipDate = initvalue_
        self.ShipDate_nsprefix_ = None
        self.Origin = Origin
        self.Origin_nsprefix_ = "ns"
        self.Destination = Destination
        self.Destination_nsprefix_ = "ns"
        if CarrierCodes is None:
            self.CarrierCodes = []
        else:
            self.CarrierCodes = CarrierCodes
        self.CarrierCodes_nsprefix_ = "ns"
        self.Customer = Customer
        self.Customer_nsprefix_ = "ns"
        self.RestrictionsAndPrivileges = RestrictionsAndPrivileges
        self.RestrictionsAndPrivileges_nsprefix_ = "ns"
        if VariableOptions is None:
            self.VariableOptions = []
        else:
            self.VariableOptions = VariableOptions
        self.VariableOptions_nsprefix_ = "ns"
        if SpecialServices is None:
            self.SpecialServices = []
        else:
            self.SpecialServices = SpecialServices
        self.SpecialServices_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GetPackagingOptionsRequest)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GetPackagingOptionsRequest.subclass:
            return GetPackagingOptionsRequest.subclass(*args_, **kwargs_)
        else:
            return GetPackagingOptionsRequest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_WebAuthenticationDetail(self):
        return self.WebAuthenticationDetail
    def set_WebAuthenticationDetail(self, WebAuthenticationDetail):
        self.WebAuthenticationDetail = WebAuthenticationDetail
    def get_ClientDetail(self):
        return self.ClientDetail
    def set_ClientDetail(self, ClientDetail):
        self.ClientDetail = ClientDetail
    def get_UserDetail(self):
        return self.UserDetail
    def set_UserDetail(self, UserDetail):
        self.UserDetail = UserDetail
    def get_TransactionDetail(self):
        return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail):
        self.TransactionDetail = TransactionDetail
    def get_Version(self):
        return self.Version
    def set_Version(self, Version):
        self.Version = Version
    def get_ShipDate(self):
        return self.ShipDate
    def set_ShipDate(self, ShipDate):
        self.ShipDate = ShipDate
    def get_Origin(self):
        return self.Origin
    def set_Origin(self, Origin):
        self.Origin = Origin
    def get_Destination(self):
        return self.Destination
    def set_Destination(self, Destination):
        self.Destination = Destination
    def get_CarrierCodes(self):
        return self.CarrierCodes
    def set_CarrierCodes(self, CarrierCodes):
        self.CarrierCodes = CarrierCodes
    def add_CarrierCodes(self, value):
        self.CarrierCodes.append(value)
    def insert_CarrierCodes_at(self, index, value):
        self.CarrierCodes.insert(index, value)
    def replace_CarrierCodes_at(self, index, value):
        self.CarrierCodes[index] = value
    def get_Customer(self):
        return self.Customer
    def set_Customer(self, Customer):
        self.Customer = Customer
    def get_RestrictionsAndPrivileges(self):
        return self.RestrictionsAndPrivileges
    def set_RestrictionsAndPrivileges(self, RestrictionsAndPrivileges):
        self.RestrictionsAndPrivileges = RestrictionsAndPrivileges
    def get_VariableOptions(self):
        return self.VariableOptions
    def set_VariableOptions(self, VariableOptions):
        self.VariableOptions = VariableOptions
    def add_VariableOptions(self, value):
        self.VariableOptions.append(value)
    def insert_VariableOptions_at(self, index, value):
        self.VariableOptions.insert(index, value)
    def replace_VariableOptions_at(self, index, value):
        self.VariableOptions[index] = value
    def get_SpecialServices(self):
        return self.SpecialServices
    def set_SpecialServices(self, SpecialServices):
        self.SpecialServices = SpecialServices
    def add_SpecialServices(self, value):
        self.SpecialServices.append(value)
    def insert_SpecialServices_at(self, index, value):
        self.SpecialServices.insert(index, value)
    def replace_SpecialServices_at(self, index, value):
        self.SpecialServices[index] = value
    def validate_CarrierCodeType(self, value):
        result = True
        # Validate type CarrierCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FDXC', 'FDXE', 'FDXG', 'FDXO', 'FXCC', 'FXFR', 'FXSP']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CarrierCodeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_PackagingOptionSpecialServiceType(self, value):
        result = True
        # Validate type PackagingOptionSpecialServiceType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FEDEX_ONE_RATE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on PackagingOptionSpecialServiceType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.WebAuthenticationDetail is not None or
            self.ClientDetail is not None or
            self.UserDetail is not None or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.ShipDate is not None or
            self.Origin is not None or
            self.Destination is not None or
            self.CarrierCodes or
            self.Customer is not None or
            self.RestrictionsAndPrivileges is not None or
            self.VariableOptions or
            self.SpecialServices
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GetPackagingOptionsRequest', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GetPackagingOptionsRequest')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'GetPackagingOptionsRequest':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GetPackagingOptionsRequest')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GetPackagingOptionsRequest', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GetPackagingOptionsRequest'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GetPackagingOptionsRequest', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.WebAuthenticationDetail is not None:
            namespaceprefix_ = self.WebAuthenticationDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.WebAuthenticationDetail_nsprefix_) else ''
            self.WebAuthenticationDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='WebAuthenticationDetail', pretty_print=pretty_print)
        if self.ClientDetail is not None:
            namespaceprefix_ = self.ClientDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.ClientDetail_nsprefix_) else ''
            self.ClientDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ClientDetail', pretty_print=pretty_print)
        if self.UserDetail is not None:
            namespaceprefix_ = self.UserDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.UserDetail_nsprefix_) else ''
            self.UserDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='UserDetail', pretty_print=pretty_print)
        if self.TransactionDetail is not None:
            namespaceprefix_ = self.TransactionDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.TransactionDetail_nsprefix_) else ''
            self.TransactionDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TransactionDetail', pretty_print=pretty_print)
        if self.Version is not None:
            namespaceprefix_ = self.Version_nsprefix_ + ':' if (UseCapturedNS_ and self.Version_nsprefix_) else ''
            self.Version.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Version', pretty_print=pretty_print)
        if self.ShipDate is not None:
            namespaceprefix_ = self.ShipDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShipDate>%s</%sShipDate>%s' % (namespaceprefix_ , self.gds_format_datetime(self.ShipDate, input_name='ShipDate'), namespaceprefix_ , eol_))
        if self.Origin is not None:
            namespaceprefix_ = self.Origin_nsprefix_ + ':' if (UseCapturedNS_ and self.Origin_nsprefix_) else ''
            self.Origin.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Origin', pretty_print=pretty_print)
        if self.Destination is not None:
            namespaceprefix_ = self.Destination_nsprefix_ + ':' if (UseCapturedNS_ and self.Destination_nsprefix_) else ''
            self.Destination.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Destination', pretty_print=pretty_print)
        for CarrierCodes_ in self.CarrierCodes:
            namespaceprefix_ = self.CarrierCodes_nsprefix_ + ':' if (UseCapturedNS_ and self.CarrierCodes_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCarrierCodes>%s</%sCarrierCodes>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(CarrierCodes_), input_name='CarrierCodes')), namespaceprefix_ , eol_))
        if self.Customer is not None:
            namespaceprefix_ = self.Customer_nsprefix_ + ':' if (UseCapturedNS_ and self.Customer_nsprefix_) else ''
            self.Customer.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Customer', pretty_print=pretty_print)
        if self.RestrictionsAndPrivileges is not None:
            namespaceprefix_ = self.RestrictionsAndPrivileges_nsprefix_ + ':' if (UseCapturedNS_ and self.RestrictionsAndPrivileges_nsprefix_) else ''
            self.RestrictionsAndPrivileges.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RestrictionsAndPrivileges', pretty_print=pretty_print)
        for VariableOptions_ in self.VariableOptions:
            namespaceprefix_ = self.VariableOptions_nsprefix_ + ':' if (UseCapturedNS_ and self.VariableOptions_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVariableOptions>%s</%sVariableOptions>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(VariableOptions_), input_name='VariableOptions')), namespaceprefix_ , eol_))
        for SpecialServices_ in self.SpecialServices:
            namespaceprefix_ = self.SpecialServices_nsprefix_ + ':' if (UseCapturedNS_ and self.SpecialServices_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSpecialServices>%s</%sSpecialServices>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(SpecialServices_), input_name='SpecialServices')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'WebAuthenticationDetail':
            obj_ = WebAuthenticationDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.WebAuthenticationDetail = obj_
            obj_.original_tagname_ = 'WebAuthenticationDetail'
        elif nodeName_ == 'ClientDetail':
            obj_ = ClientDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ClientDetail = obj_
            obj_.original_tagname_ = 'ClientDetail'
        elif nodeName_ == 'UserDetail':
            obj_ = UserDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.UserDetail = obj_
            obj_.original_tagname_ = 'UserDetail'
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TransactionDetail = obj_
            obj_.original_tagname_ = 'TransactionDetail'
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Version = obj_
            obj_.original_tagname_ = 'Version'
        elif nodeName_ == 'ShipDate':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.ShipDate = dval_
            self.ShipDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'Origin':
            obj_ = Address.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Origin = obj_
            obj_.original_tagname_ = 'Origin'
        elif nodeName_ == 'Destination':
            obj_ = Address.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Destination = obj_
            obj_.original_tagname_ = 'Destination'
        elif nodeName_ == 'CarrierCodes':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CarrierCodes')
            value_ = self.gds_validate_string(value_, node, 'CarrierCodes')
            self.CarrierCodes.append(value_)
            self.CarrierCodes_nsprefix_ = child_.prefix
            # validate type CarrierCodeType
            self.validate_CarrierCodeType(self.CarrierCodes[-1])
        elif nodeName_ == 'Customer':
            obj_ = EnterpriseCustomer.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Customer = obj_
            obj_.original_tagname_ = 'Customer'
        elif nodeName_ == 'RestrictionsAndPrivileges':
            obj_ = RestrictionsAndPrivilegesPolicyDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RestrictionsAndPrivileges = obj_
            obj_.original_tagname_ = 'RestrictionsAndPrivileges'
        elif nodeName_ == 'VariableOptions':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'VariableOptions')
            value_ = self.gds_validate_string(value_, node, 'VariableOptions')
            self.VariableOptions.append(value_)
            self.VariableOptions_nsprefix_ = child_.prefix
            # validate type PackagingOptionSpecialServiceType
            self.validate_PackagingOptionSpecialServiceType(self.VariableOptions[-1])
        elif nodeName_ == 'SpecialServices':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SpecialServices')
            value_ = self.gds_validate_string(value_, node, 'SpecialServices')
            self.SpecialServices.append(value_)
            self.SpecialServices_nsprefix_ = child_.prefix
            # validate type PackagingOptionSpecialServiceType
            self.validate_PackagingOptionSpecialServiceType(self.SpecialServices[-1])
# end class GetPackagingOptionsRequest


class GetShipmentRulesReply(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, HighestSeverity=None, Notifications=None, TransactionDetail=None, Version=None, ShipmentRules=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.HighestSeverity = HighestSeverity
        self.validate_NotificationSeverityType(self.HighestSeverity)
        self.HighestSeverity_nsprefix_ = "ns"
        if Notifications is None:
            self.Notifications = []
        else:
            self.Notifications = Notifications
        self.Notifications_nsprefix_ = "ns"
        self.TransactionDetail = TransactionDetail
        self.TransactionDetail_nsprefix_ = "ns"
        self.Version = Version
        self.Version_nsprefix_ = "ns"
        if ShipmentRules is None:
            self.ShipmentRules = []
        else:
            self.ShipmentRules = ShipmentRules
        self.ShipmentRules_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GetShipmentRulesReply)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GetShipmentRulesReply.subclass:
            return GetShipmentRulesReply.subclass(*args_, **kwargs_)
        else:
            return GetShipmentRulesReply(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_HighestSeverity(self):
        return self.HighestSeverity
    def set_HighestSeverity(self, HighestSeverity):
        self.HighestSeverity = HighestSeverity
    def get_Notifications(self):
        return self.Notifications
    def set_Notifications(self, Notifications):
        self.Notifications = Notifications
    def add_Notifications(self, value):
        self.Notifications.append(value)
    def insert_Notifications_at(self, index, value):
        self.Notifications.insert(index, value)
    def replace_Notifications_at(self, index, value):
        self.Notifications[index] = value
    def get_TransactionDetail(self):
        return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail):
        self.TransactionDetail = TransactionDetail
    def get_Version(self):
        return self.Version
    def set_Version(self, Version):
        self.Version = Version
    def get_ShipmentRules(self):
        return self.ShipmentRules
    def set_ShipmentRules(self, ShipmentRules):
        self.ShipmentRules = ShipmentRules
    def add_ShipmentRules(self, value):
        self.ShipmentRules.append(value)
    def insert_ShipmentRules_at(self, index, value):
        self.ShipmentRules.insert(index, value)
    def replace_ShipmentRules_at(self, index, value):
        self.ShipmentRules[index] = value
    def validate_NotificationSeverityType(self, value):
        result = True
        # Validate type NotificationSeverityType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ERROR', 'FAILURE', 'NOTE', 'SUCCESS', 'WARNING']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on NotificationSeverityType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.HighestSeverity is not None or
            self.Notifications or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.ShipmentRules
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GetShipmentRulesReply', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GetShipmentRulesReply')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'GetShipmentRulesReply':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GetShipmentRulesReply')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GetShipmentRulesReply', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GetShipmentRulesReply'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GetShipmentRulesReply', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.HighestSeverity is not None:
            namespaceprefix_ = self.HighestSeverity_nsprefix_ + ':' if (UseCapturedNS_ and self.HighestSeverity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHighestSeverity>%s</%sHighestSeverity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.HighestSeverity), input_name='HighestSeverity')), namespaceprefix_ , eol_))
        for Notifications_ in self.Notifications:
            namespaceprefix_ = self.Notifications_nsprefix_ + ':' if (UseCapturedNS_ and self.Notifications_nsprefix_) else ''
            Notifications_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Notifications', pretty_print=pretty_print)
        if self.TransactionDetail is not None:
            namespaceprefix_ = self.TransactionDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.TransactionDetail_nsprefix_) else ''
            self.TransactionDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TransactionDetail', pretty_print=pretty_print)
        if self.Version is not None:
            namespaceprefix_ = self.Version_nsprefix_ + ':' if (UseCapturedNS_ and self.Version_nsprefix_) else ''
            self.Version.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Version', pretty_print=pretty_print)
        for ShipmentRules_ in self.ShipmentRules:
            namespaceprefix_ = self.ShipmentRules_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipmentRules_nsprefix_) else ''
            ShipmentRules_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ShipmentRules', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'HighestSeverity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'HighestSeverity')
            value_ = self.gds_validate_string(value_, node, 'HighestSeverity')
            self.HighestSeverity = value_
            self.HighestSeverity_nsprefix_ = child_.prefix
            # validate type NotificationSeverityType
            self.validate_NotificationSeverityType(self.HighestSeverity)
        elif nodeName_ == 'Notifications':
            obj_ = Notification.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Notifications.append(obj_)
            obj_.original_tagname_ = 'Notifications'
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TransactionDetail = obj_
            obj_.original_tagname_ = 'TransactionDetail'
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Version = obj_
            obj_.original_tagname_ = 'Version'
        elif nodeName_ == 'ShipmentRules':
            obj_ = ShipmentRule.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ShipmentRules.append(obj_)
            obj_.original_tagname_ = 'ShipmentRules'
# end class GetShipmentRulesReply


class GetShipmentRulesRequest(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, WebAuthenticationDetail=None, ClientDetail=None, UserDetail=None, TransactionDetail=None, Version=None, RequestedShipment=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.WebAuthenticationDetail = WebAuthenticationDetail
        self.WebAuthenticationDetail_nsprefix_ = "ns"
        self.ClientDetail = ClientDetail
        self.ClientDetail_nsprefix_ = "ns"
        self.UserDetail = UserDetail
        self.UserDetail_nsprefix_ = "ns"
        self.TransactionDetail = TransactionDetail
        self.TransactionDetail_nsprefix_ = "ns"
        self.Version = Version
        self.Version_nsprefix_ = "ns"
        self.RequestedShipment = RequestedShipment
        self.RequestedShipment_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GetShipmentRulesRequest)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GetShipmentRulesRequest.subclass:
            return GetShipmentRulesRequest.subclass(*args_, **kwargs_)
        else:
            return GetShipmentRulesRequest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_WebAuthenticationDetail(self):
        return self.WebAuthenticationDetail
    def set_WebAuthenticationDetail(self, WebAuthenticationDetail):
        self.WebAuthenticationDetail = WebAuthenticationDetail
    def get_ClientDetail(self):
        return self.ClientDetail
    def set_ClientDetail(self, ClientDetail):
        self.ClientDetail = ClientDetail
    def get_UserDetail(self):
        return self.UserDetail
    def set_UserDetail(self, UserDetail):
        self.UserDetail = UserDetail
    def get_TransactionDetail(self):
        return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail):
        self.TransactionDetail = TransactionDetail
    def get_Version(self):
        return self.Version
    def set_Version(self, Version):
        self.Version = Version
    def get_RequestedShipment(self):
        return self.RequestedShipment
    def set_RequestedShipment(self, RequestedShipment):
        self.RequestedShipment = RequestedShipment
    def hasContent_(self):
        if (
            self.WebAuthenticationDetail is not None or
            self.ClientDetail is not None or
            self.UserDetail is not None or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.RequestedShipment is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GetShipmentRulesRequest', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GetShipmentRulesRequest')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'GetShipmentRulesRequest':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GetShipmentRulesRequest')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GetShipmentRulesRequest', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GetShipmentRulesRequest'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GetShipmentRulesRequest', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.WebAuthenticationDetail is not None:
            namespaceprefix_ = self.WebAuthenticationDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.WebAuthenticationDetail_nsprefix_) else ''
            self.WebAuthenticationDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='WebAuthenticationDetail', pretty_print=pretty_print)
        if self.ClientDetail is not None:
            namespaceprefix_ = self.ClientDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.ClientDetail_nsprefix_) else ''
            self.ClientDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ClientDetail', pretty_print=pretty_print)
        if self.UserDetail is not None:
            namespaceprefix_ = self.UserDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.UserDetail_nsprefix_) else ''
            self.UserDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='UserDetail', pretty_print=pretty_print)
        if self.TransactionDetail is not None:
            namespaceprefix_ = self.TransactionDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.TransactionDetail_nsprefix_) else ''
            self.TransactionDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TransactionDetail', pretty_print=pretty_print)
        if self.Version is not None:
            namespaceprefix_ = self.Version_nsprefix_ + ':' if (UseCapturedNS_ and self.Version_nsprefix_) else ''
            self.Version.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Version', pretty_print=pretty_print)
        if self.RequestedShipment is not None:
            namespaceprefix_ = self.RequestedShipment_nsprefix_ + ':' if (UseCapturedNS_ and self.RequestedShipment_nsprefix_) else ''
            self.RequestedShipment.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RequestedShipment', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'WebAuthenticationDetail':
            obj_ = WebAuthenticationDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.WebAuthenticationDetail = obj_
            obj_.original_tagname_ = 'WebAuthenticationDetail'
        elif nodeName_ == 'ClientDetail':
            obj_ = ClientDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ClientDetail = obj_
            obj_.original_tagname_ = 'ClientDetail'
        elif nodeName_ == 'UserDetail':
            obj_ = UserDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.UserDetail = obj_
            obj_.original_tagname_ = 'UserDetail'
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TransactionDetail = obj_
            obj_.original_tagname_ = 'TransactionDetail'
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Version = obj_
            obj_.original_tagname_ = 'Version'
        elif nodeName_ == 'RequestedShipment':
            obj_ = RequestedShipment.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RequestedShipment = obj_
            obj_.original_tagname_ = 'RequestedShipment'
# end class GetShipmentRulesRequest


class GetValidDateCertainDatesReply(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, HighestSeverity=None, Notifications=None, TransactionDetail=None, Version=None, DateCertainDates=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.HighestSeverity = HighestSeverity
        self.validate_NotificationSeverityType(self.HighestSeverity)
        self.HighestSeverity_nsprefix_ = "ns"
        if Notifications is None:
            self.Notifications = []
        else:
            self.Notifications = Notifications
        self.Notifications_nsprefix_ = "ns"
        self.TransactionDetail = TransactionDetail
        self.TransactionDetail_nsprefix_ = "ns"
        self.Version = Version
        self.Version_nsprefix_ = "ns"
        if DateCertainDates is None:
            self.DateCertainDates = []
        else:
            self.DateCertainDates = DateCertainDates
        self.DateCertainDates_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GetValidDateCertainDatesReply)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GetValidDateCertainDatesReply.subclass:
            return GetValidDateCertainDatesReply.subclass(*args_, **kwargs_)
        else:
            return GetValidDateCertainDatesReply(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_HighestSeverity(self):
        return self.HighestSeverity
    def set_HighestSeverity(self, HighestSeverity):
        self.HighestSeverity = HighestSeverity
    def get_Notifications(self):
        return self.Notifications
    def set_Notifications(self, Notifications):
        self.Notifications = Notifications
    def add_Notifications(self, value):
        self.Notifications.append(value)
    def insert_Notifications_at(self, index, value):
        self.Notifications.insert(index, value)
    def replace_Notifications_at(self, index, value):
        self.Notifications[index] = value
    def get_TransactionDetail(self):
        return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail):
        self.TransactionDetail = TransactionDetail
    def get_Version(self):
        return self.Version
    def set_Version(self, Version):
        self.Version = Version
    def get_DateCertainDates(self):
        return self.DateCertainDates
    def set_DateCertainDates(self, DateCertainDates):
        self.DateCertainDates = DateCertainDates
    def add_DateCertainDates(self, value):
        self.DateCertainDates.append(value)
    def insert_DateCertainDates_at(self, index, value):
        self.DateCertainDates.insert(index, value)
    def replace_DateCertainDates_at(self, index, value):
        self.DateCertainDates[index] = value
    def validate_NotificationSeverityType(self, value):
        result = True
        # Validate type NotificationSeverityType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ERROR', 'FAILURE', 'NOTE', 'SUCCESS', 'WARNING']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on NotificationSeverityType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.HighestSeverity is not None or
            self.Notifications or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.DateCertainDates
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GetValidDateCertainDatesReply', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GetValidDateCertainDatesReply')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'GetValidDateCertainDatesReply':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GetValidDateCertainDatesReply')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GetValidDateCertainDatesReply', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GetValidDateCertainDatesReply'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GetValidDateCertainDatesReply', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.HighestSeverity is not None:
            namespaceprefix_ = self.HighestSeverity_nsprefix_ + ':' if (UseCapturedNS_ and self.HighestSeverity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHighestSeverity>%s</%sHighestSeverity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.HighestSeverity), input_name='HighestSeverity')), namespaceprefix_ , eol_))
        for Notifications_ in self.Notifications:
            namespaceprefix_ = self.Notifications_nsprefix_ + ':' if (UseCapturedNS_ and self.Notifications_nsprefix_) else ''
            Notifications_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Notifications', pretty_print=pretty_print)
        if self.TransactionDetail is not None:
            namespaceprefix_ = self.TransactionDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.TransactionDetail_nsprefix_) else ''
            self.TransactionDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TransactionDetail', pretty_print=pretty_print)
        if self.Version is not None:
            namespaceprefix_ = self.Version_nsprefix_ + ':' if (UseCapturedNS_ and self.Version_nsprefix_) else ''
            self.Version.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Version', pretty_print=pretty_print)
        for DateCertainDates_ in self.DateCertainDates:
            namespaceprefix_ = self.DateCertainDates_nsprefix_ + ':' if (UseCapturedNS_ and self.DateCertainDates_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDateCertainDates>%s</%sDateCertainDates>%s' % (namespaceprefix_ , self.gds_format_date(DateCertainDates_, input_name='DateCertainDates'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'HighestSeverity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'HighestSeverity')
            value_ = self.gds_validate_string(value_, node, 'HighestSeverity')
            self.HighestSeverity = value_
            self.HighestSeverity_nsprefix_ = child_.prefix
            # validate type NotificationSeverityType
            self.validate_NotificationSeverityType(self.HighestSeverity)
        elif nodeName_ == 'Notifications':
            obj_ = Notification.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Notifications.append(obj_)
            obj_.original_tagname_ = 'Notifications'
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TransactionDetail = obj_
            obj_.original_tagname_ = 'TransactionDetail'
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Version = obj_
            obj_.original_tagname_ = 'Version'
        elif nodeName_ == 'DateCertainDates':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.DateCertainDates.append(dval_)
            self.DateCertainDates_nsprefix_ = child_.prefix
# end class GetValidDateCertainDatesReply


class GetValidDateCertainDatesRequest(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, WebAuthenticationDetail=None, ClientDetail=None, UserDetail=None, TransactionDetail=None, Version=None, ShipDate=None, OriginPostalCode=None, DestinationPostalCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.WebAuthenticationDetail = WebAuthenticationDetail
        self.WebAuthenticationDetail_nsprefix_ = "ns"
        self.ClientDetail = ClientDetail
        self.ClientDetail_nsprefix_ = "ns"
        self.UserDetail = UserDetail
        self.UserDetail_nsprefix_ = "ns"
        self.TransactionDetail = TransactionDetail
        self.TransactionDetail_nsprefix_ = "ns"
        self.Version = Version
        self.Version_nsprefix_ = "ns"
        if isinstance(ShipDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ShipDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ShipDate
        self.ShipDate = initvalue_
        self.ShipDate_nsprefix_ = None
        self.OriginPostalCode = OriginPostalCode
        self.OriginPostalCode_nsprefix_ = None
        self.DestinationPostalCode = DestinationPostalCode
        self.DestinationPostalCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GetValidDateCertainDatesRequest)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GetValidDateCertainDatesRequest.subclass:
            return GetValidDateCertainDatesRequest.subclass(*args_, **kwargs_)
        else:
            return GetValidDateCertainDatesRequest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_WebAuthenticationDetail(self):
        return self.WebAuthenticationDetail
    def set_WebAuthenticationDetail(self, WebAuthenticationDetail):
        self.WebAuthenticationDetail = WebAuthenticationDetail
    def get_ClientDetail(self):
        return self.ClientDetail
    def set_ClientDetail(self, ClientDetail):
        self.ClientDetail = ClientDetail
    def get_UserDetail(self):
        return self.UserDetail
    def set_UserDetail(self, UserDetail):
        self.UserDetail = UserDetail
    def get_TransactionDetail(self):
        return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail):
        self.TransactionDetail = TransactionDetail
    def get_Version(self):
        return self.Version
    def set_Version(self, Version):
        self.Version = Version
    def get_ShipDate(self):
        return self.ShipDate
    def set_ShipDate(self, ShipDate):
        self.ShipDate = ShipDate
    def get_OriginPostalCode(self):
        return self.OriginPostalCode
    def set_OriginPostalCode(self, OriginPostalCode):
        self.OriginPostalCode = OriginPostalCode
    def get_DestinationPostalCode(self):
        return self.DestinationPostalCode
    def set_DestinationPostalCode(self, DestinationPostalCode):
        self.DestinationPostalCode = DestinationPostalCode
    def hasContent_(self):
        if (
            self.WebAuthenticationDetail is not None or
            self.ClientDetail is not None or
            self.UserDetail is not None or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.ShipDate is not None or
            self.OriginPostalCode is not None or
            self.DestinationPostalCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GetValidDateCertainDatesRequest', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GetValidDateCertainDatesRequest')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'GetValidDateCertainDatesRequest':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GetValidDateCertainDatesRequest')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GetValidDateCertainDatesRequest', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GetValidDateCertainDatesRequest'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GetValidDateCertainDatesRequest', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.WebAuthenticationDetail is not None:
            namespaceprefix_ = self.WebAuthenticationDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.WebAuthenticationDetail_nsprefix_) else ''
            self.WebAuthenticationDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='WebAuthenticationDetail', pretty_print=pretty_print)
        if self.ClientDetail is not None:
            namespaceprefix_ = self.ClientDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.ClientDetail_nsprefix_) else ''
            self.ClientDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ClientDetail', pretty_print=pretty_print)
        if self.UserDetail is not None:
            namespaceprefix_ = self.UserDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.UserDetail_nsprefix_) else ''
            self.UserDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='UserDetail', pretty_print=pretty_print)
        if self.TransactionDetail is not None:
            namespaceprefix_ = self.TransactionDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.TransactionDetail_nsprefix_) else ''
            self.TransactionDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TransactionDetail', pretty_print=pretty_print)
        if self.Version is not None:
            namespaceprefix_ = self.Version_nsprefix_ + ':' if (UseCapturedNS_ and self.Version_nsprefix_) else ''
            self.Version.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Version', pretty_print=pretty_print)
        if self.ShipDate is not None:
            namespaceprefix_ = self.ShipDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShipDate>%s</%sShipDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ShipDate, input_name='ShipDate'), namespaceprefix_ , eol_))
        if self.OriginPostalCode is not None:
            namespaceprefix_ = self.OriginPostalCode_nsprefix_ + ':' if (UseCapturedNS_ and self.OriginPostalCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOriginPostalCode>%s</%sOriginPostalCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OriginPostalCode), input_name='OriginPostalCode')), namespaceprefix_ , eol_))
        if self.DestinationPostalCode is not None:
            namespaceprefix_ = self.DestinationPostalCode_nsprefix_ + ':' if (UseCapturedNS_ and self.DestinationPostalCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDestinationPostalCode>%s</%sDestinationPostalCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DestinationPostalCode), input_name='DestinationPostalCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'WebAuthenticationDetail':
            obj_ = WebAuthenticationDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.WebAuthenticationDetail = obj_
            obj_.original_tagname_ = 'WebAuthenticationDetail'
        elif nodeName_ == 'ClientDetail':
            obj_ = ClientDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ClientDetail = obj_
            obj_.original_tagname_ = 'ClientDetail'
        elif nodeName_ == 'UserDetail':
            obj_ = UserDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.UserDetail = obj_
            obj_.original_tagname_ = 'UserDetail'
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TransactionDetail = obj_
            obj_.original_tagname_ = 'TransactionDetail'
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Version = obj_
            obj_.original_tagname_ = 'Version'
        elif nodeName_ == 'ShipDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ShipDate = dval_
            self.ShipDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'OriginPostalCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'OriginPostalCode')
            value_ = self.gds_validate_string(value_, node, 'OriginPostalCode')
            self.OriginPostalCode = value_
            self.OriginPostalCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'DestinationPostalCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DestinationPostalCode')
            value_ = self.gds_validate_string(value_, node, 'DestinationPostalCode')
            self.DestinationPostalCode = value_
            self.DestinationPostalCode_nsprefix_ = child_.prefix
# end class GetValidDateCertainDatesRequest


class GroundProfile(GeneratedsSuper):
    """Specifies the details for a ground profile."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, GroundShipperNumber=None, Attributes=None, NationalAccountNumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.GroundShipperNumber = GroundShipperNumber
        self.GroundShipperNumber_nsprefix_ = None
        if Attributes is None:
            self.Attributes = []
        else:
            self.Attributes = Attributes
        self.Attributes_nsprefix_ = "ns"
        self.NationalAccountNumber = NationalAccountNumber
        self.NationalAccountNumber_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GroundProfile)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GroundProfile.subclass:
            return GroundProfile.subclass(*args_, **kwargs_)
        else:
            return GroundProfile(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_GroundShipperNumber(self):
        return self.GroundShipperNumber
    def set_GroundShipperNumber(self, GroundShipperNumber):
        self.GroundShipperNumber = GroundShipperNumber
    def get_Attributes(self):
        return self.Attributes
    def set_Attributes(self, Attributes):
        self.Attributes = Attributes
    def add_Attributes(self, value):
        self.Attributes.append(value)
    def insert_Attributes_at(self, index, value):
        self.Attributes.insert(index, value)
    def replace_Attributes_at(self, index, value):
        self.Attributes[index] = value
    def get_NationalAccountNumber(self):
        return self.NationalAccountNumber
    def set_NationalAccountNumber(self, NationalAccountNumber):
        self.NationalAccountNumber = NationalAccountNumber
    def validate_GroundProfileAttributeType(self, value):
        result = True
        # Validate type GroundProfileAttributeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['AGENT_AUTHORITY_ON_FILE', 'AUTHORIZED_COLLECT_RECIPIENT', 'AUTOMATIC_PROOF_OF_DELIVERY', 'BROKER_INCLUSIVE_ALLOWED', 'COD', 'ELECTRONIC_COD', 'NON_RESIDENT_IMPORTER']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on GroundProfileAttributeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.GroundShipperNumber is not None or
            self.Attributes or
            self.NationalAccountNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GroundProfile', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GroundProfile')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'GroundProfile':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GroundProfile')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GroundProfile', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GroundProfile'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GroundProfile', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.GroundShipperNumber is not None:
            namespaceprefix_ = self.GroundShipperNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.GroundShipperNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroundShipperNumber>%s</%sGroundShipperNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.GroundShipperNumber), input_name='GroundShipperNumber')), namespaceprefix_ , eol_))
        for Attributes_ in self.Attributes:
            namespaceprefix_ = self.Attributes_nsprefix_ + ':' if (UseCapturedNS_ and self.Attributes_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAttributes>%s</%sAttributes>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Attributes_), input_name='Attributes')), namespaceprefix_ , eol_))
        if self.NationalAccountNumber is not None:
            namespaceprefix_ = self.NationalAccountNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.NationalAccountNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNationalAccountNumber>%s</%sNationalAccountNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NationalAccountNumber), input_name='NationalAccountNumber')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'GroundShipperNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'GroundShipperNumber')
            value_ = self.gds_validate_string(value_, node, 'GroundShipperNumber')
            self.GroundShipperNumber = value_
            self.GroundShipperNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'Attributes':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Attributes')
            value_ = self.gds_validate_string(value_, node, 'Attributes')
            self.Attributes.append(value_)
            self.Attributes_nsprefix_ = child_.prefix
            # validate type GroundProfileAttributeType
            self.validate_GroundProfileAttributeType(self.Attributes[-1])
        elif nodeName_ == 'NationalAccountNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'NationalAccountNumber')
            value_ = self.gds_validate_string(value_, node, 'NationalAccountNumber')
            self.NationalAccountNumber = value_
            self.NationalAccountNumber_nsprefix_ = child_.prefix
# end class GroundProfile


class GroupReferenceDetail(GeneratedsSuper):
    """Specification of multiplier grouping data per carrier."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CarrierCode=None, Reference=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.CarrierCode = CarrierCode
        self.validate_CarrierCodeType(self.CarrierCode)
        self.CarrierCode_nsprefix_ = "ns"
        self.Reference = Reference
        self.validate_CustomerReferenceType(self.Reference)
        self.Reference_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GroupReferenceDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GroupReferenceDetail.subclass:
            return GroupReferenceDetail.subclass(*args_, **kwargs_)
        else:
            return GroupReferenceDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CarrierCode(self):
        return self.CarrierCode
    def set_CarrierCode(self, CarrierCode):
        self.CarrierCode = CarrierCode
    def get_Reference(self):
        return self.Reference
    def set_Reference(self, Reference):
        self.Reference = Reference
    def validate_CarrierCodeType(self, value):
        result = True
        # Validate type CarrierCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FDXC', 'FDXE', 'FDXG', 'FDXO', 'FXCC', 'FXFR', 'FXSP']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CarrierCodeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_CustomerReferenceType(self, value):
        result = True
        # Validate type CustomerReferenceType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BILL_OF_LADING', 'CUSTOMER_REFERENCE', 'DEPARTMENT_NUMBER', 'ELECTRONIC_PRODUCT_CODE', 'INTRACOUNTRY_REGULATORY_REFERENCE', 'INVOICE_NUMBER', 'P_O_NUMBER', 'RMA_ASSOCIATION', 'SHIPMENT_INTEGRITY', 'STORE_NUMBER']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CustomerReferenceType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.CarrierCode is not None or
            self.Reference is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GroupReferenceDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GroupReferenceDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'GroupReferenceDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GroupReferenceDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GroupReferenceDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GroupReferenceDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GroupReferenceDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CarrierCode is not None:
            namespaceprefix_ = self.CarrierCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CarrierCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCarrierCode>%s</%sCarrierCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CarrierCode), input_name='CarrierCode')), namespaceprefix_ , eol_))
        if self.Reference is not None:
            namespaceprefix_ = self.Reference_nsprefix_ + ':' if (UseCapturedNS_ and self.Reference_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReference>%s</%sReference>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Reference), input_name='Reference')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CarrierCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CarrierCode')
            value_ = self.gds_validate_string(value_, node, 'CarrierCode')
            self.CarrierCode = value_
            self.CarrierCode_nsprefix_ = child_.prefix
            # validate type CarrierCodeType
            self.validate_CarrierCodeType(self.CarrierCode)
        elif nodeName_ == 'Reference':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Reference')
            value_ = self.gds_validate_string(value_, node, 'Reference')
            self.Reference = value_
            self.Reference_nsprefix_ = child_.prefix
            # validate type CustomerReferenceType
            self.validate_CustomerReferenceType(self.Reference)
# end class GroupReferenceDetail


class HazardousCommodityContent(GeneratedsSuper):
    """Documents the kind and quantity of an individual hazardous commodity in
    a package."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Description=None, Quantity=None, Options=None, RadionuclideDetail=None, NetExplosiveDetail=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = "ns"
        self.Quantity = Quantity
        self.Quantity_nsprefix_ = "ns"
        self.Options = Options
        self.Options_nsprefix_ = "ns"
        self.RadionuclideDetail = RadionuclideDetail
        self.RadionuclideDetail_nsprefix_ = "ns"
        self.NetExplosiveDetail = NetExplosiveDetail
        self.NetExplosiveDetail_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HazardousCommodityContent)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HazardousCommodityContent.subclass:
            return HazardousCommodityContent.subclass(*args_, **kwargs_)
        else:
            return HazardousCommodityContent(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def get_Quantity(self):
        return self.Quantity
    def set_Quantity(self, Quantity):
        self.Quantity = Quantity
    def get_Options(self):
        return self.Options
    def set_Options(self, Options):
        self.Options = Options
    def get_RadionuclideDetail(self):
        return self.RadionuclideDetail
    def set_RadionuclideDetail(self, RadionuclideDetail):
        self.RadionuclideDetail = RadionuclideDetail
    def get_NetExplosiveDetail(self):
        return self.NetExplosiveDetail
    def set_NetExplosiveDetail(self, NetExplosiveDetail):
        self.NetExplosiveDetail = NetExplosiveDetail
    def hasContent_(self):
        if (
            self.Description is not None or
            self.Quantity is not None or
            self.Options is not None or
            self.RadionuclideDetail is not None or
            self.NetExplosiveDetail is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='HazardousCommodityContent', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HazardousCommodityContent')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'HazardousCommodityContent':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HazardousCommodityContent')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HazardousCommodityContent', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HazardousCommodityContent'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='HazardousCommodityContent', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            self.Description.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Description', pretty_print=pretty_print)
        if self.Quantity is not None:
            namespaceprefix_ = self.Quantity_nsprefix_ + ':' if (UseCapturedNS_ and self.Quantity_nsprefix_) else ''
            self.Quantity.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Quantity', pretty_print=pretty_print)
        if self.Options is not None:
            namespaceprefix_ = self.Options_nsprefix_ + ':' if (UseCapturedNS_ and self.Options_nsprefix_) else ''
            self.Options.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Options', pretty_print=pretty_print)
        if self.RadionuclideDetail is not None:
            namespaceprefix_ = self.RadionuclideDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.RadionuclideDetail_nsprefix_) else ''
            self.RadionuclideDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RadionuclideDetail', pretty_print=pretty_print)
        if self.NetExplosiveDetail is not None:
            namespaceprefix_ = self.NetExplosiveDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.NetExplosiveDetail_nsprefix_) else ''
            self.NetExplosiveDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='NetExplosiveDetail', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Description':
            obj_ = HazardousCommodityDescription.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'Quantity':
            obj_ = HazardousCommodityQuantityDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Quantity = obj_
            obj_.original_tagname_ = 'Quantity'
        elif nodeName_ == 'Options':
            obj_ = HazardousCommodityOptionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Options = obj_
            obj_.original_tagname_ = 'Options'
        elif nodeName_ == 'RadionuclideDetail':
            obj_ = RadionuclideDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RadionuclideDetail = obj_
            obj_.original_tagname_ = 'RadionuclideDetail'
        elif nodeName_ == 'NetExplosiveDetail':
            obj_ = NetExplosiveDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.NetExplosiveDetail = obj_
            obj_.original_tagname_ = 'NetExplosiveDetail'
# end class HazardousCommodityContent


class HazardousCommodityDescription(GeneratedsSuper):
    """Identifies and describes an individual hazardous commodity."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Id=None, SequenceNumber=None, PackingGroup=None, PackingDetails=None, ReportableQuantity=None, ProperShippingName=None, TechnicalName=None, Percentage=None, HazardClass=None, SubsidiaryClasses=None, LabelText=None, ProcessingOptions=None, Authorization=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Id = Id
        self.Id_nsprefix_ = None
        self.SequenceNumber = SequenceNumber
        self.SequenceNumber_nsprefix_ = None
        self.PackingGroup = PackingGroup
        self.validate_HazardousCommodityPackingGroupType(self.PackingGroup)
        self.PackingGroup_nsprefix_ = "ns"
        self.PackingDetails = PackingDetails
        self.PackingDetails_nsprefix_ = "ns"
        self.ReportableQuantity = ReportableQuantity
        self.ReportableQuantity_nsprefix_ = None
        self.ProperShippingName = ProperShippingName
        self.ProperShippingName_nsprefix_ = None
        self.TechnicalName = TechnicalName
        self.TechnicalName_nsprefix_ = None
        self.Percentage = Percentage
        self.Percentage_nsprefix_ = None
        self.HazardClass = HazardClass
        self.HazardClass_nsprefix_ = None
        if SubsidiaryClasses is None:
            self.SubsidiaryClasses = []
        else:
            self.SubsidiaryClasses = SubsidiaryClasses
        self.SubsidiaryClasses_nsprefix_ = None
        self.LabelText = LabelText
        self.LabelText_nsprefix_ = None
        if ProcessingOptions is None:
            self.ProcessingOptions = []
        else:
            self.ProcessingOptions = ProcessingOptions
        self.ProcessingOptions_nsprefix_ = "ns"
        self.Authorization = Authorization
        self.Authorization_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HazardousCommodityDescription)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HazardousCommodityDescription.subclass:
            return HazardousCommodityDescription.subclass(*args_, **kwargs_)
        else:
            return HazardousCommodityDescription(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Id(self):
        return self.Id
    def set_Id(self, Id):
        self.Id = Id
    def get_SequenceNumber(self):
        return self.SequenceNumber
    def set_SequenceNumber(self, SequenceNumber):
        self.SequenceNumber = SequenceNumber
    def get_PackingGroup(self):
        return self.PackingGroup
    def set_PackingGroup(self, PackingGroup):
        self.PackingGroup = PackingGroup
    def get_PackingDetails(self):
        return self.PackingDetails
    def set_PackingDetails(self, PackingDetails):
        self.PackingDetails = PackingDetails
    def get_ReportableQuantity(self):
        return self.ReportableQuantity
    def set_ReportableQuantity(self, ReportableQuantity):
        self.ReportableQuantity = ReportableQuantity
    def get_ProperShippingName(self):
        return self.ProperShippingName
    def set_ProperShippingName(self, ProperShippingName):
        self.ProperShippingName = ProperShippingName
    def get_TechnicalName(self):
        return self.TechnicalName
    def set_TechnicalName(self, TechnicalName):
        self.TechnicalName = TechnicalName
    def get_Percentage(self):
        return self.Percentage
    def set_Percentage(self, Percentage):
        self.Percentage = Percentage
    def get_HazardClass(self):
        return self.HazardClass
    def set_HazardClass(self, HazardClass):
        self.HazardClass = HazardClass
    def get_SubsidiaryClasses(self):
        return self.SubsidiaryClasses
    def set_SubsidiaryClasses(self, SubsidiaryClasses):
        self.SubsidiaryClasses = SubsidiaryClasses
    def add_SubsidiaryClasses(self, value):
        self.SubsidiaryClasses.append(value)
    def insert_SubsidiaryClasses_at(self, index, value):
        self.SubsidiaryClasses.insert(index, value)
    def replace_SubsidiaryClasses_at(self, index, value):
        self.SubsidiaryClasses[index] = value
    def get_LabelText(self):
        return self.LabelText
    def set_LabelText(self, LabelText):
        self.LabelText = LabelText
    def get_ProcessingOptions(self):
        return self.ProcessingOptions
    def set_ProcessingOptions(self, ProcessingOptions):
        self.ProcessingOptions = ProcessingOptions
    def add_ProcessingOptions(self, value):
        self.ProcessingOptions.append(value)
    def insert_ProcessingOptions_at(self, index, value):
        self.ProcessingOptions.insert(index, value)
    def replace_ProcessingOptions_at(self, index, value):
        self.ProcessingOptions[index] = value
    def get_Authorization(self):
        return self.Authorization
    def set_Authorization(self, Authorization):
        self.Authorization = Authorization
    def validate_HazardousCommodityPackingGroupType(self, value):
        result = True
        # Validate type HazardousCommodityPackingGroupType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['DEFAULT', 'I', 'II', 'III']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on HazardousCommodityPackingGroupType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_HazardousCommodityDescriptionProcessingOptionType(self, value):
        result = True
        # Validate type HazardousCommodityDescriptionProcessingOptionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['INCLUDE_SPECIAL_PROVISIONS']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on HazardousCommodityDescriptionProcessingOptionType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Id is not None or
            self.SequenceNumber is not None or
            self.PackingGroup is not None or
            self.PackingDetails is not None or
            self.ReportableQuantity is not None or
            self.ProperShippingName is not None or
            self.TechnicalName is not None or
            self.Percentage is not None or
            self.HazardClass is not None or
            self.SubsidiaryClasses or
            self.LabelText is not None or
            self.ProcessingOptions or
            self.Authorization is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='HazardousCommodityDescription', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HazardousCommodityDescription')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'HazardousCommodityDescription':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HazardousCommodityDescription')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HazardousCommodityDescription', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HazardousCommodityDescription'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='HazardousCommodityDescription', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Id is not None:
            namespaceprefix_ = self.Id_nsprefix_ + ':' if (UseCapturedNS_ and self.Id_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sId>%s</%sId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Id), input_name='Id')), namespaceprefix_ , eol_))
        if self.SequenceNumber is not None:
            namespaceprefix_ = self.SequenceNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.SequenceNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSequenceNumber>%s</%sSequenceNumber>%s' % (namespaceprefix_ , self.gds_format_integer(self.SequenceNumber, input_name='SequenceNumber'), namespaceprefix_ , eol_))
        if self.PackingGroup is not None:
            namespaceprefix_ = self.PackingGroup_nsprefix_ + ':' if (UseCapturedNS_ and self.PackingGroup_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackingGroup>%s</%sPackingGroup>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PackingGroup), input_name='PackingGroup')), namespaceprefix_ , eol_))
        if self.PackingDetails is not None:
            namespaceprefix_ = self.PackingDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.PackingDetails_nsprefix_) else ''
            self.PackingDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PackingDetails', pretty_print=pretty_print)
        if self.ReportableQuantity is not None:
            namespaceprefix_ = self.ReportableQuantity_nsprefix_ + ':' if (UseCapturedNS_ and self.ReportableQuantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReportableQuantity>%s</%sReportableQuantity>%s' % (namespaceprefix_ , self.gds_format_boolean(self.ReportableQuantity, input_name='ReportableQuantity'), namespaceprefix_ , eol_))
        if self.ProperShippingName is not None:
            namespaceprefix_ = self.ProperShippingName_nsprefix_ + ':' if (UseCapturedNS_ and self.ProperShippingName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProperShippingName>%s</%sProperShippingName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ProperShippingName), input_name='ProperShippingName')), namespaceprefix_ , eol_))
        if self.TechnicalName is not None:
            namespaceprefix_ = self.TechnicalName_nsprefix_ + ':' if (UseCapturedNS_ and self.TechnicalName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTechnicalName>%s</%sTechnicalName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TechnicalName), input_name='TechnicalName')), namespaceprefix_ , eol_))
        if self.Percentage is not None:
            namespaceprefix_ = self.Percentage_nsprefix_ + ':' if (UseCapturedNS_ and self.Percentage_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPercentage>%s</%sPercentage>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Percentage, input_name='Percentage'), namespaceprefix_ , eol_))
        if self.HazardClass is not None:
            namespaceprefix_ = self.HazardClass_nsprefix_ + ':' if (UseCapturedNS_ and self.HazardClass_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHazardClass>%s</%sHazardClass>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.HazardClass), input_name='HazardClass')), namespaceprefix_ , eol_))
        for SubsidiaryClasses_ in self.SubsidiaryClasses:
            namespaceprefix_ = self.SubsidiaryClasses_nsprefix_ + ':' if (UseCapturedNS_ and self.SubsidiaryClasses_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSubsidiaryClasses>%s</%sSubsidiaryClasses>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(SubsidiaryClasses_), input_name='SubsidiaryClasses')), namespaceprefix_ , eol_))
        if self.LabelText is not None:
            namespaceprefix_ = self.LabelText_nsprefix_ + ':' if (UseCapturedNS_ and self.LabelText_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLabelText>%s</%sLabelText>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LabelText), input_name='LabelText')), namespaceprefix_ , eol_))
        for ProcessingOptions_ in self.ProcessingOptions:
            namespaceprefix_ = self.ProcessingOptions_nsprefix_ + ':' if (UseCapturedNS_ and self.ProcessingOptions_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProcessingOptions>%s</%sProcessingOptions>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(ProcessingOptions_), input_name='ProcessingOptions')), namespaceprefix_ , eol_))
        if self.Authorization is not None:
            namespaceprefix_ = self.Authorization_nsprefix_ + ':' if (UseCapturedNS_ and self.Authorization_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAuthorization>%s</%sAuthorization>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Authorization), input_name='Authorization')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Id':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Id')
            value_ = self.gds_validate_string(value_, node, 'Id')
            self.Id = value_
            self.Id_nsprefix_ = child_.prefix
        elif nodeName_ == 'SequenceNumber' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'SequenceNumber')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'SequenceNumber')
            self.SequenceNumber = ival_
            self.SequenceNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'PackingGroup':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PackingGroup')
            value_ = self.gds_validate_string(value_, node, 'PackingGroup')
            self.PackingGroup = value_
            self.PackingGroup_nsprefix_ = child_.prefix
            # validate type HazardousCommodityPackingGroupType
            self.validate_HazardousCommodityPackingGroupType(self.PackingGroup)
        elif nodeName_ == 'PackingDetails':
            obj_ = HazardousCommodityPackingDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PackingDetails = obj_
            obj_.original_tagname_ = 'PackingDetails'
        elif nodeName_ == 'ReportableQuantity':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'ReportableQuantity')
            ival_ = self.gds_validate_boolean(ival_, node, 'ReportableQuantity')
            self.ReportableQuantity = ival_
            self.ReportableQuantity_nsprefix_ = child_.prefix
        elif nodeName_ == 'ProperShippingName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ProperShippingName')
            value_ = self.gds_validate_string(value_, node, 'ProperShippingName')
            self.ProperShippingName = value_
            self.ProperShippingName_nsprefix_ = child_.prefix
        elif nodeName_ == 'TechnicalName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TechnicalName')
            value_ = self.gds_validate_string(value_, node, 'TechnicalName')
            self.TechnicalName = value_
            self.TechnicalName_nsprefix_ = child_.prefix
        elif nodeName_ == 'Percentage' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Percentage')
            fval_ = self.gds_validate_decimal(fval_, node, 'Percentage')
            self.Percentage = fval_
            self.Percentage_nsprefix_ = child_.prefix
        elif nodeName_ == 'HazardClass':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'HazardClass')
            value_ = self.gds_validate_string(value_, node, 'HazardClass')
            self.HazardClass = value_
            self.HazardClass_nsprefix_ = child_.prefix
        elif nodeName_ == 'SubsidiaryClasses':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SubsidiaryClasses')
            value_ = self.gds_validate_string(value_, node, 'SubsidiaryClasses')
            self.SubsidiaryClasses.append(value_)
            self.SubsidiaryClasses_nsprefix_ = child_.prefix
        elif nodeName_ == 'LabelText':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LabelText')
            value_ = self.gds_validate_string(value_, node, 'LabelText')
            self.LabelText = value_
            self.LabelText_nsprefix_ = child_.prefix
        elif nodeName_ == 'ProcessingOptions':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ProcessingOptions')
            value_ = self.gds_validate_string(value_, node, 'ProcessingOptions')
            self.ProcessingOptions.append(value_)
            self.ProcessingOptions_nsprefix_ = child_.prefix
            # validate type HazardousCommodityDescriptionProcessingOptionType
            self.validate_HazardousCommodityDescriptionProcessingOptionType(self.ProcessingOptions[-1])
        elif nodeName_ == 'Authorization':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Authorization')
            value_ = self.gds_validate_string(value_, node, 'Authorization')
            self.Authorization = value_
            self.Authorization_nsprefix_ = child_.prefix
# end class HazardousCommodityDescription


class HazardousCommodityOptionDetail(GeneratedsSuper):
    """Customer-provided specifications for handling individual commodities."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, LabelTextOption=None, CustomerSuppliedLabelText=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.LabelTextOption = LabelTextOption
        self.validate_HazardousCommodityLabelTextOptionType(self.LabelTextOption)
        self.LabelTextOption_nsprefix_ = "ns"
        self.CustomerSuppliedLabelText = CustomerSuppliedLabelText
        self.CustomerSuppliedLabelText_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HazardousCommodityOptionDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HazardousCommodityOptionDetail.subclass:
            return HazardousCommodityOptionDetail.subclass(*args_, **kwargs_)
        else:
            return HazardousCommodityOptionDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_LabelTextOption(self):
        return self.LabelTextOption
    def set_LabelTextOption(self, LabelTextOption):
        self.LabelTextOption = LabelTextOption
    def get_CustomerSuppliedLabelText(self):
        return self.CustomerSuppliedLabelText
    def set_CustomerSuppliedLabelText(self, CustomerSuppliedLabelText):
        self.CustomerSuppliedLabelText = CustomerSuppliedLabelText
    def validate_HazardousCommodityLabelTextOptionType(self, value):
        result = True
        # Validate type HazardousCommodityLabelTextOptionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['APPEND', 'OVERRIDE', 'STANDARD']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on HazardousCommodityLabelTextOptionType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.LabelTextOption is not None or
            self.CustomerSuppliedLabelText is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='HazardousCommodityOptionDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HazardousCommodityOptionDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'HazardousCommodityOptionDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HazardousCommodityOptionDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HazardousCommodityOptionDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HazardousCommodityOptionDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='HazardousCommodityOptionDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LabelTextOption is not None:
            namespaceprefix_ = self.LabelTextOption_nsprefix_ + ':' if (UseCapturedNS_ and self.LabelTextOption_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLabelTextOption>%s</%sLabelTextOption>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LabelTextOption), input_name='LabelTextOption')), namespaceprefix_ , eol_))
        if self.CustomerSuppliedLabelText is not None:
            namespaceprefix_ = self.CustomerSuppliedLabelText_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomerSuppliedLabelText_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCustomerSuppliedLabelText>%s</%sCustomerSuppliedLabelText>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CustomerSuppliedLabelText), input_name='CustomerSuppliedLabelText')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'LabelTextOption':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LabelTextOption')
            value_ = self.gds_validate_string(value_, node, 'LabelTextOption')
            self.LabelTextOption = value_
            self.LabelTextOption_nsprefix_ = child_.prefix
            # validate type HazardousCommodityLabelTextOptionType
            self.validate_HazardousCommodityLabelTextOptionType(self.LabelTextOption)
        elif nodeName_ == 'CustomerSuppliedLabelText':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CustomerSuppliedLabelText')
            value_ = self.gds_validate_string(value_, node, 'CustomerSuppliedLabelText')
            self.CustomerSuppliedLabelText = value_
            self.CustomerSuppliedLabelText_nsprefix_ = child_.prefix
# end class HazardousCommodityOptionDetail


class HazardousCommodityPackagingDetail(GeneratedsSuper):
    """Identifies number and type of packaging units for hazardous
    commodities."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Count=None, Units=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Count = Count
        self.Count_nsprefix_ = None
        self.Units = Units
        self.Units_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HazardousCommodityPackagingDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HazardousCommodityPackagingDetail.subclass:
            return HazardousCommodityPackagingDetail.subclass(*args_, **kwargs_)
        else:
            return HazardousCommodityPackagingDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Count(self):
        return self.Count
    def set_Count(self, Count):
        self.Count = Count
    def get_Units(self):
        return self.Units
    def set_Units(self, Units):
        self.Units = Units
    def hasContent_(self):
        if (
            self.Count is not None or
            self.Units is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='HazardousCommodityPackagingDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HazardousCommodityPackagingDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'HazardousCommodityPackagingDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HazardousCommodityPackagingDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HazardousCommodityPackagingDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HazardousCommodityPackagingDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='HazardousCommodityPackagingDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Count is not None:
            namespaceprefix_ = self.Count_nsprefix_ + ':' if (UseCapturedNS_ and self.Count_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCount>%s</%sCount>%s' % (namespaceprefix_ , self.gds_format_integer(self.Count, input_name='Count'), namespaceprefix_ , eol_))
        if self.Units is not None:
            namespaceprefix_ = self.Units_nsprefix_ + ':' if (UseCapturedNS_ and self.Units_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnits>%s</%sUnits>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Units), input_name='Units')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Count' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'Count')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'Count')
            self.Count = ival_
            self.Count_nsprefix_ = child_.prefix
        elif nodeName_ == 'Units':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Units')
            value_ = self.gds_validate_string(value_, node, 'Units')
            self.Units = value_
            self.Units_nsprefix_ = child_.prefix
# end class HazardousCommodityPackagingDetail


class HazardousCommodityPackingDetail(GeneratedsSuper):
    """Specifies documentation and limits for validation of an individual
    packing group/category."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CargoAircraftOnly=None, PackingInstructions=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.CargoAircraftOnly = CargoAircraftOnly
        self.CargoAircraftOnly_nsprefix_ = None
        self.PackingInstructions = PackingInstructions
        self.PackingInstructions_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HazardousCommodityPackingDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HazardousCommodityPackingDetail.subclass:
            return HazardousCommodityPackingDetail.subclass(*args_, **kwargs_)
        else:
            return HazardousCommodityPackingDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CargoAircraftOnly(self):
        return self.CargoAircraftOnly
    def set_CargoAircraftOnly(self, CargoAircraftOnly):
        self.CargoAircraftOnly = CargoAircraftOnly
    def get_PackingInstructions(self):
        return self.PackingInstructions
    def set_PackingInstructions(self, PackingInstructions):
        self.PackingInstructions = PackingInstructions
    def hasContent_(self):
        if (
            self.CargoAircraftOnly is not None or
            self.PackingInstructions is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='HazardousCommodityPackingDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HazardousCommodityPackingDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'HazardousCommodityPackingDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HazardousCommodityPackingDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HazardousCommodityPackingDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HazardousCommodityPackingDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='HazardousCommodityPackingDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CargoAircraftOnly is not None:
            namespaceprefix_ = self.CargoAircraftOnly_nsprefix_ + ':' if (UseCapturedNS_ and self.CargoAircraftOnly_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCargoAircraftOnly>%s</%sCargoAircraftOnly>%s' % (namespaceprefix_ , self.gds_format_boolean(self.CargoAircraftOnly, input_name='CargoAircraftOnly'), namespaceprefix_ , eol_))
        if self.PackingInstructions is not None:
            namespaceprefix_ = self.PackingInstructions_nsprefix_ + ':' if (UseCapturedNS_ and self.PackingInstructions_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackingInstructions>%s</%sPackingInstructions>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PackingInstructions), input_name='PackingInstructions')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CargoAircraftOnly':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'CargoAircraftOnly')
            ival_ = self.gds_validate_boolean(ival_, node, 'CargoAircraftOnly')
            self.CargoAircraftOnly = ival_
            self.CargoAircraftOnly_nsprefix_ = child_.prefix
        elif nodeName_ == 'PackingInstructions':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PackingInstructions')
            value_ = self.gds_validate_string(value_, node, 'PackingInstructions')
            self.PackingInstructions = value_
            self.PackingInstructions_nsprefix_ = child_.prefix
# end class HazardousCommodityPackingDetail


class HazardousCommodityQuantityDetail(GeneratedsSuper):
    """Identifies amount and units for quantity of hazardous commodities."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Amount=None, Units=None, QuantityType=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Amount = Amount
        self.Amount_nsprefix_ = None
        self.Units = Units
        self.Units_nsprefix_ = None
        self.QuantityType = QuantityType
        self.validate_HazardousCommodityQuantityType(self.QuantityType)
        self.QuantityType_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HazardousCommodityQuantityDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HazardousCommodityQuantityDetail.subclass:
            return HazardousCommodityQuantityDetail.subclass(*args_, **kwargs_)
        else:
            return HazardousCommodityQuantityDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Amount(self):
        return self.Amount
    def set_Amount(self, Amount):
        self.Amount = Amount
    def get_Units(self):
        return self.Units
    def set_Units(self, Units):
        self.Units = Units
    def get_QuantityType(self):
        return self.QuantityType
    def set_QuantityType(self, QuantityType):
        self.QuantityType = QuantityType
    def validate_HazardousCommodityQuantityType(self, value):
        result = True
        # Validate type HazardousCommodityQuantityType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['GROSS', 'NET']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on HazardousCommodityQuantityType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Amount is not None or
            self.Units is not None or
            self.QuantityType is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='HazardousCommodityQuantityDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HazardousCommodityQuantityDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'HazardousCommodityQuantityDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HazardousCommodityQuantityDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HazardousCommodityQuantityDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HazardousCommodityQuantityDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='HazardousCommodityQuantityDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Amount is not None:
            namespaceprefix_ = self.Amount_nsprefix_ + ':' if (UseCapturedNS_ and self.Amount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAmount>%s</%sAmount>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Amount, input_name='Amount'), namespaceprefix_ , eol_))
        if self.Units is not None:
            namespaceprefix_ = self.Units_nsprefix_ + ':' if (UseCapturedNS_ and self.Units_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnits>%s</%sUnits>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Units), input_name='Units')), namespaceprefix_ , eol_))
        if self.QuantityType is not None:
            namespaceprefix_ = self.QuantityType_nsprefix_ + ':' if (UseCapturedNS_ and self.QuantityType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantityType>%s</%sQuantityType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.QuantityType), input_name='QuantityType')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Amount' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Amount')
            fval_ = self.gds_validate_decimal(fval_, node, 'Amount')
            self.Amount = fval_
            self.Amount_nsprefix_ = child_.prefix
        elif nodeName_ == 'Units':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Units')
            value_ = self.gds_validate_string(value_, node, 'Units')
            self.Units = value_
            self.Units_nsprefix_ = child_.prefix
        elif nodeName_ == 'QuantityType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'QuantityType')
            value_ = self.gds_validate_string(value_, node, 'QuantityType')
            self.QuantityType = value_
            self.QuantityType_nsprefix_ = child_.prefix
            # validate type HazardousCommodityQuantityType
            self.validate_HazardousCommodityQuantityType(self.QuantityType)
# end class HazardousCommodityQuantityDetail


class HoldAtLocationDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PhoneNumber=None, LocationContactAndAddress=None, LocationType=None, LocationId=None, LocationNumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PhoneNumber = PhoneNumber
        self.PhoneNumber_nsprefix_ = None
        self.LocationContactAndAddress = LocationContactAndAddress
        self.LocationContactAndAddress_nsprefix_ = "ns"
        self.LocationType = LocationType
        self.validate_FedExLocationType(self.LocationType)
        self.LocationType_nsprefix_ = "ns"
        self.LocationId = LocationId
        self.LocationId_nsprefix_ = None
        self.LocationNumber = LocationNumber
        self.LocationNumber_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HoldAtLocationDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HoldAtLocationDetail.subclass:
            return HoldAtLocationDetail.subclass(*args_, **kwargs_)
        else:
            return HoldAtLocationDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PhoneNumber(self):
        return self.PhoneNumber
    def set_PhoneNumber(self, PhoneNumber):
        self.PhoneNumber = PhoneNumber
    def get_LocationContactAndAddress(self):
        return self.LocationContactAndAddress
    def set_LocationContactAndAddress(self, LocationContactAndAddress):
        self.LocationContactAndAddress = LocationContactAndAddress
    def get_LocationType(self):
        return self.LocationType
    def set_LocationType(self, LocationType):
        self.LocationType = LocationType
    def get_LocationId(self):
        return self.LocationId
    def set_LocationId(self, LocationId):
        self.LocationId = LocationId
    def get_LocationNumber(self):
        return self.LocationNumber
    def set_LocationNumber(self, LocationNumber):
        self.LocationNumber = LocationNumber
    def validate_FedExLocationType(self, value):
        result = True
        # Validate type FedExLocationType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FEDEX_AUTHORIZED_SHIP_CENTER', 'FEDEX_EXPRESS_STATION', 'FEDEX_FACILITY', 'FEDEX_FREIGHT_SERVICE_CENTER', 'FEDEX_GROUND_TERMINAL', 'FEDEX_HOME_DELIVERY_STATION', 'FEDEX_OFFICE', 'FEDEX_ONSITE', 'FEDEX_SELF_SERVICE_LOCATION', 'FEDEX_SHIPSITE', 'FEDEX_SHIP_AND_GET', 'FEDEX_SMART_POST_HUB']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on FedExLocationType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.PhoneNumber is not None or
            self.LocationContactAndAddress is not None or
            self.LocationType is not None or
            self.LocationId is not None or
            self.LocationNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='HoldAtLocationDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HoldAtLocationDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'HoldAtLocationDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HoldAtLocationDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HoldAtLocationDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HoldAtLocationDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='HoldAtLocationDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PhoneNumber is not None:
            namespaceprefix_ = self.PhoneNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.PhoneNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPhoneNumber>%s</%sPhoneNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PhoneNumber), input_name='PhoneNumber')), namespaceprefix_ , eol_))
        if self.LocationContactAndAddress is not None:
            namespaceprefix_ = self.LocationContactAndAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.LocationContactAndAddress_nsprefix_) else ''
            self.LocationContactAndAddress.export(outfile, level, namespaceprefix_, namespacedef_='', name_='LocationContactAndAddress', pretty_print=pretty_print)
        if self.LocationType is not None:
            namespaceprefix_ = self.LocationType_nsprefix_ + ':' if (UseCapturedNS_ and self.LocationType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocationType>%s</%sLocationType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LocationType), input_name='LocationType')), namespaceprefix_ , eol_))
        if self.LocationId is not None:
            namespaceprefix_ = self.LocationId_nsprefix_ + ':' if (UseCapturedNS_ and self.LocationId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocationId>%s</%sLocationId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LocationId), input_name='LocationId')), namespaceprefix_ , eol_))
        if self.LocationNumber is not None:
            namespaceprefix_ = self.LocationNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.LocationNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocationNumber>%s</%sLocationNumber>%s' % (namespaceprefix_ , self.gds_format_integer(self.LocationNumber, input_name='LocationNumber'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PhoneNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PhoneNumber')
            value_ = self.gds_validate_string(value_, node, 'PhoneNumber')
            self.PhoneNumber = value_
            self.PhoneNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'LocationContactAndAddress':
            obj_ = ContactAndAddress.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.LocationContactAndAddress = obj_
            obj_.original_tagname_ = 'LocationContactAndAddress'
        elif nodeName_ == 'LocationType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LocationType')
            value_ = self.gds_validate_string(value_, node, 'LocationType')
            self.LocationType = value_
            self.LocationType_nsprefix_ = child_.prefix
            # validate type FedExLocationType
            self.validate_FedExLocationType(self.LocationType)
        elif nodeName_ == 'LocationId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LocationId')
            value_ = self.gds_validate_string(value_, node, 'LocationId')
            self.LocationId = value_
            self.LocationId_nsprefix_ = child_.prefix
        elif nodeName_ == 'LocationNumber' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'LocationNumber')
            ival_ = self.gds_validate_integer(ival_, node, 'LocationNumber')
            self.LocationNumber = ival_
            self.LocationNumber_nsprefix_ = child_.prefix
# end class HoldAtLocationDetail


class HomeDeliveryPremiumDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, HomeDeliveryPremiumType=None, Date=None, PhoneNumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.HomeDeliveryPremiumType = HomeDeliveryPremiumType
        self.validate_HomeDeliveryPremiumType(self.HomeDeliveryPremiumType)
        self.HomeDeliveryPremiumType_nsprefix_ = "ns"
        if isinstance(Date, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Date, '%Y-%m-%d').date()
        else:
            initvalue_ = Date
        self.Date = initvalue_
        self.Date_nsprefix_ = None
        self.PhoneNumber = PhoneNumber
        self.PhoneNumber_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HomeDeliveryPremiumDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HomeDeliveryPremiumDetail.subclass:
            return HomeDeliveryPremiumDetail.subclass(*args_, **kwargs_)
        else:
            return HomeDeliveryPremiumDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_HomeDeliveryPremiumType(self):
        return self.HomeDeliveryPremiumType
    def set_HomeDeliveryPremiumType(self, HomeDeliveryPremiumType):
        self.HomeDeliveryPremiumType = HomeDeliveryPremiumType
    def get_Date(self):
        return self.Date
    def set_Date(self, Date):
        self.Date = Date
    def get_PhoneNumber(self):
        return self.PhoneNumber
    def set_PhoneNumber(self, PhoneNumber):
        self.PhoneNumber = PhoneNumber
    def validate_HomeDeliveryPremiumType(self, value):
        result = True
        # Validate type HomeDeliveryPremiumType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['APPOINTMENT', 'DATE_CERTAIN', 'EVENING']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on HomeDeliveryPremiumType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.HomeDeliveryPremiumType is not None or
            self.Date is not None or
            self.PhoneNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='HomeDeliveryPremiumDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HomeDeliveryPremiumDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'HomeDeliveryPremiumDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HomeDeliveryPremiumDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HomeDeliveryPremiumDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HomeDeliveryPremiumDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='HomeDeliveryPremiumDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.HomeDeliveryPremiumType is not None:
            namespaceprefix_ = self.HomeDeliveryPremiumType_nsprefix_ + ':' if (UseCapturedNS_ and self.HomeDeliveryPremiumType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHomeDeliveryPremiumType>%s</%sHomeDeliveryPremiumType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.HomeDeliveryPremiumType), input_name='HomeDeliveryPremiumType')), namespaceprefix_ , eol_))
        if self.Date is not None:
            namespaceprefix_ = self.Date_nsprefix_ + ':' if (UseCapturedNS_ and self.Date_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDate>%s</%sDate>%s' % (namespaceprefix_ , self.gds_format_date(self.Date, input_name='Date'), namespaceprefix_ , eol_))
        if self.PhoneNumber is not None:
            namespaceprefix_ = self.PhoneNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.PhoneNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPhoneNumber>%s</%sPhoneNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PhoneNumber), input_name='PhoneNumber')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'HomeDeliveryPremiumType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'HomeDeliveryPremiumType')
            value_ = self.gds_validate_string(value_, node, 'HomeDeliveryPremiumType')
            self.HomeDeliveryPremiumType = value_
            self.HomeDeliveryPremiumType_nsprefix_ = child_.prefix
            # validate type HomeDeliveryPremiumType
            self.validate_HomeDeliveryPremiumType(self.HomeDeliveryPremiumType)
        elif nodeName_ == 'Date':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Date = dval_
            self.Date_nsprefix_ = child_.prefix
        elif nodeName_ == 'PhoneNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PhoneNumber')
            value_ = self.gds_validate_string(value_, node, 'PhoneNumber')
            self.PhoneNumber = value_
            self.PhoneNumber_nsprefix_ = child_.prefix
# end class HomeDeliveryPremiumDetail


class InitiativeManifest(GeneratedsSuper):
    """Represents a transaction-specific set of initiative control data for all
    services."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Content=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Content is None:
            self.Content = []
        else:
            self.Content = Content
        self.Content_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InitiativeManifest)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InitiativeManifest.subclass:
            return InitiativeManifest.subclass(*args_, **kwargs_)
        else:
            return InitiativeManifest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Content(self):
        return self.Content
    def set_Content(self, Content):
        self.Content = Content
    def add_Content(self, value):
        self.Content.append(value)
    def insert_Content_at(self, index, value):
        self.Content.insert(index, value)
    def replace_Content_at(self, index, value):
        self.Content[index] = value
    def hasContent_(self):
        if (
            self.Content
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='InitiativeManifest', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InitiativeManifest')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'InitiativeManifest':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InitiativeManifest')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='InitiativeManifest', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='InitiativeManifest'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='InitiativeManifest', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Content_ in self.Content:
            namespaceprefix_ = self.Content_nsprefix_ + ':' if (UseCapturedNS_ and self.Content_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContent>%s</%sContent>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Content_), input_name='Content')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Content':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Content')
            value_ = self.gds_validate_string(value_, node, 'Content')
            self.Content.append(value_)
            self.Content_nsprefix_ = child_.prefix
# end class InitiativeManifest


class InterlineCustomerDetail(GeneratedsSuper):
    """Specifies the details of an interline customer."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, InterlineCode=None, InterlineEmployeeId=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.InterlineCode = InterlineCode
        self.InterlineCode_nsprefix_ = None
        self.InterlineEmployeeId = InterlineEmployeeId
        self.InterlineEmployeeId_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InterlineCustomerDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InterlineCustomerDetail.subclass:
            return InterlineCustomerDetail.subclass(*args_, **kwargs_)
        else:
            return InterlineCustomerDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_InterlineCode(self):
        return self.InterlineCode
    def set_InterlineCode(self, InterlineCode):
        self.InterlineCode = InterlineCode
    def get_InterlineEmployeeId(self):
        return self.InterlineEmployeeId
    def set_InterlineEmployeeId(self, InterlineEmployeeId):
        self.InterlineEmployeeId = InterlineEmployeeId
    def hasContent_(self):
        if (
            self.InterlineCode is not None or
            self.InterlineEmployeeId is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='InterlineCustomerDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InterlineCustomerDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'InterlineCustomerDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InterlineCustomerDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='InterlineCustomerDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='InterlineCustomerDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='InterlineCustomerDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.InterlineCode is not None:
            namespaceprefix_ = self.InterlineCode_nsprefix_ + ':' if (UseCapturedNS_ and self.InterlineCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInterlineCode>%s</%sInterlineCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InterlineCode), input_name='InterlineCode')), namespaceprefix_ , eol_))
        if self.InterlineEmployeeId is not None:
            namespaceprefix_ = self.InterlineEmployeeId_nsprefix_ + ':' if (UseCapturedNS_ and self.InterlineEmployeeId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInterlineEmployeeId>%s</%sInterlineEmployeeId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InterlineEmployeeId), input_name='InterlineEmployeeId')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'InterlineCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'InterlineCode')
            value_ = self.gds_validate_string(value_, node, 'InterlineCode')
            self.InterlineCode = value_
            self.InterlineCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'InterlineEmployeeId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'InterlineEmployeeId')
            value_ = self.gds_validate_string(value_, node, 'InterlineEmployeeId')
            self.InterlineEmployeeId = value_
            self.InterlineEmployeeId_nsprefix_ = child_.prefix
# end class InterlineCustomerDetail


class InternationalControlledExportDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, ForeignTradeZoneCode=None, EntryNumber=None, LicenseOrPermitNumber=None, LicenseOrPermitExpirationDate=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.validate_InternationalControlledExportType(self.Type)
        self.Type_nsprefix_ = "ns"
        self.ForeignTradeZoneCode = ForeignTradeZoneCode
        self.ForeignTradeZoneCode_nsprefix_ = None
        self.EntryNumber = EntryNumber
        self.EntryNumber_nsprefix_ = None
        self.LicenseOrPermitNumber = LicenseOrPermitNumber
        self.LicenseOrPermitNumber_nsprefix_ = None
        if isinstance(LicenseOrPermitExpirationDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(LicenseOrPermitExpirationDate, '%Y-%m-%d').date()
        else:
            initvalue_ = LicenseOrPermitExpirationDate
        self.LicenseOrPermitExpirationDate = initvalue_
        self.LicenseOrPermitExpirationDate_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InternationalControlledExportDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InternationalControlledExportDetail.subclass:
            return InternationalControlledExportDetail.subclass(*args_, **kwargs_)
        else:
            return InternationalControlledExportDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_ForeignTradeZoneCode(self):
        return self.ForeignTradeZoneCode
    def set_ForeignTradeZoneCode(self, ForeignTradeZoneCode):
        self.ForeignTradeZoneCode = ForeignTradeZoneCode
    def get_EntryNumber(self):
        return self.EntryNumber
    def set_EntryNumber(self, EntryNumber):
        self.EntryNumber = EntryNumber
    def get_LicenseOrPermitNumber(self):
        return self.LicenseOrPermitNumber
    def set_LicenseOrPermitNumber(self, LicenseOrPermitNumber):
        self.LicenseOrPermitNumber = LicenseOrPermitNumber
    def get_LicenseOrPermitExpirationDate(self):
        return self.LicenseOrPermitExpirationDate
    def set_LicenseOrPermitExpirationDate(self, LicenseOrPermitExpirationDate):
        self.LicenseOrPermitExpirationDate = LicenseOrPermitExpirationDate
    def validate_InternationalControlledExportType(self, value):
        result = True
        # Validate type InternationalControlledExportType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['DEA_036', 'DEA_236', 'DEA_486', 'DSP_05', 'DSP_61', 'DSP_73', 'DSP_85', 'DSP_94', 'DSP_LICENSE_AGREEMENT', 'FROM_FOREIGN_TRADE_ZONE', 'WAREHOUSE_WITHDRAWAL']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on InternationalControlledExportType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Type is not None or
            self.ForeignTradeZoneCode is not None or
            self.EntryNumber is not None or
            self.LicenseOrPermitNumber is not None or
            self.LicenseOrPermitExpirationDate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='InternationalControlledExportDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InternationalControlledExportDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'InternationalControlledExportDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InternationalControlledExportDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='InternationalControlledExportDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='InternationalControlledExportDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='InternationalControlledExportDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.ForeignTradeZoneCode is not None:
            namespaceprefix_ = self.ForeignTradeZoneCode_nsprefix_ + ':' if (UseCapturedNS_ and self.ForeignTradeZoneCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sForeignTradeZoneCode>%s</%sForeignTradeZoneCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ForeignTradeZoneCode), input_name='ForeignTradeZoneCode')), namespaceprefix_ , eol_))
        if self.EntryNumber is not None:
            namespaceprefix_ = self.EntryNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.EntryNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEntryNumber>%s</%sEntryNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EntryNumber), input_name='EntryNumber')), namespaceprefix_ , eol_))
        if self.LicenseOrPermitNumber is not None:
            namespaceprefix_ = self.LicenseOrPermitNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.LicenseOrPermitNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLicenseOrPermitNumber>%s</%sLicenseOrPermitNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LicenseOrPermitNumber), input_name='LicenseOrPermitNumber')), namespaceprefix_ , eol_))
        if self.LicenseOrPermitExpirationDate is not None:
            namespaceprefix_ = self.LicenseOrPermitExpirationDate_nsprefix_ + ':' if (UseCapturedNS_ and self.LicenseOrPermitExpirationDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLicenseOrPermitExpirationDate>%s</%sLicenseOrPermitExpirationDate>%s' % (namespaceprefix_ , self.gds_format_date(self.LicenseOrPermitExpirationDate, input_name='LicenseOrPermitExpirationDate'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type InternationalControlledExportType
            self.validate_InternationalControlledExportType(self.Type)
        elif nodeName_ == 'ForeignTradeZoneCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ForeignTradeZoneCode')
            value_ = self.gds_validate_string(value_, node, 'ForeignTradeZoneCode')
            self.ForeignTradeZoneCode = value_
            self.ForeignTradeZoneCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'EntryNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EntryNumber')
            value_ = self.gds_validate_string(value_, node, 'EntryNumber')
            self.EntryNumber = value_
            self.EntryNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'LicenseOrPermitNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LicenseOrPermitNumber')
            value_ = self.gds_validate_string(value_, node, 'LicenseOrPermitNumber')
            self.LicenseOrPermitNumber = value_
            self.LicenseOrPermitNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'LicenseOrPermitExpirationDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.LicenseOrPermitExpirationDate = dval_
            self.LicenseOrPermitExpirationDate_nsprefix_ = child_.prefix
# end class InternationalControlledExportDetail


class InternationalDistributionSummaryDetail(GeneratedsSuper):
    """Totals accumulated during the processing of CRNs into the
    consolidation."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, TotalWeight=None, TotalPackageCount=None, TotalUniqueAddressCount=None, TotalCustomsValue=None, TotalInsuredValue=None, DryIceDetail=None, DangerousGoodsAccessibility=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.TotalWeight = TotalWeight
        self.TotalWeight_nsprefix_ = "ns"
        self.TotalPackageCount = TotalPackageCount
        self.TotalPackageCount_nsprefix_ = None
        self.TotalUniqueAddressCount = TotalUniqueAddressCount
        self.TotalUniqueAddressCount_nsprefix_ = None
        self.TotalCustomsValue = TotalCustomsValue
        self.TotalCustomsValue_nsprefix_ = "ns"
        self.TotalInsuredValue = TotalInsuredValue
        self.TotalInsuredValue_nsprefix_ = "ns"
        self.DryIceDetail = DryIceDetail
        self.DryIceDetail_nsprefix_ = "ns"
        self.DangerousGoodsAccessibility = DangerousGoodsAccessibility
        self.validate_DangerousGoodsAccessibilityType(self.DangerousGoodsAccessibility)
        self.DangerousGoodsAccessibility_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InternationalDistributionSummaryDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InternationalDistributionSummaryDetail.subclass:
            return InternationalDistributionSummaryDetail.subclass(*args_, **kwargs_)
        else:
            return InternationalDistributionSummaryDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_TotalWeight(self):
        return self.TotalWeight
    def set_TotalWeight(self, TotalWeight):
        self.TotalWeight = TotalWeight
    def get_TotalPackageCount(self):
        return self.TotalPackageCount
    def set_TotalPackageCount(self, TotalPackageCount):
        self.TotalPackageCount = TotalPackageCount
    def get_TotalUniqueAddressCount(self):
        return self.TotalUniqueAddressCount
    def set_TotalUniqueAddressCount(self, TotalUniqueAddressCount):
        self.TotalUniqueAddressCount = TotalUniqueAddressCount
    def get_TotalCustomsValue(self):
        return self.TotalCustomsValue
    def set_TotalCustomsValue(self, TotalCustomsValue):
        self.TotalCustomsValue = TotalCustomsValue
    def get_TotalInsuredValue(self):
        return self.TotalInsuredValue
    def set_TotalInsuredValue(self, TotalInsuredValue):
        self.TotalInsuredValue = TotalInsuredValue
    def get_DryIceDetail(self):
        return self.DryIceDetail
    def set_DryIceDetail(self, DryIceDetail):
        self.DryIceDetail = DryIceDetail
    def get_DangerousGoodsAccessibility(self):
        return self.DangerousGoodsAccessibility
    def set_DangerousGoodsAccessibility(self, DangerousGoodsAccessibility):
        self.DangerousGoodsAccessibility = DangerousGoodsAccessibility
    def validate_DangerousGoodsAccessibilityType(self, value):
        result = True
        # Validate type DangerousGoodsAccessibilityType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ACCESSIBLE', 'INACCESSIBLE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on DangerousGoodsAccessibilityType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.TotalWeight is not None or
            self.TotalPackageCount is not None or
            self.TotalUniqueAddressCount is not None or
            self.TotalCustomsValue is not None or
            self.TotalInsuredValue is not None or
            self.DryIceDetail is not None or
            self.DangerousGoodsAccessibility is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='InternationalDistributionSummaryDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InternationalDistributionSummaryDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'InternationalDistributionSummaryDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InternationalDistributionSummaryDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='InternationalDistributionSummaryDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='InternationalDistributionSummaryDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='InternationalDistributionSummaryDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TotalWeight is not None:
            namespaceprefix_ = self.TotalWeight_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalWeight_nsprefix_) else ''
            self.TotalWeight.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TotalWeight', pretty_print=pretty_print)
        if self.TotalPackageCount is not None:
            namespaceprefix_ = self.TotalPackageCount_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalPackageCount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTotalPackageCount>%s</%sTotalPackageCount>%s' % (namespaceprefix_ , self.gds_format_integer(self.TotalPackageCount, input_name='TotalPackageCount'), namespaceprefix_ , eol_))
        if self.TotalUniqueAddressCount is not None:
            namespaceprefix_ = self.TotalUniqueAddressCount_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalUniqueAddressCount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTotalUniqueAddressCount>%s</%sTotalUniqueAddressCount>%s' % (namespaceprefix_ , self.gds_format_integer(self.TotalUniqueAddressCount, input_name='TotalUniqueAddressCount'), namespaceprefix_ , eol_))
        if self.TotalCustomsValue is not None:
            namespaceprefix_ = self.TotalCustomsValue_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalCustomsValue_nsprefix_) else ''
            self.TotalCustomsValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TotalCustomsValue', pretty_print=pretty_print)
        if self.TotalInsuredValue is not None:
            namespaceprefix_ = self.TotalInsuredValue_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalInsuredValue_nsprefix_) else ''
            self.TotalInsuredValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TotalInsuredValue', pretty_print=pretty_print)
        if self.DryIceDetail is not None:
            namespaceprefix_ = self.DryIceDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.DryIceDetail_nsprefix_) else ''
            self.DryIceDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DryIceDetail', pretty_print=pretty_print)
        if self.DangerousGoodsAccessibility is not None:
            namespaceprefix_ = self.DangerousGoodsAccessibility_nsprefix_ + ':' if (UseCapturedNS_ and self.DangerousGoodsAccessibility_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDangerousGoodsAccessibility>%s</%sDangerousGoodsAccessibility>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DangerousGoodsAccessibility), input_name='DangerousGoodsAccessibility')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'TotalWeight':
            obj_ = Weight.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TotalWeight = obj_
            obj_.original_tagname_ = 'TotalWeight'
        elif nodeName_ == 'TotalPackageCount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'TotalPackageCount')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'TotalPackageCount')
            self.TotalPackageCount = ival_
            self.TotalPackageCount_nsprefix_ = child_.prefix
        elif nodeName_ == 'TotalUniqueAddressCount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'TotalUniqueAddressCount')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'TotalUniqueAddressCount')
            self.TotalUniqueAddressCount = ival_
            self.TotalUniqueAddressCount_nsprefix_ = child_.prefix
        elif nodeName_ == 'TotalCustomsValue':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TotalCustomsValue = obj_
            obj_.original_tagname_ = 'TotalCustomsValue'
        elif nodeName_ == 'TotalInsuredValue':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TotalInsuredValue = obj_
            obj_.original_tagname_ = 'TotalInsuredValue'
        elif nodeName_ == 'DryIceDetail':
            obj_ = ShipmentDryIceDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DryIceDetail = obj_
            obj_.original_tagname_ = 'DryIceDetail'
        elif nodeName_ == 'DangerousGoodsAccessibility':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DangerousGoodsAccessibility')
            value_ = self.gds_validate_string(value_, node, 'DangerousGoodsAccessibility')
            self.DangerousGoodsAccessibility = value_
            self.DangerousGoodsAccessibility_nsprefix_ = child_.prefix
            # validate type DangerousGoodsAccessibilityType
            self.validate_DangerousGoodsAccessibilityType(self.DangerousGoodsAccessibility)
# end class InternationalDistributionSummaryDetail


class InternationalTrafficInArmsRegulationsDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, LicenseOrExemptionNumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.LicenseOrExemptionNumber = LicenseOrExemptionNumber
        self.LicenseOrExemptionNumber_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InternationalTrafficInArmsRegulationsDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InternationalTrafficInArmsRegulationsDetail.subclass:
            return InternationalTrafficInArmsRegulationsDetail.subclass(*args_, **kwargs_)
        else:
            return InternationalTrafficInArmsRegulationsDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_LicenseOrExemptionNumber(self):
        return self.LicenseOrExemptionNumber
    def set_LicenseOrExemptionNumber(self, LicenseOrExemptionNumber):
        self.LicenseOrExemptionNumber = LicenseOrExemptionNumber
    def hasContent_(self):
        if (
            self.LicenseOrExemptionNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='InternationalTrafficInArmsRegulationsDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InternationalTrafficInArmsRegulationsDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'InternationalTrafficInArmsRegulationsDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InternationalTrafficInArmsRegulationsDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='InternationalTrafficInArmsRegulationsDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='InternationalTrafficInArmsRegulationsDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='InternationalTrafficInArmsRegulationsDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LicenseOrExemptionNumber is not None:
            namespaceprefix_ = self.LicenseOrExemptionNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.LicenseOrExemptionNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLicenseOrExemptionNumber>%s</%sLicenseOrExemptionNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LicenseOrExemptionNumber), input_name='LicenseOrExemptionNumber')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'LicenseOrExemptionNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LicenseOrExemptionNumber')
            value_ = self.gds_validate_string(value_, node, 'LicenseOrExemptionNumber')
            self.LicenseOrExemptionNumber = value_
            self.LicenseOrExemptionNumber_nsprefix_ = child_.prefix
# end class InternationalTrafficInArmsRegulationsDetail


class LabelSpecification(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ProcessingOptionsRequested=None, Dispositions=None, LabelFormatType=None, ImageType=None, LabelStockType=None, LabelPrintingOrientation=None, LabelRotation=None, LabelOrder=None, PrintedLabelOrigin=None, CustomerSpecifiedDetail=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ProcessingOptionsRequested = ProcessingOptionsRequested
        self.ProcessingOptionsRequested_nsprefix_ = "ns"
        if Dispositions is None:
            self.Dispositions = []
        else:
            self.Dispositions = Dispositions
        self.Dispositions_nsprefix_ = "ns"
        self.LabelFormatType = LabelFormatType
        self.validate_LabelFormatType(self.LabelFormatType)
        self.LabelFormatType_nsprefix_ = "ns"
        self.ImageType = ImageType
        self.validate_ShippingDocumentImageType(self.ImageType)
        self.ImageType_nsprefix_ = "ns"
        self.LabelStockType = LabelStockType
        self.validate_LabelStockType(self.LabelStockType)
        self.LabelStockType_nsprefix_ = "ns"
        self.LabelPrintingOrientation = LabelPrintingOrientation
        self.validate_LabelPrintingOrientationType(self.LabelPrintingOrientation)
        self.LabelPrintingOrientation_nsprefix_ = "ns"
        self.LabelRotation = LabelRotation
        self.validate_LabelRotationType(self.LabelRotation)
        self.LabelRotation_nsprefix_ = "ns"
        self.LabelOrder = LabelOrder
        self.validate_LabelOrderType(self.LabelOrder)
        self.LabelOrder_nsprefix_ = "ns"
        self.PrintedLabelOrigin = PrintedLabelOrigin
        self.PrintedLabelOrigin_nsprefix_ = "ns"
        self.CustomerSpecifiedDetail = CustomerSpecifiedDetail
        self.CustomerSpecifiedDetail_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LabelSpecification)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LabelSpecification.subclass:
            return LabelSpecification.subclass(*args_, **kwargs_)
        else:
            return LabelSpecification(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ProcessingOptionsRequested(self):
        return self.ProcessingOptionsRequested
    def set_ProcessingOptionsRequested(self, ProcessingOptionsRequested):
        self.ProcessingOptionsRequested = ProcessingOptionsRequested
    def get_Dispositions(self):
        return self.Dispositions
    def set_Dispositions(self, Dispositions):
        self.Dispositions = Dispositions
    def add_Dispositions(self, value):
        self.Dispositions.append(value)
    def insert_Dispositions_at(self, index, value):
        self.Dispositions.insert(index, value)
    def replace_Dispositions_at(self, index, value):
        self.Dispositions[index] = value
    def get_LabelFormatType(self):
        return self.LabelFormatType
    def set_LabelFormatType(self, LabelFormatType):
        self.LabelFormatType = LabelFormatType
    def get_ImageType(self):
        return self.ImageType
    def set_ImageType(self, ImageType):
        self.ImageType = ImageType
    def get_LabelStockType(self):
        return self.LabelStockType
    def set_LabelStockType(self, LabelStockType):
        self.LabelStockType = LabelStockType
    def get_LabelPrintingOrientation(self):
        return self.LabelPrintingOrientation
    def set_LabelPrintingOrientation(self, LabelPrintingOrientation):
        self.LabelPrintingOrientation = LabelPrintingOrientation
    def get_LabelRotation(self):
        return self.LabelRotation
    def set_LabelRotation(self, LabelRotation):
        self.LabelRotation = LabelRotation
    def get_LabelOrder(self):
        return self.LabelOrder
    def set_LabelOrder(self, LabelOrder):
        self.LabelOrder = LabelOrder
    def get_PrintedLabelOrigin(self):
        return self.PrintedLabelOrigin
    def set_PrintedLabelOrigin(self, PrintedLabelOrigin):
        self.PrintedLabelOrigin = PrintedLabelOrigin
    def get_CustomerSpecifiedDetail(self):
        return self.CustomerSpecifiedDetail
    def set_CustomerSpecifiedDetail(self, CustomerSpecifiedDetail):
        self.CustomerSpecifiedDetail = CustomerSpecifiedDetail
    def validate_LabelFormatType(self, value):
        result = True
        # Validate type LabelFormatType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['COMMON2D', 'ERROR', 'LABEL_DATA_ONLY', 'MAILROOM', 'NO_LABEL', 'OPERATIONAL_LABEL', 'PRE_COMMON2D']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on LabelFormatType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_ShippingDocumentImageType(self, value):
        result = True
        # Validate type ShippingDocumentImageType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['DIB', 'DOC', 'DPL', 'EPL2', 'GIF', 'PDF', 'PNG', 'RTF', 'TEXT', 'ZPLII']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ShippingDocumentImageType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_LabelStockType(self, value):
        result = True
        # Validate type LabelStockType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['PAPER_4X6', 'PAPER_4X6.75', 'PAPER_4X8', 'PAPER_4X9', 'PAPER_7X4.75', 'PAPER_8.5X11_BOTTOM_HALF_LABEL', 'PAPER_8.5X11_TOP_HALF_LABEL', 'PAPER_LETTER', 'STOCK_4X6', 'STOCK_4X6.75', 'STOCK_4X6.75_LEADING_DOC_TAB', 'STOCK_4X6.75_TRAILING_DOC_TAB', 'STOCK_4X8', 'STOCK_4X9', 'STOCK_4X9_LEADING_DOC_TAB', 'STOCK_4X9_TRAILING_DOC_TAB']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on LabelStockType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_LabelPrintingOrientationType(self, value):
        result = True
        # Validate type LabelPrintingOrientationType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BOTTOM_EDGE_OF_TEXT_FIRST', 'TOP_EDGE_OF_TEXT_FIRST']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on LabelPrintingOrientationType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_LabelRotationType(self, value):
        result = True
        # Validate type LabelRotationType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['LEFT', 'NONE', 'RIGHT', 'UPSIDE_DOWN']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on LabelRotationType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_LabelOrderType(self, value):
        result = True
        # Validate type LabelOrderType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['SHIPPING_LABEL_FIRST', 'SHIPPING_LABEL_LAST']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on LabelOrderType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.ProcessingOptionsRequested is not None or
            self.Dispositions or
            self.LabelFormatType is not None or
            self.ImageType is not None or
            self.LabelStockType is not None or
            self.LabelPrintingOrientation is not None or
            self.LabelRotation is not None or
            self.LabelOrder is not None or
            self.PrintedLabelOrigin is not None or
            self.CustomerSpecifiedDetail is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='LabelSpecification', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LabelSpecification')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'LabelSpecification':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='LabelSpecification')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='LabelSpecification', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='LabelSpecification'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='LabelSpecification', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ProcessingOptionsRequested is not None:
            namespaceprefix_ = self.ProcessingOptionsRequested_nsprefix_ + ':' if (UseCapturedNS_ and self.ProcessingOptionsRequested_nsprefix_) else ''
            self.ProcessingOptionsRequested.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ProcessingOptionsRequested', pretty_print=pretty_print)
        for Dispositions_ in self.Dispositions:
            namespaceprefix_ = self.Dispositions_nsprefix_ + ':' if (UseCapturedNS_ and self.Dispositions_nsprefix_) else ''
            Dispositions_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Dispositions', pretty_print=pretty_print)
        if self.LabelFormatType is not None:
            namespaceprefix_ = self.LabelFormatType_nsprefix_ + ':' if (UseCapturedNS_ and self.LabelFormatType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLabelFormatType>%s</%sLabelFormatType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LabelFormatType), input_name='LabelFormatType')), namespaceprefix_ , eol_))
        if self.ImageType is not None:
            namespaceprefix_ = self.ImageType_nsprefix_ + ':' if (UseCapturedNS_ and self.ImageType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sImageType>%s</%sImageType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ImageType), input_name='ImageType')), namespaceprefix_ , eol_))
        if self.LabelStockType is not None:
            namespaceprefix_ = self.LabelStockType_nsprefix_ + ':' if (UseCapturedNS_ and self.LabelStockType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLabelStockType>%s</%sLabelStockType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LabelStockType), input_name='LabelStockType')), namespaceprefix_ , eol_))
        if self.LabelPrintingOrientation is not None:
            namespaceprefix_ = self.LabelPrintingOrientation_nsprefix_ + ':' if (UseCapturedNS_ and self.LabelPrintingOrientation_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLabelPrintingOrientation>%s</%sLabelPrintingOrientation>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LabelPrintingOrientation), input_name='LabelPrintingOrientation')), namespaceprefix_ , eol_))
        if self.LabelRotation is not None:
            namespaceprefix_ = self.LabelRotation_nsprefix_ + ':' if (UseCapturedNS_ and self.LabelRotation_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLabelRotation>%s</%sLabelRotation>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LabelRotation), input_name='LabelRotation')), namespaceprefix_ , eol_))
        if self.LabelOrder is not None:
            namespaceprefix_ = self.LabelOrder_nsprefix_ + ':' if (UseCapturedNS_ and self.LabelOrder_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLabelOrder>%s</%sLabelOrder>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LabelOrder), input_name='LabelOrder')), namespaceprefix_ , eol_))
        if self.PrintedLabelOrigin is not None:
            namespaceprefix_ = self.PrintedLabelOrigin_nsprefix_ + ':' if (UseCapturedNS_ and self.PrintedLabelOrigin_nsprefix_) else ''
            self.PrintedLabelOrigin.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PrintedLabelOrigin', pretty_print=pretty_print)
        if self.CustomerSpecifiedDetail is not None:
            namespaceprefix_ = self.CustomerSpecifiedDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomerSpecifiedDetail_nsprefix_) else ''
            self.CustomerSpecifiedDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CustomerSpecifiedDetail', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ProcessingOptionsRequested':
            obj_ = LabelSpecificationProcessingOptionsRequested.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ProcessingOptionsRequested = obj_
            obj_.original_tagname_ = 'ProcessingOptionsRequested'
        elif nodeName_ == 'Dispositions':
            obj_ = ShippingDocumentDispositionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Dispositions.append(obj_)
            obj_.original_tagname_ = 'Dispositions'
        elif nodeName_ == 'LabelFormatType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LabelFormatType')
            value_ = self.gds_validate_string(value_, node, 'LabelFormatType')
            self.LabelFormatType = value_
            self.LabelFormatType_nsprefix_ = child_.prefix
            # validate type LabelFormatType
            self.validate_LabelFormatType(self.LabelFormatType)
        elif nodeName_ == 'ImageType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ImageType')
            value_ = self.gds_validate_string(value_, node, 'ImageType')
            self.ImageType = value_
            self.ImageType_nsprefix_ = child_.prefix
            # validate type ShippingDocumentImageType
            self.validate_ShippingDocumentImageType(self.ImageType)
        elif nodeName_ == 'LabelStockType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LabelStockType')
            value_ = self.gds_validate_string(value_, node, 'LabelStockType')
            self.LabelStockType = value_
            self.LabelStockType_nsprefix_ = child_.prefix
            # validate type LabelStockType
            self.validate_LabelStockType(self.LabelStockType)
        elif nodeName_ == 'LabelPrintingOrientation':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LabelPrintingOrientation')
            value_ = self.gds_validate_string(value_, node, 'LabelPrintingOrientation')
            self.LabelPrintingOrientation = value_
            self.LabelPrintingOrientation_nsprefix_ = child_.prefix
            # validate type LabelPrintingOrientationType
            self.validate_LabelPrintingOrientationType(self.LabelPrintingOrientation)
        elif nodeName_ == 'LabelRotation':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LabelRotation')
            value_ = self.gds_validate_string(value_, node, 'LabelRotation')
            self.LabelRotation = value_
            self.LabelRotation_nsprefix_ = child_.prefix
            # validate type LabelRotationType
            self.validate_LabelRotationType(self.LabelRotation)
        elif nodeName_ == 'LabelOrder':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LabelOrder')
            value_ = self.gds_validate_string(value_, node, 'LabelOrder')
            self.LabelOrder = value_
            self.LabelOrder_nsprefix_ = child_.prefix
            # validate type LabelOrderType
            self.validate_LabelOrderType(self.LabelOrder)
        elif nodeName_ == 'PrintedLabelOrigin':
            obj_ = ContactAndAddress.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PrintedLabelOrigin = obj_
            obj_.original_tagname_ = 'PrintedLabelOrigin'
        elif nodeName_ == 'CustomerSpecifiedDetail':
            obj_ = CustomerSpecifiedLabelDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CustomerSpecifiedDetail = obj_
            obj_.original_tagname_ = 'CustomerSpecifiedDetail'
# end class LabelSpecification


class LabelSpecificationProcessingOptionsRequested(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Options=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Options is None:
            self.Options = []
        else:
            self.Options = Options
        self.Options_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LabelSpecificationProcessingOptionsRequested)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LabelSpecificationProcessingOptionsRequested.subclass:
            return LabelSpecificationProcessingOptionsRequested.subclass(*args_, **kwargs_)
        else:
            return LabelSpecificationProcessingOptionsRequested(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Options(self):
        return self.Options
    def set_Options(self, Options):
        self.Options = Options
    def add_Options(self, value):
        self.Options.append(value)
    def insert_Options_at(self, index, value):
        self.Options.insert(index, value)
    def replace_Options_at(self, index, value):
        self.Options[index] = value
    def validate_LabelSpecificationProcessingOptionType(self, value):
        result = True
        # Validate type LabelSpecificationProcessingOptionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['PRE_EACI_LABEL']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on LabelSpecificationProcessingOptionType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Options
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='LabelSpecificationProcessingOptionsRequested', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LabelSpecificationProcessingOptionsRequested')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'LabelSpecificationProcessingOptionsRequested':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='LabelSpecificationProcessingOptionsRequested')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='LabelSpecificationProcessingOptionsRequested', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='LabelSpecificationProcessingOptionsRequested'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='LabelSpecificationProcessingOptionsRequested', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Options_ in self.Options:
            namespaceprefix_ = self.Options_nsprefix_ + ':' if (UseCapturedNS_ and self.Options_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOptions>%s</%sOptions>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Options_), input_name='Options')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Options':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Options')
            value_ = self.gds_validate_string(value_, node, 'Options')
            self.Options.append(value_)
            self.Options_nsprefix_ = child_.prefix
            # validate type LabelSpecificationProcessingOptionType
            self.validate_LabelSpecificationProcessingOptionType(self.Options[-1])
# end class LabelSpecificationProcessingOptionsRequested


class LiabilityCoverageDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CoverageType=None, CoverageAmount=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.CoverageType = CoverageType
        self.validate_LiabilityCoverageType(self.CoverageType)
        self.CoverageType_nsprefix_ = "ns"
        self.CoverageAmount = CoverageAmount
        self.CoverageAmount_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LiabilityCoverageDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LiabilityCoverageDetail.subclass:
            return LiabilityCoverageDetail.subclass(*args_, **kwargs_)
        else:
            return LiabilityCoverageDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CoverageType(self):
        return self.CoverageType
    def set_CoverageType(self, CoverageType):
        self.CoverageType = CoverageType
    def get_CoverageAmount(self):
        return self.CoverageAmount
    def set_CoverageAmount(self, CoverageAmount):
        self.CoverageAmount = CoverageAmount
    def validate_LiabilityCoverageType(self, value):
        result = True
        # Validate type LiabilityCoverageType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['NEW', 'USED_OR_RECONDITIONED']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on LiabilityCoverageType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.CoverageType is not None or
            self.CoverageAmount is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='LiabilityCoverageDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LiabilityCoverageDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'LiabilityCoverageDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='LiabilityCoverageDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='LiabilityCoverageDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='LiabilityCoverageDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='LiabilityCoverageDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CoverageType is not None:
            namespaceprefix_ = self.CoverageType_nsprefix_ + ':' if (UseCapturedNS_ and self.CoverageType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCoverageType>%s</%sCoverageType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CoverageType), input_name='CoverageType')), namespaceprefix_ , eol_))
        if self.CoverageAmount is not None:
            namespaceprefix_ = self.CoverageAmount_nsprefix_ + ':' if (UseCapturedNS_ and self.CoverageAmount_nsprefix_) else ''
            self.CoverageAmount.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CoverageAmount', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CoverageType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CoverageType')
            value_ = self.gds_validate_string(value_, node, 'CoverageType')
            self.CoverageType = value_
            self.CoverageType_nsprefix_ = child_.prefix
            # validate type LiabilityCoverageType
            self.validate_LiabilityCoverageType(self.CoverageType)
        elif nodeName_ == 'CoverageAmount':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CoverageAmount = obj_
            obj_.original_tagname_ = 'CoverageAmount'
# end class LiabilityCoverageDetail


class LinearMeasure(GeneratedsSuper):
    """Represents a one-dimensional measurement in small units (e.g. suitable
    for measuring a package or document), contrasted with Distance, which
    represents a large one-dimensional measurement (e.g. distance between
    cities)."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Value=None, Units=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Value = Value
        self.Value_nsprefix_ = None
        self.Units = Units
        self.validate_LinearUnits(self.Units)
        self.Units_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LinearMeasure)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LinearMeasure.subclass:
            return LinearMeasure.subclass(*args_, **kwargs_)
        else:
            return LinearMeasure(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Value(self):
        return self.Value
    def set_Value(self, Value):
        self.Value = Value
    def get_Units(self):
        return self.Units
    def set_Units(self, Units):
        self.Units = Units
    def validate_LinearUnits(self, value):
        result = True
        # Validate type LinearUnits, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CM', 'IN']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on LinearUnits' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Value is not None or
            self.Units is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='LinearMeasure', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LinearMeasure')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'LinearMeasure':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='LinearMeasure')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='LinearMeasure', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='LinearMeasure'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='LinearMeasure', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Value is not None:
            namespaceprefix_ = self.Value_nsprefix_ + ':' if (UseCapturedNS_ and self.Value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValue>%s</%sValue>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Value, input_name='Value'), namespaceprefix_ , eol_))
        if self.Units is not None:
            namespaceprefix_ = self.Units_nsprefix_ + ':' if (UseCapturedNS_ and self.Units_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnits>%s</%sUnits>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Units), input_name='Units')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Value' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Value')
            fval_ = self.gds_validate_decimal(fval_, node, 'Value')
            self.Value = fval_
            self.Value_nsprefix_ = child_.prefix
        elif nodeName_ == 'Units':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Units')
            value_ = self.gds_validate_string(value_, node, 'Units')
            self.Units = value_
            self.Units_nsprefix_ = child_.prefix
            # validate type LinearUnits
            self.validate_LinearUnits(self.Units)
# end class LinearMeasure


class Localization(GeneratedsSuper):
    """Identifies the representation of human-readable text."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, LanguageCode=None, LocaleCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.LanguageCode = LanguageCode
        self.LanguageCode_nsprefix_ = None
        self.LocaleCode = LocaleCode
        self.LocaleCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Localization)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Localization.subclass:
            return Localization.subclass(*args_, **kwargs_)
        else:
            return Localization(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_LanguageCode(self):
        return self.LanguageCode
    def set_LanguageCode(self, LanguageCode):
        self.LanguageCode = LanguageCode
    def get_LocaleCode(self):
        return self.LocaleCode
    def set_LocaleCode(self, LocaleCode):
        self.LocaleCode = LocaleCode
    def hasContent_(self):
        if (
            self.LanguageCode is not None or
            self.LocaleCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Localization', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Localization')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Localization':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Localization')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Localization', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Localization'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Localization', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LanguageCode is not None:
            namespaceprefix_ = self.LanguageCode_nsprefix_ + ':' if (UseCapturedNS_ and self.LanguageCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLanguageCode>%s</%sLanguageCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LanguageCode), input_name='LanguageCode')), namespaceprefix_ , eol_))
        if self.LocaleCode is not None:
            namespaceprefix_ = self.LocaleCode_nsprefix_ + ':' if (UseCapturedNS_ and self.LocaleCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocaleCode>%s</%sLocaleCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LocaleCode), input_name='LocaleCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'LanguageCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LanguageCode')
            value_ = self.gds_validate_string(value_, node, 'LanguageCode')
            self.LanguageCode = value_
            self.LanguageCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'LocaleCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LocaleCode')
            value_ = self.gds_validate_string(value_, node, 'LocaleCode')
            self.LocaleCode = value_
            self.LocaleCode_nsprefix_ = child_.prefix
# end class Localization


class MarkingOrTaggingDetail(GeneratedsSuper):
    """Specification for marking or tagging of pieces in shipment."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Count=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Count = Count
        self.Count_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MarkingOrTaggingDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MarkingOrTaggingDetail.subclass:
            return MarkingOrTaggingDetail.subclass(*args_, **kwargs_)
        else:
            return MarkingOrTaggingDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Count(self):
        return self.Count
    def set_Count(self, Count):
        self.Count = Count
    def hasContent_(self):
        if (
            self.Count is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='MarkingOrTaggingDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MarkingOrTaggingDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'MarkingOrTaggingDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='MarkingOrTaggingDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='MarkingOrTaggingDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='MarkingOrTaggingDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='MarkingOrTaggingDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Count is not None:
            namespaceprefix_ = self.Count_nsprefix_ + ':' if (UseCapturedNS_ and self.Count_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCount>%s</%sCount>%s' % (namespaceprefix_ , self.gds_format_integer(self.Count, input_name='Count'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Count' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'Count')
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'Count')
            self.Count = ival_
            self.Count_nsprefix_ = child_.prefix
# end class MarkingOrTaggingDetail


class Measure(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Quantity=None, Units=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Quantity = Quantity
        self.Quantity_nsprefix_ = None
        self.Units = Units
        self.Units_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Measure)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Measure.subclass:
            return Measure.subclass(*args_, **kwargs_)
        else:
            return Measure(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Quantity(self):
        return self.Quantity
    def set_Quantity(self, Quantity):
        self.Quantity = Quantity
    def get_Units(self):
        return self.Units
    def set_Units(self, Units):
        self.Units = Units
    def hasContent_(self):
        if (
            self.Quantity is not None or
            self.Units is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Measure', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Measure')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Measure':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Measure')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Measure', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Measure'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Measure', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Quantity is not None:
            namespaceprefix_ = self.Quantity_nsprefix_ + ':' if (UseCapturedNS_ and self.Quantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity>%s</%sQuantity>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Quantity, input_name='Quantity'), namespaceprefix_ , eol_))
        if self.Units is not None:
            namespaceprefix_ = self.Units_nsprefix_ + ':' if (UseCapturedNS_ and self.Units_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnits>%s</%sUnits>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Units), input_name='Units')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Quantity' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Quantity')
            fval_ = self.gds_validate_decimal(fval_, node, 'Quantity')
            self.Quantity = fval_
            self.Quantity_nsprefix_ = child_.prefix
        elif nodeName_ == 'Units':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Units')
            value_ = self.gds_validate_string(value_, node, 'Units')
            self.Units = value_
            self.Units_nsprefix_ = child_.prefix
# end class Measure


class Money(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Currency=None, Amount=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Currency = Currency
        self.Currency_nsprefix_ = None
        self.Amount = Amount
        self.Amount_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Money)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Money.subclass:
            return Money.subclass(*args_, **kwargs_)
        else:
            return Money(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Currency(self):
        return self.Currency
    def set_Currency(self, Currency):
        self.Currency = Currency
    def get_Amount(self):
        return self.Amount
    def set_Amount(self, Amount):
        self.Amount = Amount
    def hasContent_(self):
        if (
            self.Currency is not None or
            self.Amount is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Money', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Money')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Money':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Money')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Money', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Money'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Money', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Currency is not None:
            namespaceprefix_ = self.Currency_nsprefix_ + ':' if (UseCapturedNS_ and self.Currency_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCurrency>%s</%sCurrency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Currency), input_name='Currency')), namespaceprefix_ , eol_))
        if self.Amount is not None:
            namespaceprefix_ = self.Amount_nsprefix_ + ':' if (UseCapturedNS_ and self.Amount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAmount>%s</%sAmount>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Amount, input_name='Amount'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Currency':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Currency')
            value_ = self.gds_validate_string(value_, node, 'Currency')
            self.Currency = value_
            self.Currency_nsprefix_ = child_.prefix
        elif nodeName_ == 'Amount' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Amount')
            fval_ = self.gds_validate_decimal(fval_, node, 'Amount')
            self.Amount = fval_
            self.Amount_nsprefix_ = child_.prefix
# end class Money


class NaftaCertificateOfOriginDetail(GeneratedsSuper):
    """Data required to produce a Certificate of Origin document. Remaining
    content (business data) to be defined once requirements have been
    completed."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Format=None, BlanketPeriod=None, ImporterSpecification=None, SignatureContact=None, ProducerSpecification=None, Producers=None, CustomerImageUsages=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Format = Format
        self.Format_nsprefix_ = "ns"
        self.BlanketPeriod = BlanketPeriod
        self.BlanketPeriod_nsprefix_ = "ns"
        self.ImporterSpecification = ImporterSpecification
        self.validate_NaftaImporterSpecificationType(self.ImporterSpecification)
        self.ImporterSpecification_nsprefix_ = "ns"
        self.SignatureContact = SignatureContact
        self.SignatureContact_nsprefix_ = "ns"
        self.ProducerSpecification = ProducerSpecification
        self.validate_NaftaProducerSpecificationType(self.ProducerSpecification)
        self.ProducerSpecification_nsprefix_ = "ns"
        if Producers is None:
            self.Producers = []
        else:
            self.Producers = Producers
        self.Producers_nsprefix_ = "ns"
        if CustomerImageUsages is None:
            self.CustomerImageUsages = []
        else:
            self.CustomerImageUsages = CustomerImageUsages
        self.CustomerImageUsages_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NaftaCertificateOfOriginDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NaftaCertificateOfOriginDetail.subclass:
            return NaftaCertificateOfOriginDetail.subclass(*args_, **kwargs_)
        else:
            return NaftaCertificateOfOriginDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Format(self):
        return self.Format
    def set_Format(self, Format):
        self.Format = Format
    def get_BlanketPeriod(self):
        return self.BlanketPeriod
    def set_BlanketPeriod(self, BlanketPeriod):
        self.BlanketPeriod = BlanketPeriod
    def get_ImporterSpecification(self):
        return self.ImporterSpecification
    def set_ImporterSpecification(self, ImporterSpecification):
        self.ImporterSpecification = ImporterSpecification
    def get_SignatureContact(self):
        return self.SignatureContact
    def set_SignatureContact(self, SignatureContact):
        self.SignatureContact = SignatureContact
    def get_ProducerSpecification(self):
        return self.ProducerSpecification
    def set_ProducerSpecification(self, ProducerSpecification):
        self.ProducerSpecification = ProducerSpecification
    def get_Producers(self):
        return self.Producers
    def set_Producers(self, Producers):
        self.Producers = Producers
    def add_Producers(self, value):
        self.Producers.append(value)
    def insert_Producers_at(self, index, value):
        self.Producers.insert(index, value)
    def replace_Producers_at(self, index, value):
        self.Producers[index] = value
    def get_CustomerImageUsages(self):
        return self.CustomerImageUsages
    def set_CustomerImageUsages(self, CustomerImageUsages):
        self.CustomerImageUsages = CustomerImageUsages
    def add_CustomerImageUsages(self, value):
        self.CustomerImageUsages.append(value)
    def insert_CustomerImageUsages_at(self, index, value):
        self.CustomerImageUsages.insert(index, value)
    def replace_CustomerImageUsages_at(self, index, value):
        self.CustomerImageUsages[index] = value
    def validate_NaftaImporterSpecificationType(self, value):
        result = True
        # Validate type NaftaImporterSpecificationType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['IMPORTER_OF_RECORD', 'RECIPIENT', 'UNKNOWN', 'VARIOUS']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on NaftaImporterSpecificationType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_NaftaProducerSpecificationType(self, value):
        result = True
        # Validate type NaftaProducerSpecificationType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['AVAILABLE_UPON_REQUEST', 'MULTIPLE_SPECIFIED', 'SAME', 'SINGLE_SPECIFIED', 'UNKNOWN']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on NaftaProducerSpecificationType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Format is not None or
            self.BlanketPeriod is not None or
            self.ImporterSpecification is not None or
            self.SignatureContact is not None or
            self.ProducerSpecification is not None or
            self.Producers or
            self.CustomerImageUsages
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='NaftaCertificateOfOriginDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('NaftaCertificateOfOriginDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'NaftaCertificateOfOriginDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='NaftaCertificateOfOriginDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='NaftaCertificateOfOriginDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='NaftaCertificateOfOriginDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='NaftaCertificateOfOriginDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Format is not None:
            namespaceprefix_ = self.Format_nsprefix_ + ':' if (UseCapturedNS_ and self.Format_nsprefix_) else ''
            self.Format.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Format', pretty_print=pretty_print)
        if self.BlanketPeriod is not None:
            namespaceprefix_ = self.BlanketPeriod_nsprefix_ + ':' if (UseCapturedNS_ and self.BlanketPeriod_nsprefix_) else ''
            self.BlanketPeriod.export(outfile, level, namespaceprefix_, namespacedef_='', name_='BlanketPeriod', pretty_print=pretty_print)
        if self.ImporterSpecification is not None:
            namespaceprefix_ = self.ImporterSpecification_nsprefix_ + ':' if (UseCapturedNS_ and self.ImporterSpecification_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sImporterSpecification>%s</%sImporterSpecification>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ImporterSpecification), input_name='ImporterSpecification')), namespaceprefix_ , eol_))
        if self.SignatureContact is not None:
            namespaceprefix_ = self.SignatureContact_nsprefix_ + ':' if (UseCapturedNS_ and self.SignatureContact_nsprefix_) else ''
            self.SignatureContact.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SignatureContact', pretty_print=pretty_print)
        if self.ProducerSpecification is not None:
            namespaceprefix_ = self.ProducerSpecification_nsprefix_ + ':' if (UseCapturedNS_ and self.ProducerSpecification_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProducerSpecification>%s</%sProducerSpecification>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ProducerSpecification), input_name='ProducerSpecification')), namespaceprefix_ , eol_))
        for Producers_ in self.Producers:
            namespaceprefix_ = self.Producers_nsprefix_ + ':' if (UseCapturedNS_ and self.Producers_nsprefix_) else ''
            Producers_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Producers', pretty_print=pretty_print)
        for CustomerImageUsages_ in self.CustomerImageUsages:
            namespaceprefix_ = self.CustomerImageUsages_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomerImageUsages_nsprefix_) else ''
            CustomerImageUsages_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CustomerImageUsages', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Format':
            obj_ = ShippingDocumentFormat.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Format = obj_
            obj_.original_tagname_ = 'Format'
        elif nodeName_ == 'BlanketPeriod':
            obj_ = DateRange.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.BlanketPeriod = obj_
            obj_.original_tagname_ = 'BlanketPeriod'
        elif nodeName_ == 'ImporterSpecification':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ImporterSpecification')
            value_ = self.gds_validate_string(value_, node, 'ImporterSpecification')
            self.ImporterSpecification = value_
            self.ImporterSpecification_nsprefix_ = child_.prefix
            # validate type NaftaImporterSpecificationType
            self.validate_NaftaImporterSpecificationType(self.ImporterSpecification)
        elif nodeName_ == 'SignatureContact':
            obj_ = Contact.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SignatureContact = obj_
            obj_.original_tagname_ = 'SignatureContact'
        elif nodeName_ == 'ProducerSpecification':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ProducerSpecification')
            value_ = self.gds_validate_string(value_, node, 'ProducerSpecification')
            self.ProducerSpecification = value_
            self.ProducerSpecification_nsprefix_ = child_.prefix
            # validate type NaftaProducerSpecificationType
            self.validate_NaftaProducerSpecificationType(self.ProducerSpecification)
        elif nodeName_ == 'Producers':
            obj_ = NaftaProducer.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Producers.append(obj_)
            obj_.original_tagname_ = 'Producers'
        elif nodeName_ == 'CustomerImageUsages':
            obj_ = CustomerImageUsage.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CustomerImageUsages.append(obj_)
            obj_.original_tagname_ = 'CustomerImageUsages'
# end class NaftaCertificateOfOriginDetail


class NaftaCommodityDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PreferenceCriterion=None, ProducerDetermination=None, ProducerId=None, NetCostMethod=None, NetCostDateRange=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PreferenceCriterion = PreferenceCriterion
        self.validate_NaftaPreferenceCriterionCode(self.PreferenceCriterion)
        self.PreferenceCriterion_nsprefix_ = "ns"
        self.ProducerDetermination = ProducerDetermination
        self.validate_NaftaProducerDeterminationCode(self.ProducerDetermination)
        self.ProducerDetermination_nsprefix_ = "ns"
        self.ProducerId = ProducerId
        self.ProducerId_nsprefix_ = None
        self.NetCostMethod = NetCostMethod
        self.validate_NaftaNetCostMethodCode(self.NetCostMethod)
        self.NetCostMethod_nsprefix_ = "ns"
        self.NetCostDateRange = NetCostDateRange
        self.NetCostDateRange_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NaftaCommodityDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NaftaCommodityDetail.subclass:
            return NaftaCommodityDetail.subclass(*args_, **kwargs_)
        else:
            return NaftaCommodityDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PreferenceCriterion(self):
        return self.PreferenceCriterion
    def set_PreferenceCriterion(self, PreferenceCriterion):
        self.PreferenceCriterion = PreferenceCriterion
    def get_ProducerDetermination(self):
        return self.ProducerDetermination
    def set_ProducerDetermination(self, ProducerDetermination):
        self.ProducerDetermination = ProducerDetermination
    def get_ProducerId(self):
        return self.ProducerId
    def set_ProducerId(self, ProducerId):
        self.ProducerId = ProducerId
    def get_NetCostMethod(self):
        return self.NetCostMethod
    def set_NetCostMethod(self, NetCostMethod):
        self.NetCostMethod = NetCostMethod
    def get_NetCostDateRange(self):
        return self.NetCostDateRange
    def set_NetCostDateRange(self, NetCostDateRange):
        self.NetCostDateRange = NetCostDateRange
    def validate_NaftaPreferenceCriterionCode(self, value):
        result = True
        # Validate type NaftaPreferenceCriterionCode, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['A', 'B', 'C', 'D', 'E', 'F']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on NaftaPreferenceCriterionCode' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_NaftaProducerDeterminationCode(self, value):
        result = True
        # Validate type NaftaProducerDeterminationCode, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['NO_1', 'NO_2', 'NO_3', 'YES']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on NaftaProducerDeterminationCode' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_NaftaNetCostMethodCode(self, value):
        result = True
        # Validate type NaftaNetCostMethodCode, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['NC', 'NO']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on NaftaNetCostMethodCode' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.PreferenceCriterion is not None or
            self.ProducerDetermination is not None or
            self.ProducerId is not None or
            self.NetCostMethod is not None or
            self.NetCostDateRange is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='NaftaCommodityDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('NaftaCommodityDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'NaftaCommodityDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='NaftaCommodityDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='NaftaCommodityDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='NaftaCommodityDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='NaftaCommodityDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PreferenceCriterion is not None:
            namespaceprefix_ = self.PreferenceCriterion_nsprefix_ + ':' if (UseCapturedNS_ and self.PreferenceCriterion_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPreferenceCriterion>%s</%sPreferenceCriterion>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PreferenceCriterion), input_name='PreferenceCriterion')), namespaceprefix_ , eol_))
        if self.ProducerDetermination is not None:
            namespaceprefix_ = self.ProducerDetermination_nsprefix_ + ':' if (UseCapturedNS_ and self.ProducerDetermination_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProducerDetermination>%s</%sProducerDetermination>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ProducerDetermination), input_name='ProducerDetermination')), namespaceprefix_ , eol_))
        if self.ProducerId is not None:
            namespaceprefix_ = self.ProducerId_nsprefix_ + ':' if (UseCapturedNS_ and self.ProducerId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProducerId>%s</%sProducerId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ProducerId), input_name='ProducerId')), namespaceprefix_ , eol_))
        if self.NetCostMethod is not None:
            namespaceprefix_ = self.NetCostMethod_nsprefix_ + ':' if (UseCapturedNS_ and self.NetCostMethod_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNetCostMethod>%s</%sNetCostMethod>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NetCostMethod), input_name='NetCostMethod')), namespaceprefix_ , eol_))
        if self.NetCostDateRange is not None:
            namespaceprefix_ = self.NetCostDateRange_nsprefix_ + ':' if (UseCapturedNS_ and self.NetCostDateRange_nsprefix_) else ''
            self.NetCostDateRange.export(outfile, level, namespaceprefix_, namespacedef_='', name_='NetCostDateRange', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PreferenceCriterion':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PreferenceCriterion')
            value_ = self.gds_validate_string(value_, node, 'PreferenceCriterion')
            self.PreferenceCriterion = value_
            self.PreferenceCriterion_nsprefix_ = child_.prefix
            # validate type NaftaPreferenceCriterionCode
            self.validate_NaftaPreferenceCriterionCode(self.PreferenceCriterion)
        elif nodeName_ == 'ProducerDetermination':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ProducerDetermination')
            value_ = self.gds_validate_string(value_, node, 'ProducerDetermination')
            self.ProducerDetermination = value_
            self.ProducerDetermination_nsprefix_ = child_.prefix
            # validate type NaftaProducerDeterminationCode
            self.validate_NaftaProducerDeterminationCode(self.ProducerDetermination)
        elif nodeName_ == 'ProducerId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ProducerId')
            value_ = self.gds_validate_string(value_, node, 'ProducerId')
            self.ProducerId = value_
            self.ProducerId_nsprefix_ = child_.prefix
        elif nodeName_ == 'NetCostMethod':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'NetCostMethod')
            value_ = self.gds_validate_string(value_, node, 'NetCostMethod')
            self.NetCostMethod = value_
            self.NetCostMethod_nsprefix_ = child_.prefix
            # validate type NaftaNetCostMethodCode
            self.validate_NaftaNetCostMethodCode(self.NetCostMethod)
        elif nodeName_ == 'NetCostDateRange':
            obj_ = DateRange.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.NetCostDateRange = obj_
            obj_.original_tagname_ = 'NetCostDateRange'
# end class NaftaCommodityDetail


class NaftaProducer(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Id=None, Producer=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Id = Id
        self.Id_nsprefix_ = None
        self.Producer = Producer
        self.Producer_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NaftaProducer)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NaftaProducer.subclass:
            return NaftaProducer.subclass(*args_, **kwargs_)
        else:
            return NaftaProducer(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Id(self):
        return self.Id
    def set_Id(self, Id):
        self.Id = Id
    def get_Producer(self):
        return self.Producer
    def set_Producer(self, Producer):
        self.Producer = Producer
    def hasContent_(self):
        if (
            self.Id is not None or
            self.Producer is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='NaftaProducer', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('NaftaProducer')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'NaftaProducer':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='NaftaProducer')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='NaftaProducer', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='NaftaProducer'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='NaftaProducer', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Id is not None:
            namespaceprefix_ = self.Id_nsprefix_ + ':' if (UseCapturedNS_ and self.Id_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sId>%s</%sId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Id), input_name='Id')), namespaceprefix_ , eol_))
        if self.Producer is not None:
            namespaceprefix_ = self.Producer_nsprefix_ + ':' if (UseCapturedNS_ and self.Producer_nsprefix_) else ''
            self.Producer.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Producer', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Id':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Id')
            value_ = self.gds_validate_string(value_, node, 'Id')
            self.Id = value_
            self.Id_nsprefix_ = child_.prefix
        elif nodeName_ == 'Producer':
            obj_ = Party.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Producer = obj_
            obj_.original_tagname_ = 'Producer'
# end class NaftaProducer


class NetExplosiveDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, Amount=None, Units=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.validate_NetExplosiveClassificationType(self.Type)
        self.Type_nsprefix_ = "ns"
        self.Amount = Amount
        self.Amount_nsprefix_ = None
        self.Units = Units
        self.Units_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NetExplosiveDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NetExplosiveDetail.subclass:
            return NetExplosiveDetail.subclass(*args_, **kwargs_)
        else:
            return NetExplosiveDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_Amount(self):
        return self.Amount
    def set_Amount(self, Amount):
        self.Amount = Amount
    def get_Units(self):
        return self.Units
    def set_Units(self, Units):
        self.Units = Units
    def validate_NetExplosiveClassificationType(self, value):
        result = True
        # Validate type NetExplosiveClassificationType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['NET_EXPLOSIVE_CONTENT', 'NET_EXPLOSIVE_MASS', 'NET_EXPLOSIVE_QUANTITY', 'NET_EXPLOSIVE_WEIGHT']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on NetExplosiveClassificationType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Type is not None or
            self.Amount is not None or
            self.Units is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='NetExplosiveDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('NetExplosiveDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'NetExplosiveDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='NetExplosiveDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='NetExplosiveDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='NetExplosiveDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='NetExplosiveDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.Amount is not None:
            namespaceprefix_ = self.Amount_nsprefix_ + ':' if (UseCapturedNS_ and self.Amount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAmount>%s</%sAmount>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Amount, input_name='Amount'), namespaceprefix_ , eol_))
        if self.Units is not None:
            namespaceprefix_ = self.Units_nsprefix_ + ':' if (UseCapturedNS_ and self.Units_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnits>%s</%sUnits>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Units), input_name='Units')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type NetExplosiveClassificationType
            self.validate_NetExplosiveClassificationType(self.Type)
        elif nodeName_ == 'Amount' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Amount')
            fval_ = self.gds_validate_decimal(fval_, node, 'Amount')
            self.Amount = fval_
            self.Amount_nsprefix_ = child_.prefix
        elif nodeName_ == 'Units':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Units')
            value_ = self.gds_validate_string(value_, node, 'Units')
            self.Units = value_
            self.Units_nsprefix_ = child_.prefix
# end class NetExplosiveDetail


class NonBusinessTimeDetail(GeneratedsSuper):
    """Specification for services performed during non-business hours and/or
    days."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PersonDays=None, PersonHours=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PersonDays = PersonDays
        self.PersonDays_nsprefix_ = None
        self.PersonHours = PersonHours
        self.PersonHours_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NonBusinessTimeDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NonBusinessTimeDetail.subclass:
            return NonBusinessTimeDetail.subclass(*args_, **kwargs_)
        else:
            return NonBusinessTimeDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PersonDays(self):
        return self.PersonDays
    def set_PersonDays(self, PersonDays):
        self.PersonDays = PersonDays
    def get_PersonHours(self):
        return self.PersonHours
    def set_PersonHours(self, PersonHours):
        self.PersonHours = PersonHours
    def hasContent_(self):
        if (
            self.PersonDays is not None or
            self.PersonHours is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='NonBusinessTimeDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('NonBusinessTimeDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'NonBusinessTimeDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='NonBusinessTimeDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='NonBusinessTimeDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='NonBusinessTimeDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='NonBusinessTimeDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PersonDays is not None:
            namespaceprefix_ = self.PersonDays_nsprefix_ + ':' if (UseCapturedNS_ and self.PersonDays_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPersonDays>%s</%sPersonDays>%s' % (namespaceprefix_ , self.gds_format_integer(self.PersonDays, input_name='PersonDays'), namespaceprefix_ , eol_))
        if self.PersonHours is not None:
            namespaceprefix_ = self.PersonHours_nsprefix_ + ':' if (UseCapturedNS_ and self.PersonHours_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPersonHours>%s</%sPersonHours>%s' % (namespaceprefix_ , self.gds_format_integer(self.PersonHours, input_name='PersonHours'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PersonDays' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'PersonDays')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'PersonDays')
            self.PersonDays = ival_
            self.PersonDays_nsprefix_ = child_.prefix
        elif nodeName_ == 'PersonHours' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'PersonHours')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'PersonHours')
            self.PersonHours = ival_
            self.PersonHours_nsprefix_ = child_.prefix
# end class NonBusinessTimeDetail


class Notification(GeneratedsSuper):
    """The descriptive data regarding the result of the submitted
    transaction."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Severity=None, Source=None, Code=None, Message=None, LocalizedMessage=None, MessageParameters=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Severity = Severity
        self.validate_NotificationSeverityType(self.Severity)
        self.Severity_nsprefix_ = "ns"
        self.Source = Source
        self.validate_ServiceIdType(self.Source)
        self.Source_nsprefix_ = "ns"
        self.Code = Code
        self.Code_nsprefix_ = None
        self.Message = Message
        self.Message_nsprefix_ = None
        self.LocalizedMessage = LocalizedMessage
        self.LocalizedMessage_nsprefix_ = None
        if MessageParameters is None:
            self.MessageParameters = []
        else:
            self.MessageParameters = MessageParameters
        self.MessageParameters_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Notification)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Notification.subclass:
            return Notification.subclass(*args_, **kwargs_)
        else:
            return Notification(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Severity(self):
        return self.Severity
    def set_Severity(self, Severity):
        self.Severity = Severity
    def get_Source(self):
        return self.Source
    def set_Source(self, Source):
        self.Source = Source
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def get_Message(self):
        return self.Message
    def set_Message(self, Message):
        self.Message = Message
    def get_LocalizedMessage(self):
        return self.LocalizedMessage
    def set_LocalizedMessage(self, LocalizedMessage):
        self.LocalizedMessage = LocalizedMessage
    def get_MessageParameters(self):
        return self.MessageParameters
    def set_MessageParameters(self, MessageParameters):
        self.MessageParameters = MessageParameters
    def add_MessageParameters(self, value):
        self.MessageParameters.append(value)
    def insert_MessageParameters_at(self, index, value):
        self.MessageParameters.insert(index, value)
    def replace_MessageParameters_at(self, index, value):
        self.MessageParameters[index] = value
    def validate_NotificationSeverityType(self, value):
        result = True
        # Validate type NotificationSeverityType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ERROR', 'FAILURE', 'NOTE', 'SUCCESS', 'WARNING']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on NotificationSeverityType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_ServiceIdType(self, value):
        result = True
        # Validate type ServiceIdType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['vacs']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ServiceIdType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Severity is not None or
            self.Source is not None or
            self.Code is not None or
            self.Message is not None or
            self.LocalizedMessage is not None or
            self.MessageParameters
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Notification', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Notification')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Notification':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Notification')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Notification', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Notification'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Notification', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Severity is not None:
            namespaceprefix_ = self.Severity_nsprefix_ + ':' if (UseCapturedNS_ and self.Severity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSeverity>%s</%sSeverity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Severity), input_name='Severity')), namespaceprefix_ , eol_))
        if self.Source is not None:
            namespaceprefix_ = self.Source_nsprefix_ + ':' if (UseCapturedNS_ and self.Source_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSource>%s</%sSource>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Source), input_name='Source')), namespaceprefix_ , eol_))
        if self.Code is not None:
            namespaceprefix_ = self.Code_nsprefix_ + ':' if (UseCapturedNS_ and self.Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), namespaceprefix_ , eol_))
        if self.Message is not None:
            namespaceprefix_ = self.Message_nsprefix_ + ':' if (UseCapturedNS_ and self.Message_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMessage>%s</%sMessage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Message), input_name='Message')), namespaceprefix_ , eol_))
        if self.LocalizedMessage is not None:
            namespaceprefix_ = self.LocalizedMessage_nsprefix_ + ':' if (UseCapturedNS_ and self.LocalizedMessage_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocalizedMessage>%s</%sLocalizedMessage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LocalizedMessage), input_name='LocalizedMessage')), namespaceprefix_ , eol_))
        for MessageParameters_ in self.MessageParameters:
            namespaceprefix_ = self.MessageParameters_nsprefix_ + ':' if (UseCapturedNS_ and self.MessageParameters_nsprefix_) else ''
            MessageParameters_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MessageParameters', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Severity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Severity')
            value_ = self.gds_validate_string(value_, node, 'Severity')
            self.Severity = value_
            self.Severity_nsprefix_ = child_.prefix
            # validate type NotificationSeverityType
            self.validate_NotificationSeverityType(self.Severity)
        elif nodeName_ == 'Source':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Source')
            value_ = self.gds_validate_string(value_, node, 'Source')
            self.Source = value_
            self.Source_nsprefix_ = child_.prefix
            # validate type ServiceIdType
            self.validate_ServiceIdType(self.Source)
        elif nodeName_ == 'Code':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Code')
            value_ = self.gds_validate_string(value_, node, 'Code')
            self.Code = value_
            self.Code_nsprefix_ = child_.prefix
        elif nodeName_ == 'Message':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Message')
            value_ = self.gds_validate_string(value_, node, 'Message')
            self.Message = value_
            self.Message_nsprefix_ = child_.prefix
        elif nodeName_ == 'LocalizedMessage':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LocalizedMessage')
            value_ = self.gds_validate_string(value_, node, 'LocalizedMessage')
            self.LocalizedMessage = value_
            self.LocalizedMessage_nsprefix_ = child_.prefix
        elif nodeName_ == 'MessageParameters':
            obj_ = NotificationParameter.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MessageParameters.append(obj_)
            obj_.original_tagname_ = 'MessageParameters'
# end class Notification


class NotificationDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, NotificationType=None, EmailDetail=None, Localization=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.NotificationType = NotificationType
        self.validate_NotificationType(self.NotificationType)
        self.NotificationType_nsprefix_ = "ns"
        self.EmailDetail = EmailDetail
        self.EmailDetail_nsprefix_ = "ns"
        self.Localization = Localization
        self.Localization_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NotificationDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NotificationDetail.subclass:
            return NotificationDetail.subclass(*args_, **kwargs_)
        else:
            return NotificationDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_NotificationType(self):
        return self.NotificationType
    def set_NotificationType(self, NotificationType):
        self.NotificationType = NotificationType
    def get_EmailDetail(self):
        return self.EmailDetail
    def set_EmailDetail(self, EmailDetail):
        self.EmailDetail = EmailDetail
    def get_Localization(self):
        return self.Localization
    def set_Localization(self, Localization):
        self.Localization = Localization
    def validate_NotificationType(self, value):
        result = True
        # Validate type NotificationType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['EMAIL']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on NotificationType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.NotificationType is not None or
            self.EmailDetail is not None or
            self.Localization is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='NotificationDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('NotificationDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'NotificationDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='NotificationDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='NotificationDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='NotificationDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='NotificationDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NotificationType is not None:
            namespaceprefix_ = self.NotificationType_nsprefix_ + ':' if (UseCapturedNS_ and self.NotificationType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNotificationType>%s</%sNotificationType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NotificationType), input_name='NotificationType')), namespaceprefix_ , eol_))
        if self.EmailDetail is not None:
            namespaceprefix_ = self.EmailDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.EmailDetail_nsprefix_) else ''
            self.EmailDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='EmailDetail', pretty_print=pretty_print)
        if self.Localization is not None:
            namespaceprefix_ = self.Localization_nsprefix_ + ':' if (UseCapturedNS_ and self.Localization_nsprefix_) else ''
            self.Localization.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Localization', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'NotificationType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'NotificationType')
            value_ = self.gds_validate_string(value_, node, 'NotificationType')
            self.NotificationType = value_
            self.NotificationType_nsprefix_ = child_.prefix
            # validate type NotificationType
            self.validate_NotificationType(self.NotificationType)
        elif nodeName_ == 'EmailDetail':
            obj_ = EMailDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.EmailDetail = obj_
            obj_.original_tagname_ = 'EmailDetail'
        elif nodeName_ == 'Localization':
            obj_ = Localization.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Localization = obj_
            obj_.original_tagname_ = 'Localization'
# end class NotificationDetail


class NotificationParameter(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Id=None, Value=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Id = Id
        self.Id_nsprefix_ = None
        self.Value = Value
        self.Value_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NotificationParameter)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NotificationParameter.subclass:
            return NotificationParameter.subclass(*args_, **kwargs_)
        else:
            return NotificationParameter(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Id(self):
        return self.Id
    def set_Id(self, Id):
        self.Id = Id
    def get_Value(self):
        return self.Value
    def set_Value(self, Value):
        self.Value = Value
    def hasContent_(self):
        if (
            self.Id is not None or
            self.Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='NotificationParameter', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('NotificationParameter')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'NotificationParameter':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='NotificationParameter')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='NotificationParameter', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='NotificationParameter'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='NotificationParameter', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Id is not None:
            namespaceprefix_ = self.Id_nsprefix_ + ':' if (UseCapturedNS_ and self.Id_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sId>%s</%sId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Id), input_name='Id')), namespaceprefix_ , eol_))
        if self.Value is not None:
            namespaceprefix_ = self.Value_nsprefix_ + ':' if (UseCapturedNS_ and self.Value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValue>%s</%sValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Value), input_name='Value')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Id':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Id')
            value_ = self.gds_validate_string(value_, node, 'Id')
            self.Id = value_
            self.Id_nsprefix_ = child_.prefix
        elif nodeName_ == 'Value':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Value')
            value_ = self.gds_validate_string(value_, node, 'Value')
            self.Value = value_
            self.Value_nsprefix_ = child_.prefix
# end class NotificationParameter


class Op900Detail(GeneratedsSuper):
    """The instructions indicating how to print the OP-900 form for hazardous
    materials packages."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Format=None, Reference=None, CustomerImageUsages=None, SignatureName=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Format = Format
        self.Format_nsprefix_ = "ns"
        self.Reference = Reference
        self.validate_CustomerReferenceType(self.Reference)
        self.Reference_nsprefix_ = "ns"
        if CustomerImageUsages is None:
            self.CustomerImageUsages = []
        else:
            self.CustomerImageUsages = CustomerImageUsages
        self.CustomerImageUsages_nsprefix_ = "ns"
        self.SignatureName = SignatureName
        self.SignatureName_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Op900Detail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Op900Detail.subclass:
            return Op900Detail.subclass(*args_, **kwargs_)
        else:
            return Op900Detail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Format(self):
        return self.Format
    def set_Format(self, Format):
        self.Format = Format
    def get_Reference(self):
        return self.Reference
    def set_Reference(self, Reference):
        self.Reference = Reference
    def get_CustomerImageUsages(self):
        return self.CustomerImageUsages
    def set_CustomerImageUsages(self, CustomerImageUsages):
        self.CustomerImageUsages = CustomerImageUsages
    def add_CustomerImageUsages(self, value):
        self.CustomerImageUsages.append(value)
    def insert_CustomerImageUsages_at(self, index, value):
        self.CustomerImageUsages.insert(index, value)
    def replace_CustomerImageUsages_at(self, index, value):
        self.CustomerImageUsages[index] = value
    def get_SignatureName(self):
        return self.SignatureName
    def set_SignatureName(self, SignatureName):
        self.SignatureName = SignatureName
    def validate_CustomerReferenceType(self, value):
        result = True
        # Validate type CustomerReferenceType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BILL_OF_LADING', 'CUSTOMER_REFERENCE', 'DEPARTMENT_NUMBER', 'ELECTRONIC_PRODUCT_CODE', 'INTRACOUNTRY_REGULATORY_REFERENCE', 'INVOICE_NUMBER', 'P_O_NUMBER', 'RMA_ASSOCIATION', 'SHIPMENT_INTEGRITY', 'STORE_NUMBER']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CustomerReferenceType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Format is not None or
            self.Reference is not None or
            self.CustomerImageUsages or
            self.SignatureName is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Op900Detail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Op900Detail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Op900Detail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Op900Detail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Op900Detail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Op900Detail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Op900Detail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Format is not None:
            namespaceprefix_ = self.Format_nsprefix_ + ':' if (UseCapturedNS_ and self.Format_nsprefix_) else ''
            self.Format.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Format', pretty_print=pretty_print)
        if self.Reference is not None:
            namespaceprefix_ = self.Reference_nsprefix_ + ':' if (UseCapturedNS_ and self.Reference_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReference>%s</%sReference>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Reference), input_name='Reference')), namespaceprefix_ , eol_))
        for CustomerImageUsages_ in self.CustomerImageUsages:
            namespaceprefix_ = self.CustomerImageUsages_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomerImageUsages_nsprefix_) else ''
            CustomerImageUsages_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CustomerImageUsages', pretty_print=pretty_print)
        if self.SignatureName is not None:
            namespaceprefix_ = self.SignatureName_nsprefix_ + ':' if (UseCapturedNS_ and self.SignatureName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSignatureName>%s</%sSignatureName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SignatureName), input_name='SignatureName')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Format':
            obj_ = ShippingDocumentFormat.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Format = obj_
            obj_.original_tagname_ = 'Format'
        elif nodeName_ == 'Reference':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Reference')
            value_ = self.gds_validate_string(value_, node, 'Reference')
            self.Reference = value_
            self.Reference_nsprefix_ = child_.prefix
            # validate type CustomerReferenceType
            self.validate_CustomerReferenceType(self.Reference)
        elif nodeName_ == 'CustomerImageUsages':
            obj_ = CustomerImageUsage.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CustomerImageUsages.append(obj_)
            obj_.original_tagname_ = 'CustomerImageUsages'
        elif nodeName_ == 'SignatureName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SignatureName')
            value_ = self.gds_validate_string(value_, node, 'SignatureName')
            self.SignatureName = value_
            self.SignatureName_nsprefix_ = child_.prefix
# end class Op900Detail


class PackageSpecialHandlingDetail(GeneratedsSuper):
    """Specifies the condition of a package when it was received at a FedEx
    location."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PackedBy=None, DamageKnown=None, InspectionStatus=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PackedBy = PackedBy
        self.validate_PackagePackedByType(self.PackedBy)
        self.PackedBy_nsprefix_ = "ns"
        self.DamageKnown = DamageKnown
        self.validate_DamageStatusType(self.DamageKnown)
        self.DamageKnown_nsprefix_ = "ns"
        self.InspectionStatus = InspectionStatus
        self.validate_InspectionStatusType(self.InspectionStatus)
        self.InspectionStatus_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackageSpecialHandlingDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackageSpecialHandlingDetail.subclass:
            return PackageSpecialHandlingDetail.subclass(*args_, **kwargs_)
        else:
            return PackageSpecialHandlingDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PackedBy(self):
        return self.PackedBy
    def set_PackedBy(self, PackedBy):
        self.PackedBy = PackedBy
    def get_DamageKnown(self):
        return self.DamageKnown
    def set_DamageKnown(self, DamageKnown):
        self.DamageKnown = DamageKnown
    def get_InspectionStatus(self):
        return self.InspectionStatus
    def set_InspectionStatus(self, InspectionStatus):
        self.InspectionStatus = InspectionStatus
    def validate_PackagePackedByType(self, value):
        result = True
        # Validate type PackagePackedByType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CUSTOMER', 'FEDEX_OFFICE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on PackagePackedByType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_DamageStatusType(self, value):
        result = True
        # Validate type DamageStatusType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['DAMAGE_KNOWN', 'NO_KNOWN_DAMAGE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on DamageStatusType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_InspectionStatusType(self, value):
        result = True
        # Validate type InspectionStatusType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CUSTOMER_REFUSED_INSPECTION', 'INSPECTED', 'NOT_INSPECTED']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on InspectionStatusType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.PackedBy is not None or
            self.DamageKnown is not None or
            self.InspectionStatus is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PackageSpecialHandlingDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PackageSpecialHandlingDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PackageSpecialHandlingDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PackageSpecialHandlingDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PackageSpecialHandlingDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PackageSpecialHandlingDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PackageSpecialHandlingDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PackedBy is not None:
            namespaceprefix_ = self.PackedBy_nsprefix_ + ':' if (UseCapturedNS_ and self.PackedBy_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackedBy>%s</%sPackedBy>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PackedBy), input_name='PackedBy')), namespaceprefix_ , eol_))
        if self.DamageKnown is not None:
            namespaceprefix_ = self.DamageKnown_nsprefix_ + ':' if (UseCapturedNS_ and self.DamageKnown_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDamageKnown>%s</%sDamageKnown>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DamageKnown), input_name='DamageKnown')), namespaceprefix_ , eol_))
        if self.InspectionStatus is not None:
            namespaceprefix_ = self.InspectionStatus_nsprefix_ + ':' if (UseCapturedNS_ and self.InspectionStatus_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInspectionStatus>%s</%sInspectionStatus>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InspectionStatus), input_name='InspectionStatus')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PackedBy':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PackedBy')
            value_ = self.gds_validate_string(value_, node, 'PackedBy')
            self.PackedBy = value_
            self.PackedBy_nsprefix_ = child_.prefix
            # validate type PackagePackedByType
            self.validate_PackagePackedByType(self.PackedBy)
        elif nodeName_ == 'DamageKnown':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DamageKnown')
            value_ = self.gds_validate_string(value_, node, 'DamageKnown')
            self.DamageKnown = value_
            self.DamageKnown_nsprefix_ = child_.prefix
            # validate type DamageStatusType
            self.validate_DamageStatusType(self.DamageKnown)
        elif nodeName_ == 'InspectionStatus':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'InspectionStatus')
            value_ = self.gds_validate_string(value_, node, 'InspectionStatus')
            self.InspectionStatus = value_
            self.InspectionStatus_nsprefix_ = child_.prefix
            # validate type InspectionStatusType
            self.validate_InspectionStatusType(self.InspectionStatus)
# end class PackageSpecialHandlingDetail


class PackageSpecialServiceDescription(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CarrierCodesAndServices=None, SubSpecialServiceId=None, SubNames=None, SpecialServiceId=None, Names=None, SpecialServiceType=None, SpecialServiceSubType=None, Code=None, Description=None, AstraDescription=None, CustomerIntegrationMode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if CarrierCodesAndServices is None:
            self.CarrierCodesAndServices = []
        else:
            self.CarrierCodesAndServices = CarrierCodesAndServices
        self.CarrierCodesAndServices_nsprefix_ = "ns"
        self.SubSpecialServiceId = SubSpecialServiceId
        self.SubSpecialServiceId_nsprefix_ = None
        if SubNames is None:
            self.SubNames = []
        else:
            self.SubNames = SubNames
        self.SubNames_nsprefix_ = "ns"
        self.SpecialServiceId = SpecialServiceId
        self.SpecialServiceId_nsprefix_ = None
        if Names is None:
            self.Names = []
        else:
            self.Names = Names
        self.Names_nsprefix_ = "ns"
        self.SpecialServiceType = SpecialServiceType
        self.SpecialServiceType_nsprefix_ = None
        self.SpecialServiceSubType = SpecialServiceSubType
        self.SpecialServiceSubType_nsprefix_ = None
        self.Code = Code
        self.Code_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
        self.AstraDescription = AstraDescription
        self.AstraDescription_nsprefix_ = None
        self.CustomerIntegrationMode = CustomerIntegrationMode
        self.validate_CustomerIntegrationModeType(self.CustomerIntegrationMode)
        self.CustomerIntegrationMode_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackageSpecialServiceDescription)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackageSpecialServiceDescription.subclass:
            return PackageSpecialServiceDescription.subclass(*args_, **kwargs_)
        else:
            return PackageSpecialServiceDescription(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CarrierCodesAndServices(self):
        return self.CarrierCodesAndServices
    def set_CarrierCodesAndServices(self, CarrierCodesAndServices):
        self.CarrierCodesAndServices = CarrierCodesAndServices
    def add_CarrierCodesAndServices(self, value):
        self.CarrierCodesAndServices.append(value)
    def insert_CarrierCodesAndServices_at(self, index, value):
        self.CarrierCodesAndServices.insert(index, value)
    def replace_CarrierCodesAndServices_at(self, index, value):
        self.CarrierCodesAndServices[index] = value
    def get_SubSpecialServiceId(self):
        return self.SubSpecialServiceId
    def set_SubSpecialServiceId(self, SubSpecialServiceId):
        self.SubSpecialServiceId = SubSpecialServiceId
    def get_SubNames(self):
        return self.SubNames
    def set_SubNames(self, SubNames):
        self.SubNames = SubNames
    def add_SubNames(self, value):
        self.SubNames.append(value)
    def insert_SubNames_at(self, index, value):
        self.SubNames.insert(index, value)
    def replace_SubNames_at(self, index, value):
        self.SubNames[index] = value
    def get_SpecialServiceId(self):
        return self.SpecialServiceId
    def set_SpecialServiceId(self, SpecialServiceId):
        self.SpecialServiceId = SpecialServiceId
    def get_Names(self):
        return self.Names
    def set_Names(self, Names):
        self.Names = Names
    def add_Names(self, value):
        self.Names.append(value)
    def insert_Names_at(self, index, value):
        self.Names.insert(index, value)
    def replace_Names_at(self, index, value):
        self.Names[index] = value
    def get_SpecialServiceType(self):
        return self.SpecialServiceType
    def set_SpecialServiceType(self, SpecialServiceType):
        self.SpecialServiceType = SpecialServiceType
    def get_SpecialServiceSubType(self):
        return self.SpecialServiceSubType
    def set_SpecialServiceSubType(self, SpecialServiceSubType):
        self.SpecialServiceSubType = SpecialServiceSubType
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def get_AstraDescription(self):
        return self.AstraDescription
    def set_AstraDescription(self, AstraDescription):
        self.AstraDescription = AstraDescription
    def get_CustomerIntegrationMode(self):
        return self.CustomerIntegrationMode
    def set_CustomerIntegrationMode(self, CustomerIntegrationMode):
        self.CustomerIntegrationMode = CustomerIntegrationMode
    def validate_CustomerIntegrationModeType(self, value):
        result = True
        # Validate type CustomerIntegrationModeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CUSTOM', 'STANDARD']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CustomerIntegrationModeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.CarrierCodesAndServices or
            self.SubSpecialServiceId is not None or
            self.SubNames or
            self.SpecialServiceId is not None or
            self.Names or
            self.SpecialServiceType is not None or
            self.SpecialServiceSubType is not None or
            self.Code is not None or
            self.Description is not None or
            self.AstraDescription is not None or
            self.CustomerIntegrationMode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PackageSpecialServiceDescription', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PackageSpecialServiceDescription')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PackageSpecialServiceDescription':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PackageSpecialServiceDescription')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PackageSpecialServiceDescription', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PackageSpecialServiceDescription'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PackageSpecialServiceDescription', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for CarrierCodesAndServices_ in self.CarrierCodesAndServices:
            namespaceprefix_ = self.CarrierCodesAndServices_nsprefix_ + ':' if (UseCapturedNS_ and self.CarrierCodesAndServices_nsprefix_) else ''
            CarrierCodesAndServices_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CarrierCodesAndServices', pretty_print=pretty_print)
        if self.SubSpecialServiceId is not None:
            namespaceprefix_ = self.SubSpecialServiceId_nsprefix_ + ':' if (UseCapturedNS_ and self.SubSpecialServiceId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSubSpecialServiceId>%s</%sSubSpecialServiceId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SubSpecialServiceId), input_name='SubSpecialServiceId')), namespaceprefix_ , eol_))
        for SubNames_ in self.SubNames:
            namespaceprefix_ = self.SubNames_nsprefix_ + ':' if (UseCapturedNS_ and self.SubNames_nsprefix_) else ''
            SubNames_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SubNames', pretty_print=pretty_print)
        if self.SpecialServiceId is not None:
            namespaceprefix_ = self.SpecialServiceId_nsprefix_ + ':' if (UseCapturedNS_ and self.SpecialServiceId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSpecialServiceId>%s</%sSpecialServiceId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SpecialServiceId), input_name='SpecialServiceId')), namespaceprefix_ , eol_))
        for Names_ in self.Names:
            namespaceprefix_ = self.Names_nsprefix_ + ':' if (UseCapturedNS_ and self.Names_nsprefix_) else ''
            Names_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Names', pretty_print=pretty_print)
        if self.SpecialServiceType is not None:
            namespaceprefix_ = self.SpecialServiceType_nsprefix_ + ':' if (UseCapturedNS_ and self.SpecialServiceType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSpecialServiceType>%s</%sSpecialServiceType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SpecialServiceType), input_name='SpecialServiceType')), namespaceprefix_ , eol_))
        if self.SpecialServiceSubType is not None:
            namespaceprefix_ = self.SpecialServiceSubType_nsprefix_ + ':' if (UseCapturedNS_ and self.SpecialServiceSubType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSpecialServiceSubType>%s</%sSpecialServiceSubType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SpecialServiceSubType), input_name='SpecialServiceSubType')), namespaceprefix_ , eol_))
        if self.Code is not None:
            namespaceprefix_ = self.Code_nsprefix_ + ':' if (UseCapturedNS_ and self.Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
        if self.AstraDescription is not None:
            namespaceprefix_ = self.AstraDescription_nsprefix_ + ':' if (UseCapturedNS_ and self.AstraDescription_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAstraDescription>%s</%sAstraDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AstraDescription), input_name='AstraDescription')), namespaceprefix_ , eol_))
        if self.CustomerIntegrationMode is not None:
            namespaceprefix_ = self.CustomerIntegrationMode_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomerIntegrationMode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCustomerIntegrationMode>%s</%sCustomerIntegrationMode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CustomerIntegrationMode), input_name='CustomerIntegrationMode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CarrierCodesAndServices':
            obj_ = ServiceTypesByCarrierCodeDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CarrierCodesAndServices.append(obj_)
            obj_.original_tagname_ = 'CarrierCodesAndServices'
        elif nodeName_ == 'SubSpecialServiceId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SubSpecialServiceId')
            value_ = self.gds_validate_string(value_, node, 'SubSpecialServiceId')
            self.SubSpecialServiceId = value_
            self.SubSpecialServiceId_nsprefix_ = child_.prefix
        elif nodeName_ == 'SubNames':
            obj_ = ProductName.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SubNames.append(obj_)
            obj_.original_tagname_ = 'SubNames'
        elif nodeName_ == 'SpecialServiceId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SpecialServiceId')
            value_ = self.gds_validate_string(value_, node, 'SpecialServiceId')
            self.SpecialServiceId = value_
            self.SpecialServiceId_nsprefix_ = child_.prefix
        elif nodeName_ == 'Names':
            obj_ = ProductName.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Names.append(obj_)
            obj_.original_tagname_ = 'Names'
        elif nodeName_ == 'SpecialServiceType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SpecialServiceType')
            value_ = self.gds_validate_string(value_, node, 'SpecialServiceType')
            self.SpecialServiceType = value_
            self.SpecialServiceType_nsprefix_ = child_.prefix
        elif nodeName_ == 'SpecialServiceSubType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SpecialServiceSubType')
            value_ = self.gds_validate_string(value_, node, 'SpecialServiceSubType')
            self.SpecialServiceSubType = value_
            self.SpecialServiceSubType_nsprefix_ = child_.prefix
        elif nodeName_ == 'Code':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Code')
            value_ = self.gds_validate_string(value_, node, 'Code')
            self.Code = value_
            self.Code_nsprefix_ = child_.prefix
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
        elif nodeName_ == 'AstraDescription':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AstraDescription')
            value_ = self.gds_validate_string(value_, node, 'AstraDescription')
            self.AstraDescription = value_
            self.AstraDescription_nsprefix_ = child_.prefix
        elif nodeName_ == 'CustomerIntegrationMode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CustomerIntegrationMode')
            value_ = self.gds_validate_string(value_, node, 'CustomerIntegrationMode')
            self.CustomerIntegrationMode = value_
            self.CustomerIntegrationMode_nsprefix_ = child_.prefix
            # validate type CustomerIntegrationModeType
            self.validate_CustomerIntegrationModeType(self.CustomerIntegrationMode)
# end class PackageSpecialServiceDescription


class PackageSpecialServicesRequested(GeneratedsSuper):
    """These special services are available at the package level for some or
    all service types. If the shipper is requesting a special service which
    requires additional data, the package special service type must be
    present in the specialServiceTypes collection, and the supporting
    detail must be provided in the appropriate sub-object below."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, SpecialServiceTypes=None, CodDetail=None, DangerousGoodsDetail=None, BatteryDetails=None, DryIceWeight=None, SignatureOptionDetail=None, PieceCountVerificationBoxCount=None, PriorityAlertDetail=None, AlcoholDetail=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if SpecialServiceTypes is None:
            self.SpecialServiceTypes = []
        else:
            self.SpecialServiceTypes = SpecialServiceTypes
        self.SpecialServiceTypes_nsprefix_ = None
        self.CodDetail = CodDetail
        self.CodDetail_nsprefix_ = "ns"
        self.DangerousGoodsDetail = DangerousGoodsDetail
        self.DangerousGoodsDetail_nsprefix_ = "ns"
        if BatteryDetails is None:
            self.BatteryDetails = []
        else:
            self.BatteryDetails = BatteryDetails
        self.BatteryDetails_nsprefix_ = "ns"
        self.DryIceWeight = DryIceWeight
        self.DryIceWeight_nsprefix_ = "ns"
        self.SignatureOptionDetail = SignatureOptionDetail
        self.SignatureOptionDetail_nsprefix_ = "ns"
        self.PieceCountVerificationBoxCount = PieceCountVerificationBoxCount
        self.PieceCountVerificationBoxCount_nsprefix_ = None
        self.PriorityAlertDetail = PriorityAlertDetail
        self.PriorityAlertDetail_nsprefix_ = "ns"
        self.AlcoholDetail = AlcoholDetail
        self.AlcoholDetail_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackageSpecialServicesRequested)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackageSpecialServicesRequested.subclass:
            return PackageSpecialServicesRequested.subclass(*args_, **kwargs_)
        else:
            return PackageSpecialServicesRequested(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_SpecialServiceTypes(self):
        return self.SpecialServiceTypes
    def set_SpecialServiceTypes(self, SpecialServiceTypes):
        self.SpecialServiceTypes = SpecialServiceTypes
    def add_SpecialServiceTypes(self, value):
        self.SpecialServiceTypes.append(value)
    def insert_SpecialServiceTypes_at(self, index, value):
        self.SpecialServiceTypes.insert(index, value)
    def replace_SpecialServiceTypes_at(self, index, value):
        self.SpecialServiceTypes[index] = value
    def get_CodDetail(self):
        return self.CodDetail
    def set_CodDetail(self, CodDetail):
        self.CodDetail = CodDetail
    def get_DangerousGoodsDetail(self):
        return self.DangerousGoodsDetail
    def set_DangerousGoodsDetail(self, DangerousGoodsDetail):
        self.DangerousGoodsDetail = DangerousGoodsDetail
    def get_BatteryDetails(self):
        return self.BatteryDetails
    def set_BatteryDetails(self, BatteryDetails):
        self.BatteryDetails = BatteryDetails
    def add_BatteryDetails(self, value):
        self.BatteryDetails.append(value)
    def insert_BatteryDetails_at(self, index, value):
        self.BatteryDetails.insert(index, value)
    def replace_BatteryDetails_at(self, index, value):
        self.BatteryDetails[index] = value
    def get_DryIceWeight(self):
        return self.DryIceWeight
    def set_DryIceWeight(self, DryIceWeight):
        self.DryIceWeight = DryIceWeight
    def get_SignatureOptionDetail(self):
        return self.SignatureOptionDetail
    def set_SignatureOptionDetail(self, SignatureOptionDetail):
        self.SignatureOptionDetail = SignatureOptionDetail
    def get_PieceCountVerificationBoxCount(self):
        return self.PieceCountVerificationBoxCount
    def set_PieceCountVerificationBoxCount(self, PieceCountVerificationBoxCount):
        self.PieceCountVerificationBoxCount = PieceCountVerificationBoxCount
    def get_PriorityAlertDetail(self):
        return self.PriorityAlertDetail
    def set_PriorityAlertDetail(self, PriorityAlertDetail):
        self.PriorityAlertDetail = PriorityAlertDetail
    def get_AlcoholDetail(self):
        return self.AlcoholDetail
    def set_AlcoholDetail(self, AlcoholDetail):
        self.AlcoholDetail = AlcoholDetail
    def hasContent_(self):
        if (
            self.SpecialServiceTypes or
            self.CodDetail is not None or
            self.DangerousGoodsDetail is not None or
            self.BatteryDetails or
            self.DryIceWeight is not None or
            self.SignatureOptionDetail is not None or
            self.PieceCountVerificationBoxCount is not None or
            self.PriorityAlertDetail is not None or
            self.AlcoholDetail is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PackageSpecialServicesRequested', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PackageSpecialServicesRequested')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PackageSpecialServicesRequested':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PackageSpecialServicesRequested')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PackageSpecialServicesRequested', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PackageSpecialServicesRequested'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PackageSpecialServicesRequested', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for SpecialServiceTypes_ in self.SpecialServiceTypes:
            namespaceprefix_ = self.SpecialServiceTypes_nsprefix_ + ':' if (UseCapturedNS_ and self.SpecialServiceTypes_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSpecialServiceTypes>%s</%sSpecialServiceTypes>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(SpecialServiceTypes_), input_name='SpecialServiceTypes')), namespaceprefix_ , eol_))
        if self.CodDetail is not None:
            namespaceprefix_ = self.CodDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.CodDetail_nsprefix_) else ''
            self.CodDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CodDetail', pretty_print=pretty_print)
        if self.DangerousGoodsDetail is not None:
            namespaceprefix_ = self.DangerousGoodsDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.DangerousGoodsDetail_nsprefix_) else ''
            self.DangerousGoodsDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DangerousGoodsDetail', pretty_print=pretty_print)
        for BatteryDetails_ in self.BatteryDetails:
            namespaceprefix_ = self.BatteryDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.BatteryDetails_nsprefix_) else ''
            BatteryDetails_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='BatteryDetails', pretty_print=pretty_print)
        if self.DryIceWeight is not None:
            namespaceprefix_ = self.DryIceWeight_nsprefix_ + ':' if (UseCapturedNS_ and self.DryIceWeight_nsprefix_) else ''
            self.DryIceWeight.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DryIceWeight', pretty_print=pretty_print)
        if self.SignatureOptionDetail is not None:
            namespaceprefix_ = self.SignatureOptionDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.SignatureOptionDetail_nsprefix_) else ''
            self.SignatureOptionDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SignatureOptionDetail', pretty_print=pretty_print)
        if self.PieceCountVerificationBoxCount is not None:
            namespaceprefix_ = self.PieceCountVerificationBoxCount_nsprefix_ + ':' if (UseCapturedNS_ and self.PieceCountVerificationBoxCount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPieceCountVerificationBoxCount>%s</%sPieceCountVerificationBoxCount>%s' % (namespaceprefix_ , self.gds_format_integer(self.PieceCountVerificationBoxCount, input_name='PieceCountVerificationBoxCount'), namespaceprefix_ , eol_))
        if self.PriorityAlertDetail is not None:
            namespaceprefix_ = self.PriorityAlertDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.PriorityAlertDetail_nsprefix_) else ''
            self.PriorityAlertDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PriorityAlertDetail', pretty_print=pretty_print)
        if self.AlcoholDetail is not None:
            namespaceprefix_ = self.AlcoholDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.AlcoholDetail_nsprefix_) else ''
            self.AlcoholDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AlcoholDetail', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'SpecialServiceTypes':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SpecialServiceTypes')
            value_ = self.gds_validate_string(value_, node, 'SpecialServiceTypes')
            self.SpecialServiceTypes.append(value_)
            self.SpecialServiceTypes_nsprefix_ = child_.prefix
        elif nodeName_ == 'CodDetail':
            obj_ = CodDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CodDetail = obj_
            obj_.original_tagname_ = 'CodDetail'
        elif nodeName_ == 'DangerousGoodsDetail':
            obj_ = DangerousGoodsDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DangerousGoodsDetail = obj_
            obj_.original_tagname_ = 'DangerousGoodsDetail'
        elif nodeName_ == 'BatteryDetails':
            obj_ = BatteryClassificationDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.BatteryDetails.append(obj_)
            obj_.original_tagname_ = 'BatteryDetails'
        elif nodeName_ == 'DryIceWeight':
            obj_ = Weight.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DryIceWeight = obj_
            obj_.original_tagname_ = 'DryIceWeight'
        elif nodeName_ == 'SignatureOptionDetail':
            obj_ = SignatureOptionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SignatureOptionDetail = obj_
            obj_.original_tagname_ = 'SignatureOptionDetail'
        elif nodeName_ == 'PieceCountVerificationBoxCount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'PieceCountVerificationBoxCount')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'PieceCountVerificationBoxCount')
            self.PieceCountVerificationBoxCount = ival_
            self.PieceCountVerificationBoxCount_nsprefix_ = child_.prefix
        elif nodeName_ == 'PriorityAlertDetail':
            obj_ = PriorityAlertDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PriorityAlertDetail = obj_
            obj_.original_tagname_ = 'PriorityAlertDetail'
        elif nodeName_ == 'AlcoholDetail':
            obj_ = AlcoholDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AlcoholDetail = obj_
            obj_.original_tagname_ = 'AlcoholDetail'
# end class PackageSpecialServicesRequested


class PackagingDescription(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PackagingType=None, Code=None, Names=None, Description=None, AstraDescription=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PackagingType = PackagingType
        self.PackagingType_nsprefix_ = None
        self.Code = Code
        self.Code_nsprefix_ = None
        if Names is None:
            self.Names = []
        else:
            self.Names = Names
        self.Names_nsprefix_ = "ns"
        self.Description = Description
        self.Description_nsprefix_ = None
        self.AstraDescription = AstraDescription
        self.AstraDescription_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackagingDescription)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackagingDescription.subclass:
            return PackagingDescription.subclass(*args_, **kwargs_)
        else:
            return PackagingDescription(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PackagingType(self):
        return self.PackagingType
    def set_PackagingType(self, PackagingType):
        self.PackagingType = PackagingType
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def get_Names(self):
        return self.Names
    def set_Names(self, Names):
        self.Names = Names
    def add_Names(self, value):
        self.Names.append(value)
    def insert_Names_at(self, index, value):
        self.Names.insert(index, value)
    def replace_Names_at(self, index, value):
        self.Names[index] = value
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def get_AstraDescription(self):
        return self.AstraDescription
    def set_AstraDescription(self, AstraDescription):
        self.AstraDescription = AstraDescription
    def hasContent_(self):
        if (
            self.PackagingType is not None or
            self.Code is not None or
            self.Names or
            self.Description is not None or
            self.AstraDescription is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PackagingDescription', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PackagingDescription')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PackagingDescription':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PackagingDescription')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PackagingDescription', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PackagingDescription'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PackagingDescription', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PackagingType is not None:
            namespaceprefix_ = self.PackagingType_nsprefix_ + ':' if (UseCapturedNS_ and self.PackagingType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackagingType>%s</%sPackagingType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PackagingType), input_name='PackagingType')), namespaceprefix_ , eol_))
        if self.Code is not None:
            namespaceprefix_ = self.Code_nsprefix_ + ':' if (UseCapturedNS_ and self.Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), namespaceprefix_ , eol_))
        for Names_ in self.Names:
            namespaceprefix_ = self.Names_nsprefix_ + ':' if (UseCapturedNS_ and self.Names_nsprefix_) else ''
            Names_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Names', pretty_print=pretty_print)
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
        if self.AstraDescription is not None:
            namespaceprefix_ = self.AstraDescription_nsprefix_ + ':' if (UseCapturedNS_ and self.AstraDescription_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAstraDescription>%s</%sAstraDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AstraDescription), input_name='AstraDescription')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PackagingType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PackagingType')
            value_ = self.gds_validate_string(value_, node, 'PackagingType')
            self.PackagingType = value_
            self.PackagingType_nsprefix_ = child_.prefix
        elif nodeName_ == 'Code':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Code')
            value_ = self.gds_validate_string(value_, node, 'Code')
            self.Code = value_
            self.Code_nsprefix_ = child_.prefix
        elif nodeName_ == 'Names':
            obj_ = ProductName.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Names.append(obj_)
            obj_.original_tagname_ = 'Names'
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
        elif nodeName_ == 'AstraDescription':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AstraDescription')
            value_ = self.gds_validate_string(value_, node, 'AstraDescription')
            self.AstraDescription = value_
            self.AstraDescription_nsprefix_ = child_.prefix
# end class PackagingDescription


class PackagingOptionDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PackagingDescription=None, AppliedOptions=None, MaximumWeights=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PackagingDescription = PackagingDescription
        self.PackagingDescription_nsprefix_ = "ns"
        if AppliedOptions is None:
            self.AppliedOptions = []
        else:
            self.AppliedOptions = AppliedOptions
        self.AppliedOptions_nsprefix_ = "ns"
        if MaximumWeights is None:
            self.MaximumWeights = []
        else:
            self.MaximumWeights = MaximumWeights
        self.MaximumWeights_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackagingOptionDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackagingOptionDetail.subclass:
            return PackagingOptionDetail.subclass(*args_, **kwargs_)
        else:
            return PackagingOptionDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PackagingDescription(self):
        return self.PackagingDescription
    def set_PackagingDescription(self, PackagingDescription):
        self.PackagingDescription = PackagingDescription
    def get_AppliedOptions(self):
        return self.AppliedOptions
    def set_AppliedOptions(self, AppliedOptions):
        self.AppliedOptions = AppliedOptions
    def add_AppliedOptions(self, value):
        self.AppliedOptions.append(value)
    def insert_AppliedOptions_at(self, index, value):
        self.AppliedOptions.insert(index, value)
    def replace_AppliedOptions_at(self, index, value):
        self.AppliedOptions[index] = value
    def get_MaximumWeights(self):
        return self.MaximumWeights
    def set_MaximumWeights(self, MaximumWeights):
        self.MaximumWeights = MaximumWeights
    def add_MaximumWeights(self, value):
        self.MaximumWeights.append(value)
    def insert_MaximumWeights_at(self, index, value):
        self.MaximumWeights.insert(index, value)
    def replace_MaximumWeights_at(self, index, value):
        self.MaximumWeights[index] = value
    def validate_PackagingOptionSpecialServiceType(self, value):
        result = True
        # Validate type PackagingOptionSpecialServiceType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FEDEX_ONE_RATE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on PackagingOptionSpecialServiceType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.PackagingDescription is not None or
            self.AppliedOptions or
            self.MaximumWeights
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PackagingOptionDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PackagingOptionDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PackagingOptionDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PackagingOptionDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PackagingOptionDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PackagingOptionDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PackagingOptionDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PackagingDescription is not None:
            namespaceprefix_ = self.PackagingDescription_nsprefix_ + ':' if (UseCapturedNS_ and self.PackagingDescription_nsprefix_) else ''
            self.PackagingDescription.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PackagingDescription', pretty_print=pretty_print)
        for AppliedOptions_ in self.AppliedOptions:
            namespaceprefix_ = self.AppliedOptions_nsprefix_ + ':' if (UseCapturedNS_ and self.AppliedOptions_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAppliedOptions>%s</%sAppliedOptions>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(AppliedOptions_), input_name='AppliedOptions')), namespaceprefix_ , eol_))
        for MaximumWeights_ in self.MaximumWeights:
            namespaceprefix_ = self.MaximumWeights_nsprefix_ + ':' if (UseCapturedNS_ and self.MaximumWeights_nsprefix_) else ''
            MaximumWeights_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MaximumWeights', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PackagingDescription':
            obj_ = PackagingDescription.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PackagingDescription = obj_
            obj_.original_tagname_ = 'PackagingDescription'
        elif nodeName_ == 'AppliedOptions':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AppliedOptions')
            value_ = self.gds_validate_string(value_, node, 'AppliedOptions')
            self.AppliedOptions.append(value_)
            self.AppliedOptions_nsprefix_ = child_.prefix
            # validate type PackagingOptionSpecialServiceType
            self.validate_PackagingOptionSpecialServiceType(self.AppliedOptions[-1])
        elif nodeName_ == 'MaximumWeights':
            obj_ = Weight.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MaximumWeights.append(obj_)
            obj_.original_tagname_ = 'MaximumWeights'
# end class PackagingOptionDetail


class PalletShrinkwrapDetail(GeneratedsSuper):
    """Specifications for pallets to be shrinkwrapped as part of a Freight
    shipment."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PalletCount=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PalletCount = PalletCount
        self.PalletCount_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PalletShrinkwrapDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PalletShrinkwrapDetail.subclass:
            return PalletShrinkwrapDetail.subclass(*args_, **kwargs_)
        else:
            return PalletShrinkwrapDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PalletCount(self):
        return self.PalletCount
    def set_PalletCount(self, PalletCount):
        self.PalletCount = PalletCount
    def hasContent_(self):
        if (
            self.PalletCount is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PalletShrinkwrapDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PalletShrinkwrapDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PalletShrinkwrapDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PalletShrinkwrapDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PalletShrinkwrapDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PalletShrinkwrapDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PalletShrinkwrapDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PalletCount is not None:
            namespaceprefix_ = self.PalletCount_nsprefix_ + ':' if (UseCapturedNS_ and self.PalletCount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPalletCount>%s</%sPalletCount>%s' % (namespaceprefix_ , self.gds_format_integer(self.PalletCount, input_name='PalletCount'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PalletCount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'PalletCount')
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'PalletCount')
            self.PalletCount = ival_
            self.PalletCount_nsprefix_ = child_.prefix
# end class PalletShrinkwrapDetail


class PalletsProvidedDetail(GeneratedsSuper):
    """Specifications for pallets to be provided on Freight shipment."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PalletCount=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PalletCount = PalletCount
        self.PalletCount_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PalletsProvidedDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PalletsProvidedDetail.subclass:
            return PalletsProvidedDetail.subclass(*args_, **kwargs_)
        else:
            return PalletsProvidedDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PalletCount(self):
        return self.PalletCount
    def set_PalletCount(self, PalletCount):
        self.PalletCount = PalletCount
    def hasContent_(self):
        if (
            self.PalletCount is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PalletsProvidedDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PalletsProvidedDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PalletsProvidedDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PalletsProvidedDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PalletsProvidedDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PalletsProvidedDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PalletsProvidedDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PalletCount is not None:
            namespaceprefix_ = self.PalletCount_nsprefix_ + ':' if (UseCapturedNS_ and self.PalletCount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPalletCount>%s</%sPalletCount>%s' % (namespaceprefix_ , self.gds_format_integer(self.PalletCount, input_name='PalletCount'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PalletCount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'PalletCount')
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'PalletCount')
            self.PalletCount = ival_
            self.PalletCount_nsprefix_ = child_.prefix
# end class PalletsProvidedDetail


class ParsedPersonName(GeneratedsSuper):
    """The descriptive data for a person's name broken out into individual name
    elements such as first name, last name."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Prefix=None, Title=None, FirstName=None, MiddleName=None, LastName=None, Suffix=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Prefix = Prefix
        self.Prefix_nsprefix_ = None
        self.Title = Title
        self.Title_nsprefix_ = None
        self.FirstName = FirstName
        self.FirstName_nsprefix_ = None
        self.MiddleName = MiddleName
        self.MiddleName_nsprefix_ = None
        self.LastName = LastName
        self.LastName_nsprefix_ = None
        self.Suffix = Suffix
        self.Suffix_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ParsedPersonName)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ParsedPersonName.subclass:
            return ParsedPersonName.subclass(*args_, **kwargs_)
        else:
            return ParsedPersonName(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Prefix(self):
        return self.Prefix
    def set_Prefix(self, Prefix):
        self.Prefix = Prefix
    def get_Title(self):
        return self.Title
    def set_Title(self, Title):
        self.Title = Title
    def get_FirstName(self):
        return self.FirstName
    def set_FirstName(self, FirstName):
        self.FirstName = FirstName
    def get_MiddleName(self):
        return self.MiddleName
    def set_MiddleName(self, MiddleName):
        self.MiddleName = MiddleName
    def get_LastName(self):
        return self.LastName
    def set_LastName(self, LastName):
        self.LastName = LastName
    def get_Suffix(self):
        return self.Suffix
    def set_Suffix(self, Suffix):
        self.Suffix = Suffix
    def hasContent_(self):
        if (
            self.Prefix is not None or
            self.Title is not None or
            self.FirstName is not None or
            self.MiddleName is not None or
            self.LastName is not None or
            self.Suffix is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ParsedPersonName', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ParsedPersonName')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ParsedPersonName':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ParsedPersonName')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ParsedPersonName', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ParsedPersonName'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ParsedPersonName', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Prefix is not None:
            namespaceprefix_ = self.Prefix_nsprefix_ + ':' if (UseCapturedNS_ and self.Prefix_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPrefix>%s</%sPrefix>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Prefix), input_name='Prefix')), namespaceprefix_ , eol_))
        if self.Title is not None:
            namespaceprefix_ = self.Title_nsprefix_ + ':' if (UseCapturedNS_ and self.Title_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTitle>%s</%sTitle>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Title), input_name='Title')), namespaceprefix_ , eol_))
        if self.FirstName is not None:
            namespaceprefix_ = self.FirstName_nsprefix_ + ':' if (UseCapturedNS_ and self.FirstName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFirstName>%s</%sFirstName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FirstName), input_name='FirstName')), namespaceprefix_ , eol_))
        if self.MiddleName is not None:
            namespaceprefix_ = self.MiddleName_nsprefix_ + ':' if (UseCapturedNS_ and self.MiddleName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMiddleName>%s</%sMiddleName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MiddleName), input_name='MiddleName')), namespaceprefix_ , eol_))
        if self.LastName is not None:
            namespaceprefix_ = self.LastName_nsprefix_ + ':' if (UseCapturedNS_ and self.LastName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLastName>%s</%sLastName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LastName), input_name='LastName')), namespaceprefix_ , eol_))
        if self.Suffix is not None:
            namespaceprefix_ = self.Suffix_nsprefix_ + ':' if (UseCapturedNS_ and self.Suffix_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSuffix>%s</%sSuffix>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Suffix), input_name='Suffix')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Prefix':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Prefix')
            value_ = self.gds_validate_string(value_, node, 'Prefix')
            self.Prefix = value_
            self.Prefix_nsprefix_ = child_.prefix
        elif nodeName_ == 'Title':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Title')
            value_ = self.gds_validate_string(value_, node, 'Title')
            self.Title = value_
            self.Title_nsprefix_ = child_.prefix
        elif nodeName_ == 'FirstName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FirstName')
            value_ = self.gds_validate_string(value_, node, 'FirstName')
            self.FirstName = value_
            self.FirstName_nsprefix_ = child_.prefix
        elif nodeName_ == 'MiddleName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MiddleName')
            value_ = self.gds_validate_string(value_, node, 'MiddleName')
            self.MiddleName = value_
            self.MiddleName_nsprefix_ = child_.prefix
        elif nodeName_ == 'LastName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LastName')
            value_ = self.gds_validate_string(value_, node, 'LastName')
            self.LastName = value_
            self.LastName_nsprefix_ = child_.prefix
        elif nodeName_ == 'Suffix':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Suffix')
            value_ = self.gds_validate_string(value_, node, 'Suffix')
            self.Suffix = value_
            self.Suffix_nsprefix_ = child_.prefix
# end class ParsedPersonName


class ParsedPhoneNumber(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CountryCode=None, AreaCode=None, PhoneNumber=None, Extension=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.CountryCode = CountryCode
        self.CountryCode_nsprefix_ = None
        self.AreaCode = AreaCode
        self.AreaCode_nsprefix_ = None
        self.PhoneNumber = PhoneNumber
        self.PhoneNumber_nsprefix_ = None
        self.Extension = Extension
        self.Extension_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ParsedPhoneNumber)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ParsedPhoneNumber.subclass:
            return ParsedPhoneNumber.subclass(*args_, **kwargs_)
        else:
            return ParsedPhoneNumber(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CountryCode(self):
        return self.CountryCode
    def set_CountryCode(self, CountryCode):
        self.CountryCode = CountryCode
    def get_AreaCode(self):
        return self.AreaCode
    def set_AreaCode(self, AreaCode):
        self.AreaCode = AreaCode
    def get_PhoneNumber(self):
        return self.PhoneNumber
    def set_PhoneNumber(self, PhoneNumber):
        self.PhoneNumber = PhoneNumber
    def get_Extension(self):
        return self.Extension
    def set_Extension(self, Extension):
        self.Extension = Extension
    def hasContent_(self):
        if (
            self.CountryCode is not None or
            self.AreaCode is not None or
            self.PhoneNumber is not None or
            self.Extension is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ParsedPhoneNumber', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ParsedPhoneNumber')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ParsedPhoneNumber':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ParsedPhoneNumber')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ParsedPhoneNumber', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ParsedPhoneNumber'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ParsedPhoneNumber', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CountryCode is not None:
            namespaceprefix_ = self.CountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountryCode>%s</%sCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), namespaceprefix_ , eol_))
        if self.AreaCode is not None:
            namespaceprefix_ = self.AreaCode_nsprefix_ + ':' if (UseCapturedNS_ and self.AreaCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAreaCode>%s</%sAreaCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AreaCode), input_name='AreaCode')), namespaceprefix_ , eol_))
        if self.PhoneNumber is not None:
            namespaceprefix_ = self.PhoneNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.PhoneNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPhoneNumber>%s</%sPhoneNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PhoneNumber), input_name='PhoneNumber')), namespaceprefix_ , eol_))
        if self.Extension is not None:
            namespaceprefix_ = self.Extension_nsprefix_ + ':' if (UseCapturedNS_ and self.Extension_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExtension>%s</%sExtension>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Extension), input_name='Extension')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CountryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CountryCode')
            value_ = self.gds_validate_string(value_, node, 'CountryCode')
            self.CountryCode = value_
            self.CountryCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'AreaCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AreaCode')
            value_ = self.gds_validate_string(value_, node, 'AreaCode')
            self.AreaCode = value_
            self.AreaCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'PhoneNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PhoneNumber')
            value_ = self.gds_validate_string(value_, node, 'PhoneNumber')
            self.PhoneNumber = value_
            self.PhoneNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'Extension':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Extension')
            value_ = self.gds_validate_string(value_, node, 'Extension')
            self.Extension = value_
            self.Extension_nsprefix_ = child_.prefix
# end class ParsedPhoneNumber


class ParsedPhoneNumberDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, Usage=None, PhoneNumber=None, CallPermission=None, TextMessagePermission=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.validate_PhoneNumberType(self.Type)
        self.Type_nsprefix_ = "ns"
        self.Usage = Usage
        self.validate_UsageType(self.Usage)
        self.Usage_nsprefix_ = "ns"
        self.PhoneNumber = PhoneNumber
        self.PhoneNumber_nsprefix_ = "ns"
        self.CallPermission = CallPermission
        self.validate_PermissionType(self.CallPermission)
        self.CallPermission_nsprefix_ = "ns"
        self.TextMessagePermission = TextMessagePermission
        self.validate_PermissionType(self.TextMessagePermission)
        self.TextMessagePermission_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ParsedPhoneNumberDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ParsedPhoneNumberDetail.subclass:
            return ParsedPhoneNumberDetail.subclass(*args_, **kwargs_)
        else:
            return ParsedPhoneNumberDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_Usage(self):
        return self.Usage
    def set_Usage(self, Usage):
        self.Usage = Usage
    def get_PhoneNumber(self):
        return self.PhoneNumber
    def set_PhoneNumber(self, PhoneNumber):
        self.PhoneNumber = PhoneNumber
    def get_CallPermission(self):
        return self.CallPermission
    def set_CallPermission(self, CallPermission):
        self.CallPermission = CallPermission
    def get_TextMessagePermission(self):
        return self.TextMessagePermission
    def set_TextMessagePermission(self, TextMessagePermission):
        self.TextMessagePermission = TextMessagePermission
    def validate_PhoneNumberType(self, value):
        result = True
        # Validate type PhoneNumberType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FAX', 'HOME', 'MOBILE', 'PAGER', 'TOLL_FREE', 'WORK']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on PhoneNumberType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_UsageType(self, value):
        result = True
        # Validate type UsageType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['PRIMARY', 'SECONDARY']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on UsageType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_PermissionType(self, value):
        result = True
        # Validate type PermissionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ALLOWED', 'DISALLOWED']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on PermissionType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Type is not None or
            self.Usage is not None or
            self.PhoneNumber is not None or
            self.CallPermission is not None or
            self.TextMessagePermission is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ParsedPhoneNumberDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ParsedPhoneNumberDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ParsedPhoneNumberDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ParsedPhoneNumberDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ParsedPhoneNumberDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ParsedPhoneNumberDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ParsedPhoneNumberDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.Usage is not None:
            namespaceprefix_ = self.Usage_nsprefix_ + ':' if (UseCapturedNS_ and self.Usage_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUsage>%s</%sUsage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Usage), input_name='Usage')), namespaceprefix_ , eol_))
        if self.PhoneNumber is not None:
            namespaceprefix_ = self.PhoneNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.PhoneNumber_nsprefix_) else ''
            self.PhoneNumber.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PhoneNumber', pretty_print=pretty_print)
        if self.CallPermission is not None:
            namespaceprefix_ = self.CallPermission_nsprefix_ + ':' if (UseCapturedNS_ and self.CallPermission_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCallPermission>%s</%sCallPermission>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CallPermission), input_name='CallPermission')), namespaceprefix_ , eol_))
        if self.TextMessagePermission is not None:
            namespaceprefix_ = self.TextMessagePermission_nsprefix_ + ':' if (UseCapturedNS_ and self.TextMessagePermission_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTextMessagePermission>%s</%sTextMessagePermission>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TextMessagePermission), input_name='TextMessagePermission')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type PhoneNumberType
            self.validate_PhoneNumberType(self.Type)
        elif nodeName_ == 'Usage':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Usage')
            value_ = self.gds_validate_string(value_, node, 'Usage')
            self.Usage = value_
            self.Usage_nsprefix_ = child_.prefix
            # validate type UsageType
            self.validate_UsageType(self.Usage)
        elif nodeName_ == 'PhoneNumber':
            obj_ = ParsedPhoneNumber.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PhoneNumber = obj_
            obj_.original_tagname_ = 'PhoneNumber'
        elif nodeName_ == 'CallPermission':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CallPermission')
            value_ = self.gds_validate_string(value_, node, 'CallPermission')
            self.CallPermission = value_
            self.CallPermission_nsprefix_ = child_.prefix
            # validate type PermissionType
            self.validate_PermissionType(self.CallPermission)
        elif nodeName_ == 'TextMessagePermission':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TextMessagePermission')
            value_ = self.gds_validate_string(value_, node, 'TextMessagePermission')
            self.TextMessagePermission = value_
            self.TextMessagePermission_nsprefix_ = child_.prefix
            # validate type PermissionType
            self.validate_PermissionType(self.TextMessagePermission)
# end class ParsedPhoneNumberDetail


class Party(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, AccountNumber=None, Tins=None, Contact=None, Address=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.AccountNumber = AccountNumber
        self.AccountNumber_nsprefix_ = None
        if Tins is None:
            self.Tins = []
        else:
            self.Tins = Tins
        self.Tins_nsprefix_ = "ns"
        self.Contact = Contact
        self.Contact_nsprefix_ = "ns"
        self.Address = Address
        self.Address_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Party)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Party.subclass:
            return Party.subclass(*args_, **kwargs_)
        else:
            return Party(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_AccountNumber(self):
        return self.AccountNumber
    def set_AccountNumber(self, AccountNumber):
        self.AccountNumber = AccountNumber
    def get_Tins(self):
        return self.Tins
    def set_Tins(self, Tins):
        self.Tins = Tins
    def add_Tins(self, value):
        self.Tins.append(value)
    def insert_Tins_at(self, index, value):
        self.Tins.insert(index, value)
    def replace_Tins_at(self, index, value):
        self.Tins[index] = value
    def get_Contact(self):
        return self.Contact
    def set_Contact(self, Contact):
        self.Contact = Contact
    def get_Address(self):
        return self.Address
    def set_Address(self, Address):
        self.Address = Address
    def hasContent_(self):
        if (
            self.AccountNumber is not None or
            self.Tins or
            self.Contact is not None or
            self.Address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Party', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Party')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Party':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Party')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Party', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Party'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Party', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AccountNumber is not None:
            namespaceprefix_ = self.AccountNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.AccountNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAccountNumber>%s</%sAccountNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AccountNumber), input_name='AccountNumber')), namespaceprefix_ , eol_))
        for Tins_ in self.Tins:
            namespaceprefix_ = self.Tins_nsprefix_ + ':' if (UseCapturedNS_ and self.Tins_nsprefix_) else ''
            Tins_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Tins', pretty_print=pretty_print)
        if self.Contact is not None:
            namespaceprefix_ = self.Contact_nsprefix_ + ':' if (UseCapturedNS_ and self.Contact_nsprefix_) else ''
            self.Contact.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Contact', pretty_print=pretty_print)
        if self.Address is not None:
            namespaceprefix_ = self.Address_nsprefix_ + ':' if (UseCapturedNS_ and self.Address_nsprefix_) else ''
            self.Address.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Address', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'AccountNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AccountNumber')
            value_ = self.gds_validate_string(value_, node, 'AccountNumber')
            self.AccountNumber = value_
            self.AccountNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'Tins':
            obj_ = TaxpayerIdentification.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Tins.append(obj_)
            obj_.original_tagname_ = 'Tins'
        elif nodeName_ == 'Contact':
            obj_ = Contact.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Contact = obj_
            obj_.original_tagname_ = 'Contact'
        elif nodeName_ == 'Address':
            obj_ = Address.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
# end class Party


class Payment(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PaymentType=None, Payor=None, CreditCard=None, CreditCardTransactionDetail=None, Amount=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PaymentType = PaymentType
        self.validate_PaymentType(self.PaymentType)
        self.PaymentType_nsprefix_ = "ns"
        self.Payor = Payor
        self.Payor_nsprefix_ = "ns"
        self.CreditCard = CreditCard
        self.CreditCard_nsprefix_ = "ns"
        self.CreditCardTransactionDetail = CreditCardTransactionDetail
        self.CreditCardTransactionDetail_nsprefix_ = "ns"
        self.Amount = Amount
        self.Amount_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Payment)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Payment.subclass:
            return Payment.subclass(*args_, **kwargs_)
        else:
            return Payment(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PaymentType(self):
        return self.PaymentType
    def set_PaymentType(self, PaymentType):
        self.PaymentType = PaymentType
    def get_Payor(self):
        return self.Payor
    def set_Payor(self, Payor):
        self.Payor = Payor
    def get_CreditCard(self):
        return self.CreditCard
    def set_CreditCard(self, CreditCard):
        self.CreditCard = CreditCard
    def get_CreditCardTransactionDetail(self):
        return self.CreditCardTransactionDetail
    def set_CreditCardTransactionDetail(self, CreditCardTransactionDetail):
        self.CreditCardTransactionDetail = CreditCardTransactionDetail
    def get_Amount(self):
        return self.Amount
    def set_Amount(self, Amount):
        self.Amount = Amount
    def validate_PaymentType(self, value):
        result = True
        # Validate type PaymentType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ACCOUNT', 'CASH', 'COLLECT', 'CREDIT_CARD', 'RECIPIENT', 'SENDER', 'THIRD_PARTY']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on PaymentType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.PaymentType is not None or
            self.Payor is not None or
            self.CreditCard is not None or
            self.CreditCardTransactionDetail is not None or
            self.Amount is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Payment', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Payment')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Payment':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Payment')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Payment', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Payment'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Payment', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PaymentType is not None:
            namespaceprefix_ = self.PaymentType_nsprefix_ + ':' if (UseCapturedNS_ and self.PaymentType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPaymentType>%s</%sPaymentType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PaymentType), input_name='PaymentType')), namespaceprefix_ , eol_))
        if self.Payor is not None:
            namespaceprefix_ = self.Payor_nsprefix_ + ':' if (UseCapturedNS_ and self.Payor_nsprefix_) else ''
            self.Payor.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Payor', pretty_print=pretty_print)
        if self.CreditCard is not None:
            namespaceprefix_ = self.CreditCard_nsprefix_ + ':' if (UseCapturedNS_ and self.CreditCard_nsprefix_) else ''
            self.CreditCard.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CreditCard', pretty_print=pretty_print)
        if self.CreditCardTransactionDetail is not None:
            namespaceprefix_ = self.CreditCardTransactionDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.CreditCardTransactionDetail_nsprefix_) else ''
            self.CreditCardTransactionDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CreditCardTransactionDetail', pretty_print=pretty_print)
        if self.Amount is not None:
            namespaceprefix_ = self.Amount_nsprefix_ + ':' if (UseCapturedNS_ and self.Amount_nsprefix_) else ''
            self.Amount.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Amount', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PaymentType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PaymentType')
            value_ = self.gds_validate_string(value_, node, 'PaymentType')
            self.PaymentType = value_
            self.PaymentType_nsprefix_ = child_.prefix
            # validate type PaymentType
            self.validate_PaymentType(self.PaymentType)
        elif nodeName_ == 'Payor':
            obj_ = Payor.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Payor = obj_
            obj_.original_tagname_ = 'Payor'
        elif nodeName_ == 'CreditCard':
            obj_ = CreditCard.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CreditCard = obj_
            obj_.original_tagname_ = 'CreditCard'
        elif nodeName_ == 'CreditCardTransactionDetail':
            obj_ = CreditCardTransactionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CreditCardTransactionDetail = obj_
            obj_.original_tagname_ = 'CreditCardTransactionDetail'
        elif nodeName_ == 'Amount':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Amount = obj_
            obj_.original_tagname_ = 'Amount'
# end class Payment


class Payor(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ResponsibleParty=None, AssociatedAccounts=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ResponsibleParty = ResponsibleParty
        self.ResponsibleParty_nsprefix_ = "ns"
        if AssociatedAccounts is None:
            self.AssociatedAccounts = []
        else:
            self.AssociatedAccounts = AssociatedAccounts
        self.AssociatedAccounts_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Payor)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Payor.subclass:
            return Payor.subclass(*args_, **kwargs_)
        else:
            return Payor(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ResponsibleParty(self):
        return self.ResponsibleParty
    def set_ResponsibleParty(self, ResponsibleParty):
        self.ResponsibleParty = ResponsibleParty
    def get_AssociatedAccounts(self):
        return self.AssociatedAccounts
    def set_AssociatedAccounts(self, AssociatedAccounts):
        self.AssociatedAccounts = AssociatedAccounts
    def add_AssociatedAccounts(self, value):
        self.AssociatedAccounts.append(value)
    def insert_AssociatedAccounts_at(self, index, value):
        self.AssociatedAccounts.insert(index, value)
    def replace_AssociatedAccounts_at(self, index, value):
        self.AssociatedAccounts[index] = value
    def hasContent_(self):
        if (
            self.ResponsibleParty is not None or
            self.AssociatedAccounts
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Payor', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Payor')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Payor':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Payor')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Payor', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Payor'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Payor', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ResponsibleParty is not None:
            namespaceprefix_ = self.ResponsibleParty_nsprefix_ + ':' if (UseCapturedNS_ and self.ResponsibleParty_nsprefix_) else ''
            self.ResponsibleParty.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ResponsibleParty', pretty_print=pretty_print)
        for AssociatedAccounts_ in self.AssociatedAccounts:
            namespaceprefix_ = self.AssociatedAccounts_nsprefix_ + ':' if (UseCapturedNS_ and self.AssociatedAccounts_nsprefix_) else ''
            AssociatedAccounts_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AssociatedAccounts', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ResponsibleParty':
            obj_ = Party.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ResponsibleParty = obj_
            obj_.original_tagname_ = 'ResponsibleParty'
        elif nodeName_ == 'AssociatedAccounts':
            obj_ = AssociatedAccount.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AssociatedAccounts.append(obj_)
            obj_.original_tagname_ = 'AssociatedAccounts'
# end class Payor


class PendingShipmentDetail(GeneratedsSuper):
    """This information describes the kind of pending shipment being
    requested."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, ExpirationDate=None, EmailLabelDetail=None, ProcessingOptions=None, RecommendedDocumentSpecification=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.validate_PendingShipmentType(self.Type)
        self.Type_nsprefix_ = "ns"
        if isinstance(ExpirationDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ExpirationDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ExpirationDate
        self.ExpirationDate = initvalue_
        self.ExpirationDate_nsprefix_ = None
        self.EmailLabelDetail = EmailLabelDetail
        self.EmailLabelDetail_nsprefix_ = "ns"
        self.ProcessingOptions = ProcessingOptions
        self.ProcessingOptions_nsprefix_ = "ns"
        self.RecommendedDocumentSpecification = RecommendedDocumentSpecification
        self.RecommendedDocumentSpecification_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PendingShipmentDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PendingShipmentDetail.subclass:
            return PendingShipmentDetail.subclass(*args_, **kwargs_)
        else:
            return PendingShipmentDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_ExpirationDate(self):
        return self.ExpirationDate
    def set_ExpirationDate(self, ExpirationDate):
        self.ExpirationDate = ExpirationDate
    def get_EmailLabelDetail(self):
        return self.EmailLabelDetail
    def set_EmailLabelDetail(self, EmailLabelDetail):
        self.EmailLabelDetail = EmailLabelDetail
    def get_ProcessingOptions(self):
        return self.ProcessingOptions
    def set_ProcessingOptions(self, ProcessingOptions):
        self.ProcessingOptions = ProcessingOptions
    def get_RecommendedDocumentSpecification(self):
        return self.RecommendedDocumentSpecification
    def set_RecommendedDocumentSpecification(self, RecommendedDocumentSpecification):
        self.RecommendedDocumentSpecification = RecommendedDocumentSpecification
    def validate_PendingShipmentType(self, value):
        result = True
        # Validate type PendingShipmentType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['EMAIL']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on PendingShipmentType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Type is not None or
            self.ExpirationDate is not None or
            self.EmailLabelDetail is not None or
            self.ProcessingOptions is not None or
            self.RecommendedDocumentSpecification is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PendingShipmentDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PendingShipmentDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PendingShipmentDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PendingShipmentDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PendingShipmentDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PendingShipmentDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PendingShipmentDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.ExpirationDate is not None:
            namespaceprefix_ = self.ExpirationDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ExpirationDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExpirationDate>%s</%sExpirationDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ExpirationDate, input_name='ExpirationDate'), namespaceprefix_ , eol_))
        if self.EmailLabelDetail is not None:
            namespaceprefix_ = self.EmailLabelDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.EmailLabelDetail_nsprefix_) else ''
            self.EmailLabelDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='EmailLabelDetail', pretty_print=pretty_print)
        if self.ProcessingOptions is not None:
            namespaceprefix_ = self.ProcessingOptions_nsprefix_ + ':' if (UseCapturedNS_ and self.ProcessingOptions_nsprefix_) else ''
            self.ProcessingOptions.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ProcessingOptions', pretty_print=pretty_print)
        if self.RecommendedDocumentSpecification is not None:
            namespaceprefix_ = self.RecommendedDocumentSpecification_nsprefix_ + ':' if (UseCapturedNS_ and self.RecommendedDocumentSpecification_nsprefix_) else ''
            self.RecommendedDocumentSpecification.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RecommendedDocumentSpecification', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type PendingShipmentType
            self.validate_PendingShipmentType(self.Type)
        elif nodeName_ == 'ExpirationDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ExpirationDate = dval_
            self.ExpirationDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'EmailLabelDetail':
            obj_ = EMailLabelDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.EmailLabelDetail = obj_
            obj_.original_tagname_ = 'EmailLabelDetail'
        elif nodeName_ == 'ProcessingOptions':
            obj_ = PendingShipmentProcessingOptionsRequested.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ProcessingOptions = obj_
            obj_.original_tagname_ = 'ProcessingOptions'
        elif nodeName_ == 'RecommendedDocumentSpecification':
            obj_ = RecommendedDocumentSpecification.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RecommendedDocumentSpecification = obj_
            obj_.original_tagname_ = 'RecommendedDocumentSpecification'
# end class PendingShipmentDetail


class PendingShipmentProcessingOptionsRequested(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Options=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Options is None:
            self.Options = []
        else:
            self.Options = Options
        self.Options_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PendingShipmentProcessingOptionsRequested)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PendingShipmentProcessingOptionsRequested.subclass:
            return PendingShipmentProcessingOptionsRequested.subclass(*args_, **kwargs_)
        else:
            return PendingShipmentProcessingOptionsRequested(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Options(self):
        return self.Options
    def set_Options(self, Options):
        self.Options = Options
    def add_Options(self, value):
        self.Options.append(value)
    def insert_Options_at(self, index, value):
        self.Options.insert(index, value)
    def replace_Options_at(self, index, value):
        self.Options[index] = value
    def validate_PendingShipmentProcessingOptionType(self, value):
        result = True
        # Validate type PendingShipmentProcessingOptionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ALLOW_MODIFICATIONS']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on PendingShipmentProcessingOptionType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Options
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PendingShipmentProcessingOptionsRequested', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PendingShipmentProcessingOptionsRequested')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PendingShipmentProcessingOptionsRequested':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PendingShipmentProcessingOptionsRequested')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PendingShipmentProcessingOptionsRequested', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PendingShipmentProcessingOptionsRequested'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PendingShipmentProcessingOptionsRequested', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Options_ in self.Options:
            namespaceprefix_ = self.Options_nsprefix_ + ':' if (UseCapturedNS_ and self.Options_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOptions>%s</%sOptions>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Options_), input_name='Options')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Options':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Options')
            value_ = self.gds_validate_string(value_, node, 'Options')
            self.Options.append(value_)
            self.Options_nsprefix_ = child_.prefix
            # validate type PendingShipmentProcessingOptionType
            self.validate_PendingShipmentProcessingOptionType(self.Options[-1])
# end class PendingShipmentProcessingOptionsRequested


class PickupDetail(GeneratedsSuper):
    """This class describes the pickup characteristics of a shipment (e.g. for
    use in a tag request)."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ReadyDateTime=None, LatestPickupDateTime=None, CourierInstructions=None, RequestType=None, RequestSource=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if isinstance(ReadyDateTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ReadyDateTime, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = ReadyDateTime
        self.ReadyDateTime = initvalue_
        self.ReadyDateTime_nsprefix_ = None
        if isinstance(LatestPickupDateTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(LatestPickupDateTime, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = LatestPickupDateTime
        self.LatestPickupDateTime = initvalue_
        self.LatestPickupDateTime_nsprefix_ = None
        self.CourierInstructions = CourierInstructions
        self.CourierInstructions_nsprefix_ = None
        self.RequestType = RequestType
        self.validate_PickupRequestType(self.RequestType)
        self.RequestType_nsprefix_ = "ns"
        self.RequestSource = RequestSource
        self.validate_PickupRequestSourceType(self.RequestSource)
        self.RequestSource_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PickupDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PickupDetail.subclass:
            return PickupDetail.subclass(*args_, **kwargs_)
        else:
            return PickupDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ReadyDateTime(self):
        return self.ReadyDateTime
    def set_ReadyDateTime(self, ReadyDateTime):
        self.ReadyDateTime = ReadyDateTime
    def get_LatestPickupDateTime(self):
        return self.LatestPickupDateTime
    def set_LatestPickupDateTime(self, LatestPickupDateTime):
        self.LatestPickupDateTime = LatestPickupDateTime
    def get_CourierInstructions(self):
        return self.CourierInstructions
    def set_CourierInstructions(self, CourierInstructions):
        self.CourierInstructions = CourierInstructions
    def get_RequestType(self):
        return self.RequestType
    def set_RequestType(self, RequestType):
        self.RequestType = RequestType
    def get_RequestSource(self):
        return self.RequestSource
    def set_RequestSource(self, RequestSource):
        self.RequestSource = RequestSource
    def validate_PickupRequestType(self, value):
        result = True
        # Validate type PickupRequestType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FUTURE_DAY', 'SAME_DAY']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on PickupRequestType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_PickupRequestSourceType(self, value):
        result = True
        # Validate type PickupRequestSourceType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['AUTOMATION', 'CUSTOMER_SERVICE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on PickupRequestSourceType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.ReadyDateTime is not None or
            self.LatestPickupDateTime is not None or
            self.CourierInstructions is not None or
            self.RequestType is not None or
            self.RequestSource is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PickupDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PickupDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PickupDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PickupDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PickupDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PickupDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PickupDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReadyDateTime is not None:
            namespaceprefix_ = self.ReadyDateTime_nsprefix_ + ':' if (UseCapturedNS_ and self.ReadyDateTime_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReadyDateTime>%s</%sReadyDateTime>%s' % (namespaceprefix_ , self.gds_format_datetime(self.ReadyDateTime, input_name='ReadyDateTime'), namespaceprefix_ , eol_))
        if self.LatestPickupDateTime is not None:
            namespaceprefix_ = self.LatestPickupDateTime_nsprefix_ + ':' if (UseCapturedNS_ and self.LatestPickupDateTime_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLatestPickupDateTime>%s</%sLatestPickupDateTime>%s' % (namespaceprefix_ , self.gds_format_datetime(self.LatestPickupDateTime, input_name='LatestPickupDateTime'), namespaceprefix_ , eol_))
        if self.CourierInstructions is not None:
            namespaceprefix_ = self.CourierInstructions_nsprefix_ + ':' if (UseCapturedNS_ and self.CourierInstructions_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCourierInstructions>%s</%sCourierInstructions>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CourierInstructions), input_name='CourierInstructions')), namespaceprefix_ , eol_))
        if self.RequestType is not None:
            namespaceprefix_ = self.RequestType_nsprefix_ + ':' if (UseCapturedNS_ and self.RequestType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRequestType>%s</%sRequestType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RequestType), input_name='RequestType')), namespaceprefix_ , eol_))
        if self.RequestSource is not None:
            namespaceprefix_ = self.RequestSource_nsprefix_ + ':' if (UseCapturedNS_ and self.RequestSource_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRequestSource>%s</%sRequestSource>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RequestSource), input_name='RequestSource')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ReadyDateTime':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.ReadyDateTime = dval_
            self.ReadyDateTime_nsprefix_ = child_.prefix
        elif nodeName_ == 'LatestPickupDateTime':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.LatestPickupDateTime = dval_
            self.LatestPickupDateTime_nsprefix_ = child_.prefix
        elif nodeName_ == 'CourierInstructions':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CourierInstructions')
            value_ = self.gds_validate_string(value_, node, 'CourierInstructions')
            self.CourierInstructions = value_
            self.CourierInstructions_nsprefix_ = child_.prefix
        elif nodeName_ == 'RequestType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RequestType')
            value_ = self.gds_validate_string(value_, node, 'RequestType')
            self.RequestType = value_
            self.RequestType_nsprefix_ = child_.prefix
            # validate type PickupRequestType
            self.validate_PickupRequestType(self.RequestType)
        elif nodeName_ == 'RequestSource':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RequestSource')
            value_ = self.gds_validate_string(value_, node, 'RequestSource')
            self.RequestSource = value_
            self.RequestSource_nsprefix_ = child_.prefix
            # validate type PickupRequestSourceType
            self.validate_PickupRequestSourceType(self.RequestSource)
# end class PickupDetail


class PolicyGridManifest(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, GridId=None, Contents=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.GridId = GridId
        self.GridId_nsprefix_ = None
        if Contents is None:
            self.Contents = []
        else:
            self.Contents = Contents
        self.Contents_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PolicyGridManifest)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PolicyGridManifest.subclass:
            return PolicyGridManifest.subclass(*args_, **kwargs_)
        else:
            return PolicyGridManifest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_GridId(self):
        return self.GridId
    def set_GridId(self, GridId):
        self.GridId = GridId
    def get_Contents(self):
        return self.Contents
    def set_Contents(self, Contents):
        self.Contents = Contents
    def add_Contents(self, value):
        self.Contents.append(value)
    def insert_Contents_at(self, index, value):
        self.Contents.insert(index, value)
    def replace_Contents_at(self, index, value):
        self.Contents[index] = value
    def hasContent_(self):
        if (
            self.GridId is not None or
            self.Contents
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PolicyGridManifest', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PolicyGridManifest')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PolicyGridManifest':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PolicyGridManifest')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PolicyGridManifest', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PolicyGridManifest'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PolicyGridManifest', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.GridId is not None:
            namespaceprefix_ = self.GridId_nsprefix_ + ':' if (UseCapturedNS_ and self.GridId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGridId>%s</%sGridId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.GridId), input_name='GridId')), namespaceprefix_ , eol_))
        for Contents_ in self.Contents:
            namespaceprefix_ = self.Contents_nsprefix_ + ':' if (UseCapturedNS_ and self.Contents_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContents>%s</%sContents>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Contents_), input_name='Contents')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'GridId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'GridId')
            value_ = self.gds_validate_string(value_, node, 'GridId')
            self.GridId = value_
            self.GridId_nsprefix_ = child_.prefix
        elif nodeName_ == 'Contents':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Contents')
            value_ = self.gds_validate_string(value_, node, 'Contents')
            self.Contents.append(value_)
            self.Contents_nsprefix_ = child_.prefix
# end class PolicyGridManifest


class PrintedReference(GeneratedsSuper):
    """Represents a reference identifier printed on Freight bills of lading"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, Value=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.validate_PrintedReferenceType(self.Type)
        self.Type_nsprefix_ = "ns"
        self.Value = Value
        self.Value_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PrintedReference)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PrintedReference.subclass:
            return PrintedReference.subclass(*args_, **kwargs_)
        else:
            return PrintedReference(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_Value(self):
        return self.Value
    def set_Value(self, Value):
        self.Value = Value
    def validate_PrintedReferenceType(self, value):
        result = True
        # Validate type PrintedReferenceType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BILL_OF_LADING', 'CONSIGNEE_ID_NUMBER', 'SHIPPER_ID_NUMBER']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on PrintedReferenceType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Type is not None or
            self.Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PrintedReference', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PrintedReference')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PrintedReference':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PrintedReference')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PrintedReference', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PrintedReference'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PrintedReference', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.Value is not None:
            namespaceprefix_ = self.Value_nsprefix_ + ':' if (UseCapturedNS_ and self.Value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValue>%s</%sValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Value), input_name='Value')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type PrintedReferenceType
            self.validate_PrintedReferenceType(self.Type)
        elif nodeName_ == 'Value':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Value')
            value_ = self.gds_validate_string(value_, node, 'Value')
            self.Value = value_
            self.Value_nsprefix_ = child_.prefix
# end class PrintedReference


class PriorityAlertDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, EnhancementTypes=None, Content=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if EnhancementTypes is None:
            self.EnhancementTypes = []
        else:
            self.EnhancementTypes = EnhancementTypes
        self.EnhancementTypes_nsprefix_ = "ns"
        if Content is None:
            self.Content = []
        else:
            self.Content = Content
        self.Content_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PriorityAlertDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PriorityAlertDetail.subclass:
            return PriorityAlertDetail.subclass(*args_, **kwargs_)
        else:
            return PriorityAlertDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_EnhancementTypes(self):
        return self.EnhancementTypes
    def set_EnhancementTypes(self, EnhancementTypes):
        self.EnhancementTypes = EnhancementTypes
    def add_EnhancementTypes(self, value):
        self.EnhancementTypes.append(value)
    def insert_EnhancementTypes_at(self, index, value):
        self.EnhancementTypes.insert(index, value)
    def replace_EnhancementTypes_at(self, index, value):
        self.EnhancementTypes[index] = value
    def get_Content(self):
        return self.Content
    def set_Content(self, Content):
        self.Content = Content
    def add_Content(self, value):
        self.Content.append(value)
    def insert_Content_at(self, index, value):
        self.Content.insert(index, value)
    def replace_Content_at(self, index, value):
        self.Content[index] = value
    def validate_PriorityAlertEnhancementType(self, value):
        result = True
        # Validate type PriorityAlertEnhancementType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['PRIORITY_ALERT_PLUS']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on PriorityAlertEnhancementType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.EnhancementTypes or
            self.Content
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PriorityAlertDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PriorityAlertDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PriorityAlertDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PriorityAlertDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PriorityAlertDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PriorityAlertDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PriorityAlertDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for EnhancementTypes_ in self.EnhancementTypes:
            namespaceprefix_ = self.EnhancementTypes_nsprefix_ + ':' if (UseCapturedNS_ and self.EnhancementTypes_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEnhancementTypes>%s</%sEnhancementTypes>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(EnhancementTypes_), input_name='EnhancementTypes')), namespaceprefix_ , eol_))
        for Content_ in self.Content:
            namespaceprefix_ = self.Content_nsprefix_ + ':' if (UseCapturedNS_ and self.Content_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContent>%s</%sContent>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Content_), input_name='Content')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'EnhancementTypes':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EnhancementTypes')
            value_ = self.gds_validate_string(value_, node, 'EnhancementTypes')
            self.EnhancementTypes.append(value_)
            self.EnhancementTypes_nsprefix_ = child_.prefix
            # validate type PriorityAlertEnhancementType
            self.validate_PriorityAlertEnhancementType(self.EnhancementTypes[-1])
        elif nodeName_ == 'Content':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Content')
            value_ = self.gds_validate_string(value_, node, 'Content')
            self.Content.append(value_)
            self.Content_nsprefix_ = child_.prefix
# end class PriorityAlertDetail


class ProductDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ServiceDescription=None, PackagingDescription=None, AstraServiceDescription=None, Scac=None, AppliedOptions=None, AppliedSubOptions=None, DerivedShipmentSignatureOption=None, DerivedPackageSignatureOptions=None, MaximumWeights=None, MaximumDimensions=None, MaximumLengthPlusGirths=None, MaximumInsuredValue=None, DerivedEtdType=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ServiceDescription = ServiceDescription
        self.ServiceDescription_nsprefix_ = "ns"
        self.PackagingDescription = PackagingDescription
        self.PackagingDescription_nsprefix_ = "ns"
        self.AstraServiceDescription = AstraServiceDescription
        self.AstraServiceDescription_nsprefix_ = None
        self.Scac = Scac
        self.Scac_nsprefix_ = None
        if AppliedOptions is None:
            self.AppliedOptions = []
        else:
            self.AppliedOptions = AppliedOptions
        self.AppliedOptions_nsprefix_ = "ns"
        self.AppliedSubOptions = AppliedSubOptions
        self.AppliedSubOptions_nsprefix_ = "ns"
        self.DerivedShipmentSignatureOption = DerivedShipmentSignatureOption
        self.DerivedShipmentSignatureOption_nsprefix_ = "ns"
        if DerivedPackageSignatureOptions is None:
            self.DerivedPackageSignatureOptions = []
        else:
            self.DerivedPackageSignatureOptions = DerivedPackageSignatureOptions
        self.DerivedPackageSignatureOptions_nsprefix_ = "ns"
        if MaximumWeights is None:
            self.MaximumWeights = []
        else:
            self.MaximumWeights = MaximumWeights
        self.MaximumWeights_nsprefix_ = "ns"
        if MaximumDimensions is None:
            self.MaximumDimensions = []
        else:
            self.MaximumDimensions = MaximumDimensions
        self.MaximumDimensions_nsprefix_ = "ns"
        if MaximumLengthPlusGirths is None:
            self.MaximumLengthPlusGirths = []
        else:
            self.MaximumLengthPlusGirths = MaximumLengthPlusGirths
        self.MaximumLengthPlusGirths_nsprefix_ = "ns"
        self.MaximumInsuredValue = MaximumInsuredValue
        self.MaximumInsuredValue_nsprefix_ = "ns"
        self.DerivedEtdType = DerivedEtdType
        self.validate_CompletedEtdType(self.DerivedEtdType)
        self.DerivedEtdType_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductDetail.subclass:
            return ProductDetail.subclass(*args_, **kwargs_)
        else:
            return ProductDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ServiceDescription(self):
        return self.ServiceDescription
    def set_ServiceDescription(self, ServiceDescription):
        self.ServiceDescription = ServiceDescription
    def get_PackagingDescription(self):
        return self.PackagingDescription
    def set_PackagingDescription(self, PackagingDescription):
        self.PackagingDescription = PackagingDescription
    def get_AstraServiceDescription(self):
        return self.AstraServiceDescription
    def set_AstraServiceDescription(self, AstraServiceDescription):
        self.AstraServiceDescription = AstraServiceDescription
    def get_Scac(self):
        return self.Scac
    def set_Scac(self, Scac):
        self.Scac = Scac
    def get_AppliedOptions(self):
        return self.AppliedOptions
    def set_AppliedOptions(self, AppliedOptions):
        self.AppliedOptions = AppliedOptions
    def add_AppliedOptions(self, value):
        self.AppliedOptions.append(value)
    def insert_AppliedOptions_at(self, index, value):
        self.AppliedOptions.insert(index, value)
    def replace_AppliedOptions_at(self, index, value):
        self.AppliedOptions[index] = value
    def get_AppliedSubOptions(self):
        return self.AppliedSubOptions
    def set_AppliedSubOptions(self, AppliedSubOptions):
        self.AppliedSubOptions = AppliedSubOptions
    def get_DerivedShipmentSignatureOption(self):
        return self.DerivedShipmentSignatureOption
    def set_DerivedShipmentSignatureOption(self, DerivedShipmentSignatureOption):
        self.DerivedShipmentSignatureOption = DerivedShipmentSignatureOption
    def get_DerivedPackageSignatureOptions(self):
        return self.DerivedPackageSignatureOptions
    def set_DerivedPackageSignatureOptions(self, DerivedPackageSignatureOptions):
        self.DerivedPackageSignatureOptions = DerivedPackageSignatureOptions
    def add_DerivedPackageSignatureOptions(self, value):
        self.DerivedPackageSignatureOptions.append(value)
    def insert_DerivedPackageSignatureOptions_at(self, index, value):
        self.DerivedPackageSignatureOptions.insert(index, value)
    def replace_DerivedPackageSignatureOptions_at(self, index, value):
        self.DerivedPackageSignatureOptions[index] = value
    def get_MaximumWeights(self):
        return self.MaximumWeights
    def set_MaximumWeights(self, MaximumWeights):
        self.MaximumWeights = MaximumWeights
    def add_MaximumWeights(self, value):
        self.MaximumWeights.append(value)
    def insert_MaximumWeights_at(self, index, value):
        self.MaximumWeights.insert(index, value)
    def replace_MaximumWeights_at(self, index, value):
        self.MaximumWeights[index] = value
    def get_MaximumDimensions(self):
        return self.MaximumDimensions
    def set_MaximumDimensions(self, MaximumDimensions):
        self.MaximumDimensions = MaximumDimensions
    def add_MaximumDimensions(self, value):
        self.MaximumDimensions.append(value)
    def insert_MaximumDimensions_at(self, index, value):
        self.MaximumDimensions.insert(index, value)
    def replace_MaximumDimensions_at(self, index, value):
        self.MaximumDimensions[index] = value
    def get_MaximumLengthPlusGirths(self):
        return self.MaximumLengthPlusGirths
    def set_MaximumLengthPlusGirths(self, MaximumLengthPlusGirths):
        self.MaximumLengthPlusGirths = MaximumLengthPlusGirths
    def add_MaximumLengthPlusGirths(self, value):
        self.MaximumLengthPlusGirths.append(value)
    def insert_MaximumLengthPlusGirths_at(self, index, value):
        self.MaximumLengthPlusGirths.insert(index, value)
    def replace_MaximumLengthPlusGirths_at(self, index, value):
        self.MaximumLengthPlusGirths[index] = value
    def get_MaximumInsuredValue(self):
        return self.MaximumInsuredValue
    def set_MaximumInsuredValue(self, MaximumInsuredValue):
        self.MaximumInsuredValue = MaximumInsuredValue
    def get_DerivedEtdType(self):
        return self.DerivedEtdType
    def set_DerivedEtdType(self, DerivedEtdType):
        self.DerivedEtdType = DerivedEtdType
    def validate_ServiceOptionType(self, value):
        result = True
        # Validate type ServiceOptionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FEDEX_ONE_RATE', 'FREIGHT_GUARANTEE', 'SATURDAY_DELIVERY', 'SMART_POST_ALLOWED_INDICIA', 'SMART_POST_HUB_ID']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ServiceOptionType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_CompletedEtdType(self, value):
        result = True
        # Validate type CompletedEtdType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ELECTRONIC_DOCUMENTS_ONLY', 'ELECTRONIC_DOCUMENTS_WITH_ORIGINALS']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CompletedEtdType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.ServiceDescription is not None or
            self.PackagingDescription is not None or
            self.AstraServiceDescription is not None or
            self.Scac is not None or
            self.AppliedOptions or
            self.AppliedSubOptions is not None or
            self.DerivedShipmentSignatureOption is not None or
            self.DerivedPackageSignatureOptions or
            self.MaximumWeights or
            self.MaximumDimensions or
            self.MaximumLengthPlusGirths or
            self.MaximumInsuredValue is not None or
            self.DerivedEtdType is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ProductDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ProductDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ProductDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ProductDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ProductDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ProductDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ProductDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ServiceDescription is not None:
            namespaceprefix_ = self.ServiceDescription_nsprefix_ + ':' if (UseCapturedNS_ and self.ServiceDescription_nsprefix_) else ''
            self.ServiceDescription.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ServiceDescription', pretty_print=pretty_print)
        if self.PackagingDescription is not None:
            namespaceprefix_ = self.PackagingDescription_nsprefix_ + ':' if (UseCapturedNS_ and self.PackagingDescription_nsprefix_) else ''
            self.PackagingDescription.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PackagingDescription', pretty_print=pretty_print)
        if self.AstraServiceDescription is not None:
            namespaceprefix_ = self.AstraServiceDescription_nsprefix_ + ':' if (UseCapturedNS_ and self.AstraServiceDescription_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAstraServiceDescription>%s</%sAstraServiceDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AstraServiceDescription), input_name='AstraServiceDescription')), namespaceprefix_ , eol_))
        if self.Scac is not None:
            namespaceprefix_ = self.Scac_nsprefix_ + ':' if (UseCapturedNS_ and self.Scac_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sScac>%s</%sScac>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Scac), input_name='Scac')), namespaceprefix_ , eol_))
        for AppliedOptions_ in self.AppliedOptions:
            namespaceprefix_ = self.AppliedOptions_nsprefix_ + ':' if (UseCapturedNS_ and self.AppliedOptions_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAppliedOptions>%s</%sAppliedOptions>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(AppliedOptions_), input_name='AppliedOptions')), namespaceprefix_ , eol_))
        if self.AppliedSubOptions is not None:
            namespaceprefix_ = self.AppliedSubOptions_nsprefix_ + ':' if (UseCapturedNS_ and self.AppliedSubOptions_nsprefix_) else ''
            self.AppliedSubOptions.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AppliedSubOptions', pretty_print=pretty_print)
        if self.DerivedShipmentSignatureOption is not None:
            namespaceprefix_ = self.DerivedShipmentSignatureOption_nsprefix_ + ':' if (UseCapturedNS_ and self.DerivedShipmentSignatureOption_nsprefix_) else ''
            self.DerivedShipmentSignatureOption.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DerivedShipmentSignatureOption', pretty_print=pretty_print)
        for DerivedPackageSignatureOptions_ in self.DerivedPackageSignatureOptions:
            namespaceprefix_ = self.DerivedPackageSignatureOptions_nsprefix_ + ':' if (UseCapturedNS_ and self.DerivedPackageSignatureOptions_nsprefix_) else ''
            DerivedPackageSignatureOptions_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DerivedPackageSignatureOptions', pretty_print=pretty_print)
        for MaximumWeights_ in self.MaximumWeights:
            namespaceprefix_ = self.MaximumWeights_nsprefix_ + ':' if (UseCapturedNS_ and self.MaximumWeights_nsprefix_) else ''
            MaximumWeights_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MaximumWeights', pretty_print=pretty_print)
        for MaximumDimensions_ in self.MaximumDimensions:
            namespaceprefix_ = self.MaximumDimensions_nsprefix_ + ':' if (UseCapturedNS_ and self.MaximumDimensions_nsprefix_) else ''
            MaximumDimensions_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MaximumDimensions', pretty_print=pretty_print)
        for MaximumLengthPlusGirths_ in self.MaximumLengthPlusGirths:
            namespaceprefix_ = self.MaximumLengthPlusGirths_nsprefix_ + ':' if (UseCapturedNS_ and self.MaximumLengthPlusGirths_nsprefix_) else ''
            MaximumLengthPlusGirths_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MaximumLengthPlusGirths', pretty_print=pretty_print)
        if self.MaximumInsuredValue is not None:
            namespaceprefix_ = self.MaximumInsuredValue_nsprefix_ + ':' if (UseCapturedNS_ and self.MaximumInsuredValue_nsprefix_) else ''
            self.MaximumInsuredValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MaximumInsuredValue', pretty_print=pretty_print)
        if self.DerivedEtdType is not None:
            namespaceprefix_ = self.DerivedEtdType_nsprefix_ + ':' if (UseCapturedNS_ and self.DerivedEtdType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDerivedEtdType>%s</%sDerivedEtdType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DerivedEtdType), input_name='DerivedEtdType')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ServiceDescription':
            obj_ = ServiceDescription.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ServiceDescription = obj_
            obj_.original_tagname_ = 'ServiceDescription'
        elif nodeName_ == 'PackagingDescription':
            obj_ = PackagingDescription.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PackagingDescription = obj_
            obj_.original_tagname_ = 'PackagingDescription'
        elif nodeName_ == 'AstraServiceDescription':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AstraServiceDescription')
            value_ = self.gds_validate_string(value_, node, 'AstraServiceDescription')
            self.AstraServiceDescription = value_
            self.AstraServiceDescription_nsprefix_ = child_.prefix
        elif nodeName_ == 'Scac':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Scac')
            value_ = self.gds_validate_string(value_, node, 'Scac')
            self.Scac = value_
            self.Scac_nsprefix_ = child_.prefix
        elif nodeName_ == 'AppliedOptions':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AppliedOptions')
            value_ = self.gds_validate_string(value_, node, 'AppliedOptions')
            self.AppliedOptions.append(value_)
            self.AppliedOptions_nsprefix_ = child_.prefix
            # validate type ServiceOptionType
            self.validate_ServiceOptionType(self.AppliedOptions[-1])
        elif nodeName_ == 'AppliedSubOptions':
            obj_ = ServiceSubOptionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AppliedSubOptions = obj_
            obj_.original_tagname_ = 'AppliedSubOptions'
        elif nodeName_ == 'DerivedShipmentSignatureOption':
            obj_ = SignatureOptionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DerivedShipmentSignatureOption = obj_
            obj_.original_tagname_ = 'DerivedShipmentSignatureOption'
        elif nodeName_ == 'DerivedPackageSignatureOptions':
            obj_ = SignatureOptionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DerivedPackageSignatureOptions.append(obj_)
            obj_.original_tagname_ = 'DerivedPackageSignatureOptions'
        elif nodeName_ == 'MaximumWeights':
            obj_ = Weight.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MaximumWeights.append(obj_)
            obj_.original_tagname_ = 'MaximumWeights'
        elif nodeName_ == 'MaximumDimensions':
            obj_ = Dimensions.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MaximumDimensions.append(obj_)
            obj_.original_tagname_ = 'MaximumDimensions'
        elif nodeName_ == 'MaximumLengthPlusGirths':
            obj_ = LinearMeasure.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MaximumLengthPlusGirths.append(obj_)
            obj_.original_tagname_ = 'MaximumLengthPlusGirths'
        elif nodeName_ == 'MaximumInsuredValue':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MaximumInsuredValue = obj_
            obj_.original_tagname_ = 'MaximumInsuredValue'
        elif nodeName_ == 'DerivedEtdType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DerivedEtdType')
            value_ = self.gds_validate_string(value_, node, 'DerivedEtdType')
            self.DerivedEtdType = value_
            self.DerivedEtdType_nsprefix_ = child_.prefix
            # validate type CompletedEtdType
            self.validate_CompletedEtdType(self.DerivedEtdType)
# end class ProductDetail


class ProductName(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, Encoding=None, Value=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.Type_nsprefix_ = None
        self.Encoding = Encoding
        self.Encoding_nsprefix_ = None
        self.Value = Value
        self.Value_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductName)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductName.subclass:
            return ProductName.subclass(*args_, **kwargs_)
        else:
            return ProductName(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_Encoding(self):
        return self.Encoding
    def set_Encoding(self, Encoding):
        self.Encoding = Encoding
    def get_Value(self):
        return self.Value
    def set_Value(self, Value):
        self.Value = Value
    def hasContent_(self):
        if (
            self.Type is not None or
            self.Encoding is not None or
            self.Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ProductName', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ProductName')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ProductName':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ProductName')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ProductName', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ProductName'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ProductName', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.Encoding is not None:
            namespaceprefix_ = self.Encoding_nsprefix_ + ':' if (UseCapturedNS_ and self.Encoding_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEncoding>%s</%sEncoding>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Encoding), input_name='Encoding')), namespaceprefix_ , eol_))
        if self.Value is not None:
            namespaceprefix_ = self.Value_nsprefix_ + ':' if (UseCapturedNS_ and self.Value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValue>%s</%sValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Value), input_name='Value')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
        elif nodeName_ == 'Encoding':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Encoding')
            value_ = self.gds_validate_string(value_, node, 'Encoding')
            self.Encoding = value_
            self.Encoding_nsprefix_ = child_.prefix
        elif nodeName_ == 'Value':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Value')
            value_ = self.gds_validate_string(value_, node, 'Value')
            self.Value = value_
            self.Value_nsprefix_ = child_.prefix
# end class ProductName


class ProfileContact(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ContactId=None, Type=None, Attributes=None, Name=None, Company=None, Division=None, Department=None, StoreId=None, Gender=None, PhoneNumbers=None, EMailAddressDetails=None, Address=None, AddressAncillaryDetail=None, AddressVerficationOverrideReason=None, CommunicationDetail=None, CustomerReference=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ContactId = ContactId
        self.ContactId_nsprefix_ = None
        self.Type = Type
        self.validate_ProfileContactType(self.Type)
        self.Type_nsprefix_ = "ns"
        if Attributes is None:
            self.Attributes = []
        else:
            self.Attributes = Attributes
        self.Attributes_nsprefix_ = "ns"
        self.Name = Name
        self.Name_nsprefix_ = "ns"
        self.Company = Company
        self.Company_nsprefix_ = None
        self.Division = Division
        self.Division_nsprefix_ = None
        self.Department = Department
        self.Department_nsprefix_ = None
        self.StoreId = StoreId
        self.StoreId_nsprefix_ = None
        self.Gender = Gender
        self.validate_Gender(self.Gender)
        self.Gender_nsprefix_ = "ns"
        if PhoneNumbers is None:
            self.PhoneNumbers = []
        else:
            self.PhoneNumbers = PhoneNumbers
        self.PhoneNumbers_nsprefix_ = "ns"
        if EMailAddressDetails is None:
            self.EMailAddressDetails = []
        else:
            self.EMailAddressDetails = EMailAddressDetails
        self.EMailAddressDetails_nsprefix_ = "ns"
        self.Address = Address
        self.Address_nsprefix_ = "ns"
        self.AddressAncillaryDetail = AddressAncillaryDetail
        self.AddressAncillaryDetail_nsprefix_ = "ns"
        self.AddressVerficationOverrideReason = AddressVerficationOverrideReason
        self.validate_AddressVerificationOverrideReasonType(self.AddressVerficationOverrideReason)
        self.AddressVerficationOverrideReason_nsprefix_ = "ns"
        self.CommunicationDetail = CommunicationDetail
        self.CommunicationDetail_nsprefix_ = "ns"
        self.CustomerReference = CustomerReference
        self.CustomerReference_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProfileContact)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProfileContact.subclass:
            return ProfileContact.subclass(*args_, **kwargs_)
        else:
            return ProfileContact(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ContactId(self):
        return self.ContactId
    def set_ContactId(self, ContactId):
        self.ContactId = ContactId
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_Attributes(self):
        return self.Attributes
    def set_Attributes(self, Attributes):
        self.Attributes = Attributes
    def add_Attributes(self, value):
        self.Attributes.append(value)
    def insert_Attributes_at(self, index, value):
        self.Attributes.insert(index, value)
    def replace_Attributes_at(self, index, value):
        self.Attributes[index] = value
    def get_Name(self):
        return self.Name
    def set_Name(self, Name):
        self.Name = Name
    def get_Company(self):
        return self.Company
    def set_Company(self, Company):
        self.Company = Company
    def get_Division(self):
        return self.Division
    def set_Division(self, Division):
        self.Division = Division
    def get_Department(self):
        return self.Department
    def set_Department(self, Department):
        self.Department = Department
    def get_StoreId(self):
        return self.StoreId
    def set_StoreId(self, StoreId):
        self.StoreId = StoreId
    def get_Gender(self):
        return self.Gender
    def set_Gender(self, Gender):
        self.Gender = Gender
    def get_PhoneNumbers(self):
        return self.PhoneNumbers
    def set_PhoneNumbers(self, PhoneNumbers):
        self.PhoneNumbers = PhoneNumbers
    def add_PhoneNumbers(self, value):
        self.PhoneNumbers.append(value)
    def insert_PhoneNumbers_at(self, index, value):
        self.PhoneNumbers.insert(index, value)
    def replace_PhoneNumbers_at(self, index, value):
        self.PhoneNumbers[index] = value
    def get_EMailAddressDetails(self):
        return self.EMailAddressDetails
    def set_EMailAddressDetails(self, EMailAddressDetails):
        self.EMailAddressDetails = EMailAddressDetails
    def add_EMailAddressDetails(self, value):
        self.EMailAddressDetails.append(value)
    def insert_EMailAddressDetails_at(self, index, value):
        self.EMailAddressDetails.insert(index, value)
    def replace_EMailAddressDetails_at(self, index, value):
        self.EMailAddressDetails[index] = value
    def get_Address(self):
        return self.Address
    def set_Address(self, Address):
        self.Address = Address
    def get_AddressAncillaryDetail(self):
        return self.AddressAncillaryDetail
    def set_AddressAncillaryDetail(self, AddressAncillaryDetail):
        self.AddressAncillaryDetail = AddressAncillaryDetail
    def get_AddressVerficationOverrideReason(self):
        return self.AddressVerficationOverrideReason
    def set_AddressVerficationOverrideReason(self, AddressVerficationOverrideReason):
        self.AddressVerficationOverrideReason = AddressVerficationOverrideReason
    def get_CommunicationDetail(self):
        return self.CommunicationDetail
    def set_CommunicationDetail(self, CommunicationDetail):
        self.CommunicationDetail = CommunicationDetail
    def get_CustomerReference(self):
        return self.CustomerReference
    def set_CustomerReference(self, CustomerReference):
        self.CustomerReference = CustomerReference
    def validate_ProfileContactType(self, value):
        result = True
        # Validate type ProfileContactType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['AFTER_HOURS', 'ALIAS', 'BILLING_ACCOUNT', 'BILLING_CONTACT', 'CONTACT', 'OWNER', 'PRIMARY_ACCOUNT', 'PRIMARY_BILLING_ACCOUNT', 'PRIMARY_BILLING_CONTACT', 'PRIMARY_CONTACT_FOR_SHIPPING', 'PRIMARY_SHIPPER_CONTACT', 'RECIPIENT_SERVICES_CONTACT']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ProfileContactType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_ProfileContactAttribute(self, value):
        result = True
        # Validate type ProfileContactAttribute, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['PREFERRED_CONTACT']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ProfileContactAttribute' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_Gender(self, value):
        result = True
        # Validate type Gender, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FEMALE', 'MALE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on Gender' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_AddressVerificationOverrideReasonType(self, value):
        result = True
        # Validate type AddressVerificationOverrideReasonType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CUSTOMER_PREFERENCE', 'CUSTOMER_PROVIDED_PROOF', 'MANUAL_VALIDATION']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on AddressVerificationOverrideReasonType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.ContactId is not None or
            self.Type is not None or
            self.Attributes or
            self.Name is not None or
            self.Company is not None or
            self.Division is not None or
            self.Department is not None or
            self.StoreId is not None or
            self.Gender is not None or
            self.PhoneNumbers or
            self.EMailAddressDetails or
            self.Address is not None or
            self.AddressAncillaryDetail is not None or
            self.AddressVerficationOverrideReason is not None or
            self.CommunicationDetail is not None or
            self.CustomerReference is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ProfileContact', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ProfileContact')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ProfileContact':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ProfileContact')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ProfileContact', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ProfileContact'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ProfileContact', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactId is not None:
            namespaceprefix_ = self.ContactId_nsprefix_ + ':' if (UseCapturedNS_ and self.ContactId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContactId>%s</%sContactId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ContactId), input_name='ContactId')), namespaceprefix_ , eol_))
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        for Attributes_ in self.Attributes:
            namespaceprefix_ = self.Attributes_nsprefix_ + ':' if (UseCapturedNS_ and self.Attributes_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAttributes>%s</%sAttributes>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Attributes_), input_name='Attributes')), namespaceprefix_ , eol_))
        if self.Name is not None:
            namespaceprefix_ = self.Name_nsprefix_ + ':' if (UseCapturedNS_ and self.Name_nsprefix_) else ''
            self.Name.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Name', pretty_print=pretty_print)
        if self.Company is not None:
            namespaceprefix_ = self.Company_nsprefix_ + ':' if (UseCapturedNS_ and self.Company_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCompany>%s</%sCompany>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Company), input_name='Company')), namespaceprefix_ , eol_))
        if self.Division is not None:
            namespaceprefix_ = self.Division_nsprefix_ + ':' if (UseCapturedNS_ and self.Division_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDivision>%s</%sDivision>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Division), input_name='Division')), namespaceprefix_ , eol_))
        if self.Department is not None:
            namespaceprefix_ = self.Department_nsprefix_ + ':' if (UseCapturedNS_ and self.Department_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDepartment>%s</%sDepartment>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Department), input_name='Department')), namespaceprefix_ , eol_))
        if self.StoreId is not None:
            namespaceprefix_ = self.StoreId_nsprefix_ + ':' if (UseCapturedNS_ and self.StoreId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStoreId>%s</%sStoreId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.StoreId), input_name='StoreId')), namespaceprefix_ , eol_))
        if self.Gender is not None:
            namespaceprefix_ = self.Gender_nsprefix_ + ':' if (UseCapturedNS_ and self.Gender_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGender>%s</%sGender>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Gender), input_name='Gender')), namespaceprefix_ , eol_))
        for PhoneNumbers_ in self.PhoneNumbers:
            namespaceprefix_ = self.PhoneNumbers_nsprefix_ + ':' if (UseCapturedNS_ and self.PhoneNumbers_nsprefix_) else ''
            PhoneNumbers_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PhoneNumbers', pretty_print=pretty_print)
        for EMailAddressDetails_ in self.EMailAddressDetails:
            namespaceprefix_ = self.EMailAddressDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.EMailAddressDetails_nsprefix_) else ''
            EMailAddressDetails_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='EMailAddressDetails', pretty_print=pretty_print)
        if self.Address is not None:
            namespaceprefix_ = self.Address_nsprefix_ + ':' if (UseCapturedNS_ and self.Address_nsprefix_) else ''
            self.Address.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Address', pretty_print=pretty_print)
        if self.AddressAncillaryDetail is not None:
            namespaceprefix_ = self.AddressAncillaryDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.AddressAncillaryDetail_nsprefix_) else ''
            self.AddressAncillaryDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AddressAncillaryDetail', pretty_print=pretty_print)
        if self.AddressVerficationOverrideReason is not None:
            namespaceprefix_ = self.AddressVerficationOverrideReason_nsprefix_ + ':' if (UseCapturedNS_ and self.AddressVerficationOverrideReason_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressVerficationOverrideReason>%s</%sAddressVerficationOverrideReason>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AddressVerficationOverrideReason), input_name='AddressVerficationOverrideReason')), namespaceprefix_ , eol_))
        if self.CommunicationDetail is not None:
            namespaceprefix_ = self.CommunicationDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.CommunicationDetail_nsprefix_) else ''
            self.CommunicationDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CommunicationDetail', pretty_print=pretty_print)
        if self.CustomerReference is not None:
            namespaceprefix_ = self.CustomerReference_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomerReference_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCustomerReference>%s</%sCustomerReference>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CustomerReference), input_name='CustomerReference')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ContactId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ContactId')
            value_ = self.gds_validate_string(value_, node, 'ContactId')
            self.ContactId = value_
            self.ContactId_nsprefix_ = child_.prefix
        elif nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type ProfileContactType
            self.validate_ProfileContactType(self.Type)
        elif nodeName_ == 'Attributes':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Attributes')
            value_ = self.gds_validate_string(value_, node, 'Attributes')
            self.Attributes.append(value_)
            self.Attributes_nsprefix_ = child_.prefix
            # validate type ProfileContactAttribute
            self.validate_ProfileContactAttribute(self.Attributes[-1])
        elif nodeName_ == 'Name':
            obj_ = ParsedPersonName.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Name = obj_
            obj_.original_tagname_ = 'Name'
        elif nodeName_ == 'Company':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Company')
            value_ = self.gds_validate_string(value_, node, 'Company')
            self.Company = value_
            self.Company_nsprefix_ = child_.prefix
        elif nodeName_ == 'Division':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Division')
            value_ = self.gds_validate_string(value_, node, 'Division')
            self.Division = value_
            self.Division_nsprefix_ = child_.prefix
        elif nodeName_ == 'Department':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Department')
            value_ = self.gds_validate_string(value_, node, 'Department')
            self.Department = value_
            self.Department_nsprefix_ = child_.prefix
        elif nodeName_ == 'StoreId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'StoreId')
            value_ = self.gds_validate_string(value_, node, 'StoreId')
            self.StoreId = value_
            self.StoreId_nsprefix_ = child_.prefix
        elif nodeName_ == 'Gender':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Gender')
            value_ = self.gds_validate_string(value_, node, 'Gender')
            self.Gender = value_
            self.Gender_nsprefix_ = child_.prefix
            # validate type Gender
            self.validate_Gender(self.Gender)
        elif nodeName_ == 'PhoneNumbers':
            obj_ = ParsedPhoneNumberDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PhoneNumbers.append(obj_)
            obj_.original_tagname_ = 'PhoneNumbers'
        elif nodeName_ == 'EMailAddressDetails':
            obj_ = EMailAddressDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.EMailAddressDetails.append(obj_)
            obj_.original_tagname_ = 'EMailAddressDetails'
        elif nodeName_ == 'Address':
            obj_ = Address.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'AddressAncillaryDetail':
            obj_ = AddressAncillaryDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AddressAncillaryDetail = obj_
            obj_.original_tagname_ = 'AddressAncillaryDetail'
        elif nodeName_ == 'AddressVerficationOverrideReason':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AddressVerficationOverrideReason')
            value_ = self.gds_validate_string(value_, node, 'AddressVerficationOverrideReason')
            self.AddressVerficationOverrideReason = value_
            self.AddressVerficationOverrideReason_nsprefix_ = child_.prefix
            # validate type AddressVerificationOverrideReasonType
            self.validate_AddressVerificationOverrideReasonType(self.AddressVerficationOverrideReason)
        elif nodeName_ == 'CommunicationDetail':
            obj_ = CustomerCommunicationDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CommunicationDetail = obj_
            obj_.original_tagname_ = 'CommunicationDetail'
        elif nodeName_ == 'CustomerReference':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CustomerReference')
            value_ = self.gds_validate_string(value_, node, 'CustomerReference')
            self.CustomerReference = value_
            self.CustomerReference_nsprefix_ = child_.prefix
# end class ProfileContact


class ProfileCreditStatusDetail(GeneratedsSuper):
    """Specifies the credit status for a particular profile."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Status=None, CreditReasonCode=None, CashReasonCode=None, CreditRatingCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Status = Status
        self.Status_nsprefix_ = None
        self.CreditReasonCode = CreditReasonCode
        self.CreditReasonCode_nsprefix_ = None
        self.CashReasonCode = CashReasonCode
        self.CashReasonCode_nsprefix_ = None
        self.CreditRatingCode = CreditRatingCode
        self.CreditRatingCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProfileCreditStatusDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProfileCreditStatusDetail.subclass:
            return ProfileCreditStatusDetail.subclass(*args_, **kwargs_)
        else:
            return ProfileCreditStatusDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Status(self):
        return self.Status
    def set_Status(self, Status):
        self.Status = Status
    def get_CreditReasonCode(self):
        return self.CreditReasonCode
    def set_CreditReasonCode(self, CreditReasonCode):
        self.CreditReasonCode = CreditReasonCode
    def get_CashReasonCode(self):
        return self.CashReasonCode
    def set_CashReasonCode(self, CashReasonCode):
        self.CashReasonCode = CashReasonCode
    def get_CreditRatingCode(self):
        return self.CreditRatingCode
    def set_CreditRatingCode(self, CreditRatingCode):
        self.CreditRatingCode = CreditRatingCode
    def hasContent_(self):
        if (
            self.Status is not None or
            self.CreditReasonCode is not None or
            self.CashReasonCode is not None or
            self.CreditRatingCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ProfileCreditStatusDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ProfileCreditStatusDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ProfileCreditStatusDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ProfileCreditStatusDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ProfileCreditStatusDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ProfileCreditStatusDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ProfileCreditStatusDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Status is not None:
            namespaceprefix_ = self.Status_nsprefix_ + ':' if (UseCapturedNS_ and self.Status_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStatus>%s</%sStatus>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Status), input_name='Status')), namespaceprefix_ , eol_))
        if self.CreditReasonCode is not None:
            namespaceprefix_ = self.CreditReasonCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CreditReasonCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCreditReasonCode>%s</%sCreditReasonCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CreditReasonCode), input_name='CreditReasonCode')), namespaceprefix_ , eol_))
        if self.CashReasonCode is not None:
            namespaceprefix_ = self.CashReasonCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CashReasonCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCashReasonCode>%s</%sCashReasonCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CashReasonCode), input_name='CashReasonCode')), namespaceprefix_ , eol_))
        if self.CreditRatingCode is not None:
            namespaceprefix_ = self.CreditRatingCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CreditRatingCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCreditRatingCode>%s</%sCreditRatingCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CreditRatingCode), input_name='CreditRatingCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Status':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Status')
            value_ = self.gds_validate_string(value_, node, 'Status')
            self.Status = value_
            self.Status_nsprefix_ = child_.prefix
        elif nodeName_ == 'CreditReasonCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CreditReasonCode')
            value_ = self.gds_validate_string(value_, node, 'CreditReasonCode')
            self.CreditReasonCode = value_
            self.CreditReasonCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'CashReasonCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CashReasonCode')
            value_ = self.gds_validate_string(value_, node, 'CashReasonCode')
            self.CashReasonCode = value_
            self.CashReasonCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'CreditRatingCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CreditRatingCode')
            value_ = self.gds_validate_string(value_, node, 'CreditRatingCode')
            self.CreditRatingCode = value_
            self.CreditRatingCode_nsprefix_ = child_.prefix
# end class ProfileCreditStatusDetail


class RadioactivityDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, TransportIndex=None, SurfaceReading=None, CriticalitySafetyIndex=None, Dimensions=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.TransportIndex = TransportIndex
        self.TransportIndex_nsprefix_ = None
        self.SurfaceReading = SurfaceReading
        self.SurfaceReading_nsprefix_ = None
        self.CriticalitySafetyIndex = CriticalitySafetyIndex
        self.CriticalitySafetyIndex_nsprefix_ = None
        self.Dimensions = Dimensions
        self.Dimensions_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RadioactivityDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RadioactivityDetail.subclass:
            return RadioactivityDetail.subclass(*args_, **kwargs_)
        else:
            return RadioactivityDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_TransportIndex(self):
        return self.TransportIndex
    def set_TransportIndex(self, TransportIndex):
        self.TransportIndex = TransportIndex
    def get_SurfaceReading(self):
        return self.SurfaceReading
    def set_SurfaceReading(self, SurfaceReading):
        self.SurfaceReading = SurfaceReading
    def get_CriticalitySafetyIndex(self):
        return self.CriticalitySafetyIndex
    def set_CriticalitySafetyIndex(self, CriticalitySafetyIndex):
        self.CriticalitySafetyIndex = CriticalitySafetyIndex
    def get_Dimensions(self):
        return self.Dimensions
    def set_Dimensions(self, Dimensions):
        self.Dimensions = Dimensions
    def hasContent_(self):
        if (
            self.TransportIndex is not None or
            self.SurfaceReading is not None or
            self.CriticalitySafetyIndex is not None or
            self.Dimensions is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RadioactivityDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RadioactivityDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RadioactivityDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RadioactivityDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RadioactivityDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RadioactivityDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RadioactivityDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TransportIndex is not None:
            namespaceprefix_ = self.TransportIndex_nsprefix_ + ':' if (UseCapturedNS_ and self.TransportIndex_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransportIndex>%s</%sTransportIndex>%s' % (namespaceprefix_ , self.gds_format_decimal(self.TransportIndex, input_name='TransportIndex'), namespaceprefix_ , eol_))
        if self.SurfaceReading is not None:
            namespaceprefix_ = self.SurfaceReading_nsprefix_ + ':' if (UseCapturedNS_ and self.SurfaceReading_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSurfaceReading>%s</%sSurfaceReading>%s' % (namespaceprefix_ , self.gds_format_decimal(self.SurfaceReading, input_name='SurfaceReading'), namespaceprefix_ , eol_))
        if self.CriticalitySafetyIndex is not None:
            namespaceprefix_ = self.CriticalitySafetyIndex_nsprefix_ + ':' if (UseCapturedNS_ and self.CriticalitySafetyIndex_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCriticalitySafetyIndex>%s</%sCriticalitySafetyIndex>%s' % (namespaceprefix_ , self.gds_format_decimal(self.CriticalitySafetyIndex, input_name='CriticalitySafetyIndex'), namespaceprefix_ , eol_))
        if self.Dimensions is not None:
            namespaceprefix_ = self.Dimensions_nsprefix_ + ':' if (UseCapturedNS_ and self.Dimensions_nsprefix_) else ''
            self.Dimensions.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Dimensions', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'TransportIndex' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'TransportIndex')
            fval_ = self.gds_validate_decimal(fval_, node, 'TransportIndex')
            self.TransportIndex = fval_
            self.TransportIndex_nsprefix_ = child_.prefix
        elif nodeName_ == 'SurfaceReading' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'SurfaceReading')
            fval_ = self.gds_validate_decimal(fval_, node, 'SurfaceReading')
            self.SurfaceReading = fval_
            self.SurfaceReading_nsprefix_ = child_.prefix
        elif nodeName_ == 'CriticalitySafetyIndex' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'CriticalitySafetyIndex')
            fval_ = self.gds_validate_decimal(fval_, node, 'CriticalitySafetyIndex')
            self.CriticalitySafetyIndex = fval_
            self.CriticalitySafetyIndex_nsprefix_ = child_.prefix
        elif nodeName_ == 'Dimensions':
            obj_ = Dimensions.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Dimensions = obj_
            obj_.original_tagname_ = 'Dimensions'
# end class RadioactivityDetail


class RadionuclideActivity(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Value=None, UnitOfMeasure=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Value = Value
        self.Value_nsprefix_ = None
        self.UnitOfMeasure = UnitOfMeasure
        self.validate_RadioactivityUnitOfMeasure(self.UnitOfMeasure)
        self.UnitOfMeasure_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RadionuclideActivity)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RadionuclideActivity.subclass:
            return RadionuclideActivity.subclass(*args_, **kwargs_)
        else:
            return RadionuclideActivity(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Value(self):
        return self.Value
    def set_Value(self, Value):
        self.Value = Value
    def get_UnitOfMeasure(self):
        return self.UnitOfMeasure
    def set_UnitOfMeasure(self, UnitOfMeasure):
        self.UnitOfMeasure = UnitOfMeasure
    def validate_RadioactivityUnitOfMeasure(self, value):
        result = True
        # Validate type RadioactivityUnitOfMeasure, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BQ', 'GBQ', 'KBQ', 'MBQ', 'PBQ', 'TBQ']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on RadioactivityUnitOfMeasure' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Value is not None or
            self.UnitOfMeasure is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RadionuclideActivity', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RadionuclideActivity')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RadionuclideActivity':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RadionuclideActivity')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RadionuclideActivity', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RadionuclideActivity'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RadionuclideActivity', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Value is not None:
            namespaceprefix_ = self.Value_nsprefix_ + ':' if (UseCapturedNS_ and self.Value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValue>%s</%sValue>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Value, input_name='Value'), namespaceprefix_ , eol_))
        if self.UnitOfMeasure is not None:
            namespaceprefix_ = self.UnitOfMeasure_nsprefix_ + ':' if (UseCapturedNS_ and self.UnitOfMeasure_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnitOfMeasure>%s</%sUnitOfMeasure>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.UnitOfMeasure), input_name='UnitOfMeasure')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Value' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Value')
            fval_ = self.gds_validate_decimal(fval_, node, 'Value')
            self.Value = fval_
            self.Value_nsprefix_ = child_.prefix
        elif nodeName_ == 'UnitOfMeasure':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'UnitOfMeasure')
            value_ = self.gds_validate_string(value_, node, 'UnitOfMeasure')
            self.UnitOfMeasure = value_
            self.UnitOfMeasure_nsprefix_ = child_.prefix
            # validate type RadioactivityUnitOfMeasure
            self.validate_RadioactivityUnitOfMeasure(self.UnitOfMeasure)
# end class RadionuclideActivity


class RadionuclideDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Radionuclide=None, Activity=None, ExceptedPackagingIsReportableQuantity=None, PhysicalForm=None, ChemicalForm=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Radionuclide = Radionuclide
        self.Radionuclide_nsprefix_ = None
        self.Activity = Activity
        self.Activity_nsprefix_ = "ns"
        self.ExceptedPackagingIsReportableQuantity = ExceptedPackagingIsReportableQuantity
        self.ExceptedPackagingIsReportableQuantity_nsprefix_ = None
        self.PhysicalForm = PhysicalForm
        self.validate_PhysicalFormType(self.PhysicalForm)
        self.PhysicalForm_nsprefix_ = "ns"
        self.ChemicalForm = ChemicalForm
        self.ChemicalForm_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RadionuclideDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RadionuclideDetail.subclass:
            return RadionuclideDetail.subclass(*args_, **kwargs_)
        else:
            return RadionuclideDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Radionuclide(self):
        return self.Radionuclide
    def set_Radionuclide(self, Radionuclide):
        self.Radionuclide = Radionuclide
    def get_Activity(self):
        return self.Activity
    def set_Activity(self, Activity):
        self.Activity = Activity
    def get_ExceptedPackagingIsReportableQuantity(self):
        return self.ExceptedPackagingIsReportableQuantity
    def set_ExceptedPackagingIsReportableQuantity(self, ExceptedPackagingIsReportableQuantity):
        self.ExceptedPackagingIsReportableQuantity = ExceptedPackagingIsReportableQuantity
    def get_PhysicalForm(self):
        return self.PhysicalForm
    def set_PhysicalForm(self, PhysicalForm):
        self.PhysicalForm = PhysicalForm
    def get_ChemicalForm(self):
        return self.ChemicalForm
    def set_ChemicalForm(self, ChemicalForm):
        self.ChemicalForm = ChemicalForm
    def validate_PhysicalFormType(self, value):
        result = True
        # Validate type PhysicalFormType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['GAS', 'LIQUID', 'SOLID', 'SPECIAL']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on PhysicalFormType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Radionuclide is not None or
            self.Activity is not None or
            self.ExceptedPackagingIsReportableQuantity is not None or
            self.PhysicalForm is not None or
            self.ChemicalForm is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RadionuclideDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RadionuclideDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RadionuclideDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RadionuclideDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RadionuclideDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RadionuclideDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RadionuclideDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Radionuclide is not None:
            namespaceprefix_ = self.Radionuclide_nsprefix_ + ':' if (UseCapturedNS_ and self.Radionuclide_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRadionuclide>%s</%sRadionuclide>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Radionuclide), input_name='Radionuclide')), namespaceprefix_ , eol_))
        if self.Activity is not None:
            namespaceprefix_ = self.Activity_nsprefix_ + ':' if (UseCapturedNS_ and self.Activity_nsprefix_) else ''
            self.Activity.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Activity', pretty_print=pretty_print)
        if self.ExceptedPackagingIsReportableQuantity is not None:
            namespaceprefix_ = self.ExceptedPackagingIsReportableQuantity_nsprefix_ + ':' if (UseCapturedNS_ and self.ExceptedPackagingIsReportableQuantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExceptedPackagingIsReportableQuantity>%s</%sExceptedPackagingIsReportableQuantity>%s' % (namespaceprefix_ , self.gds_format_boolean(self.ExceptedPackagingIsReportableQuantity, input_name='ExceptedPackagingIsReportableQuantity'), namespaceprefix_ , eol_))
        if self.PhysicalForm is not None:
            namespaceprefix_ = self.PhysicalForm_nsprefix_ + ':' if (UseCapturedNS_ and self.PhysicalForm_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPhysicalForm>%s</%sPhysicalForm>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PhysicalForm), input_name='PhysicalForm')), namespaceprefix_ , eol_))
        if self.ChemicalForm is not None:
            namespaceprefix_ = self.ChemicalForm_nsprefix_ + ':' if (UseCapturedNS_ and self.ChemicalForm_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sChemicalForm>%s</%sChemicalForm>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ChemicalForm), input_name='ChemicalForm')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Radionuclide':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Radionuclide')
            value_ = self.gds_validate_string(value_, node, 'Radionuclide')
            self.Radionuclide = value_
            self.Radionuclide_nsprefix_ = child_.prefix
        elif nodeName_ == 'Activity':
            obj_ = RadionuclideActivity.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Activity = obj_
            obj_.original_tagname_ = 'Activity'
        elif nodeName_ == 'ExceptedPackagingIsReportableQuantity':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'ExceptedPackagingIsReportableQuantity')
            ival_ = self.gds_validate_boolean(ival_, node, 'ExceptedPackagingIsReportableQuantity')
            self.ExceptedPackagingIsReportableQuantity = ival_
            self.ExceptedPackagingIsReportableQuantity_nsprefix_ = child_.prefix
        elif nodeName_ == 'PhysicalForm':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PhysicalForm')
            value_ = self.gds_validate_string(value_, node, 'PhysicalForm')
            self.PhysicalForm = value_
            self.PhysicalForm_nsprefix_ = child_.prefix
            # validate type PhysicalFormType
            self.validate_PhysicalFormType(self.PhysicalForm)
        elif nodeName_ == 'ChemicalForm':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ChemicalForm')
            value_ = self.gds_validate_string(value_, node, 'ChemicalForm')
            self.ChemicalForm = value_
            self.ChemicalForm_nsprefix_ = child_.prefix
# end class RadionuclideDetail


class RecipientCustomsId(GeneratedsSuper):
    """Specifies how the recipient is identified for customs purposes; the
    requirements on this information vary with destination country."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, Value=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.validate_RecipientCustomsIdType(self.Type)
        self.Type_nsprefix_ = "ns"
        self.Value = Value
        self.Value_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RecipientCustomsId)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RecipientCustomsId.subclass:
            return RecipientCustomsId.subclass(*args_, **kwargs_)
        else:
            return RecipientCustomsId(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_Value(self):
        return self.Value
    def set_Value(self, Value):
        self.Value = Value
    def validate_RecipientCustomsIdType(self, value):
        result = True
        # Validate type RecipientCustomsIdType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['COMPANY', 'INDIVIDUAL', 'PASSPORT']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on RecipientCustomsIdType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Type is not None or
            self.Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RecipientCustomsId', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RecipientCustomsId')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RecipientCustomsId':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RecipientCustomsId')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RecipientCustomsId', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RecipientCustomsId'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RecipientCustomsId', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.Value is not None:
            namespaceprefix_ = self.Value_nsprefix_ + ':' if (UseCapturedNS_ and self.Value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValue>%s</%sValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Value), input_name='Value')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type RecipientCustomsIdType
            self.validate_RecipientCustomsIdType(self.Type)
        elif nodeName_ == 'Value':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Value')
            value_ = self.gds_validate_string(value_, node, 'Value')
            self.Value = value_
            self.Value_nsprefix_ = child_.prefix
# end class RecipientCustomsId


class RecipientProfile(GeneratedsSuper):
    """Specifies the details for a Recipient profile."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Contacts=None, AlternateFirstNames=None, AuthorizedName=None, AuthorizedAddresses=None, AlternateCreditCardSource=None, AccountStatus=None, ProfileStatus=None, AccountTypes=None, ExpirationDate=None, ExpirationReason=None, CreationDate=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Contacts is None:
            self.Contacts = []
        else:
            self.Contacts = Contacts
        self.Contacts_nsprefix_ = "ns"
        if AlternateFirstNames is None:
            self.AlternateFirstNames = []
        else:
            self.AlternateFirstNames = AlternateFirstNames
        self.AlternateFirstNames_nsprefix_ = None
        self.AuthorizedName = AuthorizedName
        self.AuthorizedName_nsprefix_ = "ns"
        if AuthorizedAddresses is None:
            self.AuthorizedAddresses = []
        else:
            self.AuthorizedAddresses = AuthorizedAddresses
        self.AuthorizedAddresses_nsprefix_ = "ns"
        self.AlternateCreditCardSource = AlternateCreditCardSource
        self.validate_ProfileType(self.AlternateCreditCardSource)
        self.AlternateCreditCardSource_nsprefix_ = "ns"
        self.AccountStatus = AccountStatus
        self.validate_CustomerAccountStatusType(self.AccountStatus)
        self.AccountStatus_nsprefix_ = "ns"
        self.ProfileStatus = ProfileStatus
        self.validate_StatusType(self.ProfileStatus)
        self.ProfileStatus_nsprefix_ = "ns"
        if AccountTypes is None:
            self.AccountTypes = []
        else:
            self.AccountTypes = AccountTypes
        self.AccountTypes_nsprefix_ = "ns"
        if isinstance(ExpirationDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ExpirationDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ExpirationDate
        self.ExpirationDate = initvalue_
        self.ExpirationDate_nsprefix_ = None
        self.ExpirationReason = ExpirationReason
        self.ExpirationReason_nsprefix_ = None
        if isinstance(CreationDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(CreationDate, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = CreationDate
        self.CreationDate = initvalue_
        self.CreationDate_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RecipientProfile)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RecipientProfile.subclass:
            return RecipientProfile.subclass(*args_, **kwargs_)
        else:
            return RecipientProfile(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Contacts(self):
        return self.Contacts
    def set_Contacts(self, Contacts):
        self.Contacts = Contacts
    def add_Contacts(self, value):
        self.Contacts.append(value)
    def insert_Contacts_at(self, index, value):
        self.Contacts.insert(index, value)
    def replace_Contacts_at(self, index, value):
        self.Contacts[index] = value
    def get_AlternateFirstNames(self):
        return self.AlternateFirstNames
    def set_AlternateFirstNames(self, AlternateFirstNames):
        self.AlternateFirstNames = AlternateFirstNames
    def add_AlternateFirstNames(self, value):
        self.AlternateFirstNames.append(value)
    def insert_AlternateFirstNames_at(self, index, value):
        self.AlternateFirstNames.insert(index, value)
    def replace_AlternateFirstNames_at(self, index, value):
        self.AlternateFirstNames[index] = value
    def get_AuthorizedName(self):
        return self.AuthorizedName
    def set_AuthorizedName(self, AuthorizedName):
        self.AuthorizedName = AuthorizedName
    def get_AuthorizedAddresses(self):
        return self.AuthorizedAddresses
    def set_AuthorizedAddresses(self, AuthorizedAddresses):
        self.AuthorizedAddresses = AuthorizedAddresses
    def add_AuthorizedAddresses(self, value):
        self.AuthorizedAddresses.append(value)
    def insert_AuthorizedAddresses_at(self, index, value):
        self.AuthorizedAddresses.insert(index, value)
    def replace_AuthorizedAddresses_at(self, index, value):
        self.AuthorizedAddresses[index] = value
    def get_AlternateCreditCardSource(self):
        return self.AlternateCreditCardSource
    def set_AlternateCreditCardSource(self, AlternateCreditCardSource):
        self.AlternateCreditCardSource = AlternateCreditCardSource
    def get_AccountStatus(self):
        return self.AccountStatus
    def set_AccountStatus(self, AccountStatus):
        self.AccountStatus = AccountStatus
    def get_ProfileStatus(self):
        return self.ProfileStatus
    def set_ProfileStatus(self, ProfileStatus):
        self.ProfileStatus = ProfileStatus
    def get_AccountTypes(self):
        return self.AccountTypes
    def set_AccountTypes(self, AccountTypes):
        self.AccountTypes = AccountTypes
    def add_AccountTypes(self, value):
        self.AccountTypes.append(value)
    def insert_AccountTypes_at(self, index, value):
        self.AccountTypes.insert(index, value)
    def replace_AccountTypes_at(self, index, value):
        self.AccountTypes[index] = value
    def get_ExpirationDate(self):
        return self.ExpirationDate
    def set_ExpirationDate(self, ExpirationDate):
        self.ExpirationDate = ExpirationDate
    def get_ExpirationReason(self):
        return self.ExpirationReason
    def set_ExpirationReason(self, ExpirationReason):
        self.ExpirationReason = ExpirationReason
    def get_CreationDate(self):
        return self.CreationDate
    def set_CreationDate(self, CreationDate):
        self.CreationDate = CreationDate
    def validate_ProfileType(self, value):
        result = True
        # Validate type ProfileType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ENTERPRISE', 'EXPRESS', 'FREIGHT', 'OFFICE', 'RECIPIENT', 'TECH_CONNECT', 'TRADE_NETWORKS']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ProfileType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_CustomerAccountStatusType(self, value):
        result = True
        # Validate type CustomerAccountStatusType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ACTIVE', 'CASH', 'DEACTIVATED']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CustomerAccountStatusType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_StatusType(self, value):
        result = True
        # Validate type StatusType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ACTIVE', 'EXPIRED', 'EXPIRED_WITHIN_GRACE_PERIOD', 'PENDING_RENEWAL']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on StatusType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_CustomerAccountType(self, value):
        result = True
        # Validate type CustomerAccountType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ACTIVATION_DESK', 'AIR_CARGO', 'AIR_CARGO_BILLING', 'ANY', 'BILLING', 'BROKER', 'BUSINESS', 'CATALOG_SHIPPER', 'CITY_CENTER', 'EMPLOYEE', 'FREIGHT_FORWARDER', 'GLOBAL_SERVICE_PROVIDER', 'GOVERNMENT', 'INDIVIDUAL', 'INTERLINE_CUSTOMER', 'INTERNAL_CONTROL_ACCOUNT', 'INTERNAL_TESTING_ACCOUNT', 'INVOICING', 'JOINT_VENTURE_PARTNER', 'KINKOS_RETAIL_OPERATIONS', 'MIDDLEMAN', 'NATIONAL', 'NON_INVOICING', 'NON_PROFIT', 'NON_REVENUE', 'OTHER', 'PACKAGE_CONSOLIDATOR', 'POLITICAL_CAMPAIGN', 'RESIDENTIAL_BUSINESS', 'SHIPPER']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CustomerAccountType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Contacts or
            self.AlternateFirstNames or
            self.AuthorizedName is not None or
            self.AuthorizedAddresses or
            self.AlternateCreditCardSource is not None or
            self.AccountStatus is not None or
            self.ProfileStatus is not None or
            self.AccountTypes or
            self.ExpirationDate is not None or
            self.ExpirationReason is not None or
            self.CreationDate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RecipientProfile', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RecipientProfile')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RecipientProfile':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RecipientProfile')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RecipientProfile', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RecipientProfile'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RecipientProfile', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Contacts_ in self.Contacts:
            namespaceprefix_ = self.Contacts_nsprefix_ + ':' if (UseCapturedNS_ and self.Contacts_nsprefix_) else ''
            Contacts_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Contacts', pretty_print=pretty_print)
        for AlternateFirstNames_ in self.AlternateFirstNames:
            namespaceprefix_ = self.AlternateFirstNames_nsprefix_ + ':' if (UseCapturedNS_ and self.AlternateFirstNames_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAlternateFirstNames>%s</%sAlternateFirstNames>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(AlternateFirstNames_), input_name='AlternateFirstNames')), namespaceprefix_ , eol_))
        if self.AuthorizedName is not None:
            namespaceprefix_ = self.AuthorizedName_nsprefix_ + ':' if (UseCapturedNS_ and self.AuthorizedName_nsprefix_) else ''
            self.AuthorizedName.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AuthorizedName', pretty_print=pretty_print)
        for AuthorizedAddresses_ in self.AuthorizedAddresses:
            namespaceprefix_ = self.AuthorizedAddresses_nsprefix_ + ':' if (UseCapturedNS_ and self.AuthorizedAddresses_nsprefix_) else ''
            AuthorizedAddresses_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AuthorizedAddresses', pretty_print=pretty_print)
        if self.AlternateCreditCardSource is not None:
            namespaceprefix_ = self.AlternateCreditCardSource_nsprefix_ + ':' if (UseCapturedNS_ and self.AlternateCreditCardSource_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAlternateCreditCardSource>%s</%sAlternateCreditCardSource>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AlternateCreditCardSource), input_name='AlternateCreditCardSource')), namespaceprefix_ , eol_))
        if self.AccountStatus is not None:
            namespaceprefix_ = self.AccountStatus_nsprefix_ + ':' if (UseCapturedNS_ and self.AccountStatus_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAccountStatus>%s</%sAccountStatus>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AccountStatus), input_name='AccountStatus')), namespaceprefix_ , eol_))
        if self.ProfileStatus is not None:
            namespaceprefix_ = self.ProfileStatus_nsprefix_ + ':' if (UseCapturedNS_ and self.ProfileStatus_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProfileStatus>%s</%sProfileStatus>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ProfileStatus), input_name='ProfileStatus')), namespaceprefix_ , eol_))
        for AccountTypes_ in self.AccountTypes:
            namespaceprefix_ = self.AccountTypes_nsprefix_ + ':' if (UseCapturedNS_ and self.AccountTypes_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAccountTypes>%s</%sAccountTypes>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(AccountTypes_), input_name='AccountTypes')), namespaceprefix_ , eol_))
        if self.ExpirationDate is not None:
            namespaceprefix_ = self.ExpirationDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ExpirationDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExpirationDate>%s</%sExpirationDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ExpirationDate, input_name='ExpirationDate'), namespaceprefix_ , eol_))
        if self.ExpirationReason is not None:
            namespaceprefix_ = self.ExpirationReason_nsprefix_ + ':' if (UseCapturedNS_ and self.ExpirationReason_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExpirationReason>%s</%sExpirationReason>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ExpirationReason), input_name='ExpirationReason')), namespaceprefix_ , eol_))
        if self.CreationDate is not None:
            namespaceprefix_ = self.CreationDate_nsprefix_ + ':' if (UseCapturedNS_ and self.CreationDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCreationDate>%s</%sCreationDate>%s' % (namespaceprefix_ , self.gds_format_datetime(self.CreationDate, input_name='CreationDate'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Contacts':
            obj_ = ProfileContact.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Contacts.append(obj_)
            obj_.original_tagname_ = 'Contacts'
        elif nodeName_ == 'AlternateFirstNames':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AlternateFirstNames')
            value_ = self.gds_validate_string(value_, node, 'AlternateFirstNames')
            self.AlternateFirstNames.append(value_)
            self.AlternateFirstNames_nsprefix_ = child_.prefix
        elif nodeName_ == 'AuthorizedName':
            obj_ = ParsedPersonName.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AuthorizedName = obj_
            obj_.original_tagname_ = 'AuthorizedName'
        elif nodeName_ == 'AuthorizedAddresses':
            obj_ = AuthorizedAddress.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AuthorizedAddresses.append(obj_)
            obj_.original_tagname_ = 'AuthorizedAddresses'
        elif nodeName_ == 'AlternateCreditCardSource':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AlternateCreditCardSource')
            value_ = self.gds_validate_string(value_, node, 'AlternateCreditCardSource')
            self.AlternateCreditCardSource = value_
            self.AlternateCreditCardSource_nsprefix_ = child_.prefix
            # validate type ProfileType
            self.validate_ProfileType(self.AlternateCreditCardSource)
        elif nodeName_ == 'AccountStatus':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AccountStatus')
            value_ = self.gds_validate_string(value_, node, 'AccountStatus')
            self.AccountStatus = value_
            self.AccountStatus_nsprefix_ = child_.prefix
            # validate type CustomerAccountStatusType
            self.validate_CustomerAccountStatusType(self.AccountStatus)
        elif nodeName_ == 'ProfileStatus':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ProfileStatus')
            value_ = self.gds_validate_string(value_, node, 'ProfileStatus')
            self.ProfileStatus = value_
            self.ProfileStatus_nsprefix_ = child_.prefix
            # validate type StatusType
            self.validate_StatusType(self.ProfileStatus)
        elif nodeName_ == 'AccountTypes':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AccountTypes')
            value_ = self.gds_validate_string(value_, node, 'AccountTypes')
            self.AccountTypes.append(value_)
            self.AccountTypes_nsprefix_ = child_.prefix
            # validate type CustomerAccountType
            self.validate_CustomerAccountType(self.AccountTypes[-1])
        elif nodeName_ == 'ExpirationDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ExpirationDate = dval_
            self.ExpirationDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'ExpirationReason':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ExpirationReason')
            value_ = self.gds_validate_string(value_, node, 'ExpirationReason')
            self.ExpirationReason = value_
            self.ExpirationReason_nsprefix_ = child_.prefix
        elif nodeName_ == 'CreationDate':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.CreationDate = dval_
            self.CreationDate_nsprefix_ = child_.prefix
# end class RecipientProfile


class RecommendedDocumentSpecification(GeneratedsSuper):
    """Specifies the details about documents that are recommended to be
    included with the shipment for ease of shipment processing and
    transportation."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Types=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Types is None:
            self.Types = []
        else:
            self.Types = Types
        self.Types_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RecommendedDocumentSpecification)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RecommendedDocumentSpecification.subclass:
            return RecommendedDocumentSpecification.subclass(*args_, **kwargs_)
        else:
            return RecommendedDocumentSpecification(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Types(self):
        return self.Types
    def set_Types(self, Types):
        self.Types = Types
    def add_Types(self, value):
        self.Types.append(value)
    def insert_Types_at(self, index, value):
        self.Types.insert(index, value)
    def replace_Types_at(self, index, value):
        self.Types[index] = value
    def validate_RecommendedDocumentType(self, value):
        result = True
        # Validate type RecommendedDocumentType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ANTIQUE_STATEMENT_EUROPEAN_UNION', 'ANTIQUE_STATEMENT_UNITED_STATES', 'ASSEMBLER_DECLARATION', 'BEARING_WORKSHEET', 'CERTIFICATE_OF_SHIPMENTS_TO_SYRIA', 'COMMERCIAL_INVOICE_FOR_THE_CARIBBEAN_COMMON_MARKET', 'CONIFEROUS_SOLID_WOOD_PACKAGING_MATERIAL_TO_THE_PEOPLES_REPUBLIC_OF_CHINA', 'DECLARATION_FOR_FREE_ENTRY_OF_RETURNED_AMERICAN_PRODUCTS', 'DECLARATION_OF_BIOLOGICAL_STANDARDS', 'DECLARATION_OF_IMPORTED_ELECTRONIC_PRODUCTS_SUBJECT_TO_RADIATION_CONTROL_STANDARD', 'ELECTRONIC_INTEGRATED_CIRCUIT_WORKSHEET', 'FILM_AND_VIDEO_CERTIFICATE', 'INTERIM_FOOTWEAR_INVOICE', 'NAFTA_CERTIFICATE_OF_ORIGIN_CANADA_ENGLISH', 'NAFTA_CERTIFICATE_OF_ORIGIN_CANADA_FRENCH', 'NAFTA_CERTIFICATE_OF_ORIGIN_SPANISH', 'NAFTA_CERTIFICATE_OF_ORIGIN_UNITED_STATES', 'PACKING_LIST', 'PRINTED_CIRCUIT_BOARD_WORKSHEET', 'REPAIRED_WATCH_BREAKOUT_WORKSHEET', 'STATEMENT_REGARDING_THE_IMPORT_OF_RADIO_FREQUENCY_DEVICES', 'TOXIC_SUBSTANCES_CONTROL_ACT', 'UNITED_STATES_CARIBBEAN_BASIN_TRADE_PARTNERSHIP_ACT_CERTIFICATE_OF_ORIGIN_NON_TEXTILES', 'UNITED_STATES_CARIBBEAN_BASIN_TRADE_PARTNERSHIP_ACT_CERTIFICATE_OF_ORIGIN_TEXTILES', 'UNITED_STATES_NEW_WATCH_WORKSHEET', 'UNITED_STATES_WATCH_REPAIR_DECLARATION']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on RecommendedDocumentType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Types
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RecommendedDocumentSpecification', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RecommendedDocumentSpecification')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RecommendedDocumentSpecification':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RecommendedDocumentSpecification')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RecommendedDocumentSpecification', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RecommendedDocumentSpecification'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RecommendedDocumentSpecification', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Types_ in self.Types:
            namespaceprefix_ = self.Types_nsprefix_ + ':' if (UseCapturedNS_ and self.Types_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTypes>%s</%sTypes>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Types_), input_name='Types')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Types':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Types')
            value_ = self.gds_validate_string(value_, node, 'Types')
            self.Types.append(value_)
            self.Types_nsprefix_ = child_.prefix
            # validate type RecommendedDocumentType
            self.validate_RecommendedDocumentType(self.Types[-1])
# end class RecommendedDocumentSpecification


class RegulatoryLabelContentDetail(GeneratedsSuper):
    """Specifies details needed to generate any label artifacts required due to
    regulatory requirements."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, GenerationOptions=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.validate_RegulatoryLabelType(self.Type)
        self.Type_nsprefix_ = "ns"
        if GenerationOptions is None:
            self.GenerationOptions = []
        else:
            self.GenerationOptions = GenerationOptions
        self.GenerationOptions_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RegulatoryLabelContentDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RegulatoryLabelContentDetail.subclass:
            return RegulatoryLabelContentDetail.subclass(*args_, **kwargs_)
        else:
            return RegulatoryLabelContentDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_GenerationOptions(self):
        return self.GenerationOptions
    def set_GenerationOptions(self, GenerationOptions):
        self.GenerationOptions = GenerationOptions
    def add_GenerationOptions(self, value):
        self.GenerationOptions.append(value)
    def insert_GenerationOptions_at(self, index, value):
        self.GenerationOptions.insert(index, value)
    def replace_GenerationOptions_at(self, index, value):
        self.GenerationOptions[index] = value
    def validate_RegulatoryLabelType(self, value):
        result = True
        # Validate type RegulatoryLabelType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ALCOHOL_SHIPMENT_LABEL']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on RegulatoryLabelType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_CustomerSpecifiedLabelGenerationOptionType(self, value):
        result = True
        # Validate type CustomerSpecifiedLabelGenerationOptionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CONTENT_ON_SHIPPING_LABEL_ONLY', 'CONTENT_ON_SHIPPING_LABEL_PREFERRED', 'CONTENT_ON_SUPPLEMENTAL_LABEL_ONLY']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CustomerSpecifiedLabelGenerationOptionType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Type is not None or
            self.GenerationOptions
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RegulatoryLabelContentDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RegulatoryLabelContentDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RegulatoryLabelContentDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RegulatoryLabelContentDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RegulatoryLabelContentDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RegulatoryLabelContentDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RegulatoryLabelContentDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        for GenerationOptions_ in self.GenerationOptions:
            namespaceprefix_ = self.GenerationOptions_nsprefix_ + ':' if (UseCapturedNS_ and self.GenerationOptions_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGenerationOptions>%s</%sGenerationOptions>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(GenerationOptions_), input_name='GenerationOptions')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type RegulatoryLabelType
            self.validate_RegulatoryLabelType(self.Type)
        elif nodeName_ == 'GenerationOptions':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'GenerationOptions')
            value_ = self.gds_validate_string(value_, node, 'GenerationOptions')
            self.GenerationOptions.append(value_)
            self.GenerationOptions_nsprefix_ = child_.prefix
            # validate type CustomerSpecifiedLabelGenerationOptionType
            self.validate_CustomerSpecifiedLabelGenerationOptionType(self.GenerationOptions[-1])
# end class RegulatoryLabelContentDetail


class RequestedDistributionLocation(GeneratedsSuper):
    """Specifies the type and location id of a distribution location used to
    process a consolidation."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Id=None, LocationId=None, LocationNumber=None, LocationContactAndAddress=None, ClearanceNumber=None, InclusionSpecifications=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Id = Id
        self.Id_nsprefix_ = None
        self.LocationId = LocationId
        self.LocationId_nsprefix_ = None
        self.LocationNumber = LocationNumber
        self.LocationNumber_nsprefix_ = None
        self.LocationContactAndAddress = LocationContactAndAddress
        self.LocationContactAndAddress_nsprefix_ = "ns"
        self.ClearanceNumber = ClearanceNumber
        self.ClearanceNumber_nsprefix_ = None
        if InclusionSpecifications is None:
            self.InclusionSpecifications = []
        else:
            self.InclusionSpecifications = InclusionSpecifications
        self.InclusionSpecifications_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RequestedDistributionLocation)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RequestedDistributionLocation.subclass:
            return RequestedDistributionLocation.subclass(*args_, **kwargs_)
        else:
            return RequestedDistributionLocation(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Id(self):
        return self.Id
    def set_Id(self, Id):
        self.Id = Id
    def get_LocationId(self):
        return self.LocationId
    def set_LocationId(self, LocationId):
        self.LocationId = LocationId
    def get_LocationNumber(self):
        return self.LocationNumber
    def set_LocationNumber(self, LocationNumber):
        self.LocationNumber = LocationNumber
    def get_LocationContactAndAddress(self):
        return self.LocationContactAndAddress
    def set_LocationContactAndAddress(self, LocationContactAndAddress):
        self.LocationContactAndAddress = LocationContactAndAddress
    def get_ClearanceNumber(self):
        return self.ClearanceNumber
    def set_ClearanceNumber(self, ClearanceNumber):
        self.ClearanceNumber = ClearanceNumber
    def get_InclusionSpecifications(self):
        return self.InclusionSpecifications
    def set_InclusionSpecifications(self, InclusionSpecifications):
        self.InclusionSpecifications = InclusionSpecifications
    def add_InclusionSpecifications(self, value):
        self.InclusionSpecifications.append(value)
    def insert_InclusionSpecifications_at(self, index, value):
        self.InclusionSpecifications.insert(index, value)
    def replace_InclusionSpecifications_at(self, index, value):
        self.InclusionSpecifications[index] = value
    def hasContent_(self):
        if (
            self.Id is not None or
            self.LocationId is not None or
            self.LocationNumber is not None or
            self.LocationContactAndAddress is not None or
            self.ClearanceNumber is not None or
            self.InclusionSpecifications
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RequestedDistributionLocation', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RequestedDistributionLocation')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RequestedDistributionLocation':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RequestedDistributionLocation')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RequestedDistributionLocation', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RequestedDistributionLocation'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RequestedDistributionLocation', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Id is not None:
            namespaceprefix_ = self.Id_nsprefix_ + ':' if (UseCapturedNS_ and self.Id_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sId>%s</%sId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Id), input_name='Id')), namespaceprefix_ , eol_))
        if self.LocationId is not None:
            namespaceprefix_ = self.LocationId_nsprefix_ + ':' if (UseCapturedNS_ and self.LocationId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocationId>%s</%sLocationId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LocationId), input_name='LocationId')), namespaceprefix_ , eol_))
        if self.LocationNumber is not None:
            namespaceprefix_ = self.LocationNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.LocationNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocationNumber>%s</%sLocationNumber>%s' % (namespaceprefix_ , self.gds_format_integer(self.LocationNumber, input_name='LocationNumber'), namespaceprefix_ , eol_))
        if self.LocationContactAndAddress is not None:
            namespaceprefix_ = self.LocationContactAndAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.LocationContactAndAddress_nsprefix_) else ''
            self.LocationContactAndAddress.export(outfile, level, namespaceprefix_, namespacedef_='', name_='LocationContactAndAddress', pretty_print=pretty_print)
        if self.ClearanceNumber is not None:
            namespaceprefix_ = self.ClearanceNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.ClearanceNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClearanceNumber>%s</%sClearanceNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ClearanceNumber), input_name='ClearanceNumber')), namespaceprefix_ , eol_))
        for InclusionSpecifications_ in self.InclusionSpecifications:
            namespaceprefix_ = self.InclusionSpecifications_nsprefix_ + ':' if (UseCapturedNS_ and self.InclusionSpecifications_nsprefix_) else ''
            InclusionSpecifications_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='InclusionSpecifications', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Id':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Id')
            value_ = self.gds_validate_string(value_, node, 'Id')
            self.Id = value_
            self.Id_nsprefix_ = child_.prefix
        elif nodeName_ == 'LocationId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LocationId')
            value_ = self.gds_validate_string(value_, node, 'LocationId')
            self.LocationId = value_
            self.LocationId_nsprefix_ = child_.prefix
        elif nodeName_ == 'LocationNumber' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'LocationNumber')
            ival_ = self.gds_validate_integer(ival_, node, 'LocationNumber')
            self.LocationNumber = ival_
            self.LocationNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'LocationContactAndAddress':
            obj_ = ContactAndAddress.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.LocationContactAndAddress = obj_
            obj_.original_tagname_ = 'LocationContactAndAddress'
        elif nodeName_ == 'ClearanceNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ClearanceNumber')
            value_ = self.gds_validate_string(value_, node, 'ClearanceNumber')
            self.ClearanceNumber = value_
            self.ClearanceNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'InclusionSpecifications':
            obj_ = ShipmentInclusionSpecification.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.InclusionSpecifications.append(obj_)
            obj_.original_tagname_ = 'InclusionSpecifications'
# end class RequestedDistributionLocation


class RequestedPackageLineItem(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, SequenceNumber=None, GroupNumber=None, GroupPackageCount=None, TrackingIds=None, VariableHandlingChargeDetail=None, InsuredValue=None, Weight=None, WeightSource=None, Dimensions=None, PhysicalPackaging=None, AssociatedFreightLineItems=None, ItemDescription=None, ItemDescriptionForClearance=None, CustomerReferences=None, SpecialServicesRequested=None, SpecialHandlingDetail=None, ContentRecords=None, Commodities=None, ConveyanceDetail=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.SequenceNumber = SequenceNumber
        self.SequenceNumber_nsprefix_ = None
        self.GroupNumber = GroupNumber
        self.GroupNumber_nsprefix_ = None
        self.GroupPackageCount = GroupPackageCount
        self.GroupPackageCount_nsprefix_ = None
        if TrackingIds is None:
            self.TrackingIds = []
        else:
            self.TrackingIds = TrackingIds
        self.TrackingIds_nsprefix_ = "ns"
        self.VariableHandlingChargeDetail = VariableHandlingChargeDetail
        self.VariableHandlingChargeDetail_nsprefix_ = "ns"
        self.InsuredValue = InsuredValue
        self.InsuredValue_nsprefix_ = "ns"
        self.Weight = Weight
        self.Weight_nsprefix_ = "ns"
        self.WeightSource = WeightSource
        self.validate_WeightSource(self.WeightSource)
        self.WeightSource_nsprefix_ = "ns"
        self.Dimensions = Dimensions
        self.Dimensions_nsprefix_ = "ns"
        self.PhysicalPackaging = PhysicalPackaging
        self.validate_PhysicalPackagingType(self.PhysicalPackaging)
        self.PhysicalPackaging_nsprefix_ = "ns"
        if AssociatedFreightLineItems is None:
            self.AssociatedFreightLineItems = []
        else:
            self.AssociatedFreightLineItems = AssociatedFreightLineItems
        self.AssociatedFreightLineItems_nsprefix_ = "ns"
        self.ItemDescription = ItemDescription
        self.ItemDescription_nsprefix_ = None
        self.ItemDescriptionForClearance = ItemDescriptionForClearance
        self.ItemDescriptionForClearance_nsprefix_ = None
        if CustomerReferences is None:
            self.CustomerReferences = []
        else:
            self.CustomerReferences = CustomerReferences
        self.CustomerReferences_nsprefix_ = "ns"
        self.SpecialServicesRequested = SpecialServicesRequested
        self.SpecialServicesRequested_nsprefix_ = "ns"
        self.SpecialHandlingDetail = SpecialHandlingDetail
        self.SpecialHandlingDetail_nsprefix_ = "ns"
        if ContentRecords is None:
            self.ContentRecords = []
        else:
            self.ContentRecords = ContentRecords
        self.ContentRecords_nsprefix_ = "ns"
        if Commodities is None:
            self.Commodities = []
        else:
            self.Commodities = Commodities
        self.Commodities_nsprefix_ = "ns"
        self.ConveyanceDetail = ConveyanceDetail
        self.ConveyanceDetail_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RequestedPackageLineItem)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RequestedPackageLineItem.subclass:
            return RequestedPackageLineItem.subclass(*args_, **kwargs_)
        else:
            return RequestedPackageLineItem(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_SequenceNumber(self):
        return self.SequenceNumber
    def set_SequenceNumber(self, SequenceNumber):
        self.SequenceNumber = SequenceNumber
    def get_GroupNumber(self):
        return self.GroupNumber
    def set_GroupNumber(self, GroupNumber):
        self.GroupNumber = GroupNumber
    def get_GroupPackageCount(self):
        return self.GroupPackageCount
    def set_GroupPackageCount(self, GroupPackageCount):
        self.GroupPackageCount = GroupPackageCount
    def get_TrackingIds(self):
        return self.TrackingIds
    def set_TrackingIds(self, TrackingIds):
        self.TrackingIds = TrackingIds
    def add_TrackingIds(self, value):
        self.TrackingIds.append(value)
    def insert_TrackingIds_at(self, index, value):
        self.TrackingIds.insert(index, value)
    def replace_TrackingIds_at(self, index, value):
        self.TrackingIds[index] = value
    def get_VariableHandlingChargeDetail(self):
        return self.VariableHandlingChargeDetail
    def set_VariableHandlingChargeDetail(self, VariableHandlingChargeDetail):
        self.VariableHandlingChargeDetail = VariableHandlingChargeDetail
    def get_InsuredValue(self):
        return self.InsuredValue
    def set_InsuredValue(self, InsuredValue):
        self.InsuredValue = InsuredValue
    def get_Weight(self):
        return self.Weight
    def set_Weight(self, Weight):
        self.Weight = Weight
    def get_WeightSource(self):
        return self.WeightSource
    def set_WeightSource(self, WeightSource):
        self.WeightSource = WeightSource
    def get_Dimensions(self):
        return self.Dimensions
    def set_Dimensions(self, Dimensions):
        self.Dimensions = Dimensions
    def get_PhysicalPackaging(self):
        return self.PhysicalPackaging
    def set_PhysicalPackaging(self, PhysicalPackaging):
        self.PhysicalPackaging = PhysicalPackaging
    def get_AssociatedFreightLineItems(self):
        return self.AssociatedFreightLineItems
    def set_AssociatedFreightLineItems(self, AssociatedFreightLineItems):
        self.AssociatedFreightLineItems = AssociatedFreightLineItems
    def add_AssociatedFreightLineItems(self, value):
        self.AssociatedFreightLineItems.append(value)
    def insert_AssociatedFreightLineItems_at(self, index, value):
        self.AssociatedFreightLineItems.insert(index, value)
    def replace_AssociatedFreightLineItems_at(self, index, value):
        self.AssociatedFreightLineItems[index] = value
    def get_ItemDescription(self):
        return self.ItemDescription
    def set_ItemDescription(self, ItemDescription):
        self.ItemDescription = ItemDescription
    def get_ItemDescriptionForClearance(self):
        return self.ItemDescriptionForClearance
    def set_ItemDescriptionForClearance(self, ItemDescriptionForClearance):
        self.ItemDescriptionForClearance = ItemDescriptionForClearance
    def get_CustomerReferences(self):
        return self.CustomerReferences
    def set_CustomerReferences(self, CustomerReferences):
        self.CustomerReferences = CustomerReferences
    def add_CustomerReferences(self, value):
        self.CustomerReferences.append(value)
    def insert_CustomerReferences_at(self, index, value):
        self.CustomerReferences.insert(index, value)
    def replace_CustomerReferences_at(self, index, value):
        self.CustomerReferences[index] = value
    def get_SpecialServicesRequested(self):
        return self.SpecialServicesRequested
    def set_SpecialServicesRequested(self, SpecialServicesRequested):
        self.SpecialServicesRequested = SpecialServicesRequested
    def get_SpecialHandlingDetail(self):
        return self.SpecialHandlingDetail
    def set_SpecialHandlingDetail(self, SpecialHandlingDetail):
        self.SpecialHandlingDetail = SpecialHandlingDetail
    def get_ContentRecords(self):
        return self.ContentRecords
    def set_ContentRecords(self, ContentRecords):
        self.ContentRecords = ContentRecords
    def add_ContentRecords(self, value):
        self.ContentRecords.append(value)
    def insert_ContentRecords_at(self, index, value):
        self.ContentRecords.insert(index, value)
    def replace_ContentRecords_at(self, index, value):
        self.ContentRecords[index] = value
    def get_Commodities(self):
        return self.Commodities
    def set_Commodities(self, Commodities):
        self.Commodities = Commodities
    def add_Commodities(self, value):
        self.Commodities.append(value)
    def insert_Commodities_at(self, index, value):
        self.Commodities.insert(index, value)
    def replace_Commodities_at(self, index, value):
        self.Commodities[index] = value
    def get_ConveyanceDetail(self):
        return self.ConveyanceDetail
    def set_ConveyanceDetail(self, ConveyanceDetail):
        self.ConveyanceDetail = ConveyanceDetail
    def validate_WeightSource(self, value):
        result = True
        # Validate type WeightSource, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['MANUAL', 'SCALE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on WeightSource' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_PhysicalPackagingType(self, value):
        result = True
        # Validate type PhysicalPackagingType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BAG', 'BARREL', 'BASKET', 'BOX', 'BUCKET', 'BUNDLE', 'CAGE', 'CARTON', 'CASE', 'CHEST', 'CONTAINER', 'CRATE', 'CYLINDER', 'DRUM', 'ENVELOPE', 'HAMPER', 'OTHER', 'PACKAGE', 'PAIL', 'PALLET', 'PARCEL', 'PIECE', 'REEL', 'ROLL', 'SACK', 'SHRINK_WRAPPED', 'SKID', 'TANK', 'TOTE_BIN', 'TUBE', 'UNIT']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on PhysicalPackagingType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.SequenceNumber is not None or
            self.GroupNumber is not None or
            self.GroupPackageCount is not None or
            self.TrackingIds or
            self.VariableHandlingChargeDetail is not None or
            self.InsuredValue is not None or
            self.Weight is not None or
            self.WeightSource is not None or
            self.Dimensions is not None or
            self.PhysicalPackaging is not None or
            self.AssociatedFreightLineItems or
            self.ItemDescription is not None or
            self.ItemDescriptionForClearance is not None or
            self.CustomerReferences or
            self.SpecialServicesRequested is not None or
            self.SpecialHandlingDetail is not None or
            self.ContentRecords or
            self.Commodities or
            self.ConveyanceDetail is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RequestedPackageLineItem', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RequestedPackageLineItem')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RequestedPackageLineItem':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RequestedPackageLineItem')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RequestedPackageLineItem', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RequestedPackageLineItem'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RequestedPackageLineItem', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SequenceNumber is not None:
            namespaceprefix_ = self.SequenceNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.SequenceNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSequenceNumber>%s</%sSequenceNumber>%s' % (namespaceprefix_ , self.gds_format_integer(self.SequenceNumber, input_name='SequenceNumber'), namespaceprefix_ , eol_))
        if self.GroupNumber is not None:
            namespaceprefix_ = self.GroupNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.GroupNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroupNumber>%s</%sGroupNumber>%s' % (namespaceprefix_ , self.gds_format_integer(self.GroupNumber, input_name='GroupNumber'), namespaceprefix_ , eol_))
        if self.GroupPackageCount is not None:
            namespaceprefix_ = self.GroupPackageCount_nsprefix_ + ':' if (UseCapturedNS_ and self.GroupPackageCount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroupPackageCount>%s</%sGroupPackageCount>%s' % (namespaceprefix_ , self.gds_format_integer(self.GroupPackageCount, input_name='GroupPackageCount'), namespaceprefix_ , eol_))
        for TrackingIds_ in self.TrackingIds:
            namespaceprefix_ = self.TrackingIds_nsprefix_ + ':' if (UseCapturedNS_ and self.TrackingIds_nsprefix_) else ''
            TrackingIds_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TrackingIds', pretty_print=pretty_print)
        if self.VariableHandlingChargeDetail is not None:
            namespaceprefix_ = self.VariableHandlingChargeDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.VariableHandlingChargeDetail_nsprefix_) else ''
            self.VariableHandlingChargeDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='VariableHandlingChargeDetail', pretty_print=pretty_print)
        if self.InsuredValue is not None:
            namespaceprefix_ = self.InsuredValue_nsprefix_ + ':' if (UseCapturedNS_ and self.InsuredValue_nsprefix_) else ''
            self.InsuredValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='InsuredValue', pretty_print=pretty_print)
        if self.Weight is not None:
            namespaceprefix_ = self.Weight_nsprefix_ + ':' if (UseCapturedNS_ and self.Weight_nsprefix_) else ''
            self.Weight.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Weight', pretty_print=pretty_print)
        if self.WeightSource is not None:
            namespaceprefix_ = self.WeightSource_nsprefix_ + ':' if (UseCapturedNS_ and self.WeightSource_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWeightSource>%s</%sWeightSource>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.WeightSource), input_name='WeightSource')), namespaceprefix_ , eol_))
        if self.Dimensions is not None:
            namespaceprefix_ = self.Dimensions_nsprefix_ + ':' if (UseCapturedNS_ and self.Dimensions_nsprefix_) else ''
            self.Dimensions.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Dimensions', pretty_print=pretty_print)
        if self.PhysicalPackaging is not None:
            namespaceprefix_ = self.PhysicalPackaging_nsprefix_ + ':' if (UseCapturedNS_ and self.PhysicalPackaging_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPhysicalPackaging>%s</%sPhysicalPackaging>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PhysicalPackaging), input_name='PhysicalPackaging')), namespaceprefix_ , eol_))
        for AssociatedFreightLineItems_ in self.AssociatedFreightLineItems:
            namespaceprefix_ = self.AssociatedFreightLineItems_nsprefix_ + ':' if (UseCapturedNS_ and self.AssociatedFreightLineItems_nsprefix_) else ''
            AssociatedFreightLineItems_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AssociatedFreightLineItems', pretty_print=pretty_print)
        if self.ItemDescription is not None:
            namespaceprefix_ = self.ItemDescription_nsprefix_ + ':' if (UseCapturedNS_ and self.ItemDescription_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sItemDescription>%s</%sItemDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ItemDescription), input_name='ItemDescription')), namespaceprefix_ , eol_))
        if self.ItemDescriptionForClearance is not None:
            namespaceprefix_ = self.ItemDescriptionForClearance_nsprefix_ + ':' if (UseCapturedNS_ and self.ItemDescriptionForClearance_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sItemDescriptionForClearance>%s</%sItemDescriptionForClearance>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ItemDescriptionForClearance), input_name='ItemDescriptionForClearance')), namespaceprefix_ , eol_))
        for CustomerReferences_ in self.CustomerReferences:
            namespaceprefix_ = self.CustomerReferences_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomerReferences_nsprefix_) else ''
            CustomerReferences_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CustomerReferences', pretty_print=pretty_print)
        if self.SpecialServicesRequested is not None:
            namespaceprefix_ = self.SpecialServicesRequested_nsprefix_ + ':' if (UseCapturedNS_ and self.SpecialServicesRequested_nsprefix_) else ''
            self.SpecialServicesRequested.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SpecialServicesRequested', pretty_print=pretty_print)
        if self.SpecialHandlingDetail is not None:
            namespaceprefix_ = self.SpecialHandlingDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.SpecialHandlingDetail_nsprefix_) else ''
            self.SpecialHandlingDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SpecialHandlingDetail', pretty_print=pretty_print)
        for ContentRecords_ in self.ContentRecords:
            namespaceprefix_ = self.ContentRecords_nsprefix_ + ':' if (UseCapturedNS_ and self.ContentRecords_nsprefix_) else ''
            ContentRecords_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ContentRecords', pretty_print=pretty_print)
        for Commodities_ in self.Commodities:
            namespaceprefix_ = self.Commodities_nsprefix_ + ':' if (UseCapturedNS_ and self.Commodities_nsprefix_) else ''
            Commodities_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Commodities', pretty_print=pretty_print)
        if self.ConveyanceDetail is not None:
            namespaceprefix_ = self.ConveyanceDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.ConveyanceDetail_nsprefix_) else ''
            self.ConveyanceDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ConveyanceDetail', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'SequenceNumber' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'SequenceNumber')
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'SequenceNumber')
            self.SequenceNumber = ival_
            self.SequenceNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'GroupNumber' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'GroupNumber')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'GroupNumber')
            self.GroupNumber = ival_
            self.GroupNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'GroupPackageCount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'GroupPackageCount')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'GroupPackageCount')
            self.GroupPackageCount = ival_
            self.GroupPackageCount_nsprefix_ = child_.prefix
        elif nodeName_ == 'TrackingIds':
            obj_ = TrackingId.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TrackingIds.append(obj_)
            obj_.original_tagname_ = 'TrackingIds'
        elif nodeName_ == 'VariableHandlingChargeDetail':
            obj_ = VariableHandlingChargeDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.VariableHandlingChargeDetail = obj_
            obj_.original_tagname_ = 'VariableHandlingChargeDetail'
        elif nodeName_ == 'InsuredValue':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.InsuredValue = obj_
            obj_.original_tagname_ = 'InsuredValue'
        elif nodeName_ == 'Weight':
            obj_ = Weight.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Weight = obj_
            obj_.original_tagname_ = 'Weight'
        elif nodeName_ == 'WeightSource':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'WeightSource')
            value_ = self.gds_validate_string(value_, node, 'WeightSource')
            self.WeightSource = value_
            self.WeightSource_nsprefix_ = child_.prefix
            # validate type WeightSource
            self.validate_WeightSource(self.WeightSource)
        elif nodeName_ == 'Dimensions':
            obj_ = Dimensions.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Dimensions = obj_
            obj_.original_tagname_ = 'Dimensions'
        elif nodeName_ == 'PhysicalPackaging':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PhysicalPackaging')
            value_ = self.gds_validate_string(value_, node, 'PhysicalPackaging')
            self.PhysicalPackaging = value_
            self.PhysicalPackaging_nsprefix_ = child_.prefix
            # validate type PhysicalPackagingType
            self.validate_PhysicalPackagingType(self.PhysicalPackaging)
        elif nodeName_ == 'AssociatedFreightLineItems':
            obj_ = AssociatedFreightLineItemDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AssociatedFreightLineItems.append(obj_)
            obj_.original_tagname_ = 'AssociatedFreightLineItems'
        elif nodeName_ == 'ItemDescription':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ItemDescription')
            value_ = self.gds_validate_string(value_, node, 'ItemDescription')
            self.ItemDescription = value_
            self.ItemDescription_nsprefix_ = child_.prefix
        elif nodeName_ == 'ItemDescriptionForClearance':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ItemDescriptionForClearance')
            value_ = self.gds_validate_string(value_, node, 'ItemDescriptionForClearance')
            self.ItemDescriptionForClearance = value_
            self.ItemDescriptionForClearance_nsprefix_ = child_.prefix
        elif nodeName_ == 'CustomerReferences':
            obj_ = CustomerReference.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CustomerReferences.append(obj_)
            obj_.original_tagname_ = 'CustomerReferences'
        elif nodeName_ == 'SpecialServicesRequested':
            obj_ = PackageSpecialServicesRequested.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SpecialServicesRequested = obj_
            obj_.original_tagname_ = 'SpecialServicesRequested'
        elif nodeName_ == 'SpecialHandlingDetail':
            obj_ = PackageSpecialHandlingDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SpecialHandlingDetail = obj_
            obj_.original_tagname_ = 'SpecialHandlingDetail'
        elif nodeName_ == 'ContentRecords':
            obj_ = ContentRecord.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ContentRecords.append(obj_)
            obj_.original_tagname_ = 'ContentRecords'
        elif nodeName_ == 'Commodities':
            obj_ = Commodity.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Commodities.append(obj_)
            obj_.original_tagname_ = 'Commodities'
        elif nodeName_ == 'ConveyanceDetail':
            obj_ = ShipperConveyanceDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ConveyanceDetail = obj_
            obj_.original_tagname_ = 'ConveyanceDetail'
# end class RequestedPackageLineItem


class RequestedShipment(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ShipTimestamp=None, DropoffType=None, ServiceType=None, PackagingType=None, ShippingCycle=None, VariationOptions=None, TotalWeight=None, TotalInsuredValue=None, TotalDimensions=None, PreferredCurrency=None, ShipmentAuthorizationDetail=None, Shipper=None, Recipient=None, RecipientLocationNumber=None, Origin=None, SoldTo=None, ShippingChargesPayment=None, SpecialServicesRequested=None, ProcessingOptionsRequested=None, ExpressFreightDetail=None, FreightShipmentDetail=None, ConsolidationDetail=None, DeliveryInstructions=None, VariableHandlingChargeDetail=None, CustomsClearanceDetail=None, PickupDetail=None, SmartPostDetail=None, BlockInsightVisibility=None, ErrorLabelBehavior=None, LabelSpecification=None, ShippingDocumentSpecification=None, RateRequestTypes=None, CustomerSelectedActualRateType=None, EdtRequestType=None, CustomRatingOptionDetail=None, MasterTrackingId=None, PackageCount=None, ShipmentOnlyFields=None, ConfigurationData=None, RequestedPackageLineItems=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if isinstance(ShipTimestamp, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ShipTimestamp, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = ShipTimestamp
        self.ShipTimestamp = initvalue_
        self.ShipTimestamp_nsprefix_ = None
        self.DropoffType = DropoffType
        self.validate_DropoffType(self.DropoffType)
        self.DropoffType_nsprefix_ = "ns"
        self.ServiceType = ServiceType
        self.ServiceType_nsprefix_ = None
        self.PackagingType = PackagingType
        self.PackagingType_nsprefix_ = None
        self.ShippingCycle = ShippingCycle
        self.ShippingCycle_nsprefix_ = None
        if VariationOptions is None:
            self.VariationOptions = []
        else:
            self.VariationOptions = VariationOptions
        self.VariationOptions_nsprefix_ = "ns"
        self.TotalWeight = TotalWeight
        self.TotalWeight_nsprefix_ = "ns"
        self.TotalInsuredValue = TotalInsuredValue
        self.TotalInsuredValue_nsprefix_ = "ns"
        self.TotalDimensions = TotalDimensions
        self.TotalDimensions_nsprefix_ = "ns"
        self.PreferredCurrency = PreferredCurrency
        self.PreferredCurrency_nsprefix_ = None
        self.ShipmentAuthorizationDetail = ShipmentAuthorizationDetail
        self.ShipmentAuthorizationDetail_nsprefix_ = "ns"
        self.Shipper = Shipper
        self.Shipper_nsprefix_ = "ns"
        self.Recipient = Recipient
        self.Recipient_nsprefix_ = "ns"
        self.RecipientLocationNumber = RecipientLocationNumber
        self.RecipientLocationNumber_nsprefix_ = None
        self.Origin = Origin
        self.Origin_nsprefix_ = "ns"
        self.SoldTo = SoldTo
        self.SoldTo_nsprefix_ = "ns"
        self.ShippingChargesPayment = ShippingChargesPayment
        self.ShippingChargesPayment_nsprefix_ = "ns"
        self.SpecialServicesRequested = SpecialServicesRequested
        self.SpecialServicesRequested_nsprefix_ = "ns"
        self.ProcessingOptionsRequested = ProcessingOptionsRequested
        self.ProcessingOptionsRequested_nsprefix_ = "ns"
        self.ExpressFreightDetail = ExpressFreightDetail
        self.ExpressFreightDetail_nsprefix_ = "ns"
        self.FreightShipmentDetail = FreightShipmentDetail
        self.FreightShipmentDetail_nsprefix_ = "ns"
        self.ConsolidationDetail = ConsolidationDetail
        self.ConsolidationDetail_nsprefix_ = "ns"
        self.DeliveryInstructions = DeliveryInstructions
        self.DeliveryInstructions_nsprefix_ = None
        self.VariableHandlingChargeDetail = VariableHandlingChargeDetail
        self.VariableHandlingChargeDetail_nsprefix_ = "ns"
        self.CustomsClearanceDetail = CustomsClearanceDetail
        self.CustomsClearanceDetail_nsprefix_ = "ns"
        self.PickupDetail = PickupDetail
        self.PickupDetail_nsprefix_ = "ns"
        self.SmartPostDetail = SmartPostDetail
        self.SmartPostDetail_nsprefix_ = "ns"
        self.BlockInsightVisibility = BlockInsightVisibility
        self.BlockInsightVisibility_nsprefix_ = None
        self.ErrorLabelBehavior = ErrorLabelBehavior
        self.validate_ErrorLabelBehaviorType(self.ErrorLabelBehavior)
        self.ErrorLabelBehavior_nsprefix_ = "ns"
        self.LabelSpecification = LabelSpecification
        self.LabelSpecification_nsprefix_ = "ns"
        self.ShippingDocumentSpecification = ShippingDocumentSpecification
        self.ShippingDocumentSpecification_nsprefix_ = "ns"
        if RateRequestTypes is None:
            self.RateRequestTypes = []
        else:
            self.RateRequestTypes = RateRequestTypes
        self.RateRequestTypes_nsprefix_ = "ns"
        self.CustomerSelectedActualRateType = CustomerSelectedActualRateType
        self.validate_ReturnedRateType(self.CustomerSelectedActualRateType)
        self.CustomerSelectedActualRateType_nsprefix_ = "ns"
        self.EdtRequestType = EdtRequestType
        self.validate_EdtRequestType(self.EdtRequestType)
        self.EdtRequestType_nsprefix_ = "ns"
        self.CustomRatingOptionDetail = CustomRatingOptionDetail
        self.CustomRatingOptionDetail_nsprefix_ = "ns"
        self.MasterTrackingId = MasterTrackingId
        self.MasterTrackingId_nsprefix_ = "ns"
        self.PackageCount = PackageCount
        self.PackageCount_nsprefix_ = None
        if ShipmentOnlyFields is None:
            self.ShipmentOnlyFields = []
        else:
            self.ShipmentOnlyFields = ShipmentOnlyFields
        self.ShipmentOnlyFields_nsprefix_ = "ns"
        self.ConfigurationData = ConfigurationData
        self.ConfigurationData_nsprefix_ = "ns"
        if RequestedPackageLineItems is None:
            self.RequestedPackageLineItems = []
        else:
            self.RequestedPackageLineItems = RequestedPackageLineItems
        self.RequestedPackageLineItems_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RequestedShipment)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RequestedShipment.subclass:
            return RequestedShipment.subclass(*args_, **kwargs_)
        else:
            return RequestedShipment(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ShipTimestamp(self):
        return self.ShipTimestamp
    def set_ShipTimestamp(self, ShipTimestamp):
        self.ShipTimestamp = ShipTimestamp
    def get_DropoffType(self):
        return self.DropoffType
    def set_DropoffType(self, DropoffType):
        self.DropoffType = DropoffType
    def get_ServiceType(self):
        return self.ServiceType
    def set_ServiceType(self, ServiceType):
        self.ServiceType = ServiceType
    def get_PackagingType(self):
        return self.PackagingType
    def set_PackagingType(self, PackagingType):
        self.PackagingType = PackagingType
    def get_ShippingCycle(self):
        return self.ShippingCycle
    def set_ShippingCycle(self, ShippingCycle):
        self.ShippingCycle = ShippingCycle
    def get_VariationOptions(self):
        return self.VariationOptions
    def set_VariationOptions(self, VariationOptions):
        self.VariationOptions = VariationOptions
    def add_VariationOptions(self, value):
        self.VariationOptions.append(value)
    def insert_VariationOptions_at(self, index, value):
        self.VariationOptions.insert(index, value)
    def replace_VariationOptions_at(self, index, value):
        self.VariationOptions[index] = value
    def get_TotalWeight(self):
        return self.TotalWeight
    def set_TotalWeight(self, TotalWeight):
        self.TotalWeight = TotalWeight
    def get_TotalInsuredValue(self):
        return self.TotalInsuredValue
    def set_TotalInsuredValue(self, TotalInsuredValue):
        self.TotalInsuredValue = TotalInsuredValue
    def get_TotalDimensions(self):
        return self.TotalDimensions
    def set_TotalDimensions(self, TotalDimensions):
        self.TotalDimensions = TotalDimensions
    def get_PreferredCurrency(self):
        return self.PreferredCurrency
    def set_PreferredCurrency(self, PreferredCurrency):
        self.PreferredCurrency = PreferredCurrency
    def get_ShipmentAuthorizationDetail(self):
        return self.ShipmentAuthorizationDetail
    def set_ShipmentAuthorizationDetail(self, ShipmentAuthorizationDetail):
        self.ShipmentAuthorizationDetail = ShipmentAuthorizationDetail
    def get_Shipper(self):
        return self.Shipper
    def set_Shipper(self, Shipper):
        self.Shipper = Shipper
    def get_Recipient(self):
        return self.Recipient
    def set_Recipient(self, Recipient):
        self.Recipient = Recipient
    def get_RecipientLocationNumber(self):
        return self.RecipientLocationNumber
    def set_RecipientLocationNumber(self, RecipientLocationNumber):
        self.RecipientLocationNumber = RecipientLocationNumber
    def get_Origin(self):
        return self.Origin
    def set_Origin(self, Origin):
        self.Origin = Origin
    def get_SoldTo(self):
        return self.SoldTo
    def set_SoldTo(self, SoldTo):
        self.SoldTo = SoldTo
    def get_ShippingChargesPayment(self):
        return self.ShippingChargesPayment
    def set_ShippingChargesPayment(self, ShippingChargesPayment):
        self.ShippingChargesPayment = ShippingChargesPayment
    def get_SpecialServicesRequested(self):
        return self.SpecialServicesRequested
    def set_SpecialServicesRequested(self, SpecialServicesRequested):
        self.SpecialServicesRequested = SpecialServicesRequested
    def get_ProcessingOptionsRequested(self):
        return self.ProcessingOptionsRequested
    def set_ProcessingOptionsRequested(self, ProcessingOptionsRequested):
        self.ProcessingOptionsRequested = ProcessingOptionsRequested
    def get_ExpressFreightDetail(self):
        return self.ExpressFreightDetail
    def set_ExpressFreightDetail(self, ExpressFreightDetail):
        self.ExpressFreightDetail = ExpressFreightDetail
    def get_FreightShipmentDetail(self):
        return self.FreightShipmentDetail
    def set_FreightShipmentDetail(self, FreightShipmentDetail):
        self.FreightShipmentDetail = FreightShipmentDetail
    def get_ConsolidationDetail(self):
        return self.ConsolidationDetail
    def set_ConsolidationDetail(self, ConsolidationDetail):
        self.ConsolidationDetail = ConsolidationDetail
    def get_DeliveryInstructions(self):
        return self.DeliveryInstructions
    def set_DeliveryInstructions(self, DeliveryInstructions):
        self.DeliveryInstructions = DeliveryInstructions
    def get_VariableHandlingChargeDetail(self):
        return self.VariableHandlingChargeDetail
    def set_VariableHandlingChargeDetail(self, VariableHandlingChargeDetail):
        self.VariableHandlingChargeDetail = VariableHandlingChargeDetail
    def get_CustomsClearanceDetail(self):
        return self.CustomsClearanceDetail
    def set_CustomsClearanceDetail(self, CustomsClearanceDetail):
        self.CustomsClearanceDetail = CustomsClearanceDetail
    def get_PickupDetail(self):
        return self.PickupDetail
    def set_PickupDetail(self, PickupDetail):
        self.PickupDetail = PickupDetail
    def get_SmartPostDetail(self):
        return self.SmartPostDetail
    def set_SmartPostDetail(self, SmartPostDetail):
        self.SmartPostDetail = SmartPostDetail
    def get_BlockInsightVisibility(self):
        return self.BlockInsightVisibility
    def set_BlockInsightVisibility(self, BlockInsightVisibility):
        self.BlockInsightVisibility = BlockInsightVisibility
    def get_ErrorLabelBehavior(self):
        return self.ErrorLabelBehavior
    def set_ErrorLabelBehavior(self, ErrorLabelBehavior):
        self.ErrorLabelBehavior = ErrorLabelBehavior
    def get_LabelSpecification(self):
        return self.LabelSpecification
    def set_LabelSpecification(self, LabelSpecification):
        self.LabelSpecification = LabelSpecification
    def get_ShippingDocumentSpecification(self):
        return self.ShippingDocumentSpecification
    def set_ShippingDocumentSpecification(self, ShippingDocumentSpecification):
        self.ShippingDocumentSpecification = ShippingDocumentSpecification
    def get_RateRequestTypes(self):
        return self.RateRequestTypes
    def set_RateRequestTypes(self, RateRequestTypes):
        self.RateRequestTypes = RateRequestTypes
    def add_RateRequestTypes(self, value):
        self.RateRequestTypes.append(value)
    def insert_RateRequestTypes_at(self, index, value):
        self.RateRequestTypes.insert(index, value)
    def replace_RateRequestTypes_at(self, index, value):
        self.RateRequestTypes[index] = value
    def get_CustomerSelectedActualRateType(self):
        return self.CustomerSelectedActualRateType
    def set_CustomerSelectedActualRateType(self, CustomerSelectedActualRateType):
        self.CustomerSelectedActualRateType = CustomerSelectedActualRateType
    def get_EdtRequestType(self):
        return self.EdtRequestType
    def set_EdtRequestType(self, EdtRequestType):
        self.EdtRequestType = EdtRequestType
    def get_CustomRatingOptionDetail(self):
        return self.CustomRatingOptionDetail
    def set_CustomRatingOptionDetail(self, CustomRatingOptionDetail):
        self.CustomRatingOptionDetail = CustomRatingOptionDetail
    def get_MasterTrackingId(self):
        return self.MasterTrackingId
    def set_MasterTrackingId(self, MasterTrackingId):
        self.MasterTrackingId = MasterTrackingId
    def get_PackageCount(self):
        return self.PackageCount
    def set_PackageCount(self, PackageCount):
        self.PackageCount = PackageCount
    def get_ShipmentOnlyFields(self):
        return self.ShipmentOnlyFields
    def set_ShipmentOnlyFields(self, ShipmentOnlyFields):
        self.ShipmentOnlyFields = ShipmentOnlyFields
    def add_ShipmentOnlyFields(self, value):
        self.ShipmentOnlyFields.append(value)
    def insert_ShipmentOnlyFields_at(self, index, value):
        self.ShipmentOnlyFields.insert(index, value)
    def replace_ShipmentOnlyFields_at(self, index, value):
        self.ShipmentOnlyFields[index] = value
    def get_ConfigurationData(self):
        return self.ConfigurationData
    def set_ConfigurationData(self, ConfigurationData):
        self.ConfigurationData = ConfigurationData
    def get_RequestedPackageLineItems(self):
        return self.RequestedPackageLineItems
    def set_RequestedPackageLineItems(self, RequestedPackageLineItems):
        self.RequestedPackageLineItems = RequestedPackageLineItems
    def add_RequestedPackageLineItems(self, value):
        self.RequestedPackageLineItems.append(value)
    def insert_RequestedPackageLineItems_at(self, index, value):
        self.RequestedPackageLineItems.insert(index, value)
    def replace_RequestedPackageLineItems_at(self, index, value):
        self.RequestedPackageLineItems[index] = value
    def validate_DropoffType(self, value):
        result = True
        # Validate type DropoffType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BUSINESS_SERVICE_CENTER', 'DROP_BOX', 'REGULAR_PICKUP', 'REQUEST_COURIER', 'STATION']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on DropoffType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_ErrorLabelBehaviorType(self, value):
        result = True
        # Validate type ErrorLabelBehaviorType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['PACKAGE_ERROR_LABELS', 'STANDARD']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ErrorLabelBehaviorType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_RateRequestType(self, value):
        result = True
        # Validate type RateRequestType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ACCOUNT', 'CUSTOM', 'INCENTIVE', 'LIST', 'NONE', 'PREFERRED', 'RETAIL']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on RateRequestType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_ReturnedRateType(self, value):
        result = True
        # Validate type ReturnedRateType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['INCENTIVE', 'NEGOTIATED', 'PAYOR_ACCOUNT_PACKAGE', 'PAYOR_ACCOUNT_SHIPMENT', 'PAYOR_CUSTOM_PACKAGE', 'PAYOR_CUSTOM_SHIPMENT', 'PAYOR_LIST_PACKAGE', 'PAYOR_LIST_SHIPMENT', 'PAYOR_RETAIL_PACKAGE', 'PAYOR_RETAIL_SHIPMENT', 'PREFERRED_ACCOUNT_PACKAGE', 'PREFERRED_ACCOUNT_SHIPMENT', 'PREFERRED_CUSTOM_PACKAGE', 'PREFERRED_CUSTOM_SHIPMENT', 'PREFERRED_INCENTIVE', 'PREFERRED_LIST_PACKAGE', 'PREFERRED_LIST_SHIPMENT', 'PREFERRED_NEGOTIATED', 'PREFERRED_RETAIL_PACKAGE', 'PREFERRED_RETAIL_SHIPMENT', 'RATED_ACCOUNT_PACKAGE', 'RATED_ACCOUNT_SHIPMENT', 'RATED_CUSTOM_PACKAGE', 'RATED_CUSTOM_SHIPMENT', 'RATED_LIST_PACKAGE', 'RATED_LIST_SHIPMENT', 'RATED_RETAIL_PACKAGE', 'RATED_RETAIL_SHIPMENT']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ReturnedRateType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_EdtRequestType(self, value):
        result = True
        # Validate type EdtRequestType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ALL', 'NONE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on EdtRequestType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_ShipmentOnlyFieldsType(self, value):
        result = True
        # Validate type ShipmentOnlyFieldsType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['DIMENSIONS', 'INSURED_VALUE', 'WEIGHT']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ShipmentOnlyFieldsType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.ShipTimestamp is not None or
            self.DropoffType is not None or
            self.ServiceType is not None or
            self.PackagingType is not None or
            self.ShippingCycle is not None or
            self.VariationOptions or
            self.TotalWeight is not None or
            self.TotalInsuredValue is not None or
            self.TotalDimensions is not None or
            self.PreferredCurrency is not None or
            self.ShipmentAuthorizationDetail is not None or
            self.Shipper is not None or
            self.Recipient is not None or
            self.RecipientLocationNumber is not None or
            self.Origin is not None or
            self.SoldTo is not None or
            self.ShippingChargesPayment is not None or
            self.SpecialServicesRequested is not None or
            self.ProcessingOptionsRequested is not None or
            self.ExpressFreightDetail is not None or
            self.FreightShipmentDetail is not None or
            self.ConsolidationDetail is not None or
            self.DeliveryInstructions is not None or
            self.VariableHandlingChargeDetail is not None or
            self.CustomsClearanceDetail is not None or
            self.PickupDetail is not None or
            self.SmartPostDetail is not None or
            self.BlockInsightVisibility is not None or
            self.ErrorLabelBehavior is not None or
            self.LabelSpecification is not None or
            self.ShippingDocumentSpecification is not None or
            self.RateRequestTypes or
            self.CustomerSelectedActualRateType is not None or
            self.EdtRequestType is not None or
            self.CustomRatingOptionDetail is not None or
            self.MasterTrackingId is not None or
            self.PackageCount is not None or
            self.ShipmentOnlyFields or
            self.ConfigurationData is not None or
            self.RequestedPackageLineItems
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RequestedShipment', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RequestedShipment')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RequestedShipment':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RequestedShipment')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RequestedShipment', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RequestedShipment'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RequestedShipment', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ShipTimestamp is not None:
            namespaceprefix_ = self.ShipTimestamp_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipTimestamp_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShipTimestamp>%s</%sShipTimestamp>%s' % (namespaceprefix_ , self.gds_format_datetime(self.ShipTimestamp, input_name='ShipTimestamp'), namespaceprefix_ , eol_))
        if self.DropoffType is not None:
            namespaceprefix_ = self.DropoffType_nsprefix_ + ':' if (UseCapturedNS_ and self.DropoffType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDropoffType>%s</%sDropoffType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DropoffType), input_name='DropoffType')), namespaceprefix_ , eol_))
        if self.ServiceType is not None:
            namespaceprefix_ = self.ServiceType_nsprefix_ + ':' if (UseCapturedNS_ and self.ServiceType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sServiceType>%s</%sServiceType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ServiceType), input_name='ServiceType')), namespaceprefix_ , eol_))
        if self.PackagingType is not None:
            namespaceprefix_ = self.PackagingType_nsprefix_ + ':' if (UseCapturedNS_ and self.PackagingType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackagingType>%s</%sPackagingType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PackagingType), input_name='PackagingType')), namespaceprefix_ , eol_))
        if self.ShippingCycle is not None:
            namespaceprefix_ = self.ShippingCycle_nsprefix_ + ':' if (UseCapturedNS_ and self.ShippingCycle_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShippingCycle>%s</%sShippingCycle>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ShippingCycle), input_name='ShippingCycle')), namespaceprefix_ , eol_))
        for VariationOptions_ in self.VariationOptions:
            namespaceprefix_ = self.VariationOptions_nsprefix_ + ':' if (UseCapturedNS_ and self.VariationOptions_nsprefix_) else ''
            VariationOptions_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='VariationOptions', pretty_print=pretty_print)
        if self.TotalWeight is not None:
            namespaceprefix_ = self.TotalWeight_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalWeight_nsprefix_) else ''
            self.TotalWeight.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TotalWeight', pretty_print=pretty_print)
        if self.TotalInsuredValue is not None:
            namespaceprefix_ = self.TotalInsuredValue_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalInsuredValue_nsprefix_) else ''
            self.TotalInsuredValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TotalInsuredValue', pretty_print=pretty_print)
        if self.TotalDimensions is not None:
            namespaceprefix_ = self.TotalDimensions_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalDimensions_nsprefix_) else ''
            self.TotalDimensions.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TotalDimensions', pretty_print=pretty_print)
        if self.PreferredCurrency is not None:
            namespaceprefix_ = self.PreferredCurrency_nsprefix_ + ':' if (UseCapturedNS_ and self.PreferredCurrency_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPreferredCurrency>%s</%sPreferredCurrency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PreferredCurrency), input_name='PreferredCurrency')), namespaceprefix_ , eol_))
        if self.ShipmentAuthorizationDetail is not None:
            namespaceprefix_ = self.ShipmentAuthorizationDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipmentAuthorizationDetail_nsprefix_) else ''
            self.ShipmentAuthorizationDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ShipmentAuthorizationDetail', pretty_print=pretty_print)
        if self.Shipper is not None:
            namespaceprefix_ = self.Shipper_nsprefix_ + ':' if (UseCapturedNS_ and self.Shipper_nsprefix_) else ''
            self.Shipper.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Shipper', pretty_print=pretty_print)
        if self.Recipient is not None:
            namespaceprefix_ = self.Recipient_nsprefix_ + ':' if (UseCapturedNS_ and self.Recipient_nsprefix_) else ''
            self.Recipient.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Recipient', pretty_print=pretty_print)
        if self.RecipientLocationNumber is not None:
            namespaceprefix_ = self.RecipientLocationNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.RecipientLocationNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecipientLocationNumber>%s</%sRecipientLocationNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RecipientLocationNumber), input_name='RecipientLocationNumber')), namespaceprefix_ , eol_))
        if self.Origin is not None:
            namespaceprefix_ = self.Origin_nsprefix_ + ':' if (UseCapturedNS_ and self.Origin_nsprefix_) else ''
            self.Origin.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Origin', pretty_print=pretty_print)
        if self.SoldTo is not None:
            namespaceprefix_ = self.SoldTo_nsprefix_ + ':' if (UseCapturedNS_ and self.SoldTo_nsprefix_) else ''
            self.SoldTo.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SoldTo', pretty_print=pretty_print)
        if self.ShippingChargesPayment is not None:
            namespaceprefix_ = self.ShippingChargesPayment_nsprefix_ + ':' if (UseCapturedNS_ and self.ShippingChargesPayment_nsprefix_) else ''
            self.ShippingChargesPayment.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ShippingChargesPayment', pretty_print=pretty_print)
        if self.SpecialServicesRequested is not None:
            namespaceprefix_ = self.SpecialServicesRequested_nsprefix_ + ':' if (UseCapturedNS_ and self.SpecialServicesRequested_nsprefix_) else ''
            self.SpecialServicesRequested.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SpecialServicesRequested', pretty_print=pretty_print)
        if self.ProcessingOptionsRequested is not None:
            namespaceprefix_ = self.ProcessingOptionsRequested_nsprefix_ + ':' if (UseCapturedNS_ and self.ProcessingOptionsRequested_nsprefix_) else ''
            self.ProcessingOptionsRequested.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ProcessingOptionsRequested', pretty_print=pretty_print)
        if self.ExpressFreightDetail is not None:
            namespaceprefix_ = self.ExpressFreightDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.ExpressFreightDetail_nsprefix_) else ''
            self.ExpressFreightDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ExpressFreightDetail', pretty_print=pretty_print)
        if self.FreightShipmentDetail is not None:
            namespaceprefix_ = self.FreightShipmentDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.FreightShipmentDetail_nsprefix_) else ''
            self.FreightShipmentDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FreightShipmentDetail', pretty_print=pretty_print)
        if self.ConsolidationDetail is not None:
            namespaceprefix_ = self.ConsolidationDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.ConsolidationDetail_nsprefix_) else ''
            self.ConsolidationDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ConsolidationDetail', pretty_print=pretty_print)
        if self.DeliveryInstructions is not None:
            namespaceprefix_ = self.DeliveryInstructions_nsprefix_ + ':' if (UseCapturedNS_ and self.DeliveryInstructions_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDeliveryInstructions>%s</%sDeliveryInstructions>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DeliveryInstructions), input_name='DeliveryInstructions')), namespaceprefix_ , eol_))
        if self.VariableHandlingChargeDetail is not None:
            namespaceprefix_ = self.VariableHandlingChargeDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.VariableHandlingChargeDetail_nsprefix_) else ''
            self.VariableHandlingChargeDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='VariableHandlingChargeDetail', pretty_print=pretty_print)
        if self.CustomsClearanceDetail is not None:
            namespaceprefix_ = self.CustomsClearanceDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomsClearanceDetail_nsprefix_) else ''
            self.CustomsClearanceDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CustomsClearanceDetail', pretty_print=pretty_print)
        if self.PickupDetail is not None:
            namespaceprefix_ = self.PickupDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.PickupDetail_nsprefix_) else ''
            self.PickupDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PickupDetail', pretty_print=pretty_print)
        if self.SmartPostDetail is not None:
            namespaceprefix_ = self.SmartPostDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.SmartPostDetail_nsprefix_) else ''
            self.SmartPostDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SmartPostDetail', pretty_print=pretty_print)
        if self.BlockInsightVisibility is not None:
            namespaceprefix_ = self.BlockInsightVisibility_nsprefix_ + ':' if (UseCapturedNS_ and self.BlockInsightVisibility_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBlockInsightVisibility>%s</%sBlockInsightVisibility>%s' % (namespaceprefix_ , self.gds_format_boolean(self.BlockInsightVisibility, input_name='BlockInsightVisibility'), namespaceprefix_ , eol_))
        if self.ErrorLabelBehavior is not None:
            namespaceprefix_ = self.ErrorLabelBehavior_nsprefix_ + ':' if (UseCapturedNS_ and self.ErrorLabelBehavior_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sErrorLabelBehavior>%s</%sErrorLabelBehavior>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ErrorLabelBehavior), input_name='ErrorLabelBehavior')), namespaceprefix_ , eol_))
        if self.LabelSpecification is not None:
            namespaceprefix_ = self.LabelSpecification_nsprefix_ + ':' if (UseCapturedNS_ and self.LabelSpecification_nsprefix_) else ''
            self.LabelSpecification.export(outfile, level, namespaceprefix_, namespacedef_='', name_='LabelSpecification', pretty_print=pretty_print)
        if self.ShippingDocumentSpecification is not None:
            namespaceprefix_ = self.ShippingDocumentSpecification_nsprefix_ + ':' if (UseCapturedNS_ and self.ShippingDocumentSpecification_nsprefix_) else ''
            self.ShippingDocumentSpecification.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ShippingDocumentSpecification', pretty_print=pretty_print)
        for RateRequestTypes_ in self.RateRequestTypes:
            namespaceprefix_ = self.RateRequestTypes_nsprefix_ + ':' if (UseCapturedNS_ and self.RateRequestTypes_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRateRequestTypes>%s</%sRateRequestTypes>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(RateRequestTypes_), input_name='RateRequestTypes')), namespaceprefix_ , eol_))
        if self.CustomerSelectedActualRateType is not None:
            namespaceprefix_ = self.CustomerSelectedActualRateType_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomerSelectedActualRateType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCustomerSelectedActualRateType>%s</%sCustomerSelectedActualRateType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CustomerSelectedActualRateType), input_name='CustomerSelectedActualRateType')), namespaceprefix_ , eol_))
        if self.EdtRequestType is not None:
            namespaceprefix_ = self.EdtRequestType_nsprefix_ + ':' if (UseCapturedNS_ and self.EdtRequestType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEdtRequestType>%s</%sEdtRequestType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EdtRequestType), input_name='EdtRequestType')), namespaceprefix_ , eol_))
        if self.CustomRatingOptionDetail is not None:
            namespaceprefix_ = self.CustomRatingOptionDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomRatingOptionDetail_nsprefix_) else ''
            self.CustomRatingOptionDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CustomRatingOptionDetail', pretty_print=pretty_print)
        if self.MasterTrackingId is not None:
            namespaceprefix_ = self.MasterTrackingId_nsprefix_ + ':' if (UseCapturedNS_ and self.MasterTrackingId_nsprefix_) else ''
            self.MasterTrackingId.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MasterTrackingId', pretty_print=pretty_print)
        if self.PackageCount is not None:
            namespaceprefix_ = self.PackageCount_nsprefix_ + ':' if (UseCapturedNS_ and self.PackageCount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackageCount>%s</%sPackageCount>%s' % (namespaceprefix_ , self.gds_format_integer(self.PackageCount, input_name='PackageCount'), namespaceprefix_ , eol_))
        for ShipmentOnlyFields_ in self.ShipmentOnlyFields:
            namespaceprefix_ = self.ShipmentOnlyFields_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipmentOnlyFields_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShipmentOnlyFields>%s</%sShipmentOnlyFields>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(ShipmentOnlyFields_), input_name='ShipmentOnlyFields')), namespaceprefix_ , eol_))
        if self.ConfigurationData is not None:
            namespaceprefix_ = self.ConfigurationData_nsprefix_ + ':' if (UseCapturedNS_ and self.ConfigurationData_nsprefix_) else ''
            self.ConfigurationData.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ConfigurationData', pretty_print=pretty_print)
        for RequestedPackageLineItems_ in self.RequestedPackageLineItems:
            namespaceprefix_ = self.RequestedPackageLineItems_nsprefix_ + ':' if (UseCapturedNS_ and self.RequestedPackageLineItems_nsprefix_) else ''
            RequestedPackageLineItems_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RequestedPackageLineItems', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ShipTimestamp':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.ShipTimestamp = dval_
            self.ShipTimestamp_nsprefix_ = child_.prefix
        elif nodeName_ == 'DropoffType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DropoffType')
            value_ = self.gds_validate_string(value_, node, 'DropoffType')
            self.DropoffType = value_
            self.DropoffType_nsprefix_ = child_.prefix
            # validate type DropoffType
            self.validate_DropoffType(self.DropoffType)
        elif nodeName_ == 'ServiceType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ServiceType')
            value_ = self.gds_validate_string(value_, node, 'ServiceType')
            self.ServiceType = value_
            self.ServiceType_nsprefix_ = child_.prefix
        elif nodeName_ == 'PackagingType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PackagingType')
            value_ = self.gds_validate_string(value_, node, 'PackagingType')
            self.PackagingType = value_
            self.PackagingType_nsprefix_ = child_.prefix
        elif nodeName_ == 'ShippingCycle':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ShippingCycle')
            value_ = self.gds_validate_string(value_, node, 'ShippingCycle')
            self.ShippingCycle = value_
            self.ShippingCycle_nsprefix_ = child_.prefix
        elif nodeName_ == 'VariationOptions':
            obj_ = ShipmentVariationOptionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.VariationOptions.append(obj_)
            obj_.original_tagname_ = 'VariationOptions'
        elif nodeName_ == 'TotalWeight':
            obj_ = Weight.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TotalWeight = obj_
            obj_.original_tagname_ = 'TotalWeight'
        elif nodeName_ == 'TotalInsuredValue':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TotalInsuredValue = obj_
            obj_.original_tagname_ = 'TotalInsuredValue'
        elif nodeName_ == 'TotalDimensions':
            obj_ = Dimensions.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TotalDimensions = obj_
            obj_.original_tagname_ = 'TotalDimensions'
        elif nodeName_ == 'PreferredCurrency':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PreferredCurrency')
            value_ = self.gds_validate_string(value_, node, 'PreferredCurrency')
            self.PreferredCurrency = value_
            self.PreferredCurrency_nsprefix_ = child_.prefix
        elif nodeName_ == 'ShipmentAuthorizationDetail':
            obj_ = ShipmentAuthorizationDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ShipmentAuthorizationDetail = obj_
            obj_.original_tagname_ = 'ShipmentAuthorizationDetail'
        elif nodeName_ == 'Shipper':
            obj_ = Party.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Shipper = obj_
            obj_.original_tagname_ = 'Shipper'
        elif nodeName_ == 'Recipient':
            obj_ = Party.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Recipient = obj_
            obj_.original_tagname_ = 'Recipient'
        elif nodeName_ == 'RecipientLocationNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RecipientLocationNumber')
            value_ = self.gds_validate_string(value_, node, 'RecipientLocationNumber')
            self.RecipientLocationNumber = value_
            self.RecipientLocationNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'Origin':
            obj_ = ContactAndAddress.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Origin = obj_
            obj_.original_tagname_ = 'Origin'
        elif nodeName_ == 'SoldTo':
            obj_ = Party.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SoldTo = obj_
            obj_.original_tagname_ = 'SoldTo'
        elif nodeName_ == 'ShippingChargesPayment':
            obj_ = Payment.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ShippingChargesPayment = obj_
            obj_.original_tagname_ = 'ShippingChargesPayment'
        elif nodeName_ == 'SpecialServicesRequested':
            obj_ = ShipmentSpecialServicesRequested.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SpecialServicesRequested = obj_
            obj_.original_tagname_ = 'SpecialServicesRequested'
        elif nodeName_ == 'ProcessingOptionsRequested':
            obj_ = ShipmentProcessingOptionsRequested.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ProcessingOptionsRequested = obj_
            obj_.original_tagname_ = 'ProcessingOptionsRequested'
        elif nodeName_ == 'ExpressFreightDetail':
            obj_ = ExpressFreightDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ExpressFreightDetail = obj_
            obj_.original_tagname_ = 'ExpressFreightDetail'
        elif nodeName_ == 'FreightShipmentDetail':
            obj_ = FreightShipmentDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FreightShipmentDetail = obj_
            obj_.original_tagname_ = 'FreightShipmentDetail'
        elif nodeName_ == 'ConsolidationDetail':
            obj_ = ShipmentConsolidationDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ConsolidationDetail = obj_
            obj_.original_tagname_ = 'ConsolidationDetail'
        elif nodeName_ == 'DeliveryInstructions':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DeliveryInstructions')
            value_ = self.gds_validate_string(value_, node, 'DeliveryInstructions')
            self.DeliveryInstructions = value_
            self.DeliveryInstructions_nsprefix_ = child_.prefix
        elif nodeName_ == 'VariableHandlingChargeDetail':
            obj_ = VariableHandlingChargeDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.VariableHandlingChargeDetail = obj_
            obj_.original_tagname_ = 'VariableHandlingChargeDetail'
        elif nodeName_ == 'CustomsClearanceDetail':
            obj_ = CustomsClearanceDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CustomsClearanceDetail = obj_
            obj_.original_tagname_ = 'CustomsClearanceDetail'
        elif nodeName_ == 'PickupDetail':
            obj_ = PickupDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PickupDetail = obj_
            obj_.original_tagname_ = 'PickupDetail'
        elif nodeName_ == 'SmartPostDetail':
            obj_ = SmartPostShipmentDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SmartPostDetail = obj_
            obj_.original_tagname_ = 'SmartPostDetail'
        elif nodeName_ == 'BlockInsightVisibility':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'BlockInsightVisibility')
            ival_ = self.gds_validate_boolean(ival_, node, 'BlockInsightVisibility')
            self.BlockInsightVisibility = ival_
            self.BlockInsightVisibility_nsprefix_ = child_.prefix
        elif nodeName_ == 'ErrorLabelBehavior':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ErrorLabelBehavior')
            value_ = self.gds_validate_string(value_, node, 'ErrorLabelBehavior')
            self.ErrorLabelBehavior = value_
            self.ErrorLabelBehavior_nsprefix_ = child_.prefix
            # validate type ErrorLabelBehaviorType
            self.validate_ErrorLabelBehaviorType(self.ErrorLabelBehavior)
        elif nodeName_ == 'LabelSpecification':
            obj_ = LabelSpecification.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.LabelSpecification = obj_
            obj_.original_tagname_ = 'LabelSpecification'
        elif nodeName_ == 'ShippingDocumentSpecification':
            obj_ = ShippingDocumentSpecification.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ShippingDocumentSpecification = obj_
            obj_.original_tagname_ = 'ShippingDocumentSpecification'
        elif nodeName_ == 'RateRequestTypes':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RateRequestTypes')
            value_ = self.gds_validate_string(value_, node, 'RateRequestTypes')
            self.RateRequestTypes.append(value_)
            self.RateRequestTypes_nsprefix_ = child_.prefix
            # validate type RateRequestType
            self.validate_RateRequestType(self.RateRequestTypes[-1])
        elif nodeName_ == 'CustomerSelectedActualRateType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CustomerSelectedActualRateType')
            value_ = self.gds_validate_string(value_, node, 'CustomerSelectedActualRateType')
            self.CustomerSelectedActualRateType = value_
            self.CustomerSelectedActualRateType_nsprefix_ = child_.prefix
            # validate type ReturnedRateType
            self.validate_ReturnedRateType(self.CustomerSelectedActualRateType)
        elif nodeName_ == 'EdtRequestType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EdtRequestType')
            value_ = self.gds_validate_string(value_, node, 'EdtRequestType')
            self.EdtRequestType = value_
            self.EdtRequestType_nsprefix_ = child_.prefix
            # validate type EdtRequestType
            self.validate_EdtRequestType(self.EdtRequestType)
        elif nodeName_ == 'CustomRatingOptionDetail':
            obj_ = CustomRatingOptionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CustomRatingOptionDetail = obj_
            obj_.original_tagname_ = 'CustomRatingOptionDetail'
        elif nodeName_ == 'MasterTrackingId':
            obj_ = TrackingId.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MasterTrackingId = obj_
            obj_.original_tagname_ = 'MasterTrackingId'
        elif nodeName_ == 'PackageCount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'PackageCount')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'PackageCount')
            self.PackageCount = ival_
            self.PackageCount_nsprefix_ = child_.prefix
        elif nodeName_ == 'ShipmentOnlyFields':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ShipmentOnlyFields')
            value_ = self.gds_validate_string(value_, node, 'ShipmentOnlyFields')
            self.ShipmentOnlyFields.append(value_)
            self.ShipmentOnlyFields_nsprefix_ = child_.prefix
            # validate type ShipmentOnlyFieldsType
            self.validate_ShipmentOnlyFieldsType(self.ShipmentOnlyFields[-1])
        elif nodeName_ == 'ConfigurationData':
            obj_ = ShipmentConfigurationData.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ConfigurationData = obj_
            obj_.original_tagname_ = 'ConfigurationData'
        elif nodeName_ == 'RequestedPackageLineItems':
            obj_ = RequestedPackageLineItem.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RequestedPackageLineItems.append(obj_)
            obj_.original_tagname_ = 'RequestedPackageLineItems'
# end class RequestedShipment


class RestrictionsAndPrivilegesPolicyDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ExceptionType=None, PolicyGridManifests=None, PrivilegeDetails=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ExceptionType = ExceptionType
        self.validate_RestrictionsAndPrivilegesPolicyExceptionType(self.ExceptionType)
        self.ExceptionType_nsprefix_ = "ns"
        if PolicyGridManifests is None:
            self.PolicyGridManifests = []
        else:
            self.PolicyGridManifests = PolicyGridManifests
        self.PolicyGridManifests_nsprefix_ = "ns"
        if PrivilegeDetails is None:
            self.PrivilegeDetails = []
        else:
            self.PrivilegeDetails = PrivilegeDetails
        self.PrivilegeDetails_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RestrictionsAndPrivilegesPolicyDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RestrictionsAndPrivilegesPolicyDetail.subclass:
            return RestrictionsAndPrivilegesPolicyDetail.subclass(*args_, **kwargs_)
        else:
            return RestrictionsAndPrivilegesPolicyDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ExceptionType(self):
        return self.ExceptionType
    def set_ExceptionType(self, ExceptionType):
        self.ExceptionType = ExceptionType
    def get_PolicyGridManifests(self):
        return self.PolicyGridManifests
    def set_PolicyGridManifests(self, PolicyGridManifests):
        self.PolicyGridManifests = PolicyGridManifests
    def add_PolicyGridManifests(self, value):
        self.PolicyGridManifests.append(value)
    def insert_PolicyGridManifests_at(self, index, value):
        self.PolicyGridManifests.insert(index, value)
    def replace_PolicyGridManifests_at(self, index, value):
        self.PolicyGridManifests[index] = value
    def get_PrivilegeDetails(self):
        return self.PrivilegeDetails
    def set_PrivilegeDetails(self, PrivilegeDetails):
        self.PrivilegeDetails = PrivilegeDetails
    def add_PrivilegeDetails(self, value):
        self.PrivilegeDetails.append(value)
    def insert_PrivilegeDetails_at(self, index, value):
        self.PrivilegeDetails.insert(index, value)
    def replace_PrivilegeDetails_at(self, index, value):
        self.PrivilegeDetails[index] = value
    def validate_RestrictionsAndPrivilegesPolicyExceptionType(self, value):
        result = True
        # Validate type RestrictionsAndPrivilegesPolicyExceptionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['POLICIES_NOT_FOUND', 'SERVICE_UNAVAILABLE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on RestrictionsAndPrivilegesPolicyExceptionType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.ExceptionType is not None or
            self.PolicyGridManifests or
            self.PrivilegeDetails
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RestrictionsAndPrivilegesPolicyDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RestrictionsAndPrivilegesPolicyDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RestrictionsAndPrivilegesPolicyDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RestrictionsAndPrivilegesPolicyDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RestrictionsAndPrivilegesPolicyDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RestrictionsAndPrivilegesPolicyDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RestrictionsAndPrivilegesPolicyDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ExceptionType is not None:
            namespaceprefix_ = self.ExceptionType_nsprefix_ + ':' if (UseCapturedNS_ and self.ExceptionType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExceptionType>%s</%sExceptionType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ExceptionType), input_name='ExceptionType')), namespaceprefix_ , eol_))
        for PolicyGridManifests_ in self.PolicyGridManifests:
            namespaceprefix_ = self.PolicyGridManifests_nsprefix_ + ':' if (UseCapturedNS_ and self.PolicyGridManifests_nsprefix_) else ''
            PolicyGridManifests_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PolicyGridManifests', pretty_print=pretty_print)
        for PrivilegeDetails_ in self.PrivilegeDetails:
            namespaceprefix_ = self.PrivilegeDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.PrivilegeDetails_nsprefix_) else ''
            PrivilegeDetails_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PrivilegeDetails', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ExceptionType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ExceptionType')
            value_ = self.gds_validate_string(value_, node, 'ExceptionType')
            self.ExceptionType = value_
            self.ExceptionType_nsprefix_ = child_.prefix
            # validate type RestrictionsAndPrivilegesPolicyExceptionType
            self.validate_RestrictionsAndPrivilegesPolicyExceptionType(self.ExceptionType)
        elif nodeName_ == 'PolicyGridManifests':
            obj_ = PolicyGridManifest.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PolicyGridManifests.append(obj_)
            obj_.original_tagname_ = 'PolicyGridManifests'
        elif nodeName_ == 'PrivilegeDetails':
            obj_ = EnterprisePrivilegeDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PrivilegeDetails.append(obj_)
            obj_.original_tagname_ = 'PrivilegeDetails'
# end class RestrictionsAndPrivilegesPolicyDetail


class ReturnAssociationDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, TrackingNumber=None, ShipDate=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.TrackingNumber = TrackingNumber
        self.TrackingNumber_nsprefix_ = None
        if isinstance(ShipDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ShipDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ShipDate
        self.ShipDate = initvalue_
        self.ShipDate_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReturnAssociationDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReturnAssociationDetail.subclass:
            return ReturnAssociationDetail.subclass(*args_, **kwargs_)
        else:
            return ReturnAssociationDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_TrackingNumber(self):
        return self.TrackingNumber
    def set_TrackingNumber(self, TrackingNumber):
        self.TrackingNumber = TrackingNumber
    def get_ShipDate(self):
        return self.ShipDate
    def set_ShipDate(self, ShipDate):
        self.ShipDate = ShipDate
    def hasContent_(self):
        if (
            self.TrackingNumber is not None or
            self.ShipDate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ReturnAssociationDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReturnAssociationDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ReturnAssociationDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ReturnAssociationDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ReturnAssociationDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ReturnAssociationDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ReturnAssociationDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TrackingNumber is not None:
            namespaceprefix_ = self.TrackingNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.TrackingNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTrackingNumber>%s</%sTrackingNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TrackingNumber), input_name='TrackingNumber')), namespaceprefix_ , eol_))
        if self.ShipDate is not None:
            namespaceprefix_ = self.ShipDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShipDate>%s</%sShipDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ShipDate, input_name='ShipDate'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'TrackingNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TrackingNumber')
            value_ = self.gds_validate_string(value_, node, 'TrackingNumber')
            self.TrackingNumber = value_
            self.TrackingNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'ShipDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ShipDate = dval_
            self.ShipDate_nsprefix_ = child_.prefix
# end class ReturnAssociationDetail


class ReturnEMailDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, MerchantPhoneNumber=None, AllowedSpecialServices=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.MerchantPhoneNumber = MerchantPhoneNumber
        self.MerchantPhoneNumber_nsprefix_ = None
        if AllowedSpecialServices is None:
            self.AllowedSpecialServices = []
        else:
            self.AllowedSpecialServices = AllowedSpecialServices
        self.AllowedSpecialServices_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReturnEMailDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReturnEMailDetail.subclass:
            return ReturnEMailDetail.subclass(*args_, **kwargs_)
        else:
            return ReturnEMailDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_MerchantPhoneNumber(self):
        return self.MerchantPhoneNumber
    def set_MerchantPhoneNumber(self, MerchantPhoneNumber):
        self.MerchantPhoneNumber = MerchantPhoneNumber
    def get_AllowedSpecialServices(self):
        return self.AllowedSpecialServices
    def set_AllowedSpecialServices(self, AllowedSpecialServices):
        self.AllowedSpecialServices = AllowedSpecialServices
    def add_AllowedSpecialServices(self, value):
        self.AllowedSpecialServices.append(value)
    def insert_AllowedSpecialServices_at(self, index, value):
        self.AllowedSpecialServices.insert(index, value)
    def replace_AllowedSpecialServices_at(self, index, value):
        self.AllowedSpecialServices[index] = value
    def validate_ReturnEMailAllowedSpecialServiceType(self, value):
        result = True
        # Validate type ReturnEMailAllowedSpecialServiceType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['SATURDAY_DELIVERY', 'SATURDAY_PICKUP']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ReturnEMailAllowedSpecialServiceType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.MerchantPhoneNumber is not None or
            self.AllowedSpecialServices
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ReturnEMailDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReturnEMailDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ReturnEMailDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ReturnEMailDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ReturnEMailDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ReturnEMailDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ReturnEMailDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MerchantPhoneNumber is not None:
            namespaceprefix_ = self.MerchantPhoneNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.MerchantPhoneNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMerchantPhoneNumber>%s</%sMerchantPhoneNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MerchantPhoneNumber), input_name='MerchantPhoneNumber')), namespaceprefix_ , eol_))
        for AllowedSpecialServices_ in self.AllowedSpecialServices:
            namespaceprefix_ = self.AllowedSpecialServices_nsprefix_ + ':' if (UseCapturedNS_ and self.AllowedSpecialServices_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowedSpecialServices>%s</%sAllowedSpecialServices>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(AllowedSpecialServices_), input_name='AllowedSpecialServices')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'MerchantPhoneNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MerchantPhoneNumber')
            value_ = self.gds_validate_string(value_, node, 'MerchantPhoneNumber')
            self.MerchantPhoneNumber = value_
            self.MerchantPhoneNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'AllowedSpecialServices':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AllowedSpecialServices')
            value_ = self.gds_validate_string(value_, node, 'AllowedSpecialServices')
            self.AllowedSpecialServices.append(value_)
            self.AllowedSpecialServices_nsprefix_ = child_.prefix
            # validate type ReturnEMailAllowedSpecialServiceType
            self.validate_ReturnEMailAllowedSpecialServiceType(self.AllowedSpecialServices[-1])
# end class ReturnEMailDetail


class ReturnInstructionsDetail(GeneratedsSuper):
    """The instructions indicating how to print the return instructions( e.g.
    image type) Specifies characteristics of a shipping document to be
    produced."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Format=None, CustomText=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Format = Format
        self.Format_nsprefix_ = "ns"
        self.CustomText = CustomText
        self.CustomText_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReturnInstructionsDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReturnInstructionsDetail.subclass:
            return ReturnInstructionsDetail.subclass(*args_, **kwargs_)
        else:
            return ReturnInstructionsDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Format(self):
        return self.Format
    def set_Format(self, Format):
        self.Format = Format
    def get_CustomText(self):
        return self.CustomText
    def set_CustomText(self, CustomText):
        self.CustomText = CustomText
    def hasContent_(self):
        if (
            self.Format is not None or
            self.CustomText is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ReturnInstructionsDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReturnInstructionsDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ReturnInstructionsDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ReturnInstructionsDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ReturnInstructionsDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ReturnInstructionsDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ReturnInstructionsDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Format is not None:
            namespaceprefix_ = self.Format_nsprefix_ + ':' if (UseCapturedNS_ and self.Format_nsprefix_) else ''
            self.Format.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Format', pretty_print=pretty_print)
        if self.CustomText is not None:
            namespaceprefix_ = self.CustomText_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomText_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCustomText>%s</%sCustomText>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CustomText), input_name='CustomText')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Format':
            obj_ = ShippingDocumentFormat.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Format = obj_
            obj_.original_tagname_ = 'Format'
        elif nodeName_ == 'CustomText':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CustomText')
            value_ = self.gds_validate_string(value_, node, 'CustomText')
            self.CustomText = value_
            self.CustomText_nsprefix_ = child_.prefix
# end class ReturnInstructionsDetail


class ReturnShipmentDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ReturnType=None, Rma=None, ReturnEMailDetail=None, ReturnAssociation=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ReturnType = ReturnType
        self.validate_ReturnType(self.ReturnType)
        self.ReturnType_nsprefix_ = "ns"
        self.Rma = Rma
        self.Rma_nsprefix_ = "ns"
        self.ReturnEMailDetail = ReturnEMailDetail
        self.ReturnEMailDetail_nsprefix_ = "ns"
        self.ReturnAssociation = ReturnAssociation
        self.ReturnAssociation_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReturnShipmentDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReturnShipmentDetail.subclass:
            return ReturnShipmentDetail.subclass(*args_, **kwargs_)
        else:
            return ReturnShipmentDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ReturnType(self):
        return self.ReturnType
    def set_ReturnType(self, ReturnType):
        self.ReturnType = ReturnType
    def get_Rma(self):
        return self.Rma
    def set_Rma(self, Rma):
        self.Rma = Rma
    def get_ReturnEMailDetail(self):
        return self.ReturnEMailDetail
    def set_ReturnEMailDetail(self, ReturnEMailDetail):
        self.ReturnEMailDetail = ReturnEMailDetail
    def get_ReturnAssociation(self):
        return self.ReturnAssociation
    def set_ReturnAssociation(self, ReturnAssociation):
        self.ReturnAssociation = ReturnAssociation
    def validate_ReturnType(self, value):
        result = True
        # Validate type ReturnType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FEDEX_TAG', 'NET_RETURN', 'PENDING', 'PRINT_RETURN_LABEL', 'VOICE_CALL_TAG']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ReturnType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.ReturnType is not None or
            self.Rma is not None or
            self.ReturnEMailDetail is not None or
            self.ReturnAssociation is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ReturnShipmentDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReturnShipmentDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ReturnShipmentDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ReturnShipmentDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ReturnShipmentDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ReturnShipmentDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ReturnShipmentDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReturnType is not None:
            namespaceprefix_ = self.ReturnType_nsprefix_ + ':' if (UseCapturedNS_ and self.ReturnType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReturnType>%s</%sReturnType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ReturnType), input_name='ReturnType')), namespaceprefix_ , eol_))
        if self.Rma is not None:
            namespaceprefix_ = self.Rma_nsprefix_ + ':' if (UseCapturedNS_ and self.Rma_nsprefix_) else ''
            self.Rma.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Rma', pretty_print=pretty_print)
        if self.ReturnEMailDetail is not None:
            namespaceprefix_ = self.ReturnEMailDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.ReturnEMailDetail_nsprefix_) else ''
            self.ReturnEMailDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ReturnEMailDetail', pretty_print=pretty_print)
        if self.ReturnAssociation is not None:
            namespaceprefix_ = self.ReturnAssociation_nsprefix_ + ':' if (UseCapturedNS_ and self.ReturnAssociation_nsprefix_) else ''
            self.ReturnAssociation.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ReturnAssociation', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ReturnType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ReturnType')
            value_ = self.gds_validate_string(value_, node, 'ReturnType')
            self.ReturnType = value_
            self.ReturnType_nsprefix_ = child_.prefix
            # validate type ReturnType
            self.validate_ReturnType(self.ReturnType)
        elif nodeName_ == 'Rma':
            obj_ = Rma.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Rma = obj_
            obj_.original_tagname_ = 'Rma'
        elif nodeName_ == 'ReturnEMailDetail':
            obj_ = ReturnEMailDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ReturnEMailDetail = obj_
            obj_.original_tagname_ = 'ReturnEMailDetail'
        elif nodeName_ == 'ReturnAssociation':
            obj_ = ReturnAssociationDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ReturnAssociation = obj_
            obj_.original_tagname_ = 'ReturnAssociation'
# end class ReturnShipmentDetail


class Rma(GeneratedsSuper):
    """June 2011 ITG 121203 IR-RMA number has been removed from this structure
    and added as a new customer reference type. The structure remains
    because of the reason field below."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Reason=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Reason = Reason
        self.Reason_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Rma)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Rma.subclass:
            return Rma.subclass(*args_, **kwargs_)
        else:
            return Rma(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Reason(self):
        return self.Reason
    def set_Reason(self, Reason):
        self.Reason = Reason
    def hasContent_(self):
        if (
            self.Reason is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Rma', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Rma')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Rma':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Rma')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Rma', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Rma'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Rma', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Reason is not None:
            namespaceprefix_ = self.Reason_nsprefix_ + ':' if (UseCapturedNS_ and self.Reason_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReason>%s</%sReason>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Reason), input_name='Reason')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Reason':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Reason')
            value_ = self.gds_validate_string(value_, node, 'Reason')
            self.Reason = value_
            self.Reason_nsprefix_ = child_.prefix
# end class Rma


class ServiceAvailabilityOption(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Service=None, DeliveryDate=None, DeliveryDay=None, DestinationStationId=None, DestinationAirportId=None, TransitTime=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Service = Service
        self.Service_nsprefix_ = None
        if isinstance(DeliveryDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(DeliveryDate, '%Y-%m-%d').date()
        else:
            initvalue_ = DeliveryDate
        self.DeliveryDate = initvalue_
        self.DeliveryDate_nsprefix_ = None
        self.DeliveryDay = DeliveryDay
        self.validate_DayOfWeekType(self.DeliveryDay)
        self.DeliveryDay_nsprefix_ = "ns"
        self.DestinationStationId = DestinationStationId
        self.DestinationStationId_nsprefix_ = None
        self.DestinationAirportId = DestinationAirportId
        self.DestinationAirportId_nsprefix_ = None
        self.TransitTime = TransitTime
        self.validate_TransitTimeType(self.TransitTime)
        self.TransitTime_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ServiceAvailabilityOption)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ServiceAvailabilityOption.subclass:
            return ServiceAvailabilityOption.subclass(*args_, **kwargs_)
        else:
            return ServiceAvailabilityOption(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Service(self):
        return self.Service
    def set_Service(self, Service):
        self.Service = Service
    def get_DeliveryDate(self):
        return self.DeliveryDate
    def set_DeliveryDate(self, DeliveryDate):
        self.DeliveryDate = DeliveryDate
    def get_DeliveryDay(self):
        return self.DeliveryDay
    def set_DeliveryDay(self, DeliveryDay):
        self.DeliveryDay = DeliveryDay
    def get_DestinationStationId(self):
        return self.DestinationStationId
    def set_DestinationStationId(self, DestinationStationId):
        self.DestinationStationId = DestinationStationId
    def get_DestinationAirportId(self):
        return self.DestinationAirportId
    def set_DestinationAirportId(self, DestinationAirportId):
        self.DestinationAirportId = DestinationAirportId
    def get_TransitTime(self):
        return self.TransitTime
    def set_TransitTime(self, TransitTime):
        self.TransitTime = TransitTime
    def validate_DayOfWeekType(self, value):
        result = True
        # Validate type DayOfWeekType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FRI', 'MON', 'SAT', 'SUN', 'THU', 'TUE', 'WED']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on DayOfWeekType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_TransitTimeType(self, value):
        result = True
        # Validate type TransitTimeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['EIGHTEEN_DAYS', 'EIGHT_DAYS', 'ELEVEN_DAYS', 'FIFTEEN_DAYS', 'FIVE_DAYS', 'FOURTEEN_DAYS', 'FOUR_DAYS', 'NINETEEN_DAYS', 'NINE_DAYS', 'ONE_DAY', 'SEVENTEEN_DAYS', 'SEVEN_DAYS', 'SIXTEEN_DAYS', 'SIX_DAYS', 'TEN_DAYS', 'THIRTEEN_DAYS', 'THREE_DAYS', 'TWELVE_DAYS', 'TWENTY_DAYS', 'TWO_DAYS', 'UNKNOWN']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on TransitTimeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Service is not None or
            self.DeliveryDate is not None or
            self.DeliveryDay is not None or
            self.DestinationStationId is not None or
            self.DestinationAirportId is not None or
            self.TransitTime is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ServiceAvailabilityOption', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ServiceAvailabilityOption')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ServiceAvailabilityOption':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ServiceAvailabilityOption')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ServiceAvailabilityOption', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ServiceAvailabilityOption'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ServiceAvailabilityOption', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Service is not None:
            namespaceprefix_ = self.Service_nsprefix_ + ':' if (UseCapturedNS_ and self.Service_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sService>%s</%sService>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Service), input_name='Service')), namespaceprefix_ , eol_))
        if self.DeliveryDate is not None:
            namespaceprefix_ = self.DeliveryDate_nsprefix_ + ':' if (UseCapturedNS_ and self.DeliveryDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDeliveryDate>%s</%sDeliveryDate>%s' % (namespaceprefix_ , self.gds_format_date(self.DeliveryDate, input_name='DeliveryDate'), namespaceprefix_ , eol_))
        if self.DeliveryDay is not None:
            namespaceprefix_ = self.DeliveryDay_nsprefix_ + ':' if (UseCapturedNS_ and self.DeliveryDay_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDeliveryDay>%s</%sDeliveryDay>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DeliveryDay), input_name='DeliveryDay')), namespaceprefix_ , eol_))
        if self.DestinationStationId is not None:
            namespaceprefix_ = self.DestinationStationId_nsprefix_ + ':' if (UseCapturedNS_ and self.DestinationStationId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDestinationStationId>%s</%sDestinationStationId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DestinationStationId), input_name='DestinationStationId')), namespaceprefix_ , eol_))
        if self.DestinationAirportId is not None:
            namespaceprefix_ = self.DestinationAirportId_nsprefix_ + ':' if (UseCapturedNS_ and self.DestinationAirportId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDestinationAirportId>%s</%sDestinationAirportId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DestinationAirportId), input_name='DestinationAirportId')), namespaceprefix_ , eol_))
        if self.TransitTime is not None:
            namespaceprefix_ = self.TransitTime_nsprefix_ + ':' if (UseCapturedNS_ and self.TransitTime_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransitTime>%s</%sTransitTime>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TransitTime), input_name='TransitTime')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Service':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Service')
            value_ = self.gds_validate_string(value_, node, 'Service')
            self.Service = value_
            self.Service_nsprefix_ = child_.prefix
        elif nodeName_ == 'DeliveryDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.DeliveryDate = dval_
            self.DeliveryDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'DeliveryDay':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DeliveryDay')
            value_ = self.gds_validate_string(value_, node, 'DeliveryDay')
            self.DeliveryDay = value_
            self.DeliveryDay_nsprefix_ = child_.prefix
            # validate type DayOfWeekType
            self.validate_DayOfWeekType(self.DeliveryDay)
        elif nodeName_ == 'DestinationStationId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DestinationStationId')
            value_ = self.gds_validate_string(value_, node, 'DestinationStationId')
            self.DestinationStationId = value_
            self.DestinationStationId_nsprefix_ = child_.prefix
        elif nodeName_ == 'DestinationAirportId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DestinationAirportId')
            value_ = self.gds_validate_string(value_, node, 'DestinationAirportId')
            self.DestinationAirportId = value_
            self.DestinationAirportId_nsprefix_ = child_.prefix
        elif nodeName_ == 'TransitTime':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TransitTime')
            value_ = self.gds_validate_string(value_, node, 'TransitTime')
            self.TransitTime = value_
            self.TransitTime_nsprefix_ = child_.prefix
            # validate type TransitTimeType
            self.validate_TransitTimeType(self.TransitTime)
# end class ServiceAvailabilityOption


class ServiceAvailabilityReply(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, HighestSeverity=None, Notifications=None, TransactionDetail=None, Version=None, Options=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.HighestSeverity = HighestSeverity
        self.validate_NotificationSeverityType(self.HighestSeverity)
        self.HighestSeverity_nsprefix_ = "ns"
        if Notifications is None:
            self.Notifications = []
        else:
            self.Notifications = Notifications
        self.Notifications_nsprefix_ = "ns"
        self.TransactionDetail = TransactionDetail
        self.TransactionDetail_nsprefix_ = "ns"
        self.Version = Version
        self.Version_nsprefix_ = "ns"
        if Options is None:
            self.Options = []
        else:
            self.Options = Options
        self.Options_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ServiceAvailabilityReply)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ServiceAvailabilityReply.subclass:
            return ServiceAvailabilityReply.subclass(*args_, **kwargs_)
        else:
            return ServiceAvailabilityReply(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_HighestSeverity(self):
        return self.HighestSeverity
    def set_HighestSeverity(self, HighestSeverity):
        self.HighestSeverity = HighestSeverity
    def get_Notifications(self):
        return self.Notifications
    def set_Notifications(self, Notifications):
        self.Notifications = Notifications
    def add_Notifications(self, value):
        self.Notifications.append(value)
    def insert_Notifications_at(self, index, value):
        self.Notifications.insert(index, value)
    def replace_Notifications_at(self, index, value):
        self.Notifications[index] = value
    def get_TransactionDetail(self):
        return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail):
        self.TransactionDetail = TransactionDetail
    def get_Version(self):
        return self.Version
    def set_Version(self, Version):
        self.Version = Version
    def get_Options(self):
        return self.Options
    def set_Options(self, Options):
        self.Options = Options
    def add_Options(self, value):
        self.Options.append(value)
    def insert_Options_at(self, index, value):
        self.Options.insert(index, value)
    def replace_Options_at(self, index, value):
        self.Options[index] = value
    def validate_NotificationSeverityType(self, value):
        result = True
        # Validate type NotificationSeverityType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ERROR', 'FAILURE', 'NOTE', 'SUCCESS', 'WARNING']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on NotificationSeverityType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.HighestSeverity is not None or
            self.Notifications or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.Options
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ServiceAvailabilityReply', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ServiceAvailabilityReply')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ServiceAvailabilityReply':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ServiceAvailabilityReply')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ServiceAvailabilityReply', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ServiceAvailabilityReply'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ServiceAvailabilityReply', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.HighestSeverity is not None:
            namespaceprefix_ = self.HighestSeverity_nsprefix_ + ':' if (UseCapturedNS_ and self.HighestSeverity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHighestSeverity>%s</%sHighestSeverity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.HighestSeverity), input_name='HighestSeverity')), namespaceprefix_ , eol_))
        for Notifications_ in self.Notifications:
            namespaceprefix_ = self.Notifications_nsprefix_ + ':' if (UseCapturedNS_ and self.Notifications_nsprefix_) else ''
            Notifications_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Notifications', pretty_print=pretty_print)
        if self.TransactionDetail is not None:
            namespaceprefix_ = self.TransactionDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.TransactionDetail_nsprefix_) else ''
            self.TransactionDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TransactionDetail', pretty_print=pretty_print)
        if self.Version is not None:
            namespaceprefix_ = self.Version_nsprefix_ + ':' if (UseCapturedNS_ and self.Version_nsprefix_) else ''
            self.Version.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Version', pretty_print=pretty_print)
        for Options_ in self.Options:
            namespaceprefix_ = self.Options_nsprefix_ + ':' if (UseCapturedNS_ and self.Options_nsprefix_) else ''
            Options_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Options', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'HighestSeverity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'HighestSeverity')
            value_ = self.gds_validate_string(value_, node, 'HighestSeverity')
            self.HighestSeverity = value_
            self.HighestSeverity_nsprefix_ = child_.prefix
            # validate type NotificationSeverityType
            self.validate_NotificationSeverityType(self.HighestSeverity)
        elif nodeName_ == 'Notifications':
            obj_ = Notification.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Notifications.append(obj_)
            obj_.original_tagname_ = 'Notifications'
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TransactionDetail = obj_
            obj_.original_tagname_ = 'TransactionDetail'
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Version = obj_
            obj_.original_tagname_ = 'Version'
        elif nodeName_ == 'Options':
            obj_ = ServiceAvailabilityOption.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Options.append(obj_)
            obj_.original_tagname_ = 'Options'
# end class ServiceAvailabilityReply


class ServiceAvailabilityRequest(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, WebAuthenticationDetail=None, ClientDetail=None, UserDetail=None, TransactionDetail=None, Version=None, Origin=None, Destination=None, ShipDate=None, CarrierCode=None, Service=None, Packaging=None, PackageCount=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.WebAuthenticationDetail = WebAuthenticationDetail
        self.WebAuthenticationDetail_nsprefix_ = "ns"
        self.ClientDetail = ClientDetail
        self.ClientDetail_nsprefix_ = "ns"
        self.UserDetail = UserDetail
        self.UserDetail_nsprefix_ = "ns"
        self.TransactionDetail = TransactionDetail
        self.TransactionDetail_nsprefix_ = "ns"
        self.Version = Version
        self.Version_nsprefix_ = "ns"
        self.Origin = Origin
        self.Origin_nsprefix_ = "ns"
        self.Destination = Destination
        self.Destination_nsprefix_ = "ns"
        if isinstance(ShipDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ShipDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ShipDate
        self.ShipDate = initvalue_
        self.ShipDate_nsprefix_ = None
        self.CarrierCode = CarrierCode
        self.validate_CarrierCodeType(self.CarrierCode)
        self.CarrierCode_nsprefix_ = "ns"
        self.Service = Service
        self.Service_nsprefix_ = None
        self.Packaging = Packaging
        self.Packaging_nsprefix_ = None
        self.PackageCount = PackageCount
        self.PackageCount_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ServiceAvailabilityRequest)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ServiceAvailabilityRequest.subclass:
            return ServiceAvailabilityRequest.subclass(*args_, **kwargs_)
        else:
            return ServiceAvailabilityRequest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_WebAuthenticationDetail(self):
        return self.WebAuthenticationDetail
    def set_WebAuthenticationDetail(self, WebAuthenticationDetail):
        self.WebAuthenticationDetail = WebAuthenticationDetail
    def get_ClientDetail(self):
        return self.ClientDetail
    def set_ClientDetail(self, ClientDetail):
        self.ClientDetail = ClientDetail
    def get_UserDetail(self):
        return self.UserDetail
    def set_UserDetail(self, UserDetail):
        self.UserDetail = UserDetail
    def get_TransactionDetail(self):
        return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail):
        self.TransactionDetail = TransactionDetail
    def get_Version(self):
        return self.Version
    def set_Version(self, Version):
        self.Version = Version
    def get_Origin(self):
        return self.Origin
    def set_Origin(self, Origin):
        self.Origin = Origin
    def get_Destination(self):
        return self.Destination
    def set_Destination(self, Destination):
        self.Destination = Destination
    def get_ShipDate(self):
        return self.ShipDate
    def set_ShipDate(self, ShipDate):
        self.ShipDate = ShipDate
    def get_CarrierCode(self):
        return self.CarrierCode
    def set_CarrierCode(self, CarrierCode):
        self.CarrierCode = CarrierCode
    def get_Service(self):
        return self.Service
    def set_Service(self, Service):
        self.Service = Service
    def get_Packaging(self):
        return self.Packaging
    def set_Packaging(self, Packaging):
        self.Packaging = Packaging
    def get_PackageCount(self):
        return self.PackageCount
    def set_PackageCount(self, PackageCount):
        self.PackageCount = PackageCount
    def validate_CarrierCodeType(self, value):
        result = True
        # Validate type CarrierCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FDXC', 'FDXE', 'FDXG', 'FDXO', 'FXCC', 'FXFR', 'FXSP']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CarrierCodeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.WebAuthenticationDetail is not None or
            self.ClientDetail is not None or
            self.UserDetail is not None or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.Origin is not None or
            self.Destination is not None or
            self.ShipDate is not None or
            self.CarrierCode is not None or
            self.Service is not None or
            self.Packaging is not None or
            self.PackageCount is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ServiceAvailabilityRequest', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ServiceAvailabilityRequest')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ServiceAvailabilityRequest':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ServiceAvailabilityRequest')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ServiceAvailabilityRequest', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ServiceAvailabilityRequest'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ServiceAvailabilityRequest', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.WebAuthenticationDetail is not None:
            namespaceprefix_ = self.WebAuthenticationDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.WebAuthenticationDetail_nsprefix_) else ''
            self.WebAuthenticationDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='WebAuthenticationDetail', pretty_print=pretty_print)
        if self.ClientDetail is not None:
            namespaceprefix_ = self.ClientDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.ClientDetail_nsprefix_) else ''
            self.ClientDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ClientDetail', pretty_print=pretty_print)
        if self.UserDetail is not None:
            namespaceprefix_ = self.UserDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.UserDetail_nsprefix_) else ''
            self.UserDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='UserDetail', pretty_print=pretty_print)
        if self.TransactionDetail is not None:
            namespaceprefix_ = self.TransactionDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.TransactionDetail_nsprefix_) else ''
            self.TransactionDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TransactionDetail', pretty_print=pretty_print)
        if self.Version is not None:
            namespaceprefix_ = self.Version_nsprefix_ + ':' if (UseCapturedNS_ and self.Version_nsprefix_) else ''
            self.Version.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Version', pretty_print=pretty_print)
        if self.Origin is not None:
            namespaceprefix_ = self.Origin_nsprefix_ + ':' if (UseCapturedNS_ and self.Origin_nsprefix_) else ''
            self.Origin.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Origin', pretty_print=pretty_print)
        if self.Destination is not None:
            namespaceprefix_ = self.Destination_nsprefix_ + ':' if (UseCapturedNS_ and self.Destination_nsprefix_) else ''
            self.Destination.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Destination', pretty_print=pretty_print)
        if self.ShipDate is not None:
            namespaceprefix_ = self.ShipDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShipDate>%s</%sShipDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ShipDate, input_name='ShipDate'), namespaceprefix_ , eol_))
        if self.CarrierCode is not None:
            namespaceprefix_ = self.CarrierCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CarrierCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCarrierCode>%s</%sCarrierCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CarrierCode), input_name='CarrierCode')), namespaceprefix_ , eol_))
        if self.Service is not None:
            namespaceprefix_ = self.Service_nsprefix_ + ':' if (UseCapturedNS_ and self.Service_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sService>%s</%sService>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Service), input_name='Service')), namespaceprefix_ , eol_))
        if self.Packaging is not None:
            namespaceprefix_ = self.Packaging_nsprefix_ + ':' if (UseCapturedNS_ and self.Packaging_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackaging>%s</%sPackaging>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Packaging), input_name='Packaging')), namespaceprefix_ , eol_))
        if self.PackageCount is not None:
            namespaceprefix_ = self.PackageCount_nsprefix_ + ':' if (UseCapturedNS_ and self.PackageCount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackageCount>%s</%sPackageCount>%s' % (namespaceprefix_ , self.gds_format_integer(self.PackageCount, input_name='PackageCount'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'WebAuthenticationDetail':
            obj_ = WebAuthenticationDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.WebAuthenticationDetail = obj_
            obj_.original_tagname_ = 'WebAuthenticationDetail'
        elif nodeName_ == 'ClientDetail':
            obj_ = ClientDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ClientDetail = obj_
            obj_.original_tagname_ = 'ClientDetail'
        elif nodeName_ == 'UserDetail':
            obj_ = UserDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.UserDetail = obj_
            obj_.original_tagname_ = 'UserDetail'
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TransactionDetail = obj_
            obj_.original_tagname_ = 'TransactionDetail'
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Version = obj_
            obj_.original_tagname_ = 'Version'
        elif nodeName_ == 'Origin':
            obj_ = Address.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Origin = obj_
            obj_.original_tagname_ = 'Origin'
        elif nodeName_ == 'Destination':
            obj_ = Address.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Destination = obj_
            obj_.original_tagname_ = 'Destination'
        elif nodeName_ == 'ShipDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ShipDate = dval_
            self.ShipDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'CarrierCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CarrierCode')
            value_ = self.gds_validate_string(value_, node, 'CarrierCode')
            self.CarrierCode = value_
            self.CarrierCode_nsprefix_ = child_.prefix
            # validate type CarrierCodeType
            self.validate_CarrierCodeType(self.CarrierCode)
        elif nodeName_ == 'Service':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Service')
            value_ = self.gds_validate_string(value_, node, 'Service')
            self.Service = value_
            self.Service_nsprefix_ = child_.prefix
        elif nodeName_ == 'Packaging':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Packaging')
            value_ = self.gds_validate_string(value_, node, 'Packaging')
            self.Packaging = value_
            self.Packaging_nsprefix_ = child_.prefix
        elif nodeName_ == 'PackageCount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'PackageCount')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'PackageCount')
            self.PackageCount = ival_
            self.PackageCount_nsprefix_ = child_.prefix
# end class ServiceAvailabilityRequest


class ServiceDescription(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ServiceType=None, Code=None, Names=None, Description=None, AstraDescription=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ServiceType = ServiceType
        self.ServiceType_nsprefix_ = None
        self.Code = Code
        self.Code_nsprefix_ = None
        if Names is None:
            self.Names = []
        else:
            self.Names = Names
        self.Names_nsprefix_ = "ns"
        self.Description = Description
        self.Description_nsprefix_ = None
        self.AstraDescription = AstraDescription
        self.AstraDescription_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ServiceDescription)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ServiceDescription.subclass:
            return ServiceDescription.subclass(*args_, **kwargs_)
        else:
            return ServiceDescription(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ServiceType(self):
        return self.ServiceType
    def set_ServiceType(self, ServiceType):
        self.ServiceType = ServiceType
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def get_Names(self):
        return self.Names
    def set_Names(self, Names):
        self.Names = Names
    def add_Names(self, value):
        self.Names.append(value)
    def insert_Names_at(self, index, value):
        self.Names.insert(index, value)
    def replace_Names_at(self, index, value):
        self.Names[index] = value
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def get_AstraDescription(self):
        return self.AstraDescription
    def set_AstraDescription(self, AstraDescription):
        self.AstraDescription = AstraDescription
    def hasContent_(self):
        if (
            self.ServiceType is not None or
            self.Code is not None or
            self.Names or
            self.Description is not None or
            self.AstraDescription is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ServiceDescription', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ServiceDescription')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ServiceDescription':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ServiceDescription')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ServiceDescription', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ServiceDescription'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ServiceDescription', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ServiceType is not None:
            namespaceprefix_ = self.ServiceType_nsprefix_ + ':' if (UseCapturedNS_ and self.ServiceType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sServiceType>%s</%sServiceType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ServiceType), input_name='ServiceType')), namespaceprefix_ , eol_))
        if self.Code is not None:
            namespaceprefix_ = self.Code_nsprefix_ + ':' if (UseCapturedNS_ and self.Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), namespaceprefix_ , eol_))
        for Names_ in self.Names:
            namespaceprefix_ = self.Names_nsprefix_ + ':' if (UseCapturedNS_ and self.Names_nsprefix_) else ''
            Names_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Names', pretty_print=pretty_print)
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
        if self.AstraDescription is not None:
            namespaceprefix_ = self.AstraDescription_nsprefix_ + ':' if (UseCapturedNS_ and self.AstraDescription_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAstraDescription>%s</%sAstraDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AstraDescription), input_name='AstraDescription')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ServiceType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ServiceType')
            value_ = self.gds_validate_string(value_, node, 'ServiceType')
            self.ServiceType = value_
            self.ServiceType_nsprefix_ = child_.prefix
        elif nodeName_ == 'Code':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Code')
            value_ = self.gds_validate_string(value_, node, 'Code')
            self.Code = value_
            self.Code_nsprefix_ = child_.prefix
        elif nodeName_ == 'Names':
            obj_ = ProductName.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Names.append(obj_)
            obj_.original_tagname_ = 'Names'
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
        elif nodeName_ == 'AstraDescription':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AstraDescription')
            value_ = self.gds_validate_string(value_, node, 'AstraDescription')
            self.AstraDescription = value_
            self.AstraDescription_nsprefix_ = child_.prefix
# end class ServiceDescription


class ServiceSubOptionDetail(GeneratedsSuper):
    """Supporting detail for applied options identified in a rate quote."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, FreightGuarantee=None, SmartPostHubId=None, SmartPostIndicia=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.FreightGuarantee = FreightGuarantee
        self.validate_FreightGuaranteeType(self.FreightGuarantee)
        self.FreightGuarantee_nsprefix_ = "ns"
        self.SmartPostHubId = SmartPostHubId
        self.SmartPostHubId_nsprefix_ = None
        self.SmartPostIndicia = SmartPostIndicia
        self.validate_SmartPostIndiciaType(self.SmartPostIndicia)
        self.SmartPostIndicia_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ServiceSubOptionDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ServiceSubOptionDetail.subclass:
            return ServiceSubOptionDetail.subclass(*args_, **kwargs_)
        else:
            return ServiceSubOptionDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_FreightGuarantee(self):
        return self.FreightGuarantee
    def set_FreightGuarantee(self, FreightGuarantee):
        self.FreightGuarantee = FreightGuarantee
    def get_SmartPostHubId(self):
        return self.SmartPostHubId
    def set_SmartPostHubId(self, SmartPostHubId):
        self.SmartPostHubId = SmartPostHubId
    def get_SmartPostIndicia(self):
        return self.SmartPostIndicia
    def set_SmartPostIndicia(self, SmartPostIndicia):
        self.SmartPostIndicia = SmartPostIndicia
    def validate_FreightGuaranteeType(self, value):
        result = True
        # Validate type FreightGuaranteeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['GUARANTEED_DATE', 'GUARANTEED_MORNING', 'GUARANTEED_TIME']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on FreightGuaranteeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_SmartPostIndiciaType(self, value):
        result = True
        # Validate type SmartPostIndiciaType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['MEDIA_MAIL', 'PARCEL_RETURN', 'PARCEL_SELECT', 'PRESORTED_BOUND_PRINTED_MATTER', 'PRESORTED_STANDARD']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on SmartPostIndiciaType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.FreightGuarantee is not None or
            self.SmartPostHubId is not None or
            self.SmartPostIndicia is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ServiceSubOptionDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ServiceSubOptionDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ServiceSubOptionDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ServiceSubOptionDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ServiceSubOptionDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ServiceSubOptionDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ServiceSubOptionDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.FreightGuarantee is not None:
            namespaceprefix_ = self.FreightGuarantee_nsprefix_ + ':' if (UseCapturedNS_ and self.FreightGuarantee_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFreightGuarantee>%s</%sFreightGuarantee>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FreightGuarantee), input_name='FreightGuarantee')), namespaceprefix_ , eol_))
        if self.SmartPostHubId is not None:
            namespaceprefix_ = self.SmartPostHubId_nsprefix_ + ':' if (UseCapturedNS_ and self.SmartPostHubId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSmartPostHubId>%s</%sSmartPostHubId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SmartPostHubId), input_name='SmartPostHubId')), namespaceprefix_ , eol_))
        if self.SmartPostIndicia is not None:
            namespaceprefix_ = self.SmartPostIndicia_nsprefix_ + ':' if (UseCapturedNS_ and self.SmartPostIndicia_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSmartPostIndicia>%s</%sSmartPostIndicia>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SmartPostIndicia), input_name='SmartPostIndicia')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'FreightGuarantee':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FreightGuarantee')
            value_ = self.gds_validate_string(value_, node, 'FreightGuarantee')
            self.FreightGuarantee = value_
            self.FreightGuarantee_nsprefix_ = child_.prefix
            # validate type FreightGuaranteeType
            self.validate_FreightGuaranteeType(self.FreightGuarantee)
        elif nodeName_ == 'SmartPostHubId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SmartPostHubId')
            value_ = self.gds_validate_string(value_, node, 'SmartPostHubId')
            self.SmartPostHubId = value_
            self.SmartPostHubId_nsprefix_ = child_.prefix
        elif nodeName_ == 'SmartPostIndicia':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SmartPostIndicia')
            value_ = self.gds_validate_string(value_, node, 'SmartPostIndicia')
            self.SmartPostIndicia = value_
            self.SmartPostIndicia_nsprefix_ = child_.prefix
            # validate type SmartPostIndiciaType
            self.validate_SmartPostIndiciaType(self.SmartPostIndicia)
# end class ServiceSubOptionDetail


class ServiceTypesByCarrierCodeDetail(GeneratedsSuper):
    """Specifies the services types supported for a specific carrier code."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CarrierCode=None, Services=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.CarrierCode = CarrierCode
        self.validate_CarrierCodeType(self.CarrierCode)
        self.CarrierCode_nsprefix_ = "ns"
        if Services is None:
            self.Services = []
        else:
            self.Services = Services
        self.Services_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ServiceTypesByCarrierCodeDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ServiceTypesByCarrierCodeDetail.subclass:
            return ServiceTypesByCarrierCodeDetail.subclass(*args_, **kwargs_)
        else:
            return ServiceTypesByCarrierCodeDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CarrierCode(self):
        return self.CarrierCode
    def set_CarrierCode(self, CarrierCode):
        self.CarrierCode = CarrierCode
    def get_Services(self):
        return self.Services
    def set_Services(self, Services):
        self.Services = Services
    def add_Services(self, value):
        self.Services.append(value)
    def insert_Services_at(self, index, value):
        self.Services.insert(index, value)
    def replace_Services_at(self, index, value):
        self.Services[index] = value
    def validate_CarrierCodeType(self, value):
        result = True
        # Validate type CarrierCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FDXC', 'FDXE', 'FDXG', 'FDXO', 'FXCC', 'FXFR', 'FXSP']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CarrierCodeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.CarrierCode is not None or
            self.Services
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ServiceTypesByCarrierCodeDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ServiceTypesByCarrierCodeDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ServiceTypesByCarrierCodeDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ServiceTypesByCarrierCodeDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ServiceTypesByCarrierCodeDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ServiceTypesByCarrierCodeDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ServiceTypesByCarrierCodeDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CarrierCode is not None:
            namespaceprefix_ = self.CarrierCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CarrierCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCarrierCode>%s</%sCarrierCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CarrierCode), input_name='CarrierCode')), namespaceprefix_ , eol_))
        for Services_ in self.Services:
            namespaceprefix_ = self.Services_nsprefix_ + ':' if (UseCapturedNS_ and self.Services_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sServices>%s</%sServices>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Services_), input_name='Services')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CarrierCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CarrierCode')
            value_ = self.gds_validate_string(value_, node, 'CarrierCode')
            self.CarrierCode = value_
            self.CarrierCode_nsprefix_ = child_.prefix
            # validate type CarrierCodeType
            self.validate_CarrierCodeType(self.CarrierCode)
        elif nodeName_ == 'Services':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Services')
            value_ = self.gds_validate_string(value_, node, 'Services')
            self.Services.append(value_)
            self.Services_nsprefix_ = child_.prefix
# end class ServiceTypesByCarrierCodeDetail


class ShipmentAssemblyDetail(GeneratedsSuper):
    """Specification for assembly performed on shipment."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PieceCount=None, Weight=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PieceCount = PieceCount
        self.PieceCount_nsprefix_ = None
        self.Weight = Weight
        self.Weight_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentAssemblyDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentAssemblyDetail.subclass:
            return ShipmentAssemblyDetail.subclass(*args_, **kwargs_)
        else:
            return ShipmentAssemblyDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PieceCount(self):
        return self.PieceCount
    def set_PieceCount(self, PieceCount):
        self.PieceCount = PieceCount
    def get_Weight(self):
        return self.Weight
    def set_Weight(self, Weight):
        self.Weight = Weight
    def hasContent_(self):
        if (
            self.PieceCount is not None or
            self.Weight is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentAssemblyDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentAssemblyDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipmentAssemblyDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipmentAssemblyDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipmentAssemblyDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipmentAssemblyDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentAssemblyDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PieceCount is not None:
            namespaceprefix_ = self.PieceCount_nsprefix_ + ':' if (UseCapturedNS_ and self.PieceCount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPieceCount>%s</%sPieceCount>%s' % (namespaceprefix_ , self.gds_format_integer(self.PieceCount, input_name='PieceCount'), namespaceprefix_ , eol_))
        if self.Weight is not None:
            namespaceprefix_ = self.Weight_nsprefix_ + ':' if (UseCapturedNS_ and self.Weight_nsprefix_) else ''
            self.Weight.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Weight', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PieceCount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'PieceCount')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'PieceCount')
            self.PieceCount = ival_
            self.PieceCount_nsprefix_ = child_.prefix
        elif nodeName_ == 'Weight':
            obj_ = Weight.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Weight = obj_
            obj_.original_tagname_ = 'Weight'
# end class ShipmentAssemblyDetail


class ShipmentAuthorizationDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, AccountNumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.AccountNumber = AccountNumber
        self.AccountNumber_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentAuthorizationDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentAuthorizationDetail.subclass:
            return ShipmentAuthorizationDetail.subclass(*args_, **kwargs_)
        else:
            return ShipmentAuthorizationDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_AccountNumber(self):
        return self.AccountNumber
    def set_AccountNumber(self, AccountNumber):
        self.AccountNumber = AccountNumber
    def hasContent_(self):
        if (
            self.AccountNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentAuthorizationDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentAuthorizationDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipmentAuthorizationDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipmentAuthorizationDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipmentAuthorizationDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipmentAuthorizationDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentAuthorizationDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AccountNumber is not None:
            namespaceprefix_ = self.AccountNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.AccountNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAccountNumber>%s</%sAccountNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AccountNumber), input_name='AccountNumber')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'AccountNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AccountNumber')
            value_ = self.gds_validate_string(value_, node, 'AccountNumber')
            self.AccountNumber = value_
            self.AccountNumber_nsprefix_ = child_.prefix
# end class ShipmentAuthorizationDetail


class ShipmentConfigurationData(GeneratedsSuper):
    """Specifies data structures that may be re-used multiple times with s
    single shipment."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, DangerousGoodsPackageConfigurations=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if DangerousGoodsPackageConfigurations is None:
            self.DangerousGoodsPackageConfigurations = []
        else:
            self.DangerousGoodsPackageConfigurations = DangerousGoodsPackageConfigurations
        self.DangerousGoodsPackageConfigurations_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentConfigurationData)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentConfigurationData.subclass:
            return ShipmentConfigurationData.subclass(*args_, **kwargs_)
        else:
            return ShipmentConfigurationData(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DangerousGoodsPackageConfigurations(self):
        return self.DangerousGoodsPackageConfigurations
    def set_DangerousGoodsPackageConfigurations(self, DangerousGoodsPackageConfigurations):
        self.DangerousGoodsPackageConfigurations = DangerousGoodsPackageConfigurations
    def add_DangerousGoodsPackageConfigurations(self, value):
        self.DangerousGoodsPackageConfigurations.append(value)
    def insert_DangerousGoodsPackageConfigurations_at(self, index, value):
        self.DangerousGoodsPackageConfigurations.insert(index, value)
    def replace_DangerousGoodsPackageConfigurations_at(self, index, value):
        self.DangerousGoodsPackageConfigurations[index] = value
    def hasContent_(self):
        if (
            self.DangerousGoodsPackageConfigurations
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentConfigurationData', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentConfigurationData')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipmentConfigurationData':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipmentConfigurationData')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipmentConfigurationData', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipmentConfigurationData'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentConfigurationData', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DangerousGoodsPackageConfigurations_ in self.DangerousGoodsPackageConfigurations:
            namespaceprefix_ = self.DangerousGoodsPackageConfigurations_nsprefix_ + ':' if (UseCapturedNS_ and self.DangerousGoodsPackageConfigurations_nsprefix_) else ''
            DangerousGoodsPackageConfigurations_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DangerousGoodsPackageConfigurations', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DangerousGoodsPackageConfigurations':
            obj_ = DangerousGoodsDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DangerousGoodsPackageConfigurations.append(obj_)
            obj_.original_tagname_ = 'DangerousGoodsPackageConfigurations'
# end class ShipmentConfigurationData


class ShipmentConsolidationDetail(GeneratedsSuper):
    """Specifies the characteristics of the containing RequestedShipment that
    define its participation in a consolidation."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RelationshipTimestamp=None, Type=None, Role=None, AssociatedTrackingIds=None, SpecialServicesRequested=None, InternationalDistributionDetail=None, TransborderDistributionDetail=None, DistributionLocations=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.RelationshipTimestamp = RelationshipTimestamp
        self.RelationshipTimestamp_nsprefix_ = None
        self.Type = Type
        self.validate_ConsolidationType(self.Type)
        self.Type_nsprefix_ = "ns"
        self.Role = Role
        self.validate_ConsolidationShipmentRoleType(self.Role)
        self.Role_nsprefix_ = "ns"
        if AssociatedTrackingIds is None:
            self.AssociatedTrackingIds = []
        else:
            self.AssociatedTrackingIds = AssociatedTrackingIds
        self.AssociatedTrackingIds_nsprefix_ = "ns"
        self.SpecialServicesRequested = SpecialServicesRequested
        self.SpecialServicesRequested_nsprefix_ = "ns"
        self.InternationalDistributionDetail = InternationalDistributionDetail
        self.InternationalDistributionDetail_nsprefix_ = "ns"
        self.TransborderDistributionDetail = TransborderDistributionDetail
        self.TransborderDistributionDetail_nsprefix_ = "ns"
        if DistributionLocations is None:
            self.DistributionLocations = []
        else:
            self.DistributionLocations = DistributionLocations
        self.DistributionLocations_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentConsolidationDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentConsolidationDetail.subclass:
            return ShipmentConsolidationDetail.subclass(*args_, **kwargs_)
        else:
            return ShipmentConsolidationDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RelationshipTimestamp(self):
        return self.RelationshipTimestamp
    def set_RelationshipTimestamp(self, RelationshipTimestamp):
        self.RelationshipTimestamp = RelationshipTimestamp
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_Role(self):
        return self.Role
    def set_Role(self, Role):
        self.Role = Role
    def get_AssociatedTrackingIds(self):
        return self.AssociatedTrackingIds
    def set_AssociatedTrackingIds(self, AssociatedTrackingIds):
        self.AssociatedTrackingIds = AssociatedTrackingIds
    def add_AssociatedTrackingIds(self, value):
        self.AssociatedTrackingIds.append(value)
    def insert_AssociatedTrackingIds_at(self, index, value):
        self.AssociatedTrackingIds.insert(index, value)
    def replace_AssociatedTrackingIds_at(self, index, value):
        self.AssociatedTrackingIds[index] = value
    def get_SpecialServicesRequested(self):
        return self.SpecialServicesRequested
    def set_SpecialServicesRequested(self, SpecialServicesRequested):
        self.SpecialServicesRequested = SpecialServicesRequested
    def get_InternationalDistributionDetail(self):
        return self.InternationalDistributionDetail
    def set_InternationalDistributionDetail(self, InternationalDistributionDetail):
        self.InternationalDistributionDetail = InternationalDistributionDetail
    def get_TransborderDistributionDetail(self):
        return self.TransborderDistributionDetail
    def set_TransborderDistributionDetail(self, TransborderDistributionDetail):
        self.TransborderDistributionDetail = TransborderDistributionDetail
    def get_DistributionLocations(self):
        return self.DistributionLocations
    def set_DistributionLocations(self, DistributionLocations):
        self.DistributionLocations = DistributionLocations
    def add_DistributionLocations(self, value):
        self.DistributionLocations.append(value)
    def insert_DistributionLocations_at(self, index, value):
        self.DistributionLocations.insert(index, value)
    def replace_DistributionLocations_at(self, index, value):
        self.DistributionLocations[index] = value
    def validate_ConsolidationType(self, value):
        result = True
        # Validate type ConsolidationType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['INTERNATIONAL_DISTRIBUTION_FREIGHT', 'INTERNATIONAL_ECONOMY_DISTRIBUTION', 'INTERNATIONAL_GROUND_DIRECT_DISTRIBUTION', 'INTERNATIONAL_GROUND_DISTRIBUTION', 'INTERNATIONAL_PRIORITY_DISTRIBUTION', 'TRANSBORDER_DISTRIBUTION']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ConsolidationType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_ConsolidationShipmentRoleType(self, value):
        result = True
        # Validate type ConsolidationShipmentRoleType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CONSOLIDATION_DOCUMENTS_SHIPMENT', 'CRN_SHIPMENT', 'MASTER_AIRWAYBILL_SHIPMENT']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ConsolidationShipmentRoleType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.RelationshipTimestamp is not None or
            self.Type is not None or
            self.Role is not None or
            self.AssociatedTrackingIds or
            self.SpecialServicesRequested is not None or
            self.InternationalDistributionDetail is not None or
            self.TransborderDistributionDetail is not None or
            self.DistributionLocations
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentConsolidationDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentConsolidationDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipmentConsolidationDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipmentConsolidationDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipmentConsolidationDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipmentConsolidationDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentConsolidationDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RelationshipTimestamp is not None:
            namespaceprefix_ = self.RelationshipTimestamp_nsprefix_ + ':' if (UseCapturedNS_ and self.RelationshipTimestamp_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRelationshipTimestamp>%s</%sRelationshipTimestamp>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RelationshipTimestamp), input_name='RelationshipTimestamp')), namespaceprefix_ , eol_))
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.Role is not None:
            namespaceprefix_ = self.Role_nsprefix_ + ':' if (UseCapturedNS_ and self.Role_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRole>%s</%sRole>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Role), input_name='Role')), namespaceprefix_ , eol_))
        for AssociatedTrackingIds_ in self.AssociatedTrackingIds:
            namespaceprefix_ = self.AssociatedTrackingIds_nsprefix_ + ':' if (UseCapturedNS_ and self.AssociatedTrackingIds_nsprefix_) else ''
            AssociatedTrackingIds_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AssociatedTrackingIds', pretty_print=pretty_print)
        if self.SpecialServicesRequested is not None:
            namespaceprefix_ = self.SpecialServicesRequested_nsprefix_ + ':' if (UseCapturedNS_ and self.SpecialServicesRequested_nsprefix_) else ''
            self.SpecialServicesRequested.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SpecialServicesRequested', pretty_print=pretty_print)
        if self.InternationalDistributionDetail is not None:
            namespaceprefix_ = self.InternationalDistributionDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.InternationalDistributionDetail_nsprefix_) else ''
            self.InternationalDistributionDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='InternationalDistributionDetail', pretty_print=pretty_print)
        if self.TransborderDistributionDetail is not None:
            namespaceprefix_ = self.TransborderDistributionDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.TransborderDistributionDetail_nsprefix_) else ''
            self.TransborderDistributionDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TransborderDistributionDetail', pretty_print=pretty_print)
        for DistributionLocations_ in self.DistributionLocations:
            namespaceprefix_ = self.DistributionLocations_nsprefix_ + ':' if (UseCapturedNS_ and self.DistributionLocations_nsprefix_) else ''
            DistributionLocations_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DistributionLocations', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RelationshipTimestamp':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RelationshipTimestamp')
            value_ = self.gds_validate_string(value_, node, 'RelationshipTimestamp')
            self.RelationshipTimestamp = value_
            self.RelationshipTimestamp_nsprefix_ = child_.prefix
        elif nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type ConsolidationType
            self.validate_ConsolidationType(self.Type)
        elif nodeName_ == 'Role':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Role')
            value_ = self.gds_validate_string(value_, node, 'Role')
            self.Role = value_
            self.Role_nsprefix_ = child_.prefix
            # validate type ConsolidationShipmentRoleType
            self.validate_ConsolidationShipmentRoleType(self.Role)
        elif nodeName_ == 'AssociatedTrackingIds':
            obj_ = AssociatedTrackingId.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AssociatedTrackingIds.append(obj_)
            obj_.original_tagname_ = 'AssociatedTrackingIds'
        elif nodeName_ == 'SpecialServicesRequested':
            obj_ = ConsolidationSpecialServicesRequested.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SpecialServicesRequested = obj_
            obj_.original_tagname_ = 'SpecialServicesRequested'
        elif nodeName_ == 'InternationalDistributionDetail':
            obj_ = ShipmentInternationalDistributionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.InternationalDistributionDetail = obj_
            obj_.original_tagname_ = 'InternationalDistributionDetail'
        elif nodeName_ == 'TransborderDistributionDetail':
            obj_ = ShipmentTransborderDistributionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TransborderDistributionDetail = obj_
            obj_.original_tagname_ = 'TransborderDistributionDetail'
        elif nodeName_ == 'DistributionLocations':
            obj_ = RequestedDistributionLocation.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DistributionLocations.append(obj_)
            obj_.original_tagname_ = 'DistributionLocations'
# end class ShipmentConsolidationDetail


class ShipmentDryIceDetail(GeneratedsSuper):
    """Shipment-level totals of dry ice data across all packages."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PackageCount=None, TotalWeight=None, ProcessingOptions=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PackageCount = PackageCount
        self.PackageCount_nsprefix_ = None
        self.TotalWeight = TotalWeight
        self.TotalWeight_nsprefix_ = "ns"
        self.ProcessingOptions = ProcessingOptions
        self.ProcessingOptions_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentDryIceDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentDryIceDetail.subclass:
            return ShipmentDryIceDetail.subclass(*args_, **kwargs_)
        else:
            return ShipmentDryIceDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PackageCount(self):
        return self.PackageCount
    def set_PackageCount(self, PackageCount):
        self.PackageCount = PackageCount
    def get_TotalWeight(self):
        return self.TotalWeight
    def set_TotalWeight(self, TotalWeight):
        self.TotalWeight = TotalWeight
    def get_ProcessingOptions(self):
        return self.ProcessingOptions
    def set_ProcessingOptions(self, ProcessingOptions):
        self.ProcessingOptions = ProcessingOptions
    def hasContent_(self):
        if (
            self.PackageCount is not None or
            self.TotalWeight is not None or
            self.ProcessingOptions is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentDryIceDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentDryIceDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipmentDryIceDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipmentDryIceDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipmentDryIceDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipmentDryIceDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentDryIceDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PackageCount is not None:
            namespaceprefix_ = self.PackageCount_nsprefix_ + ':' if (UseCapturedNS_ and self.PackageCount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackageCount>%s</%sPackageCount>%s' % (namespaceprefix_ , self.gds_format_integer(self.PackageCount, input_name='PackageCount'), namespaceprefix_ , eol_))
        if self.TotalWeight is not None:
            namespaceprefix_ = self.TotalWeight_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalWeight_nsprefix_) else ''
            self.TotalWeight.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TotalWeight', pretty_print=pretty_print)
        if self.ProcessingOptions is not None:
            namespaceprefix_ = self.ProcessingOptions_nsprefix_ + ':' if (UseCapturedNS_ and self.ProcessingOptions_nsprefix_) else ''
            self.ProcessingOptions.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ProcessingOptions', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PackageCount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'PackageCount')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'PackageCount')
            self.PackageCount = ival_
            self.PackageCount_nsprefix_ = child_.prefix
        elif nodeName_ == 'TotalWeight':
            obj_ = Weight.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TotalWeight = obj_
            obj_.original_tagname_ = 'TotalWeight'
        elif nodeName_ == 'ProcessingOptions':
            obj_ = ShipmentDryIceProcessingOptionsRequested.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ProcessingOptions = obj_
            obj_.original_tagname_ = 'ProcessingOptions'
# end class ShipmentDryIceDetail


class ShipmentDryIceProcessingOptionsRequested(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Options=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Options is None:
            self.Options = []
        else:
            self.Options = Options
        self.Options_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentDryIceProcessingOptionsRequested)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentDryIceProcessingOptionsRequested.subclass:
            return ShipmentDryIceProcessingOptionsRequested.subclass(*args_, **kwargs_)
        else:
            return ShipmentDryIceProcessingOptionsRequested(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Options(self):
        return self.Options
    def set_Options(self, Options):
        self.Options = Options
    def add_Options(self, value):
        self.Options.append(value)
    def insert_Options_at(self, index, value):
        self.Options.insert(index, value)
    def replace_Options_at(self, index, value):
        self.Options[index] = value
    def validate_ShipmentDryIceProcessingOptionType(self, value):
        result = True
        # Validate type ShipmentDryIceProcessingOptionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['SHIPMENT_LEVEL_DRY_ICE_ONLY']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ShipmentDryIceProcessingOptionType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Options
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentDryIceProcessingOptionsRequested', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentDryIceProcessingOptionsRequested')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipmentDryIceProcessingOptionsRequested':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipmentDryIceProcessingOptionsRequested')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipmentDryIceProcessingOptionsRequested', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipmentDryIceProcessingOptionsRequested'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentDryIceProcessingOptionsRequested', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Options_ in self.Options:
            namespaceprefix_ = self.Options_nsprefix_ + ':' if (UseCapturedNS_ and self.Options_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOptions>%s</%sOptions>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Options_), input_name='Options')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Options':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Options')
            value_ = self.gds_validate_string(value_, node, 'Options')
            self.Options.append(value_)
            self.Options_nsprefix_ = child_.prefix
            # validate type ShipmentDryIceProcessingOptionType
            self.validate_ShipmentDryIceProcessingOptionType(self.Options[-1])
# end class ShipmentDryIceProcessingOptionsRequested


class ShipmentEventNotificationDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, AggregationType=None, PersonalMessage=None, EventNotifications=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.AggregationType = AggregationType
        self.validate_ShipmentNotificationAggregationType(self.AggregationType)
        self.AggregationType_nsprefix_ = "ns"
        self.PersonalMessage = PersonalMessage
        self.PersonalMessage_nsprefix_ = None
        if EventNotifications is None:
            self.EventNotifications = []
        else:
            self.EventNotifications = EventNotifications
        self.EventNotifications_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentEventNotificationDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentEventNotificationDetail.subclass:
            return ShipmentEventNotificationDetail.subclass(*args_, **kwargs_)
        else:
            return ShipmentEventNotificationDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_AggregationType(self):
        return self.AggregationType
    def set_AggregationType(self, AggregationType):
        self.AggregationType = AggregationType
    def get_PersonalMessage(self):
        return self.PersonalMessage
    def set_PersonalMessage(self, PersonalMessage):
        self.PersonalMessage = PersonalMessage
    def get_EventNotifications(self):
        return self.EventNotifications
    def set_EventNotifications(self, EventNotifications):
        self.EventNotifications = EventNotifications
    def add_EventNotifications(self, value):
        self.EventNotifications.append(value)
    def insert_EventNotifications_at(self, index, value):
        self.EventNotifications.insert(index, value)
    def replace_EventNotifications_at(self, index, value):
        self.EventNotifications[index] = value
    def validate_ShipmentNotificationAggregationType(self, value):
        result = True
        # Validate type ShipmentNotificationAggregationType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['PER_PACKAGE', 'PER_SHIPMENT']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ShipmentNotificationAggregationType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.AggregationType is not None or
            self.PersonalMessage is not None or
            self.EventNotifications
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentEventNotificationDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentEventNotificationDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipmentEventNotificationDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipmentEventNotificationDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipmentEventNotificationDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipmentEventNotificationDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentEventNotificationDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AggregationType is not None:
            namespaceprefix_ = self.AggregationType_nsprefix_ + ':' if (UseCapturedNS_ and self.AggregationType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAggregationType>%s</%sAggregationType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AggregationType), input_name='AggregationType')), namespaceprefix_ , eol_))
        if self.PersonalMessage is not None:
            namespaceprefix_ = self.PersonalMessage_nsprefix_ + ':' if (UseCapturedNS_ and self.PersonalMessage_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPersonalMessage>%s</%sPersonalMessage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PersonalMessage), input_name='PersonalMessage')), namespaceprefix_ , eol_))
        for EventNotifications_ in self.EventNotifications:
            namespaceprefix_ = self.EventNotifications_nsprefix_ + ':' if (UseCapturedNS_ and self.EventNotifications_nsprefix_) else ''
            EventNotifications_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='EventNotifications', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'AggregationType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AggregationType')
            value_ = self.gds_validate_string(value_, node, 'AggregationType')
            self.AggregationType = value_
            self.AggregationType_nsprefix_ = child_.prefix
            # validate type ShipmentNotificationAggregationType
            self.validate_ShipmentNotificationAggregationType(self.AggregationType)
        elif nodeName_ == 'PersonalMessage':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PersonalMessage')
            value_ = self.gds_validate_string(value_, node, 'PersonalMessage')
            self.PersonalMessage = value_
            self.PersonalMessage_nsprefix_ = child_.prefix
        elif nodeName_ == 'EventNotifications':
            obj_ = ShipmentEventNotificationSpecification.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.EventNotifications.append(obj_)
            obj_.original_tagname_ = 'EventNotifications'
# end class ShipmentEventNotificationDetail


class ShipmentEventNotificationSpecification(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Role=None, Events=None, NotificationDetail=None, FormatSpecification=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Role = Role
        self.validate_ShipmentNotificationRoleType(self.Role)
        self.Role_nsprefix_ = "ns"
        if Events is None:
            self.Events = []
        else:
            self.Events = Events
        self.Events_nsprefix_ = "ns"
        self.NotificationDetail = NotificationDetail
        self.NotificationDetail_nsprefix_ = "ns"
        self.FormatSpecification = FormatSpecification
        self.FormatSpecification_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentEventNotificationSpecification)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentEventNotificationSpecification.subclass:
            return ShipmentEventNotificationSpecification.subclass(*args_, **kwargs_)
        else:
            return ShipmentEventNotificationSpecification(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Role(self):
        return self.Role
    def set_Role(self, Role):
        self.Role = Role
    def get_Events(self):
        return self.Events
    def set_Events(self, Events):
        self.Events = Events
    def add_Events(self, value):
        self.Events.append(value)
    def insert_Events_at(self, index, value):
        self.Events.insert(index, value)
    def replace_Events_at(self, index, value):
        self.Events[index] = value
    def get_NotificationDetail(self):
        return self.NotificationDetail
    def set_NotificationDetail(self, NotificationDetail):
        self.NotificationDetail = NotificationDetail
    def get_FormatSpecification(self):
        return self.FormatSpecification
    def set_FormatSpecification(self, FormatSpecification):
        self.FormatSpecification = FormatSpecification
    def validate_ShipmentNotificationRoleType(self, value):
        result = True
        # Validate type ShipmentNotificationRoleType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BROKER', 'OTHER', 'RECIPIENT', 'SHIPPER']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ShipmentNotificationRoleType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_NotificationEventType(self, value):
        result = True
        # Validate type NotificationEventType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ON_DELIVERY', 'ON_ESTIMATED_DELIVERY', 'ON_EXCEPTION', 'ON_PICKUP_DRIVER_ARRIVED', 'ON_PICKUP_DRIVER_ASSIGNED', 'ON_PICKUP_DRIVER_DEPARTED', 'ON_PICKUP_DRIVER_EN_ROUTE', 'ON_SHIPMENT', 'ON_TENDER']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on NotificationEventType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Role is not None or
            self.Events or
            self.NotificationDetail is not None or
            self.FormatSpecification is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentEventNotificationSpecification', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentEventNotificationSpecification')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipmentEventNotificationSpecification':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipmentEventNotificationSpecification')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipmentEventNotificationSpecification', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipmentEventNotificationSpecification'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentEventNotificationSpecification', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Role is not None:
            namespaceprefix_ = self.Role_nsprefix_ + ':' if (UseCapturedNS_ and self.Role_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRole>%s</%sRole>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Role), input_name='Role')), namespaceprefix_ , eol_))
        for Events_ in self.Events:
            namespaceprefix_ = self.Events_nsprefix_ + ':' if (UseCapturedNS_ and self.Events_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEvents>%s</%sEvents>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Events_), input_name='Events')), namespaceprefix_ , eol_))
        if self.NotificationDetail is not None:
            namespaceprefix_ = self.NotificationDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.NotificationDetail_nsprefix_) else ''
            self.NotificationDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='NotificationDetail', pretty_print=pretty_print)
        if self.FormatSpecification is not None:
            namespaceprefix_ = self.FormatSpecification_nsprefix_ + ':' if (UseCapturedNS_ and self.FormatSpecification_nsprefix_) else ''
            self.FormatSpecification.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FormatSpecification', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Role':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Role')
            value_ = self.gds_validate_string(value_, node, 'Role')
            self.Role = value_
            self.Role_nsprefix_ = child_.prefix
            # validate type ShipmentNotificationRoleType
            self.validate_ShipmentNotificationRoleType(self.Role)
        elif nodeName_ == 'Events':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Events')
            value_ = self.gds_validate_string(value_, node, 'Events')
            self.Events.append(value_)
            self.Events_nsprefix_ = child_.prefix
            # validate type NotificationEventType
            self.validate_NotificationEventType(self.Events[-1])
        elif nodeName_ == 'NotificationDetail':
            obj_ = NotificationDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.NotificationDetail = obj_
            obj_.original_tagname_ = 'NotificationDetail'
        elif nodeName_ == 'FormatSpecification':
            obj_ = ShipmentNotificationFormatSpecification.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FormatSpecification = obj_
            obj_.original_tagname_ = 'FormatSpecification'
# end class ShipmentEventNotificationSpecification


class ShipmentInclusionSpecification(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CarrierCode=None, ServiceCategory=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.CarrierCode = CarrierCode
        self.validate_CarrierCodeType(self.CarrierCode)
        self.CarrierCode_nsprefix_ = "ns"
        self.ServiceCategory = ServiceCategory
        self.validate_ServiceCategoryType(self.ServiceCategory)
        self.ServiceCategory_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentInclusionSpecification)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentInclusionSpecification.subclass:
            return ShipmentInclusionSpecification.subclass(*args_, **kwargs_)
        else:
            return ShipmentInclusionSpecification(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CarrierCode(self):
        return self.CarrierCode
    def set_CarrierCode(self, CarrierCode):
        self.CarrierCode = CarrierCode
    def get_ServiceCategory(self):
        return self.ServiceCategory
    def set_ServiceCategory(self, ServiceCategory):
        self.ServiceCategory = ServiceCategory
    def validate_CarrierCodeType(self, value):
        result = True
        # Validate type CarrierCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FDXC', 'FDXE', 'FDXG', 'FDXO', 'FXCC', 'FXFR', 'FXSP']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CarrierCodeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_ServiceCategoryType(self, value):
        result = True
        # Validate type ServiceCategoryType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['GROUND_HOME_DELIVERY']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ServiceCategoryType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.CarrierCode is not None or
            self.ServiceCategory is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentInclusionSpecification', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentInclusionSpecification')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipmentInclusionSpecification':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipmentInclusionSpecification')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipmentInclusionSpecification', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipmentInclusionSpecification'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentInclusionSpecification', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CarrierCode is not None:
            namespaceprefix_ = self.CarrierCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CarrierCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCarrierCode>%s</%sCarrierCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CarrierCode), input_name='CarrierCode')), namespaceprefix_ , eol_))
        if self.ServiceCategory is not None:
            namespaceprefix_ = self.ServiceCategory_nsprefix_ + ':' if (UseCapturedNS_ and self.ServiceCategory_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sServiceCategory>%s</%sServiceCategory>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ServiceCategory), input_name='ServiceCategory')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CarrierCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CarrierCode')
            value_ = self.gds_validate_string(value_, node, 'CarrierCode')
            self.CarrierCode = value_
            self.CarrierCode_nsprefix_ = child_.prefix
            # validate type CarrierCodeType
            self.validate_CarrierCodeType(self.CarrierCode)
        elif nodeName_ == 'ServiceCategory':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ServiceCategory')
            value_ = self.gds_validate_string(value_, node, 'ServiceCategory')
            self.ServiceCategory = value_
            self.ServiceCategory_nsprefix_ = child_.prefix
            # validate type ServiceCategoryType
            self.validate_ServiceCategoryType(self.ServiceCategory)
# end class ShipmentInclusionSpecification


class ShipmentInternationalDistributionDetail(GeneratedsSuper):
    """Specifies the attributes of a shipment related to its role in an
    international distribution (consolidation)."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ClearanceFacilityLocId=None, ClearanceType=None, SummaryDetail=None, SplitPaymentSpecification=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ClearanceFacilityLocId = ClearanceFacilityLocId
        self.ClearanceFacilityLocId_nsprefix_ = None
        self.ClearanceType = ClearanceType
        self.validate_DistributionClearanceType(self.ClearanceType)
        self.ClearanceType_nsprefix_ = "ns"
        self.SummaryDetail = SummaryDetail
        self.SummaryDetail_nsprefix_ = "ns"
        self.SplitPaymentSpecification = SplitPaymentSpecification
        self.SplitPaymentSpecification_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentInternationalDistributionDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentInternationalDistributionDetail.subclass:
            return ShipmentInternationalDistributionDetail.subclass(*args_, **kwargs_)
        else:
            return ShipmentInternationalDistributionDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ClearanceFacilityLocId(self):
        return self.ClearanceFacilityLocId
    def set_ClearanceFacilityLocId(self, ClearanceFacilityLocId):
        self.ClearanceFacilityLocId = ClearanceFacilityLocId
    def get_ClearanceType(self):
        return self.ClearanceType
    def set_ClearanceType(self, ClearanceType):
        self.ClearanceType = ClearanceType
    def get_SummaryDetail(self):
        return self.SummaryDetail
    def set_SummaryDetail(self, SummaryDetail):
        self.SummaryDetail = SummaryDetail
    def get_SplitPaymentSpecification(self):
        return self.SplitPaymentSpecification
    def set_SplitPaymentSpecification(self, SplitPaymentSpecification):
        self.SplitPaymentSpecification = SplitPaymentSpecification
    def validate_DistributionClearanceType(self, value):
        result = True
        # Validate type DistributionClearanceType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['DESTINATION_COUNTRY_CLEARANCE', 'SINGLE_POINT_OF_CLEARANCE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on DistributionClearanceType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.ClearanceFacilityLocId is not None or
            self.ClearanceType is not None or
            self.SummaryDetail is not None or
            self.SplitPaymentSpecification is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentInternationalDistributionDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentInternationalDistributionDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipmentInternationalDistributionDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipmentInternationalDistributionDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipmentInternationalDistributionDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipmentInternationalDistributionDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentInternationalDistributionDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ClearanceFacilityLocId is not None:
            namespaceprefix_ = self.ClearanceFacilityLocId_nsprefix_ + ':' if (UseCapturedNS_ and self.ClearanceFacilityLocId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClearanceFacilityLocId>%s</%sClearanceFacilityLocId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ClearanceFacilityLocId), input_name='ClearanceFacilityLocId')), namespaceprefix_ , eol_))
        if self.ClearanceType is not None:
            namespaceprefix_ = self.ClearanceType_nsprefix_ + ':' if (UseCapturedNS_ and self.ClearanceType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClearanceType>%s</%sClearanceType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ClearanceType), input_name='ClearanceType')), namespaceprefix_ , eol_))
        if self.SummaryDetail is not None:
            namespaceprefix_ = self.SummaryDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.SummaryDetail_nsprefix_) else ''
            self.SummaryDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SummaryDetail', pretty_print=pretty_print)
        if self.SplitPaymentSpecification is not None:
            namespaceprefix_ = self.SplitPaymentSpecification_nsprefix_ + ':' if (UseCapturedNS_ and self.SplitPaymentSpecification_nsprefix_) else ''
            self.SplitPaymentSpecification.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SplitPaymentSpecification', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ClearanceFacilityLocId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ClearanceFacilityLocId')
            value_ = self.gds_validate_string(value_, node, 'ClearanceFacilityLocId')
            self.ClearanceFacilityLocId = value_
            self.ClearanceFacilityLocId_nsprefix_ = child_.prefix
        elif nodeName_ == 'ClearanceType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ClearanceType')
            value_ = self.gds_validate_string(value_, node, 'ClearanceType')
            self.ClearanceType = value_
            self.ClearanceType_nsprefix_ = child_.prefix
            # validate type DistributionClearanceType
            self.validate_DistributionClearanceType(self.ClearanceType)
        elif nodeName_ == 'SummaryDetail':
            obj_ = InternationalDistributionSummaryDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SummaryDetail = obj_
            obj_.original_tagname_ = 'SummaryDetail'
        elif nodeName_ == 'SplitPaymentSpecification':
            obj_ = SplitPaymentSpecification.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SplitPaymentSpecification = obj_
            obj_.original_tagname_ = 'SplitPaymentSpecification'
# end class ShipmentInternationalDistributionDetail


class ShipmentNotificationFormatSpecification(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.validate_NotificationFormatType(self.Type)
        self.Type_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentNotificationFormatSpecification)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentNotificationFormatSpecification.subclass:
            return ShipmentNotificationFormatSpecification.subclass(*args_, **kwargs_)
        else:
            return ShipmentNotificationFormatSpecification(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def validate_NotificationFormatType(self, value):
        result = True
        # Validate type NotificationFormatType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['HTML', 'TEXT']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on NotificationFormatType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Type is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentNotificationFormatSpecification', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentNotificationFormatSpecification')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipmentNotificationFormatSpecification':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipmentNotificationFormatSpecification')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipmentNotificationFormatSpecification', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipmentNotificationFormatSpecification'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentNotificationFormatSpecification', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type NotificationFormatType
            self.validate_NotificationFormatType(self.Type)
# end class ShipmentNotificationFormatSpecification


class ShipmentProcessingOptionsRequested(GeneratedsSuper):
    """Specifies special or custom features to be applied during the processing
    of the enclosing RequestedShipment."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Options=None, CustomTransitTimeDetail=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Options is None:
            self.Options = []
        else:
            self.Options = Options
        self.Options_nsprefix_ = "ns"
        self.CustomTransitTimeDetail = CustomTransitTimeDetail
        self.CustomTransitTimeDetail_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentProcessingOptionsRequested)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentProcessingOptionsRequested.subclass:
            return ShipmentProcessingOptionsRequested.subclass(*args_, **kwargs_)
        else:
            return ShipmentProcessingOptionsRequested(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Options(self):
        return self.Options
    def set_Options(self, Options):
        self.Options = Options
    def add_Options(self, value):
        self.Options.append(value)
    def insert_Options_at(self, index, value):
        self.Options.insert(index, value)
    def replace_Options_at(self, index, value):
        self.Options[index] = value
    def get_CustomTransitTimeDetail(self):
        return self.CustomTransitTimeDetail
    def set_CustomTransitTimeDetail(self, CustomTransitTimeDetail):
        self.CustomTransitTimeDetail = CustomTransitTimeDetail
    def validate_ShipmentProcessingOptionType(self, value):
        result = True
        # Validate type ShipmentProcessingOptionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BYPASS_CLEARANCE_PROHIBITS', 'BYPASS_REGULATORY_VALIDATION', 'CONVENIENCE_MULTIPLE_PACKAGES', 'CUSTOM_TRANSIT_TIME', 'FUTURE_DAY_SHIPMENT', 'IATA_CLASS_AND_AIRCRAFT_ONLY', 'NO_COMMITMENT_DATE_REQUESTED', 'PACKAGE_LEVEL_COMMODITIES', 'PRE_EIG_PROCESSING', 'PRE_ETD_ENHANCEMENTS', 'PRE_FXF2020_HANDLING_UNIT_DETAILS', 'PRE_MULTIPLIER_PROCESSING', 'REQUIRE_PRE_EPIC_BARCODE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ShipmentProcessingOptionType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Options or
            self.CustomTransitTimeDetail is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentProcessingOptionsRequested', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentProcessingOptionsRequested')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipmentProcessingOptionsRequested':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipmentProcessingOptionsRequested')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipmentProcessingOptionsRequested', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipmentProcessingOptionsRequested'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentProcessingOptionsRequested', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Options_ in self.Options:
            namespaceprefix_ = self.Options_nsprefix_ + ':' if (UseCapturedNS_ and self.Options_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOptions>%s</%sOptions>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Options_), input_name='Options')), namespaceprefix_ , eol_))
        if self.CustomTransitTimeDetail is not None:
            namespaceprefix_ = self.CustomTransitTimeDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomTransitTimeDetail_nsprefix_) else ''
            self.CustomTransitTimeDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CustomTransitTimeDetail', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Options':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Options')
            value_ = self.gds_validate_string(value_, node, 'Options')
            self.Options.append(value_)
            self.Options_nsprefix_ = child_.prefix
            # validate type ShipmentProcessingOptionType
            self.validate_ShipmentProcessingOptionType(self.Options[-1])
        elif nodeName_ == 'CustomTransitTimeDetail':
            obj_ = CustomTransitTimeDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CustomTransitTimeDetail = obj_
            obj_.original_tagname_ = 'CustomTransitTimeDetail'
# end class ShipmentProcessingOptionsRequested


class ShipmentRule(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RuleType=None, RuleDescription=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.RuleType = RuleType
        self.validate_ShipmentRuleType(self.RuleType)
        self.RuleType_nsprefix_ = "ns"
        self.RuleDescription = RuleDescription
        self.RuleDescription_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentRule)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentRule.subclass:
            return ShipmentRule.subclass(*args_, **kwargs_)
        else:
            return ShipmentRule(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RuleType(self):
        return self.RuleType
    def set_RuleType(self, RuleType):
        self.RuleType = RuleType
    def get_RuleDescription(self):
        return self.RuleDescription
    def set_RuleDescription(self, RuleDescription):
        self.RuleDescription = RuleDescription
    def validate_ShipmentRuleType(self, value):
        result = True
        # Validate type ShipmentRuleType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['EXPORT', 'GENERAL', 'IMPORT']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ShipmentRuleType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.RuleType is not None or
            self.RuleDescription is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentRule', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentRule')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipmentRule':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipmentRule')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipmentRule', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipmentRule'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentRule', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RuleType is not None:
            namespaceprefix_ = self.RuleType_nsprefix_ + ':' if (UseCapturedNS_ and self.RuleType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRuleType>%s</%sRuleType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RuleType), input_name='RuleType')), namespaceprefix_ , eol_))
        if self.RuleDescription is not None:
            namespaceprefix_ = self.RuleDescription_nsprefix_ + ':' if (UseCapturedNS_ and self.RuleDescription_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRuleDescription>%s</%sRuleDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RuleDescription), input_name='RuleDescription')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RuleType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RuleType')
            value_ = self.gds_validate_string(value_, node, 'RuleType')
            self.RuleType = value_
            self.RuleType_nsprefix_ = child_.prefix
            # validate type ShipmentRuleType
            self.validate_ShipmentRuleType(self.RuleType)
        elif nodeName_ == 'RuleDescription':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RuleDescription')
            value_ = self.gds_validate_string(value_, node, 'RuleDescription')
            self.RuleDescription = value_
            self.RuleDescription_nsprefix_ = child_.prefix
# end class ShipmentRule


class ShipmentSpecialServiceDescription(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CarrierCodesAndServices=None, SubSpecialServiceId=None, SubNames=None, SpecialServiceId=None, Names=None, SpecialServiceType=None, SpecialServiceSubType=None, Code=None, Description=None, AstraDescription=None, CustomerIntegrationMode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if CarrierCodesAndServices is None:
            self.CarrierCodesAndServices = []
        else:
            self.CarrierCodesAndServices = CarrierCodesAndServices
        self.CarrierCodesAndServices_nsprefix_ = "ns"
        self.SubSpecialServiceId = SubSpecialServiceId
        self.SubSpecialServiceId_nsprefix_ = None
        if SubNames is None:
            self.SubNames = []
        else:
            self.SubNames = SubNames
        self.SubNames_nsprefix_ = "ns"
        self.SpecialServiceId = SpecialServiceId
        self.SpecialServiceId_nsprefix_ = None
        if Names is None:
            self.Names = []
        else:
            self.Names = Names
        self.Names_nsprefix_ = "ns"
        self.SpecialServiceType = SpecialServiceType
        self.SpecialServiceType_nsprefix_ = None
        self.SpecialServiceSubType = SpecialServiceSubType
        self.SpecialServiceSubType_nsprefix_ = None
        self.Code = Code
        self.Code_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
        self.AstraDescription = AstraDescription
        self.AstraDescription_nsprefix_ = None
        self.CustomerIntegrationMode = CustomerIntegrationMode
        self.validate_CustomerIntegrationModeType(self.CustomerIntegrationMode)
        self.CustomerIntegrationMode_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentSpecialServiceDescription)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentSpecialServiceDescription.subclass:
            return ShipmentSpecialServiceDescription.subclass(*args_, **kwargs_)
        else:
            return ShipmentSpecialServiceDescription(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CarrierCodesAndServices(self):
        return self.CarrierCodesAndServices
    def set_CarrierCodesAndServices(self, CarrierCodesAndServices):
        self.CarrierCodesAndServices = CarrierCodesAndServices
    def add_CarrierCodesAndServices(self, value):
        self.CarrierCodesAndServices.append(value)
    def insert_CarrierCodesAndServices_at(self, index, value):
        self.CarrierCodesAndServices.insert(index, value)
    def replace_CarrierCodesAndServices_at(self, index, value):
        self.CarrierCodesAndServices[index] = value
    def get_SubSpecialServiceId(self):
        return self.SubSpecialServiceId
    def set_SubSpecialServiceId(self, SubSpecialServiceId):
        self.SubSpecialServiceId = SubSpecialServiceId
    def get_SubNames(self):
        return self.SubNames
    def set_SubNames(self, SubNames):
        self.SubNames = SubNames
    def add_SubNames(self, value):
        self.SubNames.append(value)
    def insert_SubNames_at(self, index, value):
        self.SubNames.insert(index, value)
    def replace_SubNames_at(self, index, value):
        self.SubNames[index] = value
    def get_SpecialServiceId(self):
        return self.SpecialServiceId
    def set_SpecialServiceId(self, SpecialServiceId):
        self.SpecialServiceId = SpecialServiceId
    def get_Names(self):
        return self.Names
    def set_Names(self, Names):
        self.Names = Names
    def add_Names(self, value):
        self.Names.append(value)
    def insert_Names_at(self, index, value):
        self.Names.insert(index, value)
    def replace_Names_at(self, index, value):
        self.Names[index] = value
    def get_SpecialServiceType(self):
        return self.SpecialServiceType
    def set_SpecialServiceType(self, SpecialServiceType):
        self.SpecialServiceType = SpecialServiceType
    def get_SpecialServiceSubType(self):
        return self.SpecialServiceSubType
    def set_SpecialServiceSubType(self, SpecialServiceSubType):
        self.SpecialServiceSubType = SpecialServiceSubType
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def get_AstraDescription(self):
        return self.AstraDescription
    def set_AstraDescription(self, AstraDescription):
        self.AstraDescription = AstraDescription
    def get_CustomerIntegrationMode(self):
        return self.CustomerIntegrationMode
    def set_CustomerIntegrationMode(self, CustomerIntegrationMode):
        self.CustomerIntegrationMode = CustomerIntegrationMode
    def validate_CustomerIntegrationModeType(self, value):
        result = True
        # Validate type CustomerIntegrationModeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CUSTOM', 'STANDARD']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CustomerIntegrationModeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.CarrierCodesAndServices or
            self.SubSpecialServiceId is not None or
            self.SubNames or
            self.SpecialServiceId is not None or
            self.Names or
            self.SpecialServiceType is not None or
            self.SpecialServiceSubType is not None or
            self.Code is not None or
            self.Description is not None or
            self.AstraDescription is not None or
            self.CustomerIntegrationMode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentSpecialServiceDescription', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentSpecialServiceDescription')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipmentSpecialServiceDescription':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipmentSpecialServiceDescription')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipmentSpecialServiceDescription', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipmentSpecialServiceDescription'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentSpecialServiceDescription', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for CarrierCodesAndServices_ in self.CarrierCodesAndServices:
            namespaceprefix_ = self.CarrierCodesAndServices_nsprefix_ + ':' if (UseCapturedNS_ and self.CarrierCodesAndServices_nsprefix_) else ''
            CarrierCodesAndServices_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CarrierCodesAndServices', pretty_print=pretty_print)
        if self.SubSpecialServiceId is not None:
            namespaceprefix_ = self.SubSpecialServiceId_nsprefix_ + ':' if (UseCapturedNS_ and self.SubSpecialServiceId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSubSpecialServiceId>%s</%sSubSpecialServiceId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SubSpecialServiceId), input_name='SubSpecialServiceId')), namespaceprefix_ , eol_))
        for SubNames_ in self.SubNames:
            namespaceprefix_ = self.SubNames_nsprefix_ + ':' if (UseCapturedNS_ and self.SubNames_nsprefix_) else ''
            SubNames_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SubNames', pretty_print=pretty_print)
        if self.SpecialServiceId is not None:
            namespaceprefix_ = self.SpecialServiceId_nsprefix_ + ':' if (UseCapturedNS_ and self.SpecialServiceId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSpecialServiceId>%s</%sSpecialServiceId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SpecialServiceId), input_name='SpecialServiceId')), namespaceprefix_ , eol_))
        for Names_ in self.Names:
            namespaceprefix_ = self.Names_nsprefix_ + ':' if (UseCapturedNS_ and self.Names_nsprefix_) else ''
            Names_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Names', pretty_print=pretty_print)
        if self.SpecialServiceType is not None:
            namespaceprefix_ = self.SpecialServiceType_nsprefix_ + ':' if (UseCapturedNS_ and self.SpecialServiceType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSpecialServiceType>%s</%sSpecialServiceType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SpecialServiceType), input_name='SpecialServiceType')), namespaceprefix_ , eol_))
        if self.SpecialServiceSubType is not None:
            namespaceprefix_ = self.SpecialServiceSubType_nsprefix_ + ':' if (UseCapturedNS_ and self.SpecialServiceSubType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSpecialServiceSubType>%s</%sSpecialServiceSubType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SpecialServiceSubType), input_name='SpecialServiceSubType')), namespaceprefix_ , eol_))
        if self.Code is not None:
            namespaceprefix_ = self.Code_nsprefix_ + ':' if (UseCapturedNS_ and self.Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
        if self.AstraDescription is not None:
            namespaceprefix_ = self.AstraDescription_nsprefix_ + ':' if (UseCapturedNS_ and self.AstraDescription_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAstraDescription>%s</%sAstraDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AstraDescription), input_name='AstraDescription')), namespaceprefix_ , eol_))
        if self.CustomerIntegrationMode is not None:
            namespaceprefix_ = self.CustomerIntegrationMode_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomerIntegrationMode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCustomerIntegrationMode>%s</%sCustomerIntegrationMode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CustomerIntegrationMode), input_name='CustomerIntegrationMode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CarrierCodesAndServices':
            obj_ = ServiceTypesByCarrierCodeDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CarrierCodesAndServices.append(obj_)
            obj_.original_tagname_ = 'CarrierCodesAndServices'
        elif nodeName_ == 'SubSpecialServiceId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SubSpecialServiceId')
            value_ = self.gds_validate_string(value_, node, 'SubSpecialServiceId')
            self.SubSpecialServiceId = value_
            self.SubSpecialServiceId_nsprefix_ = child_.prefix
        elif nodeName_ == 'SubNames':
            obj_ = ProductName.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SubNames.append(obj_)
            obj_.original_tagname_ = 'SubNames'
        elif nodeName_ == 'SpecialServiceId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SpecialServiceId')
            value_ = self.gds_validate_string(value_, node, 'SpecialServiceId')
            self.SpecialServiceId = value_
            self.SpecialServiceId_nsprefix_ = child_.prefix
        elif nodeName_ == 'Names':
            obj_ = ProductName.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Names.append(obj_)
            obj_.original_tagname_ = 'Names'
        elif nodeName_ == 'SpecialServiceType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SpecialServiceType')
            value_ = self.gds_validate_string(value_, node, 'SpecialServiceType')
            self.SpecialServiceType = value_
            self.SpecialServiceType_nsprefix_ = child_.prefix
        elif nodeName_ == 'SpecialServiceSubType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SpecialServiceSubType')
            value_ = self.gds_validate_string(value_, node, 'SpecialServiceSubType')
            self.SpecialServiceSubType = value_
            self.SpecialServiceSubType_nsprefix_ = child_.prefix
        elif nodeName_ == 'Code':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Code')
            value_ = self.gds_validate_string(value_, node, 'Code')
            self.Code = value_
            self.Code_nsprefix_ = child_.prefix
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
        elif nodeName_ == 'AstraDescription':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AstraDescription')
            value_ = self.gds_validate_string(value_, node, 'AstraDescription')
            self.AstraDescription = value_
            self.AstraDescription_nsprefix_ = child_.prefix
        elif nodeName_ == 'CustomerIntegrationMode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CustomerIntegrationMode')
            value_ = self.gds_validate_string(value_, node, 'CustomerIntegrationMode')
            self.CustomerIntegrationMode = value_
            self.CustomerIntegrationMode_nsprefix_ = child_.prefix
            # validate type CustomerIntegrationModeType
            self.validate_CustomerIntegrationModeType(self.CustomerIntegrationMode)
# end class ShipmentSpecialServiceDescription


class ShipmentSpecialServicesRequested(GeneratedsSuper):
    """These special services are available at the shipment level for some or
    all service types. If the shipper is requesting a special service which
    requires additional data (such as the COD amount), the shipment special
    service type must be present in the specialServiceTypes collection, and
    the supporting detail must be provided in the appropriate sub-object
    below."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, SpecialServiceTypes=None, CodDetail=None, DeliveryOnInvoiceAcceptanceDetail=None, HoldAtLocationDetail=None, EventNotificationDetail=None, ReturnShipmentDetail=None, PendingShipmentDetail=None, InternationalControlledExportDetail=None, InternationalTrafficInArmsRegulationsDetail=None, ShipmentDryIceDetail=None, HomeDeliveryPremiumDetail=None, FlatbedTrailerDetail=None, FreightGuaranteeDetail=None, EtdDetail=None, ExtraLaborDetail=None, PalletShrinkwrapDetail=None, PalletsProvidedDetail=None, DetentionDetail=None, MarkingOrTaggingDetail=None, NonBusinessTimeDetail=None, ShipmentAssemblyDetail=None, SortAndSegregateDetail=None, SpecialEquipmentDetail=None, StorageDetail=None, WeighingDetail=None, CustomDeliveryWindowDetail=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if SpecialServiceTypes is None:
            self.SpecialServiceTypes = []
        else:
            self.SpecialServiceTypes = SpecialServiceTypes
        self.SpecialServiceTypes_nsprefix_ = None
        self.CodDetail = CodDetail
        self.CodDetail_nsprefix_ = "ns"
        self.DeliveryOnInvoiceAcceptanceDetail = DeliveryOnInvoiceAcceptanceDetail
        self.DeliveryOnInvoiceAcceptanceDetail_nsprefix_ = "ns"
        self.HoldAtLocationDetail = HoldAtLocationDetail
        self.HoldAtLocationDetail_nsprefix_ = "ns"
        self.EventNotificationDetail = EventNotificationDetail
        self.EventNotificationDetail_nsprefix_ = "ns"
        self.ReturnShipmentDetail = ReturnShipmentDetail
        self.ReturnShipmentDetail_nsprefix_ = "ns"
        self.PendingShipmentDetail = PendingShipmentDetail
        self.PendingShipmentDetail_nsprefix_ = "ns"
        self.InternationalControlledExportDetail = InternationalControlledExportDetail
        self.InternationalControlledExportDetail_nsprefix_ = "ns"
        self.InternationalTrafficInArmsRegulationsDetail = InternationalTrafficInArmsRegulationsDetail
        self.InternationalTrafficInArmsRegulationsDetail_nsprefix_ = "ns"
        self.ShipmentDryIceDetail = ShipmentDryIceDetail
        self.ShipmentDryIceDetail_nsprefix_ = "ns"
        self.HomeDeliveryPremiumDetail = HomeDeliveryPremiumDetail
        self.HomeDeliveryPremiumDetail_nsprefix_ = "ns"
        self.FlatbedTrailerDetail = FlatbedTrailerDetail
        self.FlatbedTrailerDetail_nsprefix_ = "ns"
        self.FreightGuaranteeDetail = FreightGuaranteeDetail
        self.FreightGuaranteeDetail_nsprefix_ = "ns"
        self.EtdDetail = EtdDetail
        self.EtdDetail_nsprefix_ = "ns"
        self.ExtraLaborDetail = ExtraLaborDetail
        self.ExtraLaborDetail_nsprefix_ = "ns"
        self.PalletShrinkwrapDetail = PalletShrinkwrapDetail
        self.PalletShrinkwrapDetail_nsprefix_ = "ns"
        self.PalletsProvidedDetail = PalletsProvidedDetail
        self.PalletsProvidedDetail_nsprefix_ = "ns"
        self.DetentionDetail = DetentionDetail
        self.DetentionDetail_nsprefix_ = "ns"
        self.MarkingOrTaggingDetail = MarkingOrTaggingDetail
        self.MarkingOrTaggingDetail_nsprefix_ = "ns"
        self.NonBusinessTimeDetail = NonBusinessTimeDetail
        self.NonBusinessTimeDetail_nsprefix_ = "ns"
        self.ShipmentAssemblyDetail = ShipmentAssemblyDetail
        self.ShipmentAssemblyDetail_nsprefix_ = "ns"
        self.SortAndSegregateDetail = SortAndSegregateDetail
        self.SortAndSegregateDetail_nsprefix_ = "ns"
        self.SpecialEquipmentDetail = SpecialEquipmentDetail
        self.SpecialEquipmentDetail_nsprefix_ = "ns"
        self.StorageDetail = StorageDetail
        self.StorageDetail_nsprefix_ = "ns"
        self.WeighingDetail = WeighingDetail
        self.WeighingDetail_nsprefix_ = "ns"
        self.CustomDeliveryWindowDetail = CustomDeliveryWindowDetail
        self.CustomDeliveryWindowDetail_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentSpecialServicesRequested)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentSpecialServicesRequested.subclass:
            return ShipmentSpecialServicesRequested.subclass(*args_, **kwargs_)
        else:
            return ShipmentSpecialServicesRequested(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_SpecialServiceTypes(self):
        return self.SpecialServiceTypes
    def set_SpecialServiceTypes(self, SpecialServiceTypes):
        self.SpecialServiceTypes = SpecialServiceTypes
    def add_SpecialServiceTypes(self, value):
        self.SpecialServiceTypes.append(value)
    def insert_SpecialServiceTypes_at(self, index, value):
        self.SpecialServiceTypes.insert(index, value)
    def replace_SpecialServiceTypes_at(self, index, value):
        self.SpecialServiceTypes[index] = value
    def get_CodDetail(self):
        return self.CodDetail
    def set_CodDetail(self, CodDetail):
        self.CodDetail = CodDetail
    def get_DeliveryOnInvoiceAcceptanceDetail(self):
        return self.DeliveryOnInvoiceAcceptanceDetail
    def set_DeliveryOnInvoiceAcceptanceDetail(self, DeliveryOnInvoiceAcceptanceDetail):
        self.DeliveryOnInvoiceAcceptanceDetail = DeliveryOnInvoiceAcceptanceDetail
    def get_HoldAtLocationDetail(self):
        return self.HoldAtLocationDetail
    def set_HoldAtLocationDetail(self, HoldAtLocationDetail):
        self.HoldAtLocationDetail = HoldAtLocationDetail
    def get_EventNotificationDetail(self):
        return self.EventNotificationDetail
    def set_EventNotificationDetail(self, EventNotificationDetail):
        self.EventNotificationDetail = EventNotificationDetail
    def get_ReturnShipmentDetail(self):
        return self.ReturnShipmentDetail
    def set_ReturnShipmentDetail(self, ReturnShipmentDetail):
        self.ReturnShipmentDetail = ReturnShipmentDetail
    def get_PendingShipmentDetail(self):
        return self.PendingShipmentDetail
    def set_PendingShipmentDetail(self, PendingShipmentDetail):
        self.PendingShipmentDetail = PendingShipmentDetail
    def get_InternationalControlledExportDetail(self):
        return self.InternationalControlledExportDetail
    def set_InternationalControlledExportDetail(self, InternationalControlledExportDetail):
        self.InternationalControlledExportDetail = InternationalControlledExportDetail
    def get_InternationalTrafficInArmsRegulationsDetail(self):
        return self.InternationalTrafficInArmsRegulationsDetail
    def set_InternationalTrafficInArmsRegulationsDetail(self, InternationalTrafficInArmsRegulationsDetail):
        self.InternationalTrafficInArmsRegulationsDetail = InternationalTrafficInArmsRegulationsDetail
    def get_ShipmentDryIceDetail(self):
        return self.ShipmentDryIceDetail
    def set_ShipmentDryIceDetail(self, ShipmentDryIceDetail):
        self.ShipmentDryIceDetail = ShipmentDryIceDetail
    def get_HomeDeliveryPremiumDetail(self):
        return self.HomeDeliveryPremiumDetail
    def set_HomeDeliveryPremiumDetail(self, HomeDeliveryPremiumDetail):
        self.HomeDeliveryPremiumDetail = HomeDeliveryPremiumDetail
    def get_FlatbedTrailerDetail(self):
        return self.FlatbedTrailerDetail
    def set_FlatbedTrailerDetail(self, FlatbedTrailerDetail):
        self.FlatbedTrailerDetail = FlatbedTrailerDetail
    def get_FreightGuaranteeDetail(self):
        return self.FreightGuaranteeDetail
    def set_FreightGuaranteeDetail(self, FreightGuaranteeDetail):
        self.FreightGuaranteeDetail = FreightGuaranteeDetail
    def get_EtdDetail(self):
        return self.EtdDetail
    def set_EtdDetail(self, EtdDetail):
        self.EtdDetail = EtdDetail
    def get_ExtraLaborDetail(self):
        return self.ExtraLaborDetail
    def set_ExtraLaborDetail(self, ExtraLaborDetail):
        self.ExtraLaborDetail = ExtraLaborDetail
    def get_PalletShrinkwrapDetail(self):
        return self.PalletShrinkwrapDetail
    def set_PalletShrinkwrapDetail(self, PalletShrinkwrapDetail):
        self.PalletShrinkwrapDetail = PalletShrinkwrapDetail
    def get_PalletsProvidedDetail(self):
        return self.PalletsProvidedDetail
    def set_PalletsProvidedDetail(self, PalletsProvidedDetail):
        self.PalletsProvidedDetail = PalletsProvidedDetail
    def get_DetentionDetail(self):
        return self.DetentionDetail
    def set_DetentionDetail(self, DetentionDetail):
        self.DetentionDetail = DetentionDetail
    def get_MarkingOrTaggingDetail(self):
        return self.MarkingOrTaggingDetail
    def set_MarkingOrTaggingDetail(self, MarkingOrTaggingDetail):
        self.MarkingOrTaggingDetail = MarkingOrTaggingDetail
    def get_NonBusinessTimeDetail(self):
        return self.NonBusinessTimeDetail
    def set_NonBusinessTimeDetail(self, NonBusinessTimeDetail):
        self.NonBusinessTimeDetail = NonBusinessTimeDetail
    def get_ShipmentAssemblyDetail(self):
        return self.ShipmentAssemblyDetail
    def set_ShipmentAssemblyDetail(self, ShipmentAssemblyDetail):
        self.ShipmentAssemblyDetail = ShipmentAssemblyDetail
    def get_SortAndSegregateDetail(self):
        return self.SortAndSegregateDetail
    def set_SortAndSegregateDetail(self, SortAndSegregateDetail):
        self.SortAndSegregateDetail = SortAndSegregateDetail
    def get_SpecialEquipmentDetail(self):
        return self.SpecialEquipmentDetail
    def set_SpecialEquipmentDetail(self, SpecialEquipmentDetail):
        self.SpecialEquipmentDetail = SpecialEquipmentDetail
    def get_StorageDetail(self):
        return self.StorageDetail
    def set_StorageDetail(self, StorageDetail):
        self.StorageDetail = StorageDetail
    def get_WeighingDetail(self):
        return self.WeighingDetail
    def set_WeighingDetail(self, WeighingDetail):
        self.WeighingDetail = WeighingDetail
    def get_CustomDeliveryWindowDetail(self):
        return self.CustomDeliveryWindowDetail
    def set_CustomDeliveryWindowDetail(self, CustomDeliveryWindowDetail):
        self.CustomDeliveryWindowDetail = CustomDeliveryWindowDetail
    def hasContent_(self):
        if (
            self.SpecialServiceTypes or
            self.CodDetail is not None or
            self.DeliveryOnInvoiceAcceptanceDetail is not None or
            self.HoldAtLocationDetail is not None or
            self.EventNotificationDetail is not None or
            self.ReturnShipmentDetail is not None or
            self.PendingShipmentDetail is not None or
            self.InternationalControlledExportDetail is not None or
            self.InternationalTrafficInArmsRegulationsDetail is not None or
            self.ShipmentDryIceDetail is not None or
            self.HomeDeliveryPremiumDetail is not None or
            self.FlatbedTrailerDetail is not None or
            self.FreightGuaranteeDetail is not None or
            self.EtdDetail is not None or
            self.ExtraLaborDetail is not None or
            self.PalletShrinkwrapDetail is not None or
            self.PalletsProvidedDetail is not None or
            self.DetentionDetail is not None or
            self.MarkingOrTaggingDetail is not None or
            self.NonBusinessTimeDetail is not None or
            self.ShipmentAssemblyDetail is not None or
            self.SortAndSegregateDetail is not None or
            self.SpecialEquipmentDetail is not None or
            self.StorageDetail is not None or
            self.WeighingDetail is not None or
            self.CustomDeliveryWindowDetail is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentSpecialServicesRequested', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentSpecialServicesRequested')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipmentSpecialServicesRequested':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipmentSpecialServicesRequested')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipmentSpecialServicesRequested', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipmentSpecialServicesRequested'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentSpecialServicesRequested', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for SpecialServiceTypes_ in self.SpecialServiceTypes:
            namespaceprefix_ = self.SpecialServiceTypes_nsprefix_ + ':' if (UseCapturedNS_ and self.SpecialServiceTypes_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSpecialServiceTypes>%s</%sSpecialServiceTypes>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(SpecialServiceTypes_), input_name='SpecialServiceTypes')), namespaceprefix_ , eol_))
        if self.CodDetail is not None:
            namespaceprefix_ = self.CodDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.CodDetail_nsprefix_) else ''
            self.CodDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CodDetail', pretty_print=pretty_print)
        if self.DeliveryOnInvoiceAcceptanceDetail is not None:
            namespaceprefix_ = self.DeliveryOnInvoiceAcceptanceDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.DeliveryOnInvoiceAcceptanceDetail_nsprefix_) else ''
            self.DeliveryOnInvoiceAcceptanceDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DeliveryOnInvoiceAcceptanceDetail', pretty_print=pretty_print)
        if self.HoldAtLocationDetail is not None:
            namespaceprefix_ = self.HoldAtLocationDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.HoldAtLocationDetail_nsprefix_) else ''
            self.HoldAtLocationDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='HoldAtLocationDetail', pretty_print=pretty_print)
        if self.EventNotificationDetail is not None:
            namespaceprefix_ = self.EventNotificationDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.EventNotificationDetail_nsprefix_) else ''
            self.EventNotificationDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='EventNotificationDetail', pretty_print=pretty_print)
        if self.ReturnShipmentDetail is not None:
            namespaceprefix_ = self.ReturnShipmentDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.ReturnShipmentDetail_nsprefix_) else ''
            self.ReturnShipmentDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ReturnShipmentDetail', pretty_print=pretty_print)
        if self.PendingShipmentDetail is not None:
            namespaceprefix_ = self.PendingShipmentDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.PendingShipmentDetail_nsprefix_) else ''
            self.PendingShipmentDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PendingShipmentDetail', pretty_print=pretty_print)
        if self.InternationalControlledExportDetail is not None:
            namespaceprefix_ = self.InternationalControlledExportDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.InternationalControlledExportDetail_nsprefix_) else ''
            self.InternationalControlledExportDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='InternationalControlledExportDetail', pretty_print=pretty_print)
        if self.InternationalTrafficInArmsRegulationsDetail is not None:
            namespaceprefix_ = self.InternationalTrafficInArmsRegulationsDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.InternationalTrafficInArmsRegulationsDetail_nsprefix_) else ''
            self.InternationalTrafficInArmsRegulationsDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='InternationalTrafficInArmsRegulationsDetail', pretty_print=pretty_print)
        if self.ShipmentDryIceDetail is not None:
            namespaceprefix_ = self.ShipmentDryIceDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipmentDryIceDetail_nsprefix_) else ''
            self.ShipmentDryIceDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ShipmentDryIceDetail', pretty_print=pretty_print)
        if self.HomeDeliveryPremiumDetail is not None:
            namespaceprefix_ = self.HomeDeliveryPremiumDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.HomeDeliveryPremiumDetail_nsprefix_) else ''
            self.HomeDeliveryPremiumDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='HomeDeliveryPremiumDetail', pretty_print=pretty_print)
        if self.FlatbedTrailerDetail is not None:
            namespaceprefix_ = self.FlatbedTrailerDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.FlatbedTrailerDetail_nsprefix_) else ''
            self.FlatbedTrailerDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FlatbedTrailerDetail', pretty_print=pretty_print)
        if self.FreightGuaranteeDetail is not None:
            namespaceprefix_ = self.FreightGuaranteeDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.FreightGuaranteeDetail_nsprefix_) else ''
            self.FreightGuaranteeDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FreightGuaranteeDetail', pretty_print=pretty_print)
        if self.EtdDetail is not None:
            namespaceprefix_ = self.EtdDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.EtdDetail_nsprefix_) else ''
            self.EtdDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='EtdDetail', pretty_print=pretty_print)
        if self.ExtraLaborDetail is not None:
            namespaceprefix_ = self.ExtraLaborDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.ExtraLaborDetail_nsprefix_) else ''
            self.ExtraLaborDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ExtraLaborDetail', pretty_print=pretty_print)
        if self.PalletShrinkwrapDetail is not None:
            namespaceprefix_ = self.PalletShrinkwrapDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.PalletShrinkwrapDetail_nsprefix_) else ''
            self.PalletShrinkwrapDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PalletShrinkwrapDetail', pretty_print=pretty_print)
        if self.PalletsProvidedDetail is not None:
            namespaceprefix_ = self.PalletsProvidedDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.PalletsProvidedDetail_nsprefix_) else ''
            self.PalletsProvidedDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PalletsProvidedDetail', pretty_print=pretty_print)
        if self.DetentionDetail is not None:
            namespaceprefix_ = self.DetentionDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.DetentionDetail_nsprefix_) else ''
            self.DetentionDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DetentionDetail', pretty_print=pretty_print)
        if self.MarkingOrTaggingDetail is not None:
            namespaceprefix_ = self.MarkingOrTaggingDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkingOrTaggingDetail_nsprefix_) else ''
            self.MarkingOrTaggingDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MarkingOrTaggingDetail', pretty_print=pretty_print)
        if self.NonBusinessTimeDetail is not None:
            namespaceprefix_ = self.NonBusinessTimeDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.NonBusinessTimeDetail_nsprefix_) else ''
            self.NonBusinessTimeDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='NonBusinessTimeDetail', pretty_print=pretty_print)
        if self.ShipmentAssemblyDetail is not None:
            namespaceprefix_ = self.ShipmentAssemblyDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipmentAssemblyDetail_nsprefix_) else ''
            self.ShipmentAssemblyDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ShipmentAssemblyDetail', pretty_print=pretty_print)
        if self.SortAndSegregateDetail is not None:
            namespaceprefix_ = self.SortAndSegregateDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.SortAndSegregateDetail_nsprefix_) else ''
            self.SortAndSegregateDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SortAndSegregateDetail', pretty_print=pretty_print)
        if self.SpecialEquipmentDetail is not None:
            namespaceprefix_ = self.SpecialEquipmentDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.SpecialEquipmentDetail_nsprefix_) else ''
            self.SpecialEquipmentDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SpecialEquipmentDetail', pretty_print=pretty_print)
        if self.StorageDetail is not None:
            namespaceprefix_ = self.StorageDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.StorageDetail_nsprefix_) else ''
            self.StorageDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='StorageDetail', pretty_print=pretty_print)
        if self.WeighingDetail is not None:
            namespaceprefix_ = self.WeighingDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.WeighingDetail_nsprefix_) else ''
            self.WeighingDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='WeighingDetail', pretty_print=pretty_print)
        if self.CustomDeliveryWindowDetail is not None:
            namespaceprefix_ = self.CustomDeliveryWindowDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomDeliveryWindowDetail_nsprefix_) else ''
            self.CustomDeliveryWindowDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CustomDeliveryWindowDetail', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'SpecialServiceTypes':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SpecialServiceTypes')
            value_ = self.gds_validate_string(value_, node, 'SpecialServiceTypes')
            self.SpecialServiceTypes.append(value_)
            self.SpecialServiceTypes_nsprefix_ = child_.prefix
        elif nodeName_ == 'CodDetail':
            obj_ = CodDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CodDetail = obj_
            obj_.original_tagname_ = 'CodDetail'
        elif nodeName_ == 'DeliveryOnInvoiceAcceptanceDetail':
            obj_ = DeliveryOnInvoiceAcceptanceDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DeliveryOnInvoiceAcceptanceDetail = obj_
            obj_.original_tagname_ = 'DeliveryOnInvoiceAcceptanceDetail'
        elif nodeName_ == 'HoldAtLocationDetail':
            obj_ = HoldAtLocationDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.HoldAtLocationDetail = obj_
            obj_.original_tagname_ = 'HoldAtLocationDetail'
        elif nodeName_ == 'EventNotificationDetail':
            obj_ = ShipmentEventNotificationDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.EventNotificationDetail = obj_
            obj_.original_tagname_ = 'EventNotificationDetail'
        elif nodeName_ == 'ReturnShipmentDetail':
            obj_ = ReturnShipmentDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ReturnShipmentDetail = obj_
            obj_.original_tagname_ = 'ReturnShipmentDetail'
        elif nodeName_ == 'PendingShipmentDetail':
            obj_ = PendingShipmentDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PendingShipmentDetail = obj_
            obj_.original_tagname_ = 'PendingShipmentDetail'
        elif nodeName_ == 'InternationalControlledExportDetail':
            obj_ = InternationalControlledExportDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.InternationalControlledExportDetail = obj_
            obj_.original_tagname_ = 'InternationalControlledExportDetail'
        elif nodeName_ == 'InternationalTrafficInArmsRegulationsDetail':
            obj_ = InternationalTrafficInArmsRegulationsDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.InternationalTrafficInArmsRegulationsDetail = obj_
            obj_.original_tagname_ = 'InternationalTrafficInArmsRegulationsDetail'
        elif nodeName_ == 'ShipmentDryIceDetail':
            obj_ = ShipmentDryIceDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ShipmentDryIceDetail = obj_
            obj_.original_tagname_ = 'ShipmentDryIceDetail'
        elif nodeName_ == 'HomeDeliveryPremiumDetail':
            obj_ = HomeDeliveryPremiumDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.HomeDeliveryPremiumDetail = obj_
            obj_.original_tagname_ = 'HomeDeliveryPremiumDetail'
        elif nodeName_ == 'FlatbedTrailerDetail':
            obj_ = FlatbedTrailerDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FlatbedTrailerDetail = obj_
            obj_.original_tagname_ = 'FlatbedTrailerDetail'
        elif nodeName_ == 'FreightGuaranteeDetail':
            obj_ = FreightGuaranteeDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FreightGuaranteeDetail = obj_
            obj_.original_tagname_ = 'FreightGuaranteeDetail'
        elif nodeName_ == 'EtdDetail':
            obj_ = EtdDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.EtdDetail = obj_
            obj_.original_tagname_ = 'EtdDetail'
        elif nodeName_ == 'ExtraLaborDetail':
            obj_ = ExtraLaborDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ExtraLaborDetail = obj_
            obj_.original_tagname_ = 'ExtraLaborDetail'
        elif nodeName_ == 'PalletShrinkwrapDetail':
            obj_ = PalletShrinkwrapDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PalletShrinkwrapDetail = obj_
            obj_.original_tagname_ = 'PalletShrinkwrapDetail'
        elif nodeName_ == 'PalletsProvidedDetail':
            obj_ = PalletsProvidedDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PalletsProvidedDetail = obj_
            obj_.original_tagname_ = 'PalletsProvidedDetail'
        elif nodeName_ == 'DetentionDetail':
            obj_ = DetentionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DetentionDetail = obj_
            obj_.original_tagname_ = 'DetentionDetail'
        elif nodeName_ == 'MarkingOrTaggingDetail':
            obj_ = MarkingOrTaggingDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MarkingOrTaggingDetail = obj_
            obj_.original_tagname_ = 'MarkingOrTaggingDetail'
        elif nodeName_ == 'NonBusinessTimeDetail':
            obj_ = NonBusinessTimeDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.NonBusinessTimeDetail = obj_
            obj_.original_tagname_ = 'NonBusinessTimeDetail'
        elif nodeName_ == 'ShipmentAssemblyDetail':
            obj_ = ShipmentAssemblyDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ShipmentAssemblyDetail = obj_
            obj_.original_tagname_ = 'ShipmentAssemblyDetail'
        elif nodeName_ == 'SortAndSegregateDetail':
            obj_ = SortAndSegregateDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SortAndSegregateDetail = obj_
            obj_.original_tagname_ = 'SortAndSegregateDetail'
        elif nodeName_ == 'SpecialEquipmentDetail':
            obj_ = SpecialEquipmentDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SpecialEquipmentDetail = obj_
            obj_.original_tagname_ = 'SpecialEquipmentDetail'
        elif nodeName_ == 'StorageDetail':
            obj_ = StorageDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.StorageDetail = obj_
            obj_.original_tagname_ = 'StorageDetail'
        elif nodeName_ == 'WeighingDetail':
            obj_ = WeighingDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.WeighingDetail = obj_
            obj_.original_tagname_ = 'WeighingDetail'
        elif nodeName_ == 'CustomDeliveryWindowDetail':
            obj_ = CustomDeliveryWindowDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CustomDeliveryWindowDetail = obj_
            obj_.original_tagname_ = 'CustomDeliveryWindowDetail'
# end class ShipmentSpecialServicesRequested


class ShipmentTransborderDistributionDetail(GeneratedsSuper):
    """Specifies the attributes of a shipment related to its role in a
    transborder distribution (consolidation)."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, SpecialServicesRequested=None, SummaryDetail=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.SpecialServicesRequested = SpecialServicesRequested
        self.SpecialServicesRequested_nsprefix_ = "ns"
        self.SummaryDetail = SummaryDetail
        self.SummaryDetail_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentTransborderDistributionDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentTransborderDistributionDetail.subclass:
            return ShipmentTransborderDistributionDetail.subclass(*args_, **kwargs_)
        else:
            return ShipmentTransborderDistributionDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_SpecialServicesRequested(self):
        return self.SpecialServicesRequested
    def set_SpecialServicesRequested(self, SpecialServicesRequested):
        self.SpecialServicesRequested = SpecialServicesRequested
    def get_SummaryDetail(self):
        return self.SummaryDetail
    def set_SummaryDetail(self, SummaryDetail):
        self.SummaryDetail = SummaryDetail
    def hasContent_(self):
        if (
            self.SpecialServicesRequested is not None or
            self.SummaryDetail is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentTransborderDistributionDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentTransborderDistributionDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipmentTransborderDistributionDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipmentTransborderDistributionDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipmentTransborderDistributionDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipmentTransborderDistributionDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentTransborderDistributionDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SpecialServicesRequested is not None:
            namespaceprefix_ = self.SpecialServicesRequested_nsprefix_ + ':' if (UseCapturedNS_ and self.SpecialServicesRequested_nsprefix_) else ''
            self.SpecialServicesRequested.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SpecialServicesRequested', pretty_print=pretty_print)
        if self.SummaryDetail is not None:
            namespaceprefix_ = self.SummaryDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.SummaryDetail_nsprefix_) else ''
            self.SummaryDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SummaryDetail', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'SpecialServicesRequested':
            obj_ = TransborderDistributionSpecialServicesRequested.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SpecialServicesRequested = obj_
            obj_.original_tagname_ = 'SpecialServicesRequested'
        elif nodeName_ == 'SummaryDetail':
            obj_ = TransborderDistributionSummaryDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SummaryDetail = obj_
            obj_.original_tagname_ = 'SummaryDetail'
# end class ShipmentTransborderDistributionDetail


class ShipmentVariationOptionDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Id=None, Values=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Id = Id
        self.Id_nsprefix_ = None
        if Values is None:
            self.Values = []
        else:
            self.Values = Values
        self.Values_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentVariationOptionDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentVariationOptionDetail.subclass:
            return ShipmentVariationOptionDetail.subclass(*args_, **kwargs_)
        else:
            return ShipmentVariationOptionDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Id(self):
        return self.Id
    def set_Id(self, Id):
        self.Id = Id
    def get_Values(self):
        return self.Values
    def set_Values(self, Values):
        self.Values = Values
    def add_Values(self, value):
        self.Values.append(value)
    def insert_Values_at(self, index, value):
        self.Values.insert(index, value)
    def replace_Values_at(self, index, value):
        self.Values[index] = value
    def hasContent_(self):
        if (
            self.Id is not None or
            self.Values
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentVariationOptionDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentVariationOptionDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipmentVariationOptionDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipmentVariationOptionDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipmentVariationOptionDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipmentVariationOptionDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentVariationOptionDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Id is not None:
            namespaceprefix_ = self.Id_nsprefix_ + ':' if (UseCapturedNS_ and self.Id_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sId>%s</%sId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Id), input_name='Id')), namespaceprefix_ , eol_))
        for Values_ in self.Values:
            namespaceprefix_ = self.Values_nsprefix_ + ':' if (UseCapturedNS_ and self.Values_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValues>%s</%sValues>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Values_), input_name='Values')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Id':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Id')
            value_ = self.gds_validate_string(value_, node, 'Id')
            self.Id = value_
            self.Id_nsprefix_ = child_.prefix
        elif nodeName_ == 'Values':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Values')
            value_ = self.gds_validate_string(value_, node, 'Values')
            self.Values.append(value_)
            self.Values_nsprefix_ = child_.prefix
# end class ShipmentVariationOptionDetail


class ShipperConveyanceDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Id=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Id = Id
        self.Id_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipperConveyanceDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipperConveyanceDetail.subclass:
            return ShipperConveyanceDetail.subclass(*args_, **kwargs_)
        else:
            return ShipperConveyanceDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Id(self):
        return self.Id
    def set_Id(self, Id):
        self.Id = Id
    def hasContent_(self):
        if (
            self.Id is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipperConveyanceDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipperConveyanceDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipperConveyanceDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipperConveyanceDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipperConveyanceDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipperConveyanceDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipperConveyanceDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Id is not None:
            namespaceprefix_ = self.Id_nsprefix_ + ':' if (UseCapturedNS_ and self.Id_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sId>%s</%sId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Id), input_name='Id')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Id':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Id')
            value_ = self.gds_validate_string(value_, node, 'Id')
            self.Id = value_
            self.Id_nsprefix_ = child_.prefix
# end class ShipperConveyanceDetail


class ShippingDocumentDispositionDetail(GeneratedsSuper):
    """Each occurrence of this class specifies a particular way in which a kind
    of shipping document is to be produced and provided."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, DispositionType=None, Grouping=None, StorageDetail=None, EMailDetail=None, PrintDetail=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.DispositionType = DispositionType
        self.validate_ShippingDocumentDispositionType(self.DispositionType)
        self.DispositionType_nsprefix_ = "ns"
        self.Grouping = Grouping
        self.validate_ShippingDocumentGroupingType(self.Grouping)
        self.Grouping_nsprefix_ = "ns"
        self.StorageDetail = StorageDetail
        self.StorageDetail_nsprefix_ = "ns"
        self.EMailDetail = EMailDetail
        self.EMailDetail_nsprefix_ = "ns"
        self.PrintDetail = PrintDetail
        self.PrintDetail_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShippingDocumentDispositionDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShippingDocumentDispositionDetail.subclass:
            return ShippingDocumentDispositionDetail.subclass(*args_, **kwargs_)
        else:
            return ShippingDocumentDispositionDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DispositionType(self):
        return self.DispositionType
    def set_DispositionType(self, DispositionType):
        self.DispositionType = DispositionType
    def get_Grouping(self):
        return self.Grouping
    def set_Grouping(self, Grouping):
        self.Grouping = Grouping
    def get_StorageDetail(self):
        return self.StorageDetail
    def set_StorageDetail(self, StorageDetail):
        self.StorageDetail = StorageDetail
    def get_EMailDetail(self):
        return self.EMailDetail
    def set_EMailDetail(self, EMailDetail):
        self.EMailDetail = EMailDetail
    def get_PrintDetail(self):
        return self.PrintDetail
    def set_PrintDetail(self, PrintDetail):
        self.PrintDetail = PrintDetail
    def validate_ShippingDocumentDispositionType(self, value):
        result = True
        # Validate type ShippingDocumentDispositionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CONFIRMED', 'DEFERRED_QUEUED', 'DEFERRED_RETURNED', 'DEFERRED_STORED', 'EMAILED', 'QUEUED', 'RETURNED', 'STORED']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ShippingDocumentDispositionType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_ShippingDocumentGroupingType(self, value):
        result = True
        # Validate type ShippingDocumentGroupingType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CONSOLIDATED_BY_DOCUMENT_TYPE', 'CONSOLIDATED_BY_IMAGE_TYPE', 'INDIVIDUAL']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ShippingDocumentGroupingType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.DispositionType is not None or
            self.Grouping is not None or
            self.StorageDetail is not None or
            self.EMailDetail is not None or
            self.PrintDetail is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShippingDocumentDispositionDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShippingDocumentDispositionDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShippingDocumentDispositionDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShippingDocumentDispositionDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShippingDocumentDispositionDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShippingDocumentDispositionDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShippingDocumentDispositionDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DispositionType is not None:
            namespaceprefix_ = self.DispositionType_nsprefix_ + ':' if (UseCapturedNS_ and self.DispositionType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDispositionType>%s</%sDispositionType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DispositionType), input_name='DispositionType')), namespaceprefix_ , eol_))
        if self.Grouping is not None:
            namespaceprefix_ = self.Grouping_nsprefix_ + ':' if (UseCapturedNS_ and self.Grouping_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGrouping>%s</%sGrouping>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Grouping), input_name='Grouping')), namespaceprefix_ , eol_))
        if self.StorageDetail is not None:
            namespaceprefix_ = self.StorageDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.StorageDetail_nsprefix_) else ''
            self.StorageDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='StorageDetail', pretty_print=pretty_print)
        if self.EMailDetail is not None:
            namespaceprefix_ = self.EMailDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.EMailDetail_nsprefix_) else ''
            self.EMailDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='EMailDetail', pretty_print=pretty_print)
        if self.PrintDetail is not None:
            namespaceprefix_ = self.PrintDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.PrintDetail_nsprefix_) else ''
            self.PrintDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PrintDetail', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DispositionType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DispositionType')
            value_ = self.gds_validate_string(value_, node, 'DispositionType')
            self.DispositionType = value_
            self.DispositionType_nsprefix_ = child_.prefix
            # validate type ShippingDocumentDispositionType
            self.validate_ShippingDocumentDispositionType(self.DispositionType)
        elif nodeName_ == 'Grouping':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Grouping')
            value_ = self.gds_validate_string(value_, node, 'Grouping')
            self.Grouping = value_
            self.Grouping_nsprefix_ = child_.prefix
            # validate type ShippingDocumentGroupingType
            self.validate_ShippingDocumentGroupingType(self.Grouping)
        elif nodeName_ == 'StorageDetail':
            obj_ = ShippingDocumentStorageDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.StorageDetail = obj_
            obj_.original_tagname_ = 'StorageDetail'
        elif nodeName_ == 'EMailDetail':
            obj_ = ShippingDocumentEMailDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.EMailDetail = obj_
            obj_.original_tagname_ = 'EMailDetail'
        elif nodeName_ == 'PrintDetail':
            obj_ = ShippingDocumentPrintDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PrintDetail = obj_
            obj_.original_tagname_ = 'PrintDetail'
# end class ShippingDocumentDispositionDetail


class ShippingDocumentEMailDetail(GeneratedsSuper):
    """Specifies how to e-mail shipping documents."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, EMailRecipients=None, Grouping=None, Localization=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if EMailRecipients is None:
            self.EMailRecipients = []
        else:
            self.EMailRecipients = EMailRecipients
        self.EMailRecipients_nsprefix_ = "ns"
        self.Grouping = Grouping
        self.validate_ShippingDocumentEMailGroupingType(self.Grouping)
        self.Grouping_nsprefix_ = "ns"
        self.Localization = Localization
        self.Localization_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShippingDocumentEMailDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShippingDocumentEMailDetail.subclass:
            return ShippingDocumentEMailDetail.subclass(*args_, **kwargs_)
        else:
            return ShippingDocumentEMailDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_EMailRecipients(self):
        return self.EMailRecipients
    def set_EMailRecipients(self, EMailRecipients):
        self.EMailRecipients = EMailRecipients
    def add_EMailRecipients(self, value):
        self.EMailRecipients.append(value)
    def insert_EMailRecipients_at(self, index, value):
        self.EMailRecipients.insert(index, value)
    def replace_EMailRecipients_at(self, index, value):
        self.EMailRecipients[index] = value
    def get_Grouping(self):
        return self.Grouping
    def set_Grouping(self, Grouping):
        self.Grouping = Grouping
    def get_Localization(self):
        return self.Localization
    def set_Localization(self, Localization):
        self.Localization = Localization
    def validate_ShippingDocumentEMailGroupingType(self, value):
        result = True
        # Validate type ShippingDocumentEMailGroupingType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BY_RECIPIENT', 'NONE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ShippingDocumentEMailGroupingType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.EMailRecipients or
            self.Grouping is not None or
            self.Localization is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShippingDocumentEMailDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShippingDocumentEMailDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShippingDocumentEMailDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShippingDocumentEMailDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShippingDocumentEMailDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShippingDocumentEMailDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShippingDocumentEMailDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for EMailRecipients_ in self.EMailRecipients:
            namespaceprefix_ = self.EMailRecipients_nsprefix_ + ':' if (UseCapturedNS_ and self.EMailRecipients_nsprefix_) else ''
            EMailRecipients_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='EMailRecipients', pretty_print=pretty_print)
        if self.Grouping is not None:
            namespaceprefix_ = self.Grouping_nsprefix_ + ':' if (UseCapturedNS_ and self.Grouping_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGrouping>%s</%sGrouping>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Grouping), input_name='Grouping')), namespaceprefix_ , eol_))
        if self.Localization is not None:
            namespaceprefix_ = self.Localization_nsprefix_ + ':' if (UseCapturedNS_ and self.Localization_nsprefix_) else ''
            self.Localization.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Localization', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'EMailRecipients':
            obj_ = ShippingDocumentEMailRecipient.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.EMailRecipients.append(obj_)
            obj_.original_tagname_ = 'EMailRecipients'
        elif nodeName_ == 'Grouping':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Grouping')
            value_ = self.gds_validate_string(value_, node, 'Grouping')
            self.Grouping = value_
            self.Grouping_nsprefix_ = child_.prefix
            # validate type ShippingDocumentEMailGroupingType
            self.validate_ShippingDocumentEMailGroupingType(self.Grouping)
        elif nodeName_ == 'Localization':
            obj_ = Localization.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Localization = obj_
            obj_.original_tagname_ = 'Localization'
# end class ShippingDocumentEMailDetail


class ShippingDocumentEMailRecipient(GeneratedsSuper):
    """Specifies an individual recipient of e-mailed shipping document(s)."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RecipientType=None, Address=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.RecipientType = RecipientType
        self.validate_EMailNotificationRecipientType(self.RecipientType)
        self.RecipientType_nsprefix_ = "ns"
        self.Address = Address
        self.Address_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShippingDocumentEMailRecipient)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShippingDocumentEMailRecipient.subclass:
            return ShippingDocumentEMailRecipient.subclass(*args_, **kwargs_)
        else:
            return ShippingDocumentEMailRecipient(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RecipientType(self):
        return self.RecipientType
    def set_RecipientType(self, RecipientType):
        self.RecipientType = RecipientType
    def get_Address(self):
        return self.Address
    def set_Address(self, Address):
        self.Address = Address
    def validate_EMailNotificationRecipientType(self, value):
        result = True
        # Validate type EMailNotificationRecipientType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BROKER', 'OTHER', 'RECIPIENT', 'SHIPPER', 'THIRD_PARTY']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on EMailNotificationRecipientType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.RecipientType is not None or
            self.Address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShippingDocumentEMailRecipient', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShippingDocumentEMailRecipient')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShippingDocumentEMailRecipient':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShippingDocumentEMailRecipient')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShippingDocumentEMailRecipient', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShippingDocumentEMailRecipient'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShippingDocumentEMailRecipient', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RecipientType is not None:
            namespaceprefix_ = self.RecipientType_nsprefix_ + ':' if (UseCapturedNS_ and self.RecipientType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecipientType>%s</%sRecipientType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RecipientType), input_name='RecipientType')), namespaceprefix_ , eol_))
        if self.Address is not None:
            namespaceprefix_ = self.Address_nsprefix_ + ':' if (UseCapturedNS_ and self.Address_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddress>%s</%sAddress>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Address), input_name='Address')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RecipientType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RecipientType')
            value_ = self.gds_validate_string(value_, node, 'RecipientType')
            self.RecipientType = value_
            self.RecipientType_nsprefix_ = child_.prefix
            # validate type EMailNotificationRecipientType
            self.validate_EMailNotificationRecipientType(self.RecipientType)
        elif nodeName_ == 'Address':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Address')
            value_ = self.gds_validate_string(value_, node, 'Address')
            self.Address = value_
            self.Address_nsprefix_ = child_.prefix
# end class ShippingDocumentEMailRecipient


class ShippingDocumentFormat(GeneratedsSuper):
    """Specifies characteristics of a shipping document to be produced."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Dispositions=None, TopOfPageOffset=None, ImageType=None, StockType=None, ProvideInstructions=None, OptionsRequested=None, Localization=None, CustomDocumentIdentifier=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Dispositions is None:
            self.Dispositions = []
        else:
            self.Dispositions = Dispositions
        self.Dispositions_nsprefix_ = "ns"
        self.TopOfPageOffset = TopOfPageOffset
        self.TopOfPageOffset_nsprefix_ = "ns"
        self.ImageType = ImageType
        self.validate_ShippingDocumentImageType(self.ImageType)
        self.ImageType_nsprefix_ = "ns"
        self.StockType = StockType
        self.validate_ShippingDocumentStockType(self.StockType)
        self.StockType_nsprefix_ = "ns"
        self.ProvideInstructions = ProvideInstructions
        self.ProvideInstructions_nsprefix_ = None
        self.OptionsRequested = OptionsRequested
        self.OptionsRequested_nsprefix_ = "ns"
        self.Localization = Localization
        self.Localization_nsprefix_ = "ns"
        self.CustomDocumentIdentifier = CustomDocumentIdentifier
        self.CustomDocumentIdentifier_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShippingDocumentFormat)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShippingDocumentFormat.subclass:
            return ShippingDocumentFormat.subclass(*args_, **kwargs_)
        else:
            return ShippingDocumentFormat(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Dispositions(self):
        return self.Dispositions
    def set_Dispositions(self, Dispositions):
        self.Dispositions = Dispositions
    def add_Dispositions(self, value):
        self.Dispositions.append(value)
    def insert_Dispositions_at(self, index, value):
        self.Dispositions.insert(index, value)
    def replace_Dispositions_at(self, index, value):
        self.Dispositions[index] = value
    def get_TopOfPageOffset(self):
        return self.TopOfPageOffset
    def set_TopOfPageOffset(self, TopOfPageOffset):
        self.TopOfPageOffset = TopOfPageOffset
    def get_ImageType(self):
        return self.ImageType
    def set_ImageType(self, ImageType):
        self.ImageType = ImageType
    def get_StockType(self):
        return self.StockType
    def set_StockType(self, StockType):
        self.StockType = StockType
    def get_ProvideInstructions(self):
        return self.ProvideInstructions
    def set_ProvideInstructions(self, ProvideInstructions):
        self.ProvideInstructions = ProvideInstructions
    def get_OptionsRequested(self):
        return self.OptionsRequested
    def set_OptionsRequested(self, OptionsRequested):
        self.OptionsRequested = OptionsRequested
    def get_Localization(self):
        return self.Localization
    def set_Localization(self, Localization):
        self.Localization = Localization
    def get_CustomDocumentIdentifier(self):
        return self.CustomDocumentIdentifier
    def set_CustomDocumentIdentifier(self, CustomDocumentIdentifier):
        self.CustomDocumentIdentifier = CustomDocumentIdentifier
    def validate_ShippingDocumentImageType(self, value):
        result = True
        # Validate type ShippingDocumentImageType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['DIB', 'DOC', 'DPL', 'EPL2', 'GIF', 'PDF', 'PNG', 'RTF', 'TEXT', 'ZPLII']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ShippingDocumentImageType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_ShippingDocumentStockType(self, value):
        result = True
        # Validate type ShippingDocumentStockType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['OP_900_LG', 'OP_900_LG_B', 'OP_900_LL', 'OP_900_LL_B', 'OP_950', 'PAPER_4X6', 'PAPER_4_PER_PAGE_PORTRAIT', 'PAPER_LETTER', 'STOCK_4X6', 'STOCK_4X6.75_LEADING_DOC_TAB', 'STOCK_4X6.75_TRAILING_DOC_TAB', 'STOCK_4X8', 'STOCK_4X9_LEADING_DOC_TAB', 'STOCK_4X9_TRAILING_DOC_TAB']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ShippingDocumentStockType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Dispositions or
            self.TopOfPageOffset is not None or
            self.ImageType is not None or
            self.StockType is not None or
            self.ProvideInstructions is not None or
            self.OptionsRequested is not None or
            self.Localization is not None or
            self.CustomDocumentIdentifier is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShippingDocumentFormat', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShippingDocumentFormat')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShippingDocumentFormat':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShippingDocumentFormat')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShippingDocumentFormat', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShippingDocumentFormat'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShippingDocumentFormat', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Dispositions_ in self.Dispositions:
            namespaceprefix_ = self.Dispositions_nsprefix_ + ':' if (UseCapturedNS_ and self.Dispositions_nsprefix_) else ''
            Dispositions_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Dispositions', pretty_print=pretty_print)
        if self.TopOfPageOffset is not None:
            namespaceprefix_ = self.TopOfPageOffset_nsprefix_ + ':' if (UseCapturedNS_ and self.TopOfPageOffset_nsprefix_) else ''
            self.TopOfPageOffset.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TopOfPageOffset', pretty_print=pretty_print)
        if self.ImageType is not None:
            namespaceprefix_ = self.ImageType_nsprefix_ + ':' if (UseCapturedNS_ and self.ImageType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sImageType>%s</%sImageType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ImageType), input_name='ImageType')), namespaceprefix_ , eol_))
        if self.StockType is not None:
            namespaceprefix_ = self.StockType_nsprefix_ + ':' if (UseCapturedNS_ and self.StockType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStockType>%s</%sStockType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.StockType), input_name='StockType')), namespaceprefix_ , eol_))
        if self.ProvideInstructions is not None:
            namespaceprefix_ = self.ProvideInstructions_nsprefix_ + ':' if (UseCapturedNS_ and self.ProvideInstructions_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProvideInstructions>%s</%sProvideInstructions>%s' % (namespaceprefix_ , self.gds_format_boolean(self.ProvideInstructions, input_name='ProvideInstructions'), namespaceprefix_ , eol_))
        if self.OptionsRequested is not None:
            namespaceprefix_ = self.OptionsRequested_nsprefix_ + ':' if (UseCapturedNS_ and self.OptionsRequested_nsprefix_) else ''
            self.OptionsRequested.export(outfile, level, namespaceprefix_, namespacedef_='', name_='OptionsRequested', pretty_print=pretty_print)
        if self.Localization is not None:
            namespaceprefix_ = self.Localization_nsprefix_ + ':' if (UseCapturedNS_ and self.Localization_nsprefix_) else ''
            self.Localization.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Localization', pretty_print=pretty_print)
        if self.CustomDocumentIdentifier is not None:
            namespaceprefix_ = self.CustomDocumentIdentifier_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomDocumentIdentifier_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCustomDocumentIdentifier>%s</%sCustomDocumentIdentifier>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CustomDocumentIdentifier), input_name='CustomDocumentIdentifier')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Dispositions':
            obj_ = ShippingDocumentDispositionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Dispositions.append(obj_)
            obj_.original_tagname_ = 'Dispositions'
        elif nodeName_ == 'TopOfPageOffset':
            obj_ = LinearMeasure.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TopOfPageOffset = obj_
            obj_.original_tagname_ = 'TopOfPageOffset'
        elif nodeName_ == 'ImageType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ImageType')
            value_ = self.gds_validate_string(value_, node, 'ImageType')
            self.ImageType = value_
            self.ImageType_nsprefix_ = child_.prefix
            # validate type ShippingDocumentImageType
            self.validate_ShippingDocumentImageType(self.ImageType)
        elif nodeName_ == 'StockType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'StockType')
            value_ = self.gds_validate_string(value_, node, 'StockType')
            self.StockType = value_
            self.StockType_nsprefix_ = child_.prefix
            # validate type ShippingDocumentStockType
            self.validate_ShippingDocumentStockType(self.StockType)
        elif nodeName_ == 'ProvideInstructions':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'ProvideInstructions')
            ival_ = self.gds_validate_boolean(ival_, node, 'ProvideInstructions')
            self.ProvideInstructions = ival_
            self.ProvideInstructions_nsprefix_ = child_.prefix
        elif nodeName_ == 'OptionsRequested':
            obj_ = DocumentFormatOptionsRequested.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.OptionsRequested = obj_
            obj_.original_tagname_ = 'OptionsRequested'
        elif nodeName_ == 'Localization':
            obj_ = Localization.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Localization = obj_
            obj_.original_tagname_ = 'Localization'
        elif nodeName_ == 'CustomDocumentIdentifier':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CustomDocumentIdentifier')
            value_ = self.gds_validate_string(value_, node, 'CustomDocumentIdentifier')
            self.CustomDocumentIdentifier = value_
            self.CustomDocumentIdentifier_nsprefix_ = child_.prefix
# end class ShippingDocumentFormat


class ShippingDocumentPrintDetail(GeneratedsSuper):
    """Specifies printing options for a shipping document."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PrinterId=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PrinterId = PrinterId
        self.PrinterId_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShippingDocumentPrintDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShippingDocumentPrintDetail.subclass:
            return ShippingDocumentPrintDetail.subclass(*args_, **kwargs_)
        else:
            return ShippingDocumentPrintDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PrinterId(self):
        return self.PrinterId
    def set_PrinterId(self, PrinterId):
        self.PrinterId = PrinterId
    def hasContent_(self):
        if (
            self.PrinterId is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShippingDocumentPrintDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShippingDocumentPrintDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShippingDocumentPrintDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShippingDocumentPrintDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShippingDocumentPrintDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShippingDocumentPrintDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShippingDocumentPrintDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PrinterId is not None:
            namespaceprefix_ = self.PrinterId_nsprefix_ + ':' if (UseCapturedNS_ and self.PrinterId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPrinterId>%s</%sPrinterId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PrinterId), input_name='PrinterId')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PrinterId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PrinterId')
            value_ = self.gds_validate_string(value_, node, 'PrinterId')
            self.PrinterId = value_
            self.PrinterId_nsprefix_ = child_.prefix
# end class ShippingDocumentPrintDetail


class ShippingDocumentSpecification(GeneratedsSuper):
    """Contains all data required for additional (non-label) shipping documents
    to be produced in conjunction with a specific shipment."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ShippingDocumentTypes=None, CertificateOfOrigin=None, CommercialInvoiceDetail=None, CustomPackageDocumentDetail=None, CustomShipmentDocumentDetail=None, ExportDeclarationDetail=None, GeneralAgencyAgreementDetail=None, NaftaCertificateOfOriginDetail=None, Op900Detail=None, DangerousGoodsShippersDeclarationDetail=None, FreightAddressLabelDetail=None, ReturnInstructionsDetail=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if ShippingDocumentTypes is None:
            self.ShippingDocumentTypes = []
        else:
            self.ShippingDocumentTypes = ShippingDocumentTypes
        self.ShippingDocumentTypes_nsprefix_ = "ns"
        self.CertificateOfOrigin = CertificateOfOrigin
        self.CertificateOfOrigin_nsprefix_ = "ns"
        self.CommercialInvoiceDetail = CommercialInvoiceDetail
        self.CommercialInvoiceDetail_nsprefix_ = "ns"
        if CustomPackageDocumentDetail is None:
            self.CustomPackageDocumentDetail = []
        else:
            self.CustomPackageDocumentDetail = CustomPackageDocumentDetail
        self.CustomPackageDocumentDetail_nsprefix_ = "ns"
        if CustomShipmentDocumentDetail is None:
            self.CustomShipmentDocumentDetail = []
        else:
            self.CustomShipmentDocumentDetail = CustomShipmentDocumentDetail
        self.CustomShipmentDocumentDetail_nsprefix_ = "ns"
        self.ExportDeclarationDetail = ExportDeclarationDetail
        self.ExportDeclarationDetail_nsprefix_ = "ns"
        self.GeneralAgencyAgreementDetail = GeneralAgencyAgreementDetail
        self.GeneralAgencyAgreementDetail_nsprefix_ = "ns"
        self.NaftaCertificateOfOriginDetail = NaftaCertificateOfOriginDetail
        self.NaftaCertificateOfOriginDetail_nsprefix_ = "ns"
        self.Op900Detail = Op900Detail
        self.Op900Detail_nsprefix_ = "ns"
        self.DangerousGoodsShippersDeclarationDetail = DangerousGoodsShippersDeclarationDetail
        self.DangerousGoodsShippersDeclarationDetail_nsprefix_ = "ns"
        self.FreightAddressLabelDetail = FreightAddressLabelDetail
        self.FreightAddressLabelDetail_nsprefix_ = "ns"
        self.ReturnInstructionsDetail = ReturnInstructionsDetail
        self.ReturnInstructionsDetail_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShippingDocumentSpecification)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShippingDocumentSpecification.subclass:
            return ShippingDocumentSpecification.subclass(*args_, **kwargs_)
        else:
            return ShippingDocumentSpecification(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ShippingDocumentTypes(self):
        return self.ShippingDocumentTypes
    def set_ShippingDocumentTypes(self, ShippingDocumentTypes):
        self.ShippingDocumentTypes = ShippingDocumentTypes
    def add_ShippingDocumentTypes(self, value):
        self.ShippingDocumentTypes.append(value)
    def insert_ShippingDocumentTypes_at(self, index, value):
        self.ShippingDocumentTypes.insert(index, value)
    def replace_ShippingDocumentTypes_at(self, index, value):
        self.ShippingDocumentTypes[index] = value
    def get_CertificateOfOrigin(self):
        return self.CertificateOfOrigin
    def set_CertificateOfOrigin(self, CertificateOfOrigin):
        self.CertificateOfOrigin = CertificateOfOrigin
    def get_CommercialInvoiceDetail(self):
        return self.CommercialInvoiceDetail
    def set_CommercialInvoiceDetail(self, CommercialInvoiceDetail):
        self.CommercialInvoiceDetail = CommercialInvoiceDetail
    def get_CustomPackageDocumentDetail(self):
        return self.CustomPackageDocumentDetail
    def set_CustomPackageDocumentDetail(self, CustomPackageDocumentDetail):
        self.CustomPackageDocumentDetail = CustomPackageDocumentDetail
    def add_CustomPackageDocumentDetail(self, value):
        self.CustomPackageDocumentDetail.append(value)
    def insert_CustomPackageDocumentDetail_at(self, index, value):
        self.CustomPackageDocumentDetail.insert(index, value)
    def replace_CustomPackageDocumentDetail_at(self, index, value):
        self.CustomPackageDocumentDetail[index] = value
    def get_CustomShipmentDocumentDetail(self):
        return self.CustomShipmentDocumentDetail
    def set_CustomShipmentDocumentDetail(self, CustomShipmentDocumentDetail):
        self.CustomShipmentDocumentDetail = CustomShipmentDocumentDetail
    def add_CustomShipmentDocumentDetail(self, value):
        self.CustomShipmentDocumentDetail.append(value)
    def insert_CustomShipmentDocumentDetail_at(self, index, value):
        self.CustomShipmentDocumentDetail.insert(index, value)
    def replace_CustomShipmentDocumentDetail_at(self, index, value):
        self.CustomShipmentDocumentDetail[index] = value
    def get_ExportDeclarationDetail(self):
        return self.ExportDeclarationDetail
    def set_ExportDeclarationDetail(self, ExportDeclarationDetail):
        self.ExportDeclarationDetail = ExportDeclarationDetail
    def get_GeneralAgencyAgreementDetail(self):
        return self.GeneralAgencyAgreementDetail
    def set_GeneralAgencyAgreementDetail(self, GeneralAgencyAgreementDetail):
        self.GeneralAgencyAgreementDetail = GeneralAgencyAgreementDetail
    def get_NaftaCertificateOfOriginDetail(self):
        return self.NaftaCertificateOfOriginDetail
    def set_NaftaCertificateOfOriginDetail(self, NaftaCertificateOfOriginDetail):
        self.NaftaCertificateOfOriginDetail = NaftaCertificateOfOriginDetail
    def get_Op900Detail(self):
        return self.Op900Detail
    def set_Op900Detail(self, Op900Detail):
        self.Op900Detail = Op900Detail
    def get_DangerousGoodsShippersDeclarationDetail(self):
        return self.DangerousGoodsShippersDeclarationDetail
    def set_DangerousGoodsShippersDeclarationDetail(self, DangerousGoodsShippersDeclarationDetail):
        self.DangerousGoodsShippersDeclarationDetail = DangerousGoodsShippersDeclarationDetail
    def get_FreightAddressLabelDetail(self):
        return self.FreightAddressLabelDetail
    def set_FreightAddressLabelDetail(self, FreightAddressLabelDetail):
        self.FreightAddressLabelDetail = FreightAddressLabelDetail
    def get_ReturnInstructionsDetail(self):
        return self.ReturnInstructionsDetail
    def set_ReturnInstructionsDetail(self, ReturnInstructionsDetail):
        self.ReturnInstructionsDetail = ReturnInstructionsDetail
    def validate_RequestedShippingDocumentType(self, value):
        result = True
        # Validate type RequestedShippingDocumentType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CERTIFICATE_OF_ORIGIN', 'COMMERCIAL_INVOICE', 'CUSTOMER_SPECIFIED_LABELS', 'CUSTOM_PACKAGE_DOCUMENT', 'CUSTOM_SHIPMENT_DOCUMENT', 'DANGEROUS_GOODS_SHIPPERS_DECLARATION', 'EXPORT_DECLARATION', 'FEDEX_FREIGHT_STRAIGHT_BILL_OF_LADING', 'FREIGHT_ADDRESS_LABEL', 'GENERAL_AGENCY_AGREEMENT', 'LABEL', 'NAFTA_CERTIFICATE_OF_ORIGIN', 'OP_900', 'PRO_FORMA_INVOICE', 'RETURN_INSTRUCTIONS', 'VICS_BILL_OF_LADING']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on RequestedShippingDocumentType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.ShippingDocumentTypes or
            self.CertificateOfOrigin is not None or
            self.CommercialInvoiceDetail is not None or
            self.CustomPackageDocumentDetail or
            self.CustomShipmentDocumentDetail or
            self.ExportDeclarationDetail is not None or
            self.GeneralAgencyAgreementDetail is not None or
            self.NaftaCertificateOfOriginDetail is not None or
            self.Op900Detail is not None or
            self.DangerousGoodsShippersDeclarationDetail is not None or
            self.FreightAddressLabelDetail is not None or
            self.ReturnInstructionsDetail is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShippingDocumentSpecification', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShippingDocumentSpecification')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShippingDocumentSpecification':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShippingDocumentSpecification')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShippingDocumentSpecification', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShippingDocumentSpecification'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShippingDocumentSpecification', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ShippingDocumentTypes_ in self.ShippingDocumentTypes:
            namespaceprefix_ = self.ShippingDocumentTypes_nsprefix_ + ':' if (UseCapturedNS_ and self.ShippingDocumentTypes_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShippingDocumentTypes>%s</%sShippingDocumentTypes>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(ShippingDocumentTypes_), input_name='ShippingDocumentTypes')), namespaceprefix_ , eol_))
        if self.CertificateOfOrigin is not None:
            namespaceprefix_ = self.CertificateOfOrigin_nsprefix_ + ':' if (UseCapturedNS_ and self.CertificateOfOrigin_nsprefix_) else ''
            self.CertificateOfOrigin.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CertificateOfOrigin', pretty_print=pretty_print)
        if self.CommercialInvoiceDetail is not None:
            namespaceprefix_ = self.CommercialInvoiceDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.CommercialInvoiceDetail_nsprefix_) else ''
            self.CommercialInvoiceDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CommercialInvoiceDetail', pretty_print=pretty_print)
        for CustomPackageDocumentDetail_ in self.CustomPackageDocumentDetail:
            namespaceprefix_ = self.CustomPackageDocumentDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomPackageDocumentDetail_nsprefix_) else ''
            CustomPackageDocumentDetail_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CustomPackageDocumentDetail', pretty_print=pretty_print)
        for CustomShipmentDocumentDetail_ in self.CustomShipmentDocumentDetail:
            namespaceprefix_ = self.CustomShipmentDocumentDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomShipmentDocumentDetail_nsprefix_) else ''
            CustomShipmentDocumentDetail_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CustomShipmentDocumentDetail', pretty_print=pretty_print)
        if self.ExportDeclarationDetail is not None:
            namespaceprefix_ = self.ExportDeclarationDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.ExportDeclarationDetail_nsprefix_) else ''
            self.ExportDeclarationDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ExportDeclarationDetail', pretty_print=pretty_print)
        if self.GeneralAgencyAgreementDetail is not None:
            namespaceprefix_ = self.GeneralAgencyAgreementDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.GeneralAgencyAgreementDetail_nsprefix_) else ''
            self.GeneralAgencyAgreementDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='GeneralAgencyAgreementDetail', pretty_print=pretty_print)
        if self.NaftaCertificateOfOriginDetail is not None:
            namespaceprefix_ = self.NaftaCertificateOfOriginDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.NaftaCertificateOfOriginDetail_nsprefix_) else ''
            self.NaftaCertificateOfOriginDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='NaftaCertificateOfOriginDetail', pretty_print=pretty_print)
        if self.Op900Detail is not None:
            namespaceprefix_ = self.Op900Detail_nsprefix_ + ':' if (UseCapturedNS_ and self.Op900Detail_nsprefix_) else ''
            self.Op900Detail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Op900Detail', pretty_print=pretty_print)
        if self.DangerousGoodsShippersDeclarationDetail is not None:
            namespaceprefix_ = self.DangerousGoodsShippersDeclarationDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.DangerousGoodsShippersDeclarationDetail_nsprefix_) else ''
            self.DangerousGoodsShippersDeclarationDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DangerousGoodsShippersDeclarationDetail', pretty_print=pretty_print)
        if self.FreightAddressLabelDetail is not None:
            namespaceprefix_ = self.FreightAddressLabelDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.FreightAddressLabelDetail_nsprefix_) else ''
            self.FreightAddressLabelDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FreightAddressLabelDetail', pretty_print=pretty_print)
        if self.ReturnInstructionsDetail is not None:
            namespaceprefix_ = self.ReturnInstructionsDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.ReturnInstructionsDetail_nsprefix_) else ''
            self.ReturnInstructionsDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ReturnInstructionsDetail', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ShippingDocumentTypes':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ShippingDocumentTypes')
            value_ = self.gds_validate_string(value_, node, 'ShippingDocumentTypes')
            self.ShippingDocumentTypes.append(value_)
            self.ShippingDocumentTypes_nsprefix_ = child_.prefix
            # validate type RequestedShippingDocumentType
            self.validate_RequestedShippingDocumentType(self.ShippingDocumentTypes[-1])
        elif nodeName_ == 'CertificateOfOrigin':
            obj_ = CertificateOfOriginDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CertificateOfOrigin = obj_
            obj_.original_tagname_ = 'CertificateOfOrigin'
        elif nodeName_ == 'CommercialInvoiceDetail':
            obj_ = CommercialInvoiceDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CommercialInvoiceDetail = obj_
            obj_.original_tagname_ = 'CommercialInvoiceDetail'
        elif nodeName_ == 'CustomPackageDocumentDetail':
            obj_ = CustomDocumentDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CustomPackageDocumentDetail.append(obj_)
            obj_.original_tagname_ = 'CustomPackageDocumentDetail'
        elif nodeName_ == 'CustomShipmentDocumentDetail':
            obj_ = CustomDocumentDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CustomShipmentDocumentDetail.append(obj_)
            obj_.original_tagname_ = 'CustomShipmentDocumentDetail'
        elif nodeName_ == 'ExportDeclarationDetail':
            obj_ = ExportDeclarationDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ExportDeclarationDetail = obj_
            obj_.original_tagname_ = 'ExportDeclarationDetail'
        elif nodeName_ == 'GeneralAgencyAgreementDetail':
            obj_ = GeneralAgencyAgreementDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.GeneralAgencyAgreementDetail = obj_
            obj_.original_tagname_ = 'GeneralAgencyAgreementDetail'
        elif nodeName_ == 'NaftaCertificateOfOriginDetail':
            obj_ = NaftaCertificateOfOriginDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.NaftaCertificateOfOriginDetail = obj_
            obj_.original_tagname_ = 'NaftaCertificateOfOriginDetail'
        elif nodeName_ == 'Op900Detail':
            obj_ = Op900Detail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Op900Detail = obj_
            obj_.original_tagname_ = 'Op900Detail'
        elif nodeName_ == 'DangerousGoodsShippersDeclarationDetail':
            obj_ = DangerousGoodsShippersDeclarationDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DangerousGoodsShippersDeclarationDetail = obj_
            obj_.original_tagname_ = 'DangerousGoodsShippersDeclarationDetail'
        elif nodeName_ == 'FreightAddressLabelDetail':
            obj_ = FreightAddressLabelDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FreightAddressLabelDetail = obj_
            obj_.original_tagname_ = 'FreightAddressLabelDetail'
        elif nodeName_ == 'ReturnInstructionsDetail':
            obj_ = ReturnInstructionsDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ReturnInstructionsDetail = obj_
            obj_.original_tagname_ = 'ReturnInstructionsDetail'
# end class ShippingDocumentSpecification


class ShippingDocumentStorageDetail(GeneratedsSuper):
    """Specifies how to store shipping documents."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, FilePath=None, FileNaming=None, FileSuffix=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.validate_ShippingDocumentStorageDetailType(self.Type)
        self.Type_nsprefix_ = "ns"
        self.FilePath = FilePath
        self.FilePath_nsprefix_ = None
        self.FileNaming = FileNaming
        self.validate_ShippingDocumentNamingType(self.FileNaming)
        self.FileNaming_nsprefix_ = "ns"
        self.FileSuffix = FileSuffix
        self.FileSuffix_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShippingDocumentStorageDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShippingDocumentStorageDetail.subclass:
            return ShippingDocumentStorageDetail.subclass(*args_, **kwargs_)
        else:
            return ShippingDocumentStorageDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_FilePath(self):
        return self.FilePath
    def set_FilePath(self, FilePath):
        self.FilePath = FilePath
    def get_FileNaming(self):
        return self.FileNaming
    def set_FileNaming(self, FileNaming):
        self.FileNaming = FileNaming
    def get_FileSuffix(self):
        return self.FileSuffix
    def set_FileSuffix(self, FileSuffix):
        self.FileSuffix = FileSuffix
    def validate_ShippingDocumentStorageDetailType(self, value):
        result = True
        # Validate type ShippingDocumentStorageDetailType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ASYNC_SERVICE', 'LOCAL_FILE_SYSTEM']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ShippingDocumentStorageDetailType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_ShippingDocumentNamingType(self, value):
        result = True
        # Validate type ShippingDocumentNamingType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FAST', 'LEGACY_FXRS']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ShippingDocumentNamingType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Type is not None or
            self.FilePath is not None or
            self.FileNaming is not None or
            self.FileSuffix is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShippingDocumentStorageDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShippingDocumentStorageDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShippingDocumentStorageDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShippingDocumentStorageDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShippingDocumentStorageDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShippingDocumentStorageDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShippingDocumentStorageDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.FilePath is not None:
            namespaceprefix_ = self.FilePath_nsprefix_ + ':' if (UseCapturedNS_ and self.FilePath_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFilePath>%s</%sFilePath>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FilePath), input_name='FilePath')), namespaceprefix_ , eol_))
        if self.FileNaming is not None:
            namespaceprefix_ = self.FileNaming_nsprefix_ + ':' if (UseCapturedNS_ and self.FileNaming_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFileNaming>%s</%sFileNaming>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FileNaming), input_name='FileNaming')), namespaceprefix_ , eol_))
        if self.FileSuffix is not None:
            namespaceprefix_ = self.FileSuffix_nsprefix_ + ':' if (UseCapturedNS_ and self.FileSuffix_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFileSuffix>%s</%sFileSuffix>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FileSuffix), input_name='FileSuffix')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type ShippingDocumentStorageDetailType
            self.validate_ShippingDocumentStorageDetailType(self.Type)
        elif nodeName_ == 'FilePath':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FilePath')
            value_ = self.gds_validate_string(value_, node, 'FilePath')
            self.FilePath = value_
            self.FilePath_nsprefix_ = child_.prefix
        elif nodeName_ == 'FileNaming':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FileNaming')
            value_ = self.gds_validate_string(value_, node, 'FileNaming')
            self.FileNaming = value_
            self.FileNaming_nsprefix_ = child_.prefix
            # validate type ShippingDocumentNamingType
            self.validate_ShippingDocumentNamingType(self.FileNaming)
        elif nodeName_ == 'FileSuffix':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FileSuffix')
            value_ = self.gds_validate_string(value_, node, 'FileSuffix')
            self.FileSuffix = value_
            self.FileSuffix_nsprefix_ = child_.prefix
# end class ShippingDocumentStorageDetail


class SignatureOptionDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, OptionType=None, SignatureReleaseNumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.OptionType = OptionType
        self.validate_SignatureOptionType(self.OptionType)
        self.OptionType_nsprefix_ = "ns"
        self.SignatureReleaseNumber = SignatureReleaseNumber
        self.SignatureReleaseNumber_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SignatureOptionDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SignatureOptionDetail.subclass:
            return SignatureOptionDetail.subclass(*args_, **kwargs_)
        else:
            return SignatureOptionDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_OptionType(self):
        return self.OptionType
    def set_OptionType(self, OptionType):
        self.OptionType = OptionType
    def get_SignatureReleaseNumber(self):
        return self.SignatureReleaseNumber
    def set_SignatureReleaseNumber(self, SignatureReleaseNumber):
        self.SignatureReleaseNumber = SignatureReleaseNumber
    def validate_SignatureOptionType(self, value):
        result = True
        # Validate type SignatureOptionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ADULT', 'DIRECT', 'INDIRECT', 'NO_SIGNATURE_REQUIRED', 'SERVICE_DEFAULT']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on SignatureOptionType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.OptionType is not None or
            self.SignatureReleaseNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SignatureOptionDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SignatureOptionDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SignatureOptionDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SignatureOptionDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SignatureOptionDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='SignatureOptionDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SignatureOptionDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.OptionType is not None:
            namespaceprefix_ = self.OptionType_nsprefix_ + ':' if (UseCapturedNS_ and self.OptionType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOptionType>%s</%sOptionType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OptionType), input_name='OptionType')), namespaceprefix_ , eol_))
        if self.SignatureReleaseNumber is not None:
            namespaceprefix_ = self.SignatureReleaseNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.SignatureReleaseNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSignatureReleaseNumber>%s</%sSignatureReleaseNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SignatureReleaseNumber), input_name='SignatureReleaseNumber')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'OptionType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'OptionType')
            value_ = self.gds_validate_string(value_, node, 'OptionType')
            self.OptionType = value_
            self.OptionType_nsprefix_ = child_.prefix
            # validate type SignatureOptionType
            self.validate_SignatureOptionType(self.OptionType)
        elif nodeName_ == 'SignatureReleaseNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SignatureReleaseNumber')
            value_ = self.gds_validate_string(value_, node, 'SignatureReleaseNumber')
            self.SignatureReleaseNumber = value_
            self.SignatureReleaseNumber_nsprefix_ = child_.prefix
# end class SignatureOptionDetail


class SmartPostAccountDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, AllowedHubs=None, MailerId=None, DistributionCenter=None, SmartPostId=None, PickUpCarrier=None, AllowedIndicia=None, Features=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if AllowedHubs is None:
            self.AllowedHubs = []
        else:
            self.AllowedHubs = AllowedHubs
        self.AllowedHubs_nsprefix_ = None
        self.MailerId = MailerId
        self.MailerId_nsprefix_ = None
        self.DistributionCenter = DistributionCenter
        self.DistributionCenter_nsprefix_ = None
        self.SmartPostId = SmartPostId
        self.SmartPostId_nsprefix_ = None
        self.PickUpCarrier = PickUpCarrier
        self.validate_CarrierCodeType(self.PickUpCarrier)
        self.PickUpCarrier_nsprefix_ = "ns"
        if AllowedIndicia is None:
            self.AllowedIndicia = []
        else:
            self.AllowedIndicia = AllowedIndicia
        self.AllowedIndicia_nsprefix_ = "ns"
        if Features is None:
            self.Features = []
        else:
            self.Features = Features
        self.Features_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SmartPostAccountDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SmartPostAccountDetail.subclass:
            return SmartPostAccountDetail.subclass(*args_, **kwargs_)
        else:
            return SmartPostAccountDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_AllowedHubs(self):
        return self.AllowedHubs
    def set_AllowedHubs(self, AllowedHubs):
        self.AllowedHubs = AllowedHubs
    def add_AllowedHubs(self, value):
        self.AllowedHubs.append(value)
    def insert_AllowedHubs_at(self, index, value):
        self.AllowedHubs.insert(index, value)
    def replace_AllowedHubs_at(self, index, value):
        self.AllowedHubs[index] = value
    def get_MailerId(self):
        return self.MailerId
    def set_MailerId(self, MailerId):
        self.MailerId = MailerId
    def get_DistributionCenter(self):
        return self.DistributionCenter
    def set_DistributionCenter(self, DistributionCenter):
        self.DistributionCenter = DistributionCenter
    def get_SmartPostId(self):
        return self.SmartPostId
    def set_SmartPostId(self, SmartPostId):
        self.SmartPostId = SmartPostId
    def get_PickUpCarrier(self):
        return self.PickUpCarrier
    def set_PickUpCarrier(self, PickUpCarrier):
        self.PickUpCarrier = PickUpCarrier
    def get_AllowedIndicia(self):
        return self.AllowedIndicia
    def set_AllowedIndicia(self, AllowedIndicia):
        self.AllowedIndicia = AllowedIndicia
    def add_AllowedIndicia(self, value):
        self.AllowedIndicia.append(value)
    def insert_AllowedIndicia_at(self, index, value):
        self.AllowedIndicia.insert(index, value)
    def replace_AllowedIndicia_at(self, index, value):
        self.AllowedIndicia[index] = value
    def get_Features(self):
        return self.Features
    def set_Features(self, Features):
        self.Features = Features
    def add_Features(self, value):
        self.Features.append(value)
    def insert_Features_at(self, index, value):
        self.Features.insert(index, value)
    def replace_Features_at(self, index, value):
        self.Features[index] = value
    def validate_CarrierCodeType(self, value):
        result = True
        # Validate type CarrierCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FDXC', 'FDXE', 'FDXG', 'FDXO', 'FXCC', 'FXFR', 'FXSP']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CarrierCodeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_SmartPostIndiciaType(self, value):
        result = True
        # Validate type SmartPostIndiciaType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['MEDIA_MAIL', 'PARCEL_RETURN', 'PARCEL_SELECT', 'PRESORTED_BOUND_PRINTED_MATTER', 'PRESORTED_STANDARD']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on SmartPostIndiciaType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_SmartPostAccountFeatureType(self, value):
        result = True
        # Validate type SmartPostAccountFeatureType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['DELIVERY_CONFIRMATION_APPLIED', 'OUTBOUND_ALLOWED', 'RETURNS_ALLOWED']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on SmartPostAccountFeatureType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.AllowedHubs or
            self.MailerId is not None or
            self.DistributionCenter is not None or
            self.SmartPostId is not None or
            self.PickUpCarrier is not None or
            self.AllowedIndicia or
            self.Features
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SmartPostAccountDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SmartPostAccountDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SmartPostAccountDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SmartPostAccountDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SmartPostAccountDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='SmartPostAccountDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SmartPostAccountDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for AllowedHubs_ in self.AllowedHubs:
            namespaceprefix_ = self.AllowedHubs_nsprefix_ + ':' if (UseCapturedNS_ and self.AllowedHubs_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowedHubs>%s</%sAllowedHubs>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(AllowedHubs_), input_name='AllowedHubs')), namespaceprefix_ , eol_))
        if self.MailerId is not None:
            namespaceprefix_ = self.MailerId_nsprefix_ + ':' if (UseCapturedNS_ and self.MailerId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMailerId>%s</%sMailerId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MailerId), input_name='MailerId')), namespaceprefix_ , eol_))
        if self.DistributionCenter is not None:
            namespaceprefix_ = self.DistributionCenter_nsprefix_ + ':' if (UseCapturedNS_ and self.DistributionCenter_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDistributionCenter>%s</%sDistributionCenter>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DistributionCenter), input_name='DistributionCenter')), namespaceprefix_ , eol_))
        if self.SmartPostId is not None:
            namespaceprefix_ = self.SmartPostId_nsprefix_ + ':' if (UseCapturedNS_ and self.SmartPostId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSmartPostId>%s</%sSmartPostId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SmartPostId), input_name='SmartPostId')), namespaceprefix_ , eol_))
        if self.PickUpCarrier is not None:
            namespaceprefix_ = self.PickUpCarrier_nsprefix_ + ':' if (UseCapturedNS_ and self.PickUpCarrier_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPickUpCarrier>%s</%sPickUpCarrier>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PickUpCarrier), input_name='PickUpCarrier')), namespaceprefix_ , eol_))
        for AllowedIndicia_ in self.AllowedIndicia:
            namespaceprefix_ = self.AllowedIndicia_nsprefix_ + ':' if (UseCapturedNS_ and self.AllowedIndicia_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowedIndicia>%s</%sAllowedIndicia>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(AllowedIndicia_), input_name='AllowedIndicia')), namespaceprefix_ , eol_))
        for Features_ in self.Features:
            namespaceprefix_ = self.Features_nsprefix_ + ':' if (UseCapturedNS_ and self.Features_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFeatures>%s</%sFeatures>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Features_), input_name='Features')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'AllowedHubs':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AllowedHubs')
            value_ = self.gds_validate_string(value_, node, 'AllowedHubs')
            self.AllowedHubs.append(value_)
            self.AllowedHubs_nsprefix_ = child_.prefix
        elif nodeName_ == 'MailerId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MailerId')
            value_ = self.gds_validate_string(value_, node, 'MailerId')
            self.MailerId = value_
            self.MailerId_nsprefix_ = child_.prefix
        elif nodeName_ == 'DistributionCenter':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DistributionCenter')
            value_ = self.gds_validate_string(value_, node, 'DistributionCenter')
            self.DistributionCenter = value_
            self.DistributionCenter_nsprefix_ = child_.prefix
        elif nodeName_ == 'SmartPostId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SmartPostId')
            value_ = self.gds_validate_string(value_, node, 'SmartPostId')
            self.SmartPostId = value_
            self.SmartPostId_nsprefix_ = child_.prefix
        elif nodeName_ == 'PickUpCarrier':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PickUpCarrier')
            value_ = self.gds_validate_string(value_, node, 'PickUpCarrier')
            self.PickUpCarrier = value_
            self.PickUpCarrier_nsprefix_ = child_.prefix
            # validate type CarrierCodeType
            self.validate_CarrierCodeType(self.PickUpCarrier)
        elif nodeName_ == 'AllowedIndicia':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AllowedIndicia')
            value_ = self.gds_validate_string(value_, node, 'AllowedIndicia')
            self.AllowedIndicia.append(value_)
            self.AllowedIndicia_nsprefix_ = child_.prefix
            # validate type SmartPostIndiciaType
            self.validate_SmartPostIndiciaType(self.AllowedIndicia[-1])
        elif nodeName_ == 'Features':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Features')
            value_ = self.gds_validate_string(value_, node, 'Features')
            self.Features.append(value_)
            self.Features_nsprefix_ = child_.prefix
            # validate type SmartPostAccountFeatureType
            self.validate_SmartPostAccountFeatureType(self.Features[-1])
# end class SmartPostAccountDetail


class SmartPostShipmentDetail(GeneratedsSuper):
    """Data required for shipments handled under the SMART_POST and
    GROUND_SMART_POST service types."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ProcessingOptionsRequested=None, Indicia=None, AncillaryEndorsement=None, SpecialServices=None, HubId=None, CustomerManifestId=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ProcessingOptionsRequested = ProcessingOptionsRequested
        self.ProcessingOptionsRequested_nsprefix_ = "ns"
        self.Indicia = Indicia
        self.validate_SmartPostIndiciaType(self.Indicia)
        self.Indicia_nsprefix_ = "ns"
        self.AncillaryEndorsement = AncillaryEndorsement
        self.validate_SmartPostAncillaryEndorsementType(self.AncillaryEndorsement)
        self.AncillaryEndorsement_nsprefix_ = "ns"
        if SpecialServices is None:
            self.SpecialServices = []
        else:
            self.SpecialServices = SpecialServices
        self.SpecialServices_nsprefix_ = "ns"
        self.HubId = HubId
        self.HubId_nsprefix_ = None
        self.CustomerManifestId = CustomerManifestId
        self.CustomerManifestId_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SmartPostShipmentDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SmartPostShipmentDetail.subclass:
            return SmartPostShipmentDetail.subclass(*args_, **kwargs_)
        else:
            return SmartPostShipmentDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ProcessingOptionsRequested(self):
        return self.ProcessingOptionsRequested
    def set_ProcessingOptionsRequested(self, ProcessingOptionsRequested):
        self.ProcessingOptionsRequested = ProcessingOptionsRequested
    def get_Indicia(self):
        return self.Indicia
    def set_Indicia(self, Indicia):
        self.Indicia = Indicia
    def get_AncillaryEndorsement(self):
        return self.AncillaryEndorsement
    def set_AncillaryEndorsement(self, AncillaryEndorsement):
        self.AncillaryEndorsement = AncillaryEndorsement
    def get_SpecialServices(self):
        return self.SpecialServices
    def set_SpecialServices(self, SpecialServices):
        self.SpecialServices = SpecialServices
    def add_SpecialServices(self, value):
        self.SpecialServices.append(value)
    def insert_SpecialServices_at(self, index, value):
        self.SpecialServices.insert(index, value)
    def replace_SpecialServices_at(self, index, value):
        self.SpecialServices[index] = value
    def get_HubId(self):
        return self.HubId
    def set_HubId(self, HubId):
        self.HubId = HubId
    def get_CustomerManifestId(self):
        return self.CustomerManifestId
    def set_CustomerManifestId(self, CustomerManifestId):
        self.CustomerManifestId = CustomerManifestId
    def validate_SmartPostIndiciaType(self, value):
        result = True
        # Validate type SmartPostIndiciaType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['MEDIA_MAIL', 'PARCEL_RETURN', 'PARCEL_SELECT', 'PRESORTED_BOUND_PRINTED_MATTER', 'PRESORTED_STANDARD']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on SmartPostIndiciaType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_SmartPostAncillaryEndorsementType(self, value):
        result = True
        # Validate type SmartPostAncillaryEndorsementType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ADDRESS_CORRECTION', 'CARRIER_LEAVE_IF_NO_RESPONSE', 'CHANGE_SERVICE', 'FORWARDING_SERVICE', 'RETURN_SERVICE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on SmartPostAncillaryEndorsementType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_SmartPostShipmentSpecialServiceType(self, value):
        result = True
        # Validate type SmartPostShipmentSpecialServiceType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['USPS_DELIVERY_CONFIRMATION']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on SmartPostShipmentSpecialServiceType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.ProcessingOptionsRequested is not None or
            self.Indicia is not None or
            self.AncillaryEndorsement is not None or
            self.SpecialServices or
            self.HubId is not None or
            self.CustomerManifestId is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SmartPostShipmentDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SmartPostShipmentDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SmartPostShipmentDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SmartPostShipmentDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SmartPostShipmentDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='SmartPostShipmentDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SmartPostShipmentDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ProcessingOptionsRequested is not None:
            namespaceprefix_ = self.ProcessingOptionsRequested_nsprefix_ + ':' if (UseCapturedNS_ and self.ProcessingOptionsRequested_nsprefix_) else ''
            self.ProcessingOptionsRequested.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ProcessingOptionsRequested', pretty_print=pretty_print)
        if self.Indicia is not None:
            namespaceprefix_ = self.Indicia_nsprefix_ + ':' if (UseCapturedNS_ and self.Indicia_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIndicia>%s</%sIndicia>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Indicia), input_name='Indicia')), namespaceprefix_ , eol_))
        if self.AncillaryEndorsement is not None:
            namespaceprefix_ = self.AncillaryEndorsement_nsprefix_ + ':' if (UseCapturedNS_ and self.AncillaryEndorsement_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAncillaryEndorsement>%s</%sAncillaryEndorsement>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AncillaryEndorsement), input_name='AncillaryEndorsement')), namespaceprefix_ , eol_))
        for SpecialServices_ in self.SpecialServices:
            namespaceprefix_ = self.SpecialServices_nsprefix_ + ':' if (UseCapturedNS_ and self.SpecialServices_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSpecialServices>%s</%sSpecialServices>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(SpecialServices_), input_name='SpecialServices')), namespaceprefix_ , eol_))
        if self.HubId is not None:
            namespaceprefix_ = self.HubId_nsprefix_ + ':' if (UseCapturedNS_ and self.HubId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHubId>%s</%sHubId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.HubId), input_name='HubId')), namespaceprefix_ , eol_))
        if self.CustomerManifestId is not None:
            namespaceprefix_ = self.CustomerManifestId_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomerManifestId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCustomerManifestId>%s</%sCustomerManifestId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CustomerManifestId), input_name='CustomerManifestId')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ProcessingOptionsRequested':
            obj_ = SmartPostShipmentProcessingOptionsRequested.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ProcessingOptionsRequested = obj_
            obj_.original_tagname_ = 'ProcessingOptionsRequested'
        elif nodeName_ == 'Indicia':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Indicia')
            value_ = self.gds_validate_string(value_, node, 'Indicia')
            self.Indicia = value_
            self.Indicia_nsprefix_ = child_.prefix
            # validate type SmartPostIndiciaType
            self.validate_SmartPostIndiciaType(self.Indicia)
        elif nodeName_ == 'AncillaryEndorsement':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AncillaryEndorsement')
            value_ = self.gds_validate_string(value_, node, 'AncillaryEndorsement')
            self.AncillaryEndorsement = value_
            self.AncillaryEndorsement_nsprefix_ = child_.prefix
            # validate type SmartPostAncillaryEndorsementType
            self.validate_SmartPostAncillaryEndorsementType(self.AncillaryEndorsement)
        elif nodeName_ == 'SpecialServices':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SpecialServices')
            value_ = self.gds_validate_string(value_, node, 'SpecialServices')
            self.SpecialServices.append(value_)
            self.SpecialServices_nsprefix_ = child_.prefix
            # validate type SmartPostShipmentSpecialServiceType
            self.validate_SmartPostShipmentSpecialServiceType(self.SpecialServices[-1])
        elif nodeName_ == 'HubId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'HubId')
            value_ = self.gds_validate_string(value_, node, 'HubId')
            self.HubId = value_
            self.HubId_nsprefix_ = child_.prefix
        elif nodeName_ == 'CustomerManifestId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CustomerManifestId')
            value_ = self.gds_validate_string(value_, node, 'CustomerManifestId')
            self.CustomerManifestId = value_
            self.CustomerManifestId_nsprefix_ = child_.prefix
# end class SmartPostShipmentDetail


class SmartPostShipmentProcessingOptionsRequested(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Options=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Options is None:
            self.Options = []
        else:
            self.Options = Options
        self.Options_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SmartPostShipmentProcessingOptionsRequested)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SmartPostShipmentProcessingOptionsRequested.subclass:
            return SmartPostShipmentProcessingOptionsRequested.subclass(*args_, **kwargs_)
        else:
            return SmartPostShipmentProcessingOptionsRequested(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Options(self):
        return self.Options
    def set_Options(self, Options):
        self.Options = Options
    def add_Options(self, value):
        self.Options.append(value)
    def insert_Options_at(self, index, value):
        self.Options.insert(index, value)
    def replace_Options_at(self, index, value):
        self.Options[index] = value
    def validate_SmartPostShipmentProcessingOptionType(self, value):
        result = True
        # Validate type SmartPostShipmentProcessingOptionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['GROUND_TRACKING_NUMBER_REQUESTED']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on SmartPostShipmentProcessingOptionType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Options
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SmartPostShipmentProcessingOptionsRequested', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SmartPostShipmentProcessingOptionsRequested')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SmartPostShipmentProcessingOptionsRequested':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SmartPostShipmentProcessingOptionsRequested')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SmartPostShipmentProcessingOptionsRequested', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='SmartPostShipmentProcessingOptionsRequested'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SmartPostShipmentProcessingOptionsRequested', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Options_ in self.Options:
            namespaceprefix_ = self.Options_nsprefix_ + ':' if (UseCapturedNS_ and self.Options_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOptions>%s</%sOptions>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Options_), input_name='Options')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Options':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Options')
            value_ = self.gds_validate_string(value_, node, 'Options')
            self.Options.append(value_)
            self.Options_nsprefix_ = child_.prefix
            # validate type SmartPostShipmentProcessingOptionType
            self.validate_SmartPostShipmentProcessingOptionType(self.Options[-1])
# end class SmartPostShipmentProcessingOptionsRequested


class SocialMediaDetail(GeneratedsSuper):
    """Specifies the details about customer's social media accounts and contact
    persmissions."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PlatformId=None, UserId=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PlatformId = PlatformId
        self.PlatformId_nsprefix_ = None
        self.UserId = UserId
        self.UserId_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SocialMediaDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SocialMediaDetail.subclass:
            return SocialMediaDetail.subclass(*args_, **kwargs_)
        else:
            return SocialMediaDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PlatformId(self):
        return self.PlatformId
    def set_PlatformId(self, PlatformId):
        self.PlatformId = PlatformId
    def get_UserId(self):
        return self.UserId
    def set_UserId(self, UserId):
        self.UserId = UserId
    def hasContent_(self):
        if (
            self.PlatformId is not None or
            self.UserId is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SocialMediaDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SocialMediaDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SocialMediaDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SocialMediaDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SocialMediaDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='SocialMediaDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SocialMediaDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PlatformId is not None:
            namespaceprefix_ = self.PlatformId_nsprefix_ + ':' if (UseCapturedNS_ and self.PlatformId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPlatformId>%s</%sPlatformId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PlatformId), input_name='PlatformId')), namespaceprefix_ , eol_))
        if self.UserId is not None:
            namespaceprefix_ = self.UserId_nsprefix_ + ':' if (UseCapturedNS_ and self.UserId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUserId>%s</%sUserId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.UserId), input_name='UserId')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PlatformId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PlatformId')
            value_ = self.gds_validate_string(value_, node, 'PlatformId')
            self.PlatformId = value_
            self.PlatformId_nsprefix_ = child_.prefix
        elif nodeName_ == 'UserId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'UserId')
            value_ = self.gds_validate_string(value_, node, 'UserId')
            self.UserId = value_
            self.UserId_nsprefix_ = child_.prefix
# end class SocialMediaDetail


class SortAndSegregateDetail(GeneratedsSuper):
    """Specification for sorting and/or segregating performed on shipment."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PieceCount=None, Weight=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PieceCount = PieceCount
        self.PieceCount_nsprefix_ = None
        self.Weight = Weight
        self.Weight_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SortAndSegregateDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SortAndSegregateDetail.subclass:
            return SortAndSegregateDetail.subclass(*args_, **kwargs_)
        else:
            return SortAndSegregateDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PieceCount(self):
        return self.PieceCount
    def set_PieceCount(self, PieceCount):
        self.PieceCount = PieceCount
    def get_Weight(self):
        return self.Weight
    def set_Weight(self, Weight):
        self.Weight = Weight
    def hasContent_(self):
        if (
            self.PieceCount is not None or
            self.Weight is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SortAndSegregateDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SortAndSegregateDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SortAndSegregateDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SortAndSegregateDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SortAndSegregateDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='SortAndSegregateDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SortAndSegregateDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PieceCount is not None:
            namespaceprefix_ = self.PieceCount_nsprefix_ + ':' if (UseCapturedNS_ and self.PieceCount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPieceCount>%s</%sPieceCount>%s' % (namespaceprefix_ , self.gds_format_integer(self.PieceCount, input_name='PieceCount'), namespaceprefix_ , eol_))
        if self.Weight is not None:
            namespaceprefix_ = self.Weight_nsprefix_ + ':' if (UseCapturedNS_ and self.Weight_nsprefix_) else ''
            self.Weight.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Weight', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PieceCount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'PieceCount')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'PieceCount')
            self.PieceCount = ival_
            self.PieceCount_nsprefix_ = child_.prefix
        elif nodeName_ == 'Weight':
            obj_ = Weight.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Weight = obj_
            obj_.original_tagname_ = 'Weight'
# end class SortAndSegregateDetail


class SpecialEquipmentDetail(GeneratedsSuper):
    """Specification for special equipment used in loading/unloading
    shipment."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, LineItems=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if LineItems is None:
            self.LineItems = []
        else:
            self.LineItems = LineItems
        self.LineItems_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SpecialEquipmentDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SpecialEquipmentDetail.subclass:
            return SpecialEquipmentDetail.subclass(*args_, **kwargs_)
        else:
            return SpecialEquipmentDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_LineItems(self):
        return self.LineItems
    def set_LineItems(self, LineItems):
        self.LineItems = LineItems
    def add_LineItems(self, value):
        self.LineItems.append(value)
    def insert_LineItems_at(self, index, value):
        self.LineItems.insert(index, value)
    def replace_LineItems_at(self, index, value):
        self.LineItems[index] = value
    def hasContent_(self):
        if (
            self.LineItems
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SpecialEquipmentDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SpecialEquipmentDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SpecialEquipmentDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SpecialEquipmentDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SpecialEquipmentDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='SpecialEquipmentDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SpecialEquipmentDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for LineItems_ in self.LineItems:
            namespaceprefix_ = self.LineItems_nsprefix_ + ':' if (UseCapturedNS_ and self.LineItems_nsprefix_) else ''
            LineItems_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='LineItems', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'LineItems':
            obj_ = SpecialEquipmentLineItem.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.LineItems.append(obj_)
            obj_.original_tagname_ = 'LineItems'
# end class SpecialEquipmentDetail


class SpecialEquipmentLineItem(GeneratedsSuper):
    """Specifies the usage of a single type of special equipment while
    loading/unloading a shipment"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, Duration=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.validate_SpecialEquipmentType(self.Type)
        self.Type_nsprefix_ = "ns"
        self.Duration = Duration
        self.Duration_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SpecialEquipmentLineItem)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SpecialEquipmentLineItem.subclass:
            return SpecialEquipmentLineItem.subclass(*args_, **kwargs_)
        else:
            return SpecialEquipmentLineItem(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_Duration(self):
        return self.Duration
    def set_Duration(self, Duration):
        self.Duration = Duration
    def validate_SpecialEquipmentType(self, value):
        result = True
        # Validate type SpecialEquipmentType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FORK_LIFT']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on SpecialEquipmentType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Type is not None or
            self.Duration is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SpecialEquipmentLineItem', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SpecialEquipmentLineItem')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SpecialEquipmentLineItem':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SpecialEquipmentLineItem')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SpecialEquipmentLineItem', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='SpecialEquipmentLineItem'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SpecialEquipmentLineItem', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.Duration is not None:
            namespaceprefix_ = self.Duration_nsprefix_ + ':' if (UseCapturedNS_ and self.Duration_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDuration>%s</%sDuration>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Duration), input_name='Duration')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type SpecialEquipmentType
            self.validate_SpecialEquipmentType(self.Type)
        elif nodeName_ == 'Duration':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Duration')
            value_ = self.gds_validate_string(value_, node, 'Duration')
            self.Duration = value_
            self.Duration_nsprefix_ = child_.prefix
# end class SpecialEquipmentLineItem


class SplitPaymentDetail(GeneratedsSuper):
    """Specifies payment for a single aspect of a shipment."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, Payment=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.validate_SplitPaymentType(self.Type)
        self.Type_nsprefix_ = "ns"
        self.Payment = Payment
        self.Payment_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SplitPaymentDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SplitPaymentDetail.subclass:
            return SplitPaymentDetail.subclass(*args_, **kwargs_)
        else:
            return SplitPaymentDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_Payment(self):
        return self.Payment
    def set_Payment(self, Payment):
        self.Payment = Payment
    def validate_SplitPaymentType(self, value):
        result = True
        # Validate type SplitPaymentType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['APPOINTMENT_DELIVERY', 'PIECE_COUNT_VERIFICATION']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on SplitPaymentType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Type is not None or
            self.Payment is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SplitPaymentDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SplitPaymentDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SplitPaymentDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SplitPaymentDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SplitPaymentDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='SplitPaymentDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SplitPaymentDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.Payment is not None:
            namespaceprefix_ = self.Payment_nsprefix_ + ':' if (UseCapturedNS_ and self.Payment_nsprefix_) else ''
            self.Payment.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Payment', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type SplitPaymentType
            self.validate_SplitPaymentType(self.Type)
        elif nodeName_ == 'Payment':
            obj_ = Payment.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Payment = obj_
            obj_.original_tagname_ = 'Payment'
# end class SplitPaymentDetail


class SplitPaymentSpecification(GeneratedsSuper):
    """Specifies how charges relating to different aspects of a shipment are to
    be paid."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Payments=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Payments is None:
            self.Payments = []
        else:
            self.Payments = Payments
        self.Payments_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SplitPaymentSpecification)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SplitPaymentSpecification.subclass:
            return SplitPaymentSpecification.subclass(*args_, **kwargs_)
        else:
            return SplitPaymentSpecification(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Payments(self):
        return self.Payments
    def set_Payments(self, Payments):
        self.Payments = Payments
    def add_Payments(self, value):
        self.Payments.append(value)
    def insert_Payments_at(self, index, value):
        self.Payments.insert(index, value)
    def replace_Payments_at(self, index, value):
        self.Payments[index] = value
    def hasContent_(self):
        if (
            self.Payments
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SplitPaymentSpecification', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SplitPaymentSpecification')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SplitPaymentSpecification':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SplitPaymentSpecification')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SplitPaymentSpecification', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='SplitPaymentSpecification'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SplitPaymentSpecification', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Payments_ in self.Payments:
            namespaceprefix_ = self.Payments_nsprefix_ + ':' if (UseCapturedNS_ and self.Payments_nsprefix_) else ''
            Payments_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Payments', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Payments':
            obj_ = SplitPaymentDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Payments.append(obj_)
            obj_.original_tagname_ = 'Payments'
# end class SplitPaymentSpecification


class StorageDetail(GeneratedsSuper):
    """Specification for storage provided for shipment."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Duration=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Duration = Duration
        self.Duration_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, StorageDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if StorageDetail.subclass:
            return StorageDetail.subclass(*args_, **kwargs_)
        else:
            return StorageDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Duration(self):
        return self.Duration
    def set_Duration(self, Duration):
        self.Duration = Duration
    def hasContent_(self):
        if (
            self.Duration is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='StorageDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('StorageDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'StorageDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='StorageDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='StorageDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='StorageDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='StorageDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Duration is not None:
            namespaceprefix_ = self.Duration_nsprefix_ + ':' if (UseCapturedNS_ and self.Duration_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDuration>%s</%sDuration>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Duration), input_name='Duration')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Duration':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Duration')
            value_ = self.gds_validate_string(value_, node, 'Duration')
            self.Duration = value_
            self.Duration_nsprefix_ = child_.prefix
# end class StorageDetail


class TaxpayerIdentification(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, TinType=None, Number=None, Usage=None, EffectiveDate=None, ExpirationDate=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.TinType = TinType
        self.validate_TinType(self.TinType)
        self.TinType_nsprefix_ = "ns"
        self.Number = Number
        self.Number_nsprefix_ = None
        self.Usage = Usage
        self.Usage_nsprefix_ = None
        if isinstance(EffectiveDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(EffectiveDate, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = EffectiveDate
        self.EffectiveDate = initvalue_
        self.EffectiveDate_nsprefix_ = None
        if isinstance(ExpirationDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ExpirationDate, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = ExpirationDate
        self.ExpirationDate = initvalue_
        self.ExpirationDate_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TaxpayerIdentification)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxpayerIdentification.subclass:
            return TaxpayerIdentification.subclass(*args_, **kwargs_)
        else:
            return TaxpayerIdentification(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_TinType(self):
        return self.TinType
    def set_TinType(self, TinType):
        self.TinType = TinType
    def get_Number(self):
        return self.Number
    def set_Number(self, Number):
        self.Number = Number
    def get_Usage(self):
        return self.Usage
    def set_Usage(self, Usage):
        self.Usage = Usage
    def get_EffectiveDate(self):
        return self.EffectiveDate
    def set_EffectiveDate(self, EffectiveDate):
        self.EffectiveDate = EffectiveDate
    def get_ExpirationDate(self):
        return self.ExpirationDate
    def set_ExpirationDate(self, ExpirationDate):
        self.ExpirationDate = ExpirationDate
    def validate_TinType(self, value):
        result = True
        # Validate type TinType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BUSINESS_NATIONAL', 'BUSINESS_STATE', 'BUSINESS_UNION', 'PERSONAL_NATIONAL', 'PERSONAL_STATE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on TinType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.TinType is not None or
            self.Number is not None or
            self.Usage is not None or
            self.EffectiveDate is not None or
            self.ExpirationDate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TaxpayerIdentification', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TaxpayerIdentification')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TaxpayerIdentification':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TaxpayerIdentification')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TaxpayerIdentification', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TaxpayerIdentification'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TaxpayerIdentification', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TinType is not None:
            namespaceprefix_ = self.TinType_nsprefix_ + ':' if (UseCapturedNS_ and self.TinType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTinType>%s</%sTinType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TinType), input_name='TinType')), namespaceprefix_ , eol_))
        if self.Number is not None:
            namespaceprefix_ = self.Number_nsprefix_ + ':' if (UseCapturedNS_ and self.Number_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumber>%s</%sNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Number), input_name='Number')), namespaceprefix_ , eol_))
        if self.Usage is not None:
            namespaceprefix_ = self.Usage_nsprefix_ + ':' if (UseCapturedNS_ and self.Usage_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUsage>%s</%sUsage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Usage), input_name='Usage')), namespaceprefix_ , eol_))
        if self.EffectiveDate is not None:
            namespaceprefix_ = self.EffectiveDate_nsprefix_ + ':' if (UseCapturedNS_ and self.EffectiveDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEffectiveDate>%s</%sEffectiveDate>%s' % (namespaceprefix_ , self.gds_format_datetime(self.EffectiveDate, input_name='EffectiveDate'), namespaceprefix_ , eol_))
        if self.ExpirationDate is not None:
            namespaceprefix_ = self.ExpirationDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ExpirationDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExpirationDate>%s</%sExpirationDate>%s' % (namespaceprefix_ , self.gds_format_datetime(self.ExpirationDate, input_name='ExpirationDate'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'TinType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TinType')
            value_ = self.gds_validate_string(value_, node, 'TinType')
            self.TinType = value_
            self.TinType_nsprefix_ = child_.prefix
            # validate type TinType
            self.validate_TinType(self.TinType)
        elif nodeName_ == 'Number':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Number')
            value_ = self.gds_validate_string(value_, node, 'Number')
            self.Number = value_
            self.Number_nsprefix_ = child_.prefix
        elif nodeName_ == 'Usage':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Usage')
            value_ = self.gds_validate_string(value_, node, 'Usage')
            self.Usage = value_
            self.Usage_nsprefix_ = child_.prefix
        elif nodeName_ == 'EffectiveDate':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.EffectiveDate = dval_
            self.EffectiveDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'ExpirationDate':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.ExpirationDate = dval_
            self.ExpirationDate_nsprefix_ = child_.prefix
# end class TaxpayerIdentification


class TrackingId(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, TrackingIdType=None, FormId=None, UspsApplicationId=None, TrackingNumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.TrackingIdType = TrackingIdType
        self.validate_TrackingIdType(self.TrackingIdType)
        self.TrackingIdType_nsprefix_ = "ns"
        self.FormId = FormId
        self.FormId_nsprefix_ = None
        self.UspsApplicationId = UspsApplicationId
        self.UspsApplicationId_nsprefix_ = None
        self.TrackingNumber = TrackingNumber
        self.TrackingNumber_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackingId)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackingId.subclass:
            return TrackingId.subclass(*args_, **kwargs_)
        else:
            return TrackingId(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_TrackingIdType(self):
        return self.TrackingIdType
    def set_TrackingIdType(self, TrackingIdType):
        self.TrackingIdType = TrackingIdType
    def get_FormId(self):
        return self.FormId
    def set_FormId(self, FormId):
        self.FormId = FormId
    def get_UspsApplicationId(self):
        return self.UspsApplicationId
    def set_UspsApplicationId(self, UspsApplicationId):
        self.UspsApplicationId = UspsApplicationId
    def get_TrackingNumber(self):
        return self.TrackingNumber
    def set_TrackingNumber(self, TrackingNumber):
        self.TrackingNumber = TrackingNumber
    def validate_TrackingIdType(self, value):
        result = True
        # Validate type TrackingIdType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['EXPRESS', 'FEDEX', 'FREIGHT', 'GROUND', 'INTERNAL', 'UNKNOWN', 'USPS']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on TrackingIdType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.TrackingIdType is not None or
            self.FormId is not None or
            self.UspsApplicationId is not None or
            self.TrackingNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackingId', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackingId')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TrackingId':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TrackingId')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TrackingId', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TrackingId'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackingId', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TrackingIdType is not None:
            namespaceprefix_ = self.TrackingIdType_nsprefix_ + ':' if (UseCapturedNS_ and self.TrackingIdType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTrackingIdType>%s</%sTrackingIdType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TrackingIdType), input_name='TrackingIdType')), namespaceprefix_ , eol_))
        if self.FormId is not None:
            namespaceprefix_ = self.FormId_nsprefix_ + ':' if (UseCapturedNS_ and self.FormId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFormId>%s</%sFormId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FormId), input_name='FormId')), namespaceprefix_ , eol_))
        if self.UspsApplicationId is not None:
            namespaceprefix_ = self.UspsApplicationId_nsprefix_ + ':' if (UseCapturedNS_ and self.UspsApplicationId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUspsApplicationId>%s</%sUspsApplicationId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.UspsApplicationId), input_name='UspsApplicationId')), namespaceprefix_ , eol_))
        if self.TrackingNumber is not None:
            namespaceprefix_ = self.TrackingNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.TrackingNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTrackingNumber>%s</%sTrackingNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TrackingNumber), input_name='TrackingNumber')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'TrackingIdType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TrackingIdType')
            value_ = self.gds_validate_string(value_, node, 'TrackingIdType')
            self.TrackingIdType = value_
            self.TrackingIdType_nsprefix_ = child_.prefix
            # validate type TrackingIdType
            self.validate_TrackingIdType(self.TrackingIdType)
        elif nodeName_ == 'FormId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FormId')
            value_ = self.gds_validate_string(value_, node, 'FormId')
            self.FormId = value_
            self.FormId_nsprefix_ = child_.prefix
        elif nodeName_ == 'UspsApplicationId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'UspsApplicationId')
            value_ = self.gds_validate_string(value_, node, 'UspsApplicationId')
            self.UspsApplicationId = value_
            self.UspsApplicationId_nsprefix_ = child_.prefix
        elif nodeName_ == 'TrackingNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TrackingNumber')
            value_ = self.gds_validate_string(value_, node, 'TrackingNumber')
            self.TrackingNumber = value_
            self.TrackingNumber_nsprefix_ = child_.prefix
# end class TrackingId


class TransactionDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CustomerTransactionId=None, Localization=None, InternalTransactionId=None, Tracing=None, SourceFormat=None, Environment=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.CustomerTransactionId = CustomerTransactionId
        self.CustomerTransactionId_nsprefix_ = None
        self.Localization = Localization
        self.Localization_nsprefix_ = "ns"
        self.InternalTransactionId = InternalTransactionId
        self.InternalTransactionId_nsprefix_ = None
        self.Tracing = Tracing
        self.Tracing_nsprefix_ = None
        self.SourceFormat = SourceFormat
        self.validate_TransactionSourceFormat(self.SourceFormat)
        self.SourceFormat_nsprefix_ = "ns"
        self.Environment = Environment
        self.validate_WebServiceEnvironment(self.Environment)
        self.Environment_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TransactionDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TransactionDetail.subclass:
            return TransactionDetail.subclass(*args_, **kwargs_)
        else:
            return TransactionDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CustomerTransactionId(self):
        return self.CustomerTransactionId
    def set_CustomerTransactionId(self, CustomerTransactionId):
        self.CustomerTransactionId = CustomerTransactionId
    def get_Localization(self):
        return self.Localization
    def set_Localization(self, Localization):
        self.Localization = Localization
    def get_InternalTransactionId(self):
        return self.InternalTransactionId
    def set_InternalTransactionId(self, InternalTransactionId):
        self.InternalTransactionId = InternalTransactionId
    def get_Tracing(self):
        return self.Tracing
    def set_Tracing(self, Tracing):
        self.Tracing = Tracing
    def get_SourceFormat(self):
        return self.SourceFormat
    def set_SourceFormat(self, SourceFormat):
        self.SourceFormat = SourceFormat
    def get_Environment(self):
        return self.Environment
    def set_Environment(self, Environment):
        self.Environment = Environment
    def validate_TransactionSourceFormat(self, value):
        result = True
        # Validate type TransactionSourceFormat, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['API_CTS', 'API_XML', 'DIRECT', 'DIRECT_XML', 'FXRS_CTS', 'UNKNOWN', 'WSI_XML']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on TransactionSourceFormat' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_WebServiceEnvironment(self, value):
        result = True
        # Validate type WebServiceEnvironment, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['PRODUCTION', 'TEST']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on WebServiceEnvironment' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.CustomerTransactionId is not None or
            self.Localization is not None or
            self.InternalTransactionId is not None or
            self.Tracing is not None or
            self.SourceFormat is not None or
            self.Environment is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TransactionDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TransactionDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TransactionDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TransactionDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TransactionDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TransactionDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TransactionDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CustomerTransactionId is not None:
            namespaceprefix_ = self.CustomerTransactionId_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomerTransactionId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCustomerTransactionId>%s</%sCustomerTransactionId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CustomerTransactionId), input_name='CustomerTransactionId')), namespaceprefix_ , eol_))
        if self.Localization is not None:
            namespaceprefix_ = self.Localization_nsprefix_ + ':' if (UseCapturedNS_ and self.Localization_nsprefix_) else ''
            self.Localization.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Localization', pretty_print=pretty_print)
        if self.InternalTransactionId is not None:
            namespaceprefix_ = self.InternalTransactionId_nsprefix_ + ':' if (UseCapturedNS_ and self.InternalTransactionId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInternalTransactionId>%s</%sInternalTransactionId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InternalTransactionId), input_name='InternalTransactionId')), namespaceprefix_ , eol_))
        if self.Tracing is not None:
            namespaceprefix_ = self.Tracing_nsprefix_ + ':' if (UseCapturedNS_ and self.Tracing_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTracing>%s</%sTracing>%s' % (namespaceprefix_ , self.gds_format_boolean(self.Tracing, input_name='Tracing'), namespaceprefix_ , eol_))
        if self.SourceFormat is not None:
            namespaceprefix_ = self.SourceFormat_nsprefix_ + ':' if (UseCapturedNS_ and self.SourceFormat_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSourceFormat>%s</%sSourceFormat>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SourceFormat), input_name='SourceFormat')), namespaceprefix_ , eol_))
        if self.Environment is not None:
            namespaceprefix_ = self.Environment_nsprefix_ + ':' if (UseCapturedNS_ and self.Environment_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEnvironment>%s</%sEnvironment>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Environment), input_name='Environment')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CustomerTransactionId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CustomerTransactionId')
            value_ = self.gds_validate_string(value_, node, 'CustomerTransactionId')
            self.CustomerTransactionId = value_
            self.CustomerTransactionId_nsprefix_ = child_.prefix
        elif nodeName_ == 'Localization':
            obj_ = Localization.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Localization = obj_
            obj_.original_tagname_ = 'Localization'
        elif nodeName_ == 'InternalTransactionId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'InternalTransactionId')
            value_ = self.gds_validate_string(value_, node, 'InternalTransactionId')
            self.InternalTransactionId = value_
            self.InternalTransactionId_nsprefix_ = child_.prefix
        elif nodeName_ == 'Tracing':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'Tracing')
            ival_ = self.gds_validate_boolean(ival_, node, 'Tracing')
            self.Tracing = ival_
            self.Tracing_nsprefix_ = child_.prefix
        elif nodeName_ == 'SourceFormat':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SourceFormat')
            value_ = self.gds_validate_string(value_, node, 'SourceFormat')
            self.SourceFormat = value_
            self.SourceFormat_nsprefix_ = child_.prefix
            # validate type TransactionSourceFormat
            self.validate_TransactionSourceFormat(self.SourceFormat)
        elif nodeName_ == 'Environment':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Environment')
            value_ = self.gds_validate_string(value_, node, 'Environment')
            self.Environment = value_
            self.Environment_nsprefix_ = child_.prefix
            # validate type WebServiceEnvironment
            self.validate_WebServiceEnvironment(self.Environment)
# end class TransactionDetail


class TransborderDistributionLtlDetail(GeneratedsSuper):
    """Specifies details for origin-country LTL services performed by FedEx."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Payment=None, LtlScacCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Payment = Payment
        self.Payment_nsprefix_ = "ns"
        self.LtlScacCode = LtlScacCode
        self.LtlScacCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TransborderDistributionLtlDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TransborderDistributionLtlDetail.subclass:
            return TransborderDistributionLtlDetail.subclass(*args_, **kwargs_)
        else:
            return TransborderDistributionLtlDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Payment(self):
        return self.Payment
    def set_Payment(self, Payment):
        self.Payment = Payment
    def get_LtlScacCode(self):
        return self.LtlScacCode
    def set_LtlScacCode(self, LtlScacCode):
        self.LtlScacCode = LtlScacCode
    def hasContent_(self):
        if (
            self.Payment is not None or
            self.LtlScacCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TransborderDistributionLtlDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TransborderDistributionLtlDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TransborderDistributionLtlDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TransborderDistributionLtlDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TransborderDistributionLtlDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TransborderDistributionLtlDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TransborderDistributionLtlDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Payment is not None:
            namespaceprefix_ = self.Payment_nsprefix_ + ':' if (UseCapturedNS_ and self.Payment_nsprefix_) else ''
            self.Payment.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Payment', pretty_print=pretty_print)
        if self.LtlScacCode is not None:
            namespaceprefix_ = self.LtlScacCode_nsprefix_ + ':' if (UseCapturedNS_ and self.LtlScacCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLtlScacCode>%s</%sLtlScacCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LtlScacCode), input_name='LtlScacCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Payment':
            obj_ = Payment.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Payment = obj_
            obj_.original_tagname_ = 'Payment'
        elif nodeName_ == 'LtlScacCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LtlScacCode')
            value_ = self.gds_validate_string(value_, node, 'LtlScacCode')
            self.LtlScacCode = value_
            self.LtlScacCode_nsprefix_ = child_.prefix
# end class TransborderDistributionLtlDetail


class TransborderDistributionSpecialServicesRequested(GeneratedsSuper):
    """Specifies features of service within a Transborder Distribution
    shipment."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, SpecialServiceTypes=None, TransborderDistributionLtlDetail=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if SpecialServiceTypes is None:
            self.SpecialServiceTypes = []
        else:
            self.SpecialServiceTypes = SpecialServiceTypes
        self.SpecialServiceTypes_nsprefix_ = "ns"
        self.TransborderDistributionLtlDetail = TransborderDistributionLtlDetail
        self.TransborderDistributionLtlDetail_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TransborderDistributionSpecialServicesRequested)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TransborderDistributionSpecialServicesRequested.subclass:
            return TransborderDistributionSpecialServicesRequested.subclass(*args_, **kwargs_)
        else:
            return TransborderDistributionSpecialServicesRequested(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_SpecialServiceTypes(self):
        return self.SpecialServiceTypes
    def set_SpecialServiceTypes(self, SpecialServiceTypes):
        self.SpecialServiceTypes = SpecialServiceTypes
    def add_SpecialServiceTypes(self, value):
        self.SpecialServiceTypes.append(value)
    def insert_SpecialServiceTypes_at(self, index, value):
        self.SpecialServiceTypes.insert(index, value)
    def replace_SpecialServiceTypes_at(self, index, value):
        self.SpecialServiceTypes[index] = value
    def get_TransborderDistributionLtlDetail(self):
        return self.TransborderDistributionLtlDetail
    def set_TransborderDistributionLtlDetail(self, TransborderDistributionLtlDetail):
        self.TransborderDistributionLtlDetail = TransborderDistributionLtlDetail
    def validate_TransborderDistributionSpecialServiceType(self, value):
        result = True
        # Validate type TransborderDistributionSpecialServiceType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FEDEX_LTL']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on TransborderDistributionSpecialServiceType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.SpecialServiceTypes or
            self.TransborderDistributionLtlDetail is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TransborderDistributionSpecialServicesRequested', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TransborderDistributionSpecialServicesRequested')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TransborderDistributionSpecialServicesRequested':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TransborderDistributionSpecialServicesRequested')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TransborderDistributionSpecialServicesRequested', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TransborderDistributionSpecialServicesRequested'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TransborderDistributionSpecialServicesRequested', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for SpecialServiceTypes_ in self.SpecialServiceTypes:
            namespaceprefix_ = self.SpecialServiceTypes_nsprefix_ + ':' if (UseCapturedNS_ and self.SpecialServiceTypes_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSpecialServiceTypes>%s</%sSpecialServiceTypes>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(SpecialServiceTypes_), input_name='SpecialServiceTypes')), namespaceprefix_ , eol_))
        if self.TransborderDistributionLtlDetail is not None:
            namespaceprefix_ = self.TransborderDistributionLtlDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.TransborderDistributionLtlDetail_nsprefix_) else ''
            self.TransborderDistributionLtlDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TransborderDistributionLtlDetail', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'SpecialServiceTypes':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SpecialServiceTypes')
            value_ = self.gds_validate_string(value_, node, 'SpecialServiceTypes')
            self.SpecialServiceTypes.append(value_)
            self.SpecialServiceTypes_nsprefix_ = child_.prefix
            # validate type TransborderDistributionSpecialServiceType
            self.validate_TransborderDistributionSpecialServiceType(self.SpecialServiceTypes[-1])
        elif nodeName_ == 'TransborderDistributionLtlDetail':
            obj_ = TransborderDistributionLtlDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TransborderDistributionLtlDetail = obj_
            obj_.original_tagname_ = 'TransborderDistributionLtlDetail'
# end class TransborderDistributionSpecialServicesRequested


class TransborderDistributionSummaryDetail(GeneratedsSuper):
    """Specifies the summary of aggregates that are maintianed for a
    transborder consolidation."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ExpressPackageCount=None, ExpressTotalPackageWeight=None, ExpressTotalPackageAdjustedWeight=None, ExpressFreightPackageCount=None, ExpressTotalFreightWeight=None, ExpressTotalFreightAdjustedWeight=None, GroundPackageCount=None, GroundTotalPackageWeight=None, GroundTotalPackageAdjustedWeight=None, NumberOfUnconsolidatedCommodities=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ExpressPackageCount = ExpressPackageCount
        self.ExpressPackageCount_nsprefix_ = None
        self.ExpressTotalPackageWeight = ExpressTotalPackageWeight
        self.ExpressTotalPackageWeight_nsprefix_ = "ns"
        self.ExpressTotalPackageAdjustedWeight = ExpressTotalPackageAdjustedWeight
        self.ExpressTotalPackageAdjustedWeight_nsprefix_ = "ns"
        self.ExpressFreightPackageCount = ExpressFreightPackageCount
        self.ExpressFreightPackageCount_nsprefix_ = None
        self.ExpressTotalFreightWeight = ExpressTotalFreightWeight
        self.ExpressTotalFreightWeight_nsprefix_ = "ns"
        self.ExpressTotalFreightAdjustedWeight = ExpressTotalFreightAdjustedWeight
        self.ExpressTotalFreightAdjustedWeight_nsprefix_ = "ns"
        self.GroundPackageCount = GroundPackageCount
        self.GroundPackageCount_nsprefix_ = None
        self.GroundTotalPackageWeight = GroundTotalPackageWeight
        self.GroundTotalPackageWeight_nsprefix_ = "ns"
        self.GroundTotalPackageAdjustedWeight = GroundTotalPackageAdjustedWeight
        self.GroundTotalPackageAdjustedWeight_nsprefix_ = "ns"
        self.NumberOfUnconsolidatedCommodities = NumberOfUnconsolidatedCommodities
        self.NumberOfUnconsolidatedCommodities_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TransborderDistributionSummaryDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TransborderDistributionSummaryDetail.subclass:
            return TransborderDistributionSummaryDetail.subclass(*args_, **kwargs_)
        else:
            return TransborderDistributionSummaryDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ExpressPackageCount(self):
        return self.ExpressPackageCount
    def set_ExpressPackageCount(self, ExpressPackageCount):
        self.ExpressPackageCount = ExpressPackageCount
    def get_ExpressTotalPackageWeight(self):
        return self.ExpressTotalPackageWeight
    def set_ExpressTotalPackageWeight(self, ExpressTotalPackageWeight):
        self.ExpressTotalPackageWeight = ExpressTotalPackageWeight
    def get_ExpressTotalPackageAdjustedWeight(self):
        return self.ExpressTotalPackageAdjustedWeight
    def set_ExpressTotalPackageAdjustedWeight(self, ExpressTotalPackageAdjustedWeight):
        self.ExpressTotalPackageAdjustedWeight = ExpressTotalPackageAdjustedWeight
    def get_ExpressFreightPackageCount(self):
        return self.ExpressFreightPackageCount
    def set_ExpressFreightPackageCount(self, ExpressFreightPackageCount):
        self.ExpressFreightPackageCount = ExpressFreightPackageCount
    def get_ExpressTotalFreightWeight(self):
        return self.ExpressTotalFreightWeight
    def set_ExpressTotalFreightWeight(self, ExpressTotalFreightWeight):
        self.ExpressTotalFreightWeight = ExpressTotalFreightWeight
    def get_ExpressTotalFreightAdjustedWeight(self):
        return self.ExpressTotalFreightAdjustedWeight
    def set_ExpressTotalFreightAdjustedWeight(self, ExpressTotalFreightAdjustedWeight):
        self.ExpressTotalFreightAdjustedWeight = ExpressTotalFreightAdjustedWeight
    def get_GroundPackageCount(self):
        return self.GroundPackageCount
    def set_GroundPackageCount(self, GroundPackageCount):
        self.GroundPackageCount = GroundPackageCount
    def get_GroundTotalPackageWeight(self):
        return self.GroundTotalPackageWeight
    def set_GroundTotalPackageWeight(self, GroundTotalPackageWeight):
        self.GroundTotalPackageWeight = GroundTotalPackageWeight
    def get_GroundTotalPackageAdjustedWeight(self):
        return self.GroundTotalPackageAdjustedWeight
    def set_GroundTotalPackageAdjustedWeight(self, GroundTotalPackageAdjustedWeight):
        self.GroundTotalPackageAdjustedWeight = GroundTotalPackageAdjustedWeight
    def get_NumberOfUnconsolidatedCommodities(self):
        return self.NumberOfUnconsolidatedCommodities
    def set_NumberOfUnconsolidatedCommodities(self, NumberOfUnconsolidatedCommodities):
        self.NumberOfUnconsolidatedCommodities = NumberOfUnconsolidatedCommodities
    def hasContent_(self):
        if (
            self.ExpressPackageCount is not None or
            self.ExpressTotalPackageWeight is not None or
            self.ExpressTotalPackageAdjustedWeight is not None or
            self.ExpressFreightPackageCount is not None or
            self.ExpressTotalFreightWeight is not None or
            self.ExpressTotalFreightAdjustedWeight is not None or
            self.GroundPackageCount is not None or
            self.GroundTotalPackageWeight is not None or
            self.GroundTotalPackageAdjustedWeight is not None or
            self.NumberOfUnconsolidatedCommodities is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TransborderDistributionSummaryDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TransborderDistributionSummaryDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TransborderDistributionSummaryDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TransborderDistributionSummaryDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TransborderDistributionSummaryDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TransborderDistributionSummaryDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TransborderDistributionSummaryDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ExpressPackageCount is not None:
            namespaceprefix_ = self.ExpressPackageCount_nsprefix_ + ':' if (UseCapturedNS_ and self.ExpressPackageCount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExpressPackageCount>%s</%sExpressPackageCount>%s' % (namespaceprefix_ , self.gds_format_integer(self.ExpressPackageCount, input_name='ExpressPackageCount'), namespaceprefix_ , eol_))
        if self.ExpressTotalPackageWeight is not None:
            namespaceprefix_ = self.ExpressTotalPackageWeight_nsprefix_ + ':' if (UseCapturedNS_ and self.ExpressTotalPackageWeight_nsprefix_) else ''
            self.ExpressTotalPackageWeight.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ExpressTotalPackageWeight', pretty_print=pretty_print)
        if self.ExpressTotalPackageAdjustedWeight is not None:
            namespaceprefix_ = self.ExpressTotalPackageAdjustedWeight_nsprefix_ + ':' if (UseCapturedNS_ and self.ExpressTotalPackageAdjustedWeight_nsprefix_) else ''
            self.ExpressTotalPackageAdjustedWeight.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ExpressTotalPackageAdjustedWeight', pretty_print=pretty_print)
        if self.ExpressFreightPackageCount is not None:
            namespaceprefix_ = self.ExpressFreightPackageCount_nsprefix_ + ':' if (UseCapturedNS_ and self.ExpressFreightPackageCount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExpressFreightPackageCount>%s</%sExpressFreightPackageCount>%s' % (namespaceprefix_ , self.gds_format_integer(self.ExpressFreightPackageCount, input_name='ExpressFreightPackageCount'), namespaceprefix_ , eol_))
        if self.ExpressTotalFreightWeight is not None:
            namespaceprefix_ = self.ExpressTotalFreightWeight_nsprefix_ + ':' if (UseCapturedNS_ and self.ExpressTotalFreightWeight_nsprefix_) else ''
            self.ExpressTotalFreightWeight.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ExpressTotalFreightWeight', pretty_print=pretty_print)
        if self.ExpressTotalFreightAdjustedWeight is not None:
            namespaceprefix_ = self.ExpressTotalFreightAdjustedWeight_nsprefix_ + ':' if (UseCapturedNS_ and self.ExpressTotalFreightAdjustedWeight_nsprefix_) else ''
            self.ExpressTotalFreightAdjustedWeight.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ExpressTotalFreightAdjustedWeight', pretty_print=pretty_print)
        if self.GroundPackageCount is not None:
            namespaceprefix_ = self.GroundPackageCount_nsprefix_ + ':' if (UseCapturedNS_ and self.GroundPackageCount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroundPackageCount>%s</%sGroundPackageCount>%s' % (namespaceprefix_ , self.gds_format_integer(self.GroundPackageCount, input_name='GroundPackageCount'), namespaceprefix_ , eol_))
        if self.GroundTotalPackageWeight is not None:
            namespaceprefix_ = self.GroundTotalPackageWeight_nsprefix_ + ':' if (UseCapturedNS_ and self.GroundTotalPackageWeight_nsprefix_) else ''
            self.GroundTotalPackageWeight.export(outfile, level, namespaceprefix_, namespacedef_='', name_='GroundTotalPackageWeight', pretty_print=pretty_print)
        if self.GroundTotalPackageAdjustedWeight is not None:
            namespaceprefix_ = self.GroundTotalPackageAdjustedWeight_nsprefix_ + ':' if (UseCapturedNS_ and self.GroundTotalPackageAdjustedWeight_nsprefix_) else ''
            self.GroundTotalPackageAdjustedWeight.export(outfile, level, namespaceprefix_, namespacedef_='', name_='GroundTotalPackageAdjustedWeight', pretty_print=pretty_print)
        if self.NumberOfUnconsolidatedCommodities is not None:
            namespaceprefix_ = self.NumberOfUnconsolidatedCommodities_nsprefix_ + ':' if (UseCapturedNS_ and self.NumberOfUnconsolidatedCommodities_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumberOfUnconsolidatedCommodities>%s</%sNumberOfUnconsolidatedCommodities>%s' % (namespaceprefix_ , self.gds_format_integer(self.NumberOfUnconsolidatedCommodities, input_name='NumberOfUnconsolidatedCommodities'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ExpressPackageCount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'ExpressPackageCount')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'ExpressPackageCount')
            self.ExpressPackageCount = ival_
            self.ExpressPackageCount_nsprefix_ = child_.prefix
        elif nodeName_ == 'ExpressTotalPackageWeight':
            obj_ = Weight.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ExpressTotalPackageWeight = obj_
            obj_.original_tagname_ = 'ExpressTotalPackageWeight'
        elif nodeName_ == 'ExpressTotalPackageAdjustedWeight':
            obj_ = Weight.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ExpressTotalPackageAdjustedWeight = obj_
            obj_.original_tagname_ = 'ExpressTotalPackageAdjustedWeight'
        elif nodeName_ == 'ExpressFreightPackageCount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'ExpressFreightPackageCount')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'ExpressFreightPackageCount')
            self.ExpressFreightPackageCount = ival_
            self.ExpressFreightPackageCount_nsprefix_ = child_.prefix
        elif nodeName_ == 'ExpressTotalFreightWeight':
            obj_ = Weight.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ExpressTotalFreightWeight = obj_
            obj_.original_tagname_ = 'ExpressTotalFreightWeight'
        elif nodeName_ == 'ExpressTotalFreightAdjustedWeight':
            obj_ = Weight.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ExpressTotalFreightAdjustedWeight = obj_
            obj_.original_tagname_ = 'ExpressTotalFreightAdjustedWeight'
        elif nodeName_ == 'GroundPackageCount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'GroundPackageCount')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'GroundPackageCount')
            self.GroundPackageCount = ival_
            self.GroundPackageCount_nsprefix_ = child_.prefix
        elif nodeName_ == 'GroundTotalPackageWeight':
            obj_ = Weight.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.GroundTotalPackageWeight = obj_
            obj_.original_tagname_ = 'GroundTotalPackageWeight'
        elif nodeName_ == 'GroundTotalPackageAdjustedWeight':
            obj_ = Weight.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.GroundTotalPackageAdjustedWeight = obj_
            obj_.original_tagname_ = 'GroundTotalPackageAdjustedWeight'
        elif nodeName_ == 'NumberOfUnconsolidatedCommodities' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'NumberOfUnconsolidatedCommodities')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'NumberOfUnconsolidatedCommodities')
            self.NumberOfUnconsolidatedCommodities = ival_
            self.NumberOfUnconsolidatedCommodities_nsprefix_ = child_.prefix
# end class TransborderDistributionSummaryDetail


class UploadDocumentReferenceDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, LineNumber=None, CustomerReference=None, Description=None, DocumentProducer=None, DocumentType=None, DocumentId=None, DocumentIdProducer=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.LineNumber = LineNumber
        self.LineNumber_nsprefix_ = None
        self.CustomerReference = CustomerReference
        self.CustomerReference_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
        self.DocumentProducer = DocumentProducer
        self.validate_UploadDocumentProducerType(self.DocumentProducer)
        self.DocumentProducer_nsprefix_ = "ns"
        self.DocumentType = DocumentType
        self.validate_UploadDocumentType(self.DocumentType)
        self.DocumentType_nsprefix_ = "ns"
        self.DocumentId = DocumentId
        self.DocumentId_nsprefix_ = None
        self.DocumentIdProducer = DocumentIdProducer
        self.validate_UploadDocumentIdProducer(self.DocumentIdProducer)
        self.DocumentIdProducer_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, UploadDocumentReferenceDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if UploadDocumentReferenceDetail.subclass:
            return UploadDocumentReferenceDetail.subclass(*args_, **kwargs_)
        else:
            return UploadDocumentReferenceDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_LineNumber(self):
        return self.LineNumber
    def set_LineNumber(self, LineNumber):
        self.LineNumber = LineNumber
    def get_CustomerReference(self):
        return self.CustomerReference
    def set_CustomerReference(self, CustomerReference):
        self.CustomerReference = CustomerReference
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def get_DocumentProducer(self):
        return self.DocumentProducer
    def set_DocumentProducer(self, DocumentProducer):
        self.DocumentProducer = DocumentProducer
    def get_DocumentType(self):
        return self.DocumentType
    def set_DocumentType(self, DocumentType):
        self.DocumentType = DocumentType
    def get_DocumentId(self):
        return self.DocumentId
    def set_DocumentId(self, DocumentId):
        self.DocumentId = DocumentId
    def get_DocumentIdProducer(self):
        return self.DocumentIdProducer
    def set_DocumentIdProducer(self, DocumentIdProducer):
        self.DocumentIdProducer = DocumentIdProducer
    def validate_UploadDocumentProducerType(self, value):
        result = True
        # Validate type UploadDocumentProducerType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CUSTOMER', 'FEDEX_CAFE', 'FEDEX_CLS', 'FEDEX_FIDT', 'FEDEX_FXRS', 'FEDEX_GSMW', 'FEDEX_GTM', 'OTHER']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on UploadDocumentProducerType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_UploadDocumentType(self, value):
        result = True
        # Validate type UploadDocumentType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CERTIFICATE_OF_ORIGIN', 'COMMERCIAL_INVOICE', 'ETD_LABEL', 'NAFTA_CERTIFICATE_OF_ORIGIN', 'NET_RATE_SHEET', 'OTHER', 'PRO_FORMA_INVOICE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on UploadDocumentType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_UploadDocumentIdProducer(self, value):
        result = True
        # Validate type UploadDocumentIdProducer, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CUSTOMER', 'FEDEX_CAFE', 'FEDEX_CSHP', 'FEDEX_FXRS', 'FEDEX_GSMW', 'FEDEX_GTM', 'FEDEX_INET']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on UploadDocumentIdProducer' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.LineNumber is not None or
            self.CustomerReference is not None or
            self.Description is not None or
            self.DocumentProducer is not None or
            self.DocumentType is not None or
            self.DocumentId is not None or
            self.DocumentIdProducer is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='UploadDocumentReferenceDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('UploadDocumentReferenceDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'UploadDocumentReferenceDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='UploadDocumentReferenceDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='UploadDocumentReferenceDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='UploadDocumentReferenceDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='UploadDocumentReferenceDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LineNumber is not None:
            namespaceprefix_ = self.LineNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.LineNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLineNumber>%s</%sLineNumber>%s' % (namespaceprefix_ , self.gds_format_integer(self.LineNumber, input_name='LineNumber'), namespaceprefix_ , eol_))
        if self.CustomerReference is not None:
            namespaceprefix_ = self.CustomerReference_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomerReference_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCustomerReference>%s</%sCustomerReference>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CustomerReference), input_name='CustomerReference')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
        if self.DocumentProducer is not None:
            namespaceprefix_ = self.DocumentProducer_nsprefix_ + ':' if (UseCapturedNS_ and self.DocumentProducer_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocumentProducer>%s</%sDocumentProducer>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DocumentProducer), input_name='DocumentProducer')), namespaceprefix_ , eol_))
        if self.DocumentType is not None:
            namespaceprefix_ = self.DocumentType_nsprefix_ + ':' if (UseCapturedNS_ and self.DocumentType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocumentType>%s</%sDocumentType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DocumentType), input_name='DocumentType')), namespaceprefix_ , eol_))
        if self.DocumentId is not None:
            namespaceprefix_ = self.DocumentId_nsprefix_ + ':' if (UseCapturedNS_ and self.DocumentId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocumentId>%s</%sDocumentId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DocumentId), input_name='DocumentId')), namespaceprefix_ , eol_))
        if self.DocumentIdProducer is not None:
            namespaceprefix_ = self.DocumentIdProducer_nsprefix_ + ':' if (UseCapturedNS_ and self.DocumentIdProducer_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocumentIdProducer>%s</%sDocumentIdProducer>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DocumentIdProducer), input_name='DocumentIdProducer')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'LineNumber' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'LineNumber')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'LineNumber')
            self.LineNumber = ival_
            self.LineNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'CustomerReference':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CustomerReference')
            value_ = self.gds_validate_string(value_, node, 'CustomerReference')
            self.CustomerReference = value_
            self.CustomerReference_nsprefix_ = child_.prefix
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
        elif nodeName_ == 'DocumentProducer':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DocumentProducer')
            value_ = self.gds_validate_string(value_, node, 'DocumentProducer')
            self.DocumentProducer = value_
            self.DocumentProducer_nsprefix_ = child_.prefix
            # validate type UploadDocumentProducerType
            self.validate_UploadDocumentProducerType(self.DocumentProducer)
        elif nodeName_ == 'DocumentType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DocumentType')
            value_ = self.gds_validate_string(value_, node, 'DocumentType')
            self.DocumentType = value_
            self.DocumentType_nsprefix_ = child_.prefix
            # validate type UploadDocumentType
            self.validate_UploadDocumentType(self.DocumentType)
        elif nodeName_ == 'DocumentId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DocumentId')
            value_ = self.gds_validate_string(value_, node, 'DocumentId')
            self.DocumentId = value_
            self.DocumentId_nsprefix_ = child_.prefix
        elif nodeName_ == 'DocumentIdProducer':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DocumentIdProducer')
            value_ = self.gds_validate_string(value_, node, 'DocumentIdProducer')
            self.DocumentIdProducer = value_
            self.DocumentIdProducer_nsprefix_ = child_.prefix
            # validate type UploadDocumentIdProducer
            self.validate_UploadDocumentIdProducer(self.DocumentIdProducer)
# end class UploadDocumentReferenceDetail


class UserDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, UserId=None, Password=None, UniqueUserId=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.UserId = UserId
        self.UserId_nsprefix_ = None
        self.Password = Password
        self.Password_nsprefix_ = None
        self.UniqueUserId = UniqueUserId
        self.UniqueUserId_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, UserDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if UserDetail.subclass:
            return UserDetail.subclass(*args_, **kwargs_)
        else:
            return UserDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_UserId(self):
        return self.UserId
    def set_UserId(self, UserId):
        self.UserId = UserId
    def get_Password(self):
        return self.Password
    def set_Password(self, Password):
        self.Password = Password
    def get_UniqueUserId(self):
        return self.UniqueUserId
    def set_UniqueUserId(self, UniqueUserId):
        self.UniqueUserId = UniqueUserId
    def hasContent_(self):
        if (
            self.UserId is not None or
            self.Password is not None or
            self.UniqueUserId is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='UserDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('UserDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'UserDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='UserDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='UserDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='UserDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='UserDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.UserId is not None:
            namespaceprefix_ = self.UserId_nsprefix_ + ':' if (UseCapturedNS_ and self.UserId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUserId>%s</%sUserId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.UserId), input_name='UserId')), namespaceprefix_ , eol_))
        if self.Password is not None:
            namespaceprefix_ = self.Password_nsprefix_ + ':' if (UseCapturedNS_ and self.Password_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPassword>%s</%sPassword>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Password), input_name='Password')), namespaceprefix_ , eol_))
        if self.UniqueUserId is not None:
            namespaceprefix_ = self.UniqueUserId_nsprefix_ + ':' if (UseCapturedNS_ and self.UniqueUserId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUniqueUserId>%s</%sUniqueUserId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.UniqueUserId), input_name='UniqueUserId')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'UserId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'UserId')
            value_ = self.gds_validate_string(value_, node, 'UserId')
            self.UserId = value_
            self.UserId_nsprefix_ = child_.prefix
        elif nodeName_ == 'Password':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Password')
            value_ = self.gds_validate_string(value_, node, 'Password')
            self.Password = value_
            self.Password_nsprefix_ = child_.prefix
        elif nodeName_ == 'UniqueUserId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'UniqueUserId')
            value_ = self.gds_validate_string(value_, node, 'UniqueUserId')
            self.UniqueUserId = value_
            self.UniqueUserId_nsprefix_ = child_.prefix
# end class UserDetail


class VariableHandlingChargeDetail(GeneratedsSuper):
    """This definition of variable handling charge detail is intended for use
    in Jan 2011 corp load."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, FixedValue=None, PercentValue=None, RateElementBasis=None, RateTypeBasis=None, RateLevelBasis=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.FixedValue = FixedValue
        self.FixedValue_nsprefix_ = "ns"
        self.PercentValue = PercentValue
        self.PercentValue_nsprefix_ = None
        self.RateElementBasis = RateElementBasis
        self.validate_RateElementBasisType(self.RateElementBasis)
        self.RateElementBasis_nsprefix_ = "ns"
        self.RateTypeBasis = RateTypeBasis
        self.validate_RateTypeBasisType(self.RateTypeBasis)
        self.RateTypeBasis_nsprefix_ = "ns"
        self.RateLevelBasis = RateLevelBasis
        self.validate_RateLevelBasisType(self.RateLevelBasis)
        self.RateLevelBasis_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, VariableHandlingChargeDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if VariableHandlingChargeDetail.subclass:
            return VariableHandlingChargeDetail.subclass(*args_, **kwargs_)
        else:
            return VariableHandlingChargeDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_FixedValue(self):
        return self.FixedValue
    def set_FixedValue(self, FixedValue):
        self.FixedValue = FixedValue
    def get_PercentValue(self):
        return self.PercentValue
    def set_PercentValue(self, PercentValue):
        self.PercentValue = PercentValue
    def get_RateElementBasis(self):
        return self.RateElementBasis
    def set_RateElementBasis(self, RateElementBasis):
        self.RateElementBasis = RateElementBasis
    def get_RateTypeBasis(self):
        return self.RateTypeBasis
    def set_RateTypeBasis(self, RateTypeBasis):
        self.RateTypeBasis = RateTypeBasis
    def get_RateLevelBasis(self):
        return self.RateLevelBasis
    def set_RateLevelBasis(self, RateLevelBasis):
        self.RateLevelBasis = RateLevelBasis
    def validate_RateElementBasisType(self, value):
        result = True
        # Validate type RateElementBasisType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BASE_CHARGE', 'NET_CHARGE', 'NET_CHARGE_EXCLUDING_TAXES', 'NET_FREIGHT']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on RateElementBasisType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_RateTypeBasisType(self, value):
        result = True
        # Validate type RateTypeBasisType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ACCOUNT', 'ACTUAL', 'CURRENT', 'CUSTOM', 'LIST']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on RateTypeBasisType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_RateLevelBasisType(self, value):
        result = True
        # Validate type RateLevelBasisType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BUNDLED_RATE', 'INDIVIDUAL_PACKAGE_RATE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on RateLevelBasisType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.FixedValue is not None or
            self.PercentValue is not None or
            self.RateElementBasis is not None or
            self.RateTypeBasis is not None or
            self.RateLevelBasis is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='VariableHandlingChargeDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('VariableHandlingChargeDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'VariableHandlingChargeDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='VariableHandlingChargeDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='VariableHandlingChargeDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='VariableHandlingChargeDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='VariableHandlingChargeDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.FixedValue is not None:
            namespaceprefix_ = self.FixedValue_nsprefix_ + ':' if (UseCapturedNS_ and self.FixedValue_nsprefix_) else ''
            self.FixedValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FixedValue', pretty_print=pretty_print)
        if self.PercentValue is not None:
            namespaceprefix_ = self.PercentValue_nsprefix_ + ':' if (UseCapturedNS_ and self.PercentValue_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPercentValue>%s</%sPercentValue>%s' % (namespaceprefix_ , self.gds_format_decimal(self.PercentValue, input_name='PercentValue'), namespaceprefix_ , eol_))
        if self.RateElementBasis is not None:
            namespaceprefix_ = self.RateElementBasis_nsprefix_ + ':' if (UseCapturedNS_ and self.RateElementBasis_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRateElementBasis>%s</%sRateElementBasis>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RateElementBasis), input_name='RateElementBasis')), namespaceprefix_ , eol_))
        if self.RateTypeBasis is not None:
            namespaceprefix_ = self.RateTypeBasis_nsprefix_ + ':' if (UseCapturedNS_ and self.RateTypeBasis_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRateTypeBasis>%s</%sRateTypeBasis>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RateTypeBasis), input_name='RateTypeBasis')), namespaceprefix_ , eol_))
        if self.RateLevelBasis is not None:
            namespaceprefix_ = self.RateLevelBasis_nsprefix_ + ':' if (UseCapturedNS_ and self.RateLevelBasis_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRateLevelBasis>%s</%sRateLevelBasis>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RateLevelBasis), input_name='RateLevelBasis')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'FixedValue':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FixedValue = obj_
            obj_.original_tagname_ = 'FixedValue'
        elif nodeName_ == 'PercentValue' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'PercentValue')
            fval_ = self.gds_validate_decimal(fval_, node, 'PercentValue')
            self.PercentValue = fval_
            self.PercentValue_nsprefix_ = child_.prefix
        elif nodeName_ == 'RateElementBasis':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RateElementBasis')
            value_ = self.gds_validate_string(value_, node, 'RateElementBasis')
            self.RateElementBasis = value_
            self.RateElementBasis_nsprefix_ = child_.prefix
            # validate type RateElementBasisType
            self.validate_RateElementBasisType(self.RateElementBasis)
        elif nodeName_ == 'RateTypeBasis':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RateTypeBasis')
            value_ = self.gds_validate_string(value_, node, 'RateTypeBasis')
            self.RateTypeBasis = value_
            self.RateTypeBasis_nsprefix_ = child_.prefix
            # validate type RateTypeBasisType
            self.validate_RateTypeBasisType(self.RateTypeBasis)
        elif nodeName_ == 'RateLevelBasis':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RateLevelBasis')
            value_ = self.gds_validate_string(value_, node, 'RateLevelBasis')
            self.RateLevelBasis = value_
            self.RateLevelBasis_nsprefix_ = child_.prefix
            # validate type RateLevelBasisType
            self.validate_RateLevelBasisType(self.RateLevelBasis)
# end class VariableHandlingChargeDetail


class Volume(GeneratedsSuper):
    """Three-dimensional volume/cubic measurement."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Units=None, Value=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Units = Units
        self.validate_VolumeUnits(self.Units)
        self.Units_nsprefix_ = "ns"
        self.Value = Value
        self.Value_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Volume)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Volume.subclass:
            return Volume.subclass(*args_, **kwargs_)
        else:
            return Volume(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Units(self):
        return self.Units
    def set_Units(self, Units):
        self.Units = Units
    def get_Value(self):
        return self.Value
    def set_Value(self, Value):
        self.Value = Value
    def validate_VolumeUnits(self, value):
        result = True
        # Validate type VolumeUnits, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CUBIC_FT', 'CUBIC_M']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on VolumeUnits' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Units is not None or
            self.Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Volume', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Volume')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Volume':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Volume')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Volume', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Volume'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Volume', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Units is not None:
            namespaceprefix_ = self.Units_nsprefix_ + ':' if (UseCapturedNS_ and self.Units_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnits>%s</%sUnits>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Units), input_name='Units')), namespaceprefix_ , eol_))
        if self.Value is not None:
            namespaceprefix_ = self.Value_nsprefix_ + ':' if (UseCapturedNS_ and self.Value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValue>%s</%sValue>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Value, input_name='Value'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Units':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Units')
            value_ = self.gds_validate_string(value_, node, 'Units')
            self.Units = value_
            self.Units_nsprefix_ = child_.prefix
            # validate type VolumeUnits
            self.validate_VolumeUnits(self.Units)
        elif nodeName_ == 'Value' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Value')
            fval_ = self.gds_validate_decimal(fval_, node, 'Value')
            self.Value = fval_
            self.Value_nsprefix_ = child_.prefix
# end class Volume


class WeighingDetail(GeneratedsSuper):
    """Specifies a single type of weighing performed on a shipment"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.validate_WeighingScaleType(self.Type)
        self.Type_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, WeighingDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if WeighingDetail.subclass:
            return WeighingDetail.subclass(*args_, **kwargs_)
        else:
            return WeighingDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def validate_WeighingScaleType(self, value):
        result = True
        # Validate type WeighingScaleType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FEDEX_SCALE', 'PUBLIC_SCALE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on WeighingScaleType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Type is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='WeighingDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('WeighingDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'WeighingDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='WeighingDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='WeighingDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='WeighingDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='WeighingDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type WeighingScaleType
            self.validate_WeighingScaleType(self.Type)
# end class WeighingDetail


class Weight(GeneratedsSuper):
    """The descriptive data for the heaviness of an object."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Units=None, Value=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Units = Units
        self.validate_WeightUnits(self.Units)
        self.Units_nsprefix_ = "ns"
        self.Value = Value
        self.Value_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Weight)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Weight.subclass:
            return Weight.subclass(*args_, **kwargs_)
        else:
            return Weight(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Units(self):
        return self.Units
    def set_Units(self, Units):
        self.Units = Units
    def get_Value(self):
        return self.Value
    def set_Value(self, Value):
        self.Value = Value
    def validate_WeightUnits(self, value):
        result = True
        # Validate type WeightUnits, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['KG', 'LB']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on WeightUnits' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Units is not None or
            self.Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Weight', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Weight')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Weight':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Weight')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Weight', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Weight'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Weight', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Units is not None:
            namespaceprefix_ = self.Units_nsprefix_ + ':' if (UseCapturedNS_ and self.Units_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnits>%s</%sUnits>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Units), input_name='Units')), namespaceprefix_ , eol_))
        if self.Value is not None:
            namespaceprefix_ = self.Value_nsprefix_ + ':' if (UseCapturedNS_ and self.Value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValue>%s</%sValue>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Value, input_name='Value'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Units':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Units')
            value_ = self.gds_validate_string(value_, node, 'Units')
            self.Units = value_
            self.Units_nsprefix_ = child_.prefix
            # validate type WeightUnits
            self.validate_WeightUnits(self.Units)
        elif nodeName_ == 'Value' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Value')
            fval_ = self.gds_validate_decimal(fval_, node, 'Value')
            self.Value = fval_
            self.Value_nsprefix_ = child_.prefix
# end class Weight


class WelcomeKitDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, IsRequested=None, PromotionCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.IsRequested = IsRequested
        self.IsRequested_nsprefix_ = None
        self.PromotionCode = PromotionCode
        self.PromotionCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, WelcomeKitDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if WelcomeKitDetail.subclass:
            return WelcomeKitDetail.subclass(*args_, **kwargs_)
        else:
            return WelcomeKitDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_IsRequested(self):
        return self.IsRequested
    def set_IsRequested(self, IsRequested):
        self.IsRequested = IsRequested
    def get_PromotionCode(self):
        return self.PromotionCode
    def set_PromotionCode(self, PromotionCode):
        self.PromotionCode = PromotionCode
    def hasContent_(self):
        if (
            self.IsRequested is not None or
            self.PromotionCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='WelcomeKitDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('WelcomeKitDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'WelcomeKitDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='WelcomeKitDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='WelcomeKitDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='WelcomeKitDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='WelcomeKitDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.IsRequested is not None:
            namespaceprefix_ = self.IsRequested_nsprefix_ + ':' if (UseCapturedNS_ and self.IsRequested_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsRequested>%s</%sIsRequested>%s' % (namespaceprefix_ , self.gds_format_boolean(self.IsRequested, input_name='IsRequested'), namespaceprefix_ , eol_))
        if self.PromotionCode is not None:
            namespaceprefix_ = self.PromotionCode_nsprefix_ + ':' if (UseCapturedNS_ and self.PromotionCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPromotionCode>%s</%sPromotionCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PromotionCode), input_name='PromotionCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'IsRequested':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'IsRequested')
            ival_ = self.gds_validate_boolean(ival_, node, 'IsRequested')
            self.IsRequested = ival_
            self.IsRequested_nsprefix_ = child_.prefix
        elif nodeName_ == 'PromotionCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PromotionCode')
            value_ = self.gds_validate_string(value_, node, 'PromotionCode')
            self.PromotionCode = value_
            self.PromotionCode_nsprefix_ = child_.prefix
# end class WelcomeKitDetail


class WebAuthenticationDetail(GeneratedsSuper):
    """Used in authentication of the sender's identity."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ParentCredential=None, UserCredential=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ParentCredential = ParentCredential
        self.ParentCredential_nsprefix_ = "ns"
        self.UserCredential = UserCredential
        self.UserCredential_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, WebAuthenticationDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if WebAuthenticationDetail.subclass:
            return WebAuthenticationDetail.subclass(*args_, **kwargs_)
        else:
            return WebAuthenticationDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ParentCredential(self):
        return self.ParentCredential
    def set_ParentCredential(self, ParentCredential):
        self.ParentCredential = ParentCredential
    def get_UserCredential(self):
        return self.UserCredential
    def set_UserCredential(self, UserCredential):
        self.UserCredential = UserCredential
    def hasContent_(self):
        if (
            self.ParentCredential is not None or
            self.UserCredential is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='WebAuthenticationDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('WebAuthenticationDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'WebAuthenticationDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='WebAuthenticationDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='WebAuthenticationDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='WebAuthenticationDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='WebAuthenticationDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ParentCredential is not None:
            namespaceprefix_ = self.ParentCredential_nsprefix_ + ':' if (UseCapturedNS_ and self.ParentCredential_nsprefix_) else ''
            self.ParentCredential.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ParentCredential', pretty_print=pretty_print)
        if self.UserCredential is not None:
            namespaceprefix_ = self.UserCredential_nsprefix_ + ':' if (UseCapturedNS_ and self.UserCredential_nsprefix_) else ''
            self.UserCredential.export(outfile, level, namespaceprefix_, namespacedef_='', name_='UserCredential', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ParentCredential':
            obj_ = WebAuthenticationCredential.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ParentCredential = obj_
            obj_.original_tagname_ = 'ParentCredential'
        elif nodeName_ == 'UserCredential':
            obj_ = WebAuthenticationCredential.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.UserCredential = obj_
            obj_.original_tagname_ = 'UserCredential'
# end class WebAuthenticationDetail


class WebAuthenticationCredential(GeneratedsSuper):
    """Two part authentication string used for the sender's identity"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Key=None, Password=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Key = Key
        self.Key_nsprefix_ = None
        self.Password = Password
        self.Password_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, WebAuthenticationCredential)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if WebAuthenticationCredential.subclass:
            return WebAuthenticationCredential.subclass(*args_, **kwargs_)
        else:
            return WebAuthenticationCredential(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Key(self):
        return self.Key
    def set_Key(self, Key):
        self.Key = Key
    def get_Password(self):
        return self.Password
    def set_Password(self, Password):
        self.Password = Password
    def hasContent_(self):
        if (
            self.Key is not None or
            self.Password is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='WebAuthenticationCredential', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('WebAuthenticationCredential')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'WebAuthenticationCredential':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='WebAuthenticationCredential')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='WebAuthenticationCredential', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='WebAuthenticationCredential'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='WebAuthenticationCredential', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Key is not None:
            namespaceprefix_ = self.Key_nsprefix_ + ':' if (UseCapturedNS_ and self.Key_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sKey>%s</%sKey>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Key), input_name='Key')), namespaceprefix_ , eol_))
        if self.Password is not None:
            namespaceprefix_ = self.Password_nsprefix_ + ':' if (UseCapturedNS_ and self.Password_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPassword>%s</%sPassword>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Password), input_name='Password')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Key':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Key')
            value_ = self.gds_validate_string(value_, node, 'Key')
            self.Key = value_
            self.Key_nsprefix_ = child_.prefix
        elif nodeName_ == 'Password':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Password')
            value_ = self.gds_validate_string(value_, node, 'Password')
            self.Password = value_
            self.Password_nsprefix_ = child_.prefix
# end class WebAuthenticationCredential


class VersionId(GeneratedsSuper):
    """Identifies the version/level of a service operation expected by a caller
    (in each request) and performed by the callee (in each reply)."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ServiceId=None, Major=None, Intermediate=None, Minor=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ServiceId = ServiceId
        self.validate_ServiceIdType(self.ServiceId)
        self.ServiceId_nsprefix_ = "ns"
        self.Major = Major
        self.validate_MajorVersionType(self.Major)
        self.Major_nsprefix_ = "ns"
        self.Intermediate = Intermediate
        self.validate_IntermediateVersionType(self.Intermediate)
        self.Intermediate_nsprefix_ = "ns"
        self.Minor = Minor
        self.validate_MinorVersionType(self.Minor)
        self.Minor_nsprefix_ = "ns"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, VersionId)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if VersionId.subclass:
            return VersionId.subclass(*args_, **kwargs_)
        else:
            return VersionId(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ServiceId(self):
        return self.ServiceId
    def set_ServiceId(self, ServiceId):
        self.ServiceId = ServiceId
    def get_Major(self):
        return self.Major
    def set_Major(self, Major):
        self.Major = Major
    def get_Intermediate(self):
        return self.Intermediate
    def set_Intermediate(self, Intermediate):
        self.Intermediate = Intermediate
    def get_Minor(self):
        return self.Minor
    def set_Minor(self, Minor):
        self.Minor = Minor
    def validate_ServiceIdType(self, value):
        result = True
        # Validate type ServiceIdType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['vacs']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ServiceIdType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_MajorVersionType(self, value):
        result = True
        # Validate type MajorVersionType, a restriction on xs:int.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, int):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (int)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = [15]
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on MajorVersionType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_IntermediateVersionType(self, value):
        result = True
        # Validate type IntermediateVersionType, a restriction on xs:int.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, int):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (int)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = [0]
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on IntermediateVersionType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_MinorVersionType(self, value):
        result = True
        # Validate type MinorVersionType, a restriction on xs:int.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, int):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (int)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = [0]
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on MinorVersionType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.ServiceId is not None or
            self.Major is not None or
            self.Intermediate is not None or
            self.Minor is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='VersionId', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('VersionId')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'VersionId':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='VersionId')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='VersionId', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='VersionId'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='VersionId', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ServiceId is not None:
            namespaceprefix_ = self.ServiceId_nsprefix_ + ':' if (UseCapturedNS_ and self.ServiceId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sServiceId>%s</%sServiceId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ServiceId), input_name='ServiceId')), namespaceprefix_ , eol_))
        if self.Major is not None:
            namespaceprefix_ = self.Major_nsprefix_ + ':' if (UseCapturedNS_ and self.Major_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMajor>%s</%sMajor>%s' % (namespaceprefix_ , self.gds_format_integer(self.Major, input_name='Major'), namespaceprefix_ , eol_))
        if self.Intermediate is not None:
            namespaceprefix_ = self.Intermediate_nsprefix_ + ':' if (UseCapturedNS_ and self.Intermediate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIntermediate>%s</%sIntermediate>%s' % (namespaceprefix_ , self.gds_format_integer(self.Intermediate, input_name='Intermediate'), namespaceprefix_ , eol_))
        if self.Minor is not None:
            namespaceprefix_ = self.Minor_nsprefix_ + ':' if (UseCapturedNS_ and self.Minor_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMinor>%s</%sMinor>%s' % (namespaceprefix_ , self.gds_format_integer(self.Minor, input_name='Minor'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ServiceId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ServiceId')
            value_ = self.gds_validate_string(value_, node, 'ServiceId')
            self.ServiceId = value_
            self.ServiceId_nsprefix_ = child_.prefix
            # validate type ServiceIdType
            self.validate_ServiceIdType(self.ServiceId)
        elif nodeName_ == 'Major' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'Major')
            ival_ = self.gds_validate_integer(ival_, node, 'Major')
            self.Major = ival_
            self.Major_nsprefix_ = child_.prefix
            # validate type MajorVersionType
            self.validate_MajorVersionType(self.Major)
        elif nodeName_ == 'Intermediate' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'Intermediate')
            ival_ = self.gds_validate_integer(ival_, node, 'Intermediate')
            self.Intermediate = ival_
            self.Intermediate_nsprefix_ = child_.prefix
            # validate type IntermediateVersionType
            self.validate_IntermediateVersionType(self.Intermediate)
        elif nodeName_ == 'Minor' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'Minor')
            ival_ = self.gds_validate_integer(ival_, node, 'Minor')
            self.Minor = ival_
            self.Minor_nsprefix_ = child_.prefix
            # validate type MinorVersionType
            self.validate_MinorVersionType(self.Minor)
# end class VersionId


GDSClassesMapping = {
    'ExtraHoursMetroAvailabilityReply': ExtraHoursMetroAvailabilityReply,
    'ExtraHoursMetroAvailabilityRequest': ExtraHoursMetroAvailabilityRequest,
    'GetAllServicesAndPackagingReply': GetAllServicesAndPackagingReply,
    'GetAllServicesAndPackagingRequest': GetAllServicesAndPackagingRequest,
    'GetAllSignatureOptionsReply': GetAllSignatureOptionsReply,
    'GetAllSignatureOptionsRequest': GetAllSignatureOptionsRequest,
    'GetAllSpecialServicesReply': GetAllSpecialServicesReply,
    'GetAllSpecialServicesRequest': GetAllSpecialServicesRequest,
    'GetCommitmentReply': GetCommitmentReply,
    'GetCommitmentRequest': GetCommitmentRequest,
    'GetFedExCommoditiesReply': GetFedExCommoditiesReply,
    'GetFedExCommoditiesRequest': GetFedExCommoditiesRequest,
    'GetPackagingOptionsReply': GetPackagingOptionsReply,
    'GetPackagingOptionsRequest': GetPackagingOptionsRequest,
    'GetShipmentRulesReply': GetShipmentRulesReply,
    'GetShipmentRulesRequest': GetShipmentRulesRequest,
    'GetValidDateCertainDatesReply': GetValidDateCertainDatesReply,
    'GetValidDateCertainDatesRequest': GetValidDateCertainDatesRequest,
    'ServiceAvailabilityReply': ServiceAvailabilityReply,
    'ServiceAvailabilityRequest': ServiceAvailabilityRequest,
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def get_required_ns_prefix_defs(rootNode):
    '''Get all name space prefix definitions required in this XML doc.
    Return a dictionary of definitions and a char string of definitions.
    '''
    nsmap = {
        prefix: uri
        for node in rootNode.iter()
        for (prefix, uri) in node.nsmap.items()
        if prefix is not None
    }
    namespacedefs = ' '.join([
        'xmlns:{}="{}"'.format(prefix, uri)
        for prefix, uri in nsmap.items()
    ])
    return nsmap, namespacedefs


def parse(inFileName, silence=False, print_warnings=True):
    global CapturedNsmap_
    gds_collector = GdsCollector_()
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'ExtraHoursMetroAvailabilityReply'
        rootClass = ExtraHoursMetroAvailabilityReply
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    CapturedNsmap_, namespacedefs = get_required_ns_prefix_defs(rootNode)
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_=namespacedefs,
            pretty_print=True)
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def parseEtree(inFileName, silence=False, print_warnings=True,
               mapping=None, nsmap=None):
    parser = None
    doc = parsexml_(inFileName, parser)
    gds_collector = GdsCollector_()
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'ExtraHoursMetroAvailabilityReply'
        rootClass = ExtraHoursMetroAvailabilityReply
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    # Enable Python to collect the space used by the DOM.
    if mapping is None:
        mapping = {}
    rootElement = rootObj.to_etree(
        None, name_=rootTag, mapping_=mapping, nsmap_=nsmap)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(str(content))
        sys.stdout.write('\n')
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False, print_warnings=True):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    gds_collector = GdsCollector_()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'ExtraHoursMetroAvailabilityReply'
        rootClass = ExtraHoursMetroAvailabilityReply
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    if not SaveElementTreeNode:
        rootNode = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='xmlns:ns="http://fedex.com/ws/vacs/v15"')
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def parseLiteral(inFileName, silence=False, print_warnings=True):
    parser = None
    doc = parsexml_(inFileName, parser)
    gds_collector = GdsCollector_()
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'ExtraHoursMetroAvailabilityReply'
        rootClass = ExtraHoursMetroAvailabilityReply
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    # Enable Python to collect the space used by the DOM.
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        sys.stdout.write('#from validation_availability_and_commitment_service_v15 import *\n\n')
        sys.stdout.write('import validation_availability_and_commitment_service_v15 as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()

RenameMappings_ = {
}

#
# Mapping of namespaces to types defined in them
# and the file in which each is defined.
# simpleTypes are marked "ST" and complexTypes "CT".
NamespaceToDefMappings_ = {'http://fedex.com/ws/vacs/v15': [('AccessorRoleType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('AccountAliasAttributeType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('AccountAliasType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('AdditionalLabelsType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('AddressVerificationOverrideReasonType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('AlcoholRecipientType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('AssociatedAccountNumberType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('AssociatedTrackingIdType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('AutoConfigurationType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('B13AFilingOptionType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('BarcodeSymbologyType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('BatteryMaterialType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('BatteryPackingType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('BatteryRegulatorySubType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('BillingAccountAttributeType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('BrokerType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('CarrierCodeType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('ChargeBasisLevelType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('ChargeClassificationType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('ClearanceBrokerageType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('CodAddTransportationChargeBasisType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('CodCollectionType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('CodReturnReferenceIndicatorType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('CommitDetailType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('CommitmentDelayType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('CommodityPurposeType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('CompletedEtdType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('ConsolidationShipmentRoleType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('ConsolidationSpecialServiceType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('ConsolidationType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('CorrespondenceType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('CreditCardAuthorizationType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('CreditCardSettlementScheduleType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('CreditCardTransactionAttributeType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('CreditCardType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('CustomDeliveryWindowType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('CustomLabelCoordinateUnits',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('CustomRatingOptionType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('CustomerAccountEntityType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('CustomerAccountManagementStatusType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('CustomerAccountStatusType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('CustomerAccountType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('CustomerBillingSettlementLevelType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('CustomerCashType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('CustomerDetailType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('CustomerImageUsageType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('CustomerIntegrationModeType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('CustomerReferenceType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('CustomerSpecifiedLabelGenerationOptionType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('CustomsOptionType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('DamageStatusType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('DangerousGoodsAccessibilityType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('DangerousGoodsDescriptorType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('DangerousGoodsPackingOptionType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('DayOfWeekType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('DelayLevelType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('DelayPointType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('DestinationControlStatementType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('DistanceUnits',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('DistributionClearanceType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('DocTabContentType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('DocTabZoneJustificationType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('DocumentFormatOptionType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('DropoffType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('EMailNotificationFormatType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('EMailNotificationRecipientType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('EdtRequestType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('EmailOptionType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('EnterpriseAccountType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('EnterprisePermissionType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('EnterpriseProfileAttributeType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('ErrorLabelBehaviorType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('EtdAttributeType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('EtdConfirmationType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('ExpressAccountType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('ExpressProfileAttributeType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('ExpressRegionCode',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('FedExCommodityType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('FedExLocationType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('FlatbedTrailerOption',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('FreightAccountStatusType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('FreightAccountType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('FreightClassType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('FreightCollectTermsType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('FreightGuaranteeType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('FreightOnValueType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('FreightProfileAttributeType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('FreightServiceSchedulingType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('FreightShipmentRoleType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('FreightTariffType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('Gender',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('GetAllServicesAndPackagingProcessingOptionType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('GetAllServicesAndPackagingServiceLevel',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('GetAllSpecialServicesProcessingOptionType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('GetAllSpecialServicesServiceLevel',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('GetCommitmentProcessingOptionType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('GetCommitmentServiceLevel',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('GroundProfileAttributeType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('HazardousCommodityDescriptionProcessingOptionType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('HazardousCommodityLabelTextOptionType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('HazardousCommodityOptionType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('HazardousCommodityPackingGroupType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('HazardousCommodityQuantityType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('HazardousContainerPackingType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('HomeDeliveryPremiumType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('ImageId',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('InspectionStatusType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('InternalImageType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('InternationalControlledExportType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('InternationalDocumentContentType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('LabelFormatType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('LabelMaskableDataType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('LabelOrderType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('LabelPrintingOrientationType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('LabelRotationType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('LabelSpecificationProcessingOptionType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('LabelStockType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('LiabilityCoverageType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('LinearUnits',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('LocationAccessibilityType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('NaftaImporterSpecificationType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('NaftaNetCostMethodCode',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('NaftaPreferenceCriterionCode',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('NaftaProducerDeterminationCode',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('NaftaProducerSpecificationType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('NetExplosiveClassificationType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('NotificationEventType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('NotificationFormatType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('NotificationSeverityType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('NotificationType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('OperatingCompanyType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('PackagePackedByType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('PackagingOptionSpecialServiceType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('PageQuadrantType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('PaymentType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('PendingShipmentProcessingOptionType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('PendingShipmentType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('PermissionType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('PhoneNumberType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('PhysicalFormType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('PhysicalPackagingType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('PickupRequestSourceType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('PickupRequestType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('PremierType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('PrintedReferenceType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('PriorityAlertEnhancementType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('ProfileContactAttribute',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('ProfileContactType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('ProfileType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('PurposeOfShipmentType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('RadioactiveContainerClassType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('RadioactivityUnitOfMeasure',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('RateDiscountType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('RateElementBasisType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('RateLevelBasisType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('RateRequestType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('RateTypeBasisType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('RecipientCustomsIdType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('RecommendedDocumentType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('RegulatoryControlType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('RegulatoryLabelType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('RelativeVerticalPositionType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('RequestedShippingDocumentType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('RequiredShippingDocumentType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('RestrictionsAndPrivilegesPolicyExceptionType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('ReturnEMailAllowedSpecialServiceType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('ReturnType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('ReturnedRateType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('RotationType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('SecondaryBarcodeType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('ServiceCategoryType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('ServiceOptionType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('ShipmentDryIceProcessingOptionType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('ShipmentNotificationAggregationType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('ShipmentNotificationRoleType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('ShipmentOnlyFieldsType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('ShipmentProcessingOptionType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('ShipmentRuleType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('ShippingDocumentDispositionType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('ShippingDocumentEMailGroupingType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('ShippingDocumentGroupingType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('ShippingDocumentImageType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('ShippingDocumentNamingType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('ShippingDocumentStockType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('ShippingDocumentStorageDetailType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('SignatureOptionType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('SmartPostAccountFeatureType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('SmartPostAncillaryEndorsementType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('SmartPostIndiciaType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('SmartPostShipmentProcessingOptionType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('SmartPostShipmentSpecialServiceType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('SpecialEquipmentType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('SplitPaymentType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('StatusType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('SuppliesTypes',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('TaxesOrMiscellaneousChargeType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('TinType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('TrackingIdType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('TransactionSourceFormat',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('TransborderDistributionSpecialServiceType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('TransitTimeType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('UploadDocumentIdProducer',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('UploadDocumentProducerType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('UploadDocumentType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('UsageType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('VolumeUnits',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('WebServiceEnvironment',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('WeighingScaleType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('WeightSource',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('WeightUnits',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('MajorVersionType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('IntermediateVersionType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('MinorVersionType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('ServiceIdType',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'ST'),
                                  ('AccountAliasDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('AccountGroupDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('AccountGroupMasterAccountDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('AccountGroupMembershipDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('AdditionalLabelsDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('Address',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('AddressAncillaryDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('AirCargoDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('AlcoholDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('AllSignatureOptionsDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('AssociatedAccount',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('AssociatedFreightLineItemDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('AssociatedTrackingId',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('AuthorizedAddress',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('BankAccountDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('BankDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('BatteryClassificationDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('BrokerDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('CertificateOfOriginDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('CleansedAddressAndLocationDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('ClientDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('CodAddTransportationChargesDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('CodDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('CommercialInvoice',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('CommercialInvoiceDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('CommitDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('Commodity',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('ConfigurableLabelReferenceEntry',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('ConsolidationSpecialServicesRequested',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('Contact',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('ContactAndAddress',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('ContentRecord',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('CreditCard',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('CreditCardTransactionAttributesDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('CreditCardTransactionDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('CreditFraudDetectionDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('CustomDeliveryWindowDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('CustomDiscountExclusionDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('CustomDocumentDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('CustomLabelBarcodeEntry',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('CustomLabelBoxEntry',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('CustomLabelDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('CustomLabelGraphicEntry',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('CustomLabelPosition',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('CustomLabelTextBoxEntry',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('CustomLabelTextEntry',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('CustomRatingOptionDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('CustomTransitTimeDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('CustomerAccountFranchiseeDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('CustomerCommunicationDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('CustomerDiscountDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('CustomerImageUsage',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('CustomerProfileBankDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('CustomerProfileVATDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('CustomerReference',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('CustomerRevenueDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('CustomerShippingEnablementDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('CustomerShippingVolumeDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('CustomerSpecifiedLabelDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('CustomerSuppliesDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('CustomsClearanceDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('CustomsOptionDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('DangerousGoodsContainer',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('DangerousGoodsDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('DangerousGoodsShippersDeclarationDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('DangerousGoodsSignatory',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('DateRange',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('DelayDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('DeliveryOnInvoiceAcceptanceDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('DestinationControlDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('DetentionDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('Dimensions',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('DirectDebitDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('DirectDebitMandateDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('Distance',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('DocTabContent',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('DocTabContentBarcoded',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('DocTabContentZone001',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('DocTabZoneSpecification',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('DocumentFormatOptionsRequested',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('EMailAddressDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('EMailDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('EMailLabelDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('EMailRecipient',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('EdtExciseCondition',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('EmailOptionsRequested',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('EnterpriseCustomer',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('EnterprisePrivilegeDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('EnterpriseProfile',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('EtdDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('ExportDeclarationDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('ExportDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('ExpressFreightDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('ExpressFreightDetailContact',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('ExpressProfile',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('ExtraHoursMetroAvailabilityPostalDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('ExtraHoursMetroAvailabilityReply',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('ExtraHoursMetroAvailabilityRequest',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('ExtraLaborDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('FedExCommodityDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('FedExEmployee',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('FlatbedTrailerDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('FreightAccountDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('FreightAddressLabelDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('FreightCommitDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('FreightGuaranteeDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('FreightProfile',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('FreightServiceCenterDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('FreightShipmentDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('FreightShipmentLineItem',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('FreightSpecialServicePayment',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('GeneralAgencyAgreementDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('GetAllServicesAndPackagingProcessingOptionsRequested',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('GetAllServicesAndPackagingReply',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('GetAllServicesAndPackagingRequest',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('GetAllSignatureOptionsReply',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('GetAllSignatureOptionsRequest',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('GetAllSpecialServicesProcessingOptionsRequested',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('GetAllSpecialServicesReply',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('GetAllSpecialServicesRequest',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('GetCommitmentProcessingOptionsRequested',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('GetCommitmentReply',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('GetCommitmentRequest',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('GetFedExCommoditiesReply',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('GetFedExCommoditiesRequest',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('GetPackagingOptionsReply',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('GetPackagingOptionsRequest',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('GetShipmentRulesReply',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('GetShipmentRulesRequest',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('GetValidDateCertainDatesReply',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('GetValidDateCertainDatesRequest',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('GroundProfile',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('GroupReferenceDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('HazardousCommodityContent',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('HazardousCommodityDescription',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('HazardousCommodityOptionDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('HazardousCommodityPackagingDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('HazardousCommodityPackingDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('HazardousCommodityQuantityDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('HoldAtLocationDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('HomeDeliveryPremiumDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('InitiativeManifest',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('InterlineCustomerDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('InternationalControlledExportDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('InternationalDistributionSummaryDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('InternationalTrafficInArmsRegulationsDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('LabelSpecification',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('LabelSpecificationProcessingOptionsRequested',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('LiabilityCoverageDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('LinearMeasure',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('Localization',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('MarkingOrTaggingDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('Measure',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('Money',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('NaftaCertificateOfOriginDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('NaftaCommodityDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('NaftaProducer',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('NetExplosiveDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('NonBusinessTimeDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('Notification',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('NotificationDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('NotificationParameter',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('Op900Detail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('PackageSpecialHandlingDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('PackageSpecialServiceDescription',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('PackageSpecialServicesRequested',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('PackagingDescription',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('PackagingOptionDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('PalletShrinkwrapDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('PalletsProvidedDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('ParsedPersonName',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('ParsedPhoneNumber',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('ParsedPhoneNumberDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('Party',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('Payment',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('Payor',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('PendingShipmentDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('PendingShipmentProcessingOptionsRequested',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('PickupDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('PolicyGridManifest',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('PrintedReference',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('PriorityAlertDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('ProductDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('ProductName',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('ProfileContact',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('ProfileCreditStatusDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('RadioactivityDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('RadionuclideActivity',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('RadionuclideDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('RecipientCustomsId',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('RecipientProfile',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('RecommendedDocumentSpecification',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('RegulatoryLabelContentDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('RequestedDistributionLocation',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('RequestedPackageLineItem',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('RequestedShipment',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('RestrictionsAndPrivilegesPolicyDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('ReturnAssociationDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('ReturnEMailDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('ReturnInstructionsDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('ReturnShipmentDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('Rma',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('ServiceAvailabilityOption',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('ServiceAvailabilityReply',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('ServiceAvailabilityRequest',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('ServiceDescription',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('ServiceSubOptionDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('ServiceTypesByCarrierCodeDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('ShipmentAssemblyDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('ShipmentAuthorizationDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('ShipmentConfigurationData',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('ShipmentConsolidationDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('ShipmentDryIceDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('ShipmentDryIceProcessingOptionsRequested',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('ShipmentEventNotificationDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('ShipmentEventNotificationSpecification',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('ShipmentInclusionSpecification',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('ShipmentInternationalDistributionDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('ShipmentNotificationFormatSpecification',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('ShipmentProcessingOptionsRequested',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('ShipmentRule',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('ShipmentSpecialServiceDescription',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('ShipmentSpecialServicesRequested',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('ShipmentTransborderDistributionDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('ShipmentVariationOptionDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('ShipperConveyanceDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('ShippingDocumentDispositionDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('ShippingDocumentEMailDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('ShippingDocumentEMailRecipient',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('ShippingDocumentFormat',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('ShippingDocumentPrintDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('ShippingDocumentSpecification',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('ShippingDocumentStorageDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('SignatureOptionDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('SmartPostAccountDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('SmartPostShipmentDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('SmartPostShipmentProcessingOptionsRequested',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('SocialMediaDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('SortAndSegregateDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('SpecialEquipmentDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('SpecialEquipmentLineItem',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('SplitPaymentDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('SplitPaymentSpecification',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('StorageDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('TaxpayerIdentification',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('TrackingId',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('TransactionDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('TransborderDistributionLtlDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('TransborderDistributionSpecialServicesRequested',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('TransborderDistributionSummaryDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('UploadDocumentReferenceDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('UserDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('VariableHandlingChargeDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('Volume',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('WeighingDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('Weight',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('WelcomeKitDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('WebAuthenticationDetail',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('WebAuthenticationCredential',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT'),
                                  ('VersionId',
                                   '../../../Carriers '
                                   'Doc/Fedex/2020-09/schemas/ValidationAvailabilityAndCommitmentService_v15.xsd',
                                   'CT')]}

__all__ = [
    "AccountAliasDetail",
    "AccountGroupDetail",
    "AccountGroupMasterAccountDetail",
    "AccountGroupMembershipDetail",
    "AdditionalLabelsDetail",
    "Address",
    "AddressAncillaryDetail",
    "AirCargoDetail",
    "AlcoholDetail",
    "AllSignatureOptionsDetail",
    "AssociatedAccount",
    "AssociatedFreightLineItemDetail",
    "AssociatedTrackingId",
    "AuthorizedAddress",
    "BankAccountDetail",
    "BankDetail",
    "BatteryClassificationDetail",
    "BrokerDetail",
    "CertificateOfOriginDetail",
    "CleansedAddressAndLocationDetail",
    "ClientDetail",
    "CodAddTransportationChargesDetail",
    "CodDetail",
    "CommercialInvoice",
    "CommercialInvoiceDetail",
    "CommitDetail",
    "Commodity",
    "ConfigurableLabelReferenceEntry",
    "ConsolidationSpecialServicesRequested",
    "Contact",
    "ContactAndAddress",
    "ContentRecord",
    "CreditCard",
    "CreditCardTransactionAttributesDetail",
    "CreditCardTransactionDetail",
    "CreditFraudDetectionDetail",
    "CustomDeliveryWindowDetail",
    "CustomDiscountExclusionDetail",
    "CustomDocumentDetail",
    "CustomLabelBarcodeEntry",
    "CustomLabelBoxEntry",
    "CustomLabelDetail",
    "CustomLabelGraphicEntry",
    "CustomLabelPosition",
    "CustomLabelTextBoxEntry",
    "CustomLabelTextEntry",
    "CustomRatingOptionDetail",
    "CustomTransitTimeDetail",
    "CustomerAccountFranchiseeDetail",
    "CustomerCommunicationDetail",
    "CustomerDiscountDetail",
    "CustomerImageUsage",
    "CustomerProfileBankDetail",
    "CustomerProfileVATDetail",
    "CustomerReference",
    "CustomerRevenueDetail",
    "CustomerShippingEnablementDetail",
    "CustomerShippingVolumeDetail",
    "CustomerSpecifiedLabelDetail",
    "CustomerSuppliesDetail",
    "CustomsClearanceDetail",
    "CustomsOptionDetail",
    "DangerousGoodsContainer",
    "DangerousGoodsDetail",
    "DangerousGoodsShippersDeclarationDetail",
    "DangerousGoodsSignatory",
    "DateRange",
    "DelayDetail",
    "DeliveryOnInvoiceAcceptanceDetail",
    "DestinationControlDetail",
    "DetentionDetail",
    "Dimensions",
    "DirectDebitDetail",
    "DirectDebitMandateDetail",
    "Distance",
    "DocTabContent",
    "DocTabContentBarcoded",
    "DocTabContentZone001",
    "DocTabZoneSpecification",
    "DocumentFormatOptionsRequested",
    "EMailAddressDetail",
    "EMailDetail",
    "EMailLabelDetail",
    "EMailRecipient",
    "EdtExciseCondition",
    "EmailOptionsRequested",
    "EnterpriseCustomer",
    "EnterprisePrivilegeDetail",
    "EnterpriseProfile",
    "EtdDetail",
    "ExportDeclarationDetail",
    "ExportDetail",
    "ExpressFreightDetail",
    "ExpressFreightDetailContact",
    "ExpressProfile",
    "ExtraHoursMetroAvailabilityPostalDetail",
    "ExtraHoursMetroAvailabilityReply",
    "ExtraHoursMetroAvailabilityRequest",
    "ExtraLaborDetail",
    "FedExCommodityDetail",
    "FedExEmployee",
    "FlatbedTrailerDetail",
    "FreightAccountDetail",
    "FreightAddressLabelDetail",
    "FreightCommitDetail",
    "FreightGuaranteeDetail",
    "FreightProfile",
    "FreightServiceCenterDetail",
    "FreightShipmentDetail",
    "FreightShipmentLineItem",
    "FreightSpecialServicePayment",
    "GeneralAgencyAgreementDetail",
    "GetAllServicesAndPackagingProcessingOptionsRequested",
    "GetAllServicesAndPackagingReply",
    "GetAllServicesAndPackagingRequest",
    "GetAllSignatureOptionsReply",
    "GetAllSignatureOptionsRequest",
    "GetAllSpecialServicesProcessingOptionsRequested",
    "GetAllSpecialServicesReply",
    "GetAllSpecialServicesRequest",
    "GetCommitmentProcessingOptionsRequested",
    "GetCommitmentReply",
    "GetCommitmentRequest",
    "GetFedExCommoditiesReply",
    "GetFedExCommoditiesRequest",
    "GetPackagingOptionsReply",
    "GetPackagingOptionsRequest",
    "GetShipmentRulesReply",
    "GetShipmentRulesRequest",
    "GetValidDateCertainDatesReply",
    "GetValidDateCertainDatesRequest",
    "GroundProfile",
    "GroupReferenceDetail",
    "HazardousCommodityContent",
    "HazardousCommodityDescription",
    "HazardousCommodityOptionDetail",
    "HazardousCommodityPackagingDetail",
    "HazardousCommodityPackingDetail",
    "HazardousCommodityQuantityDetail",
    "HoldAtLocationDetail",
    "HomeDeliveryPremiumDetail",
    "InitiativeManifest",
    "InterlineCustomerDetail",
    "InternationalControlledExportDetail",
    "InternationalDistributionSummaryDetail",
    "InternationalTrafficInArmsRegulationsDetail",
    "LabelSpecification",
    "LabelSpecificationProcessingOptionsRequested",
    "LiabilityCoverageDetail",
    "LinearMeasure",
    "Localization",
    "MarkingOrTaggingDetail",
    "Measure",
    "Money",
    "NaftaCertificateOfOriginDetail",
    "NaftaCommodityDetail",
    "NaftaProducer",
    "NetExplosiveDetail",
    "NonBusinessTimeDetail",
    "Notification",
    "NotificationDetail",
    "NotificationParameter",
    "Op900Detail",
    "PackageSpecialHandlingDetail",
    "PackageSpecialServiceDescription",
    "PackageSpecialServicesRequested",
    "PackagingDescription",
    "PackagingOptionDetail",
    "PalletShrinkwrapDetail",
    "PalletsProvidedDetail",
    "ParsedPersonName",
    "ParsedPhoneNumber",
    "ParsedPhoneNumberDetail",
    "Party",
    "Payment",
    "Payor",
    "PendingShipmentDetail",
    "PendingShipmentProcessingOptionsRequested",
    "PickupDetail",
    "PolicyGridManifest",
    "PrintedReference",
    "PriorityAlertDetail",
    "ProductDetail",
    "ProductName",
    "ProfileContact",
    "ProfileCreditStatusDetail",
    "RadioactivityDetail",
    "RadionuclideActivity",
    "RadionuclideDetail",
    "RecipientCustomsId",
    "RecipientProfile",
    "RecommendedDocumentSpecification",
    "RegulatoryLabelContentDetail",
    "RequestedDistributionLocation",
    "RequestedPackageLineItem",
    "RequestedShipment",
    "RestrictionsAndPrivilegesPolicyDetail",
    "ReturnAssociationDetail",
    "ReturnEMailDetail",
    "ReturnInstructionsDetail",
    "ReturnShipmentDetail",
    "Rma",
    "ServiceAvailabilityOption",
    "ServiceAvailabilityReply",
    "ServiceAvailabilityRequest",
    "ServiceDescription",
    "ServiceSubOptionDetail",
    "ServiceTypesByCarrierCodeDetail",
    "ShipmentAssemblyDetail",
    "ShipmentAuthorizationDetail",
    "ShipmentConfigurationData",
    "ShipmentConsolidationDetail",
    "ShipmentDryIceDetail",
    "ShipmentDryIceProcessingOptionsRequested",
    "ShipmentEventNotificationDetail",
    "ShipmentEventNotificationSpecification",
    "ShipmentInclusionSpecification",
    "ShipmentInternationalDistributionDetail",
    "ShipmentNotificationFormatSpecification",
    "ShipmentProcessingOptionsRequested",
    "ShipmentRule",
    "ShipmentSpecialServiceDescription",
    "ShipmentSpecialServicesRequested",
    "ShipmentTransborderDistributionDetail",
    "ShipmentVariationOptionDetail",
    "ShipperConveyanceDetail",
    "ShippingDocumentDispositionDetail",
    "ShippingDocumentEMailDetail",
    "ShippingDocumentEMailRecipient",
    "ShippingDocumentFormat",
    "ShippingDocumentPrintDetail",
    "ShippingDocumentSpecification",
    "ShippingDocumentStorageDetail",
    "SignatureOptionDetail",
    "SmartPostAccountDetail",
    "SmartPostShipmentDetail",
    "SmartPostShipmentProcessingOptionsRequested",
    "SocialMediaDetail",
    "SortAndSegregateDetail",
    "SpecialEquipmentDetail",
    "SpecialEquipmentLineItem",
    "SplitPaymentDetail",
    "SplitPaymentSpecification",
    "StorageDetail",
    "TaxpayerIdentification",
    "TrackingId",
    "TransactionDetail",
    "TransborderDistributionLtlDetail",
    "TransborderDistributionSpecialServicesRequested",
    "TransborderDistributionSummaryDetail",
    "UploadDocumentReferenceDetail",
    "UserDetail",
    "VariableHandlingChargeDetail",
    "VersionId",
    "Volume",
    "WebAuthenticationCredential",
    "WebAuthenticationDetail",
    "WeighingDetail",
    "Weight",
    "WelcomeKitDetail"
]
