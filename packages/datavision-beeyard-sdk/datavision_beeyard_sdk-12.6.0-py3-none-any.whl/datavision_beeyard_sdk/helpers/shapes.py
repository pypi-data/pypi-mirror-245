from datavision_beeyard_sdk.api.overlay import add_shapes, read_shape
from datavision_beeyard_sdk.exceptions import ShapeError
import json


class Shape:
    """Base class for BeeYard shapes.

    Parameters
    ----------
    strokeColor : str
        String describing the color. The string must be a color space tuple
        e.g. rgba(255, 0, 0, 1).
    strokeWidth : float
        Thickness of the shape border.
    name : str
        Name of the shape.
    properties : list, optional
        Additional properties, by default [].
    id : UUID, optional
        ID is automatically generated by BeeYard, by default None.
    """

    def __init__(self, strokeColor, strokeWidth, name, properties=[], id=None):
        """Initialize the shape.

        Parameters
        ----------
        strokeColor : str
            String describing the color. The string must be a color space tuple
            e.g. rgba(255, 0, 0, 1).
        strokeWidth : float
            Thickness of the shape border.
        name : str
            Name of the shape.
        properties : list, optional
            Additional properties, by default [].
        id : UUID, optional
            Id is automatically generated by BeeYard, by default None.
        """
        self.strokeColor = strokeColor
        self.strokeWidth = strokeWidth
        self.name = name
        self.properties = properties
        if id is not None:
            self.id = id

    def create(self):
        """Create dictionary from shape.

        Returns
        -------
        dict
            Returns the shape in the form of a dictionary.
        """
        return self.__dict__

    def upload(self, cell_id, overlay_name, layer_name, client):
        """Upload to BeeYard.

        Parameters
        ----------
        cell_id : str
            Id of the cell where the shape should be uploaded.
        overlay_name : str
            The target overlay.
        layer_name : str
            The target layer.
        client : AuthenticatedClient
            BeeYard client.

        Returns
        -------
        Response
            Http response from API.
        """
        resp = add_shapes.add(
            id=cell_id,
            overlay_name=overlay_name,
            layer_name=layer_name,
            client=client,
            shape_list=[self.__dict__],
        )
        return resp

    @classmethod
    def read_from_beeyard(cls, cell_id, overlay_name, sh_id, client):
        """Read a shape from BeeYard.

        Parameters
        ----------
        cell_id : str
            Target cell in BeeYard.
        overlay_name : str
            Target overlay.
        sh_id : str
            Id of the target shape.
        client : AuthenticatedClient
            BeeYard client.

        Returns
        -------
        Shape
            Return the BeeYard shape as instance of Shape class.
        """
        shape = json.loads(
            read_shape.read(
                cell_id, overlay_name=overlay_name, shape_id=sh_id, client=client
            )
        )
        if "location" in shape.keys():
            shape["location"] = Point.read_from_shape(shape["location"])
        if "vertices" in shape.keys():
            vertex_list = []
            for v in shape["vertices"]:
                vertex_list.append(Point.read_from_shape(v))
            shape["vertices"] = vertex_list
        del shape["typeName"]
        return cls(**shape)


class Cross(Shape):
    """Cross shape class.

    Parameters
    ----------
    strokeColor : str
        String describing the color. The string must be a color space tuple
        e.g. rgba(255, 0, 0, 1).
    strokeWidth : float
        Thickness of the shape border.
    name : str
        Shape name.
    location : Point
        Point object representing the location of the shape in pixels.
    rotationDeg : float
        Rotation in degrees of the cross.
    size : float
        Size of the shape.
    zoomInvariant : bool
        If the shape has to change size with zooming.
    properties : list, optional
        Additional properties, by default [].
    id : UUID, optional
        Id is automatically generated by BeeYard, by default None.

    Examples
    --------
    >>> cross = Cross("rgba(255, 0, 0, 1)", 1, "testMarker", Point(255.0, 255.0), 0, 50, True)
    """

    def __init__(
        self,
        strokeColor,
        strokeWidth,
        name,
        location,
        rotationDeg,
        size,
        zoomInvariant,
        properties=[],
        id=None,
    ):
        """Initialize Cross object.

        Parameters
        ----------
        strokeColor : str
            String describing the color. The string must be a color space tuple
            e.g. rgba(255, 0, 0, 1).
        strokeWidth : float
            Thickness of the shape border.
        name : str
            Shape name.
        location : Point
            Point object representing the location of the shape in pixels.
        rotationDeg : float
            Rotation in degrees of the cross.
        size : float
            Size of the shape.
        zoomInvariant : bool
            If the shape has to change size with zooming.
        properties : list, optional
            Additional properties, by default [].
        id : UUID, optional
            Id is automatically generated by BeeYard, by default None.

        Raises
        ------
        ShapeError
            If error during shape definition.
        """
        self.typeName = "cross"
        super().__init__(strokeColor, strokeWidth, name, properties, id)
        if isinstance(location, Point):
            self.location = location.create()
        else:
            raise ShapeError("single_point")
        self.rotationDeg = rotationDeg
        self.size = size
        self.zoomInvariant = zoomInvariant


class Rectangle(Shape):
    """Rectangle shape class.

    Parameters
    ----------
    strokeColor : str
        String describing the color. The string must be a color space tuple
        e.g. rgba(255, 0, 0, 1).
    strokeWidth : float
        Thickness of the shape border.
    name : str
        Shape name.
    location : Point
        Point object representing the location of the shape in pixels.
    width : float
        Width of the rectangle.
    height : float
        Height of the rectangle.
    fillColor : str
        String describing the filling color. The string must be a color space tuple
        e.g. rgba(255, 0, 0, 1).
    properties : list, optional
        Additional properties, by default [].
    id : UUID, optional
        Id is automatically generated by BeeYard, by default None.

    Examples
    --------
    >>> rect = Rectangle("rgba(255, 0, 0, 1)", 1, "testMarker", Point(255.0, 255.0), 100, 200, "rgba(255, 0, 0, 1)")
    """

    def __init__(
        self,
        strokeColor,
        strokeWidth,
        name,
        location,
        width,
        height,
        fillColor,
        properties=[],
        id=None,
    ):
        """Initialize Rectangle object.

        Parameters
        ----------
        strokeColor : str
            String describing the color. The string must be a color space tuple
            e.g. rgba(255, 0, 0, 1).
        strokeWidth : float
            Thickness of the shape border.
        name : str
            Shape name.
        location : Point
            Point object representing the location of the shape in pixels.
        width : float
            Width of the rectangle.
        height : float
            Height of the rectangle.
        fillColor : str
            String describing the filling color. The string must be a color space tuple
            e.g. rgba(255, 0, 0, 1).
        properties : list, optional
            Additional properties, by default [].
        id : UUID, optional
            Id is automatically generated by BeeYard, by default None.

        Raises
        ------
        ShapeError
            If error during shape definition.
        """
        self.typeName = "rectangle"
        super().__init__(strokeColor, strokeWidth, name, properties, id)
        if isinstance(location, Point):
            self.location = location.create()
        else:
            raise ShapeError("single_point")
        self.width = width
        self.height = height
        self.fillColor = fillColor
        self.rotationDeg = 0.0


class OrientedRectangle(Rectangle):
    """Oriented rectangle shape class.

    Parameters
    ----------
    strokeColor : str
        String describing the color. The string must be a color space tuple
        e.g. rgba(255, 0, 0, 1).
    strokeWidth : float
        Thickness of the shape border.
    name : str
        Shape name.
    location : Point
        Point object representing the location of the shape in pixels.
    width : float
        Width of the rectangle.
    height : float
        Height of the rectangle.
    fillColor : str
        String describing the filling color. The string must be a color space tuple
        e.g. rgba(255, 0, 0, 1).
    rotationDeg : float
        Rotation in degrees of the rectangle.
    properties : list, optional
        Additional properties, by default [].
    id : UUID, optional
        Id is automatically generated by BeeYard, by default None.

    Examples
    --------
    >>> oriented_rectangle = OrientedRectangle("rgba(255, 0, 0, 1)", 1, "orientedRectangleExample",
      Point(255.0, 255.0), 50, 50, "rgba(255, 0, 0, 1)", 45.0)
    """

    def __init__(
        self,
        strokeColor,
        strokeWidth,
        name,
        location,
        width,
        height,
        fillColor,
        rotationDeg,
        properties=[],
        id=None,
    ):
        """Initialize OrientedRectangle object.

        Parameters
        ----------
        strokeColor : str
            String describing the color. The string must be a color space tuple
            e.g. rgba(255, 0, 0, 1).
        strokeWidth : float
            Thickness of the shape border.
        name : str
            Shape name.
        location : Point
            Point object representing the location of the shape in pixels.
        width : float
            Width of the rectangle.
        height : float
            Height of the rectangle.
        fillColor : str
            String describing the filling color. The string must be a color space tuple
            e.g. rgba(255, 0, 0, 1).
        rotationDeg : float
            Rotation in degrees of the rectangle.
        properties : list, optional
            Additional properties, by default [].
        id : UUID, optional
            Id is automatically generated by BeeYard, by default None.

        Raises
        ------
        ShapeError
            If error during shape definition.
        """
        self.typeName = "oriented_rectangle"
        super().__init__(
            strokeColor,
            strokeWidth,
            name,
            location,
            width,
            height,
            fillColor,
            properties,
            id,
        )
        self.rotationDeg = rotationDeg


class Polygon(Shape):
    """Polygon shape class.

    Parameters
    ----------
    strokeColor : str
        String describing the color. The string must be a color space tuple
        e.g. rgba(255, 0, 0, 1).
    strokeWidth : float
        Thickness of the shape border.
    name : str
        Shape name.
    vertices : list[Point]
        List of Point objects representing the location of the polygon vertices in pixels.
    fillColor : str
        String describing the filling color. The string must be a color space tuple
        e.g. rgba(255, 0, 0, 1).
    properties : list, optional
        Additional properties, by default [].
    id : UUID, optional
        Id is automatically generated by BeeYard, by default None.

    Examples
    --------
    >>> polygon = Polygon("rgba(255, 0, 0, 1)", 1, "polygonExample",
      [Point(255.0, 255.0), Point(300.0, 310.0)], "rgba(255, 0, 0, 1)")
    """

    def __init__(
        self,
        strokeColor,
        strokeWidth,
        name,
        vertices,
        fillColor,
        properties=[],
        id=None,
    ):
        """Initialize Polygon object.

        Parameters
        ----------
        strokeColor : str
            String describing the color. The string must be a color space tuple
            e.g. rgba(255, 0, 0, 1).
        strokeWidth : float
            Thickness of the shape border.
        name : str
            Shape name.
        vertices : list[Point]
            List of Point objects representing the location of the polygon vertices in pixels.
        fillColor : str
            String describing the filling color. The string must be a color space tuple
            e.g. rgba(255, 0, 0, 1).
        properties : list, optional
            Additional properties, by default [].
        id : UUID, optional
            Id is automatically generated by BeeYard, by default None.

        Raises
        ------
        ShapeError
            If error during shape definition.
        """
        self.typeName = "polygon"
        super().__init__(strokeColor, strokeWidth, name, properties, id)
        self.vertices = []
        for i in vertices:
            if isinstance(i, Point):
                self.vertices.append(i.create())
            else:
                raise ShapeError("polygon")
        self.fillColor = fillColor


class Ellipse(Shape):
    """Ellipse shape class.

    Parameters
    ----------
    strokeColor : str
        String describing the color. The string must be a color space tuple
        e.g. rgba(255, 0, 0, 1).
    strokeWidth : float
        Thickness of the shape border.
    name : str
        Shape name.
    location : Point
        Point object representing the location of the shape in pixels.
    radiusRow : float
        y axis radius length in pixels.
    radiusCol : float
        x axis radius length in pixels.
    rotationDeg : float
        Rotation in degrees of the rectangle.
    fillColor : str
        String describing the filling color. The string must be a color space tuple
        e.g. rgba(255, 0, 0, 1).
    properties : list, optional
        Additional properties, by default [].
    id : UUID, optional
        Id is automatically generated by BeeYard, by default None.

    Examples
    --------
    >>> e = Ellipse("rgba(255, 0, 0, 1)", 1, "ellipseExample",
      Point(255.0, 255.0), 50, 100, 45, "rgba(255, 0, 0, 1)")
    """

    def __init__(
        self,
        strokeColor,
        strokeWidth,
        name,
        location,
        radiusRow,
        radiusCol,
        rotationDeg,
        fillColor,
        properties=[],
        id=None,
    ):
        """Initialize Ellipse class.

        Parameters
        ----------
        strokeColor : str
            String describing the color. The string must be a color space tuple
            e.g. rgba(255, 0, 0, 1).
        strokeWidth : float
            Thickness of the shape border.
        name : str
            Shape name.
        location : Point
            Point object representing the location of the shape in pixels.
        radiusRow : float
            y axis radius length in pixels.
        radiusCol : float
            x axis radius length in pixels.
        rotationDeg : float
            Rotation in degrees of the rectangle.
        fillColor : str
            String describing the filling color. The string must be a color space tuple
            e.g. rgba(255, 0, 0, 1).
        properties : list, optional
            Additional properties, by default [].
        id : UUID, optional
            Id is automatically generated by BeeYard, by default None.

        Raises
        ------
        ShapeError
            If error during shape definition.
        """
        self.typeName = "ellipse"
        super().__init__(strokeColor, strokeWidth, name, properties, id)
        if isinstance(location, Point):
            self.location = location.create()
        else:
            raise ShapeError("single_point")
        self.radiusRow = radiusRow
        self.radiusCol = radiusCol
        self.fillColor = fillColor
        self.rotationDeg = rotationDeg


class Circle(Shape):
    """Circle shape class.

    Parameters
    ----------
    strokeColor : str
        String describing the color. The string must be a color space tuple
        e.g. rgba(255, 0, 0, 1).
    strokeWidth : float
        Thickness of the shape border.
    name : str
        Shape name.
    location : Point
        Point object representing the location of the shape in pixels.
    radius : float
        Radius.
    fillColor : str
        String describing the filling color. The string must be a color space tuple
        e.g. rgba(255, 0, 0, 1).
    properties : list, optional
        Additional properties, by default [].
    id : UUID, optional
        Id is automatically generated by BeeYard, by default None.

    Examples
    --------
    >>> c = Circle("rgba(255, 0, 0, 1)", 1, "circleExample",
      Point(255.0, 255.0), 50, "rgba(255, 0, 0, 1)")
    """

    def __init__(
        self,
        strokeColor,
        strokeWidth,
        name,
        location,
        radius,
        fillColor,
        properties=[],
        id=None,
    ):
        """Initialize Circle object.

        Parameters
        ----------
        strokeColor : str
            String describing the color. The string must be a color space tuple
            e.g. rgba(255, 0, 0, 1).
        strokeWidth : float
            Thickness of the shape border.
        name : str
            Shape name.
        location : Point
            Point object representing the location of the shape in pixels.
        radius : float
            Radius.
        fillColor : str
            String describing the filling color. The string must be a color space tuple
            e.g. rgba(255, 0, 0, 1).
        properties : list, optional
            Additional properties, by default [].
        id : UUID, optional
            Id is automatically generated by BeeYard, by default None.

        Raises
        ------
        ShapeError
            If error during shape definition.
        """
        self.typeName = "circle"
        super().__init__(strokeColor, strokeWidth, name, properties, id)
        if isinstance(location, Point):
            self.location = location.create()
        else:
            raise ShapeError("single_point")
        self.radius = radius
        self.fillColor = fillColor


class Point:
    """Point class."""

    def __init__(self, row, col):
        """Initialize Point object.

        Parameters
        ----------
        row : float
            y coordinate in pixels.
        col : float
            x coordinate in pixels.
        """
        self.row = row
        self.col = col

    def create(self):
        """Create Point dictionary.

        Returns
        -------
        dict
            Returns a Point a a dictionary.
        """
        return self.__dict__

    @classmethod
    def read_from_shape(cls, dictionary):
        """Read a Point from shape.

        Parameters
        ----------
        dictionary : dict
            Shape dictionary.

        Returns
        -------
        Point
            Returns a Point object.
        """
        return cls(dictionary["row"], dictionary["col"])
