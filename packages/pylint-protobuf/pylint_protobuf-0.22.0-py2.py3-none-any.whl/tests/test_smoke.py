import pytest

import pylint_protobuf


@pytest.fixture
def truncated_pb2(module_builder):
    return module_builder('''
        # -*- coding: utf-8 -*-
        # Generated by the protocol buffer compiler.  DO NOT EDIT!
        # source: person.proto
        """Generated protocol buf
    ''', 'truncated_pb2')


def test_invalid_module_no_syntax_error(linter_factory, truncated_pb2):
    linter = linter_factory(
        register=pylint_protobuf.register,
    )
    linter.check([truncated_pb2])
    actual_msgs = [message.msg for message in linter.reporter.messages]
    assert len(actual_msgs) == 1
    assert 'EOF while scanning' in actual_msgs[0]


@pytest.fixture
def using_truncated(module_builder, truncated_pb2):
    return module_builder("""
        from {mod} import Foo
        f = Foo()
    """.format(mod=truncated_pb2), 'using_truncated')


@pytest.mark.no_missing_modules_check
def test_using_invalid_module_no_syntax_error(linter_factory, using_truncated):
    linter = linter_factory(
        register=pylint_protobuf.register,
        disable=['missing-module-docstring']
    )
    linter.check([using_truncated])
    actual_msgs = [message.msg for message in linter.reporter.messages]
    assert len(actual_msgs) == 1
    assert 'Cannot import' in actual_msgs[0]


@pytest.fixture
def non_protobuf(module_builder):
    return module_builder("""
        XYZ = 123

        class Foo(dict):
            def __init__(self, value):
                super().__init__()
                self._value = str(value)

            @property
            def value(self):
                return "YOLO" + self._value

            @value.setter
            def value(self, val):
                self._value = val.lstrip('YOLO')

        f = Foo(XYZ)
        bases = f.__class__.mro()

        basic_list = []
        basic_list.append(123)

        class SomeList:
            def __init__(self):
                self.repeated_field = []

        fake_repeated_scalar = SomeList()
        fake_repeated_scalar.repeated_field.append(123)
    """, 'non_protobuf')


def test_regular_python_code(linter_factory, non_protobuf):
    protobuf_checker_msgs = [msg_id for _, msg_id, _ in pylint_protobuf.MESSAGES.values()]
    linter = linter_factory(
        register=pylint_protobuf.register,
        disable=['missing-module-docstring', 'missing-function-docstring',
                 'missing-class-docstring', 'too-few-public-methods'],
        enable=protobuf_checker_msgs,
    )
    linter.check([non_protobuf])
    actual_msgs = [message.msg for message in linter.reporter.messages]
    assert not actual_msgs
