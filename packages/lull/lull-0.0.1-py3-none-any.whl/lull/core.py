# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_core.ipynb.

# %% auto 0
__all__ = ['lull']

# %% ../nbs/01_core.ipynb 6
import io, logging, warnings
from contextlib import redirect_stdout, redirect_stderr

# %% ../nbs/01_core.ipynb 8
from types import TracebackType
from typing import Self

# %% ../nbs/01_core.ipynb 11
#| export


# %% ../nbs/01_core.ipynb 13
#| export


# %% ../nbs/01_core.ipynb 15
class lull:
    '''
    Context manager to conditionally shush stdout, stderr, logging, and warnings based on a boolean flag.

    Attributes
    ----------
    should_shush : bool
        A flag to determine if shushing should be activated.

    Methods
    -------
    __enter__()
        Enters the context, optionally redirecting stdout and stderr, and disabling logging and warnings.

    __exit__(exc_type, exc_val, exc_tb)
        Exits the context, restoring the original state if modified.
    '''

    def __init__(
        self: Self, 
        hush: bool = True,
        sout: io.StringIO = None,
        serr: io.StringIO = None,
    ):
        '''
        Initializes the context manager with a flag to hush or not.

        Parameters
        ----------
        hush : bool
            A flag to determine if shushing should be activated.

        sout : io.StringIO, default: io.StringIO()
            Location to redirect `stdout` to.

        serr : io.StringIO, default: io.StringIO()
            Location to redirect `stderr` to.
        '''
        self.hush = hush
        
        self.sout = sout or io.StringIO()
        self.rout = redirect_stdout(self.sout)

        self.serr = serr or io.StringIO()
        self.rerr = redirect_stderr(self.serr)
        self.warn = warnings.catch_warnings()
        self.llvl = 100000


    def __enter__(self: Self) -> Self:
        if self.hush:
            self.rout.__enter__()
            self.rerr.__enter__()
            self.warn.__enter__()
            logging.disable(self.llvl)
            warnings.simplefilter('ignore')
        return self


    def __exit__(self: Self, exc_type: type, exc_value: Exception, traceback: TracebackType) -> Self:
        if self.hush:
            self.warn.__exit__(exc_type, exc_value, traceback)
            logging.disable(logging.NOTSET)
            self.rerr.__exit__(exc_type, exc_value, traceback)
            self.rout.__exit__(exc_type, exc_value, traceback)
        return self

# %% ../nbs/01_core.ipynb 18
#| export
