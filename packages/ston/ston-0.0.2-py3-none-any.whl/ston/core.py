# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['RegistryCollection', 'NameRegistry']

# %% ../nbs/00_core.ipynb 4
from pstr import safeattr, keymatch

# %% ../nbs/00_core.ipynb 6
class RegistryCollection(dict):
    '''
    A dictionary subclass used for registering and accessing instances by name or abbreviation.

    Attributes
    ----------
    No additional attributes beyond those provided by `dict`.

    Methods
    -------
    register(instance)
        Register an instance in the collection, accessible by its name or abbreviation.
    match(key, attr='name', default=None, icase=True, ispace=True, iunder=True, n=1, cutoff=0.8)
        Find and return an instance matching the key with various string matching options.
    lookup(name, default=None)
        Lookup an instance by name, using `match` with default settings.
    initer(val, iattr, kattr='name')
        Returns a set of `kattr` attribute values for instances where `val` is found in `iattr`.
    markers(cell_type)
        Return the set of marker genes for the given cell type.
    '''
    def register(self, instance, attrs: list[str] = None):
        '''
        Register an instance in the collection, accessible by its name or abbreviation.

        Parameters
        ----------
        instance : object
            The instance to register.

        attrs: list[str]
            Additional attributes to register the instance under.
        '''
        self[instance.name] = instance
        setattr(self, safeattr(instance.name), instance)
        for attr in (attrs or []):
            if hasattr(instance, attr) and not hasattr(self, safeattr(getattr(instance,attr))):
                setattr(self, safeattr(getattr(instance,attr)), instance)

    def match(
        self, key, attr: str = 'name', default = None, 
        icase: bool = True, ispace: bool = True, iunder: bool = True,
        n: int = 1, cutoff: float = 0.8
    ):
        '''
        Find and return an instance matching the key with various string matching options.

        Parameters
        ----------
        key : str
            The key to match against instance attributes.
        attr : str, optional
            The attribute of the instances to match against, by default 'name'.
        default : any, optional
            The default value to return if no match is found, by default None.
        icase : bool, optional
            Whether to ignore case during matching, by default True.
        ispace : bool, optional
            Whether to ignore spaces during matching, by default True.
        iunder : bool, optional
            Whether to ignore underscores during matching, by default True.
        n : int, optional
            The maximum number of matches to return, by default 1.
        cutoff : float, optional
            The cutoff for considering a match as valid, by default 0.8.

        Returns
        -------
        object or default
            The matched instance or the default value if no match is found.
        '''
        keys = list(self.keys())
        vals = list(map(lambda x: getattr(x, attr, None), self.values()))
        kwds = dict(n=n, cutoff=cutoff, icase=icase, ispace=ispace, iunder=iunder)
        for i, val in enumerate(vals):
            if (same := keymatch(key, keys[i], val, **kwds)): return self[keys[i]]
        return default

    def initer(self, val: str, iattr: str, kattr: str = 'name'):
        '''Checks if `val` is in instance attribute `iattr` and returns the set of `kattr` values.
        Note that `iattr` is short for "iterable attribue" (e.g. a set or list) and `kattr` is short
        for "key attribute" (e.g. the name of the instance).
        '''
        return {getattr(el, kattr) for el in self.values() if val in getattr(el, iattr)}

# %% ../nbs/00_core.ipynb 8
class NameRegistry(type):
    '''
    A metaclass for creating classes that have a name registry.

    Attributes
    ----------
    registry : RegistryCollection
        A property that returns the class registry.

    _registry : RegistryCollection
        A collection that holds instances of the class.


    Methods
    -------
    __new__(cls, name, bases, namespace, **kwargs)
        Create a new class with a registry.
    __call__(cls, name, *args, **kwargs)
        Call the class constructor and register the new instance.
    __getattr__(cls, name)
        Custom attribute access method that searches in the registry if the attribute is not found.
    '''
    
    def __new__(cls, name, bases, namespace, **kwargs):
        '''
        Create a new class with a registry.

        Parameters
        ----------
        name : str
            The name of the new class.
        bases : tuple
            The base classes of the new class.
        namespace : dict
            The namespace containing the definitions for the class.

        Returns
        -------
        type
            The newly created class.
        '''
        namespace['_registry'] = RegistryCollection()
        return super().__new__(cls, name, bases, namespace, **kwargs)
    
    def __call__(cls, name, *args, **kwargs):
        '''
        Call the class constructor and register the new instance.

        Parameters
        ----------
        name : str
            The name of the instance.
        args : tuple
            Positional arguments for the instance creation.
        kwargs : dict
            Keyword arguments for the instance creation.

        Returns
        -------
        object
            The newly created and registered instance, or the existing instance if found in the registry.
        '''
        registry = cls._registry
        if name not in registry:
            instance = super().__call__(name, *args, **kwargs)
            registry.register(instance)
            return instance
        return registry[name]
    
    @property
    def registry(cls): return cls._registry
    
    def lookup(cls, name, default = None, cutoff: float = 0.5, **kwargs):
        '''Find and return an instance matching name with various tolerance options.

        Parameters
        ----------
        name : str
            The key to match against instance attributes.
        attr : str, default: 'name'
            The attribute of the instances to match against.
        default : any, optional
            The default value to return if no match is found, by default None.
        
        icase : bool, optional
            Whether to ignore case during matching, by default True.
        
        ispace : bool, optional
            Whether to ignore spaces during matching, by default True.
        
        iunder : bool, optional
            Whether to ignore underscores during matching, by default True.
        
        n : int, default: 1
            The maximum number of matches to return, by default 1.
        
        cutoff : float, default: 0.8
            The cutoff for considering a match as valid, by default 0.8.

        Returns
        -------
        object or default
            The matched instance or the default value if no match is found.
        '''
        return cls.registry.match(name, default=default, cutoff=cutoff, **kwargs)

    def __getattr__(cls, name):
        try: return super().__getattr__(name)
        except (AttributeError, KeyError):
            try: return cls.lookup(name)
            except KeyError:
                raise AttributeError(f"'{cls.__name__}' has no attribute '{name}'")
