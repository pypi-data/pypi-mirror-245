"""Generated from gga_c_gaploc.mpl."""

import jax
import jax.lax as lax
import jax.numpy as jnp
from jax.numpy import array as array
from jax.numpy import int32 as int32
from jax.numpy import nan as nan
from typing import Callable, Optional
from .utils import *


def pol(p, r, s=(None, None, None), l=(None, None), tau=(None, None)):
  params = p.params
  (r0, r1), (s0, s1, s2), (l0, l1), (tau0, tau1) = r, s, l, tau
  t1 = jnp.cbrt(3)
  t2 = 0.1e1 / jnp.pi
  t3 = jnp.cbrt(t2)
  t5 = jnp.cbrt(4)
  t6 = t5 ** 2
  t7 = r0 + r1
  t8 = jnp.cbrt(t7)
  t11 = t1 * t3 * t6 / t8
  t14 = jnp.sqrt(t11)
  t17 = t11 ** 0.15e1
  t19 = t1 ** 2
  t20 = t3 ** 2
  t22 = t8 ** 2
  t25 = t19 * t20 * t5 / t22
  t31 = jnp.log(0.1e1 + 0.16081824322151104822e2 / (0.379785e1 * t14 + 0.8969 * t11 + 0.204775 * t17 + 0.123235 * t25))
  t33 = 0.62182e-1 * (0.1e1 + 0.53425e-1 * t11) * t31
  t34 = 0.1e1 <= p.zeta_threshold
  t35 = jnp.cbrt(p.zeta_threshold)
  t36 = t35 * p.zeta_threshold
  t37 = lax_cond(t34, t36, 1)
  t40 = jnp.cbrt(2)
  t43 = 0.1e1 / (0.2e1 * t40 - 0.2e1)
  t55 = jnp.log(0.1e1 + 0.29608574643216675549e2 / (0.51785e1 * t14 + 0.905775 * t11 + 0.1100325 * t17 + 0.1241775 * t25))
  t56 = (0.1e1 + 0.278125e-1 * t11) * t55
  t58 = 0.19751789702565206229e-1 * (0.2e1 * t37 - 0.2e1) * t43 * t56
  t59 = t3 * t2
  t61 = t19 / t59
  t62 = t8 * t7
  t63 = t6 * t62
  t64 = 0.1e1 / t7
  t65 = t2 * t64
  t71 = 0.1e1 + t14 * (0.107924e1 + 0.3964e-1 * t14 + 0.123825e-1 * t11) / 0.2e1
  t72 = t71 ** 2
  t76 = -t33 + t58
  t79 = 0.1e1 / t62
  t81 = t1 * t59 * t6 * t79
  t88 = t19 * t20 * t2 * t5 / t22 / t7
  t90 = jnp.pi ** 2
  t91 = 0.1e1 / t90
  t92 = t7 ** 2
  t94 = t91 / t92
  t101 = t1 * t3 * t91 * t6 / t8 / t92
  t103 = -0.1878e-1 * t65 + 0.1317375e-2 * t81 - 0.23775e-3 * t88 + 0.639e-4 * t94 - 0.540140625e-6 * t101
  t105 = 0.367983135e-2 * t65 / t72 - t76 * t103
  t109 = t1 / t20
  t110 = 4 ** (0.1e1 / 0.6e1)
  t111 = t109 * t110
  t112 = t14 * t11
  t113 = t22 * t112
  t114 = 0.1e1 / t71
  t118 = t76 ** 2
  t121 = 0.1e1 / (0.19711288999999999999e-2 * t111 * t113 * t114 - 0.2e1 * t118)
  t122 = jnp.cbrt(9)
  t123 = t122 ** 2
  t125 = jnp.cbrt(jnp.pi)
  t126 = t125 ** 2
  t128 = jnp.cbrt(6)
  t129 = t128 ** 2
  t130 = jnp.cbrt(t90)
  t134 = s0 + 0.2e1 * s1 + s2
  t135 = jnp.sqrt(t134)
  t139 = t129 / t130 * t135 * t79 * t40 / 0.12e2
  t142 = jnp.sqrt(t7)
  t145 = t135 * t134 / t142 / t92 / t7
  t146 = t35 ** 2
  t147 = lax_cond(t34, t146, 1)
  t148 = t147 ** 2
  t151 = jnp.sqrt(0.3e1)
  t153 = jnp.sqrt(t2)
  t154 = 0.1e1 / t153
  t156 = t145 / t148 / t147 * t151 * t154
  t163 = t139 ** ((0.854613e1 + t156 / 0.64e2) / (0.1e1 + t156 / 0.192e3))
  t164 = t130 ** 2
  t170 = t40 ** 2
  t174 = 0.14709046e2 + t128 / t164 * t134 / t22 / t92 * t170 / 0.24e2
  t176 = 0.1e1 + t163
  t177 = 0.1e1 / t176
  t183 = jnp.sqrt(0.4e1)
  t188 = t6 * t22
  t194 = t123 * t126
  t197 = t22 * t174
  t204 = t122 * t125 * jnp.pi
  t205 = t163 ** 2
  t208 = t174 ** 2
  t209 = t62 * t208
  t210 = t176 ** 2
  t218 = (-t33 + t58 + 0.13265555555555555555e-1 * t61 * t63 * t105 * t121 * t123 * t126 * t163 * t174 * t177) / (0.1e1 + 0.16666666666666666667 * (0.619125e-2 * t76 * t183 * t112 * t114 - 0.79593333333333333331e-1 * t109 * t188 * t103) * t121 * t194 * t163 * t109 * t197 * t177 - 0.25000000000000000001 * t105 * t121 * t204 * t205 * t61 * t209 / t210)
  t220 = (r0 - r1) * t64
  t221 = 0.1e1 + t220
  t223 = jnp.cbrt(t221)
  t225 = lax_cond(t221 <= p.zeta_threshold, t36, t223 * t221)
  t226 = 0.1e1 - t220
  t228 = jnp.cbrt(t226)
  t230 = lax_cond(t226 <= p.zeta_threshold, t36, t228 * t226)
  t233 = 0.2e1 <= p.zeta_threshold
  t235 = lax_cond(t233, t36, 0.2e1 * t40)
  t236 = 0. <= p.zeta_threshold
  t237 = lax_cond(t236, t36, 0)
  t239 = (t235 + t237 - 0.2e1) * t43
  t250 = jnp.log(0.1e1 + 0.32164683177870697974e2 / (0.705945e1 * t14 + 0.1549425e1 * t11 + 0.420775 * t17 + 0.1562925 * t25))
  t255 = t239 * (-0.3109e-1 * (0.1e1 + 0.5137e-1 * t11) * t250 + t33 - 0.19751789702565206229e-1 * t56)
  t257 = 0.19751789702565206229e-1 * t239 * t56
  t263 = 0.1e1 + t14 * (0.149676e1 + 0.89527e-3 * t14 + 0.11799625e-1 * t11) / 0.2e1
  t264 = t263 ** 2
  t268 = -t33 + t255 + t257
  t274 = -0.24306825e-1 * t65 + 0.187495875e-2 * t81 - 0.362780625e-3 * t88 + 0.100753875e-3 * t94 - 0.8659659375e-6 * t101
  t276 = 0.3341547603375e-2 * t65 / t264 - t268 * t274
  t279 = 0.1e1 / t263
  t283 = t268 ** 2
  t286 = 0.1e1 / (0.50765919958333333334e-3 * t111 * t113 * t279 - 0.2e1 * t283)
  t289 = lax_cond(t233, t146, t170)
  t290 = lax_cond(t236, t146, 0)
  t292 = t289 / 0.2e1 + t290 / 0.2e1
  t293 = t292 ** 2
  t298 = t145 / t293 / t292 * t151 * t154
  t305 = t139 ** ((0.854613e1 + t298 / 0.64e2) / (0.1e1 + t298 / 0.192e3))
  t307 = 0.1e1 + t305
  t308 = 0.1e1 / t307
  t330 = t305 ** 2
  t333 = t307 ** 2
  res = t218 + (t225 + t230 - 0.2e1) * t43 * ((-t33 + t255 + t257 + 0.35852777777777777779e-2 * t61 * t63 * t276 * t286 * t123 * t126 * t305 * t174 * t308) / (0.1e1 + 0.16666666666666666667 * (0.58998125e-2 * t268 * t183 * t112 * t279 - 0.21511666666666666667e-1 * t109 * t188 * t274) * t286 * t194 * t305 * t109 * t197 * t308 - 0.25000000000000000001 * t276 * t286 * t204 * t330 * t61 * t209 / t333) - t218)
  return res


def unpol(p, r, s=None, l=None, tau=None):
  params = p.params
  r0, s0, l0, tau0 = r, s, l, tau
  t1 = jnp.cbrt(3)
  t2 = 0.1e1 / jnp.pi
  t3 = jnp.cbrt(t2)
  t5 = jnp.cbrt(4)
  t6 = t5 ** 2
  t7 = jnp.cbrt(r0)
  t10 = t1 * t3 * t6 / t7
  t13 = jnp.sqrt(t10)
  t16 = t10 ** 0.15e1
  t18 = t1 ** 2
  t19 = t3 ** 2
  t21 = t7 ** 2
  t24 = t18 * t19 * t5 / t21
  t30 = jnp.log(0.1e1 + 0.16081824322151104822e2 / (0.379785e1 * t13 + 0.8969 * t10 + 0.204775 * t16 + 0.123235 * t24))
  t32 = 0.62182e-1 * (0.1e1 + 0.53425e-1 * t10) * t30
  t33 = 0.1e1 <= p.zeta_threshold
  t34 = jnp.cbrt(p.zeta_threshold)
  t35 = t34 * p.zeta_threshold
  t36 = lax_cond(t33, t35, 1)
  t39 = jnp.cbrt(2)
  t42 = 0.1e1 / (0.2e1 * t39 - 0.2e1)
  t43 = (0.2e1 * t36 - 0.2e1) * t42
  t54 = jnp.log(0.1e1 + 0.29608574643216675549e2 / (0.51785e1 * t13 + 0.905775 * t10 + 0.1100325 * t16 + 0.1241775 * t24))
  t55 = (0.1e1 + 0.278125e-1 * t10) * t54
  t57 = 0.19751789702565206229e-1 * t43 * t55
  t58 = t3 * t2
  t60 = t18 / t58
  t61 = t7 * r0
  t62 = t6 * t61
  t64 = t2 / r0
  t70 = 0.1e1 + t13 * (0.107924e1 + 0.3964e-1 * t13 + 0.123825e-1 * t10) / 0.2e1
  t71 = t70 ** 2
  t75 = -t32 + t57
  t78 = 0.1e1 / t61
  t80 = t1 * t58 * t6 * t78
  t87 = t18 * t19 * t2 * t5 / t21 / r0
  t89 = jnp.pi ** 2
  t90 = 0.1e1 / t89
  t91 = r0 ** 2
  t93 = t90 / t91
  t100 = t1 * t3 * t90 * t6 / t7 / t91
  t102 = -0.1878e-1 * t64 + 0.1317375e-2 * t80 - 0.23775e-3 * t87 + 0.639e-4 * t93 - 0.540140625e-6 * t100
  t104 = 0.367983135e-2 * t64 / t71 - t75 * t102
  t108 = t1 / t19
  t109 = 4 ** (0.1e1 / 0.6e1)
  t110 = t108 * t109
  t111 = t13 * t10
  t112 = t21 * t111
  t113 = 0.1e1 / t70
  t117 = t75 ** 2
  t120 = 0.1e1 / (0.19711288999999999999e-2 * t110 * t112 * t113 - 0.2e1 * t117)
  t121 = jnp.cbrt(9)
  t122 = t121 ** 2
  t124 = jnp.cbrt(jnp.pi)
  t125 = t124 ** 2
  t127 = jnp.cbrt(6)
  t128 = t127 ** 2
  t129 = jnp.cbrt(t89)
  t132 = jnp.sqrt(s0)
  t136 = t128 / t129 * t132 * t78 * t39 / 0.12e2
  t139 = jnp.sqrt(r0)
  t142 = t132 * s0 / t139 / t91 / r0
  t143 = t34 ** 2
  t144 = lax_cond(t33, t143, 1)
  t145 = t144 ** 2
  t148 = jnp.sqrt(0.3e1)
  t150 = jnp.sqrt(t2)
  t151 = 0.1e1 / t150
  t153 = t142 / t145 / t144 * t148 * t151
  t160 = t136 ** ((0.854613e1 + t153 / 0.64e2) / (0.1e1 + t153 / 0.192e3))
  t161 = t129 ** 2
  t167 = t39 ** 2
  t171 = 0.14709046e2 + t127 / t161 * s0 / t21 / t91 * t167 / 0.24e2
  t173 = 0.1e1 + t160
  t174 = 0.1e1 / t173
  t180 = jnp.sqrt(0.4e1)
  t185 = t6 * t21
  t191 = t122 * t125
  t194 = t21 * t171
  t201 = t121 * t124 * jnp.pi
  t202 = t160 ** 2
  t205 = t171 ** 2
  t206 = t61 * t205
  t207 = t173 ** 2
  t215 = (-t32 + t57 + 0.13265555555555555555e-1 * t60 * t62 * t104 * t120 * t122 * t125 * t160 * t171 * t174) / (0.1e1 + 0.16666666666666666667 * (0.619125e-2 * t75 * t180 * t111 * t113 - 0.79593333333333333331e-1 * t108 * t185 * t102) * t120 * t191 * t160 * t108 * t194 * t174 - 0.25000000000000000001 * t104 * t120 * t201 * t202 * t60 * t206 / t207)
  t216 = 0.2e1 <= p.zeta_threshold
  t218 = lax_cond(t216, t35, 0.2e1 * t39)
  t219 = 0. <= p.zeta_threshold
  t220 = lax_cond(t219, t35, 0)
  t222 = (t218 + t220 - 0.2e1) * t42
  t233 = jnp.log(0.1e1 + 0.32164683177870697974e2 / (0.705945e1 * t13 + 0.1549425e1 * t10 + 0.420775 * t16 + 0.1562925 * t24))
  t238 = t222 * (-0.3109e-1 * (0.1e1 + 0.5137e-1 * t10) * t233 + t32 - 0.19751789702565206229e-1 * t55)
  t240 = 0.19751789702565206229e-1 * t222 * t55
  t246 = 0.1e1 + t13 * (0.149676e1 + 0.89527e-3 * t13 + 0.11799625e-1 * t10) / 0.2e1
  t247 = t246 ** 2
  t251 = -t32 + t238 + t240
  t257 = -0.24306825e-1 * t64 + 0.187495875e-2 * t80 - 0.362780625e-3 * t87 + 0.100753875e-3 * t93 - 0.8659659375e-6 * t100
  t259 = 0.3341547603375e-2 * t64 / t247 - t251 * t257
  t262 = 0.1e1 / t246
  t266 = t251 ** 2
  t269 = 0.1e1 / (0.50765919958333333334e-3 * t110 * t112 * t262 - 0.2e1 * t266)
  t272 = lax_cond(t216, t143, t167)
  t273 = lax_cond(t219, t143, 0)
  t275 = t272 / 0.2e1 + t273 / 0.2e1
  t276 = t275 ** 2
  t281 = t142 / t276 / t275 * t148 * t151
  t288 = t136 ** ((0.854613e1 + t281 / 0.64e2) / (0.1e1 + t281 / 0.192e3))
  t290 = 0.1e1 + t288
  t291 = 0.1e1 / t290
  t313 = t288 ** 2
  t316 = t290 ** 2
  res = t215 + t43 * ((-t32 + t238 + t240 + 0.35852777777777777779e-2 * t60 * t62 * t259 * t269 * t122 * t125 * t288 * t171 * t291) / (0.1e1 + 0.16666666666666666667 * (0.58998125e-2 * t251 * t180 * t111 * t262 - 0.21511666666666666667e-1 * t108 * t185 * t257) * t269 * t191 * t288 * t108 * t194 * t291 - 0.25000000000000000001 * t259 * t269 * t201 * t313 * t60 * t206 / t316) - t215)
  return res


def invoke(
  p: NamedTuple, rho: Callable, r: jnp.ndarray, mo: Optional[Callable] = None,
  deorbitalize: Optional[float] = None,
):
  args = rho_to_arguments(p, rho, r, mo, deorbitalize)
  code = pol if p.nspin == 2 else unpol
  dens = args[0] if p.nspin == 1 else sum(args[0])
  ret = lax.cond((dens < p.dens_threshold), lambda *_: 0.,
                 lambda *_: code(p, *args), None)
  return ret