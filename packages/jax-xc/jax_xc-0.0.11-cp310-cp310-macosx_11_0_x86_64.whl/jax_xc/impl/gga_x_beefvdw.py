"""Generated from gga_x_beefvdw.mpl."""

import jax
import jax.lax as lax
import jax.numpy as jnp
from jax.numpy import array as array
from jax.numpy import int32 as int32
from jax.numpy import nan as nan
from typing import Callable, Optional
from .utils import *


def pol(p, r, s=(None, None, None), l=(None, None), tau=(None, None)):
  params = p.params
  (r0, r1), (s0, s1, s2), (l0, l1), (tau0, tau1) = r, s, l, tau
  t2 = jnp.cbrt(3)
  t3 = jnp.cbrt(jnp.pi)
  t5 = t2 / t3
  t6 = r0 + r1
  t7 = 0.1e1 / t6
  t10 = 0.2e1 * r0 * t7 <= p.zeta_threshold
  t11 = p.zeta_threshold - 0.1e1
  t14 = 0.2e1 * r1 * t7 <= p.zeta_threshold
  t15 = -t11
  t17 = (r0 - r1) * t7
  t18 = lax_cond(t14, t15, t17)
  t19 = lax_cond(t10, t11, t18)
  t20 = t19 + 0.1e1
  t22 = jnp.cbrt(p.zeta_threshold)
  t23 = t22 * p.zeta_threshold
  t24 = jnp.cbrt(t20)
  t26 = lax_cond(t20 <= p.zeta_threshold, t23, t24 * t20)
  t27 = jnp.cbrt(t6)
  t29 = jnp.cbrt(6)
  t30 = jnp.pi ** 2
  t31 = jnp.cbrt(t30)
  t32 = t31 ** 2
  t34 = t29 / t32
  t35 = r0 ** 2
  t36 = jnp.cbrt(r0)
  t37 = t36 ** 2
  t40 = s0 / t37 / t35
  t46 = t34 * t40 / (0.4e1 + t34 * t40 / 0.24e2)
  t48 = t46 / 0.12e2 - 0.1e1
  t49 = t48 ** 2
  t50 = t49 ** 2
  t51 = t50 * t48
  t52 = t50 ** 2
  t53 = t52 * t51
  t54 = t52 ** 2
  t57 = t49 * t48
  t58 = t52 * t57
  t61 = t52 * t50
  t64 = t52 * t48
  t67 = t52 * t49
  t72 = t50 * t49
  t75 = t50 * t57
  t91 = 0.4135586188014653875e4 * t54 * t53 - 0.29150193011493262292e5 * t54 * t58 - 0.5427777462637186032e4 * t54 * t61 + 0.90365611108522808258e5 * t54 * t64 + 0.40074935854432390114e5 * t54 * t67 - 0.13204466182182150467e6 * t54 * t52 + 0.2558947952623533461e6 * t54 * t72 - 0.16114215399846280595e6 * t54 * t75 - 0.32352403136049329184e6 * t54 * t50 + 0.18078200670879145336e6 * t54 * t51 + 0.27967048856303053872e6 * t54 * t49 - 0.12981481812794983922e6 * t54 * t57 + 0.56174007979372666951e5 * t54 * t48 - 0.10276426607863824397e5 * t52 * t75 - 0.16837084139014120539e6 * t54
  t107 = 0.11313514630621233134e1 - 0.281024018056846299e4 * t53 + 0.70504541869034010051e5 * t52 * t72 + 0.22748997850816485208e4 * t58 - 0.20148245175625047025e5 * t61 + 0.37835396407252402359e4 * t67 - 0.44233229018433803622e3 * t52 - 0.61754786104528599731e3 * t64 + 0.30542034959315850168e2 * t72 + 0.86005730499279641299e2 * t75 - 0.69459735177638985466 * t50 - 0.72975787893717136018e1 * t51 - 0.38916037779196815969 * t49 + 0.52755620115589800943 * t57 + 0.37534251004296526981e-1 * t46
  t112 = lax_cond(r0 <= p.dens_threshold, 0, -0.3e1 / 0.8e1 * t5 * t26 * t27 * (t91 + t107))
  t114 = lax_cond(t10, t15, -t17)
  t115 = lax_cond(t14, t11, t114)
  t116 = t115 + 0.1e1
  t118 = jnp.cbrt(t116)
  t120 = lax_cond(t116 <= p.zeta_threshold, t23, t118 * t116)
  t122 = r1 ** 2
  t123 = jnp.cbrt(r1)
  t124 = t123 ** 2
  t127 = s2 / t124 / t122
  t133 = t34 * t127 / (0.4e1 + t34 * t127 / 0.24e2)
  t135 = t133 / 0.12e2 - 0.1e1
  t136 = t135 ** 2
  t137 = t136 ** 2
  t138 = t137 * t135
  t142 = t136 * t135
  t144 = t137 * t142
  t146 = t137 ** 2
  t148 = t146 * t142
  t150 = t137 * t136
  t152 = t146 * t135
  t154 = t146 * t136
  t156 = t146 * t138
  t160 = t146 * t137
  t162 = t146 ** 2
  t167 = -0.72975787893717136018e1 * t138 - 0.69459735177638985466 * t137 - 0.38916037779196815969 * t136 + 0.52755620115589800943 * t142 + 0.86005730499279641299e2 * t144 - 0.44233229018433803622e3 * t146 + 0.22748997850816485208e4 * t148 + 0.30542034959315850168e2 * t150 - 0.61754786104528599731e3 * t152 + 0.37835396407252402359e4 * t154 - 0.281024018056846299e4 * t156 - 0.10276426607863824397e5 * t146 * t144 - 0.20148245175625047025e5 * t160 + 0.56174007979372666951e5 * t162 * t135 + 0.70504541869034010051e5 * t146 * t150
  t194 = 0.11313514630621233134e1 + 0.27967048856303053872e6 * t162 * t136 - 0.16837084139014120539e6 * t162 - 0.32352403136049329184e6 * t162 * t137 + 0.18078200670879145336e6 * t162 * t138 - 0.12981481812794983922e6 * t162 * t142 + 0.2558947952623533461e6 * t162 * t150 - 0.16114215399846280595e6 * t162 * t144 + 0.40074935854432390114e5 * t162 * t154 - 0.13204466182182150467e6 * t162 * t146 - 0.29150193011493262292e5 * t162 * t148 + 0.90365611108522808258e5 * t162 * t152 - 0.5427777462637186032e4 * t162 * t160 + 0.4135586188014653875e4 * t162 * t156 + 0.37534251004296526981e-1 * t133
  t199 = lax_cond(r1 <= p.dens_threshold, 0, -0.3e1 / 0.8e1 * t5 * t120 * t27 * (t167 + t194))
  res = t112 + t199
  return res


def unpol(p, r, s=None, l=None, tau=None):
  params = p.params
  r0, s0, l0, tau0 = r, s, l, tau
  t3 = jnp.cbrt(3)
  t4 = jnp.cbrt(jnp.pi)
  t7 = 0.1e1 <= p.zeta_threshold
  t8 = p.zeta_threshold - 0.1e1
  t10 = lax_cond(t7, -t8, 0)
  t11 = lax_cond(t7, t8, t10)
  t12 = t11 + 0.1e1
  t14 = jnp.cbrt(p.zeta_threshold)
  t16 = jnp.cbrt(t12)
  t18 = lax_cond(t12 <= p.zeta_threshold, t14 * p.zeta_threshold, t16 * t12)
  t19 = jnp.cbrt(r0)
  t21 = jnp.cbrt(6)
  t22 = jnp.pi ** 2
  t23 = jnp.cbrt(t22)
  t24 = t23 ** 2
  t26 = t21 / t24
  t28 = jnp.cbrt(2)
  t29 = t28 ** 2
  t30 = r0 ** 2
  t31 = t19 ** 2
  t33 = 0.1e1 / t31 / t30
  t42 = t26 * s0 * t29 * t33 / (0.4e1 + t26 * s0 * t29 * t33 / 0.24e2)
  t44 = t42 / 0.12e2 - 0.1e1
  t45 = t44 ** 2
  t46 = t45 ** 2
  t47 = t46 * t44
  t48 = t46 ** 2
  t49 = t48 * t47
  t50 = t48 ** 2
  t53 = t48 * t46
  t56 = t48 * t45
  t59 = t45 * t44
  t60 = t48 * t59
  t63 = t48 * t44
  t66 = t46 * t59
  t71 = t46 * t45
  t87 = 0.4135586188014653875e4 * t50 * t49 - 0.5427777462637186032e4 * t50 * t53 + 0.40074935854432390114e5 * t50 * t56 - 0.29150193011493262292e5 * t50 * t60 + 0.90365611108522808258e5 * t50 * t63 - 0.16114215399846280595e6 * t50 * t66 - 0.13204466182182150467e6 * t50 * t48 + 0.2558947952623533461e6 * t50 * t71 - 0.32352403136049329184e6 * t50 * t46 + 0.18078200670879145336e6 * t50 * t47 - 0.12981481812794983922e6 * t50 * t59 + 0.56174007979372666951e5 * t50 * t44 + 0.27967048856303053872e6 * t50 * t45 - 0.16837084139014120539e6 * t50 + 0.70504541869034010051e5 * t48 * t71
  t103 = 0.11313514630621233134e1 - 0.10276426607863824397e5 * t48 * t66 - 0.281024018056846299e4 * t49 + 0.22748997850816485208e4 * t60 - 0.20148245175625047025e5 * t53 + 0.37835396407252402359e4 * t56 - 0.44233229018433803622e3 * t48 - 0.61754786104528599731e3 * t63 + 0.86005730499279641299e2 * t66 - 0.72975787893717136018e1 * t47 + 0.30542034959315850168e2 * t71 - 0.69459735177638985466 * t46 - 0.38916037779196815969 * t45 + 0.52755620115589800943 * t59 + 0.37534251004296526981e-1 * t42
  t108 = lax_cond(r0 / 0.2e1 <= p.dens_threshold, 0, -0.3e1 / 0.8e1 * t3 / t4 * t18 * t19 * (t87 + t103))
  res = 0.2e1 * t108
  return res


def invoke(
  p: NamedTuple, rho: Callable, r: jnp.ndarray, mo: Optional[Callable] = None,
  deorbitalize: Optional[float] = None,
):
  args = rho_to_arguments(p, rho, r, mo, deorbitalize)
  code = pol if p.nspin == 2 else unpol
  dens = args[0] if p.nspin == 1 else sum(args[0])
  ret = lax.cond((dens < p.dens_threshold), lambda *_: 0.,
                 lambda *_: code(p, *args), None)
  return ret