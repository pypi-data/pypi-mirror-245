"""Generated from gga_x_wpbeh.mpl."""

import jax
import jax.lax as lax
import jax.numpy as jnp
from jax.numpy import array as array
from jax.numpy import int32 as int32
from jax.numpy import nan as nan
from typing import Callable, Optional
from .utils import *


def pol(p, r, s=(None, None, None), l=(None, None), tau=(None, None)):
  params = p.params
  (r0, r1), (s0, s1, s2), (l0, l1), (tau0, tau1) = r, s, l, tau
  t3 = jnp.cbrt(3)
  t4 = jnp.cbrt(jnp.pi)
  t6 = t3 / t4
  t7 = r0 + r1
  t8 = 0.1e1 / t7
  t12 = 0.2e1 * r0 * t8 <= p.zeta_threshold
  t13 = p.zeta_threshold - 0.1e1
  t16 = 0.2e1 * r1 * t8 <= p.zeta_threshold
  t17 = -t13
  t19 = (r0 - r1) * t8
  t20 = lax_cond(t16, t17, t19)
  t21 = lax_cond(t12, t13, t20)
  t22 = 0.1e1 + t21
  t24 = jnp.cbrt(p.zeta_threshold)
  t25 = t24 * p.zeta_threshold
  t26 = jnp.cbrt(t22)
  t28 = lax_cond(t22 <= p.zeta_threshold, t25, t26 * t22)
  t29 = jnp.cbrt(t7)
  t31 = t3 ** 2
  t32 = p.cam_omega * t31
  t33 = jnp.pi ** 2
  t34 = jnp.cbrt(t33)
  t35 = 0.1e1 / t34
  t37 = 0.1e1 + t19 <= p.zeta_threshold
  t39 = 0.1e1 - t19 <= p.zeta_threshold
  t40 = lax_cond(t39, t17, t19)
  t41 = lax_cond(t37, t13, t40)
  t42 = 0.1e1 + t41
  t44 = jnp.cbrt(t42)
  t45 = lax_cond(t42 <= p.zeta_threshold, t24, t44)
  t47 = t35 / t45
  t48 = 0.1e1 / t29
  t51 = t32 * t47 * t48 / 0.3e1
  t52 = 0.14e2 < t51
  t53 = jnp.cbrt(6)
  t54 = t53 ** 2
  t55 = t54 * t35
  t56 = jnp.sqrt(s0)
  t57 = jnp.cbrt(r0)
  t62 = t55 * t56 / t57 / r0 / 0.12e2
  t64 = 0.15e2 < t62
  t65 = lax_cond(t64, 15, t62)
  t67 = lax_cond(0.1e1 < t65, t65, 1)
  t69 = jnp.exp(t67 - 0.8572844e1)
  t71 = jnp.log(0.1e1 + t69)
  t73 = lax_cond(t64, 0.8572844e1, t67 - t71)
  t74 = lax_cond(t62 < 0.1e1, t62, t73)
  t76 = lax_cond(t74 < 0.1e-14, 0.1e-14, t74)
  t77 = t76 ** 2
  t79 = t77 ** 2
  t81 = 0.979681e-2 * t77 + 0.410834e-1 * t79
  t89 = 0.1e1 / (0.1e1 + 0.18744 * t79 + 0.120824e-2 * t79 * t76 + 0.347188e-1 * t79 * t77)
  t90 = t77 * t81 * t89
  t91 = 0.22143176004591608976e1 * t90
  t93 = lax_cond(t51 < 0.14e2, 0.1455915450052607e1, 2)
  t94 = p.cam_omega ** 2
  t97 = t34 ** 2
  t98 = 0.1e1 / t97
  t99 = t45 ** 2
  t102 = t29 ** 2
  t103 = 0.1e1 / t102
  t104 = t98 / t99 * t103
  t105 = t93 * t94 * t3 * t104
  t108 = xc_E1_scaled(t91 + 0.73810586681972029922 * t105)
  t110 = t105 / 0.3e1
  t112 = jnp.log(0.57786348 + t90 + t110)
  t115 = jnp.log(t90 + t110)
  t118 = lax_cond(t52, 14, t51)
  t120 = t118 ** 2
  t121 = t120 * t118
  t123 = t120 ** 2
  t124 = t123 * t118
  t126 = t123 * t121
  t131 = lax_cond(t118 < 0.14e2, 0.1455915450052607e1, 2)
  t132 = t131 * t120
  t134 = t91 + 0.22143176004591608976e1 * t132
  t135 = jnp.sqrt(t134)
  t136 = xc_erfcx(t135)
  t141 = t123 * t120
  t143 = t123 ** 2
  t146 = xc_E1_scaled(t134)
  t149 = jnp.sqrt(jnp.pi)
  t150 = 0.57786348 + t90 + t132
  t151 = jnp.sqrt(t150)
  t156 = 0.1e1 / t150
  t159 = t90 + t132
  t160 = jnp.sqrt(t159)
  t172 = t150 ** 2
  t177 = t151 * t172
  t183 = t160 * t159
  t193 = t172 * t150
  t198 = t159 ** 2
  t204 = t160 * t198
  t206 = t151 * t193
  t221 = t172 ** 2
  t225 = t198 * t159
  t241 = jnp.log(t159 * t156)
  t243 = (0.17059169152930056821e1 * t118 - 0.41622705406440396562e1 * t121 + 0.42174370348694648999e1 * t124 - 0.10676080470633097775e1 * t126) * jnp.pi * t136 / 0.2e1 - (-0.10161144e1 + 0.326865659796668475e1 * t120 - 0.48418398881417585092e1 * t123 + 0.2723636568586566055e1 * t141 - 0.20524577845574895866 * t143) * t146 / 0.2e1 - 0.5732022993364590259 * t149 / t151 * t118 + 0.73807311952199090995 * t156 * t120 - 0.1243162299390327e1 * t149 * (-0.9e1 / 0.8e1 / t160 + 0.2540286 / t151 / t150) * t121 + (-0.1093302940630051125e1 / t159 + 0.49374260512735112038 / t172) * t123 - 0.52484962540331303985e-1 * t149 * (0.3e1 * t177 * (0.9e1 * t90 + 0.9e1 * t132 - 0.20322288e1) + 0.412995389554944e1 * t183) / t177 / t183 * t124 + (0.25085884618821050197 / t193 + 0.7715016088131e-2 * (-0.36e2 + 0.79715433616529792314e2 * t90) / t198) * t141 + 0.14762353927435135389e-2 * t149 * (-0.4196505624603881896e2 * t204 + 0.9e1 * t206 * (0.27e2 * t198 - 0.60966864e1 * t90 - 0.60966864e1 * t132 + 0.412995389554944e1)) / t206 / t204 * t126 + 0.75666704254679261017e-2 * (0.81278266164980202635e2 * t131 * t221 * t159 + 0.33847844843765416574e1 * t225 + 0.8401793031216e-2 * t221 * (-0.729e3 * t198 + 0.3292210656e3 * t90 + 0.3292210656e3 * t132 - 0.29735668047955968e3)) / t221 / t225 * t143 + 0.5080572 * t241
  t244 = lax_cond(t52, 0.5080572 * t108 - 0.5080572 * t112 + 0.5080572 * t115, t243)
  t246 = 0.57786348 + t90
  t247 = t246 ** 2
  t249 = 0.77215461e-1 * t90
  t253 = 0.64753871e1 * t81 * t89 + 0.4796583
  t257 = 0.3e1 / 0.4e1 * jnp.pi
  t263 = t247 * t246
  t267 = jnp.sqrt(t246)
  t268 = t267 * t263
  t272 = jnp.exp(t91)
  t274 = jnp.sqrt(t90)
  t276 = jax.lax.erf(0.14880583323442535321e1 * t274)
  t281 = 0.1e1 / t149
  t290 = lax_cond(0.8e-1 < t76, -0.16e2 / 0.15e2 * (t257 + t149 * (-0.779335965 - 0.463292766 * (t253 * t77 + 0.1e1) * t246 - 0.148683344e1 * t247 + 0.81289152e1 * t263) / t268 / 0.16e2 - 0.75601874976749088562 * jnp.pi * t272 * (0.1e1 - t276)) * t281 / t77 * t268, -0.262841788e-1 - 0.7117647788e-1 * t77 + 0.8534541323e-1 * t79)
  t291 = t77 * t290
  t294 = 0.1e1 / t263
  t298 = t94 * t3
  t299 = t298 * t104
  t301 = 0.57786348 + t90 + t299 / 0.3e1
  t302 = t301 ** 2
  t307 = t301 * t77 * t253
  t313 = jnp.sqrt(t301)
  t315 = 0.1e1 / t313 / t302
  t322 = t94 * p.cam_omega / t33
  t336 = t94 ** 2
  t338 = t336 * p.cam_omega * t3
  t340 = 0.1e1 / t97 / t33
  t341 = t99 ** 2
  t347 = 0.1e1 / t102 / t7
  t358 = lax_cond(r0 <= p.dens_threshold, 0, -0.3e1 / 0.8e1 * t6 * t28 * t29 * (-0.8e1 / 0.9e1 * t244 - 0.4e1 / 0.9e1 * (-0.37170836 * t247 - 0.14853145700326428 - t249 - 0.77215461e-1 * t246 * t77 * t253 + 0.2e1 * t291) * t294 + t32 * t47 * t48 * (-0.148683344e1 * t302 - 0.104705593501958568e1 - 0.463292766 * t90 - 0.154430922 * t299 - 0.463292766 * t307 + 0.15e2 * t291) / t246 * t315 / 0.27e2 + 0.4e1 / 0.27e2 * t322 / t99 / t45 * t8 * (-0.30439865000326428 - t249 - 0.25738487e-1 * t299 - 0.77215461e-1 * t307 + 0.5e1 * t291) / t247 * t315 + 0.8e1 / 0.81e2 * t338 * t340 / t341 / t45 * t347 * (-0.51955731e-1 + t291) * t294 * t315))
  t360 = lax_cond(t12, t17, -t19)
  t361 = lax_cond(t16, t13, t360)
  t362 = 0.1e1 + t361
  t364 = jnp.cbrt(t362)
  t366 = lax_cond(t362 <= p.zeta_threshold, t25, t364 * t362)
  t368 = lax_cond(t37, t17, -t19)
  t369 = lax_cond(t39, t13, t368)
  t370 = 0.1e1 + t369
  t372 = jnp.cbrt(t370)
  t373 = lax_cond(t370 <= p.zeta_threshold, t24, t372)
  t375 = t35 / t373
  t378 = t32 * t375 * t48 / 0.3e1
  t379 = 0.14e2 < t378
  t380 = jnp.sqrt(s2)
  t381 = jnp.cbrt(r1)
  t386 = t55 * t380 / t381 / r1 / 0.12e2
  t388 = 0.15e2 < t386
  t389 = lax_cond(t388, 15, t386)
  t391 = lax_cond(0.1e1 < t389, t389, 1)
  t393 = jnp.exp(t391 - 0.8572844e1)
  t395 = jnp.log(0.1e1 + t393)
  t397 = lax_cond(t388, 0.8572844e1, t391 - t395)
  t398 = lax_cond(t386 < 0.1e1, t386, t397)
  t400 = lax_cond(t398 < 0.1e-14, 0.1e-14, t398)
  t401 = t400 ** 2
  t403 = t401 ** 2
  t405 = 0.979681e-2 * t401 + 0.410834e-1 * t403
  t413 = 0.1e1 / (0.1e1 + 0.18744 * t403 + 0.120824e-2 * t403 * t400 + 0.347188e-1 * t403 * t401)
  t414 = t401 * t405 * t413
  t415 = 0.22143176004591608976e1 * t414
  t417 = lax_cond(t378 < 0.14e2, 0.1455915450052607e1, 2)
  t420 = t373 ** 2
  t423 = t98 / t420 * t103
  t424 = t417 * t94 * t3 * t423
  t427 = xc_E1_scaled(t415 + 0.73810586681972029922 * t424)
  t429 = t424 / 0.3e1
  t431 = jnp.log(0.57786348 + t414 + t429)
  t434 = jnp.log(t414 + t429)
  t437 = lax_cond(t379, 14, t378)
  t439 = t437 ** 2
  t440 = t439 * t437
  t442 = t439 ** 2
  t443 = t442 * t437
  t445 = t442 * t440
  t450 = lax_cond(t437 < 0.14e2, 0.1455915450052607e1, 2)
  t451 = t450 * t439
  t453 = t415 + 0.22143176004591608976e1 * t451
  t454 = jnp.sqrt(t453)
  t455 = xc_erfcx(t454)
  t460 = t442 * t439
  t462 = t442 ** 2
  t465 = xc_E1_scaled(t453)
  t468 = 0.57786348 + t414 + t451
  t469 = jnp.sqrt(t468)
  t474 = 0.1e1 / t468
  t477 = t414 + t451
  t478 = jnp.sqrt(t477)
  t490 = t468 ** 2
  t495 = t469 * t490
  t501 = t478 * t477
  t511 = t490 * t468
  t516 = t477 ** 2
  t522 = t478 * t516
  t524 = t469 * t511
  t539 = t490 ** 2
  t543 = t516 * t477
  t559 = jnp.log(t477 * t474)
  t561 = (0.17059169152930056821e1 * t437 - 0.41622705406440396562e1 * t440 + 0.42174370348694648999e1 * t443 - 0.10676080470633097775e1 * t445) * jnp.pi * t455 / 0.2e1 - (-0.10161144e1 + 0.326865659796668475e1 * t439 - 0.48418398881417585092e1 * t442 + 0.2723636568586566055e1 * t460 - 0.20524577845574895866 * t462) * t465 / 0.2e1 - 0.5732022993364590259 * t149 / t469 * t437 + 0.73807311952199090995 * t474 * t439 - 0.1243162299390327e1 * t149 * (-0.9e1 / 0.8e1 / t478 + 0.2540286 / t469 / t468) * t440 + (-0.1093302940630051125e1 / t477 + 0.49374260512735112038 / t490) * t442 - 0.52484962540331303985e-1 * t149 * (0.3e1 * t495 * (0.9e1 * t414 + 0.9e1 * t451 - 0.20322288e1) + 0.412995389554944e1 * t501) / t495 / t501 * t443 + (0.25085884618821050197 / t511 + 0.7715016088131e-2 * (-0.36e2 + 0.79715433616529792314e2 * t414) / t516) * t460 + 0.14762353927435135389e-2 * t149 * (-0.4196505624603881896e2 * t522 + 0.9e1 * t524 * (0.27e2 * t516 - 0.60966864e1 * t414 - 0.60966864e1 * t451 + 0.412995389554944e1)) / t524 / t522 * t445 + 0.75666704254679261017e-2 * (0.81278266164980202635e2 * t450 * t539 * t477 + 0.33847844843765416574e1 * t543 + 0.8401793031216e-2 * t539 * (-0.729e3 * t516 + 0.3292210656e3 * t414 + 0.3292210656e3 * t451 - 0.29735668047955968e3)) / t539 / t543 * t462 + 0.5080572 * t559
  t562 = lax_cond(t379, 0.5080572 * t427 - 0.5080572 * t431 + 0.5080572 * t434, t561)
  t564 = 0.57786348 + t414
  t565 = t564 ** 2
  t567 = 0.77215461e-1 * t414
  t571 = 0.64753871e1 * t405 * t413 + 0.4796583
  t580 = t565 * t564
  t584 = jnp.sqrt(t564)
  t585 = t584 * t580
  t589 = jnp.exp(t415)
  t591 = jnp.sqrt(t414)
  t593 = jax.lax.erf(0.14880583323442535321e1 * t591)
  t606 = lax_cond(0.8e-1 < t400, -0.16e2 / 0.15e2 * (t257 + t149 * (-0.779335965 - 0.463292766 * (t571 * t401 + 0.1e1) * t564 - 0.148683344e1 * t565 + 0.81289152e1 * t580) / t585 / 0.16e2 - 0.75601874976749088562 * jnp.pi * t589 * (0.1e1 - t593)) * t281 / t401 * t585, -0.262841788e-1 - 0.7117647788e-1 * t401 + 0.8534541323e-1 * t403)
  t607 = t401 * t606
  t610 = 0.1e1 / t580
  t614 = t298 * t423
  t616 = 0.57786348 + t414 + t614 / 0.3e1
  t617 = t616 ** 2
  t622 = t616 * t401 * t571
  t628 = jnp.sqrt(t616)
  t630 = 0.1e1 / t628 / t617
  t648 = t420 ** 2
  t663 = lax_cond(r1 <= p.dens_threshold, 0, -0.3e1 / 0.8e1 * t6 * t366 * t29 * (-0.8e1 / 0.9e1 * t562 - 0.4e1 / 0.9e1 * (-0.37170836 * t565 - 0.14853145700326428 - t567 - 0.77215461e-1 * t564 * t401 * t571 + 0.2e1 * t607) * t610 + t32 * t375 * t48 * (-0.148683344e1 * t617 - 0.104705593501958568e1 - 0.463292766 * t414 - 0.154430922 * t614 - 0.463292766 * t622 + 0.15e2 * t607) / t564 * t630 / 0.27e2 + 0.4e1 / 0.27e2 * t322 / t420 / t373 * t8 * (-0.30439865000326428 - t567 - 0.25738487e-1 * t614 - 0.77215461e-1 * t622 + 0.5e1 * t607) / t565 * t630 + 0.8e1 / 0.81e2 * t338 * t340 / t648 / t373 * t347 * (-0.51955731e-1 + t607) * t610 * t630))
  res = t358 + t663
  return res


def unpol(p, r, s=None, l=None, tau=None):
  params = p.params
  r0, s0, l0, tau0 = r, s, l, tau
  t4 = jnp.cbrt(3)
  t5 = jnp.cbrt(jnp.pi)
  t8 = 0.1e1 <= p.zeta_threshold
  t9 = p.zeta_threshold - 0.1e1
  t12 = lax_cond(t8, -t9, 0)
  t13 = lax_cond(t8, t9, t12)
  t14 = 0.1e1 + t13
  t15 = t14 <= p.zeta_threshold
  t16 = jnp.cbrt(p.zeta_threshold)
  t18 = jnp.cbrt(t14)
  t20 = lax_cond(t15, t16 * p.zeta_threshold, t18 * t14)
  t21 = jnp.cbrt(r0)
  t23 = t4 ** 2
  t24 = p.cam_omega * t23
  t25 = jnp.pi ** 2
  t26 = jnp.cbrt(t25)
  t27 = 0.1e1 / t26
  t28 = lax_cond(t15, t16, t18)
  t30 = t27 / t28
  t31 = 0.1e1 / t21
  t34 = t24 * t30 * t31 / 0.3e1
  t35 = 0.14e2 < t34
  t36 = jnp.cbrt(6)
  t37 = t36 ** 2
  t39 = jnp.sqrt(s0)
  t40 = jnp.cbrt(2)
  t46 = t37 * t27 * t39 * t40 / t21 / r0 / 0.12e2
  t48 = 0.15e2 < t46
  t49 = lax_cond(t48, 15, t46)
  t51 = lax_cond(0.1e1 < t49, t49, 1)
  t53 = jnp.exp(t51 - 0.8572844e1)
  t55 = jnp.log(0.1e1 + t53)
  t57 = lax_cond(t48, 0.8572844e1, t51 - t55)
  t58 = lax_cond(t46 < 0.1e1, t46, t57)
  t60 = lax_cond(t58 < 0.1e-14, 0.1e-14, t58)
  t61 = t60 ** 2
  t63 = t61 ** 2
  t65 = 0.979681e-2 * t61 + 0.410834e-1 * t63
  t73 = 0.1e1 / (0.1e1 + 0.18744 * t63 + 0.120824e-2 * t63 * t60 + 0.347188e-1 * t63 * t61)
  t74 = t61 * t65 * t73
  t75 = 0.22143176004591608976e1 * t74
  t77 = lax_cond(t34 < 0.14e2, 0.1455915450052607e1, 2)
  t78 = p.cam_omega ** 2
  t81 = t26 ** 2
  t83 = t28 ** 2
  t86 = t21 ** 2
  t88 = 0.1e1 / t81 / t83 / t86
  t89 = t77 * t78 * t4 * t88
  t92 = xc_E1_scaled(t75 + 0.73810586681972029922 * t89)
  t94 = t89 / 0.3e1
  t96 = jnp.log(0.57786348 + t74 + t94)
  t99 = jnp.log(t74 + t94)
  t102 = lax_cond(t35, 14, t34)
  t104 = t102 ** 2
  t105 = t104 * t102
  t107 = t104 ** 2
  t108 = t107 * t102
  t110 = t107 * t105
  t115 = lax_cond(t102 < 0.14e2, 0.1455915450052607e1, 2)
  t116 = t115 * t104
  t118 = t75 + 0.22143176004591608976e1 * t116
  t119 = jnp.sqrt(t118)
  t120 = xc_erfcx(t119)
  t125 = t107 * t104
  t127 = t107 ** 2
  t130 = xc_E1_scaled(t118)
  t133 = jnp.sqrt(jnp.pi)
  t134 = 0.57786348 + t74 + t116
  t135 = jnp.sqrt(t134)
  t140 = 0.1e1 / t134
  t143 = t74 + t116
  t144 = jnp.sqrt(t143)
  t156 = t134 ** 2
  t161 = t135 * t156
  t167 = t144 * t143
  t177 = t156 * t134
  t182 = t143 ** 2
  t188 = t144 * t182
  t190 = t135 * t177
  t205 = t156 ** 2
  t209 = t182 * t143
  t225 = jnp.log(t143 * t140)
  t227 = (0.17059169152930056821e1 * t102 - 0.41622705406440396562e1 * t105 + 0.42174370348694648999e1 * t108 - 0.10676080470633097775e1 * t110) * jnp.pi * t120 / 0.2e1 - (-0.10161144e1 + 0.326865659796668475e1 * t104 - 0.48418398881417585092e1 * t107 + 0.2723636568586566055e1 * t125 - 0.20524577845574895866 * t127) * t130 / 0.2e1 - 0.5732022993364590259 * t133 / t135 * t102 + 0.73807311952199090995 * t140 * t104 - 0.1243162299390327e1 * t133 * (-0.9e1 / 0.8e1 / t144 + 0.2540286 / t135 / t134) * t105 + (-0.1093302940630051125e1 / t143 + 0.49374260512735112038 / t156) * t107 - 0.52484962540331303985e-1 * t133 * (0.3e1 * t161 * (0.9e1 * t74 + 0.9e1 * t116 - 0.20322288e1) + 0.412995389554944e1 * t167) / t161 / t167 * t108 + (0.25085884618821050197 / t177 + 0.7715016088131e-2 * (-0.36e2 + 0.79715433616529792314e2 * t74) / t182) * t125 + 0.14762353927435135389e-2 * t133 * (-0.4196505624603881896e2 * t188 + 0.9e1 * t190 * (0.27e2 * t182 - 0.60966864e1 * t74 - 0.60966864e1 * t116 + 0.412995389554944e1)) / t190 / t188 * t110 + 0.75666704254679261017e-2 * (0.81278266164980202635e2 * t115 * t205 * t143 + 0.33847844843765416574e1 * t209 + 0.8401793031216e-2 * t205 * (-0.729e3 * t182 + 0.3292210656e3 * t74 + 0.3292210656e3 * t116 - 0.29735668047955968e3)) / t205 / t209 * t127 + 0.5080572 * t225
  t228 = lax_cond(t35, 0.5080572 * t92 - 0.5080572 * t96 + 0.5080572 * t99, t227)
  t230 = 0.57786348 + t74
  t231 = t230 ** 2
  t233 = 0.77215461e-1 * t74
  t237 = 0.64753871e1 * t65 * t73 + 0.4796583
  t247 = t231 * t230
  t251 = jnp.sqrt(t230)
  t252 = t251 * t247
  t256 = jnp.exp(t75)
  t258 = jnp.sqrt(t74)
  t260 = jax.lax.erf(0.14880583323442535321e1 * t258)
  t274 = lax_cond(0.8e-1 < t60, -0.16e2 / 0.15e2 * (0.3e1 / 0.4e1 * jnp.pi + t133 * (-0.779335965 - 0.463292766 * (t237 * t61 + 0.1e1) * t230 - 0.148683344e1 * t231 + 0.81289152e1 * t247) / t252 / 0.16e2 - 0.75601874976749088562 * jnp.pi * t256 * (0.1e1 - t260)) / t133 / t61 * t252, -0.262841788e-1 - 0.7117647788e-1 * t61 + 0.8534541323e-1 * t63)
  t275 = t61 * t274
  t278 = 0.1e1 / t247
  t283 = t78 * t4 * t88
  t285 = 0.57786348 + t74 + t283 / 0.3e1
  t286 = t285 ** 2
  t291 = t285 * t61 * t237
  t297 = jnp.sqrt(t285)
  t299 = 0.1e1 / t297 / t286
  t321 = t78 ** 2
  t326 = t83 ** 2
  t343 = lax_cond(r0 / 0.2e1 <= p.dens_threshold, 0, -0.3e1 / 0.8e1 * t4 / t5 * t20 * t21 * (-0.8e1 / 0.9e1 * t228 - 0.4e1 / 0.9e1 * (-0.37170836 * t231 - 0.14853145700326428 - t233 - 0.77215461e-1 * t230 * t61 * t237 + 0.2e1 * t275) * t278 + t24 * t30 * t31 * (-0.148683344e1 * t286 - 0.104705593501958568e1 - 0.463292766 * t74 - 0.154430922 * t283 - 0.463292766 * t291 + 0.15e2 * t275) / t230 * t299 / 0.27e2 + 0.4e1 / 0.27e2 * t78 * p.cam_omega / t25 / t83 / t28 / r0 * (-0.30439865000326428 - t233 - 0.25738487e-1 * t283 - 0.77215461e-1 * t291 + 0.5e1 * t275) / t231 * t299 + 0.8e1 / 0.81e2 * t321 * p.cam_omega * t4 / t81 / t25 / t326 / t28 / t86 / r0 * (-0.51955731e-1 + t275) * t278 * t299))
  res = 0.2e1 * t343
  return res


def invoke(
  p: NamedTuple, rho: Callable, r: jnp.ndarray, mo: Optional[Callable] = None,
  deorbitalize: Optional[float] = None,
):
  args = rho_to_arguments(p, rho, r, mo, deorbitalize)
  code = pol if p.nspin == 2 else unpol
  dens = args[0] if p.nspin == 1 else sum(args[0])
  ret = lax.cond((dens < p.dens_threshold), lambda *_: 0.,
                 lambda *_: code(p, *args), None)
  return ret