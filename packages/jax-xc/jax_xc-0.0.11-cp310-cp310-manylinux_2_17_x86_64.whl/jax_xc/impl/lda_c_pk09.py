"""Generated from lda_c_pk09.mpl."""

import jax
import jax.lax as lax
import jax.numpy as jnp
from jax.numpy import array as array
from jax.numpy import int32 as int32
from jax.numpy import nan as nan
from typing import Callable, Optional
from .utils import *


def pol(p, r, s=(None, None, None), l=(None, None), tau=(None, None)):
  params = p.params
  (r0, r1), (s0, s1, s2), (l0, l1), (tau0, tau1) = r, s, l, tau
  t1 = r0 + r1
  t2 = r0 - r1
  t3 = t2 ** 2
  t4 = t1 ** 2
  t6 = t3 / t4
  t8 = jnp.cbrt(4)
  t9 = t8 ** 2
  t10 = jnp.cbrt(3)
  t11 = 0.1e1 / jnp.pi
  t12 = jnp.cbrt(t11)
  t14 = jnp.cbrt(t1)
  t15 = 0.1e1 / t14
  t17 = t10 * t12 * t9 * t15
  t18 = jnp.cbrt(t17)
  t19 = t9 * t18
  t21 = jnp.exp(-0.209325945580702 * t19)
  t22 = 4 ** (0.1e1 / 0.4e1)
  t23 = t22 ** 2
  t26 = t17 ** (0.1e1 / 0.4e1)
  t30 = jnp.exp(-0.25916439866088 * t19)
  t34 = 0.538074483500437 - 0.5565237477462975 * t21 * t23 * t22 * t26 + 0.6549274647407945 * t30 * t9 * t18
  t35 = t34 ** 2
  t37 = jnp.pi ** 2
  t38 = jnp.cbrt(t37)
  t39 = t38 * t37
  t41 = t14 * t1
  t42 = 0.1e1 / t1
  t43 = t2 * t42
  t44 = 0.1e1 + t43
  t45 = t44 <= p.zeta_threshold
  t46 = jnp.cbrt(p.zeta_threshold)
  t47 = jnp.cbrt(t44)
  t48 = lax_cond(t45, t46, t47)
  t49 = t48 ** 2
  t51 = 0.1e1 - t43
  t52 = t51 <= p.zeta_threshold
  t53 = jnp.cbrt(t51)
  t54 = lax_cond(t52, t46, t53)
  t55 = t54 ** 2
  t56 = t10 * t38
  t61 = t56 * t14 * t48 + t56 * t14 * t54
  t62 = t61 ** 2
  t66 = t35 * t10 * t39 * t41 * t49 * t55 / t62
  t68 = t10 ** 2
  t70 = t38 ** 2
  t72 = t14 ** 2
  t77 = t34 * t68 * t70 * t72 * t48 * t54 / t61
  t79 = 0.340311139373859078 * t66 + 0.452548339959390416e-1 * t77 + 0.531736155271654809e-2
  t83 = jnp.arctan(0.1187931309903801598e2 * t77 + 0.236958012866641818e1)
  t88 = 0.1e1 / t34
  t89 = t88 * t10
  t91 = 0.1e1 / t70
  t92 = 0.1e1 / t72
  t93 = t91 * t92
  t94 = 0.1e1 / t48
  t95 = 0.1e1 / t54
  t96 = t94 * t95
  t98 = t93 * t96 * t61
  t101 = jnp.log(t79)
  t109 = 0.2e1 * t77
  t110 = jnp.log(t109)
  t122 = t92 * t94 * t95 * t61
  t123 = t89 * t91 * t122
  t125 = 0.1e1 / t35
  t127 = 0.1e1 / t39
  t129 = 0.1e1 / t41
  t130 = 0.1e1 / t49
  t132 = 0.1e1 / t55
  t134 = t129 * t130 * t132 * t62
  t135 = t125 * t68 * t127 * t134
  t142 = t10 * t91
  t149 = jnp.log(0.4812726287291520984e1 * t66 + 0.64 * t77 + 0.751988482389300153e-1)
  t159 = jnp.log(t109 + 0.482257181994472723)
  t168 = jnp.log(0.6e1 * t66 + 0.821419393556370918 * t77 + 0.105323524476768857)
  t177 = jnp.arctan(0.160041105570901272 / (0.15625e1 * t77 + 0.32086695060795739))
  t187 = jnp.sqrt(0.3e1 * t66 + 0.505765839233979018 * t77 + 0.720485831127149779e-1)
  t190 = jnp.arctanh((0.268418671319107341 + 0.942121195869983724 * t77) / t187)
  t198 = jnp.log(0.9375e1 * t66 + 0.1246694626254477116e1 * t77 + 0.146484374999999999)
  t208 = 0.1e1 / t79 * (-t83 * (0.22155652738222968e1 * t66 + 0.2946275542389858 * t77 + 0.346182074034769e-1) * t89 * t98 / 0.6e1 - t101 * (0.114922710384051372e1 * t66 + 0.15282509383508946 * t77 + 0.1795667349750801e-1) * t89 * t98 / 0.6e1 + t110 * (0.22984542076810248e1 * t66 + 0.3056501876701794 * t77 + 0.3591334699501599e-1) * t89 * t98 / 0.6e1 - 0.10237773105191754 * t77 + 0.101508307543839117e1 + 0.14975624337724556833 * t123 + 0.61671487076709944167e-2 * t135) - 0.22079848381299059167e2 * t123 - 0.90004085699103157778 * t135 - 0.37610742193750634333e1 * t110 * t88 * t142 * t122 + 0.18805371096875317167e1 * t149 * t88 * t142 * t122 + 0.19489173774580151667e2 * t83 * t88 * t142 * t122 + 0.49373337174483548167e1 * t159 * t88 * t142 * t122 - 0.41150663529849592833e-1 * t89 * t93 * t96 * t61 * t168 + 0.18635258017632964667e2 * t177 * t88 * t142 * t122 - 0.22140749178833072667e1 * t190 * t88 * t142 * t122 - 0.24275161951943278333e1 * t198 * t88 * t142 * t122 - 0.11846959580306418694e1 * t187 * t125 * t68 * t127 * t134
  t211 = p.zeta_threshold ** 2
  t212 = t44 ** 2
  t213 = lax_cond(t45, t211, t212)
  t215 = jnp.exp(-0.42734869200542 * t19)
  t217 = t18 ** 2
  t221 = jnp.exp(-0.1173961225190475 * t19)
  t225 = 0.41081146652128 + 0.14983581422587875 * t215 * t8 * t217 + 0.1928080210487025e-1 * t221 * t9 * t18
  t226 = t225 ** 2
  t228 = t12 ** 2
  t231 = t68 * t228 * t8 * t92
  t233 = t11 * t42
  t238 = t10 * t12 * t11 * t9 * t129
  t254 = (-0.11369336978972719e3 + 0.60012553781967786e1 * t17 + 0.12335328239599176875e2 * t231 - 0.1786817791262844765e2 * t233 + 0.17701513906783214888 * t238 + 0.54944839533438375e-4 * t68 * t228 * t11 * t8 / t72 / t1) / (-0.1097426349321691e3 + 0.4066578236106060375e1 * t17 + 0.1360085828434770915e2 * t231 - 0.188655074281409925e2 * t233 + 0.1875 * t238)
  t255 = 0.118013146546319105e1 * t43
  t256 = 0.14269304149842164e1 * t6
  t260 = t3 * t2 / t4 / t1
  t261 = 0.58034406381224798 * t260
  t262 = t3 ** 2
  t263 = t4 ** 2
  t266 = 0.109912236729144e-1 * t262 / t263
  t268 = 0.209708505883490736e1 * t43
  t269 = 0.25218818358694818e1 * t6
  t270 = 0.1e1 * t260
  t275 = 0.128e1 * t254 * (-0.32481568604919886 + t255 - t256 + t261 - t266) / (-0.5778610319323943 + t268 - t269 + t270)
  t276 = p.zeta_threshold ** t275
  t277 = t44 ** t275
  t278 = lax_cond(t45, t276, t277)
  t279 = t51 ** t275
  t280 = lax_cond(t52, t276, t279)
  t281 = t278 + t280
  t282 = t281 ** 2
  t286 = t70 * t72
  t288 = t226 / t282 * t68 * t286 * t49
  t293 = t38 * t14
  t295 = t225 / t281 * t10 * t293 * t48
  t297 = 0.113437046457953026 * t288 + 0.452548339959390416e-1 * t295 + 0.531736155271654809e-2
  t301 = jnp.arctan(0.1187931309903801598e2 * t295 + 0.236958012866641818e1)
  t306 = 0.1e1 / t225
  t307 = t306 * t281
  t309 = 0.1e1 / t38
  t310 = t68 * t309
  t312 = t310 * t15 * t94
  t315 = jnp.log(t297)
  t323 = 0.2e1 * t295
  t324 = jnp.log(t323)
  t333 = t307 * t68
  t334 = t309 * t15
  t336 = t333 * t334 * t94
  t338 = 0.1e1 / t226
  t342 = t338 * t282 * t10 * t93 * t130
  t355 = jnp.log(0.1604242095763840328e1 * t288 + 0.64 * t295 + 0.751988482389300153e-1)
  t365 = jnp.log(t323 + 0.482257181994472723)
  t373 = jnp.log(0.2e1 * t288 + 0.821419393556370918 * t295 + 0.105323524476768857)
  t382 = jnp.arctan(0.160041105570901272 / (0.15625e1 * t295 + 0.32086695060795739))
  t392 = jnp.sqrt(0.1e1 * t288 + 0.505765839233979018 * t295 + 0.720485831127149779e-1)
  t395 = jnp.arctanh((0.268418671319107341 + 0.942121195869983724 * t295) / t392)
  t403 = jnp.log(0.3125e1 * t288 + 0.1246694626254477116e1 * t295 + 0.146484374999999999)
  t414 = 0.1e1 / t297 * (-t301 * (0.7385217579407656 * t288 + 0.2946275542389858 * t295 + 0.346182074034769e-1) * t307 * t312 / 0.6e1 - t315 * (0.38307570128017124 * t288 + 0.15282509383508946 * t295 + 0.1795667349750801e-1) * t307 * t312 / 0.6e1 + t324 * (0.7661514025603416 * t288 + 0.3056501876701794 * t295 + 0.3591334699501599e-1) * t307 * t312 / 0.6e1 - 0.10237773105191754 * t295 + 0.101508307543839117e1 + 0.14975624337724556833 * t336 + 0.1850144612301298325e-1 * t342) - 0.22079848381299059167e2 * t336 - 0.27001225709730947333e1 * t342 - 0.37610742193750634333e1 * t324 * t306 * t281 * t312 + 0.18805371096875317167e1 * t355 * t306 * t281 * t312 + 0.19489173774580151667e2 * t301 * t306 * t281 * t312 + 0.49373337174483548167e1 * t365 * t306 * t281 * t312 - 0.41150663529849592833e-1 * t333 * t334 * t94 * t373 + 0.18635258017632964667e2 * t382 * t306 * t281 * t312 - 0.22140749178833072667e1 * t395 * t306 * t281 * t312 - 0.24275161951943278333e1 * t403 * t306 * t281 * t312 - 0.35540878740919256083e1 * t392 * t338 * t282 * t142 * t92 * t130
  t417 = t51 ** 2
  t418 = lax_cond(t52, t211, t417)
  t424 = 0.128e1 * t254 * (-0.32481568604919886 - t255 - t256 - t261 - t266) / (-0.5778610319323943 - t268 - t269 - t270)
  t425 = p.zeta_threshold ** t424
  t426 = t51 ** t424
  t427 = lax_cond(t52, t425, t426)
  t428 = t44 ** t424
  t429 = lax_cond(t45, t425, t428)
  t430 = t427 + t429
  t431 = t430 ** 2
  t436 = t226 / t431 * t68 * t286 * t55
  t442 = t225 / t430 * t10 * t293 * t54
  t444 = 0.113437046457953026 * t436 + 0.452548339959390416e-1 * t442 + 0.531736155271654809e-2
  t448 = jnp.arctan(0.1187931309903801598e2 * t442 + 0.236958012866641818e1)
  t453 = t306 * t430
  t456 = t310 * t15 * t95
  t459 = jnp.log(t444)
  t467 = 0.2e1 * t442
  t468 = jnp.log(t467)
  t477 = t453 * t68
  t479 = t477 * t334 * t95
  t484 = t338 * t431 * t10 * t93 * t132
  t497 = jnp.log(0.1604242095763840328e1 * t436 + 0.64 * t442 + 0.751988482389300153e-1)
  t507 = jnp.log(t467 + 0.482257181994472723)
  t515 = jnp.log(0.2e1 * t436 + 0.821419393556370918 * t442 + 0.105323524476768857)
  t524 = jnp.arctan(0.160041105570901272 / (0.15625e1 * t442 + 0.32086695060795739))
  t534 = jnp.sqrt(0.1e1 * t436 + 0.505765839233979018 * t442 + 0.720485831127149779e-1)
  t537 = jnp.arctanh((0.268418671319107341 + 0.942121195869983724 * t442) / t534)
  t545 = jnp.log(0.3125e1 * t436 + 0.1246694626254477116e1 * t442 + 0.146484374999999999)
  t556 = 0.1e1 / t444 * (-t448 * (0.7385217579407656 * t436 + 0.2946275542389858 * t442 + 0.346182074034769e-1) * t453 * t456 / 0.6e1 - t459 * (0.38307570128017124 * t436 + 0.15282509383508946 * t442 + 0.1795667349750801e-1) * t453 * t456 / 0.6e1 + t468 * (0.7661514025603416 * t436 + 0.3056501876701794 * t442 + 0.3591334699501599e-1) * t453 * t456 / 0.6e1 - 0.10237773105191754 * t442 + 0.101508307543839117e1 + 0.14975624337724556833 * t479 + 0.1850144612301298325e-1 * t484) - 0.22079848381299059167e2 * t479 - 0.27001225709730947333e1 * t484 - 0.37610742193750634333e1 * t468 * t306 * t430 * t456 + 0.18805371096875317167e1 * t497 * t306 * t430 * t456 + 0.19489173774580151667e2 * t448 * t306 * t430 * t456 + 0.49373337174483548167e1 * t507 * t306 * t430 * t456 - 0.41150663529849592833e-1 * t477 * t334 * t95 * t515 + 0.18635258017632964667e2 * t524 * t306 * t430 * t456 - 0.22140749178833072667e1 * t537 * t306 * t430 * t456 - 0.24275161951943278333e1 * t545 * t306 * t430 * t456 - 0.35540878740919256083e1 * t534 * t338 * t431 * t142 * t92 * t132
  res = t1 * ((0.1e1 - t6) * t208 / 0.4e1 + t213 * t414 / 0.8e1 + t418 * t556 / 0.8e1)
  return res


def unpol(p, r, s=None, l=None, tau=None):
  params = p.params
  r0, s0, l0, tau0 = r, s, l, tau
  t1 = jnp.cbrt(4)
  t2 = t1 ** 2
  t3 = jnp.cbrt(3)
  t4 = 0.1e1 / jnp.pi
  t5 = jnp.cbrt(t4)
  t7 = jnp.cbrt(r0)
  t8 = 0.1e1 / t7
  t10 = t3 * t5 * t2 * t8
  t11 = jnp.cbrt(t10)
  t12 = t2 * t11
  t14 = jnp.exp(-0.209325945580702 * t12)
  t15 = 4 ** (0.1e1 / 0.4e1)
  t16 = t15 ** 2
  t19 = t10 ** (0.1e1 / 0.4e1)
  t23 = jnp.exp(-0.25916439866088 * t12)
  t27 = 0.538074483500437 - 0.5565237477462975 * t14 * t16 * t15 * t19 + 0.6549274647407945 * t23 * t2 * t11
  t28 = t27 ** 2
  t29 = t3 ** 2
  t31 = jnp.pi ** 2
  t32 = jnp.cbrt(t31)
  t33 = t32 ** 2
  t34 = t7 ** 2
  t36 = 0.1e1 <= p.zeta_threshold
  t37 = jnp.cbrt(p.zeta_threshold)
  t38 = lax_cond(t36, t37, 1)
  t39 = t38 ** 2
  t40 = t33 * t34 * t39
  t41 = t28 * t29 * t40
  t45 = t32 * t7 * t38
  t46 = t27 * t3 * t45
  t48 = 0.283592616144882565e-1 * t41 + 0.226274169979695208e-1 * t46 + 0.531736155271654809e-2
  t52 = jnp.arctan(0.593965654951900799e1 * t46 + 0.236958012866641818e1)
  t57 = 0.1e1 / t27
  t59 = 0.1e1 / t32
  t61 = 0.1e1 / t38
  t62 = t8 * t61
  t63 = t29 * t59 * t62
  t66 = jnp.log(t48)
  t74 = jnp.log(t46)
  t83 = t57 * t29
  t84 = t59 * t8
  t85 = t84 * t61
  t86 = t83 * t85
  t88 = 0.1e1 / t28
  t90 = 0.1e1 / t33
  t91 = 0.1e1 / t34
  t93 = 0.1e1 / t39
  t94 = t90 * t91 * t93
  t95 = t88 * t3 * t94
  t109 = jnp.log(0.401060523940960082 * t41 + 0.32 * t46 + 0.751988482389300153e-1)
  t119 = jnp.log(t46 + 0.482257181994472723)
  t128 = jnp.log(0.5 * t41 + 0.410709696778185459 * t46 + 0.105323524476768857)
  t136 = jnp.arctan(0.160041105570901272 / (0.78125 * t46 + 0.32086695060795739))
  t146 = jnp.sqrt(0.25 * t41 + 0.252882919616989509 * t46 + 0.720485831127149779e-1)
  t149 = jnp.arctanh((0.268418671319107341 + 0.471060597934991862 * t46) / t146)
  t157 = jnp.log(0.78125 * t41 + 0.623347313127238558 * t46 + 0.146484374999999999)
  t166 = p.zeta_threshold ** 2
  t167 = lax_cond(t36, t166, 1)
  t169 = jnp.exp(-0.42734869200542 * t12)
  t171 = t11 ** 2
  t175 = jnp.exp(-0.1173961225190475 * t12)
  t179 = 0.41081146652128 + 0.14983581422587875 * t169 * t1 * t171 + 0.1928080210487025e-1 * t175 * t2 * t11
  t180 = t179 ** 2
  t182 = t5 ** 2
  t185 = t29 * t182 * t1 * t91
  t188 = t4 / r0
  t195 = t3 * t5 * t4 * t2 / t7 / r0
  t213 = p.zeta_threshold ** (0.71948800000000005309 * (-0.11369336978972719e3 + 0.60012553781967786e1 * t10 + 0.12335328239599176875e2 * t185 - 0.1786817791262844765e2 * t188 + 0.17701513906783214888 * t195 + 0.54944839533438375e-4 * t29 * t182 * t4 * t1 / t34 / r0) / (-0.1097426349321691e3 + 0.4066578236106060375e1 * t10 + 0.1360085828434770915e2 * t185 - 0.188655074281409925e2 * t188 + 0.1875 * t195))
  t214 = lax_cond(t36, t213, 1)
  t215 = t214 ** 2
  t219 = t180 / t215 * t29 * t40
  t224 = t179 / t214 * t3 * t45
  t226 = 0.283592616144882565e-1 * t219 + 0.226274169979695208e-1 * t224 + 0.531736155271654809e-2
  t230 = jnp.arctan(0.593965654951900799e1 * t224 + 0.236958012866641818e1)
  t235 = 0.1e1 / t179
  t236 = t235 * t214
  t240 = jnp.log(t226)
  t248 = jnp.log(t224)
  t257 = t236 * t29
  t258 = t257 * t85
  t260 = 0.1e1 / t180
  t263 = t260 * t215 * t3 * t94
  t276 = jnp.log(0.401060523940960082 * t219 + 0.32 * t224 + 0.751988482389300153e-1)
  t286 = jnp.log(t224 + 0.482257181994472723)
  t294 = jnp.log(0.5 * t219 + 0.410709696778185459 * t224 + 0.105323524476768857)
  t303 = jnp.arctan(0.160041105570901272 / (0.78125 * t224 + 0.32086695060795739))
  t313 = jnp.sqrt(0.25 * t219 + 0.252882919616989509 * t224 + 0.720485831127149779e-1)
  t316 = jnp.arctanh((0.268418671319107341 + 0.471060597934991862 * t224) / t313)
  t324 = jnp.log(0.78125 * t219 + 0.623347313127238558 * t224 + 0.146484374999999999)
  t336 = 0.1e1 / t226 * (-t230 * (0.1846304394851914 * t219 + 0.1473137771194929 * t224 + 0.346182074034769e-1) * t236 * t63 / 0.3e1 - t240 * (0.9576892532004281e-1 * t219 + 0.7641254691754473e-1 * t224 + 0.1795667349750801e-1) * t236 * t63 / 0.3e1 + t248 * (0.1915378506400854 * t219 + 0.1528250938350897 * t224 + 0.3591334699501599e-1) * t236 * t63 / 0.3e1 - 0.5118886552595877e-1 * t224 + 0.101508307543839117e1 + 0.29951248675449113667 * t258 + 0.74005784492051933e-1 * t263) - 0.44159696762598118333e2 * t258 - 0.10800490283892378933e2 * t263 - 0.75221484387501268667e1 * t248 * t235 * t214 * t63 + 0.37610742193750634333e1 * t276 * t235 * t214 * t63 + 0.38978347549160303333e2 * t230 * t235 * t214 * t63 + 0.98746674348967096333e1 * t286 * t235 * t214 * t63 - 0.82301327059699185667e-1 * t257 * t84 * t61 * t294 + 0.37270516035265929333e2 * t303 * t235 * t214 * t63 - 0.44281498357666145333e1 * t316 * t235 * t214 * t63 - 0.48550323903886556667e1 * t324 * t235 * t214 * t63 - 0.14216351496367702433e2 * t313 * t260 * t215 * t3 * t90 * t91 * t93
  t339 = 0.1e1 / t48 * (-t52 * (0.1846304394851914 * t41 + 0.1473137771194929 * t46 + 0.346182074034769e-1) * t57 * t63 / 0.3e1 - t66 * (0.9576892532004281e-1 * t41 + 0.7641254691754473e-1 * t46 + 0.1795667349750801e-1) * t57 * t63 / 0.3e1 + t74 * (0.1915378506400854 * t41 + 0.1528250938350897 * t46 + 0.3591334699501599e-1) * t57 * t63 / 0.3e1 - 0.5118886552595877e-1 * t46 + 0.101508307543839117e1 + 0.29951248675449113667 * t86 + 0.74005784492051933e-1 * t95) / 0.4e1 - 0.11039924190649529583e2 * t86 - 0.27001225709730947332e1 * t95 - 0.18805371096875317167e1 * t74 * t57 * t29 * t85 + 0.94026855484376585832 * t109 * t57 * t29 * t85 + 0.97445868872900758332e1 * t52 * t57 * t29 * t85 + 0.24686668587241774083e1 * t119 * t57 * t29 * t85 - 0.20575331764924796417e-1 * t83 * t59 * t62 * t128 + 0.93176290088164823332e1 * t136 * t57 * t29 * t85 - 0.11070374589416536333e1 * t149 * t57 * t29 * t85 - 0.12137580975971639167e1 * t157 * t57 * t29 * t85 - 0.35540878740919256082e1 * t146 * t88 * t3 * t94 + t167 * t336 / 0.4e1
  res = r0 * t339
  return res


def invoke(
  p: NamedTuple, rho: Callable, r: jnp.ndarray, mo: Optional[Callable] = None,
  deorbitalize: Optional[float] = None,
):
  args = rho_to_arguments(p, rho, r, mo, deorbitalize)
  code = pol if p.nspin == 2 else unpol
  dens = args[0] if p.nspin == 1 else sum(args[0])
  ret = lax.cond((dens < p.dens_threshold), lambda *_: 0.,
                 lambda *_: code(p, *args), None)
  return ret