"""Generated from mgga_x_vcml.mpl."""

import jax
import jax.lax as lax
import jax.numpy as jnp
from jax.numpy import array as array
from jax.numpy import int32 as int32
from jax.numpy import nan as nan
from typing import Callable, Optional
from .utils import *


def pol(p, r, s=(None, None, None), l=(None, None), tau=(None, None)):
  params = p.params
  (r0, r1), (s0, s1, s2), (l0, l1), (tau0, tau1) = r, s, l, tau
  t2 = jnp.cbrt(3)
  t3 = jnp.cbrt(jnp.pi)
  t5 = t2 / t3
  t6 = r0 + r1
  t7 = 0.1e1 / t6
  t10 = 0.2e1 * r0 * t7 <= p.zeta_threshold
  t11 = p.zeta_threshold - 0.1e1
  t14 = 0.2e1 * r1 * t7 <= p.zeta_threshold
  t15 = -t11
  t17 = (r0 - r1) * t7
  t18 = lax_cond(t14, t15, t17)
  t19 = lax_cond(t10, t11, t18)
  t20 = t19 + 0.1e1
  t22 = jnp.cbrt(p.zeta_threshold)
  t23 = t22 * p.zeta_threshold
  t24 = jnp.cbrt(t20)
  t26 = lax_cond(t20 <= p.zeta_threshold, t23, t24 * t20)
  t27 = jnp.cbrt(t6)
  t29 = jnp.cbrt(6)
  t30 = jnp.pi ** 2
  t31 = jnp.cbrt(t30)
  t32 = t31 ** 2
  t33 = 0.1e1 / t32
  t34 = t29 * t33
  t35 = r0 ** 2
  t36 = jnp.cbrt(r0)
  t37 = t36 ** 2
  t40 = s0 / t37 / t35
  t46 = t34 * t40 / (0.65124e1 + t34 * t40 / 0.24e2)
  t48 = t46 / 0.12e2 - 0.1e1
  t49 = t48 ** 2
  t50 = t49 ** 2
  t53 = t50 * t49
  t62 = 0.5e1 / 0.9e1 * (tau0 / t37 / r0 - t40 / 0.8e1) * t29 * t33
  t64 = 0.1e5 < t62
  t65 = lax_cond(t64, t62, 0.1e5)
  t66 = t65 ** 2
  t72 = t66 ** 2
  t76 = lax_cond(t64, 0.1e5, t62)
  t77 = t76 ** 2
  t78 = 0.1e1 - t77
  t79 = t78 ** 2
  t81 = t77 * t76
  t88 = lax_cond(0.1e5 <= t62, -0.1e1 / 0.4e1 + 0.3e1 / 0.4e1 / t66 + 0.1e1 / t66 / t65 / 0.16e2 - 0.3e1 / 0.4e1 / t72, t79 * t78 / (0.1e1 + t81 * (0.1e1 + 0.4e1 * t81)))
  t89 = t88 ** 2
  t90 = t89 ** 2
  t91 = t90 * t89
  t96 = t90 * t88
  t98 = t89 * t88
  t100 = t90 * t98
  t102 = t50 * t48
  t104 = t49 * t48
  t106 = t50 * t104
  t109 = -0.1e1 / 0.2e1 + 0.3e1 / 0.2e1 * t49
  t111 = -0.1e1 / 0.2e1 + 0.3e1 / 0.2e1 * t89
  t119 = -0.5e1 / 0.16e2 + 0.231e3 / 0.16e2 * t91 - 0.315e3 / 0.16e2 * t90 + 0.105e3 / 0.16e2 * t89
  t122 = -0.57084476241712602813e-1 * t50 - 0.38230940935406268094 * t49 + 0.73000610738035552688e-1 * t53 + 0.44142553981357691475e-2 * t91 - 0.12287293765057329462e-1 * t90 + 0.63559222793315408625e-2 * t89 + 0.19451907596748125344 * t88 + 0.52279783829707640062e-1 * t96 - 0.5923137049970073438e-2 * t98 - 0.54303814303104071062e-1 * t100 + 0.50197247070683313037e-1 * t102 - 0.8047507298914579188e-2 * t104 - 0.40204197854033482912e-1 * t106 - 0.835331263170036e-3 * t109 * t111 - 0.13135604251829597e-1 * t109 * t88 + 0.5970286163074767e-3 * t48 * t119
  t127 = 0.429e3 / 0.16e2 * t100 - 0.693e3 / 0.16e2 * t96 + 0.315e3 / 0.16e2 * t98 - 0.35e2 / 0.16e2 * t88
  t133 = 0.63e2 / 0.8e1 * t96 - 0.35e2 / 0.4e1 * t98 + 0.15e2 / 0.8e1 * t88
  t138 = 0.3e1 / 0.8e1 + 0.35e2 / 0.8e1 * t90 - 0.15e2 / 0.4e1 * t89
  t145 = 0.5e1 / 0.2e1 * t98 - 0.3e1 / 0.2e1 * t88
  t152 = 0.5e1 / 0.2e1 * t104 - t46 / 0.8e1 + 0.3e1 / 0.2e1
  t173 = 0.23160016166370034e-2 * t48 * t127 + 0.16437722411542371e-2 * t48 * t133 + 0.50995906979556666e-2 * t48 * t138 + 0.12341314639045392e-2 * t48 * t111 + 0.24977311122498513e-2 * t48 * t145 + 0.12131628073942294 * t48 * t88 - 0.689695394243961e-3 * t152 * t119 + 0.4308565933608885e-3 * t152 * t127 - 0.19375881298946268e-3 * t152 * t133 - 0.4704436332280876e-2 * t152 * t138 + 0.27822064319562786e-2 * t152 * t145 - 0.7823588139015819e-4 * t152 * t111 - 0.16823429546012295e-1 * t152 * t88 + 0.18939021743243079e-3 * t109 * t127 - 0.9048853909642742e-3 * t109 * t119 + 0.8482767148525194e-4 * t109 * t133
  t182 = 0.63e2 / 0.8e1 * t102 - 0.35e2 / 0.4e1 * t104 + 0.5e1 / 0.32e2 * t46 - 0.15e2 / 0.8e1
  t193 = 0.3e1 / 0.8e1 + 0.35e2 / 0.8e1 * t50 - 0.15e2 / 0.4e1 * t49
  t211 = -0.5e1 / 0.16e2 + 0.231e3 / 0.16e2 * t53 - 0.315e3 / 0.16e2 * t50 + 0.105e3 / 0.16e2 * t49
  t218 = -0.8670535705479461e-3 * t109 * t145 + 0.3180493235941731e-3 * t109 * t138 - 0.10249162124576494e-2 * t182 * t138 - 0.3656012084198544e-4 * t182 * t145 + 0.5061925051098745e-2 * t182 * t111 - 0.16609256494831233e-2 * t182 * t88 - 0.1792697304428732e-4 * t193 * t127 + 0.1331797359718674e-3 * t193 * t119 - 0.7261106354828029e-4 * t193 * t133 - 0.2571281595426713e-3 * t193 * t145 + 0.9891355730978566e-3 * t193 * t138 - 0.14878680171769923e-2 * t193 * t111 - 0.21100890252897446e-2 * t193 * t88 - 0.31296536914037784e-2 * t211 * t133 - 0.9195715678311926e-2 * t211 * t145 + 0.8367073496483024e-3 * t211 * t138
  t233 = 0.429e3 / 0.16e2 * t106 - 0.693e3 / 0.16e2 * t102 + 0.315e3 / 0.16e2 * t104 - 0.35e2 / 0.192e3 * t46 + 0.35e2 / 0.16e2
  t253 = 0.13669196781387441795e1 - 0.7631605623646023e-2 * t211 * t111 + 0.28206838819829017e-2 * t211 * t88 - 0.5194058669188706e-3 * t182 * t127 - 0.38541498256550073e-2 * t182 * t133 - 0.7555456486598222e-2 * t182 * t119 - 0.19095139973664826e-3 * t233 * t119 + 0.38758929812102785e-2 * t233 * t133 - 0.31389079758955066e-3 * t233 * t138 + 0.10726279571787276e-1 * t233 * t145 + 0.17309630990864668e-3 * t233 * t88 - 0.1006770315965861e-1 * t233 * t111 - 0.18156466410673526e-3 * t211 * t127 + 0.1864317026752979e-2 * t211 * t119 - 0.29476504977320184e-3 * t233 * t127 - 0.1114587791227991087e-1 * t46
  t259 = lax_cond(r0 <= p.dens_threshold, 0, -0.3e1 / 0.8e1 * t5 * t26 * t27 * (t122 + t173 + t218 + t253))
  t261 = lax_cond(t10, t15, -t17)
  t262 = lax_cond(t14, t11, t261)
  t263 = t262 + 0.1e1
  t265 = jnp.cbrt(t263)
  t267 = lax_cond(t263 <= p.zeta_threshold, t23, t265 * t263)
  t269 = r1 ** 2
  t270 = jnp.cbrt(r1)
  t271 = t270 ** 2
  t274 = s2 / t271 / t269
  t280 = t34 * t274 / (0.65124e1 + t34 * t274 / 0.24e2)
  t282 = t280 / 0.12e2 - 0.1e1
  t283 = t282 ** 2
  t284 = t283 ** 2
  t287 = t284 * t283
  t296 = 0.5e1 / 0.9e1 * (tau1 / t271 / r1 - t274 / 0.8e1) * t29 * t33
  t298 = 0.1e5 < t296
  t299 = lax_cond(t298, t296, 0.1e5)
  t300 = t299 ** 2
  t306 = t300 ** 2
  t310 = lax_cond(t298, 0.1e5, t296)
  t311 = t310 ** 2
  t312 = 0.1e1 - t311
  t313 = t312 ** 2
  t315 = t311 * t310
  t322 = lax_cond(0.1e5 <= t296, -0.1e1 / 0.4e1 + 0.3e1 / 0.4e1 / t300 + 0.1e1 / t300 / t299 / 0.16e2 - 0.3e1 / 0.4e1 / t306, t313 * t312 / (0.1e1 + t315 * (0.1e1 + 0.4e1 * t315)))
  t323 = t322 ** 2
  t324 = t323 * t322
  t325 = t323 ** 2
  t326 = t325 * t324
  t328 = t325 * t322
  t334 = t325 * t323
  t336 = t284 * t282
  t338 = t283 * t282
  t340 = t284 * t338
  t344 = -0.1e1 / 0.2e1 + 0.3e1 / 0.2e1 * t283
  t347 = 0.3e1 / 0.8e1 + 0.35e2 / 0.8e1 * t325 - 0.15e2 / 0.4e1 * t323
  t351 = -0.1e1 / 0.2e1 + 0.3e1 / 0.2e1 * t323
  t354 = -0.57084476241712602813e-1 * t284 - 0.38230940935406268094 * t283 + 0.73000610738035552688e-1 * t287 - 0.54303814303104071062e-1 * t326 + 0.52279783829707640062e-1 * t328 - 0.5923137049970073438e-2 * t324 + 0.19451907596748125344 * t322 - 0.12287293765057329462e-1 * t325 + 0.63559222793315408625e-2 * t323 + 0.44142553981357691475e-2 * t334 + 0.50197247070683313037e-1 * t336 - 0.8047507298914579188e-2 * t338 - 0.40204197854033482912e-1 * t340 - 0.1114587791227991087e-1 * t280 + 0.3180493235941731e-3 * t344 * t347 - 0.835331263170036e-3 * t344 * t351
  t357 = 0.5e1 / 0.2e1 * t324 - 0.3e1 / 0.2e1 * t322
  t366 = 0.429e3 / 0.16e2 * t326 - 0.693e3 / 0.16e2 * t328 + 0.315e3 / 0.16e2 * t324 - 0.35e2 / 0.16e2 * t322
  t372 = 0.63e2 / 0.8e1 * t328 - 0.35e2 / 0.4e1 * t324 + 0.15e2 / 0.8e1 * t322
  t378 = -0.5e1 / 0.16e2 + 0.231e3 / 0.16e2 * t334 - 0.315e3 / 0.16e2 * t325 + 0.105e3 / 0.16e2 * t323
  t391 = 0.3e1 / 0.8e1 + 0.35e2 / 0.8e1 * t284 - 0.15e2 / 0.4e1 * t283
  t400 = 0.5e1 / 0.2e1 * t338 - t280 / 0.8e1 + 0.3e1 / 0.2e1
  t409 = -0.8670535705479461e-3 * t344 * t357 - 0.13135604251829597e-1 * t344 * t322 + 0.23160016166370034e-2 * t282 * t366 + 0.16437722411542371e-2 * t282 * t372 + 0.5970286163074767e-3 * t282 * t378 + 0.50995906979556666e-2 * t282 * t347 + 0.24977311122498513e-2 * t282 * t357 + 0.12131628073942294 * t282 * t322 + 0.12341314639045392e-2 * t282 * t351 - 0.14878680171769923e-2 * t391 * t351 - 0.2571281595426713e-3 * t391 * t357 - 0.21100890252897446e-2 * t391 * t322 + 0.4308565933608885e-3 * t400 * t366 - 0.19375881298946268e-3 * t400 * t372 - 0.689695394243961e-3 * t400 * t378 - 0.4704436332280876e-2 * t400 * t347
  t426 = 0.63e2 / 0.8e1 * t336 - 0.35e2 / 0.4e1 * t338 + 0.5e1 / 0.32e2 * t280 - 0.15e2 / 0.8e1
  t448 = -0.5e1 / 0.16e2 + 0.231e3 / 0.16e2 * t287 - 0.315e3 / 0.16e2 * t284 + 0.105e3 / 0.16e2 * t283
  t451 = 0.27822064319562786e-2 * t400 * t357 - 0.7823588139015819e-4 * t400 * t351 - 0.16823429546012295e-1 * t400 * t322 + 0.18939021743243079e-3 * t344 * t366 - 0.9048853909642742e-3 * t344 * t378 + 0.8482767148525194e-4 * t344 * t372 - 0.10249162124576494e-2 * t426 * t347 - 0.38541498256550073e-2 * t426 * t372 - 0.3656012084198544e-4 * t426 * t357 + 0.5061925051098745e-2 * t426 * t351 - 0.16609256494831233e-2 * t426 * t322 - 0.1792697304428732e-4 * t391 * t366 + 0.1331797359718674e-3 * t391 * t378 - 0.7261106354828029e-4 * t391 * t372 + 0.9891355730978566e-3 * t391 * t347 - 0.18156466410673526e-3 * t448 * t366
  t472 = 0.429e3 / 0.16e2 * t340 - 0.693e3 / 0.16e2 * t336 + 0.315e3 / 0.16e2 * t338 - 0.35e2 / 0.192e3 * t280 + 0.35e2 / 0.16e2
  t487 = 0.13669196781387441795e1 + 0.1864317026752979e-2 * t448 * t378 - 0.31296536914037784e-2 * t448 * t372 + 0.8367073496483024e-3 * t448 * t347 - 0.7631605623646023e-2 * t448 * t351 - 0.9195715678311926e-2 * t448 * t357 + 0.28206838819829017e-2 * t448 * t322 - 0.5194058669188706e-3 * t426 * t366 - 0.7555456486598222e-2 * t426 * t378 - 0.19095139973664826e-3 * t472 * t378 - 0.29476504977320184e-3 * t472 * t366 + 0.38758929812102785e-2 * t472 * t372 - 0.31389079758955066e-3 * t472 * t347 + 0.10726279571787276e-1 * t472 * t357 - 0.1006770315965861e-1 * t472 * t351 + 0.17309630990864668e-3 * t472 * t322
  t493 = lax_cond(r1 <= p.dens_threshold, 0, -0.3e1 / 0.8e1 * t5 * t267 * t27 * (t354 + t409 + t451 + t487))
  res = t259 + t493
  return res


def unpol(p, r, s=None, l=None, tau=None):
  params = p.params
  r0, s0, l0, tau0 = r, s, l, tau
  t3 = jnp.cbrt(3)
  t4 = jnp.cbrt(jnp.pi)
  t7 = 0.1e1 <= p.zeta_threshold
  t8 = p.zeta_threshold - 0.1e1
  t10 = lax_cond(t7, -t8, 0)
  t11 = lax_cond(t7, t8, t10)
  t12 = t11 + 0.1e1
  t14 = jnp.cbrt(p.zeta_threshold)
  t16 = jnp.cbrt(t12)
  t18 = lax_cond(t12 <= p.zeta_threshold, t14 * p.zeta_threshold, t16 * t12)
  t19 = jnp.cbrt(r0)
  t21 = jnp.cbrt(6)
  t22 = jnp.pi ** 2
  t23 = jnp.cbrt(t22)
  t24 = t23 ** 2
  t25 = 0.1e1 / t24
  t26 = t21 * t25
  t28 = jnp.cbrt(2)
  t29 = t28 ** 2
  t30 = r0 ** 2
  t31 = t19 ** 2
  t33 = 0.1e1 / t31 / t30
  t36 = s0 * t29 * t33
  t42 = t26 * s0 * t29 * t33 / (0.65124e1 + t26 * t36 / 0.24e2)
  t44 = t42 / 0.12e2 - 0.1e1
  t45 = t44 ** 2
  t46 = t45 ** 2
  t49 = t46 * t45
  t59 = 0.5e1 / 0.9e1 * (tau0 * t29 / t31 / r0 - t36 / 0.8e1) * t21 * t25
  t61 = 0.1e5 < t59
  t62 = lax_cond(t61, t59, 0.1e5)
  t63 = t62 ** 2
  t69 = t63 ** 2
  t73 = lax_cond(t61, 0.1e5, t59)
  t74 = t73 ** 2
  t75 = 0.1e1 - t74
  t76 = t75 ** 2
  t78 = t74 * t73
  t85 = lax_cond(0.1e5 <= t59, 0.3e1 / 0.4e1 / t63 + 0.1e1 / t63 / t62 / 0.16e2 - 0.3e1 / 0.4e1 / t69 - 0.1e1 / 0.4e1, t76 * t75 / (0.1e1 + t78 * (0.1e1 + 0.4e1 * t78)))
  t86 = t85 ** 2
  t87 = t86 * t85
  t88 = t86 ** 2
  t89 = t88 * t87
  t91 = t88 * t85
  t97 = t88 * t86
  t99 = t45 * t44
  t101 = t46 * t44
  t103 = t46 * t99
  t107 = 0.5e1 / 0.2e1 * t87 - 0.3e1 / 0.2e1 * t85
  t112 = 0.3e1 / 0.8e1 + 0.35e2 / 0.8e1 * t88 - 0.15e2 / 0.4e1 * t86
  t118 = 0.63e2 / 0.8e1 * t91 - 0.35e2 / 0.4e1 * t87 + 0.15e2 / 0.8e1 * t85
  t121 = -0.57084476241712602813e-1 * t46 - 0.38230940935406268094 * t45 + 0.73000610738035552688e-1 * t49 - 0.54303814303104071062e-1 * t89 + 0.52279783829707640062e-1 * t91 - 0.5923137049970073438e-2 * t87 + 0.19451907596748125344 * t85 - 0.12287293765057329462e-1 * t88 + 0.63559222793315408625e-2 * t86 + 0.44142553981357691475e-2 * t97 - 0.8047507298914579188e-2 * t99 + 0.50197247070683313037e-1 * t101 - 0.40204197854033482912e-1 * t103 + 0.24977311122498513e-2 * t44 * t107 + 0.50995906979556666e-2 * t44 * t112 + 0.16437722411542371e-2 * t44 * t118
  t126 = 0.429e3 / 0.16e2 * t89 - 0.693e3 / 0.16e2 * t91 + 0.315e3 / 0.16e2 * t87 - 0.35e2 / 0.16e2 * t85
  t130 = -0.1e1 / 0.2e1 + 0.3e1 / 0.2e1 * t45
  t134 = -0.1e1 / 0.2e1 + 0.3e1 / 0.2e1 * t86
  t146 = -0.5e1 / 0.16e2 + 0.231e3 / 0.16e2 * t97 - 0.315e3 / 0.16e2 * t88 + 0.105e3 / 0.16e2 * t86
  t153 = 0.5e1 / 0.2e1 * t99 - t42 / 0.8e1 + 0.3e1 / 0.2e1
  t168 = 0.3e1 / 0.8e1 + 0.35e2 / 0.8e1 * t46 - 0.15e2 / 0.4e1 * t45
  t173 = 0.23160016166370034e-2 * t44 * t126 - 0.13135604251829597e-1 * t130 * t85 - 0.835331263170036e-3 * t130 * t134 - 0.8670535705479461e-3 * t130 * t107 + 0.3180493235941731e-3 * t130 * t112 + 0.8482767148525194e-4 * t130 * t118 - 0.9048853909642742e-3 * t130 * t146 + 0.18939021743243079e-3 * t130 * t126 - 0.16823429546012295e-1 * t153 * t85 - 0.7823588139015819e-4 * t153 * t134 + 0.27822064319562786e-2 * t153 * t107 - 0.4704436332280876e-2 * t153 * t112 + 0.12131628073942294 * t44 * t85 + 0.12341314639045392e-2 * t44 * t134 - 0.1792697304428732e-4 * t168 * t126 + 0.1331797359718674e-3 * t168 * t146
  t196 = -0.5e1 / 0.16e2 + 0.231e3 / 0.16e2 * t49 - 0.315e3 / 0.16e2 * t46 + 0.105e3 / 0.16e2 * t45
  t204 = 0.63e2 / 0.8e1 * t101 - 0.35e2 / 0.4e1 * t99 + 0.5e1 / 0.32e2 * t42 - 0.15e2 / 0.8e1
  t215 = -0.7261106354828029e-4 * t168 * t118 - 0.2571281595426713e-3 * t168 * t107 + 0.9891355730978566e-3 * t168 * t112 - 0.14878680171769923e-2 * t168 * t134 - 0.21100890252897446e-2 * t168 * t85 - 0.689695394243961e-3 * t153 * t146 + 0.4308565933608885e-3 * t153 * t126 - 0.19375881298946268e-3 * t153 * t118 + 0.5970286163074767e-3 * t44 * t146 - 0.7631605623646023e-2 * t196 * t134 + 0.28206838819829017e-2 * t196 * t85 - 0.5194058669188706e-3 * t204 * t126 - 0.38541498256550073e-2 * t204 * t118 - 0.7555456486598222e-2 * t204 * t146 - 0.10249162124576494e-2 * t204 * t112 - 0.3656012084198544e-4 * t204 * t107
  t224 = 0.429e3 / 0.16e2 * t103 - 0.693e3 / 0.16e2 * t101 + 0.315e3 / 0.16e2 * t99 - 0.35e2 / 0.192e3 * t42 + 0.35e2 / 0.16e2
  t250 = 0.13669196781387441795e1 + 0.5061925051098745e-2 * t204 * t134 - 0.16609256494831233e-2 * t204 * t85 + 0.10726279571787276e-1 * t224 * t107 - 0.1006770315965861e-1 * t224 * t134 + 0.17309630990864668e-3 * t224 * t85 - 0.18156466410673526e-3 * t196 * t126 + 0.1864317026752979e-2 * t196 * t146 - 0.31296536914037784e-2 * t196 * t118 - 0.9195715678311926e-2 * t196 * t107 + 0.8367073496483024e-3 * t196 * t112 - 0.19095139973664826e-3 * t224 * t146 - 0.29476504977320184e-3 * t224 * t126 + 0.38758929812102785e-2 * t224 * t118 - 0.31389079758955066e-3 * t224 * t112 - 0.1114587791227991087e-1 * t42
  t256 = lax_cond(r0 / 0.2e1 <= p.dens_threshold, 0, -0.3e1 / 0.8e1 * t3 / t4 * t18 * t19 * (t121 + t173 + t215 + t250))
  res = 0.2e1 * t256
  return res


def invoke(
  p: NamedTuple, rho: Callable, r: jnp.ndarray, mo: Optional[Callable] = None,
  deorbitalize: Optional[float] = None,
):
  args = rho_to_arguments(p, rho, r, mo, deorbitalize)
  code = pol if p.nspin == 2 else unpol
  dens = args[0] if p.nspin == 1 else sum(args[0])
  ret = lax.cond((dens < p.dens_threshold), lambda *_: 0.,
                 lambda *_: code(p, *args), None)
  return ret