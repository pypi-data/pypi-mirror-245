"""Generated from mgga_c_kcis.mpl."""

import jax
import jax.lax as lax
import jax.numpy as jnp
from jax.numpy import array as array
from jax.numpy import int32 as int32
from jax.numpy import nan as nan
from typing import Callable, Optional
from .utils import *


def pol(p, r, s=(None, None, None), l=(None, None), tau=(None, None)):
  params = p.params
  (r0, r1), (s0, s1, s2), (l0, l1), (tau0, tau1) = r, s, l, tau
  t1 = jnp.cbrt(3)
  t2 = 0.1e1 / jnp.pi
  t3 = jnp.cbrt(t2)
  t4 = t1 * t3
  t5 = jnp.cbrt(4)
  t6 = t5 ** 2
  t7 = r0 + r1
  t8 = jnp.cbrt(t7)
  t9 = 0.1e1 / t8
  t11 = t4 * t6 * t9
  t14 = jnp.sqrt(t11)
  t17 = t11 ** 0.15e1
  t19 = t1 ** 2
  t20 = t3 ** 2
  t21 = t19 * t20
  t22 = t8 ** 2
  t23 = 0.1e1 / t22
  t25 = t21 * t5 * t23
  t31 = jnp.log(0.1e1 + 0.16081824322151104822e2 / (0.379785e1 * t14 + 0.8969 * t11 + 0.204775 * t17 + 0.123235 * t25))
  t33 = 0.62182e-1 * (0.1e1 + 0.53425e-1 * t11) * t31
  t35 = jnp.cbrt(p.zeta_threshold)
  t36 = t35 * p.zeta_threshold
  t37 = lax_cond(0.1e1 <= p.zeta_threshold, t36, 1)
  t40 = jnp.cbrt(2)
  t43 = 0.1e1 / (0.2e1 * t40 - 0.2e1)
  t44 = (0.2e1 * t37 - 0.2e1) * t43
  t55 = jnp.log(0.1e1 + 0.29608574643216675549e2 / (0.51785e1 * t14 + 0.905775 * t11 + 0.1100325 * t17 + 0.1241775 * t25))
  t56 = (0.1e1 + 0.278125e-1 * t11) * t55
  t59 = -t33 + 0.19751789702565206229e-1 * t44 * t56
  t61 = s0 + 0.2e1 * s1 + s2
  t63 = t7 ** 2
  t65 = 0.1e1 / t8 / t63
  t67 = 0.1e1 / t3
  t68 = t19 * t67
  t71 = lax_cond(0. < t59, t59, -t59)
  t78 = jnp.log(0.1e1 + t40 * t61 * t65 * t68 * t5 / t71 / 0.96e2)
  t84 = t1 / t20
  t85 = t84 * t6
  t87 = 0.1e1 / t8 / t7
  t88 = 0.1e1 / t7
  t89 = t2 * t88
  t95 = 0.1e1 + t14 * (0.107924e1 + 0.3964e-1 * t14 + 0.123825e-1 * t11) / 0.2e1
  t96 = t95 ** 2
  t102 = t1 * t3 * t2
  t107 = t19 * t20 * t2
  t109 = 0.1e1 / t22 / t7
  t113 = jnp.pi ** 2
  t114 = 0.1e1 / t113
  t115 = 0.1e1 / t63
  t116 = t114 * t115
  t119 = t1 * t3 * t114
  t123 = -0.1878e-1 * t89 + 0.1317375e-2 * t102 * t6 * t87 - 0.23775e-3 * t107 * t5 * t109 + 0.639e-4 * t116 - 0.540140625e-6 * t119 * t6 * t65
  t125 = 0.367983135e-2 * t89 / t96 - t59 * t123
  t127 = 4 ** (0.1e1 / 0.6e1)
  t129 = t14 * t11
  t131 = 0.1e1 / t95
  t135 = t59 ** 2
  t138 = 0.1e1 / (0.19711288999999999999e-2 * t84 * t127 * t22 * t129 * t131 - 0.2e1 * t135)
  t141 = t85 * t87 * t125 * t138 * t61
  t144 = jnp.sqrt(0.4e1)
  t149 = t6 * t22
  t156 = (0.619125e-2 * t59 * t144 * t129 * t131 - 0.79593333333333333331e-1 * t84 * t149 * t123) * t138 * t61 * t115
  t159 = t61 ** 2
  t160 = t63 ** 2
  t163 = t125 * t138 * t159 / t160
  t167 = (t59 / (0.1e1 + 0.66725e-1 * t78) + 0.99491666666666666664e-2 * t141) / (0.1e1 + t156 / 0.8e1 - t163 / 0.64e2)
  t169 = (r0 - r1) * t88
  t170 = 0.1e1 + t169
  t171 = t170 <= p.zeta_threshold
  t172 = jnp.cbrt(t170)
  t174 = lax_cond(t171, t36, t172 * t170)
  t175 = 0.1e1 - t169
  t176 = t175 <= p.zeta_threshold
  t177 = jnp.cbrt(t175)
  t179 = lax_cond(t176, t36, t177 * t175)
  t184 = lax_cond(0.2e1 <= p.zeta_threshold, t36, 0.2e1 * t40)
  t186 = lax_cond(0. <= p.zeta_threshold, t36, 0)
  t188 = (t184 + t186 - 0.2e1) * t43
  t199 = jnp.log(0.1e1 + 0.32164683177870697974e2 / (0.705945e1 * t14 + 0.1549425e1 * t11 + 0.420775 * t17 + 0.1562925 * t25))
  t207 = -t33 + t188 * (-0.3109e-1 * (0.1e1 + 0.5137e-1 * t11) * t199 + t33 - 0.19751789702565206229e-1 * t56) + 0.19751789702565206229e-1 * t188 * t56
  t210 = t67 * t5
  t213 = lax_cond(0. < t207, t207, -t207)
  t219 = jnp.log(0.1e1 + t61 * t65 * t19 * t210 / t213 / 0.96e2)
  t236 = lax_cond(t171, p.zeta_threshold, t170)
  t238 = t4 * t6
  t239 = t9 * t40
  t240 = 0.1e1 / t170
  t241 = jnp.cbrt(t240)
  t243 = t238 * t239 * t241
  t246 = jnp.sqrt(t243)
  t249 = t243 ** 0.15e1
  t251 = t21 * t5
  t252 = t40 ** 2
  t253 = t23 * t252
  t254 = t241 ** 2
  t256 = t251 * t253 * t254
  t262 = jnp.log(0.1e1 + 0.16081824322151104822e2 / (0.379785e1 * t246 + 0.8969 * t243 + 0.204775 * t249 + 0.123235 * t256))
  t264 = 0.62182e-1 * (0.1e1 + 0.53425e-1 * t243) * t262
  t275 = jnp.log(0.1e1 + 0.29608574643216675549e2 / (0.51785e1 * t246 + 0.905775 * t243 + 0.1100325 * t249 + 0.1241775 * t256))
  t276 = (0.1e1 + 0.278125e-1 * t243) * t275
  t279 = -t264 + 0.19751789702565206229e-1 * t44 * t276
  t280 = r0 ** 2
  t281 = jnp.cbrt(r0)
  t282 = t281 ** 2
  t284 = 0.1e1 / t282 / t280
  t285 = s0 * t284
  t287 = t5 * t8
  t288 = 0.1e1 / t241
  t291 = lax_cond(0. < t279, t279, -t279)
  t298 = jnp.log(0.1e1 + t285 * t68 * t287 * t288 / t291 / 0.96e2)
  t304 = t84 * t149 * t252
  t305 = 0.1e1 / t254
  t311 = 0.1e1 + t246 * (0.107924e1 + 0.3964e-1 * t246 + 0.123825e-1 * t243) / 0.2e1
  t312 = t311 ** 2
  t319 = t102 * t6
  t320 = t87 * t40
  t325 = t107 * t5
  t326 = t109 * t252
  t331 = t170 ** 2
  t332 = 0.1e1 / t331
  t335 = t119 * t6
  t336 = t65 * t40
  t341 = -0.3756e-1 * t89 * t240 + 0.263475e-2 * t319 * t320 * t241 * t240 - 0.4755e-3 * t325 * t326 * t254 * t240 + 0.2556e-3 * t116 * t332 - 0.21605625e-5 * t335 * t336 * t241 * t332
  t343 = 0.73596627e-2 * t89 * t240 / t312 - t279 * t341
  t346 = t84 * t127 * t22
  t350 = t246 * t243 / t311
  t354 = t279 ** 2
  t357 = 0.1e1 / (0.98556445e-3 * t346 * t40 * t305 * t350 - 0.2e1 * t354)
  t359 = t7 * t170
  t360 = jnp.cbrt(t359)
  t361 = t360 ** 2
  t364 = t304 * t305 * t343 * t357 * t285 * t361
  t370 = t22 * t40
  t380 = (0.619125e-2 * t279 * t144 * t350 - 0.39796666666666666666e-1 * t85 * t370 * t305 * t341) * t357 * s0 * t284 * t40 * t361
  t383 = s0 ** 2
  t385 = t280 ** 2
  t392 = t343 * t357 * t383 / t281 / t385 / r0 * t252 * t360 * t359
  t396 = (t279 / (0.1e1 + 0.66725e-1 * t298) + 0.24872916666666666666e-2 * t364) / (0.1e1 + t380 / 0.16e2 - t392 / 0.256e3)
  t407 = jnp.log(0.1e1 + 0.32164683177870697974e2 / (0.705945e1 * t246 + 0.1549425e1 * t243 + 0.420775 * t249 + 0.1562925 * t256))
  t415 = -t264 + t188 * (-0.3109e-1 * (0.1e1 + 0.5137e-1 * t243) * t407 + t264 - 0.19751789702565206229e-1 * t276) + 0.19751789702565206229e-1 * t188 * t276
  t422 = lax_cond(0. < t415, t415, -t415)
  t429 = jnp.log(0.1e1 + t252 * s0 * t284 * t19 * t210 * t8 * t288 / t422 / 0.192e3)
  t450 = lax_cond(t176, p.zeta_threshold, t175)
  t452 = 0.1e1 / t175
  t453 = jnp.cbrt(t452)
  t455 = t238 * t239 * t453
  t458 = jnp.sqrt(t455)
  t461 = t455 ** 0.15e1
  t463 = t453 ** 2
  t465 = t251 * t253 * t463
  t471 = jnp.log(0.1e1 + 0.16081824322151104822e2 / (0.379785e1 * t458 + 0.8969 * t455 + 0.204775 * t461 + 0.123235 * t465))
  t473 = 0.62182e-1 * (0.1e1 + 0.53425e-1 * t455) * t471
  t484 = jnp.log(0.1e1 + 0.29608574643216675549e2 / (0.51785e1 * t458 + 0.905775 * t455 + 0.1100325 * t461 + 0.1241775 * t465))
  t485 = (0.1e1 + 0.278125e-1 * t455) * t484
  t488 = -t473 + 0.19751789702565206229e-1 * t44 * t485
  t489 = r1 ** 2
  t490 = jnp.cbrt(r1)
  t491 = t490 ** 2
  t493 = 0.1e1 / t491 / t489
  t494 = s2 * t493
  t496 = 0.1e1 / t453
  t499 = lax_cond(0. < t488, t488, -t488)
  t506 = jnp.log(0.1e1 + t494 * t68 * t287 * t496 / t499 / 0.96e2)
  t511 = 0.1e1 / t463
  t517 = 0.1e1 + t458 * (0.107924e1 + 0.3964e-1 * t458 + 0.123825e-1 * t455) / 0.2e1
  t518 = t517 ** 2
  t533 = t175 ** 2
  t534 = 0.1e1 / t533
  t541 = -0.3756e-1 * t89 * t452 + 0.263475e-2 * t319 * t320 * t453 * t452 - 0.4755e-3 * t325 * t326 * t463 * t452 + 0.2556e-3 * t116 * t534 - 0.21605625e-5 * t335 * t336 * t453 * t534
  t543 = 0.73596627e-2 * t89 * t452 / t518 - t488 * t541
  t548 = t458 * t455 / t517
  t552 = t488 ** 2
  t555 = 0.1e1 / (0.98556445e-3 * t346 * t40 * t511 * t548 - 0.2e1 * t552)
  t557 = t7 * t175
  t558 = jnp.cbrt(t557)
  t559 = t558 ** 2
  t562 = t304 * t511 * t543 * t555 * t494 * t559
  t577 = (0.619125e-2 * t488 * t144 * t548 - 0.39796666666666666666e-1 * t85 * t370 * t511 * t541) * t555 * s2 * t493 * t40 * t559
  t580 = s2 ** 2
  t582 = t489 ** 2
  t589 = t543 * t555 * t580 / t490 / t582 / r1 * t252 * t558 * t557
  t593 = (t488 / (0.1e1 + 0.66725e-1 * t506) + 0.24872916666666666666e-2 * t562) / (0.1e1 + t577 / 0.16e2 - t589 / 0.256e3)
  t604 = jnp.log(0.1e1 + 0.32164683177870697974e2 / (0.705945e1 * t458 + 0.1549425e1 * t455 + 0.420775 * t461 + 0.1562925 * t465))
  t612 = -t473 + t188 * (-0.3109e-1 * (0.1e1 + 0.5137e-1 * t455) * t604 + t473 - 0.19751789702565206229e-1 * t485) + 0.19751789702565206229e-1 * t188 * t485
  t619 = lax_cond(0. < t612, t612, -t612)
  t626 = jnp.log(0.1e1 + t252 * s2 * t493 * t19 * t210 * t8 * t496 / t619 / 0.192e3)
  res = t167 + (t174 + t179 - 0.2e1) * t43 * ((t207 / (0.1e1 + 0.66725e-1 * t219) + 0.69644166666666666665e-2 * t141) / (0.1e1 + 0.1875 * t156 - 0.4046875e-1 * t163) - t167) - s0 / r0 / tau0 * t236 * (t396 + t188 * ((t415 / (0.1e1 + 0.66725e-1 * t429) + 0.17411041666666666666e-2 * t364) / (0.1e1 + 0.9375e-1 * t380 - 0.101171875e-1 * t392) - t396)) / 0.16e2 - s2 / r1 / tau1 * t450 * (t593 + t188 * ((t612 / (0.1e1 + 0.66725e-1 * t626) + 0.17411041666666666666e-2 * t562) / (0.1e1 + 0.9375e-1 * t577 - 0.101171875e-1 * t589) - t593)) / 0.16e2
  return res


def unpol(p, r, s=None, l=None, tau=None):
  params = p.params
  r0, s0, l0, tau0 = r, s, l, tau
  t1 = jnp.cbrt(3)
  t2 = 0.1e1 / jnp.pi
  t3 = jnp.cbrt(t2)
  t4 = t1 * t3
  t5 = jnp.cbrt(4)
  t6 = t5 ** 2
  t7 = jnp.cbrt(r0)
  t9 = t6 / t7
  t10 = t4 * t9
  t13 = jnp.sqrt(t10)
  t16 = t10 ** 0.15e1
  t18 = t1 ** 2
  t19 = t3 ** 2
  t20 = t18 * t19
  t21 = t7 ** 2
  t23 = t5 / t21
  t24 = t20 * t23
  t30 = jnp.log(0.1e1 + 0.16081824322151104822e2 / (0.379785e1 * t13 + 0.8969 * t10 + 0.204775 * t16 + 0.123235 * t24))
  t32 = 0.62182e-1 * (0.1e1 + 0.53425e-1 * t10) * t30
  t33 = 0.1e1 <= p.zeta_threshold
  t34 = jnp.cbrt(p.zeta_threshold)
  t35 = t34 * p.zeta_threshold
  t36 = lax_cond(t33, t35, 1)
  t39 = jnp.cbrt(2)
  t42 = 0.1e1 / (0.2e1 * t39 - 0.2e1)
  t43 = (0.2e1 * t36 - 0.2e1) * t42
  t54 = jnp.log(0.1e1 + 0.29608574643216675549e2 / (0.51785e1 * t13 + 0.905775 * t10 + 0.1100325 * t16 + 0.1241775 * t24))
  t55 = (0.1e1 + 0.278125e-1 * t10) * t54
  t58 = -t32 + 0.19751789702565206229e-1 * t43 * t55
  t60 = r0 ** 2
  t62 = 0.1e1 / t7 / t60
  t63 = t39 * s0 * t62
  t64 = 0.1e1 / t3
  t65 = t18 * t64
  t68 = lax_cond(0. < t58, t58, -t58)
  t75 = jnp.log(0.1e1 + t63 * t65 * t5 / t68 / 0.96e2)
  t81 = t1 / t19
  t82 = t81 * t6
  t84 = 0.1e1 / t7 / r0
  t85 = 0.1e1 / r0
  t86 = t2 * t85
  t92 = 0.1e1 + t13 * (0.107924e1 + 0.3964e-1 * t13 + 0.123825e-1 * t10) / 0.2e1
  t93 = t92 ** 2
  t99 = t1 * t3 * t2
  t100 = t6 * t84
  t104 = t18 * t19 * t2
  t107 = t5 / t21 / r0
  t110 = jnp.pi ** 2
  t111 = 0.1e1 / t110
  t112 = 0.1e1 / t60
  t113 = t111 * t112
  t116 = t1 * t3 * t111
  t117 = t6 * t62
  t120 = -0.1878e-1 * t86 + 0.1317375e-2 * t99 * t100 - 0.23775e-3 * t104 * t107 + 0.639e-4 * t113 - 0.540140625e-6 * t116 * t117
  t122 = 0.367983135e-2 * t86 / t93 - t58 * t120
  t124 = 4 ** (0.1e1 / 0.6e1)
  t125 = t81 * t124
  t126 = t13 * t10
  t128 = 0.1e1 / t92
  t132 = t58 ** 2
  t135 = 0.1e1 / (0.19711288999999999999e-2 * t125 * t21 * t126 * t128 - 0.2e1 * t132)
  t138 = t82 * t84 * t122 * t135 * s0
  t141 = jnp.sqrt(0.4e1)
  t152 = s0 * t112
  t153 = (0.619125e-2 * t58 * t141 * t126 * t128 - 0.79593333333333333331e-1 * t81 * t6 * t21 * t120) * t135 * t152
  t156 = s0 ** 2
  t157 = t60 ** 2
  t159 = t156 / t157
  t160 = t122 * t135 * t159
  t164 = (t58 / (0.1e1 + 0.66725e-1 * t75) + 0.99491666666666666664e-2 * t138) / (0.1e1 + t153 / 0.8e1 - t160 / 0.64e2)
  t167 = lax_cond(0.2e1 <= p.zeta_threshold, t35, 0.2e1 * t39)
  t169 = lax_cond(0. <= p.zeta_threshold, t35, 0)
  t171 = (t167 + t169 - 0.2e1) * t42
  t182 = jnp.log(0.1e1 + 0.32164683177870697974e2 / (0.705945e1 * t13 + 0.1549425e1 * t10 + 0.420775 * t16 + 0.1562925 * t24))
  t190 = -t32 + t171 * (-0.3109e-1 * (0.1e1 + 0.5137e-1 * t10) * t182 + t32 - 0.19751789702565206229e-1 * t55) + 0.19751789702565206229e-1 * t171 * t55
  t192 = s0 * t62 * t18
  t193 = t64 * t5
  t196 = lax_cond(0. < t190, t190, -t190)
  t202 = jnp.log(0.1e1 + t192 * t193 / t196 / 0.96e2)
  t218 = lax_cond(t33, p.zeta_threshold, 1)
  t221 = t4 * t9 * t39
  t224 = jnp.sqrt(t221)
  t227 = t221 ** 0.15e1
  t229 = t39 ** 2
  t231 = t20 * t23 * t229
  t237 = jnp.log(0.1e1 + 0.16081824322151104822e2 / (0.379785e1 * t224 + 0.8969 * t221 + 0.204775 * t227 + 0.123235 * t231))
  t239 = 0.62182e-1 * (0.1e1 + 0.53425e-1 * t221) * t237
  t250 = jnp.log(0.1e1 + 0.29608574643216675549e2 / (0.51785e1 * t224 + 0.905775 * t221 + 0.1100325 * t227 + 0.1241775 * t231))
  t251 = (0.1e1 + 0.278125e-1 * t221) * t250
  t254 = -t239 + 0.19751789702565206229e-1 * t43 * t251
  t257 = lax_cond(0. < t254, t254, -t254)
  t264 = jnp.log(0.1e1 + t192 * t193 * t229 / t257 / 0.96e2)
  t275 = 0.1e1 + t224 * (0.107924e1 + 0.3964e-1 * t224 + 0.123825e-1 * t221) / 0.2e1
  t276 = t275 ** 2
  t291 = -0.3756e-1 * t86 + 0.263475e-2 * t99 * t100 * t39 - 0.4755e-3 * t104 * t107 * t229 + 0.2556e-3 * t113 - 0.21605625e-5 * t116 * t117 * t39
  t293 = 0.73596627e-2 * t86 / t276 - t254 * t291
  t295 = t21 * t39
  t298 = t224 * t221 / t275
  t302 = t254 ** 2
  t305 = 0.1e1 / (0.98556445e-3 * t125 * t295 * t298 - 0.2e1 * t302)
  t308 = t81 * t100 * t39 * t293 * t305 * s0
  t319 = (0.619125e-2 * t254 * t141 * t298 - 0.39796666666666666666e-1 * t82 * t295 * t291) * t305 * t152
  t322 = t293 * t305 * t159
  t326 = (t254 / (0.1e1 + 0.66725e-1 * t264) + 0.49745833333333333332e-2 * t308) / (0.1e1 + t319 / 0.8e1 - t322 / 0.64e2)
  t337 = jnp.log(0.1e1 + 0.32164683177870697974e2 / (0.705945e1 * t224 + 0.1549425e1 * t221 + 0.420775 * t227 + 0.1562925 * t231))
  t345 = -t239 + t171 * (-0.3109e-1 * (0.1e1 + 0.5137e-1 * t221) * t337 + t239 - 0.19751789702565206229e-1 * t251) + 0.19751789702565206229e-1 * t171 * t251
  t348 = lax_cond(0. < t345, t345, -t345)
  t355 = jnp.log(0.1e1 + t63 * t65 * t5 / t348 / 0.96e2)
  res = t164 + t43 * ((t190 / (0.1e1 + 0.66725e-1 * t202) + 0.69644166666666666665e-2 * t138) / (0.1e1 + 0.1875 * t153 - 0.4046875e-1 * t160) - t164) - s0 * t85 / tau0 * t218 * (t326 + t171 * ((t345 / (0.1e1 + 0.66725e-1 * t355) + 0.34822083333333333332e-2 * t308) / (0.1e1 + 0.1875 * t319 - 0.4046875e-1 * t322) - t326)) / 0.8e1
  return res


def invoke(
  p: NamedTuple, rho: Callable, r: jnp.ndarray, mo: Optional[Callable] = None,
  deorbitalize: Optional[float] = None,
):
  args = rho_to_arguments(p, rho, r, mo, deorbitalize)
  code = pol if p.nspin == 2 else unpol
  dens = args[0] if p.nspin == 1 else sum(args[0])
  ret = lax.cond((dens < p.dens_threshold), lambda *_: 0.,
                 lambda *_: code(p, *args), None)
  return ret