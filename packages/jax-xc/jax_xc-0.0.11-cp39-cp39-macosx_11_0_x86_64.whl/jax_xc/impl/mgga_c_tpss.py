"""Generated from mgga_c_tpss.mpl."""

import jax
import jax.lax as lax
import jax.numpy as jnp
from jax.numpy import array as array
from jax.numpy import int32 as int32
from jax.numpy import nan as nan
from typing import Callable, Optional
from .utils import *


def pol(p, r, s=(None, None, None), l=(None, None), tau=(None, None)):
  params = p.params
  (r0, r1), (s0, s1, s2), (l0, l1), (tau0, tau1) = r, s, l, tau
  t1 = r0 - r1
  t2 = r0 + r1
  t4 = t1 / t2
  t6 = lax_cond(0. < t4, t4, -t4)
  t8 = params.C0_c[0]
  t9 = params.C0_c[1]
  t10 = params.C0_c[2]
  t11 = params.C0_c[3]
  t13 = t1 ** 2
  t15 = t2 ** 2
  t18 = t13 ** 2
  t20 = t15 ** 2
  t21 = 0.1e1 / t20
  t29 = 0.1e1 + t4
  t30 = t29 <= p.zeta_threshold
  t31 = p.zeta_threshold - 0.1e1
  t32 = 0.1e1 - t4
  t33 = t32 <= p.zeta_threshold
  t35 = lax_cond(t33, -t31, t4)
  t36 = lax_cond(t30, t31, t35)
  t37 = t36 ** 2
  t39 = r0 ** 2
  t40 = jnp.cbrt(r0)
  t41 = t40 ** 2
  t44 = s0 / t41 / t39
  t45 = 0.1e1 + t36
  t46 = t45 / 0.2e1
  t47 = jnp.cbrt(t46)
  t48 = t47 ** 2
  t51 = r1 ** 2
  t52 = jnp.cbrt(r1)
  t53 = t52 ** 2
  t56 = s2 / t53 / t51
  t57 = 0.1e1 - t36
  t58 = t57 / 0.2e1
  t59 = jnp.cbrt(t58)
  t60 = t59 ** 2
  t64 = s0 + 0.2e1 * s1 + s2
  t65 = jnp.cbrt(t2)
  t66 = t65 ** 2
  t69 = t64 / t66 / t15
  t72 = jnp.cbrt(3)
  t73 = jnp.pi ** 2
  t74 = jnp.cbrt(t73)
  t75 = t74 ** 2
  t78 = jnp.cbrt(t45)
  t79 = t78 * t45
  t81 = jnp.cbrt(t57)
  t82 = t81 * t57
  t89 = (0.1e1 + (0.1e1 - t37) * (t44 * t48 * t46 + t56 * t60 * t58 - t69) * t72 / t75 * (0.1e1 / t79 + 0.1e1 / t82) / 0.24e2) ** 2
  t90 = t89 ** 2
  t93 = lax_cond(-t6 <= -0.999999999999, t8 + t9 + t10 + t11, (t8 + t9 * t13 / t15 + t10 * t18 * t21 + t11 * t18 * t13 / t20 / t15) / t90)
  t98 = t29 / 0.2e1
  t99 = jnp.cbrt(t98)
  t100 = t99 ** 2
  t106 = t32 / 0.2e1
  t107 = jnp.cbrt(t106)
  t108 = t107 ** 2
  t114 = t69 / (tau0 / t41 / r0 * t100 * t98 + tau1 / t53 / r1 * t108 * t106) / 0.8e1
  t116 = lax_cond(0.1e1 < t114, 1, t114)
  t117 = t116 ** 2
  t120 = jnp.logical_or(r0 <= p.dens_threshold, t30)
  t122 = jnp.cbrt(0.1e1 / jnp.pi)
  t123 = t72 * t122
  t124 = jnp.cbrt(4)
  t125 = t124 ** 2
  t126 = 0.1e1 / t65
  t128 = t123 * t125 * t126
  t131 = jnp.sqrt(t128)
  t134 = t128 ** 0.15e1
  t136 = t72 ** 2
  t137 = t122 ** 2
  t138 = t136 * t137
  t139 = 0.1e1 / t66
  t141 = t138 * t124 * t139
  t147 = jnp.log(0.1e1 + 0.16081979498692535067e2 / (0.379785e1 * t131 + 0.8969 * t128 + 0.204775 * t134 + 0.123235 * t141))
  t149 = 0.621814e-1 * (0.1e1 + 0.53425e-1 * t128) * t147
  t150 = t37 ** 2
  t151 = t45 <= p.zeta_threshold
  t152 = jnp.cbrt(p.zeta_threshold)
  t153 = t152 * p.zeta_threshold
  t154 = lax_cond(t151, t153, t79)
  t155 = t57 <= p.zeta_threshold
  t156 = lax_cond(t155, t153, t82)
  t157 = t154 + t156 - 0.2e1
  t159 = jnp.cbrt(2)
  t162 = 0.1e1 / (0.2e1 * t159 - 0.2e1)
  t173 = jnp.log(0.1e1 + 0.32163958997385070134e2 / (0.705945e1 * t131 + 0.1549425e1 * t128 + 0.420775 * t134 + 0.1562925 * t141))
  t186 = jnp.log(0.1e1 + 0.29608749977793437516e2 / (0.51785e1 * t131 + 0.905775 * t128 + 0.1100325 * t134 + 0.1241775 * t141))
  t187 = (0.1e1 + 0.278125e-1 * t128) * t186
  t189 = -0.310907e-1 * (0.1e1 + 0.5137e-1 * t128) * t173 + t149 - 0.19751673498613801407e-1 * t187
  t191 = t150 * t157 * t162 * t189
  t194 = 0.19751673498613801407e-1 * t157 * t162 * t187
  t195 = jnp.log(0.2e1)
  t196 = 0.1e1 - t195
  t198 = t196 / t73
  t199 = t152 ** 2
  t200 = t78 ** 2
  t201 = lax_cond(t151, t199, t200)
  t202 = t81 ** 2
  t203 = lax_cond(t155, t199, t202)
  t205 = t201 / 0.2e1 + t203 / 0.2e1
  t206 = t205 ** 2
  t207 = t206 * t205
  t211 = t64 / t65 / t15 * t159
  t215 = 0.1e1 / t122 * t124
  t219 = 0.1e1 / t196
  t220 = params.beta * t219
  t226 = jnp.exp(-(-t149 + t191 + t194) * t219 * t73 / t207)
  t229 = t73 / (t226 - 0.1e1)
  t230 = t64 ** 2
  t235 = t159 ** 2
  t236 = 0.1e1 / t66 / t20 * t235
  t237 = t206 ** 2
  t240 = 0.1e1 / t137
  t242 = t72 * t240 * t125
  t246 = t211 / t206 * t136 * t215 / 0.96e2 + t220 * t229 * t230 * t236 / t237 * t242 / 0.3072e4
  t248 = t219 * t73
  t256 = jnp.log(0.1e1 + params.beta * t246 * t248 / (t220 * t229 * t246 + 0.1e1))
  t259 = t198 * t207 * t256 - t149 + t191 + t194
  t262 = t123 * t125
  t263 = t126 * t159
  t265 = jnp.cbrt(0.1e1 / t45)
  t267 = t262 * t263 * t265
  t270 = jnp.sqrt(t267)
  t273 = t267 ** 0.15e1
  t275 = t138 * t124
  t276 = t139 * t235
  t277 = t265 ** 2
  t279 = t275 * t276 * t277
  t285 = jnp.log(0.1e1 + 0.16081979498692535067e2 / (0.379785e1 * t270 + 0.8969 * t267 + 0.204775 * t273 + 0.123235 * t279))
  t287 = 0.621814e-1 * (0.1e1 + 0.53425e-1 * t267) * t285
  t288 = 0.2e1 <= p.zeta_threshold
  t290 = lax_cond(t288, t153, 0.2e1 * t159)
  t291 = 0. <= p.zeta_threshold
  t292 = lax_cond(t291, t153, 0)
  t294 = (t290 + t292 - 0.2e1) * t162
  t305 = jnp.log(0.1e1 + 0.32163958997385070134e2 / (0.705945e1 * t270 + 0.1549425e1 * t267 + 0.420775 * t273 + 0.1562925 * t279))
  t318 = jnp.log(0.1e1 + 0.29608749977793437516e2 / (0.51785e1 * t270 + 0.905775 * t267 + 0.1100325 * t273 + 0.1241775 * t279))
  t319 = (0.1e1 + 0.278125e-1 * t267) * t318
  t322 = t294 * (-0.310907e-1 * (0.1e1 + 0.5137e-1 * t267) * t305 + t287 - 0.19751673498613801407e-1 * t319)
  t324 = 0.19751673498613801407e-1 * t294 * t319
  t325 = lax_cond(t288, t199, t235)
  t326 = lax_cond(t291, t199, 0)
  t328 = t325 / 0.2e1 + t326 / 0.2e1
  t329 = t328 ** 2
  t330 = t329 * t328
  t332 = 0.1e1 / t329 * t136
  t339 = t220 * t73
  t343 = t73 / t330
  t345 = jnp.exp(-(-t287 + t322 + t324) * t219 * t343)
  t347 = 0.1e1 / (t345 - 0.1e1)
  t348 = s0 ** 2
  t350 = t39 ** 2
  t356 = t329 ** 2
  t359 = 0.1e1 / t356 * t72 * t240
  t360 = t125 * t66
  t366 = t44 * t332 * t215 * t65 / t265 / 0.96e2 + t339 * t347 * t348 / t40 / t350 / r0 * t359 * t360 / t277 / 0.3072e4
  t376 = jnp.log(0.1e1 + params.beta * t366 * t248 / (t220 * t73 * t347 * t366 + 0.1e1))
  t379 = t198 * t330 * t376 - t287 + t322 + t324
  t381 = lax_cond(t259 < t379, t379, t259)
  t384 = lax_cond(t120, t259 * t29 / 0.2e1, t381 * t45 / 0.2e1)
  t386 = jnp.logical_or(r1 <= p.dens_threshold, t33)
  t390 = jnp.cbrt(0.1e1 / t57)
  t392 = t262 * t263 * t390
  t395 = jnp.sqrt(t392)
  t398 = t392 ** 0.15e1
  t400 = t390 ** 2
  t402 = t275 * t276 * t400
  t408 = jnp.log(0.1e1 + 0.16081979498692535067e2 / (0.379785e1 * t395 + 0.8969 * t392 + 0.204775 * t398 + 0.123235 * t402))
  t410 = 0.621814e-1 * (0.1e1 + 0.53425e-1 * t392) * t408
  t421 = jnp.log(0.1e1 + 0.32163958997385070134e2 / (0.705945e1 * t395 + 0.1549425e1 * t392 + 0.420775 * t398 + 0.1562925 * t402))
  t434 = jnp.log(0.1e1 + 0.29608749977793437516e2 / (0.51785e1 * t395 + 0.905775 * t392 + 0.1100325 * t398 + 0.1241775 * t402))
  t435 = (0.1e1 + 0.278125e-1 * t392) * t434
  t438 = t294 * (-0.310907e-1 * (0.1e1 + 0.5137e-1 * t392) * t421 + t410 - 0.19751673498613801407e-1 * t435)
  t440 = 0.19751673498613801407e-1 * t294 * t435
  t450 = jnp.exp(-(-t410 + t438 + t440) * t219 * t343)
  t452 = 0.1e1 / (t450 - 0.1e1)
  t453 = s2 ** 2
  t455 = t51 ** 2
  t466 = t56 * t332 * t215 * t65 / t390 / 0.96e2 + t339 * t452 * t453 / t52 / t455 / r1 * t359 * t360 / t400 / 0.3072e4
  t476 = jnp.log(0.1e1 + params.beta * t466 * t248 / (t220 * t73 * t452 * t466 + 0.1e1))
  t479 = t198 * t330 * t476 - t410 + t438 + t440
  t481 = lax_cond(t259 < t479, t479, t259)
  t484 = lax_cond(t386, t259 * t32 / 0.2e1, t481 * t57 / 0.2e1)
  t490 = jnp.cbrt(t29)
  t492 = lax_cond(t30, t153, t490 * t29)
  t493 = jnp.cbrt(t32)
  t495 = lax_cond(t33, t153, t493 * t32)
  t497 = (t492 + t495 - 0.2e1) * t162
  t499 = t18 * t21 * t497 * t189
  t501 = 0.19751673498613801407e-1 * t497 * t187
  t502 = t490 ** 2
  t503 = lax_cond(t30, t199, t502)
  t504 = t493 ** 2
  t505 = lax_cond(t33, t199, t504)
  t507 = t503 / 0.2e1 + t505 / 0.2e1
  t508 = t507 ** 2
  t509 = t508 * t507
  t520 = jnp.exp(-(-t149 + t499 + t501) * t219 * t73 / t509)
  t523 = t73 / (t520 - 0.1e1)
  t526 = t508 ** 2
  t532 = t211 / t508 * t136 * t215 / 0.96e2 + t220 * t523 * t230 * t236 / t526 * t242 / 0.3072e4
  t541 = jnp.log(0.1e1 + params.beta * t532 * t248 / (t220 * t523 * t532 + 0.1e1))
  t546 = -(0.1e1 + t93) * t117 * (t384 + t484) + (t93 * t117 + 0.1e1) * (t198 * t509 * t541 - t149 + t499 + t501)
  res = t546 * (params.d * t546 * t117 * t116 + 0.1e1)
  return res


def unpol(p, r, s=None, l=None, tau=None):
  params = p.params
  r0, s0, l0, tau0 = r, s, l, tau
  t2 = lax_cond(0 < 0, 0, 0)
  t4 = params.C0_c[0]
  t9 = 0.1e1 <= p.zeta_threshold
  t10 = p.zeta_threshold - 0.1e1
  t12 = lax_cond(t9, -t10, 0)
  t13 = lax_cond(t9, t10, t12)
  t14 = t13 ** 2
  t16 = jnp.cbrt(2)
  t17 = t16 ** 2
  t18 = s0 * t17
  t19 = r0 ** 2
  t20 = jnp.cbrt(r0)
  t21 = t20 ** 2
  t23 = 0.1e1 / t21 / t19
  t24 = 0.1e1 + t13
  t25 = t24 / 0.2e1
  t26 = jnp.cbrt(t25)
  t27 = t26 ** 2
  t31 = 0.1e1 - t13
  t32 = t31 / 0.2e1
  t33 = jnp.cbrt(t32)
  t34 = t33 ** 2
  t41 = jnp.cbrt(3)
  t42 = jnp.pi ** 2
  t43 = jnp.cbrt(t42)
  t44 = t43 ** 2
  t47 = jnp.cbrt(t24)
  t48 = t47 * t24
  t50 = jnp.cbrt(t31)
  t51 = t50 * t31
  t58 = (0.1e1 + (0.1e1 - t14) * (t18 * t23 * t27 * t25 + t18 * t23 * t34 * t32 - s0 * t23) * t41 / t44 * (0.1e1 / t48 + 0.1e1 / t51) / 0.24e2) ** 2
  t59 = t58 ** 2
  t62 = lax_cond(-t2 <= -0.999999999999, t4 + params.C0_c[1] + params.C0_c[2] + params.C0_c[3], t4 / t59)
  t68 = s0 / r0 / tau0 / 0.8e1
  t70 = lax_cond(0.1e1 < t68, 1, t68)
  t71 = t70 ** 2
  t75 = jnp.logical_or(r0 / 0.2e1 <= p.dens_threshold, t9)
  t77 = jnp.cbrt(0.1e1 / jnp.pi)
  t78 = t41 * t77
  t79 = jnp.cbrt(4)
  t80 = t79 ** 2
  t81 = 0.1e1 / t20
  t83 = t78 * t80 * t81
  t86 = jnp.sqrt(t83)
  t89 = t83 ** 0.15e1
  t91 = t41 ** 2
  t92 = t77 ** 2
  t93 = t91 * t92
  t94 = 0.1e1 / t21
  t96 = t93 * t79 * t94
  t102 = jnp.log(0.1e1 + 0.16081979498692535067e2 / (0.379785e1 * t86 + 0.8969 * t83 + 0.204775 * t89 + 0.123235 * t96))
  t103 = (0.1e1 + 0.53425e-1 * t83) * t102
  t105 = t14 ** 2
  t106 = t24 <= p.zeta_threshold
  t107 = jnp.cbrt(p.zeta_threshold)
  t108 = t107 * p.zeta_threshold
  t109 = lax_cond(t106, t108, t48)
  t110 = t31 <= p.zeta_threshold
  t111 = lax_cond(t110, t108, t51)
  t112 = t109 + t111 - 0.2e1
  t116 = 0.1e1 / (0.2e1 * t16 - 0.2e1)
  t127 = jnp.log(0.1e1 + 0.32163958997385070134e2 / (0.705945e1 * t86 + 0.1549425e1 * t83 + 0.420775 * t89 + 0.1562925 * t96))
  t130 = 0.621814e-1 * t103
  t141 = jnp.log(0.1e1 + 0.29608749977793437516e2 / (0.51785e1 * t86 + 0.905775 * t83 + 0.1100325 * t89 + 0.1241775 * t96))
  t142 = (0.1e1 + 0.278125e-1 * t83) * t141
  t146 = t105 * t112 * t116 * (-0.310907e-1 * (0.1e1 + 0.5137e-1 * t83) * t127 + t130 - 0.19751673498613801407e-1 * t142)
  t149 = t112 * t116 * t142
  t151 = jnp.log(0.2e1)
  t152 = 0.1e1 - t151
  t154 = t152 / t42
  t155 = t107 ** 2
  t156 = t47 ** 2
  t157 = lax_cond(t106, t155, t156)
  t158 = t50 ** 2
  t159 = lax_cond(t110, t155, t158)
  t161 = t157 / 0.2e1 + t159 / 0.2e1
  t162 = t161 ** 2
  t163 = t162 * t161
  t166 = s0 / t20 / t19
  t167 = t166 * t16
  t171 = 0.1e1 / t77 * t79
  t175 = 0.1e1 / t152
  t176 = params.beta * t175
  t177 = 0.19751673498613801407e-1 * t149
  t183 = jnp.exp(-(-t130 + t146 + t177) * t175 * t42 / t163)
  t186 = t42 / (t183 - 0.1e1)
  t187 = s0 ** 2
  t190 = t19 ** 2
  t192 = 0.1e1 / t21 / t190
  t193 = t192 * t17
  t194 = t162 ** 2
  t197 = 0.1e1 / t92
  t199 = t41 * t197 * t80
  t203 = t167 / t162 * t91 * t171 / 0.96e2 + t176 * t186 * t187 * t193 / t194 * t199 / 0.3072e4
  t205 = t175 * t42
  t213 = jnp.log(0.1e1 + params.beta * t203 * t205 / (t176 * t186 * t203 + 0.1e1))
  t215 = t154 * t163 * t213
  t217 = -0.310907e-1 * t103 + t146 / 0.2e1 + 0.98758367493069007035e-2 * t149 + t215 / 0.2e1
  t218 = -t130 + t146 + t177 + t215
  t219 = t78 * t80
  t220 = t81 * t16
  t222 = jnp.cbrt(0.1e1 / t24)
  t224 = t219 * t220 * t222
  t227 = jnp.sqrt(t224)
  t230 = t224 ** 0.15e1
  t232 = t93 * t79
  t233 = t94 * t17
  t234 = t222 ** 2
  t236 = t232 * t233 * t234
  t242 = jnp.log(0.1e1 + 0.16081979498692535067e2 / (0.379785e1 * t227 + 0.8969 * t224 + 0.204775 * t230 + 0.123235 * t236))
  t244 = 0.621814e-1 * (0.1e1 + 0.53425e-1 * t224) * t242
  t245 = 0.2e1 <= p.zeta_threshold
  t247 = lax_cond(t245, t108, 0.2e1 * t16)
  t248 = 0. <= p.zeta_threshold
  t249 = lax_cond(t248, t108, 0)
  t251 = (t247 + t249 - 0.2e1) * t116
  t262 = jnp.log(0.1e1 + 0.32163958997385070134e2 / (0.705945e1 * t227 + 0.1549425e1 * t224 + 0.420775 * t230 + 0.1562925 * t236))
  t275 = jnp.log(0.1e1 + 0.29608749977793437516e2 / (0.51785e1 * t227 + 0.905775 * t224 + 0.1100325 * t230 + 0.1241775 * t236))
  t276 = (0.1e1 + 0.278125e-1 * t224) * t275
  t279 = t251 * (-0.310907e-1 * (0.1e1 + 0.5137e-1 * t224) * t262 + t244 - 0.19751673498613801407e-1 * t276)
  t281 = 0.19751673498613801407e-1 * t251 * t276
  t282 = lax_cond(t245, t155, t17)
  t283 = lax_cond(t248, t155, 0)
  t285 = t282 / 0.2e1 + t283 / 0.2e1
  t286 = t285 ** 2
  t287 = t286 * t285
  t290 = t166 / t286 * t91
  t296 = t176 * t42
  t300 = t42 / t287
  t302 = jnp.exp(-(-t244 + t279 + t281) * t175 * t300)
  t304 = 0.1e1 / (t302 - 0.1e1)
  t308 = t286 ** 2
  t311 = 0.1e1 / t308 * t41 * t197
  t312 = t80 * t16
  t318 = t290 * t171 * t17 / t222 / 0.96e2 + t296 * t304 * t187 * t192 * t311 * t312 / t234 / 0.1536e4
  t328 = jnp.log(0.1e1 + params.beta * t318 * t205 / (t176 * t42 * t304 * t318 + 0.1e1))
  t331 = t154 * t287 * t328 - t244 + t279 + t281
  t333 = lax_cond(t218 < t331, t331, t218)
  t336 = lax_cond(t75, t217, t333 * t24 / 0.2e1)
  t338 = jnp.cbrt(0.1e1 / t31)
  t340 = t219 * t220 * t338
  t343 = jnp.sqrt(t340)
  t346 = t340 ** 0.15e1
  t348 = t338 ** 2
  t350 = t232 * t233 * t348
  t356 = jnp.log(0.1e1 + 0.16081979498692535067e2 / (0.379785e1 * t343 + 0.8969 * t340 + 0.204775 * t346 + 0.123235 * t350))
  t358 = 0.621814e-1 * (0.1e1 + 0.53425e-1 * t340) * t356
  t369 = jnp.log(0.1e1 + 0.32163958997385070134e2 / (0.705945e1 * t343 + 0.1549425e1 * t340 + 0.420775 * t346 + 0.1562925 * t350))
  t382 = jnp.log(0.1e1 + 0.29608749977793437516e2 / (0.51785e1 * t343 + 0.905775 * t340 + 0.1100325 * t346 + 0.1241775 * t350))
  t383 = (0.1e1 + 0.278125e-1 * t340) * t382
  t386 = t251 * (-0.310907e-1 * (0.1e1 + 0.5137e-1 * t340) * t369 + t358 - 0.19751673498613801407e-1 * t383)
  t388 = 0.19751673498613801407e-1 * t251 * t383
  t397 = jnp.exp(-(-t358 + t386 + t388) * t175 * t300)
  t399 = 0.1e1 / (t397 - 0.1e1)
  t408 = t290 * t171 * t17 / t338 / 0.96e2 + t296 * t399 * t187 * t192 * t311 * t312 / t348 / 0.1536e4
  t418 = jnp.log(0.1e1 + params.beta * t408 * t205 / (t176 * t42 * t399 * t408 + 0.1e1))
  t421 = t154 * t287 * t418 - t358 + t386 + t388
  t423 = lax_cond(t218 < t421, t421, t218)
  t426 = lax_cond(t75, t217, t423 * t31 / 0.2e1)
  t431 = lax_cond(t9, t108, 1)
  t436 = 0.19751673498613801407e-1 * (0.2e1 * t431 - 0.2e1) * t116 * t142
  t437 = lax_cond(t9, t155, 1)
  t438 = t437 ** 2
  t439 = t438 * t437
  t450 = jnp.exp(-(-t130 + t436) * t175 * t42 / t439)
  t453 = t42 / (t450 - 0.1e1)
  t456 = t438 ** 2
  t462 = t167 / t438 * t91 * t171 / 0.96e2 + t176 * t453 * t187 * t193 / t456 * t199 / 0.3072e4
  t471 = jnp.log(0.1e1 + params.beta * t462 * t205 / (t176 * t453 * t462 + 0.1e1))
  t476 = -(0.1e1 + t62) * t71 * (t336 + t426) + (t62 * t71 + 0.1e1) * (t154 * t439 * t471 - t130 + t436)
  res = t476 * (params.d * t476 * t71 * t70 + 0.1e1)
  return res


def invoke(
  p: NamedTuple, rho: Callable, r: jnp.ndarray, mo: Optional[Callable] = None,
  deorbitalize: Optional[float] = None,
):
  args = rho_to_arguments(p, rho, r, mo, deorbitalize)
  code = pol if p.nspin == 2 else unpol
  dens = args[0] if p.nspin == 1 else sum(args[0])
  ret = lax.cond((dens < p.dens_threshold), lambda *_: 0.,
                 lambda *_: code(p, *args), None)
  return ret