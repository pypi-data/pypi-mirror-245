"""Generated from mgga_c_revtpss.mpl."""

import jax
import jax.lax as lax
import jax.numpy as jnp
from jax.numpy import array as array
from jax.numpy import int32 as int32
from jax.numpy import nan as nan
from typing import Callable, Optional
from .utils import *


def pol(p, r, s=(None, None, None), l=(None, None), tau=(None, None)):
  params = p.params
  (r0, r1), (s0, s1, s2), (l0, l1), (tau0, tau1) = r, s, l, tau
  t1 = r0 - r1
  t2 = r0 + r1
  t4 = t1 / t2
  t6 = lax_cond(0. < t4, t4, -t4)
  t8 = params.C0_c[0]
  t9 = params.C0_c[1]
  t10 = params.C0_c[2]
  t11 = params.C0_c[3]
  t13 = t1 ** 2
  t15 = t2 ** 2
  t18 = t13 ** 2
  t20 = t15 ** 2
  t21 = 0.1e1 / t20
  t29 = 0.1e1 + t4
  t30 = t29 <= p.zeta_threshold
  t31 = p.zeta_threshold - 0.1e1
  t32 = 0.1e1 - t4
  t33 = t32 <= p.zeta_threshold
  t35 = lax_cond(t33, -t31, t4)
  t36 = lax_cond(t30, t31, t35)
  t37 = t36 ** 2
  t39 = r0 ** 2
  t40 = jnp.cbrt(r0)
  t41 = t40 ** 2
  t44 = s0 / t41 / t39
  t45 = 0.1e1 + t36
  t46 = t45 / 0.2e1
  t47 = jnp.cbrt(t46)
  t48 = t47 ** 2
  t51 = r1 ** 2
  t52 = jnp.cbrt(r1)
  t53 = t52 ** 2
  t56 = s2 / t53 / t51
  t57 = 0.1e1 - t36
  t58 = t57 / 0.2e1
  t59 = jnp.cbrt(t58)
  t60 = t59 ** 2
  t64 = s0 + 0.2e1 * s1 + s2
  t65 = jnp.cbrt(t2)
  t66 = t65 ** 2
  t69 = t64 / t66 / t15
  t72 = jnp.cbrt(3)
  t73 = jnp.pi ** 2
  t74 = jnp.cbrt(t73)
  t75 = t74 ** 2
  t78 = jnp.cbrt(t45)
  t79 = t78 * t45
  t81 = jnp.cbrt(t57)
  t82 = t81 * t57
  t89 = (0.1e1 + (0.1e1 - t37) * (t44 * t48 * t46 + t56 * t60 * t58 - t69) * t72 / t75 * (0.1e1 / t79 + 0.1e1 / t82) / 0.24e2) ** 2
  t90 = t89 ** 2
  t93 = lax_cond(-t6 <= -0.999999999999, t8 + t9 + t10 + t11, (t8 + t9 * t13 / t15 + t10 * t18 * t21 + t11 * t18 * t13 / t20 / t15) / t90)
  t98 = t29 / 0.2e1
  t99 = jnp.cbrt(t98)
  t100 = t99 ** 2
  t106 = t32 / 0.2e1
  t107 = jnp.cbrt(t106)
  t108 = t107 ** 2
  t114 = t69 / (tau0 / t41 / r0 * t100 * t98 + tau1 / t53 / r1 * t108 * t106) / 0.8e1
  t116 = lax_cond(0.1e1 < t114, 1, t114)
  t117 = t116 ** 2
  t120 = jnp.logical_or(r0 <= p.dens_threshold, t30)
  t122 = jnp.cbrt(0.1e1 / jnp.pi)
  t123 = t72 * t122
  t124 = jnp.cbrt(4)
  t125 = t124 ** 2
  t126 = 0.1e1 / t65
  t128 = t123 * t125 * t126
  t131 = jnp.sqrt(t128)
  t134 = t128 ** 0.15e1
  t136 = t72 ** 2
  t137 = t122 ** 2
  t138 = t136 * t137
  t139 = 0.1e1 / t66
  t141 = t138 * t124 * t139
  t147 = jnp.log(0.1e1 + 0.16081979498692535067e2 / (0.379785e1 * t131 + 0.8969 * t128 + 0.204775 * t134 + 0.123235 * t141))
  t149 = 0.621814e-1 * (0.1e1 + 0.53425e-1 * t128) * t147
  t150 = t37 ** 2
  t151 = t45 <= p.zeta_threshold
  t152 = jnp.cbrt(p.zeta_threshold)
  t153 = t152 * p.zeta_threshold
  t154 = lax_cond(t151, t153, t79)
  t155 = t57 <= p.zeta_threshold
  t156 = lax_cond(t155, t153, t82)
  t157 = t154 + t156 - 0.2e1
  t159 = jnp.cbrt(2)
  t162 = 0.1e1 / (0.2e1 * t159 - 0.2e1)
  t173 = jnp.log(0.1e1 + 0.32163958997385070134e2 / (0.705945e1 * t131 + 0.1549425e1 * t128 + 0.420775 * t134 + 0.1562925 * t141))
  t186 = jnp.log(0.1e1 + 0.29608749977793437516e2 / (0.51785e1 * t131 + 0.905775 * t128 + 0.1100325 * t134 + 0.1241775 * t141))
  t187 = (0.1e1 + 0.278125e-1 * t128) * t186
  t189 = -0.310907e-1 * (0.1e1 + 0.5137e-1 * t128) * t173 + t149 - 0.19751673498613801407e-1 * t187
  t191 = t150 * t157 * t162 * t189
  t194 = 0.19751673498613801407e-1 * t157 * t162 * t187
  t195 = jnp.log(0.2e1)
  t196 = 0.1e1 - t195
  t198 = t196 / t73
  t199 = t152 ** 2
  t200 = t78 ** 2
  t201 = lax_cond(t151, t199, t200)
  t202 = t81 ** 2
  t203 = lax_cond(t155, t199, t202)
  t205 = t201 / 0.2e1 + t203 / 0.2e1
  t206 = t205 ** 2
  t207 = t206 * t205
  t213 = (0.1e1 + 0.25e-1 * t128) / (0.1e1 + 0.4445e-1 * t128)
  t217 = t64 / t65 / t15 * t159
  t221 = 0.1e1 / t122 * t124
  t225 = 0.1e1 / t196
  t226 = t213 * t225
  t232 = jnp.exp(-(-t149 + t191 + t194) * t225 * t73 / t207)
  t235 = t73 / (t232 - 0.1e1)
  t236 = t64 ** 2
  t241 = t159 ** 2
  t242 = 0.1e1 / t66 / t20 * t241
  t243 = t206 ** 2
  t246 = 0.1e1 / t137
  t248 = t72 * t246 * t125
  t252 = t217 / t206 * t136 * t221 / 0.96e2 + 0.21720231316129303386e-4 * t226 * t235 * t236 * t242 / t243 * t248
  t254 = t225 * t73
  t264 = jnp.log(0.1e1 + 0.6672455060314922e-1 * t213 * t252 * t254 / (0.1e1 + 0.6672455060314922e-1 * t226 * t235 * t252))
  t267 = t198 * t207 * t264 - t149 + t191 + t194
  t270 = t123 * t125
  t271 = t126 * t159
  t273 = jnp.cbrt(0.1e1 / t45)
  t275 = t270 * t271 * t273
  t278 = jnp.sqrt(t275)
  t281 = t275 ** 0.15e1
  t283 = t138 * t124
  t284 = t139 * t241
  t285 = t273 ** 2
  t287 = t283 * t284 * t285
  t293 = jnp.log(0.1e1 + 0.16081979498692535067e2 / (0.379785e1 * t278 + 0.8969 * t275 + 0.204775 * t281 + 0.123235 * t287))
  t295 = 0.621814e-1 * (0.1e1 + 0.53425e-1 * t275) * t293
  t296 = 0.2e1 <= p.zeta_threshold
  t298 = lax_cond(t296, t153, 0.2e1 * t159)
  t299 = 0. <= p.zeta_threshold
  t300 = lax_cond(t299, t153, 0)
  t302 = (t298 + t300 - 0.2e1) * t162
  t313 = jnp.log(0.1e1 + 0.32163958997385070134e2 / (0.705945e1 * t278 + 0.1549425e1 * t275 + 0.420775 * t281 + 0.1562925 * t287))
  t326 = jnp.log(0.1e1 + 0.29608749977793437516e2 / (0.51785e1 * t278 + 0.905775 * t275 + 0.1100325 * t281 + 0.1241775 * t287))
  t327 = (0.1e1 + 0.278125e-1 * t275) * t326
  t330 = t302 * (-0.310907e-1 * (0.1e1 + 0.5137e-1 * t275) * t313 + t295 - 0.19751673498613801407e-1 * t327)
  t332 = 0.19751673498613801407e-1 * t302 * t327
  t333 = lax_cond(t296, t199, t241)
  t334 = lax_cond(t299, t199, 0)
  t336 = t333 / 0.2e1 + t334 / 0.2e1
  t337 = t336 ** 2
  t338 = t337 * t336
  t344 = (0.1e1 + 0.25e-1 * t275) / (0.1e1 + 0.4445e-1 * t275)
  t346 = 0.1e1 / t337 * t136
  t353 = t344 * t225
  t357 = t73 / t338
  t359 = jnp.exp(-(-t295 + t330 + t332) * t225 * t357)
  t362 = t73 / (t359 - 0.1e1)
  t363 = s0 ** 2
  t366 = t39 ** 2
  t370 = t337 ** 2
  t371 = 0.1e1 / t370
  t374 = t246 * t125
  t381 = t44 * t346 * t221 * t65 / t273 / 0.96e2 + 0.21720231316129303386e-4 * t353 * t362 * t363 / t40 / t366 / r0 * t371 * t72 * t374 * t66 / t285
  t392 = jnp.log(0.1e1 + 0.6672455060314922e-1 * t344 * t381 * t254 / (0.1e1 + 0.6672455060314922e-1 * t353 * t362 * t381))
  t395 = t198 * t338 * t392 - t295 + t330 + t332
  t397 = lax_cond(t267 < t395, t395, t267)
  t400 = lax_cond(t120, t267 * t29 / 0.2e1, t397 * t45 / 0.2e1)
  t402 = jnp.logical_or(r1 <= p.dens_threshold, t33)
  t406 = jnp.cbrt(0.1e1 / t57)
  t408 = t270 * t271 * t406
  t411 = jnp.sqrt(t408)
  t414 = t408 ** 0.15e1
  t416 = t406 ** 2
  t418 = t283 * t284 * t416
  t424 = jnp.log(0.1e1 + 0.16081979498692535067e2 / (0.379785e1 * t411 + 0.8969 * t408 + 0.204775 * t414 + 0.123235 * t418))
  t426 = 0.621814e-1 * (0.1e1 + 0.53425e-1 * t408) * t424
  t437 = jnp.log(0.1e1 + 0.32163958997385070134e2 / (0.705945e1 * t411 + 0.1549425e1 * t408 + 0.420775 * t414 + 0.1562925 * t418))
  t450 = jnp.log(0.1e1 + 0.29608749977793437516e2 / (0.51785e1 * t411 + 0.905775 * t408 + 0.1100325 * t414 + 0.1241775 * t418))
  t451 = (0.1e1 + 0.278125e-1 * t408) * t450
  t454 = t302 * (-0.310907e-1 * (0.1e1 + 0.5137e-1 * t408) * t437 + t426 - 0.19751673498613801407e-1 * t451)
  t456 = 0.19751673498613801407e-1 * t302 * t451
  t462 = (0.1e1 + 0.25e-1 * t408) / (0.1e1 + 0.4445e-1 * t408)
  t469 = t462 * t225
  t473 = jnp.exp(-(-t426 + t454 + t456) * t225 * t357)
  t476 = t73 / (t473 - 0.1e1)
  t477 = s2 ** 2
  t480 = t51 ** 2
  t492 = t56 * t346 * t221 * t65 / t406 / 0.96e2 + 0.21720231316129303386e-4 * t469 * t476 * t477 / t52 / t480 / r1 * t371 * t72 * t374 * t66 / t416
  t503 = jnp.log(0.1e1 + 0.6672455060314922e-1 * t462 * t492 * t254 / (0.1e1 + 0.6672455060314922e-1 * t469 * t476 * t492))
  t506 = t198 * t338 * t503 - t426 + t454 + t456
  t508 = lax_cond(t267 < t506, t506, t267)
  t511 = lax_cond(t402, t267 * t32 / 0.2e1, t508 * t57 / 0.2e1)
  t517 = jnp.cbrt(t29)
  t519 = lax_cond(t30, t153, t517 * t29)
  t520 = jnp.cbrt(t32)
  t522 = lax_cond(t33, t153, t520 * t32)
  t524 = (t519 + t522 - 0.2e1) * t162
  t526 = t18 * t21 * t524 * t189
  t528 = 0.19751673498613801407e-1 * t524 * t187
  t529 = t517 ** 2
  t530 = lax_cond(t30, t199, t529)
  t531 = t520 ** 2
  t532 = lax_cond(t33, t199, t531)
  t534 = t530 / 0.2e1 + t532 / 0.2e1
  t535 = t534 ** 2
  t536 = t535 * t534
  t547 = jnp.exp(-(-t149 + t526 + t528) * t225 * t73 / t536)
  t550 = t73 / (t547 - 0.1e1)
  t553 = t535 ** 2
  t559 = t217 / t535 * t136 * t221 / 0.96e2 + 0.21720231316129303386e-4 * t226 * t550 * t236 * t242 / t553 * t248
  t570 = jnp.log(0.1e1 + 0.6672455060314922e-1 * t213 * t559 * t254 / (0.1e1 + 0.6672455060314922e-1 * t226 * t550 * t559))
  t575 = -(0.1e1 + t93) * t117 * (t400 + t511) + (t93 * t117 + 0.1e1) * (t198 * t536 * t570 - t149 + t526 + t528)
  res = t575 * (params.d * t575 * t117 * t116 + 0.1e1)
  return res


def unpol(p, r, s=None, l=None, tau=None):
  params = p.params
  r0, s0, l0, tau0 = r, s, l, tau
  t2 = lax_cond(0 < 0, 0, 0)
  t4 = params.C0_c[0]
  t9 = 0.1e1 <= p.zeta_threshold
  t10 = p.zeta_threshold - 0.1e1
  t12 = lax_cond(t9, -t10, 0)
  t13 = lax_cond(t9, t10, t12)
  t14 = t13 ** 2
  t16 = jnp.cbrt(2)
  t17 = t16 ** 2
  t18 = s0 * t17
  t19 = r0 ** 2
  t20 = jnp.cbrt(r0)
  t21 = t20 ** 2
  t23 = 0.1e1 / t21 / t19
  t24 = 0.1e1 + t13
  t25 = t24 / 0.2e1
  t26 = jnp.cbrt(t25)
  t27 = t26 ** 2
  t31 = 0.1e1 - t13
  t32 = t31 / 0.2e1
  t33 = jnp.cbrt(t32)
  t34 = t33 ** 2
  t41 = jnp.cbrt(3)
  t42 = jnp.pi ** 2
  t43 = jnp.cbrt(t42)
  t44 = t43 ** 2
  t47 = jnp.cbrt(t24)
  t48 = t47 * t24
  t50 = jnp.cbrt(t31)
  t51 = t50 * t31
  t58 = (0.1e1 + (0.1e1 - t14) * (t18 * t23 * t27 * t25 + t18 * t23 * t34 * t32 - s0 * t23) * t41 / t44 * (0.1e1 / t48 + 0.1e1 / t51) / 0.24e2) ** 2
  t59 = t58 ** 2
  t62 = lax_cond(-t2 <= -0.999999999999, t4 + params.C0_c[1] + params.C0_c[2] + params.C0_c[3], t4 / t59)
  t68 = s0 / r0 / tau0 / 0.8e1
  t70 = lax_cond(0.1e1 < t68, 1, t68)
  t71 = t70 ** 2
  t75 = jnp.logical_or(r0 / 0.2e1 <= p.dens_threshold, t9)
  t77 = jnp.cbrt(0.1e1 / jnp.pi)
  t78 = t41 * t77
  t79 = jnp.cbrt(4)
  t80 = t79 ** 2
  t81 = 0.1e1 / t20
  t83 = t78 * t80 * t81
  t86 = jnp.sqrt(t83)
  t89 = t83 ** 0.15e1
  t91 = t41 ** 2
  t92 = t77 ** 2
  t93 = t91 * t92
  t94 = 0.1e1 / t21
  t96 = t93 * t79 * t94
  t102 = jnp.log(0.1e1 + 0.16081979498692535067e2 / (0.379785e1 * t86 + 0.8969 * t83 + 0.204775 * t89 + 0.123235 * t96))
  t103 = (0.1e1 + 0.53425e-1 * t83) * t102
  t105 = t14 ** 2
  t106 = t24 <= p.zeta_threshold
  t107 = jnp.cbrt(p.zeta_threshold)
  t108 = t107 * p.zeta_threshold
  t109 = lax_cond(t106, t108, t48)
  t110 = t31 <= p.zeta_threshold
  t111 = lax_cond(t110, t108, t51)
  t112 = t109 + t111 - 0.2e1
  t116 = 0.1e1 / (0.2e1 * t16 - 0.2e1)
  t127 = jnp.log(0.1e1 + 0.32163958997385070134e2 / (0.705945e1 * t86 + 0.1549425e1 * t83 + 0.420775 * t89 + 0.1562925 * t96))
  t130 = 0.621814e-1 * t103
  t141 = jnp.log(0.1e1 + 0.29608749977793437516e2 / (0.51785e1 * t86 + 0.905775 * t83 + 0.1100325 * t89 + 0.1241775 * t96))
  t142 = (0.1e1 + 0.278125e-1 * t83) * t141
  t146 = t105 * t112 * t116 * (-0.310907e-1 * (0.1e1 + 0.5137e-1 * t83) * t127 + t130 - 0.19751673498613801407e-1 * t142)
  t149 = t112 * t116 * t142
  t151 = jnp.log(0.2e1)
  t152 = 0.1e1 - t151
  t154 = t152 / t42
  t155 = t107 ** 2
  t156 = t47 ** 2
  t157 = lax_cond(t106, t155, t156)
  t158 = t50 ** 2
  t159 = lax_cond(t110, t155, t158)
  t161 = t157 / 0.2e1 + t159 / 0.2e1
  t162 = t161 ** 2
  t163 = t162 * t161
  t169 = (0.1e1 + 0.25e-1 * t83) / (0.1e1 + 0.4445e-1 * t83)
  t172 = s0 / t20 / t19
  t173 = t172 * t16
  t177 = 0.1e1 / t77 * t79
  t181 = 0.1e1 / t152
  t182 = t169 * t181
  t183 = 0.19751673498613801407e-1 * t149
  t189 = jnp.exp(-(-t130 + t146 + t183) * t181 * t42 / t163)
  t192 = t42 / (t189 - 0.1e1)
  t193 = s0 ** 2
  t196 = t19 ** 2
  t198 = 0.1e1 / t21 / t196
  t199 = t198 * t17
  t200 = t162 ** 2
  t203 = 0.1e1 / t92
  t205 = t41 * t203 * t80
  t209 = t173 / t162 * t91 * t177 / 0.96e2 + 0.21720231316129303386e-4 * t182 * t192 * t193 * t199 / t200 * t205
  t211 = t181 * t42
  t221 = jnp.log(0.1e1 + 0.6672455060314922e-1 * t169 * t209 * t211 / (0.1e1 + 0.6672455060314922e-1 * t182 * t192 * t209))
  t223 = t154 * t163 * t221
  t225 = -0.310907e-1 * t103 + t146 / 0.2e1 + 0.98758367493069007035e-2 * t149 + t223 / 0.2e1
  t226 = -t130 + t146 + t183 + t223
  t227 = t78 * t80
  t228 = t81 * t16
  t230 = jnp.cbrt(0.1e1 / t24)
  t232 = t227 * t228 * t230
  t235 = jnp.sqrt(t232)
  t238 = t232 ** 0.15e1
  t240 = t93 * t79
  t241 = t94 * t17
  t242 = t230 ** 2
  t244 = t240 * t241 * t242
  t250 = jnp.log(0.1e1 + 0.16081979498692535067e2 / (0.379785e1 * t235 + 0.8969 * t232 + 0.204775 * t238 + 0.123235 * t244))
  t252 = 0.621814e-1 * (0.1e1 + 0.53425e-1 * t232) * t250
  t253 = 0.2e1 <= p.zeta_threshold
  t255 = lax_cond(t253, t108, 0.2e1 * t16)
  t256 = 0. <= p.zeta_threshold
  t257 = lax_cond(t256, t108, 0)
  t259 = (t255 + t257 - 0.2e1) * t116
  t270 = jnp.log(0.1e1 + 0.32163958997385070134e2 / (0.705945e1 * t235 + 0.1549425e1 * t232 + 0.420775 * t238 + 0.1562925 * t244))
  t283 = jnp.log(0.1e1 + 0.29608749977793437516e2 / (0.51785e1 * t235 + 0.905775 * t232 + 0.1100325 * t238 + 0.1241775 * t244))
  t284 = (0.1e1 + 0.278125e-1 * t232) * t283
  t287 = t259 * (-0.310907e-1 * (0.1e1 + 0.5137e-1 * t232) * t270 + t252 - 0.19751673498613801407e-1 * t284)
  t289 = 0.19751673498613801407e-1 * t259 * t284
  t290 = lax_cond(t253, t155, t17)
  t291 = lax_cond(t256, t155, 0)
  t293 = t290 / 0.2e1 + t291 / 0.2e1
  t294 = t293 ** 2
  t295 = t294 * t293
  t301 = (0.1e1 + 0.25e-1 * t232) / (0.1e1 + 0.4445e-1 * t232)
  t304 = t172 / t294 * t91
  t310 = t301 * t181
  t314 = t42 / t295
  t316 = jnp.exp(-(-t252 + t287 + t289) * t181 * t314)
  t319 = t42 / (t316 - 0.1e1)
  t322 = t294 ** 2
  t325 = t198 / t322 * t41
  t326 = t203 * t80
  t333 = t304 * t177 * t17 / t230 / 0.96e2 + 0.43440462632258606772e-4 * t310 * t319 * t193 * t325 * t326 * t16 / t242
  t344 = jnp.log(0.1e1 + 0.6672455060314922e-1 * t301 * t333 * t211 / (0.1e1 + 0.6672455060314922e-1 * t310 * t319 * t333))
  t347 = t154 * t295 * t344 - t252 + t287 + t289
  t349 = lax_cond(t226 < t347, t347, t226)
  t352 = lax_cond(t75, t225, t349 * t24 / 0.2e1)
  t354 = jnp.cbrt(0.1e1 / t31)
  t356 = t227 * t228 * t354
  t359 = jnp.sqrt(t356)
  t362 = t356 ** 0.15e1
  t364 = t354 ** 2
  t366 = t240 * t241 * t364
  t372 = jnp.log(0.1e1 + 0.16081979498692535067e2 / (0.379785e1 * t359 + 0.8969 * t356 + 0.204775 * t362 + 0.123235 * t366))
  t374 = 0.621814e-1 * (0.1e1 + 0.53425e-1 * t356) * t372
  t385 = jnp.log(0.1e1 + 0.32163958997385070134e2 / (0.705945e1 * t359 + 0.1549425e1 * t356 + 0.420775 * t362 + 0.1562925 * t366))
  t398 = jnp.log(0.1e1 + 0.29608749977793437516e2 / (0.51785e1 * t359 + 0.905775 * t356 + 0.1100325 * t362 + 0.1241775 * t366))
  t399 = (0.1e1 + 0.278125e-1 * t356) * t398
  t402 = t259 * (-0.310907e-1 * (0.1e1 + 0.5137e-1 * t356) * t385 + t374 - 0.19751673498613801407e-1 * t399)
  t404 = 0.19751673498613801407e-1 * t259 * t399
  t410 = (0.1e1 + 0.25e-1 * t356) / (0.1e1 + 0.4445e-1 * t356)
  t416 = t410 * t181
  t420 = jnp.exp(-(-t374 + t402 + t404) * t181 * t314)
  t423 = t42 / (t420 - 0.1e1)
  t432 = t304 * t177 * t17 / t354 / 0.96e2 + 0.43440462632258606772e-4 * t416 * t423 * t193 * t325 * t326 * t16 / t364
  t443 = jnp.log(0.1e1 + 0.6672455060314922e-1 * t410 * t432 * t211 / (0.1e1 + 0.6672455060314922e-1 * t416 * t423 * t432))
  t446 = t154 * t295 * t443 - t374 + t402 + t404
  t448 = lax_cond(t226 < t446, t446, t226)
  t451 = lax_cond(t75, t225, t448 * t31 / 0.2e1)
  t456 = lax_cond(t9, t108, 1)
  t461 = 0.19751673498613801407e-1 * (0.2e1 * t456 - 0.2e1) * t116 * t142
  t462 = lax_cond(t9, t155, 1)
  t463 = t462 ** 2
  t464 = t463 * t462
  t475 = jnp.exp(-(-t130 + t461) * t181 * t42 / t464)
  t478 = t42 / (t475 - 0.1e1)
  t481 = t463 ** 2
  t487 = t173 / t463 * t91 * t177 / 0.96e2 + 0.21720231316129303386e-4 * t182 * t478 * t193 * t199 / t481 * t205
  t498 = jnp.log(0.1e1 + 0.6672455060314922e-1 * t169 * t487 * t211 / (0.1e1 + 0.6672455060314922e-1 * t182 * t478 * t487))
  t503 = -(0.1e1 + t62) * t71 * (t352 + t451) + (t62 * t71 + 0.1e1) * (t154 * t464 * t498 - t130 + t461)
  res = t503 * (params.d * t503 * t71 * t70 + 0.1e1)
  return res


def invoke(
  p: NamedTuple, rho: Callable, r: jnp.ndarray, mo: Optional[Callable] = None,
  deorbitalize: Optional[float] = None,
):
  args = rho_to_arguments(p, rho, r, mo, deorbitalize)
  code = pol if p.nspin == 2 else unpol
  dens = args[0] if p.nspin == 1 else sum(args[0])
  ret = lax.cond((dens < p.dens_threshold), lambda *_: 0.,
                 lambda *_: code(p, *args), None)
  return ret