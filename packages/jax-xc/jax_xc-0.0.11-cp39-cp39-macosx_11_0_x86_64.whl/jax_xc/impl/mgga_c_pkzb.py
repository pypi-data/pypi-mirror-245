"""Generated from mgga_c_pkzb.mpl."""

import jax
import jax.lax as lax
import jax.numpy as jnp
from jax.numpy import array as array
from jax.numpy import int32 as int32
from jax.numpy import nan as nan
from typing import Callable, Optional
from .utils import *


def pol(p, r, s=(None, None, None), l=(None, None), tau=(None, None)):
  params = p.params
  (r0, r1), (s0, s1, s2), (l0, l1), (tau0, tau1) = r, s, l, tau
  t1 = r0 ** 2
  t2 = jnp.cbrt(r0)
  t3 = t2 ** 2
  t6 = s0 / t3 / t1
  t7 = r0 - r1
  t8 = r0 + r1
  t10 = t7 / t8
  t11 = 0.1e1 + t10
  t12 = t11 / 0.2e1
  t13 = jnp.cbrt(t12)
  t14 = t13 ** 2
  t15 = t14 * t12
  t17 = r1 ** 2
  t18 = jnp.cbrt(r1)
  t19 = t18 ** 2
  t22 = s2 / t19 / t17
  t23 = 0.1e1 - t10
  t24 = t23 / 0.2e1
  t25 = jnp.cbrt(t24)
  t26 = t25 ** 2
  t27 = t26 * t24
  t30 = (t6 * t15 + t22 * t27) ** 2
  t40 = (tau0 / t3 / r0 * t15 + tau1 / t19 / r1 * t27) ** 2
  t45 = jnp.cbrt(3)
  t47 = jnp.cbrt(0.1e1 / jnp.pi)
  t48 = t45 * t47
  t49 = jnp.cbrt(4)
  t50 = t49 ** 2
  t51 = jnp.cbrt(t8)
  t52 = 0.1e1 / t51
  t54 = t48 * t50 * t52
  t57 = jnp.sqrt(t54)
  t60 = t54 ** 0.15e1
  t62 = t45 ** 2
  t63 = t47 ** 2
  t64 = t62 * t63
  t65 = t51 ** 2
  t66 = 0.1e1 / t65
  t68 = t64 * t49 * t66
  t74 = jnp.log(0.1e1 + 0.16081979498692535067e2 / (0.379785e1 * t57 + 0.8969 * t54 + 0.204775 * t60 + 0.123235 * t68))
  t76 = 0.621814e-1 * (0.1e1 + 0.53425e-1 * t54) * t74
  t77 = t7 ** 2
  t78 = t77 ** 2
  t79 = t8 ** 2
  t80 = t79 ** 2
  t83 = t11 <= p.zeta_threshold
  t84 = jnp.cbrt(p.zeta_threshold)
  t85 = t84 * p.zeta_threshold
  t86 = jnp.cbrt(t11)
  t88 = lax_cond(t83, t85, t86 * t11)
  t89 = t23 <= p.zeta_threshold
  t90 = jnp.cbrt(t23)
  t92 = lax_cond(t89, t85, t90 * t23)
  t94 = jnp.cbrt(2)
  t97 = 0.1e1 / (0.2e1 * t94 - 0.2e1)
  t98 = (t88 + t92 - 0.2e1) * t97
  t109 = jnp.log(0.1e1 + 0.32163958997385070134e2 / (0.705945e1 * t57 + 0.1549425e1 * t54 + 0.420775 * t60 + 0.1562925 * t68))
  t122 = jnp.log(0.1e1 + 0.29608749977793437516e2 / (0.51785e1 * t57 + 0.905775 * t54 + 0.1100325 * t60 + 0.1241775 * t68))
  t123 = (0.1e1 + 0.278125e-1 * t54) * t122
  t127 = t78 / t80 * t98 * (-0.310907e-1 * (0.1e1 + 0.5137e-1 * t54) * t109 + t76 - 0.19751673498613801407e-1 * t123)
  t129 = 0.19751673498613801407e-1 * t98 * t123
  t130 = jnp.log(0.2e1)
  t131 = 0.1e1 - t130
  t132 = jnp.pi ** 2
  t134 = t131 / t132
  t135 = t84 ** 2
  t136 = t86 ** 2
  t137 = lax_cond(t83, t135, t136)
  t138 = t90 ** 2
  t139 = lax_cond(t89, t135, t138)
  t141 = t137 / 0.2e1 + t139 / 0.2e1
  t142 = t141 ** 2
  t143 = t142 * t141
  t145 = s0 + 0.2e1 * s1 + s2
  t153 = 0.1e1 / t47 * t49
  t157 = 0.1e1 / t131
  t158 = t157 * t132
  t164 = jnp.exp(-(-t76 + t127 + t129) * t157 * t132 / t143)
  t166 = 0.1e1 / (t164 - 0.1e1)
  t167 = t145 ** 2
  t173 = t94 ** 2
  t174 = t142 ** 2
  t177 = 0.1e1 / t63
  t183 = t145 / t51 / t79 * t94 / t142 * t62 * t153 / 0.96e2 + 0.21720231316129303386e-4 * t158 * t166 * t167 / t65 / t80 * t173 / t174 * t45 * t177 * t50
  t194 = jnp.log(0.1e1 + 0.6672455060314922e-1 * t183 * t157 * t132 / (0.1e1 + 0.6672455060314922e-1 * t158 * t166 * t183))
  t199 = s0 ** 2
  t202 = tau0 ** 2
  t205 = jnp.logical_or(r0 <= p.dens_threshold, t83)
  t206 = t48 * t50
  t207 = t52 * t94
  t208 = 0.1e1 / t84
  t210 = lax_cond(t83, t208, 0.1e1 / t86)
  t212 = t206 * t207 * t210
  t215 = jnp.sqrt(t212)
  t218 = t212 ** 0.15e1
  t220 = t64 * t49
  t221 = t66 * t173
  t222 = t210 ** 2
  t224 = t220 * t221 * t222
  t230 = jnp.log(0.1e1 + 0.16081979498692535067e2 / (0.379785e1 * t215 + 0.8969 * t212 + 0.204775 * t218 + 0.123235 * t224))
  t232 = 0.621814e-1 * (0.1e1 + 0.53425e-1 * t212) * t230
  t233 = 0.2e1 <= p.zeta_threshold
  t235 = lax_cond(t233, t85, 0.2e1 * t94)
  t236 = 0. <= p.zeta_threshold
  t237 = lax_cond(t236, t85, 0)
  t239 = (t235 + t237 - 0.2e1) * t97
  t250 = jnp.log(0.1e1 + 0.32163958997385070134e2 / (0.705945e1 * t215 + 0.1549425e1 * t212 + 0.420775 * t218 + 0.1562925 * t224))
  t263 = jnp.log(0.1e1 + 0.29608749977793437516e2 / (0.51785e1 * t215 + 0.905775 * t212 + 0.1100325 * t218 + 0.1241775 * t224))
  t264 = (0.1e1 + 0.278125e-1 * t212) * t263
  t267 = t239 * (-0.310907e-1 * (0.1e1 + 0.5137e-1 * t212) * t250 + t232 - 0.19751673498613801407e-1 * t264)
  t269 = 0.19751673498613801407e-1 * t239 * t264
  t270 = lax_cond(t233, t135, t173)
  t271 = lax_cond(t236, t135, 0)
  t273 = t270 / 0.2e1 + t271 / 0.2e1
  t274 = t273 ** 2
  t275 = t274 * t273
  t277 = 0.1e1 / t274 * t62
  t287 = t132 / t275
  t289 = jnp.exp(-(-t232 + t267 + t269) * t157 * t287)
  t291 = 0.1e1 / (t289 - 0.1e1)
  t293 = t1 ** 2
  t299 = t274 ** 2
  t302 = 0.1e1 / t299 * t45 * t177
  t303 = t50 * t65
  t309 = t6 * t277 * t153 * t51 / t210 / 0.96e2 + 0.21720231316129303386e-4 * t158 * t291 * t199 / t2 / t293 / r0 * t302 * t303 / t222
  t320 = jnp.log(0.1e1 + 0.6672455060314922e-1 * t309 * t157 * t132 / (0.1e1 + 0.6672455060314922e-1 * t158 * t291 * t309))
  t324 = lax_cond(t83, p.zeta_threshold, t11)
  t327 = lax_cond(t205, 0, (t134 * t275 * t320 - t232 + t267 + t269) * t324 / 0.2e1)
  t331 = s2 ** 2
  t334 = tau1 ** 2
  t337 = jnp.logical_or(r1 <= p.dens_threshold, t89)
  t339 = lax_cond(t89, t208, 0.1e1 / t90)
  t341 = t206 * t207 * t339
  t344 = jnp.sqrt(t341)
  t347 = t341 ** 0.15e1
  t349 = t339 ** 2
  t351 = t220 * t221 * t349
  t357 = jnp.log(0.1e1 + 0.16081979498692535067e2 / (0.379785e1 * t344 + 0.8969 * t341 + 0.204775 * t347 + 0.123235 * t351))
  t359 = 0.621814e-1 * (0.1e1 + 0.53425e-1 * t341) * t357
  t370 = jnp.log(0.1e1 + 0.32163958997385070134e2 / (0.705945e1 * t344 + 0.1549425e1 * t341 + 0.420775 * t347 + 0.1562925 * t351))
  t383 = jnp.log(0.1e1 + 0.29608749977793437516e2 / (0.51785e1 * t344 + 0.905775 * t341 + 0.1100325 * t347 + 0.1241775 * t351))
  t384 = (0.1e1 + 0.278125e-1 * t341) * t383
  t387 = t239 * (-0.310907e-1 * (0.1e1 + 0.5137e-1 * t341) * t370 + t359 - 0.19751673498613801407e-1 * t384)
  t389 = 0.19751673498613801407e-1 * t239 * t384
  t399 = jnp.exp(-(-t359 + t387 + t389) * t157 * t287)
  t401 = 0.1e1 / (t399 - 0.1e1)
  t403 = t17 ** 2
  t414 = t22 * t277 * t153 * t51 / t339 / 0.96e2 + 0.21720231316129303386e-4 * t158 * t401 * t331 / t18 / t403 / r1 * t302 * t303 / t349
  t425 = jnp.log(0.1e1 + 0.6672455060314922e-1 * t414 * t157 * t132 / (0.1e1 + 0.6672455060314922e-1 * t158 * t401 * t414))
  t429 = lax_cond(t89, p.zeta_threshold, t23)
  t432 = lax_cond(t337, 0, (t134 * t275 * t425 - t359 + t387 + t389) * t429 / 0.2e1)
  res = (0.1e1 + 0.828125e-2 * t30 / t40) * (t134 * t143 * t194 + t127 + t129 - t76) - 0.2390625e-1 * t199 / t1 / t202 * t327 - 0.2390625e-1 * t331 / t17 / t334 * t432
  return res


def unpol(p, r, s=None, l=None, tau=None):
  params = p.params
  r0, s0, l0, tau0 = r, s, l, tau
  t1 = s0 ** 2
  t2 = r0 ** 2
  t4 = t1 / t2
  t5 = tau0 ** 2
  t6 = 0.1e1 / t5
  t10 = jnp.cbrt(3)
  t12 = jnp.cbrt(0.1e1 / jnp.pi)
  t13 = t10 * t12
  t14 = jnp.cbrt(4)
  t15 = t14 ** 2
  t16 = jnp.cbrt(r0)
  t17 = 0.1e1 / t16
  t19 = t13 * t15 * t17
  t22 = jnp.sqrt(t19)
  t25 = t19 ** 0.15e1
  t27 = t10 ** 2
  t28 = t12 ** 2
  t29 = t27 * t28
  t30 = t16 ** 2
  t31 = 0.1e1 / t30
  t33 = t29 * t14 * t31
  t39 = jnp.log(0.1e1 + 0.16081979498692535067e2 / (0.379785e1 * t22 + 0.8969 * t19 + 0.204775 * t25 + 0.123235 * t33))
  t41 = 0.621814e-1 * (0.1e1 + 0.53425e-1 * t19) * t39
  t42 = 0.1e1 <= p.zeta_threshold
  t43 = jnp.cbrt(p.zeta_threshold)
  t44 = t43 * p.zeta_threshold
  t45 = lax_cond(t42, t44, 1)
  t48 = jnp.cbrt(2)
  t51 = 0.1e1 / (0.2e1 * t48 - 0.2e1)
  t63 = jnp.log(0.1e1 + 0.29608749977793437516e2 / (0.51785e1 * t22 + 0.905775 * t19 + 0.1100325 * t25 + 0.1241775 * t33))
  t66 = 0.19751673498613801407e-1 * (0.2e1 * t45 - 0.2e1) * t51 * (0.1e1 + 0.278125e-1 * t19) * t63
  t67 = jnp.log(0.2e1)
  t68 = 0.1e1 - t67
  t69 = jnp.pi ** 2
  t71 = t68 / t69
  t72 = t43 ** 2
  t73 = lax_cond(t42, t72, 1)
  t74 = t73 ** 2
  t75 = t74 * t73
  t78 = s0 / t16 / t2
  t83 = 0.1e1 / t12 * t14
  t87 = 0.1e1 / t68
  t88 = t87 * t69
  t94 = jnp.exp(-(-t41 + t66) * t87 * t69 / t75)
  t96 = 0.1e1 / (t94 - 0.1e1)
  t98 = t2 ** 2
  t100 = 0.1e1 / t30 / t98
  t103 = t48 ** 2
  t104 = t74 ** 2
  t107 = 0.1e1 / t28
  t113 = t78 * t48 / t74 * t27 * t83 / 0.96e2 + 0.21720231316129303386e-4 * t88 * t96 * t1 * t100 * t103 / t104 * t10 * t107 * t15
  t124 = jnp.log(0.1e1 + 0.6672455060314922e-1 * t113 * t87 * t69 / (0.1e1 + 0.6672455060314922e-1 * t88 * t96 * t113))
  t131 = jnp.logical_or(r0 / 0.2e1 <= p.dens_threshold, t42)
  t135 = lax_cond(t42, 0.1e1 / t43, 1)
  t137 = t13 * t15 * t17 * t48 * t135
  t140 = jnp.sqrt(t137)
  t143 = t137 ** 0.15e1
  t147 = t135 ** 2
  t149 = t29 * t14 * t31 * t103 * t147
  t155 = jnp.log(0.1e1 + 0.16081979498692535067e2 / (0.379785e1 * t140 + 0.8969 * t137 + 0.204775 * t143 + 0.123235 * t149))
  t157 = 0.621814e-1 * (0.1e1 + 0.53425e-1 * t137) * t155
  t158 = 0.2e1 <= p.zeta_threshold
  t160 = lax_cond(t158, t44, 0.2e1 * t48)
  t161 = 0. <= p.zeta_threshold
  t162 = lax_cond(t161, t44, 0)
  t164 = (t160 + t162 - 0.2e1) * t51
  t175 = jnp.log(0.1e1 + 0.32163958997385070134e2 / (0.705945e1 * t140 + 0.1549425e1 * t137 + 0.420775 * t143 + 0.1562925 * t149))
  t188 = jnp.log(0.1e1 + 0.29608749977793437516e2 / (0.51785e1 * t140 + 0.905775 * t137 + 0.1100325 * t143 + 0.1241775 * t149))
  t189 = (0.1e1 + 0.278125e-1 * t137) * t188
  t192 = t164 * (-0.310907e-1 * (0.1e1 + 0.5137e-1 * t137) * t175 + t157 - 0.19751673498613801407e-1 * t189)
  t194 = 0.19751673498613801407e-1 * t164 * t189
  t195 = lax_cond(t158, t72, t103)
  t196 = lax_cond(t161, t72, 0)
  t198 = t195 / 0.2e1 + t196 / 0.2e1
  t199 = t198 ** 2
  t200 = t199 * t198
  t214 = jnp.exp(-(-t157 + t192 + t194) * t87 * t69 / t200)
  t216 = 0.1e1 / (t214 - 0.1e1)
  t220 = t199 ** 2
  t230 = t78 / t199 * t27 * t83 * t103 / t135 / 0.96e2 + 0.43440462632258606772e-4 * t88 * t216 * t1 * t100 / t220 * t10 * t107 * t15 * t48 / t147
  t241 = jnp.log(0.1e1 + 0.6672455060314922e-1 * t230 * t87 * t69 / (0.1e1 + 0.6672455060314922e-1 * t88 * t216 * t230))
  t245 = lax_cond(t42, p.zeta_threshold, 1)
  t248 = lax_cond(t131, 0, (t71 * t200 * t241 - t157 + t192 + t194) * t245 / 0.2e1)
  res = (0.1e1 + 0.828125e-2 * t4 * t6) * (t71 * t75 * t124 - t41 + t66) - 0.478125e-1 * t4 * t6 * t248
  return res


def invoke(
  p: NamedTuple, rho: Callable, r: jnp.ndarray, mo: Optional[Callable] = None,
  deorbitalize: Optional[float] = None,
):
  args = rho_to_arguments(p, rho, r, mo, deorbitalize)
  code = pol if p.nspin == 2 else unpol
  dens = args[0] if p.nspin == 1 else sum(args[0])
  ret = lax.cond((dens < p.dens_threshold), lambda *_: 0.,
                 lambda *_: code(p, *args), None)
  return ret