import jax
import jax.numpy as jnp
import ctypes
from collections import namedtuple
from typing import Callable, Optional
from . import impl
from .utils import get_p

def invoke(p, rho, r, mo=None):
  if p.maple_name == "DEORBITALIZE":
    p0, p1 = (p.func_aux[0], p.func_aux[1])
    deo = invoke(p1, rho, r, mo)
    return invoke(p0, rho, r, mo, deo)
  elif p.maple_name == "":
    return sum(
      [
        coeff * invoke(fn_p, rho, r, mo)
        for fn_p, coeff in zip(p.func_aux, p.mix_coef)
      ]
    )
  else:
    return getattr(impl, p.maple_name).invoke(p, rho, r, mo)
  

def lda_x(
  polarized: bool = True,
) -> Callable:
  r"""
  P. A. M. Dirac.,  Math. Proc. Cambridge Philos. Soc. 26, 376 (1930)
  `10.1017/S0305004100016108 <http://journals.cambridge.org/article_S0305004100016108>`_

  F. Bloch.,  Z. Phys. 57, 545 (1929)
  `10.1007/BF01340281 <http://link.springer.com/article/10.1007\%2FBF01340281>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("lda_x", polarized, )
  def _lda_x_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of lda_x.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _lda_x_epsilon_xc

def lda_c_wigner(
  polarized: bool = True,
  _a: Optional[float] = None,
  _b: Optional[float] = None,
) -> Callable:
  r"""
  E. Wigner.,  Trans. Faraday Soc. 34, 678 (1938)
  `10.1039/TF9383400678 <10.1039/TF9383400678>`_

  P. A. Stewart and P. M. W. Gill.,  J. Chem. Soc., Faraday Trans. 91, 4337-4341 (1995)
  `10.1039/FT9959104337 <http://doi.org/10.1039/FT9959104337>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a : Optional[float], default: -0.44
    a parameter
  _b : Optional[float], default: 7.8
    b parameter
  """
  _a = (_a or -0.44)
  _b = (_b or 7.8)
  p = get_p("lda_c_wigner", polarized, _a, _b)
  def _lda_c_wigner_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of lda_c_wigner.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _lda_c_wigner_epsilon_xc

def lda_c_rpa(
  polarized: bool = True,
) -> Callable:
  r"""
  M. Gell-Mann and K. A. Brueckner.,  Phys. Rev. 106, 364 (1957)
  `10.1103/PhysRev.106.364 <http://link.aps.org/doi/10.1103/PhysRev.106.364>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("lda_c_rpa", polarized, )
  def _lda_c_rpa_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of lda_c_rpa.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _lda_c_rpa_epsilon_xc

def lda_c_hl(
  polarized: bool = True,
  _r0: Optional[float] = None,
  _r1: Optional[float] = None,
  _c0: Optional[float] = None,
  _c1: Optional[float] = None,
) -> Callable:
  r"""
  L. Hedin and B. I. Lundqvist.,  J. Phys. C: Solid State Phys. 4, 2064 (1971)
  `10.1088/0022-3719/4/14/022 <http://stacks.iop.org/0022-3719/4/i=14/a=022>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _r0 : Optional[float], default: 21.0
    r0 parameter
  _r1 : Optional[float], default: 21.0
    r1 parameter
  _c0 : Optional[float], default: 0.0225
    c0 parameter
  _c1 : Optional[float], default: 0.0225
    c1 parameter
  """
  _r0 = (_r0 or 21.0)
  _r1 = (_r1 or 21.0)
  _c0 = (_c0 or 0.0225)
  _c1 = (_c1 or 0.0225)
  p = get_p("lda_c_hl", polarized, _r0, _r1, _c0, _c1)
  def _lda_c_hl_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of lda_c_hl.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _lda_c_hl_epsilon_xc

def lda_c_gl(
  polarized: bool = True,
  _r0: Optional[float] = None,
  _r1: Optional[float] = None,
  _c0: Optional[float] = None,
  _c1: Optional[float] = None,
) -> Callable:
  r"""
  O. Gunnarsson and B. I. Lundqvist.,  Phys. Rev. B 13, 4274 (1976)
  `10.1103/PhysRevB.13.4274 <http://link.aps.org/doi/10.1103/PhysRevB.13.4274>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _r0 : Optional[float], default: 11.4
    r0 parameter
  _r1 : Optional[float], default: 15.9
    r1 parameter
  _c0 : Optional[float], default: 0.0333
    c0 parameter
  _c1 : Optional[float], default: 0.0203
    c1 parameter
  """
  _r0 = (_r0 or 11.4)
  _r1 = (_r1 or 15.9)
  _c0 = (_c0 or 0.0333)
  _c1 = (_c1 or 0.0203)
  p = get_p("lda_c_gl", polarized, _r0, _r1, _c0, _c1)
  def _lda_c_gl_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of lda_c_gl.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _lda_c_gl_epsilon_xc

def lda_c_xalpha(
  polarized: bool = True,
  alpha: Optional[float] = None,
) -> Callable:
  r"""
  J. C. Slater.,  Phys. Rev. 81, 385 (1951)
  `10.1103/PhysRev.81.385 <http://link.aps.org/doi/10.1103/PhysRev.81.385>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  alpha : Optional[float], default: 1.0
    X-alpha multiplicative parameter
  """
  alpha = (alpha or 1.0)
  p = get_p("lda_c_xalpha", polarized, alpha)
  def _lda_c_xalpha_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of lda_c_xalpha.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _lda_c_xalpha_epsilon_xc

def lda_c_vwn(
  polarized: bool = True,
) -> Callable:
  r"""
  S. H. Vosko, L. Wilk, and M. Nusair.,  Can. J. Phys. 58, 1200 (1980)
  `10.1139/p80-159 <http://www.nrcresearchpress.com/doi/abs/10.1139/p80-159>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("lda_c_vwn", polarized, )
  def _lda_c_vwn_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of lda_c_vwn.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _lda_c_vwn_epsilon_xc

def lda_c_vwn_rpa(
  polarized: bool = True,
) -> Callable:
  r"""
  S. H. Vosko, L. Wilk, and M. Nusair.,  Can. J. Phys. 58, 1200 (1980)
  `10.1139/p80-159 <http://www.nrcresearchpress.com/doi/abs/10.1139/p80-159>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("lda_c_vwn_rpa", polarized, )
  def _lda_c_vwn_rpa_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of lda_c_vwn_rpa.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _lda_c_vwn_rpa_epsilon_xc

def lda_c_pz(
  polarized: bool = True,
  _gamma0: Optional[float] = None,
  _gamma1: Optional[float] = None,
  _beta10: Optional[float] = None,
  _beta11: Optional[float] = None,
  _beta20: Optional[float] = None,
  _beta21: Optional[float] = None,
  _a0: Optional[float] = None,
  _a1: Optional[float] = None,
  _b0: Optional[float] = None,
  _b1: Optional[float] = None,
  _c0: Optional[float] = None,
  _c1: Optional[float] = None,
  _d0: Optional[float] = None,
  _d1: Optional[float] = None,
) -> Callable:
  r"""
  J. P. Perdew and A. Zunger.,  Phys. Rev. B 23, 5048 (1981)
  `10.1103/PhysRevB.23.5048 <http://link.aps.org/doi/10.1103/PhysRevB.23.5048>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _gamma0 : Optional[float], default: -0.1423
    gamma0 parameter
  _gamma1 : Optional[float], default: -0.0843
    gamma1 parameter
  _beta10 : Optional[float], default: 1.0529
    beta10 parameter
  _beta11 : Optional[float], default: 1.3981
    beta11 parameter
  _beta20 : Optional[float], default: 0.3334
    beta20 parameter
  _beta21 : Optional[float], default: 0.2611
    beta21 parameter
  _a0 : Optional[float], default: 0.0311
    a0 parameter
  _a1 : Optional[float], default: 0.01555
    a1 parameter
  _b0 : Optional[float], default: -0.048
    b0 parameter
  _b1 : Optional[float], default: -0.0269
    b1 parameter
  _c0 : Optional[float], default: 0.002
    c0 parameter
  _c1 : Optional[float], default: 0.0007
    c1 parameter
  _d0 : Optional[float], default: -0.0116
    d0 parameter
  _d1 : Optional[float], default: -0.0048
    d1 parameter
  """
  _gamma0 = (_gamma0 or -0.1423)
  _gamma1 = (_gamma1 or -0.0843)
  _beta10 = (_beta10 or 1.0529)
  _beta11 = (_beta11 or 1.3981)
  _beta20 = (_beta20 or 0.3334)
  _beta21 = (_beta21 or 0.2611)
  _a0 = (_a0 or 0.0311)
  _a1 = (_a1 or 0.01555)
  _b0 = (_b0 or -0.048)
  _b1 = (_b1 or -0.0269)
  _c0 = (_c0 or 0.002)
  _c1 = (_c1 or 0.0007)
  _d0 = (_d0 or -0.0116)
  _d1 = (_d1 or -0.0048)
  p = get_p("lda_c_pz", polarized, _gamma0, _gamma1, _beta10, _beta11, _beta20, _beta21, _a0, _a1, _b0, _b1, _c0, _c1, _d0, _d1)
  def _lda_c_pz_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of lda_c_pz.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _lda_c_pz_epsilon_xc

def lda_c_pz_mod(
  polarized: bool = True,
  _gamma0: Optional[float] = None,
  _gamma1: Optional[float] = None,
  _beta10: Optional[float] = None,
  _beta11: Optional[float] = None,
  _beta20: Optional[float] = None,
  _beta21: Optional[float] = None,
  _a0: Optional[float] = None,
  _a1: Optional[float] = None,
  _b0: Optional[float] = None,
  _b1: Optional[float] = None,
  _c0: Optional[float] = None,
  _c1: Optional[float] = None,
  _d0: Optional[float] = None,
  _d1: Optional[float] = None,
) -> Callable:
  r"""
  J. P. Perdew and A. Zunger.,  Phys. Rev. B 23, 5048 (1981)
  `10.1103/PhysRevB.23.5048 <http://link.aps.org/doi/10.1103/PhysRevB.23.5048>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _gamma0 : Optional[float], default: -0.1423
    gamma0 parameter
  _gamma1 : Optional[float], default: -0.0843
    gamma1 parameter
  _beta10 : Optional[float], default: 1.0529
    beta10 parameter
  _beta11 : Optional[float], default: 1.3981
    beta11 parameter
  _beta20 : Optional[float], default: 0.3334
    beta20 parameter
  _beta21 : Optional[float], default: 0.2611
    beta21 parameter
  _a0 : Optional[float], default: 0.0311
    a0 parameter
  _a1 : Optional[float], default: 0.01555
    a1 parameter
  _b0 : Optional[float], default: -0.048
    b0 parameter
  _b1 : Optional[float], default: -0.0269
    b1 parameter
  _c0 : Optional[float], default: 0.0020191519406228
    c0 parameter
  _c1 : Optional[float], default: 0.00069255121311694
    c1 parameter
  _d0 : Optional[float], default: -0.011632066378913
    d0 parameter
  _d1 : Optional[float], default: -0.00480126353790614
    d1 parameter
  """
  _gamma0 = (_gamma0 or -0.1423)
  _gamma1 = (_gamma1 or -0.0843)
  _beta10 = (_beta10 or 1.0529)
  _beta11 = (_beta11 or 1.3981)
  _beta20 = (_beta20 or 0.3334)
  _beta21 = (_beta21 or 0.2611)
  _a0 = (_a0 or 0.0311)
  _a1 = (_a1 or 0.01555)
  _b0 = (_b0 or -0.048)
  _b1 = (_b1 or -0.0269)
  _c0 = (_c0 or 0.0020191519406228)
  _c1 = (_c1 or 0.00069255121311694)
  _d0 = (_d0 or -0.011632066378913)
  _d1 = (_d1 or -0.00480126353790614)
  p = get_p("lda_c_pz_mod", polarized, _gamma0, _gamma1, _beta10, _beta11, _beta20, _beta21, _a0, _a1, _b0, _b1, _c0, _c1, _d0, _d1)
  def _lda_c_pz_mod_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of lda_c_pz_mod.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _lda_c_pz_mod_epsilon_xc

def lda_c_ob_pz(
  polarized: bool = True,
  _gamma0: Optional[float] = None,
  _gamma1: Optional[float] = None,
  _beta10: Optional[float] = None,
  _beta11: Optional[float] = None,
  _beta20: Optional[float] = None,
  _beta21: Optional[float] = None,
  _a0: Optional[float] = None,
  _a1: Optional[float] = None,
  _b0: Optional[float] = None,
  _b1: Optional[float] = None,
  _c0: Optional[float] = None,
  _c1: Optional[float] = None,
  _d0: Optional[float] = None,
  _d1: Optional[float] = None,
) -> Callable:
  r"""
  G. Ortiz and P. Ballone.,  Phys. Rev. B 50, 1391 (1994)
  `10.1103/PhysRevB.50.1391 <http://link.aps.org/doi/10.1103/PhysRevB.50.1391>`_

  G. Ortiz and P. Ballone.,  Phys. Rev. B 56, 9970 (1997)
  `10.1103/PhysRevB.56.9970 <http://link.aps.org/doi/10.1103/PhysRevB.56.9970>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _gamma0 : Optional[float], default: -0.103756
    gamma0 parameter
  _gamma1 : Optional[float], default: -0.065951
    gamma1 parameter
  _beta10 : Optional[float], default: 0.56371
    beta10 parameter
  _beta11 : Optional[float], default: 1.11846
    beta11 parameter
  _beta20 : Optional[float], default: 0.27358
    beta20 parameter
  _beta21 : Optional[float], default: 0.18797
    beta21 parameter
  _a0 : Optional[float], default: 0.031091
    a0 parameter
  _a1 : Optional[float], default: 0.015545
    a1 parameter
  _b0 : Optional[float], default: -0.046644
    b0 parameter
  _b1 : Optional[float], default: -0.025599
    b1 parameter
  _c0 : Optional[float], default: 0.00419
    c0 parameter
  _c1 : Optional[float], default: 0.00329
    c1 parameter
  _d0 : Optional[float], default: -0.00983
    d0 parameter
  _d1 : Optional[float], default: -0.003
    d1 parameter
  """
  _gamma0 = (_gamma0 or -0.103756)
  _gamma1 = (_gamma1 or -0.065951)
  _beta10 = (_beta10 or 0.56371)
  _beta11 = (_beta11 or 1.11846)
  _beta20 = (_beta20 or 0.27358)
  _beta21 = (_beta21 or 0.18797)
  _a0 = (_a0 or 0.031091)
  _a1 = (_a1 or 0.015545)
  _b0 = (_b0 or -0.046644)
  _b1 = (_b1 or -0.025599)
  _c0 = (_c0 or 0.00419)
  _c1 = (_c1 or 0.00329)
  _d0 = (_d0 or -0.00983)
  _d1 = (_d1 or -0.003)
  p = get_p("lda_c_ob_pz", polarized, _gamma0, _gamma1, _beta10, _beta11, _beta20, _beta21, _a0, _a1, _b0, _b1, _c0, _c1, _d0, _d1)
  def _lda_c_ob_pz_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of lda_c_ob_pz.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _lda_c_ob_pz_epsilon_xc

def lda_c_pw(
  polarized: bool = True,
  _pp_0_: Optional[float] = None,
  _pp_1_: Optional[float] = None,
  _pp_2_: Optional[float] = None,
  _a_0_: Optional[float] = None,
  _a_1_: Optional[float] = None,
  _a_2_: Optional[float] = None,
  _alpha1_0_: Optional[float] = None,
  _alpha1_1_: Optional[float] = None,
  _alpha1_2_: Optional[float] = None,
  _beta1_0_: Optional[float] = None,
  _beta1_1_: Optional[float] = None,
  _beta1_2_: Optional[float] = None,
  _beta2_0_: Optional[float] = None,
  _beta2_1_: Optional[float] = None,
  _beta2_2_: Optional[float] = None,
  _beta3_0_: Optional[float] = None,
  _beta3_1_: Optional[float] = None,
  _beta3_2_: Optional[float] = None,
  _beta4_0_: Optional[float] = None,
  _beta4_1_: Optional[float] = None,
  _beta4_2_: Optional[float] = None,
  _fz20: Optional[float] = None,
) -> Callable:
  r"""
  J. P. Perdew and Y. Wang.,  Phys. Rev. B 45, 13244 (1992)
  `10.1103/PhysRevB.45.13244 <http://link.aps.org/doi/10.1103/PhysRevB.45.13244>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _pp_0_ : Optional[float], default: 1.0
    pp0
  _pp_1_ : Optional[float], default: 1.0
    pp1
  _pp_2_ : Optional[float], default: 1.0
    pp2
  _a_0_ : Optional[float], default: 0.031091
    a0
  _a_1_ : Optional[float], default: 0.015545
    a1
  _a_2_ : Optional[float], default: 0.016887
    a2
  _alpha1_0_ : Optional[float], default: 0.2137
    alpha10
  _alpha1_1_ : Optional[float], default: 0.20548
    alpha11
  _alpha1_2_ : Optional[float], default: 0.11125
    alpha12
  _beta1_0_ : Optional[float], default: 7.5957
    beta10
  _beta1_1_ : Optional[float], default: 14.1189
    beta11
  _beta1_2_ : Optional[float], default: 10.357
    beta12
  _beta2_0_ : Optional[float], default: 3.5876
    beta20
  _beta2_1_ : Optional[float], default: 6.1977
    beta21
  _beta2_2_ : Optional[float], default: 3.6231
    beta22
  _beta3_0_ : Optional[float], default: 1.6382
    beta30
  _beta3_1_ : Optional[float], default: 3.3662
    beta31
  _beta3_2_ : Optional[float], default: 0.88026
    beta32
  _beta4_0_ : Optional[float], default: 0.49294
    beta40
  _beta4_1_ : Optional[float], default: 0.62517
    beta41
  _beta4_2_ : Optional[float], default: 0.49671
    beta42
  _fz20 : Optional[float], default: 1.709921
    fz20
  """
  _pp_0_ = (_pp_0_ or 1.0)
  _pp_1_ = (_pp_1_ or 1.0)
  _pp_2_ = (_pp_2_ or 1.0)
  _a_0_ = (_a_0_ or 0.031091)
  _a_1_ = (_a_1_ or 0.015545)
  _a_2_ = (_a_2_ or 0.016887)
  _alpha1_0_ = (_alpha1_0_ or 0.2137)
  _alpha1_1_ = (_alpha1_1_ or 0.20548)
  _alpha1_2_ = (_alpha1_2_ or 0.11125)
  _beta1_0_ = (_beta1_0_ or 7.5957)
  _beta1_1_ = (_beta1_1_ or 14.1189)
  _beta1_2_ = (_beta1_2_ or 10.357)
  _beta2_0_ = (_beta2_0_ or 3.5876)
  _beta2_1_ = (_beta2_1_ or 6.1977)
  _beta2_2_ = (_beta2_2_ or 3.6231)
  _beta3_0_ = (_beta3_0_ or 1.6382)
  _beta3_1_ = (_beta3_1_ or 3.3662)
  _beta3_2_ = (_beta3_2_ or 0.88026)
  _beta4_0_ = (_beta4_0_ or 0.49294)
  _beta4_1_ = (_beta4_1_ or 0.62517)
  _beta4_2_ = (_beta4_2_ or 0.49671)
  _fz20 = (_fz20 or 1.709921)
  p = get_p("lda_c_pw", polarized, _pp_0_, _pp_1_, _pp_2_, _a_0_, _a_1_, _a_2_, _alpha1_0_, _alpha1_1_, _alpha1_2_, _beta1_0_, _beta1_1_, _beta1_2_, _beta2_0_, _beta2_1_, _beta2_2_, _beta3_0_, _beta3_1_, _beta3_2_, _beta4_0_, _beta4_1_, _beta4_2_, _fz20)
  def _lda_c_pw_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of lda_c_pw.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _lda_c_pw_epsilon_xc

def lda_c_pw_mod(
  polarized: bool = True,
  _pp_0_: Optional[float] = None,
  _pp_1_: Optional[float] = None,
  _pp_2_: Optional[float] = None,
  _a_0_: Optional[float] = None,
  _a_1_: Optional[float] = None,
  _a_2_: Optional[float] = None,
  _alpha1_0_: Optional[float] = None,
  _alpha1_1_: Optional[float] = None,
  _alpha1_2_: Optional[float] = None,
  _beta1_0_: Optional[float] = None,
  _beta1_1_: Optional[float] = None,
  _beta1_2_: Optional[float] = None,
  _beta2_0_: Optional[float] = None,
  _beta2_1_: Optional[float] = None,
  _beta2_2_: Optional[float] = None,
  _beta3_0_: Optional[float] = None,
  _beta3_1_: Optional[float] = None,
  _beta3_2_: Optional[float] = None,
  _beta4_0_: Optional[float] = None,
  _beta4_1_: Optional[float] = None,
  _beta4_2_: Optional[float] = None,
  _fz20: Optional[float] = None,
) -> Callable:
  r"""
  J. P. Perdew and Y. Wang.,  Phys. Rev. B 45, 13244 (1992)
  `10.1103/PhysRevB.45.13244 <http://link.aps.org/doi/10.1103/PhysRevB.45.13244>`_

  Added extra digits to some constants as in the PBE routine (http://dft.rutgers.edu/pubs/PBE.asc).
  

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _pp_0_ : Optional[float], default: 1.0
    pp0
  _pp_1_ : Optional[float], default: 1.0
    pp1
  _pp_2_ : Optional[float], default: 1.0
    pp2
  _a_0_ : Optional[float], default: 0.0310907
    a0
  _a_1_ : Optional[float], default: 0.01554535
    a1
  _a_2_ : Optional[float], default: 0.0168869
    a2
  _alpha1_0_ : Optional[float], default: 0.2137
    alpha10
  _alpha1_1_ : Optional[float], default: 0.20548
    alpha11
  _alpha1_2_ : Optional[float], default: 0.11125
    alpha12
  _beta1_0_ : Optional[float], default: 7.5957
    beta10
  _beta1_1_ : Optional[float], default: 14.1189
    beta11
  _beta1_2_ : Optional[float], default: 10.357
    beta12
  _beta2_0_ : Optional[float], default: 3.5876
    beta20
  _beta2_1_ : Optional[float], default: 6.1977
    beta21
  _beta2_2_ : Optional[float], default: 3.6231
    beta22
  _beta3_0_ : Optional[float], default: 1.6382
    beta30
  _beta3_1_ : Optional[float], default: 3.3662
    beta31
  _beta3_2_ : Optional[float], default: 0.88026
    beta32
  _beta4_0_ : Optional[float], default: 0.49294
    beta40
  _beta4_1_ : Optional[float], default: 0.62517
    beta41
  _beta4_2_ : Optional[float], default: 0.49671
    beta42
  _fz20 : Optional[float], default: 1.7099209341613657
    fz20
  """
  _pp_0_ = (_pp_0_ or 1.0)
  _pp_1_ = (_pp_1_ or 1.0)
  _pp_2_ = (_pp_2_ or 1.0)
  _a_0_ = (_a_0_ or 0.0310907)
  _a_1_ = (_a_1_ or 0.01554535)
  _a_2_ = (_a_2_ or 0.0168869)
  _alpha1_0_ = (_alpha1_0_ or 0.2137)
  _alpha1_1_ = (_alpha1_1_ or 0.20548)
  _alpha1_2_ = (_alpha1_2_ or 0.11125)
  _beta1_0_ = (_beta1_0_ or 7.5957)
  _beta1_1_ = (_beta1_1_ or 14.1189)
  _beta1_2_ = (_beta1_2_ or 10.357)
  _beta2_0_ = (_beta2_0_ or 3.5876)
  _beta2_1_ = (_beta2_1_ or 6.1977)
  _beta2_2_ = (_beta2_2_ or 3.6231)
  _beta3_0_ = (_beta3_0_ or 1.6382)
  _beta3_1_ = (_beta3_1_ or 3.3662)
  _beta3_2_ = (_beta3_2_ or 0.88026)
  _beta4_0_ = (_beta4_0_ or 0.49294)
  _beta4_1_ = (_beta4_1_ or 0.62517)
  _beta4_2_ = (_beta4_2_ or 0.49671)
  _fz20 = (_fz20 or 1.7099209341613657)
  p = get_p("lda_c_pw_mod", polarized, _pp_0_, _pp_1_, _pp_2_, _a_0_, _a_1_, _a_2_, _alpha1_0_, _alpha1_1_, _alpha1_2_, _beta1_0_, _beta1_1_, _beta1_2_, _beta2_0_, _beta2_1_, _beta2_2_, _beta3_0_, _beta3_1_, _beta3_2_, _beta4_0_, _beta4_1_, _beta4_2_, _fz20)
  def _lda_c_pw_mod_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of lda_c_pw_mod.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _lda_c_pw_mod_epsilon_xc

def lda_c_ob_pw(
  polarized: bool = True,
  _pp_0_: Optional[float] = None,
  _pp_1_: Optional[float] = None,
  _pp_2_: Optional[float] = None,
  _a_0_: Optional[float] = None,
  _a_1_: Optional[float] = None,
  _a_2_: Optional[float] = None,
  _alpha1_0_: Optional[float] = None,
  _alpha1_1_: Optional[float] = None,
  _alpha1_2_: Optional[float] = None,
  _beta1_0_: Optional[float] = None,
  _beta1_1_: Optional[float] = None,
  _beta1_2_: Optional[float] = None,
  _beta2_0_: Optional[float] = None,
  _beta2_1_: Optional[float] = None,
  _beta2_2_: Optional[float] = None,
  _beta3_0_: Optional[float] = None,
  _beta3_1_: Optional[float] = None,
  _beta3_2_: Optional[float] = None,
  _beta4_0_: Optional[float] = None,
  _beta4_1_: Optional[float] = None,
  _beta4_2_: Optional[float] = None,
  _fz20: Optional[float] = None,
) -> Callable:
  r"""
  G. Ortiz and P. Ballone.,  Phys. Rev. B 50, 1391 (1994)
  `10.1103/PhysRevB.50.1391 <http://link.aps.org/doi/10.1103/PhysRevB.50.1391>`_

  G. Ortiz and P. Ballone.,  Phys. Rev. B 56, 9970 (1997)
  `10.1103/PhysRevB.56.9970 <http://link.aps.org/doi/10.1103/PhysRevB.56.9970>`_

  J. P. Perdew and Y. Wang.,  Phys. Rev. B 45, 13244 (1992)
  `10.1103/PhysRevB.45.13244 <http://link.aps.org/doi/10.1103/PhysRevB.45.13244>`_

  Added extra digits to some constants as in the PBE routine (http://dft.rutgers.edu/pubs/PBE.asc).
  

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _pp_0_ : Optional[float], default: 1.0
    pp0
  _pp_1_ : Optional[float], default: 1.0
    pp1
  _pp_2_ : Optional[float], default: 1.0
    pp2
  _a_0_ : Optional[float], default: 0.031091
    a0
  _a_1_ : Optional[float], default: 0.015545
    a1
  _a_2_ : Optional[float], default: 0.016887
    a2
  _alpha1_0_ : Optional[float], default: 0.026481
    alpha10
  _alpha1_1_ : Optional[float], default: 0.022465
    alpha11
  _alpha1_2_ : Optional[float], default: 0.11125
    alpha12
  _beta1_0_ : Optional[float], default: 7.5957
    beta10
  _beta1_1_ : Optional[float], default: 14.1189
    beta11
  _beta1_2_ : Optional[float], default: 10.357
    beta12
  _beta2_0_ : Optional[float], default: 3.5876
    beta20
  _beta2_1_ : Optional[float], default: 6.1977
    beta21
  _beta2_2_ : Optional[float], default: 3.6231
    beta22
  _beta3_0_ : Optional[float], default: -0.46647
    beta30
  _beta3_1_ : Optional[float], default: -0.56043
    beta31
  _beta3_2_ : Optional[float], default: 0.88026
    beta32
  _beta4_0_ : Optional[float], default: 0.13354
    beta40
  _beta4_1_ : Optional[float], default: 0.11313
    beta41
  _beta4_2_ : Optional[float], default: 0.49671
    beta42
  _fz20 : Optional[float], default: 1.709921
    fz20
  """
  _pp_0_ = (_pp_0_ or 1.0)
  _pp_1_ = (_pp_1_ or 1.0)
  _pp_2_ = (_pp_2_ or 1.0)
  _a_0_ = (_a_0_ or 0.031091)
  _a_1_ = (_a_1_ or 0.015545)
  _a_2_ = (_a_2_ or 0.016887)
  _alpha1_0_ = (_alpha1_0_ or 0.026481)
  _alpha1_1_ = (_alpha1_1_ or 0.022465)
  _alpha1_2_ = (_alpha1_2_ or 0.11125)
  _beta1_0_ = (_beta1_0_ or 7.5957)
  _beta1_1_ = (_beta1_1_ or 14.1189)
  _beta1_2_ = (_beta1_2_ or 10.357)
  _beta2_0_ = (_beta2_0_ or 3.5876)
  _beta2_1_ = (_beta2_1_ or 6.1977)
  _beta2_2_ = (_beta2_2_ or 3.6231)
  _beta3_0_ = (_beta3_0_ or -0.46647)
  _beta3_1_ = (_beta3_1_ or -0.56043)
  _beta3_2_ = (_beta3_2_ or 0.88026)
  _beta4_0_ = (_beta4_0_ or 0.13354)
  _beta4_1_ = (_beta4_1_ or 0.11313)
  _beta4_2_ = (_beta4_2_ or 0.49671)
  _fz20 = (_fz20 or 1.709921)
  p = get_p("lda_c_ob_pw", polarized, _pp_0_, _pp_1_, _pp_2_, _a_0_, _a_1_, _a_2_, _alpha1_0_, _alpha1_1_, _alpha1_2_, _beta1_0_, _beta1_1_, _beta1_2_, _beta2_0_, _beta2_1_, _beta2_2_, _beta3_0_, _beta3_1_, _beta3_2_, _beta4_0_, _beta4_1_, _beta4_2_, _fz20)
  def _lda_c_ob_pw_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of lda_c_ob_pw.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _lda_c_ob_pw_epsilon_xc

def lda_c_2d_amgb(
  polarized: bool = True,
) -> Callable:
  r"""
  C. Attaccalite, S. Moroni, P. Gori-Giorgi, and G. B. Bachelet.,  Phys. Rev. Lett. 88, 256601 (2002)
  `10.1103/PhysRevLett.88.256601 <http://link.aps.org/doi/10.1103/PhysRevLett.88.256601>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("lda_c_2d_amgb", polarized, )
  def _lda_c_2d_amgb_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of lda_c_2d_amgb.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _lda_c_2d_amgb_epsilon_xc

def lda_c_2d_prm(
  polarized: bool = True,
  N: Optional[float] = None,
) -> Callable:
  r"""
  S. Pittalis, E. Räsänen, and M. A. L. Marques.,  Phys. Rev. B 78, 195322 (2008)
  `10.1103/PhysRevB.78.195322 <http://link.aps.org/doi/10.1103/PhysRevB.78.195322>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  N : Optional[float], default: 2.0
    Number of electrons
  """
  N = (N or 2.0)
  p = get_p("lda_c_2d_prm", polarized, N)
  def _lda_c_2d_prm_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of lda_c_2d_prm.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _lda_c_2d_prm_epsilon_xc

def lda_c_vbh(
  polarized: bool = True,
  _r0: Optional[float] = None,
  _r1: Optional[float] = None,
  _c0: Optional[float] = None,
  _c1: Optional[float] = None,
) -> Callable:
  r"""
  U. von Barth and L. Hedin.,  J. Phys. C: Solid State Phys. 5, 1629 (1972)
  `10.1088/0022-3719/5/13/012 <http://stacks.iop.org/0022-3719/5/i=13/a=012>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _r0 : Optional[float], default: 30.0
    r0 parameter
  _r1 : Optional[float], default: 75.0
    r1 parameter
  _c0 : Optional[float], default: 0.0252
    c0 parameter
  _c1 : Optional[float], default: 0.0127
    c1 parameter
  """
  _r0 = (_r0 or 30.0)
  _r1 = (_r1 or 75.0)
  _c0 = (_c0 or 0.0252)
  _c1 = (_c1 or 0.0127)
  p = get_p("lda_c_vbh", polarized, _r0, _r1, _c0, _c1)
  def _lda_c_vbh_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of lda_c_vbh.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _lda_c_vbh_epsilon_xc

def lda_c_1d_csc(
  polarized: bool = True,
  interaction: Optional[float] = None,
  beta: Optional[float] = None,
) -> Callable:
  r"""
  M. Casula, S. Sorella, and G. Senatore.,  Phys. Rev. B 74, 245427 (2006)
  `10.1103/PhysRevB.74.245427 <http://link.aps.org/doi/10.1103/PhysRevB.74.245427>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  interaction : Optional[float], default: 1.0
    0 (exponentially screened) | 1 (soft-Coulomb)
  beta : Optional[float], default: 1.0
    Screening parameter
  """
  interaction = (interaction or 1.0)
  beta = (beta or 1.0)
  p = get_p("lda_c_1d_csc", polarized, interaction, beta)
  def _lda_c_1d_csc_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of lda_c_1d_csc.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _lda_c_1d_csc_epsilon_xc

def lda_x_2d(
  polarized: bool = True,
) -> Callable:
  r"""
  P. A. M. Dirac.,  Math. Proc. Cambridge Philos. Soc. 26, 376 (1930)
  `10.1017/S0305004100016108 <http://journals.cambridge.org/article_S0305004100016108>`_

  F. Bloch.,  Z. Phys. 57, 545 (1929)
  `10.1007/BF01340281 <http://link.springer.com/article/10.1007\%2FBF01340281>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("lda_x_2d", polarized, )
  def _lda_x_2d_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of lda_x_2d.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _lda_x_2d_epsilon_xc

def lda_xc_teter93(
  polarized: bool = True,
) -> Callable:
  r"""
  S. Goedecker, M. Teter, and J. Hutter.,  Phys. Rev. B 54, 1703 (1996)
  `10.1103/PhysRevB.54.1703 <http://link.aps.org/doi/10.1103/PhysRevB.54.1703>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("lda_xc_teter93", polarized, )
  def _lda_xc_teter93_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of lda_xc_teter93.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _lda_xc_teter93_epsilon_xc

def lda_x_1d_soft(
  polarized: bool = True,
  beta: Optional[float] = None,
) -> Callable:
  r"""
  N. Helbig, J. I. Fuks, M. Casula, M. J. Verstraete, M. A. L. Marques, I. V. Tokatly, and A. Rubio.,  Phys. Rev. A 83, 032503 (2011)
  `10.1103/PhysRevA.83.032503 <http://link.aps.org/doi/10.1103/PhysRevA.83.032503>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  beta : Optional[float], default: 1.0
    Parameter of the exponential
  """
  beta = (beta or 1.0)
  p = get_p("lda_x_1d_soft", polarized, beta)
  def _lda_x_1d_soft_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of lda_x_1d_soft.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _lda_x_1d_soft_epsilon_xc

def lda_c_ml1(
  polarized: bool = True,
  _fc: Optional[float] = None,
  _q: Optional[float] = None,
) -> Callable:
  r"""
  E. I. Proynov and D. R. Salahub.,  Phys. Rev. B 49, 7874 (1994)
  `10.1103/PhysRevB.49.7874 <http://link.aps.org/doi/10.1103/PhysRevB.49.7874>`_

  E. I. Proynov and D. R. Salahub.,  Phys. Rev. B 57, 12616–12616 (1998)
  `10.1103/PhysRevB.57.12616 <https://link.aps.org/doi/10.1103/PhysRevB.57.12616>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _fc : Optional[float], default: 0.2026
    fc
  _q : Optional[float], default: 0.084
    q
  """
  _fc = (_fc or 0.2026)
  _q = (_q or 0.084)
  p = get_p("lda_c_ml1", polarized, _fc, _q)
  def _lda_c_ml1_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of lda_c_ml1.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _lda_c_ml1_epsilon_xc

def lda_c_ml2(
  polarized: bool = True,
  _fc: Optional[float] = None,
  _q: Optional[float] = None,
) -> Callable:
  r"""
  E. I. Proynov and D. R. Salahub.,  Phys. Rev. B 49, 7874 (1994)
  `10.1103/PhysRevB.49.7874 <http://link.aps.org/doi/10.1103/PhysRevB.49.7874>`_

  E. I. Proynov and D. R. Salahub.,  Phys. Rev. B 57, 12616–12616 (1998)
  `10.1103/PhysRevB.57.12616 <https://link.aps.org/doi/10.1103/PhysRevB.57.12616>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _fc : Optional[float], default: 0.266
    fc
  _q : Optional[float], default: 0.5
    q
  """
  _fc = (_fc or 0.266)
  _q = (_q or 0.5)
  p = get_p("lda_c_ml2", polarized, _fc, _q)
  def _lda_c_ml2_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of lda_c_ml2.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _lda_c_ml2_epsilon_xc

def lda_c_gombas(
  polarized: bool = True,
) -> Callable:
  r"""
  P. Gombás.,  Fortschr. Phys. 13, 137-156 (1965)
  `10.1002/prop.19650130402 <https://onlinelibrary.wiley.com/doi/abs/10.1002/prop.19650130402>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("lda_c_gombas", polarized, )
  def _lda_c_gombas_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of lda_c_gombas.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _lda_c_gombas_epsilon_xc

def lda_c_pw_rpa(
  polarized: bool = True,
  _pp_0_: Optional[float] = None,
  _pp_1_: Optional[float] = None,
  _pp_2_: Optional[float] = None,
  _a_0_: Optional[float] = None,
  _a_1_: Optional[float] = None,
  _a_2_: Optional[float] = None,
  _alpha1_0_: Optional[float] = None,
  _alpha1_1_: Optional[float] = None,
  _alpha1_2_: Optional[float] = None,
  _beta1_0_: Optional[float] = None,
  _beta1_1_: Optional[float] = None,
  _beta1_2_: Optional[float] = None,
  _beta2_0_: Optional[float] = None,
  _beta2_1_: Optional[float] = None,
  _beta2_2_: Optional[float] = None,
  _beta3_0_: Optional[float] = None,
  _beta3_1_: Optional[float] = None,
  _beta3_2_: Optional[float] = None,
  _beta4_0_: Optional[float] = None,
  _beta4_1_: Optional[float] = None,
  _beta4_2_: Optional[float] = None,
  _fz20: Optional[float] = None,
) -> Callable:
  r"""
  J. P. Perdew and Y. Wang.,  Phys. Rev. B 45, 13244 (1992)
  `10.1103/PhysRevB.45.13244 <http://link.aps.org/doi/10.1103/PhysRevB.45.13244>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _pp_0_ : Optional[float], default: 0.75
    pp0
  _pp_1_ : Optional[float], default: 0.75
    pp1
  _pp_2_ : Optional[float], default: 1.0
    pp2
  _a_0_ : Optional[float], default: 0.031091
    a0
  _a_1_ : Optional[float], default: 0.015545
    a1
  _a_2_ : Optional[float], default: 0.016887
    a2
  _alpha1_0_ : Optional[float], default: 0.082477
    alpha10
  _alpha1_1_ : Optional[float], default: 0.035374
    alpha11
  _alpha1_2_ : Optional[float], default: 0.028829
    alpha12
  _beta1_0_ : Optional[float], default: 5.1486
    beta10
  _beta1_1_ : Optional[float], default: 6.4869
    beta11
  _beta1_2_ : Optional[float], default: 10.357
    beta12
  _beta2_0_ : Optional[float], default: 1.6483
    beta20
  _beta2_1_ : Optional[float], default: 1.3083
    beta21
  _beta2_2_ : Optional[float], default: 3.6231
    beta22
  _beta3_0_ : Optional[float], default: 0.23647
    beta30
  _beta3_1_ : Optional[float], default: 0.1518
    beta31
  _beta3_2_ : Optional[float], default: 0.4799
    beta32
  _beta4_0_ : Optional[float], default: 0.20614
    beta40
  _beta4_1_ : Optional[float], default: 0.082349
    beta41
  _beta4_2_ : Optional[float], default: 0.12279
    beta42
  _fz20 : Optional[float], default: 1.709921
    fz20
  """
  _pp_0_ = (_pp_0_ or 0.75)
  _pp_1_ = (_pp_1_ or 0.75)
  _pp_2_ = (_pp_2_ or 1.0)
  _a_0_ = (_a_0_ or 0.031091)
  _a_1_ = (_a_1_ or 0.015545)
  _a_2_ = (_a_2_ or 0.016887)
  _alpha1_0_ = (_alpha1_0_ or 0.082477)
  _alpha1_1_ = (_alpha1_1_ or 0.035374)
  _alpha1_2_ = (_alpha1_2_ or 0.028829)
  _beta1_0_ = (_beta1_0_ or 5.1486)
  _beta1_1_ = (_beta1_1_ or 6.4869)
  _beta1_2_ = (_beta1_2_ or 10.357)
  _beta2_0_ = (_beta2_0_ or 1.6483)
  _beta2_1_ = (_beta2_1_ or 1.3083)
  _beta2_2_ = (_beta2_2_ or 3.6231)
  _beta3_0_ = (_beta3_0_ or 0.23647)
  _beta3_1_ = (_beta3_1_ or 0.1518)
  _beta3_2_ = (_beta3_2_ or 0.4799)
  _beta4_0_ = (_beta4_0_ or 0.20614)
  _beta4_1_ = (_beta4_1_ or 0.082349)
  _beta4_2_ = (_beta4_2_ or 0.12279)
  _fz20 = (_fz20 or 1.709921)
  p = get_p("lda_c_pw_rpa", polarized, _pp_0_, _pp_1_, _pp_2_, _a_0_, _a_1_, _a_2_, _alpha1_0_, _alpha1_1_, _alpha1_2_, _beta1_0_, _beta1_1_, _beta1_2_, _beta2_0_, _beta2_1_, _beta2_2_, _beta3_0_, _beta3_1_, _beta3_2_, _beta4_0_, _beta4_1_, _beta4_2_, _fz20)
  def _lda_c_pw_rpa_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of lda_c_pw_rpa.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _lda_c_pw_rpa_epsilon_xc

def lda_c_1d_loos(
  polarized: bool = True,
) -> Callable:
  r"""
  P.-F. Loos.,  J. Chem. Phys. 138, 064108 (2013)
  `10.1063/1.4790613 <http://scitation.aip.org/content/aip/journal/jcp/138/6/10.1063/1.4790613>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("lda_c_1d_loos", polarized, )
  def _lda_c_1d_loos_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of lda_c_1d_loos.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _lda_c_1d_loos_epsilon_xc

def lda_c_rc04(
  polarized: bool = True,
) -> Callable:
  r"""
  S. Ragot and P. Cortona.,  J. Chem. Phys. 121, 7671 (2004)
  `10.1063/1.1792153 <http://scitation.aip.org/content/aip/journal/jcp/121/16/10.1063/1.1792153>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("lda_c_rc04", polarized, )
  def _lda_c_rc04_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of lda_c_rc04.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _lda_c_rc04_epsilon_xc

def lda_c_vwn_1(
  polarized: bool = True,
) -> Callable:
  r"""
  S. H. Vosko, L. Wilk, and M. Nusair.,  Can. J. Phys. 58, 1200 (1980)
  `10.1139/p80-159 <http://www.nrcresearchpress.com/doi/abs/10.1139/p80-159>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("lda_c_vwn_1", polarized, )
  def _lda_c_vwn_1_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of lda_c_vwn_1.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _lda_c_vwn_1_epsilon_xc

def lda_c_vwn_2(
  polarized: bool = True,
) -> Callable:
  r"""
  S. H. Vosko, L. Wilk, and M. Nusair.,  Can. J. Phys. 58, 1200 (1980)
  `10.1139/p80-159 <http://www.nrcresearchpress.com/doi/abs/10.1139/p80-159>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("lda_c_vwn_2", polarized, )
  def _lda_c_vwn_2_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of lda_c_vwn_2.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _lda_c_vwn_2_epsilon_xc

def lda_c_vwn_3(
  polarized: bool = True,
) -> Callable:
  r"""
  S. H. Vosko, L. Wilk, and M. Nusair.,  Can. J. Phys. 58, 1200 (1980)
  `10.1139/p80-159 <http://www.nrcresearchpress.com/doi/abs/10.1139/p80-159>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("lda_c_vwn_3", polarized, )
  def _lda_c_vwn_3_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of lda_c_vwn_3.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _lda_c_vwn_3_epsilon_xc

def lda_c_vwn_4(
  polarized: bool = True,
) -> Callable:
  r"""
  S. H. Vosko, L. Wilk, and M. Nusair.,  Can. J. Phys. 58, 1200 (1980)
  `10.1139/p80-159 <http://www.nrcresearchpress.com/doi/abs/10.1139/p80-159>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("lda_c_vwn_4", polarized, )
  def _lda_c_vwn_4_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of lda_c_vwn_4.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _lda_c_vwn_4_epsilon_xc

def gga_x_gam(
  polarized: bool = True,
  _CC00: Optional[float] = None,
  _CC01: Optional[float] = None,
  _CC02: Optional[float] = None,
  _CC03: Optional[float] = None,
  _CC10: Optional[float] = None,
  _CC11: Optional[float] = None,
  _CC12: Optional[float] = None,
  _CC13: Optional[float] = None,
  _CC20: Optional[float] = None,
  _CC21: Optional[float] = None,
  _CC22: Optional[float] = None,
  _CC23: Optional[float] = None,
  _CC30: Optional[float] = None,
  _CC31: Optional[float] = None,
  _CC32: Optional[float] = None,
  _CC33: Optional[float] = None,
) -> Callable:
  r"""
  H. S. Yu, W. Zhang, P. Verma, X. He, and D. G. Truhlar.,  Phys. Chem. Chem. Phys. 17, 12146-12160 (2015)
  `10.1039/C5CP01425E <http://doi.org/10.1039/C5CP01425E>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _CC00 : Optional[float], default: 1.3273
    _CC00
  _CC01 : Optional[float], default: 0.886102
    _CC01
  _CC02 : Optional[float], default: -5.73833
    _CC02
  _CC03 : Optional[float], default: 8.60197
    _CC03
  _CC10 : Optional[float], default: -0.786018
    _CC10
  _CC11 : Optional[float], default: -4.78787
    _CC11
  _CC12 : Optional[float], default: 3.90989
    _CC12
  _CC13 : Optional[float], default: -2.11611
    _CC13
  _CC20 : Optional[float], default: 0.802575
    _CC20
  _CC21 : Optional[float], default: 14.4363
    _CC21
  _CC22 : Optional[float], default: 8.42735
    _CC22
  _CC23 : Optional[float], default: -6.21552
    _CC23
  _CC30 : Optional[float], default: -0.142331
    _CC30
  _CC31 : Optional[float], default: -13.4598
    _CC31
  _CC32 : Optional[float], default: 1.52355
    _CC32
  _CC33 : Optional[float], default: -10.053
    _CC33
  """
  _CC00 = (_CC00 or 1.3273)
  _CC01 = (_CC01 or 0.886102)
  _CC02 = (_CC02 or -5.73833)
  _CC03 = (_CC03 or 8.60197)
  _CC10 = (_CC10 or -0.786018)
  _CC11 = (_CC11 or -4.78787)
  _CC12 = (_CC12 or 3.90989)
  _CC13 = (_CC13 or -2.11611)
  _CC20 = (_CC20 or 0.802575)
  _CC21 = (_CC21 or 14.4363)
  _CC22 = (_CC22 or 8.42735)
  _CC23 = (_CC23 or -6.21552)
  _CC30 = (_CC30 or -0.142331)
  _CC31 = (_CC31 or -13.4598)
  _CC32 = (_CC32 or 1.52355)
  _CC33 = (_CC33 or -10.053)
  p = get_p("gga_x_gam", polarized, _CC00, _CC01, _CC02, _CC03, _CC10, _CC11, _CC12, _CC13, _CC20, _CC21, _CC22, _CC23, _CC30, _CC31, _CC32, _CC33)
  def _gga_x_gam_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_gam.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_gam_epsilon_xc

def gga_c_gam(
  polarized: bool = True,
  _css0: Optional[float] = None,
  _css1: Optional[float] = None,
  _css2: Optional[float] = None,
  _css3: Optional[float] = None,
  _css4: Optional[float] = None,
  _cos0: Optional[float] = None,
  _cos1: Optional[float] = None,
  _cos2: Optional[float] = None,
  _cos3: Optional[float] = None,
  _cos4: Optional[float] = None,
) -> Callable:
  r"""
  H. S. Yu, W. Zhang, P. Verma, X. He, and D. G. Truhlar.,  Phys. Chem. Chem. Phys. 17, 12146-12160 (2015)
  `10.1039/C5CP01425E <http://doi.org/10.1039/C5CP01425E>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _css0 : Optional[float], default: 0.231765
    u^0 coefficient for same-spin correlation
  _css1 : Optional[float], default: 0.575592
    u^1 coefficient for same-spin correlation
  _css2 : Optional[float], default: -3.43391
    u^2 coefficient for same-spin correlation
  _css3 : Optional[float], default: -5.77281
    u^3 coefficient for same-spin correlation
  _css4 : Optional[float], default: 9.52448
    u^4 coefficient for same-spin correlation
  _cos0 : Optional[float], default: 0.860548
    u^0 coefficient for opposite-spin correlation
  _cos1 : Optional[float], default: -2.94135
    u^1 coefficient for opposite-spin correlation
  _cos2 : Optional[float], default: 15.4176
    u^2 coefficient for opposite-spin correlation
  _cos3 : Optional[float], default: -5.99825
    u^3 coefficient for opposite-spin correlation
  _cos4 : Optional[float], default: -23.4119
    u^4 coefficient for opposite-spin correlation
  """
  _css0 = (_css0 or 0.231765)
  _css1 = (_css1 or 0.575592)
  _css2 = (_css2 or -3.43391)
  _css3 = (_css3 or -5.77281)
  _css4 = (_css4 or 9.52448)
  _cos0 = (_cos0 or 0.860548)
  _cos1 = (_cos1 or -2.94135)
  _cos2 = (_cos2 or 15.4176)
  _cos3 = (_cos3 or -5.99825)
  _cos4 = (_cos4 or -23.4119)
  p = get_p("gga_c_gam", polarized, _css0, _css1, _css2, _css3, _css4, _cos0, _cos1, _cos2, _cos3, _cos4)
  def _gga_c_gam_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_c_gam.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_c_gam_epsilon_xc

def gga_x_hcth_a(
  polarized: bool = True,
) -> Callable:
  r"""
  F. A. Hamprecht, A. J. Cohen, D. J. Tozer, and N. C. Handy.,  J. Chem. Phys. 109, 6264 (1998)
  `10.1063/1.477267 <http://scitation.aip.org/content/aip/journal/jcp/109/15/10.1063/1.477267>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_x_hcth_a", polarized, )
  def _gga_x_hcth_a_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_hcth_a.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_hcth_a_epsilon_xc

def gga_x_ev93(
  polarized: bool = True,
  _a1: Optional[float] = None,
  _a2: Optional[float] = None,
  _a3: Optional[float] = None,
  _b1: Optional[float] = None,
  _b2: Optional[float] = None,
  _b3: Optional[float] = None,
) -> Callable:
  r"""
  E. Engel and S. H. Vosko.,  Phys. Rev. B 47, 13164–13174 (1993)
  `10.1103/PhysRevB.47.13164 <http://link.aps.org/doi/10.1103/PhysRevB.47.13164>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a1 : Optional[float], default: 1.647127
    a1
  _a2 : Optional[float], default: 0.980118
    a2
  _a3 : Optional[float], default: 0.017399
    a3
  _b1 : Optional[float], default: 1.523671
    b1
  _b2 : Optional[float], default: 0.367229
    b2
  _b3 : Optional[float], default: 0.011282
    b3
  """
  _a1 = (_a1 or 1.647127)
  _a2 = (_a2 or 0.980118)
  _a3 = (_a3 or 0.017399)
  _b1 = (_b1 or 1.523671)
  _b2 = (_b2 or 0.367229)
  _b3 = (_b3 or 0.011282)
  p = get_p("gga_x_ev93", polarized, _a1, _a2, _a3, _b1, _b2, _b3)
  def _gga_x_ev93_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_ev93.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_ev93_epsilon_xc

def hyb_mgga_x_dldf(
  polarized: bool = True,
) -> Callable:
  r"""
  K. Pernal, R. Podeszwa, K. Patkowski, and K. Szalewicz.,  Phys. Rev. Lett. 103, 263201 (2009)
  `10.1103/PhysRevLett.103.263201 <http://link.aps.org/doi/10.1103/PhysRevLett.103.263201>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("hyb_mgga_x_dldf", polarized, )
  def _hyb_mgga_x_dldf_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_mgga_x_dldf.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _hyb_mgga_x_dldf_epsilon_xc

def mgga_c_dldf(
  polarized: bool = True,
  _gamma_ss: Optional[float] = None,
  _gamma_ab: Optional[float] = None,
  _css0: Optional[float] = None,
  _css1: Optional[float] = None,
  _css2: Optional[float] = None,
  _css3: Optional[float] = None,
  _css4: Optional[float] = None,
  _cab0: Optional[float] = None,
  _cab1: Optional[float] = None,
  _cab2: Optional[float] = None,
  _cab3: Optional[float] = None,
  _cab4: Optional[float] = None,
  _Fermi_D_cnst: Optional[float] = None,
) -> Callable:
  r"""
  K. Pernal, R. Podeszwa, K. Patkowski, and K. Szalewicz.,  Phys. Rev. Lett. 103, 263201 (2009)
  `10.1103/PhysRevLett.103.263201 <http://link.aps.org/doi/10.1103/PhysRevLett.103.263201>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _gamma_ss : Optional[float], default: 0.06
    gamma_ss
  _gamma_ab : Optional[float], default: 0.0031
    gamma_ab
  _css0 : Optional[float], default: 1.0
    css0
  _css1 : Optional[float], default: -2.5960897
    css1
  _css2 : Optional[float], default: 2.2233793
    css2
  _css3 : Optional[float], default: 0.0
    css3
  _css4 : Optional[float], default: 0.0
    css4
  _cab0 : Optional[float], default: 1.0
    cab0
  _cab1 : Optional[float], default: 5.9515308
    cab1
  _cab2 : Optional[float], default: -11.1602877
    cab2
  _cab3 : Optional[float], default: 0.0
    cab3
  _cab4 : Optional[float], default: 0.0
    cab4
  _Fermi_D_cnst : Optional[float], default: 1e-10
    Constant for the correction term similar to 10.1063/1.2800011
  """
  _gamma_ss = (_gamma_ss or 0.06)
  _gamma_ab = (_gamma_ab or 0.0031)
  _css0 = (_css0 or 1.0)
  _css1 = (_css1 or -2.5960897)
  _css2 = (_css2 or 2.2233793)
  _css3 = (_css3 or 0.0)
  _css4 = (_css4 or 0.0)
  _cab0 = (_cab0 or 1.0)
  _cab1 = (_cab1 or 5.9515308)
  _cab2 = (_cab2 or -11.1602877)
  _cab3 = (_cab3 or 0.0)
  _cab4 = (_cab4 or 0.0)
  _Fermi_D_cnst = (_Fermi_D_cnst or 1e-10)
  p = get_p("mgga_c_dldf", polarized, _gamma_ss, _gamma_ab, _css0, _css1, _css2, _css3, _css4, _cab0, _cab1, _cab2, _cab3, _cab4, _Fermi_D_cnst)
  def _mgga_c_dldf_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_c_dldf.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_c_dldf_epsilon_xc

def gga_x_bcgp(
  polarized: bool = True,
  _kappa: Optional[float] = None,
  _mu: Optional[float] = None,
) -> Callable:
  r"""
  K. Burke, A. Cancio, T. Gould, and S. Pittalis.,  ArXiv e-prints  (2014)
  

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _kappa : Optional[float], default: 0.804
    Asymptotic value of the enhancement function
  _mu : Optional[float], default: 0.249
    Coefficient of the 2nd order expansion
  """
  _kappa = (_kappa or 0.804)
  _mu = (_mu or 0.249)
  p = get_p("gga_x_bcgp", polarized, _kappa, _mu)
  def _gga_x_bcgp_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_bcgp.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_bcgp_epsilon_xc

def gga_c_acgga(
  polarized: bool = True,
) -> Callable:
  r"""
  A. Cancio, G. P. Chen, B. T. Krull, and K. Burke.,  J. Chem. Phys. 149, 084116 (2018)
  `10.1063/1.5021597 <https://doi.org/10.1063/1.5021597>`_

  K. Burke, A. Cancio, T. Gould, and S. Pittalis.,  ArXiv e-prints  (2014)
  

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_c_acgga", polarized, )
  def _gga_c_acgga_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_c_acgga.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_c_acgga_epsilon_xc

def gga_x_lambda_oc2_n(
  polarized: bool = True,
  _N: Optional[float] = None,
  _kappa: Optional[float] = None,
  _mu: Optional[float] = None,
) -> Callable:
  r"""
  M. M. Odashima, K. Capelle, and S. B. Trickey.,  J. Chem. Theory Comput. 5, 798-807 (2009)
  `10.1021/ct8005634 <http://doi.org/10.1021/ct8005634>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _N : Optional[float], default: 1e+23
    Number of electrons
  _kappa : Optional[float], default: 0.2195149727645171
    Asymptotic value of the enhancement function
  _mu : Optional[float], default: 2.0
    Coefficient of the 2nd order expansion
  """
  _N = (_N or 1e+23)
  _kappa = (_kappa or 0.2195149727645171)
  _mu = (_mu or 2.0)
  p = get_p("gga_x_lambda_oc2_n", polarized, _N, _kappa, _mu)
  def _gga_x_lambda_oc2_n_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_lambda_oc2_n.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_lambda_oc2_n_epsilon_xc

def gga_x_b86_r(
  polarized: bool = True,
  _beta: Optional[float] = None,
  _gamma: Optional[float] = None,
  _omega: Optional[float] = None,
) -> Callable:
  r"""
  I. Hamada.,  Phys. Rev. B 89, 121103 (2014)
  `10.1103/PhysRevB.89.121103 <http://link.aps.org/doi/10.1103/PhysRevB.89.121103>`_

  A. D. Becke.,  J. Chem. Phys. 84, 4524 (1986)
  `10.1063/1.450025 <http://scitation.aip.org/content/aip/journal/jcp/84/8/10.1063/1.450025>`_

  A. D. Becke.,  J. Chem. Phys. 85, 7184 (1986)
  `10.1063/1.451353 <http://scitation.aip.org/content/aip/journal/jcp/85/12/10.1063/1.451353>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _beta : Optional[float], default: 0.002031519487163032
    Small x limit
  _gamma : Optional[float], default: 0.0028556641652558784
    Parameter in the denominator
  _omega : Optional[float], default: 0.8
    Exponent of denominator
  """
  _beta = (_beta or 0.002031519487163032)
  _gamma = (_gamma or 0.0028556641652558784)
  _omega = (_omega or 0.8)
  p = get_p("gga_x_b86_r", polarized, _beta, _gamma, _omega)
  def _gga_x_b86_r_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_b86_r.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_b86_r_epsilon_xc

def mgga_xc_zlp(
  polarized: bool = True,
) -> Callable:
  r"""
  Q. Zhao, M. Levy, and R. G. Parr.,  Phys. Rev. A 47, 918–922 (1993)
  `10.1103/PhysRevA.47.918 <http://link.aps.org/doi/10.1103/PhysRevA.47.918>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("mgga_xc_zlp", polarized, )
  def _mgga_xc_zlp_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_xc_zlp.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_xc_zlp_epsilon_xc

def lda_xc_zlp(
  polarized: bool = True,
) -> Callable:
  r"""
  Q. Zhao, M. Levy, and R. G. Parr.,  Phys. Rev. A 47, 918–922 (1993)
  `10.1103/PhysRevA.47.918 <http://link.aps.org/doi/10.1103/PhysRevA.47.918>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("lda_xc_zlp", polarized, )
  def _lda_xc_zlp_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of lda_xc_zlp.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _lda_xc_zlp_epsilon_xc

def gga_x_lambda_ch_n(
  polarized: bool = True,
  _N: Optional[float] = None,
  _kappa: Optional[float] = None,
  _mu: Optional[float] = None,
) -> Callable:
  r"""
  M. M. Odashima, K. Capelle, and S. B. Trickey.,  J. Chem. Theory Comput. 5, 798-807 (2009)
  `10.1021/ct8005634 <http://doi.org/10.1021/ct8005634>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _N : Optional[float], default: 1e+23
    Number of electrons
  _kappa : Optional[float], default: 0.2195149727645171
    Asymptotic value of the enhancement function
  _mu : Optional[float], default: 2.215
    Coefficient of the 2nd order expansion
  """
  _N = (_N or 1e+23)
  _kappa = (_kappa or 0.2195149727645171)
  _mu = (_mu or 2.215)
  p = get_p("gga_x_lambda_ch_n", polarized, _N, _kappa, _mu)
  def _gga_x_lambda_ch_n_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_lambda_ch_n.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_lambda_ch_n_epsilon_xc

def gga_x_lambda_lo_n(
  polarized: bool = True,
  _N: Optional[float] = None,
  _kappa: Optional[float] = None,
  _mu: Optional[float] = None,
) -> Callable:
  r"""
  M. M. Odashima, K. Capelle, and S. B. Trickey.,  J. Chem. Theory Comput. 5, 798-807 (2009)
  `10.1021/ct8005634 <http://doi.org/10.1021/ct8005634>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _N : Optional[float], default: 1e+23
    Number of electrons
  _kappa : Optional[float], default: 0.2195149727645171
    Asymptotic value of the enhancement function
  _mu : Optional[float], default: 2.273
    Coefficient of the 2nd order expansion
  """
  _N = (_N or 1e+23)
  _kappa = (_kappa or 0.2195149727645171)
  _mu = (_mu or 2.273)
  p = get_p("gga_x_lambda_lo_n", polarized, _N, _kappa, _mu)
  def _gga_x_lambda_lo_n_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_lambda_lo_n.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_lambda_lo_n_epsilon_xc

def gga_x_hjs_b88_v2(
  polarized: bool = True,
  _a0: Optional[float] = None,
  _a1: Optional[float] = None,
  _a2: Optional[float] = None,
  _a3: Optional[float] = None,
  _a4: Optional[float] = None,
  _a5: Optional[float] = None,
  _b0: Optional[float] = None,
  _b1: Optional[float] = None,
  _b2: Optional[float] = None,
  _b3: Optional[float] = None,
  _b4: Optional[float] = None,
  _b5: Optional[float] = None,
  _b6: Optional[float] = None,
  _b7: Optional[float] = None,
  _b8: Optional[float] = None,
  _omega: Optional[float] = None,
) -> Callable:
  r"""
  E. Weintraub, T. M. Henderson, and G. E. Scuseria.,  J. Chem. Theory Comput. 5, 754-762 (2009)
  `10.1021/ct800530u <http://pubs.acs.org/doi/abs/10.1021/ct800530u>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a0 : Optional[float], default: 0.0253933
    a0
  _a1 : Optional[float], default: -0.0673075
    a1
  _a2 : Optional[float], default: 0.0891476
    a2
  _a3 : Optional[float], default: -0.0454168
    a3
  _a4 : Optional[float], default: -0.00765813
    a4
  _a5 : Optional[float], default: 0.0142506
    a5
  _b0 : Optional[float], default: -2.6506
    b0
  _b1 : Optional[float], default: 3.91108
    b1
  _b2 : Optional[float], default: -3.31509
    b2
  _b3 : Optional[float], default: 1.54485
    b3
  _b4 : Optional[float], default: -0.198386
    b4
  _b5 : Optional[float], default: -0.136112
    b5
  _b6 : Optional[float], default: 0.0647862
    b6
  _b7 : Optional[float], default: 0.0159586
    b7
  _b8 : Optional[float], default: -0.000245066
    b8
  _omega : Optional[float], default: 0.11
    omega
  """
  _a0 = (_a0 or 0.0253933)
  _a1 = (_a1 or -0.0673075)
  _a2 = (_a2 or 0.0891476)
  _a3 = (_a3 or -0.0454168)
  _a4 = (_a4 or -0.00765813)
  _a5 = (_a5 or 0.0142506)
  _b0 = (_b0 or -2.6506)
  _b1 = (_b1 or 3.91108)
  _b2 = (_b2 or -3.31509)
  _b3 = (_b3 or 1.54485)
  _b4 = (_b4 or -0.198386)
  _b5 = (_b5 or -0.136112)
  _b6 = (_b6 or 0.0647862)
  _b7 = (_b7 or 0.0159586)
  _b8 = (_b8 or -0.000245066)
  _omega = (_omega or 0.11)
  p = get_p("gga_x_hjs_b88_v2", polarized, _a0, _a1, _a2, _a3, _a4, _a5, _b0, _b1, _b2, _b3, _b4, _b5, _b6, _b7, _b8, _omega)
  def _gga_x_hjs_b88_v2_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_hjs_b88_v2.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_hjs_b88_v2_epsilon_xc

def gga_c_q2d(
  polarized: bool = True,
) -> Callable:
  r"""
  L. Chiodo, L. A. Constantin, E. Fabiano, and F. Della Sala.,  Phys. Rev. Lett. 108, 126402 (2012)
  `10.1103/PhysRevLett.108.126402 <http://link.aps.org/doi/10.1103/PhysRevLett.108.126402>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_c_q2d", polarized, )
  def _gga_c_q2d_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_c_q2d.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_c_q2d_epsilon_xc

def gga_x_q2d(
  polarized: bool = True,
) -> Callable:
  r"""
  L. Chiodo, L. A. Constantin, E. Fabiano, and F. Della Sala.,  Phys. Rev. Lett. 108, 126402 (2012)
  `10.1103/PhysRevLett.108.126402 <http://link.aps.org/doi/10.1103/PhysRevLett.108.126402>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_x_q2d", polarized, )
  def _gga_x_q2d_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_q2d.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_q2d_epsilon_xc

def gga_x_pbe_mol(
  polarized: bool = True,
  _kappa: Optional[float] = None,
  _mu: Optional[float] = None,
) -> Callable:
  r"""
  J. M. del Campo, J. L. Gázquez, S. B. Trickey, and A. Vela.,  J. Chem. Phys. 136, 104108 (2012)
  `10.1063/1.3691197 <http://scitation.aip.org/content/aip/journal/jcp/136/10/10.1063/1.3691197>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _kappa : Optional[float], default: 0.804
    Asymptotic value of the enhancement function
  _mu : Optional[float], default: 0.27583
    Coefficient of the 2nd order expansion
  """
  _kappa = (_kappa or 0.804)
  _mu = (_mu or 0.27583)
  p = get_p("gga_x_pbe_mol", polarized, _kappa, _mu)
  def _gga_x_pbe_mol_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_pbe_mol.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_pbe_mol_epsilon_xc

def lda_k_tf(
  polarized: bool = True,
) -> Callable:
  r"""
  L. H. Thomas.,  Math. Proc. Cambridge Philos. Soc. 23, 542 (1927)
  `10.1017/S0305004100011683 <http://journals.cambridge.org/article_S0305004100011683>`_

  E. Fermi.,  Rendiconti dell'Accademia Nazionale dei Lincei 6, 602 (1927)
  

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("lda_k_tf", polarized, )
  def _lda_k_tf_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of lda_k_tf.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _lda_k_tf_epsilon_xc

def lda_k_lp(
  polarized: bool = True,
) -> Callable:
  r"""
  C. Lee and R. G. Parr.,  Phys. Rev. A 35, 2377 (1987)
  `10.1103/PhysRevA.35.2377 <http://link.aps.org/doi/10.1103/PhysRevA.35.2377>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("lda_k_lp", polarized, )
  def _lda_k_lp_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of lda_k_lp.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _lda_k_lp_epsilon_xc

def gga_k_tfvw(
  polarized: bool = True,
  _lambda_: Optional[float] = None,
  _gamma: Optional[float] = None,
) -> Callable:
  r"""
  C. F. von Weizsäcker.,  Z. Phys. 96, 431 (1935)
  `10.1007/BF01337700 <http://link.springer.com/article/10.1007\%2FBF01337700>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _lambda_ : Optional[float], default: 1.0
    Lambda
  _gamma : Optional[float], default: 1.0
    Gamma
  """
  _lambda_ = (_lambda_ or 1.0)
  _gamma = (_gamma or 1.0)
  p = get_p("gga_k_tfvw", polarized, _lambda_, _gamma)
  def _gga_k_tfvw_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_k_tfvw.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_k_tfvw_epsilon_xc

def gga_k_revapbeint(
  polarized: bool = True,
) -> Callable:
  r"""
  S. Laricchia, E. Fabiano, L. A. Constantin, and F. Della Sala.,  J. Chem. Theory Comput. 7, 2439 (2011)
  `10.1021/ct200382w <http://pubs.acs.org/doi/abs/10.1021/ct200382w>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_k_revapbeint", polarized, )
  def _gga_k_revapbeint_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_k_revapbeint.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_k_revapbeint_epsilon_xc

def gga_k_apbeint(
  polarized: bool = True,
) -> Callable:
  r"""
  S. Laricchia, E. Fabiano, L. A. Constantin, and F. Della Sala.,  J. Chem. Theory Comput. 7, 2439 (2011)
  `10.1021/ct200382w <http://pubs.acs.org/doi/abs/10.1021/ct200382w>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_k_apbeint", polarized, )
  def _gga_k_apbeint_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_k_apbeint.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_k_apbeint_epsilon_xc

def gga_k_revapbe(
  polarized: bool = True,
) -> Callable:
  r"""
  L. A. Constantin, E. Fabiano, S. Laricchia, and F. Della Sala.,  Phys. Rev. Lett. 106, 186406 (2011)
  `10.1103/PhysRevLett.106.186406 <http://link.aps.org/doi/10.1103/PhysRevLett.106.186406>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_k_revapbe", polarized, )
  def _gga_k_revapbe_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_k_revapbe.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_k_revapbe_epsilon_xc

def gga_x_ak13(
  polarized: bool = True,
  _B1: Optional[float] = None,
  _B2: Optional[float] = None,
) -> Callable:
  r"""
  R. Armiento and S. Kümmel.,  Phys. Rev. Lett. 111, 036402 (2013)
  `10.1103/PhysRevLett.111.036402 <http://link.aps.org/doi/10.1103/PhysRevLett.111.036402>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _B1 : Optional[float], default: 1.7495901559886304
    B1
  _B2 : Optional[float], default: -1.6261333658651738
    B2
  """
  _B1 = (_B1 or 1.7495901559886304)
  _B2 = (_B2 or -1.6261333658651738)
  p = get_p("gga_x_ak13", polarized, _B1, _B2)
  def _gga_x_ak13_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_ak13.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_ak13_epsilon_xc

def gga_k_meyer(
  polarized: bool = True,
) -> Callable:
  r"""
  A. Meyer, G. C. Wang, and W. H. Young.,  Z. Naturforsch. A 31, 898 (1976)
  `10.1515/zna-1976-0804 <http://doi.org/10.1515/zna-1976-0804>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_k_meyer", polarized, )
  def _gga_k_meyer_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_k_meyer.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_k_meyer_epsilon_xc

def gga_x_lv_rpw86(
  polarized: bool = True,
) -> Callable:
  r"""
  K. Berland and P. Hyldgaard.,  Phys. Rev. B 89, 035412 (2014)
  `10.1103/PhysRevB.89.035412 <http://link.aps.org/doi/10.1103/PhysRevB.89.035412>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_x_lv_rpw86", polarized, )
  def _gga_x_lv_rpw86_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_lv_rpw86.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_lv_rpw86_epsilon_xc

def gga_x_pbe_tca(
  polarized: bool = True,
  _kappa: Optional[float] = None,
  _mu: Optional[float] = None,
) -> Callable:
  r"""
  V. Tognetti, P. Cortona, and C. Adamo.,  Chem. Phys. Lett. 460, 536 (2008)
  `10.1016/j.cplett.2008.06.032 <http://www.sciencedirect.com/science/article/pii/S0009261408008464>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _kappa : Optional[float], default: 1.227
    Asymptotic value of the enhancement function
  _mu : Optional[float], default: 0.2195149727645171
    Coefficient of the 2nd order expansion
  """
  _kappa = (_kappa or 1.227)
  _mu = (_mu or 0.2195149727645171)
  p = get_p("gga_x_pbe_tca", polarized, _kappa, _mu)
  def _gga_x_pbe_tca_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_pbe_tca.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_pbe_tca_epsilon_xc

def gga_x_pbeint(
  polarized: bool = True,
  _kappa: Optional[float] = None,
  _alpha: Optional[float] = None,
  _muPBE: Optional[float] = None,
  _muGE: Optional[float] = None,
) -> Callable:
  r"""
  E. Fabiano, L. A. Constantin, and F. Della Sala.,  Phys. Rev. B 82, 113104 (2010)
  `10.1103/PhysRevB.82.113104 <http://link.aps.org/doi/10.1103/PhysRevB.82.113104>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _kappa : Optional[float], default: 0.804
    Asymptotic value of the enhancement function
  _alpha : Optional[float], default: 0.197
    defines the width of the interpolation
  _muPBE : Optional[float], default: 0.2195149727645171
    Limiting value for large s
  _muGE : Optional[float], default: 0.12345679012345678
    Limiting value for small s
  """
  _kappa = (_kappa or 0.804)
  _alpha = (_alpha or 0.197)
  _muPBE = (_muPBE or 0.2195149727645171)
  _muGE = (_muGE or 0.12345679012345678)
  p = get_p("gga_x_pbeint", polarized, _kappa, _alpha, _muPBE, _muGE)
  def _gga_x_pbeint_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_pbeint.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_pbeint_epsilon_xc

def gga_c_zpbeint(
  polarized: bool = True,
) -> Callable:
  r"""
  L. A. Constantin, E. Fabiano, and F. Della Sala.,  Phys. Rev. B 84, 233103 (2011)
  `10.1103/PhysRevB.84.233103 <http://link.aps.org/doi/10.1103/PhysRevB.84.233103>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_c_zpbeint", polarized, )
  def _gga_c_zpbeint_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_c_zpbeint.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_c_zpbeint_epsilon_xc

def gga_c_pbeint(
  polarized: bool = True,
  _beta: Optional[float] = None,
  _gamma: Optional[float] = None,
  _B: Optional[float] = None,
) -> Callable:
  r"""
  E. Fabiano, L. A. Constantin, and F. Della Sala.,  Phys. Rev. B 82, 113104 (2010)
  `10.1103/PhysRevB.82.113104 <http://link.aps.org/doi/10.1103/PhysRevB.82.113104>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _beta : Optional[float], default: 0.052
    beta constant
  _gamma : Optional[float], default: 0.031090690869654894
    (1 - ln(2))/Pi^2 in the PBE
  _B : Optional[float], default: 1.0
    Multiplies the A t^2 term. Used in the SPBE functional
  """
  _beta = (_beta or 0.052)
  _gamma = (_gamma or 0.031090690869654894)
  _B = (_B or 1.0)
  p = get_p("gga_c_pbeint", polarized, _beta, _gamma, _B)
  def _gga_c_pbeint_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_c_pbeint.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_c_pbeint_epsilon_xc

def gga_c_zpbesol(
  polarized: bool = True,
) -> Callable:
  r"""
  L. A. Constantin, E. Fabiano, and F. Della Sala.,  Phys. Rev. B 84, 233103 (2011)
  `10.1103/PhysRevB.84.233103 <http://link.aps.org/doi/10.1103/PhysRevB.84.233103>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_c_zpbesol", polarized, )
  def _gga_c_zpbesol_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_c_zpbesol.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_c_zpbesol_epsilon_xc

def mgga_xc_otpss_d(
  polarized: bool = True,
) -> Callable:
  r"""
  L. Goerigk and S. Grimme.,  J. Chem. Theory Comput. 6, 107 (2010)
  `10.1021/ct900489g <http://pubs.acs.org/doi/abs/10.1021/ct900489g>`_

  
  Mixing of the following functionals:
    mgga_x_tpss (coefficient: 1.0)
    mgga_c_tpss (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("mgga_xc_otpss_d", polarized, )
  def _mgga_xc_otpss_d_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_xc_otpss_d.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  
  _mgga_xc_otpss_d_epsilon_xc.cam_alpha = p.cam_alpha
  _mgga_xc_otpss_d_epsilon_xc.cam_beta = p.cam_beta
  _mgga_xc_otpss_d_epsilon_xc.cam_omega = p.cam_omega
  _mgga_xc_otpss_d_epsilon_xc.nlc_b = p.nlc_b
  _mgga_xc_otpss_d_epsilon_xc.nlc_C = p.nlc_C

  return _mgga_xc_otpss_d_epsilon_xc

def gga_xc_opbe_d(
  polarized: bool = True,
) -> Callable:
  r"""
  L. Goerigk and S. Grimme.,  J. Chem. Theory Comput. 6, 107 (2010)
  `10.1021/ct900489g <http://pubs.acs.org/doi/abs/10.1021/ct900489g>`_

  
  Mixing of the following functionals:
    gga_x_pbe (coefficient: 1.0)
    gga_c_pbe (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_xc_opbe_d", polarized, )
  def _gga_xc_opbe_d_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_xc_opbe_d.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _gga_xc_opbe_d_epsilon_xc.cam_alpha = p.cam_alpha
  _gga_xc_opbe_d_epsilon_xc.cam_beta = p.cam_beta
  _gga_xc_opbe_d_epsilon_xc.cam_omega = p.cam_omega
  _gga_xc_opbe_d_epsilon_xc.nlc_b = p.nlc_b
  _gga_xc_opbe_d_epsilon_xc.nlc_C = p.nlc_C

  return _gga_xc_opbe_d_epsilon_xc

def gga_xc_opwlyp_d(
  polarized: bool = True,
) -> Callable:
  r"""
  L. Goerigk and S. Grimme.,  J. Chem. Theory Comput. 6, 107 (2010)
  `10.1021/ct900489g <http://pubs.acs.org/doi/abs/10.1021/ct900489g>`_

  
  Mixing of the following functionals:
    gga_x_mpw91 (coefficient: 1.0)
    gga_c_lyp (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_xc_opwlyp_d", polarized, )
  def _gga_xc_opwlyp_d_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_xc_opwlyp_d.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _gga_xc_opwlyp_d_epsilon_xc.cam_alpha = p.cam_alpha
  _gga_xc_opwlyp_d_epsilon_xc.cam_beta = p.cam_beta
  _gga_xc_opwlyp_d_epsilon_xc.cam_omega = p.cam_omega
  _gga_xc_opwlyp_d_epsilon_xc.nlc_b = p.nlc_b
  _gga_xc_opwlyp_d_epsilon_xc.nlc_C = p.nlc_C

  return _gga_xc_opwlyp_d_epsilon_xc

def gga_xc_oblyp_d(
  polarized: bool = True,
) -> Callable:
  r"""
  L. Goerigk and S. Grimme.,  J. Chem. Theory Comput. 6, 107 (2010)
  `10.1021/ct900489g <http://pubs.acs.org/doi/abs/10.1021/ct900489g>`_

  
  Mixing of the following functionals:
    gga_x_b88 (coefficient: 1.0)
    gga_c_lyp (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_xc_oblyp_d", polarized, )
  def _gga_xc_oblyp_d_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_xc_oblyp_d.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _gga_xc_oblyp_d_epsilon_xc.cam_alpha = p.cam_alpha
  _gga_xc_oblyp_d_epsilon_xc.cam_beta = p.cam_beta
  _gga_xc_oblyp_d_epsilon_xc.cam_omega = p.cam_omega
  _gga_xc_oblyp_d_epsilon_xc.nlc_b = p.nlc_b
  _gga_xc_oblyp_d_epsilon_xc.nlc_C = p.nlc_C

  return _gga_xc_oblyp_d_epsilon_xc

def gga_x_vmt84_ge(
  polarized: bool = True,
) -> Callable:
  r"""
  A. Vela, J. C. Pacheco-Kato, J. L. Gázquez, J. M. del Campo, and S. B. Trickey.,  J. Chem. Phys. 136, 144115 (2012)
  `10.1063/1.3701132 <http://scitation.aip.org/content/aip/journal/jcp/136/14/10.1063/1.3701132>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_x_vmt84_ge", polarized, )
  def _gga_x_vmt84_ge_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_vmt84_ge.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_vmt84_ge_epsilon_xc

def gga_x_vmt84_pbe(
  polarized: bool = True,
) -> Callable:
  r"""
  A. Vela, J. C. Pacheco-Kato, J. L. Gázquez, J. M. del Campo, and S. B. Trickey.,  J. Chem. Phys. 136, 144115 (2012)
  `10.1063/1.3701132 <http://scitation.aip.org/content/aip/journal/jcp/136/14/10.1063/1.3701132>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_x_vmt84_pbe", polarized, )
  def _gga_x_vmt84_pbe_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_vmt84_pbe.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_vmt84_pbe_epsilon_xc

def gga_x_vmt_ge(
  polarized: bool = True,
) -> Callable:
  r"""
  A. Vela, V. Medel, and S. B. Trickey.,  J. Chem. Phys. 130, 244103 (2009)
  `10.1063/1.3152713 <http://scitation.aip.org/content/aip/journal/jcp/130/24/10.1063/1.3152713>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_x_vmt_ge", polarized, )
  def _gga_x_vmt_ge_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_vmt_ge.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_vmt_ge_epsilon_xc

def gga_x_vmt_pbe(
  polarized: bool = True,
) -> Callable:
  r"""
  A. Vela, V. Medel, and S. B. Trickey.,  J. Chem. Phys. 130, 244103 (2009)
  `10.1063/1.3152713 <http://scitation.aip.org/content/aip/journal/jcp/130/24/10.1063/1.3152713>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_x_vmt_pbe", polarized, )
  def _gga_x_vmt_pbe_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_vmt_pbe.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_vmt_pbe_epsilon_xc

def mgga_c_cs(
  polarized: bool = True,
) -> Callable:
  r"""
  R. Colle and O. Salvetti.,  Theor. Chim. Acta 37, 329 (1975)
  `10.1007/BF01028401 <http://link.springer.com/article/10.1007\%2FBF01028401>`_

  C. Lee, W. Yang, and R. G. Parr.,  Phys. Rev. B 37, 785 (1988)
  `10.1103/PhysRevB.37.785 <http://link.aps.org/doi/10.1103/PhysRevB.37.785>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("mgga_c_cs", polarized, )
  def _mgga_c_cs_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_c_cs.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_c_cs_epsilon_xc

def mgga_c_mn12_sx(
  polarized: bool = True,
  _a0: Optional[float] = None,
  _a1: Optional[float] = None,
  _a2: Optional[float] = None,
  _a3: Optional[float] = None,
  _a4: Optional[float] = None,
  _a5: Optional[float] = None,
  _a6: Optional[float] = None,
  _a7: Optional[float] = None,
  _a8: Optional[float] = None,
  _a9: Optional[float] = None,
  _a10: Optional[float] = None,
  _a11: Optional[float] = None,
  _b0: Optional[float] = None,
  _b1: Optional[float] = None,
  _b2: Optional[float] = None,
  _b3: Optional[float] = None,
  _b4: Optional[float] = None,
  _b5: Optional[float] = None,
  _b6: Optional[float] = None,
  _b7: Optional[float] = None,
  _b8: Optional[float] = None,
  _b9: Optional[float] = None,
  _b10: Optional[float] = None,
  _b11: Optional[float] = None,
) -> Callable:
  r"""
  R. Peverati and D. G. Truhlar.,  Phys. Chem. Chem. Phys. 14, 16187 (2012)
  `10.1039/C2CP42576A <http://pubs.rsc.org/en/Content/ArticleLanding/2012/CP/c2cp42576a>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a0 : Optional[float], default: 0.7171161
    a0
  _a1 : Optional[float], default: -2.380914
    a1
  _a2 : Optional[float], default: 5.793565
    a2
  _a3 : Optional[float], default: -1.243624
    a3
  _a4 : Optional[float], default: 13.6492
    a4
  _a5 : Optional[float], default: -21.10812
    a5
  _a6 : Optional[float], default: -15.98767
    a6
  _a7 : Optional[float], default: 14.29208
    a7
  _a8 : Optional[float], default: 6.149191
    a8
  _a9 : Optional[float], default: 0.0
    a9
  _a10 : Optional[float], default: 0.0
    a10
  _a11 : Optional[float], default: 0.0
    a11
  _b0 : Optional[float], default: 0.4663699
    b0
  _b1 : Optional[float], default: -9.110685
    b1
  _b2 : Optional[float], default: 8.705051
    b2
  _b3 : Optional[float], default: -1.813949
    b3
  _b4 : Optional[float], default: -0.4147211
    b4
  _b5 : Optional[float], default: -10.21527
    b5
  _b6 : Optional[float], default: 0.824027
    b6
  _b7 : Optional[float], default: 4.993815
    b7
  _b8 : Optional[float], default: -25.6393
    b8
  _b9 : Optional[float], default: 0.0
    b9
  _b10 : Optional[float], default: 0.0
    b10
  _b11 : Optional[float], default: 0.0
    b11
  """
  _a0 = (_a0 or 0.7171161)
  _a1 = (_a1 or -2.380914)
  _a2 = (_a2 or 5.793565)
  _a3 = (_a3 or -1.243624)
  _a4 = (_a4 or 13.6492)
  _a5 = (_a5 or -21.10812)
  _a6 = (_a6 or -15.98767)
  _a7 = (_a7 or 14.29208)
  _a8 = (_a8 or 6.149191)
  _a9 = (_a9 or 0.0)
  _a10 = (_a10 or 0.0)
  _a11 = (_a11 or 0.0)
  _b0 = (_b0 or 0.4663699)
  _b1 = (_b1 or -9.110685)
  _b2 = (_b2 or 8.705051)
  _b3 = (_b3 or -1.813949)
  _b4 = (_b4 or -0.4147211)
  _b5 = (_b5 or -10.21527)
  _b6 = (_b6 or 0.824027)
  _b7 = (_b7 or 4.993815)
  _b8 = (_b8 or -25.6393)
  _b9 = (_b9 or 0.0)
  _b10 = (_b10 or 0.0)
  _b11 = (_b11 or 0.0)
  p = get_p("mgga_c_mn12_sx", polarized, _a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8, _a9, _a10, _a11, _b0, _b1, _b2, _b3, _b4, _b5, _b6, _b7, _b8, _b9, _b10, _b11)
  def _mgga_c_mn12_sx_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_c_mn12_sx.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_c_mn12_sx_epsilon_xc

def mgga_c_mn12_l(
  polarized: bool = True,
  _a0: Optional[float] = None,
  _a1: Optional[float] = None,
  _a2: Optional[float] = None,
  _a3: Optional[float] = None,
  _a4: Optional[float] = None,
  _a5: Optional[float] = None,
  _a6: Optional[float] = None,
  _a7: Optional[float] = None,
  _a8: Optional[float] = None,
  _a9: Optional[float] = None,
  _a10: Optional[float] = None,
  _a11: Optional[float] = None,
  _b0: Optional[float] = None,
  _b1: Optional[float] = None,
  _b2: Optional[float] = None,
  _b3: Optional[float] = None,
  _b4: Optional[float] = None,
  _b5: Optional[float] = None,
  _b6: Optional[float] = None,
  _b7: Optional[float] = None,
  _b8: Optional[float] = None,
  _b9: Optional[float] = None,
  _b10: Optional[float] = None,
  _b11: Optional[float] = None,
) -> Callable:
  r"""
  R. Peverati and D. G. Truhlar.,  Phys. Chem. Chem. Phys. 14, 13171 (2012)
  `10.1039/C2CP42025B <http://pubs.rsc.org/en/Content/ArticleLanding/2012/CP/c2cp42025b>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a0 : Optional[float], default: 0.884461
    a0
  _a1 : Optional[float], default: -0.2202279
    a1
  _a2 : Optional[float], default: 5.701372
    a2
  _a3 : Optional[float], default: -2.562378
    a3
  _a4 : Optional[float], default: -0.9646827
    a4
  _a5 : Optional[float], default: 0.1982183
    a5
  _a6 : Optional[float], default: 10.19976
    a6
  _a7 : Optional[float], default: 0.9789352
    a7
  _a8 : Optional[float], default: -1.512722
    a8
  _a9 : Optional[float], default: 0.0
    a9
  _a10 : Optional[float], default: 0.0
    a10
  _a11 : Optional[float], default: 0.0
    a11
  _b0 : Optional[float], default: 0.5323948
    b0
  _b1 : Optional[float], default: -5.831909
    b1
  _b2 : Optional[float], default: 3.882386
    b2
  _b3 : Optional[float], default: 5.878488
    b3
  _b4 : Optional[float], default: 14.93228
    b4
  _b5 : Optional[float], default: -13.74636
    b5
  _b6 : Optional[float], default: -8.492327
    b6
  _b7 : Optional[float], default: -2.486548
    b7
  _b8 : Optional[float], default: -18.22346
    b8
  _b9 : Optional[float], default: 0.0
    b9
  _b10 : Optional[float], default: 0.0
    b10
  _b11 : Optional[float], default: 0.0
    b11
  """
  _a0 = (_a0 or 0.884461)
  _a1 = (_a1 or -0.2202279)
  _a2 = (_a2 or 5.701372)
  _a3 = (_a3 or -2.562378)
  _a4 = (_a4 or -0.9646827)
  _a5 = (_a5 or 0.1982183)
  _a6 = (_a6 or 10.19976)
  _a7 = (_a7 or 0.9789352)
  _a8 = (_a8 or -1.512722)
  _a9 = (_a9 or 0.0)
  _a10 = (_a10 or 0.0)
  _a11 = (_a11 or 0.0)
  _b0 = (_b0 or 0.5323948)
  _b1 = (_b1 or -5.831909)
  _b2 = (_b2 or 3.882386)
  _b3 = (_b3 or 5.878488)
  _b4 = (_b4 or 14.93228)
  _b5 = (_b5 or -13.74636)
  _b6 = (_b6 or -8.492327)
  _b7 = (_b7 or -2.486548)
  _b8 = (_b8 or -18.22346)
  _b9 = (_b9 or 0.0)
  _b10 = (_b10 or 0.0)
  _b11 = (_b11 or 0.0)
  p = get_p("mgga_c_mn12_l", polarized, _a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8, _a9, _a10, _a11, _b0, _b1, _b2, _b3, _b4, _b5, _b6, _b7, _b8, _b9, _b10, _b11)
  def _mgga_c_mn12_l_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_c_mn12_l.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_c_mn12_l_epsilon_xc

def mgga_c_m11_l(
  polarized: bool = True,
  _a0: Optional[float] = None,
  _a1: Optional[float] = None,
  _a2: Optional[float] = None,
  _a3: Optional[float] = None,
  _a4: Optional[float] = None,
  _a5: Optional[float] = None,
  _a6: Optional[float] = None,
  _a7: Optional[float] = None,
  _a8: Optional[float] = None,
  _a9: Optional[float] = None,
  _a10: Optional[float] = None,
  _a11: Optional[float] = None,
  _b0: Optional[float] = None,
  _b1: Optional[float] = None,
  _b2: Optional[float] = None,
  _b3: Optional[float] = None,
  _b4: Optional[float] = None,
  _b5: Optional[float] = None,
  _b6: Optional[float] = None,
  _b7: Optional[float] = None,
  _b8: Optional[float] = None,
  _b9: Optional[float] = None,
  _b10: Optional[float] = None,
  _b11: Optional[float] = None,
) -> Callable:
  r"""
  R. Peverati and D. G. Truhlar.,  J. Phys. Chem. Lett. 3, 117 (2012)
  `10.1021/jz201525m <http://pubs.acs.org/doi/abs/10.1021/jz201525m>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a0 : Optional[float], default: 1.0
    a0
  _a1 : Optional[float], default: 0.0
    a1
  _a2 : Optional[float], default: 2.75088
    a2
  _a3 : Optional[float], default: -15.62287
    a3
  _a4 : Optional[float], default: 9.363381
    a4
  _a5 : Optional[float], default: 21.41024
    a5
  _a6 : Optional[float], default: -14.24975
    a6
  _a7 : Optional[float], default: -11.34712
    a7
  _a8 : Optional[float], default: 10.22365
    a8
  _a9 : Optional[float], default: 0.0
    a9
  _a10 : Optional[float], default: 0.0
    a10
  _a11 : Optional[float], default: 0.0
    a11
  _b0 : Optional[float], default: 1.0
    b0
  _b1 : Optional[float], default: -9.08206
    b1
  _b2 : Optional[float], default: 6.134682
    b2
  _b3 : Optional[float], default: -13.33216
    b3
  _b4 : Optional[float], default: -14.64115
    b4
  _b5 : Optional[float], default: 17.13143
    b5
  _b6 : Optional[float], default: 2.480738
    b6
  _b7 : Optional[float], default: -10.07036
    b7
  _b8 : Optional[float], default: -0.1117521
    b8
  _b9 : Optional[float], default: 0.0
    b9
  _b10 : Optional[float], default: 0.0
    b10
  _b11 : Optional[float], default: 0.0
    b11
  """
  _a0 = (_a0 or 1.0)
  _a1 = (_a1 or 0.0)
  _a2 = (_a2 or 2.75088)
  _a3 = (_a3 or -15.62287)
  _a4 = (_a4 or 9.363381)
  _a5 = (_a5 or 21.41024)
  _a6 = (_a6 or -14.24975)
  _a7 = (_a7 or -11.34712)
  _a8 = (_a8 or 10.22365)
  _a9 = (_a9 or 0.0)
  _a10 = (_a10 or 0.0)
  _a11 = (_a11 or 0.0)
  _b0 = (_b0 or 1.0)
  _b1 = (_b1 or -9.08206)
  _b2 = (_b2 or 6.134682)
  _b3 = (_b3 or -13.33216)
  _b4 = (_b4 or -14.64115)
  _b5 = (_b5 or 17.13143)
  _b6 = (_b6 or 2.480738)
  _b7 = (_b7 or -10.07036)
  _b8 = (_b8 or -0.1117521)
  _b9 = (_b9 or 0.0)
  _b10 = (_b10 or 0.0)
  _b11 = (_b11 or 0.0)
  p = get_p("mgga_c_m11_l", polarized, _a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8, _a9, _a10, _a11, _b0, _b1, _b2, _b3, _b4, _b5, _b6, _b7, _b8, _b9, _b10, _b11)
  def _mgga_c_m11_l_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_c_m11_l.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_c_m11_l_epsilon_xc

def mgga_c_m11(
  polarized: bool = True,
  _a0: Optional[float] = None,
  _a1: Optional[float] = None,
  _a2: Optional[float] = None,
  _a3: Optional[float] = None,
  _a4: Optional[float] = None,
  _a5: Optional[float] = None,
  _a6: Optional[float] = None,
  _a7: Optional[float] = None,
  _a8: Optional[float] = None,
  _a9: Optional[float] = None,
  _a10: Optional[float] = None,
  _a11: Optional[float] = None,
  _b0: Optional[float] = None,
  _b1: Optional[float] = None,
  _b2: Optional[float] = None,
  _b3: Optional[float] = None,
  _b4: Optional[float] = None,
  _b5: Optional[float] = None,
  _b6: Optional[float] = None,
  _b7: Optional[float] = None,
  _b8: Optional[float] = None,
  _b9: Optional[float] = None,
  _b10: Optional[float] = None,
  _b11: Optional[float] = None,
) -> Callable:
  r"""
  R. Peverati and D. G. Truhlar.,  J. Phys. Chem. Lett. 2, 2810 (2011)
  `10.1021/jz201170d <http://pubs.acs.org/doi/abs/10.1021/jz201170d>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a0 : Optional[float], default: 1.0
    a0
  _a1 : Optional[float], default: 0.0
    a1
  _a2 : Optional[float], default: -3.893325
    a2
  _a3 : Optional[float], default: -2.1688455
    a3
  _a4 : Optional[float], default: 9.34972
    a4
  _a5 : Optional[float], default: -19.84514
    a5
  _a6 : Optional[float], default: 2.3455253
    a6
  _a7 : Optional[float], default: 79.246513
    a7
  _a8 : Optional[float], default: 9.6042757
    a8
  _a9 : Optional[float], default: -67.856719
    a9
  _a10 : Optional[float], default: -9.1841067
    a10
  _a11 : Optional[float], default: 0.0
    a11
  _b0 : Optional[float], default: 0.72239798
    b0
  _b1 : Optional[float], default: 0.43730564
    b1
  _b2 : Optional[float], default: -16.088809
    b2
  _b3 : Optional[float], default: -65.542437
    b3
  _b4 : Optional[float], default: 32.05723
    b4
  _b5 : Optional[float], default: 186.17888
    b5
  _b6 : Optional[float], default: 20.483468
    b6
  _b7 : Optional[float], default: -70.853739
    b7
  _b8 : Optional[float], default: 44.483915
    b8
  _b9 : Optional[float], default: -94.484747
    b9
  _b10 : Optional[float], default: -114.59868
    b10
  _b11 : Optional[float], default: 0.0
    b11
  """
  _a0 = (_a0 or 1.0)
  _a1 = (_a1 or 0.0)
  _a2 = (_a2 or -3.893325)
  _a3 = (_a3 or -2.1688455)
  _a4 = (_a4 or 9.34972)
  _a5 = (_a5 or -19.84514)
  _a6 = (_a6 or 2.3455253)
  _a7 = (_a7 or 79.246513)
  _a8 = (_a8 or 9.6042757)
  _a9 = (_a9 or -67.856719)
  _a10 = (_a10 or -9.1841067)
  _a11 = (_a11 or 0.0)
  _b0 = (_b0 or 0.72239798)
  _b1 = (_b1 or 0.43730564)
  _b2 = (_b2 or -16.088809)
  _b3 = (_b3 or -65.542437)
  _b4 = (_b4 or 32.05723)
  _b5 = (_b5 or 186.17888)
  _b6 = (_b6 or 20.483468)
  _b7 = (_b7 or -70.853739)
  _b8 = (_b8 or 44.483915)
  _b9 = (_b9 or -94.484747)
  _b10 = (_b10 or -114.59868)
  _b11 = (_b11 or 0.0)
  p = get_p("mgga_c_m11", polarized, _a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8, _a9, _a10, _a11, _b0, _b1, _b2, _b3, _b4, _b5, _b6, _b7, _b8, _b9, _b10, _b11)
  def _mgga_c_m11_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_c_m11.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_c_m11_epsilon_xc

def mgga_c_m08_so(
  polarized: bool = True,
  _a0: Optional[float] = None,
  _a1: Optional[float] = None,
  _a2: Optional[float] = None,
  _a3: Optional[float] = None,
  _a4: Optional[float] = None,
  _a5: Optional[float] = None,
  _a6: Optional[float] = None,
  _a7: Optional[float] = None,
  _a8: Optional[float] = None,
  _a9: Optional[float] = None,
  _a10: Optional[float] = None,
  _a11: Optional[float] = None,
  _b0: Optional[float] = None,
  _b1: Optional[float] = None,
  _b2: Optional[float] = None,
  _b3: Optional[float] = None,
  _b4: Optional[float] = None,
  _b5: Optional[float] = None,
  _b6: Optional[float] = None,
  _b7: Optional[float] = None,
  _b8: Optional[float] = None,
  _b9: Optional[float] = None,
  _b10: Optional[float] = None,
  _b11: Optional[float] = None,
) -> Callable:
  r"""
  Y. Zhao and D. G. Truhlar.,  J. Chem. Theory Comput. 4, 1849 (2008)
  `10.1021/ct800246v <http://pubs.acs.org/doi/abs/10.1021/ct800246v>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a0 : Optional[float], default: 1.0
    a0
  _a1 : Optional[float], default: 0.0
    a1
  _a2 : Optional[float], default: -3.9980886
    a2
  _a3 : Optional[float], default: 12.98234
    a3
  _a4 : Optional[float], default: 101.17507
    a4
  _a5 : Optional[float], default: -89.541984
    a5
  _a6 : Optional[float], default: -356.40242
    a6
  _a7 : Optional[float], default: 206.98803
    a7
  _a8 : Optional[float], default: 460.3778
    a8
  _a9 : Optional[float], default: -245.10559
    a9
  _a10 : Optional[float], default: -196.38425
    a10
  _a11 : Optional[float], default: 118.81459
    a11
  _b0 : Optional[float], default: 1.0
    b0
  _b1 : Optional[float], default: -4.4117403
    b1
  _b2 : Optional[float], default: -6.4128622
    b2
  _b3 : Optional[float], default: 47.583635
    b3
  _b4 : Optional[float], default: 186.30053
    b4
  _b5 : Optional[float], default: -128.00784
    b5
  _b6 : Optional[float], default: -553.85258
    b6
  _b7 : Optional[float], default: 138.73727
    b7
  _b8 : Optional[float], default: 416.46537
    b8
  _b9 : Optional[float], default: -266.26577
    b9
  _b10 : Optional[float], default: 56.6763
    b10
  _b11 : Optional[float], default: 316.73746
    b11
  """
  _a0 = (_a0 or 1.0)
  _a1 = (_a1 or 0.0)
  _a2 = (_a2 or -3.9980886)
  _a3 = (_a3 or 12.98234)
  _a4 = (_a4 or 101.17507)
  _a5 = (_a5 or -89.541984)
  _a6 = (_a6 or -356.40242)
  _a7 = (_a7 or 206.98803)
  _a8 = (_a8 or 460.3778)
  _a9 = (_a9 or -245.10559)
  _a10 = (_a10 or -196.38425)
  _a11 = (_a11 or 118.81459)
  _b0 = (_b0 or 1.0)
  _b1 = (_b1 or -4.4117403)
  _b2 = (_b2 or -6.4128622)
  _b3 = (_b3 or 47.583635)
  _b4 = (_b4 or 186.30053)
  _b5 = (_b5 or -128.00784)
  _b6 = (_b6 or -553.85258)
  _b7 = (_b7 or 138.73727)
  _b8 = (_b8 or 416.46537)
  _b9 = (_b9 or -266.26577)
  _b10 = (_b10 or 56.6763)
  _b11 = (_b11 or 316.73746)
  p = get_p("mgga_c_m08_so", polarized, _a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8, _a9, _a10, _a11, _b0, _b1, _b2, _b3, _b4, _b5, _b6, _b7, _b8, _b9, _b10, _b11)
  def _mgga_c_m08_so_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_c_m08_so.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_c_m08_so_epsilon_xc

def mgga_c_m08_hx(
  polarized: bool = True,
  _a0: Optional[float] = None,
  _a1: Optional[float] = None,
  _a2: Optional[float] = None,
  _a3: Optional[float] = None,
  _a4: Optional[float] = None,
  _a5: Optional[float] = None,
  _a6: Optional[float] = None,
  _a7: Optional[float] = None,
  _a8: Optional[float] = None,
  _a9: Optional[float] = None,
  _a10: Optional[float] = None,
  _a11: Optional[float] = None,
  _b0: Optional[float] = None,
  _b1: Optional[float] = None,
  _b2: Optional[float] = None,
  _b3: Optional[float] = None,
  _b4: Optional[float] = None,
  _b5: Optional[float] = None,
  _b6: Optional[float] = None,
  _b7: Optional[float] = None,
  _b8: Optional[float] = None,
  _b9: Optional[float] = None,
  _b10: Optional[float] = None,
  _b11: Optional[float] = None,
) -> Callable:
  r"""
  Y. Zhao and D. G. Truhlar.,  J. Chem. Theory Comput. 4, 1849 (2008)
  `10.1021/ct800246v <http://pubs.acs.org/doi/abs/10.1021/ct800246v>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a0 : Optional[float], default: 1.0
    a0
  _a1 : Optional[float], default: -0.40661387
    a1
  _a2 : Optional[float], default: -3.323253
    a2
  _a3 : Optional[float], default: 1.554098
    a3
  _a4 : Optional[float], default: 44.248033
    a4
  _a5 : Optional[float], default: -84.35193
    a5
  _a6 : Optional[float], default: -119.55581
    a6
  _a7 : Optional[float], default: 391.47081
    a7
  _a8 : Optional[float], default: 183.63851
    a8
  _a9 : Optional[float], default: -632.68223
    a9
  _a10 : Optional[float], default: -112.97403
    a10
  _a11 : Optional[float], default: 336.29312
    a11
  _b0 : Optional[float], default: 1.3812334
    b0
  _b1 : Optional[float], default: -2.4683806
    b1
  _b2 : Optional[float], default: -11.901501
    b2
  _b3 : Optional[float], default: -54.112667
    b3
  _b4 : Optional[float], default: 10.055846
    b4
  _b5 : Optional[float], default: 148.00687
    b5
  _b6 : Optional[float], default: 115.6142
    b6
  _b7 : Optional[float], default: 255.91815
    b7
  _b8 : Optional[float], default: 213.20772
    b8
  _b9 : Optional[float], default: -484.12067
    b9
  _b10 : Optional[float], default: -434.30813
    b10
  _b11 : Optional[float], default: 56.627964
    b11
  """
  _a0 = (_a0 or 1.0)
  _a1 = (_a1 or -0.40661387)
  _a2 = (_a2 or -3.323253)
  _a3 = (_a3 or 1.554098)
  _a4 = (_a4 or 44.248033)
  _a5 = (_a5 or -84.35193)
  _a6 = (_a6 or -119.55581)
  _a7 = (_a7 or 391.47081)
  _a8 = (_a8 or 183.63851)
  _a9 = (_a9 or -632.68223)
  _a10 = (_a10 or -112.97403)
  _a11 = (_a11 or 336.29312)
  _b0 = (_b0 or 1.3812334)
  _b1 = (_b1 or -2.4683806)
  _b2 = (_b2 or -11.901501)
  _b3 = (_b3 or -54.112667)
  _b4 = (_b4 or 10.055846)
  _b5 = (_b5 or 148.00687)
  _b6 = (_b6 or 115.6142)
  _b7 = (_b7 or 255.91815)
  _b8 = (_b8 or 213.20772)
  _b9 = (_b9 or -484.12067)
  _b10 = (_b10 or -434.30813)
  _b11 = (_b11 or 56.627964)
  p = get_p("mgga_c_m08_hx", polarized, _a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8, _a9, _a10, _a11, _b0, _b1, _b2, _b3, _b4, _b5, _b6, _b7, _b8, _b9, _b10, _b11)
  def _mgga_c_m08_hx_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_c_m08_hx.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_c_m08_hx_epsilon_xc

def gga_c_n12_sx(
  polarized: bool = True,
  _css0: Optional[float] = None,
  _css1: Optional[float] = None,
  _css2: Optional[float] = None,
  _css3: Optional[float] = None,
  _css4: Optional[float] = None,
  _cos0: Optional[float] = None,
  _cos1: Optional[float] = None,
  _cos2: Optional[float] = None,
  _cos3: Optional[float] = None,
  _cos4: Optional[float] = None,
) -> Callable:
  r"""
  R. Peverati and D. G. Truhlar.,  Phys. Chem. Chem. Phys. 14, 16187 (2012)
  `10.1039/C2CP42576A <http://pubs.rsc.org/en/Content/ArticleLanding/2012/CP/c2cp42576a>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _css0 : Optional[float], default: 2.63373
    u^0 coefficient for same-spin correlation
  _css1 : Optional[float], default: -1.0545
    u^1 coefficient for same-spin correlation
  _css2 : Optional[float], default: -0.729853
    u^2 coefficient for same-spin correlation
  _css3 : Optional[float], default: 4.94024
    u^3 coefficient for same-spin correlation
  _css4 : Optional[float], default: -7.3176
    u^4 coefficient for same-spin correlation
  _cos0 : Optional[float], default: 0.833615
    u^0 coefficient for opposite-spin correlation
  _cos1 : Optional[float], default: 3.24128
    u^1 coefficient for opposite-spin correlation
  _cos2 : Optional[float], default: -10.6407
    u^2 coefficient for opposite-spin correlation
  _cos3 : Optional[float], default: -16.0471
    u^3 coefficient for opposite-spin correlation
  _cos4 : Optional[float], default: 25.1047
    u^4 coefficient for opposite-spin correlation
  """
  _css0 = (_css0 or 2.63373)
  _css1 = (_css1 or -1.0545)
  _css2 = (_css2 or -0.729853)
  _css3 = (_css3 or 4.94024)
  _css4 = (_css4 or -7.3176)
  _cos0 = (_cos0 or 0.833615)
  _cos1 = (_cos1 or 3.24128)
  _cos2 = (_cos2 or -10.6407)
  _cos3 = (_cos3 or -16.0471)
  _cos4 = (_cos4 or 25.1047)
  p = get_p("gga_c_n12_sx", polarized, _css0, _css1, _css2, _css3, _css4, _cos0, _cos1, _cos2, _cos3, _cos4)
  def _gga_c_n12_sx_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_c_n12_sx.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_c_n12_sx_epsilon_xc

def gga_c_n12(
  polarized: bool = True,
  _css0: Optional[float] = None,
  _css1: Optional[float] = None,
  _css2: Optional[float] = None,
  _css3: Optional[float] = None,
  _css4: Optional[float] = None,
  _cos0: Optional[float] = None,
  _cos1: Optional[float] = None,
  _cos2: Optional[float] = None,
  _cos3: Optional[float] = None,
  _cos4: Optional[float] = None,
) -> Callable:
  r"""
  R. Peverati and D. G. Truhlar.,  J. Chem. Theory Comput. 8, 2310 (2012)
  `10.1021/ct3002656 <http://pubs.acs.org/doi/abs/10.1021/ct3002656>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _css0 : Optional[float], default: 1.0
    u^0 coefficient for same-spin correlation
  _css1 : Optional[float], default: -5.5317
    u^1 coefficient for same-spin correlation
  _css2 : Optional[float], default: 30.7958
    u^2 coefficient for same-spin correlation
  _css3 : Optional[float], default: -56.4196
    u^3 coefficient for same-spin correlation
  _css4 : Optional[float], default: 32.125
    u^4 coefficient for same-spin correlation
  _cos0 : Optional[float], default: 1.0
    u^0 coefficient for opposite-spin correlation
  _cos1 : Optional[float], default: 3.24511
    u^1 coefficient for opposite-spin correlation
  _cos2 : Optional[float], default: -25.2893
    u^2 coefficient for opposite-spin correlation
  _cos3 : Optional[float], default: 14.4407
    u^3 coefficient for opposite-spin correlation
  _cos4 : Optional[float], default: 19.687
    u^4 coefficient for opposite-spin correlation
  """
  _css0 = (_css0 or 1.0)
  _css1 = (_css1 or -5.5317)
  _css2 = (_css2 or 30.7958)
  _css3 = (_css3 or -56.4196)
  _css4 = (_css4 or 32.125)
  _cos0 = (_cos0 or 1.0)
  _cos1 = (_cos1 or 3.24511)
  _cos2 = (_cos2 or -25.2893)
  _cos3 = (_cos3 or 14.4407)
  _cos4 = (_cos4 or 19.687)
  p = get_p("gga_c_n12", polarized, _css0, _css1, _css2, _css3, _css4, _cos0, _cos1, _cos2, _cos3, _cos4)
  def _gga_c_n12_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_c_n12.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_c_n12_epsilon_xc

def hyb_gga_x_n12_sx(
  polarized: bool = True,
  _CC00: Optional[float] = None,
  _CC01: Optional[float] = None,
  _CC02: Optional[float] = None,
  _CC03: Optional[float] = None,
  _CC10: Optional[float] = None,
  _CC11: Optional[float] = None,
  _CC12: Optional[float] = None,
  _CC13: Optional[float] = None,
  _CC20: Optional[float] = None,
  _CC21: Optional[float] = None,
  _CC22: Optional[float] = None,
  _CC23: Optional[float] = None,
  _CC30: Optional[float] = None,
  _CC31: Optional[float] = None,
  _CC32: Optional[float] = None,
  _CC33: Optional[float] = None,
  _beta: Optional[float] = None,
  _omega: Optional[float] = None,
) -> Callable:
  r"""
  R. Peverati and D. G. Truhlar.,  Phys. Chem. Chem. Phys. 14, 16187 (2012)
  `10.1039/C2CP42576A <http://pubs.rsc.org/en/Content/ArticleLanding/2012/CP/c2cp42576a>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _CC00 : Optional[float], default: 0.681116
    _CC00
  _CC01 : Optional[float], default: 1.88858
    _CC01
  _CC02 : Optional[float], default: 1.7859
    _CC02
  _CC03 : Optional[float], default: 0.879456
    _CC03
  _CC10 : Optional[float], default: -0.081227
    _CC10
  _CC11 : Optional[float], default: -1.08723
    _CC11
  _CC12 : Optional[float], default: -4.18682
    _CC12
  _CC13 : Optional[float], default: -30.0
    _CC13
  _CC20 : Optional[float], default: 0.536236
    _CC20
  _CC21 : Optional[float], default: -5.45678
    _CC21
  _CC22 : Optional[float], default: 30.0
    _CC22
  _CC23 : Optional[float], default: 55.1105
    _CC23
  _CC30 : Optional[float], default: -0.709913
    _CC30
  _CC31 : Optional[float], default: 13.0001
    _CC31
  _CC32 : Optional[float], default: -72.4877
    _CC32
  _CC33 : Optional[float], default: 29.8363
    _CC33
  _beta : Optional[float], default: 0.25
    Fraction of short-range exact exchange
  _omega : Optional[float], default: 0.11
    Range separation parameter
  """
  _CC00 = (_CC00 or 0.681116)
  _CC01 = (_CC01 or 1.88858)
  _CC02 = (_CC02 or 1.7859)
  _CC03 = (_CC03 or 0.879456)
  _CC10 = (_CC10 or -0.081227)
  _CC11 = (_CC11 or -1.08723)
  _CC12 = (_CC12 or -4.18682)
  _CC13 = (_CC13 or -30.0)
  _CC20 = (_CC20 or 0.536236)
  _CC21 = (_CC21 or -5.45678)
  _CC22 = (_CC22 or 30.0)
  _CC23 = (_CC23 or 55.1105)
  _CC30 = (_CC30 or -0.709913)
  _CC31 = (_CC31 or 13.0001)
  _CC32 = (_CC32 or -72.4877)
  _CC33 = (_CC33 or 29.8363)
  _beta = (_beta or 0.25)
  _omega = (_omega or 0.11)
  p = get_p("hyb_gga_x_n12_sx", polarized, _CC00, _CC01, _CC02, _CC03, _CC10, _CC11, _CC12, _CC13, _CC20, _CC21, _CC22, _CC23, _CC30, _CC31, _CC32, _CC33, _beta, _omega)
  def _hyb_gga_x_n12_sx_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_x_n12_sx.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _hyb_gga_x_n12_sx_epsilon_xc

def gga_x_n12(
  polarized: bool = True,
  _CC00: Optional[float] = None,
  _CC01: Optional[float] = None,
  _CC02: Optional[float] = None,
  _CC03: Optional[float] = None,
  _CC10: Optional[float] = None,
  _CC11: Optional[float] = None,
  _CC12: Optional[float] = None,
  _CC13: Optional[float] = None,
  _CC20: Optional[float] = None,
  _CC21: Optional[float] = None,
  _CC22: Optional[float] = None,
  _CC23: Optional[float] = None,
  _CC30: Optional[float] = None,
  _CC31: Optional[float] = None,
  _CC32: Optional[float] = None,
  _CC33: Optional[float] = None,
) -> Callable:
  r"""
  R. Peverati and D. G. Truhlar.,  J. Chem. Theory Comput. 8, 2310 (2012)
  `10.1021/ct3002656 <http://pubs.acs.org/doi/abs/10.1021/ct3002656>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _CC00 : Optional[float], default: 1.0
    _CC00
  _CC01 : Optional[float], default: 0.50788
    _CC01
  _CC02 : Optional[float], default: 0.168233
    _CC02
  _CC03 : Optional[float], default: 0.128887
    _CC03
  _CC10 : Optional[float], default: 0.0860211
    _CC10
  _CC11 : Optional[float], default: -17.1008
    _CC11
  _CC12 : Optional[float], default: 65.0814
    _CC12
  _CC13 : Optional[float], default: -70.1726
    _CC13
  _CC20 : Optional[float], default: -0.390755
    _CC20
  _CC21 : Optional[float], default: 51.3392
    _CC21
  _CC22 : Optional[float], default: -166.22
    _CC22
  _CC23 : Optional[float], default: 142.738
    _CC23
  _CC30 : Optional[float], default: 0.403611
    _CC30
  _CC31 : Optional[float], default: -34.4631
    _CC31
  _CC32 : Optional[float], default: 76.1661
    _CC32
  _CC33 : Optional[float], default: -2.41834
    _CC33
  """
  _CC00 = (_CC00 or 1.0)
  _CC01 = (_CC01 or 0.50788)
  _CC02 = (_CC02 or 0.168233)
  _CC03 = (_CC03 or 0.128887)
  _CC10 = (_CC10 or 0.0860211)
  _CC11 = (_CC11 or -17.1008)
  _CC12 = (_CC12 or 65.0814)
  _CC13 = (_CC13 or -70.1726)
  _CC20 = (_CC20 or -0.390755)
  _CC21 = (_CC21 or 51.3392)
  _CC22 = (_CC22 or -166.22)
  _CC23 = (_CC23 or 142.738)
  _CC30 = (_CC30 or 0.403611)
  _CC31 = (_CC31 or -34.4631)
  _CC32 = (_CC32 or 76.1661)
  _CC33 = (_CC33 or -2.41834)
  p = get_p("gga_x_n12", polarized, _CC00, _CC01, _CC02, _CC03, _CC10, _CC11, _CC12, _CC13, _CC20, _CC21, _CC22, _CC23, _CC30, _CC31, _CC32, _CC33)
  def _gga_x_n12_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_n12.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_n12_epsilon_xc

def gga_c_regtpss(
  polarized: bool = True,
) -> Callable:
  r"""
  J. P. Perdew, A. Ruzsinszky, G. I. Csonka, L. A. Constantin, and J. Sun.,  Phys. Rev. Lett. 103, 026403 (2009)
  `10.1103/PhysRevLett.103.026403 <http://link.aps.org/doi/10.1103/PhysRevLett.103.026403>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_c_regtpss", polarized, )
  def _gga_c_regtpss_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_c_regtpss.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_c_regtpss_epsilon_xc

def gga_c_op_xalpha(
  polarized: bool = True,
) -> Callable:
  r"""
  T. Tsuneda, T. Suzumura, and K. Hirao.,  J. Chem. Phys. 110, 10664 (1999)
  `10.1063/1.479012 <http://scitation.aip.org/content/aip/journal/jcp/110/22/10.1063/1.479012>`_

  T. Tsuneda, T. Suzumura, and K. Hirao.,  J. Chem. Phys. 111, 5656-5667 (1999)
  `10.1063/1.479954 <http://scitation.aip.org/content/aip/journal/jcp/111/13/10.1063/1.479954>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_c_op_xalpha", polarized, )
  def _gga_c_op_xalpha_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_c_op_xalpha.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_c_op_xalpha_epsilon_xc

def gga_c_op_g96(
  polarized: bool = True,
) -> Callable:
  r"""
  T. Tsuneda, T. Suzumura, and K. Hirao.,  J. Chem. Phys. 110, 10664 (1999)
  `10.1063/1.479012 <http://scitation.aip.org/content/aip/journal/jcp/110/22/10.1063/1.479012>`_

  T. Tsuneda, T. Suzumura, and K. Hirao.,  J. Chem. Phys. 111, 5656-5667 (1999)
  `10.1063/1.479954 <http://scitation.aip.org/content/aip/journal/jcp/111/13/10.1063/1.479954>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_c_op_g96", polarized, )
  def _gga_c_op_g96_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_c_op_g96.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_c_op_g96_epsilon_xc

def gga_c_op_pbe(
  polarized: bool = True,
) -> Callable:
  r"""
  T. Tsuneda, T. Suzumura, and K. Hirao.,  J. Chem. Phys. 110, 10664 (1999)
  `10.1063/1.479012 <http://scitation.aip.org/content/aip/journal/jcp/110/22/10.1063/1.479012>`_

  T. Tsuneda, T. Suzumura, and K. Hirao.,  J. Chem. Phys. 111, 5656-5667 (1999)
  `10.1063/1.479954 <http://scitation.aip.org/content/aip/journal/jcp/111/13/10.1063/1.479954>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_c_op_pbe", polarized, )
  def _gga_c_op_pbe_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_c_op_pbe.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_c_op_pbe_epsilon_xc

def gga_c_op_b88(
  polarized: bool = True,
) -> Callable:
  r"""
  T. Tsuneda, T. Suzumura, and K. Hirao.,  J. Chem. Phys. 110, 10664 (1999)
  `10.1063/1.479012 <http://scitation.aip.org/content/aip/journal/jcp/110/22/10.1063/1.479012>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_c_op_b88", polarized, )
  def _gga_c_op_b88_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_c_op_b88.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_c_op_b88_epsilon_xc

def gga_c_ft97(
  polarized: bool = True,
) -> Callable:
  r"""
  M. Filatov and W. Thiel.,  Int. J. Quantum Chem. 62, 603 (1997)
  `10.1002/(SICI)1097-461X(1997)62:6<603::AID-QUA4>3.0.CO;2-# <http://onlinelibrary.wiley.com/doi/10.1002/(SICI)1097-461X(1997)62:6\<603::AID-QUA4\>3.0.CO;2-\%23>`_

  M. Filatov and W. Thiel.,  Mol. Phys. 91, 847 (1997)
  `10.1080/002689797170950 <http://www.tandfonline.com/doi/abs/10.1080/002689797170950>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_c_ft97", polarized, )
  def _gga_c_ft97_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_c_ft97.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_c_ft97_epsilon_xc

def gga_c_spbe(
  polarized: bool = True,
  _beta: Optional[float] = None,
  _gamma: Optional[float] = None,
  _B: Optional[float] = None,
) -> Callable:
  r"""
  M. Swart, M. Solá, and F. M. Bickelhaupt.,  J. Chem. Phys. 131, 094103 (2009)
  `10.1063/1.3213193 <http://scitation.aip.org/content/aip/journal/jcp/131/9/10.1063/1.3213193>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _beta : Optional[float], default: 0.06672455060314922
    beta constant
  _gamma : Optional[float], default: 0.031090690869654894
    (1 - ln(2))/Pi^2 in the PBE
  _B : Optional[float], default: 0.0
    Multiplies the A t^2 term. Used in the SPBE functional
  """
  _beta = (_beta or 0.06672455060314922)
  _gamma = (_gamma or 0.031090690869654894)
  _B = (_B or 0.0)
  p = get_p("gga_c_spbe", polarized, _beta, _gamma, _B)
  def _gga_c_spbe_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_c_spbe.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_c_spbe_epsilon_xc

def gga_x_ssb_sw(
  polarized: bool = True,
  _A: Optional[float] = None,
  _B: Optional[float] = None,
  _C: Optional[float] = None,
  _D: Optional[float] = None,
  _E: Optional[float] = None,
) -> Callable:
  r"""
  M. Swart, M. Solá, and F. M. Bickelhaupt.,  J. Comput. Methods Sci. Eng. 9, 69 (2009)
  `10.3233/JCM-2009-0230 <http://iospress.metapress.com/content/0736k00r11272hm7>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _A : Optional[float], default: 1.0515
    A, Constant s limit
  _B : Optional[float], default: 0.191458
    B in B s^2/(1 + C s^2)
  _C : Optional[float], default: 0.254443
    C in B s^2/(1 + C s^2)
  _D : Optional[float], default: 0.180708
    D in D s^2/(1 + E s^4)
  _E : Optional[float], default: 4.036674
    E in D s^2/(1 + E s^4)
  """
  _A = (_A or 1.0515)
  _B = (_B or 0.191458)
  _C = (_C or 0.254443)
  _D = (_D or 0.180708)
  _E = (_E or 4.036674)
  p = get_p("gga_x_ssb_sw", polarized, _A, _B, _C, _D, _E)
  def _gga_x_ssb_sw_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_ssb_sw.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_ssb_sw_epsilon_xc

def gga_x_ssb(
  polarized: bool = True,
  _A: Optional[float] = None,
  _B: Optional[float] = None,
  _C: Optional[float] = None,
  _D: Optional[float] = None,
  _E: Optional[float] = None,
  _F: Optional[float] = None,
  _u: Optional[float] = None,
  _delta: Optional[float] = None,
) -> Callable:
  r"""
  M. Swart, M. Solá, and F. M. Bickelhaupt.,  J. Chem. Phys. 131, 094103 (2009)
  `10.1063/1.3213193 <http://scitation.aip.org/content/aip/journal/jcp/131/9/10.1063/1.3213193>`_

  
  Mixing of the following functionals:
    lda_x (coefficient: -1.0)
    gga_x_ssb_sw (coefficient: 1.0)
    gga_x_kt1 (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _A : Optional[float], default: 1.071769
    A, Constant s limit
  _B : Optional[float], default: 0.137574
    B in B s^2/(1 + C s^2)
  _C : Optional[float], default: 0.187883
    C in B s^2/(1 + C s^2)
  _D : Optional[float], default: 0.137574
    D in D s^2/(1 + E s^4)
  _E : Optional[float], default: 6.635315
    E in D s^2/(1 + E s^4)
  _F : Optional[float], default: 0.99501
    F, prefactor for KT term
  _u : Optional[float], default: -1.205643
    u, reweighting of KT and SSB terms
  _delta : Optional[float], default: 0.1
    delta, KT parameter
  """
  _A = (_A or 1.071769)
  _B = (_B or 0.137574)
  _C = (_C or 0.187883)
  _D = (_D or 0.137574)
  _E = (_E or 6.635315)
  _F = (_F or 0.99501)
  _u = (_u or -1.205643)
  _delta = (_delta or 0.1)
  p = get_p("gga_x_ssb", polarized, _A, _B, _C, _D, _E, _F, _u, _delta)
  def _gga_x_ssb_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_ssb.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _gga_x_ssb_epsilon_xc.cam_alpha = p.cam_alpha
  _gga_x_ssb_epsilon_xc.cam_beta = p.cam_beta
  _gga_x_ssb_epsilon_xc.cam_omega = p.cam_omega
  _gga_x_ssb_epsilon_xc.nlc_b = p.nlc_b
  _gga_x_ssb_epsilon_xc.nlc_C = p.nlc_C

  return _gga_x_ssb_epsilon_xc

def gga_x_ssb_d(
  polarized: bool = True,
  _A: Optional[float] = None,
  _B: Optional[float] = None,
  _C: Optional[float] = None,
  _D: Optional[float] = None,
  _E: Optional[float] = None,
  _F: Optional[float] = None,
  _u: Optional[float] = None,
  _delta: Optional[float] = None,
) -> Callable:
  r"""
  M. Swart, M. Solá, and F. M. Bickelhaupt.,  J. Chem. Phys. 131, 094103 (2009)
  `10.1063/1.3213193 <http://scitation.aip.org/content/aip/journal/jcp/131/9/10.1063/1.3213193>`_

  
  Mixing of the following functionals:
    lda_x (coefficient: -1.0)
    gga_x_ssb_sw (coefficient: 1.0)
    gga_x_kt1 (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _A : Optional[float], default: 1.079966
    A, Constant s limit
  _B : Optional[float], default: 0.197465
    B in B s^2/(1 + C s^2)
  _C : Optional[float], default: 0.272729
    C in B s^2/(1 + C s^2)
  _D : Optional[float], default: 0.197465
    D in D s^2/(1 + E s^4)
  _E : Optional[float], default: 5.873645
    E in D s^2/(1 + E s^4)
  _F : Optional[float], default: 0.949488
    F, prefactor for KT term
  _u : Optional[float], default: -0.74994
    u, reweighting of KT and SSB terms
  _delta : Optional[float], default: 0.1
    delta, KT parameter
  """
  _A = (_A or 1.079966)
  _B = (_B or 0.197465)
  _C = (_C or 0.272729)
  _D = (_D or 0.197465)
  _E = (_E or 5.873645)
  _F = (_F or 0.949488)
  _u = (_u or -0.74994)
  _delta = (_delta or 0.1)
  p = get_p("gga_x_ssb_d", polarized, _A, _B, _C, _D, _E, _F, _u, _delta)
  def _gga_x_ssb_d_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_ssb_d.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _gga_x_ssb_d_epsilon_xc.cam_alpha = p.cam_alpha
  _gga_x_ssb_d_epsilon_xc.cam_beta = p.cam_beta
  _gga_x_ssb_d_epsilon_xc.cam_omega = p.cam_omega
  _gga_x_ssb_d_epsilon_xc.nlc_b = p.nlc_b
  _gga_x_ssb_d_epsilon_xc.nlc_C = p.nlc_C

  return _gga_x_ssb_d_epsilon_xc

def gga_xc_hcth_407p(
  polarized: bool = True,
  _cx0: Optional[float] = None,
  _cx1: Optional[float] = None,
  _cx2: Optional[float] = None,
  _cx3: Optional[float] = None,
  _cx4: Optional[float] = None,
  _css0: Optional[float] = None,
  _css1: Optional[float] = None,
  _css2: Optional[float] = None,
  _css3: Optional[float] = None,
  _css4: Optional[float] = None,
  _cos0: Optional[float] = None,
  _cos1: Optional[float] = None,
  _cos2: Optional[float] = None,
  _cos3: Optional[float] = None,
  _cos4: Optional[float] = None,
) -> Callable:
  r"""
  A. D. Boese, A. Chandra, J. M. L. Martin, and D. Marx.,  J. Chem. Phys. 119, 5965 (2003)
  `10.1063/1.1599338 <http://scitation.aip.org/content/aip/journal/jcp/119/12/10.1063/1.1599338>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _cx0 : Optional[float], default: 1.08018
    u^0 coefficient for exchange
  _cx1 : Optional[float], default: -0.4117
    u^1 coefficient for exchange
  _cx2 : Optional[float], default: 2.4368
    u^2 coefficient for exchange
  _cx3 : Optional[float], default: 1.389
    u^3 coefficient for exchange
  _cx4 : Optional[float], default: -1.3529
    u^4 coefficient for exchange
  _css0 : Optional[float], default: 0.80302
    u^0 coefficient for same-spin correlation
  _css1 : Optional[float], default: -1.0479
    u^1 coefficient for same-spin correlation
  _css2 : Optional[float], default: 4.9807
    u^2 coefficient for same-spin correlation
  _css3 : Optional[float], default: -12.89
    u^3 coefficient for same-spin correlation
  _css4 : Optional[float], default: 9.6446
    u^4 coefficient for same-spin correlation
  _cos0 : Optional[float], default: 0.73604
    u^0 coefficient for opposite-spin correlation
  _cos1 : Optional[float], default: 3.027
    u^1 coefficient for opposite-spin correlation
  _cos2 : Optional[float], default: -10.075
    u^2 coefficient for opposite-spin correlation
  _cos3 : Optional[float], default: 20.611
    u^3 coefficient for opposite-spin correlation
  _cos4 : Optional[float], default: -29.418
    u^4 coefficient for opposite-spin correlation
  """
  _cx0 = (_cx0 or 1.08018)
  _cx1 = (_cx1 or -0.4117)
  _cx2 = (_cx2 or 2.4368)
  _cx3 = (_cx3 or 1.389)
  _cx4 = (_cx4 or -1.3529)
  _css0 = (_css0 or 0.80302)
  _css1 = (_css1 or -1.0479)
  _css2 = (_css2 or 4.9807)
  _css3 = (_css3 or -12.89)
  _css4 = (_css4 or 9.6446)
  _cos0 = (_cos0 or 0.73604)
  _cos1 = (_cos1 or 3.027)
  _cos2 = (_cos2 or -10.075)
  _cos3 = (_cos3 or 20.611)
  _cos4 = (_cos4 or -29.418)
  p = get_p("gga_xc_hcth_407p", polarized, _cx0, _cx1, _cx2, _cx3, _cx4, _css0, _css1, _css2, _css3, _css4, _cos0, _cos1, _cos2, _cos3, _cos4)
  def _gga_xc_hcth_407p_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_xc_hcth_407p.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_xc_hcth_407p_epsilon_xc

def gga_xc_hcth_p76(
  polarized: bool = True,
  _cx0: Optional[float] = None,
  _cx1: Optional[float] = None,
  _cx2: Optional[float] = None,
  _cx3: Optional[float] = None,
  _cx4: Optional[float] = None,
  _css0: Optional[float] = None,
  _css1: Optional[float] = None,
  _css2: Optional[float] = None,
  _css3: Optional[float] = None,
  _css4: Optional[float] = None,
  _cos0: Optional[float] = None,
  _cos1: Optional[float] = None,
  _cos2: Optional[float] = None,
  _cos3: Optional[float] = None,
  _cos4: Optional[float] = None,
) -> Callable:
  r"""
  G. Menconi, P. J. Wilson, and D. J. Tozer.,  J. Chem. Phys. 114, 3958 (2001)
  `10.1063/1.1342776 <http://scitation.aip.org/content/aip/journal/jcp/114/9/10.1063/1.1342776>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _cx0 : Optional[float], default: 1.16525
    u^0 coefficient for exchange
  _cx1 : Optional[float], default: -0.583033
    u^1 coefficient for exchange
  _cx2 : Optional[float], default: 2.51769
    u^2 coefficient for exchange
  _cx3 : Optional[float], default: 3.81278
    u^3 coefficient for exchange
  _cx4 : Optional[float], default: -5.45906
    u^4 coefficient for exchange
  _css0 : Optional[float], default: -3.92143
    u^0 coefficient for same-spin correlation
  _css1 : Optional[float], default: -1.10098
    u^1 coefficient for same-spin correlation
  _css2 : Optional[float], default: -0.091405
    u^2 coefficient for same-spin correlation
  _css3 : Optional[float], default: -0.859723
    u^3 coefficient for same-spin correlation
  _css4 : Optional[float], default: 2.07184
    u^4 coefficient for same-spin correlation
  _cos0 : Optional[float], default: 0.192949
    u^0 coefficient for opposite-spin correlation
  _cos1 : Optional[float], default: -5.73335
    u^1 coefficient for opposite-spin correlation
  _cos2 : Optional[float], default: 50.8757
    u^2 coefficient for opposite-spin correlation
  _cos3 : Optional[float], default: -135.475
    u^3 coefficient for opposite-spin correlation
  _cos4 : Optional[float], default: 101.268
    u^4 coefficient for opposite-spin correlation
  """
  _cx0 = (_cx0 or 1.16525)
  _cx1 = (_cx1 or -0.583033)
  _cx2 = (_cx2 or 2.51769)
  _cx3 = (_cx3 or 3.81278)
  _cx4 = (_cx4 or -5.45906)
  _css0 = (_css0 or -3.92143)
  _css1 = (_css1 or -1.10098)
  _css2 = (_css2 or -0.091405)
  _css3 = (_css3 or -0.859723)
  _css4 = (_css4 or 2.07184)
  _cos0 = (_cos0 or 0.192949)
  _cos1 = (_cos1 or -5.73335)
  _cos2 = (_cos2 or 50.8757)
  _cos3 = (_cos3 or -135.475)
  _cos4 = (_cos4 or 101.268)
  p = get_p("gga_xc_hcth_p76", polarized, _cx0, _cx1, _cx2, _cx3, _cx4, _css0, _css1, _css2, _css3, _css4, _cos0, _cos1, _cos2, _cos3, _cos4)
  def _gga_xc_hcth_p76_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_xc_hcth_p76.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_xc_hcth_p76_epsilon_xc

def gga_xc_hcth_p14(
  polarized: bool = True,
  _cx0: Optional[float] = None,
  _cx1: Optional[float] = None,
  _cx2: Optional[float] = None,
  _cx3: Optional[float] = None,
  _cx4: Optional[float] = None,
  _css0: Optional[float] = None,
  _css1: Optional[float] = None,
  _css2: Optional[float] = None,
  _css3: Optional[float] = None,
  _css4: Optional[float] = None,
  _cos0: Optional[float] = None,
  _cos1: Optional[float] = None,
  _cos2: Optional[float] = None,
  _cos3: Optional[float] = None,
  _cos4: Optional[float] = None,
) -> Callable:
  r"""
  G. Menconi, P. J. Wilson, and D. J. Tozer.,  J. Chem. Phys. 114, 3958 (2001)
  `10.1063/1.1342776 <http://scitation.aip.org/content/aip/journal/jcp/114/9/10.1063/1.1342776>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _cx0 : Optional[float], default: 1.03161
    u^0 coefficient for exchange
  _cx1 : Optional[float], default: -0.360781
    u^1 coefficient for exchange
  _cx2 : Optional[float], default: 3.51994
    u^2 coefficient for exchange
  _cx3 : Optional[float], default: -4.95944
    u^3 coefficient for exchange
  _cx4 : Optional[float], default: 2.41165
    u^4 coefficient for exchange
  _css0 : Optional[float], default: 2.82414
    u^0 coefficient for same-spin correlation
  _css1 : Optional[float], default: 0.0318843
    u^1 coefficient for same-spin correlation
  _css2 : Optional[float], default: -1.78512
    u^2 coefficient for same-spin correlation
  _css3 : Optional[float], default: 2.39795
    u^3 coefficient for same-spin correlation
  _css4 : Optional[float], default: -0.876909
    u^4 coefficient for same-spin correlation
  _cos0 : Optional[float], default: 0.0821827
    u^0 coefficient for opposite-spin correlation
  _cos1 : Optional[float], default: 4.56466
    u^1 coefficient for opposite-spin correlation
  _cos2 : Optional[float], default: -13.5529
    u^2 coefficient for opposite-spin correlation
  _cos3 : Optional[float], default: 13.382
    u^3 coefficient for opposite-spin correlation
  _cos4 : Optional[float], default: -3.17493
    u^4 coefficient for opposite-spin correlation
  """
  _cx0 = (_cx0 or 1.03161)
  _cx1 = (_cx1 or -0.360781)
  _cx2 = (_cx2 or 3.51994)
  _cx3 = (_cx3 or -4.95944)
  _cx4 = (_cx4 or 2.41165)
  _css0 = (_css0 or 2.82414)
  _css1 = (_css1 or 0.0318843)
  _css2 = (_css2 or -1.78512)
  _css3 = (_css3 or 2.39795)
  _css4 = (_css4 or -0.876909)
  _cos0 = (_cos0 or 0.0821827)
  _cos1 = (_cos1 or 4.56466)
  _cos2 = (_cos2 or -13.5529)
  _cos3 = (_cos3 or 13.382)
  _cos4 = (_cos4 or -3.17493)
  p = get_p("gga_xc_hcth_p14", polarized, _cx0, _cx1, _cx2, _cx3, _cx4, _css0, _css1, _css2, _css3, _css4, _cos0, _cos1, _cos2, _cos3, _cos4)
  def _gga_xc_hcth_p14_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_xc_hcth_p14.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_xc_hcth_p14_epsilon_xc

def gga_xc_b97_gga1(
  polarized: bool = True,
  _cx0: Optional[float] = None,
  _cx1: Optional[float] = None,
  _cx2: Optional[float] = None,
  _cx3: Optional[float] = None,
  _cx4: Optional[float] = None,
  _css0: Optional[float] = None,
  _css1: Optional[float] = None,
  _css2: Optional[float] = None,
  _css3: Optional[float] = None,
  _css4: Optional[float] = None,
  _cos0: Optional[float] = None,
  _cos1: Optional[float] = None,
  _cos2: Optional[float] = None,
  _cos3: Optional[float] = None,
  _cos4: Optional[float] = None,
) -> Callable:
  r"""
  A. J. Cohen and N. C. Handy.,  Chem. Phys. Lett. 316, 160 (2000)
  `10.1016/S0009-2614(99)01273-7 <http://www.sciencedirect.com/science/article/pii/S0009261499012737>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _cx0 : Optional[float], default: 1.1068
    u^0 coefficient for exchange
  _cx1 : Optional[float], default: -0.8765
    u^1 coefficient for exchange
  _cx2 : Optional[float], default: 4.2639
    u^2 coefficient for exchange
  _cx3 : Optional[float], default: 0.0
    u^3 coefficient for exchange
  _cx4 : Optional[float], default: 0.0
    u^4 coefficient for exchange
  _css0 : Optional[float], default: 0.4883
    u^0 coefficient for same-spin correlation
  _css1 : Optional[float], default: -2.117
    u^1 coefficient for same-spin correlation
  _css2 : Optional[float], default: 2.3235
    u^2 coefficient for same-spin correlation
  _css3 : Optional[float], default: 0.0
    u^3 coefficient for same-spin correlation
  _css4 : Optional[float], default: 0.0
    u^4 coefficient for same-spin correlation
  _cos0 : Optional[float], default: 0.7961
    u^0 coefficient for opposite-spin correlation
  _cos1 : Optional[float], default: 5.706
    u^1 coefficient for opposite-spin correlation
  _cos2 : Optional[float], default: -14.982
    u^2 coefficient for opposite-spin correlation
  _cos3 : Optional[float], default: 0.0
    u^3 coefficient for opposite-spin correlation
  _cos4 : Optional[float], default: 0.0
    u^4 coefficient for opposite-spin correlation
  """
  _cx0 = (_cx0 or 1.1068)
  _cx1 = (_cx1 or -0.8765)
  _cx2 = (_cx2 or 4.2639)
  _cx3 = (_cx3 or 0.0)
  _cx4 = (_cx4 or 0.0)
  _css0 = (_css0 or 0.4883)
  _css1 = (_css1 or -2.117)
  _css2 = (_css2 or 2.3235)
  _css3 = (_css3 or 0.0)
  _css4 = (_css4 or 0.0)
  _cos0 = (_cos0 or 0.7961)
  _cos1 = (_cos1 or 5.706)
  _cos2 = (_cos2 or -14.982)
  _cos3 = (_cos3 or 0.0)
  _cos4 = (_cos4 or 0.0)
  p = get_p("gga_xc_b97_gga1", polarized, _cx0, _cx1, _cx2, _cx3, _cx4, _css0, _css1, _css2, _css3, _css4, _cos0, _cos1, _cos2, _cos3, _cos4)
  def _gga_xc_b97_gga1_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_xc_b97_gga1.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_xc_b97_gga1_epsilon_xc

def gga_c_hcth_a(
  polarized: bool = True,
) -> Callable:
  r"""
  F. A. Hamprecht, A. J. Cohen, D. J. Tozer, and N. C. Handy.,  J. Chem. Phys. 109, 6264 (1998)
  `10.1063/1.477267 <http://scitation.aip.org/content/aip/journal/jcp/109/15/10.1063/1.477267>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_c_hcth_a", polarized, )
  def _gga_c_hcth_a_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_c_hcth_a.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_c_hcth_a_epsilon_xc

def gga_x_bpccac(
  polarized: bool = True,
) -> Callable:
  r"""
  E. Brémond, D. Pilard, I. Ciofini, H. Chermette, C. Adamo, and P. Cortona.,  Theor. Chem. Acc. 131, 1184 (2012)
  `10.1007/s00214-012-1184-0 <http://link.springer.com/article/10.1007\%2Fs00214-012-1184-0>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_x_bpccac", polarized, )
  def _gga_x_bpccac_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_bpccac.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_bpccac_epsilon_xc

def gga_c_revtca(
  polarized: bool = True,
) -> Callable:
  r"""
  V. Tognetti, P. Cortona, and C. Adamo.,  Chem. Phys. Lett. 460, 536 (2008)
  `10.1016/j.cplett.2008.06.032 <http://www.sciencedirect.com/science/article/pii/S0009261408008464>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_c_revtca", polarized, )
  def _gga_c_revtca_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_c_revtca.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_c_revtca_epsilon_xc

def gga_c_tca(
  polarized: bool = True,
) -> Callable:
  r"""
  V. Tognetti, P. Cortona, and C. Adamo.,  J. Chem. Phys. 128, 034101 (2008)
  `10.1063/1.2816137 <http://scitation.aip.org/content/aip/journal/jcp/128/3/10.1063/1.2816137>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_c_tca", polarized, )
  def _gga_c_tca_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_c_tca.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_c_tca_epsilon_xc

def gga_x_pbe(
  polarized: bool = True,
  _kappa: Optional[float] = None,
  _mu: Optional[float] = None,
) -> Callable:
  r"""
  J. P. Perdew, K. Burke, and M. Ernzerhof.,  Phys. Rev. Lett. 77, 3865 (1996)
  `10.1103/PhysRevLett.77.3865 <http://link.aps.org/doi/10.1103/PhysRevLett.77.3865>`_

  J. P. Perdew, K. Burke, and M. Ernzerhof.,  Phys. Rev. Lett. 78, 1396 (1997)
  `10.1103/PhysRevLett.78.1396 <http://link.aps.org/doi/10.1103/PhysRevLett.78.1396>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _kappa : Optional[float], default: 0.804
    Asymptotic value of the enhancement function
  _mu : Optional[float], default: 0.2195149727645171
    Coefficient of the 2nd order expansion
  """
  _kappa = (_kappa or 0.804)
  _mu = (_mu or 0.2195149727645171)
  p = get_p("gga_x_pbe", polarized, _kappa, _mu)
  def _gga_x_pbe_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_pbe.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_pbe_epsilon_xc

def gga_x_pbe_r(
  polarized: bool = True,
  _kappa: Optional[float] = None,
  _mu: Optional[float] = None,
) -> Callable:
  r"""
  Y. Zhang and W. Yang.,  Phys. Rev. Lett. 80, 890 (1998)
  `10.1103/PhysRevLett.80.890 <http://link.aps.org/doi/10.1103/PhysRevLett.80.890>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _kappa : Optional[float], default: 1.245
    Asymptotic value of the enhancement function
  _mu : Optional[float], default: 0.2195149727645171
    Coefficient of the 2nd order expansion
  """
  _kappa = (_kappa or 1.245)
  _mu = (_mu or 0.2195149727645171)
  p = get_p("gga_x_pbe_r", polarized, _kappa, _mu)
  def _gga_x_pbe_r_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_pbe_r.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_pbe_r_epsilon_xc

def gga_x_b86(
  polarized: bool = True,
  _beta: Optional[float] = None,
  _gamma: Optional[float] = None,
  _omega: Optional[float] = None,
) -> Callable:
  r"""
  A. D. Becke.,  J. Chem. Phys. 84, 4524 (1986)
  `10.1063/1.450025 <http://scitation.aip.org/content/aip/journal/jcp/84/8/10.1063/1.450025>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _beta : Optional[float], default: 0.003868780689639527
    Small x limit
  _gamma : Optional[float], default: 0.004
    Parameter in the denominator
  _omega : Optional[float], default: 1.0
    Exponent of denominator
  """
  _beta = (_beta or 0.003868780689639527)
  _gamma = (_gamma or 0.004)
  _omega = (_omega or 1.0)
  p = get_p("gga_x_b86", polarized, _beta, _gamma, _omega)
  def _gga_x_b86_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_b86.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_b86_epsilon_xc

def gga_x_herman(
  polarized: bool = True,
) -> Callable:
  r"""
  F. Herman, J. P. V. Dyke, and I. B. Ortenburger.,  Phys. Rev. Lett. 22, 807 (1969)
  `10.1103/PhysRevLett.22.807 <http://link.aps.org/doi/10.1103/PhysRevLett.22.807>`_

  F. Herman, I. B. Ortenburger, and J. P. V. Dyke.,  Int. J. Quantum Chem. 4, 827 (1970)
  `10.1002/qua.560040746 <10.1002/qua.560040746>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_x_herman", polarized, )
  def _gga_x_herman_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_herman.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_herman_epsilon_xc

def gga_x_b86_mgc(
  polarized: bool = True,
  _beta: Optional[float] = None,
  _gamma: Optional[float] = None,
  _omega: Optional[float] = None,
) -> Callable:
  r"""
  A. D. Becke.,  J. Chem. Phys. 84, 4524 (1986)
  `10.1063/1.450025 <http://scitation.aip.org/content/aip/journal/jcp/84/8/10.1063/1.450025>`_

  A. D. Becke.,  J. Chem. Phys. 85, 7184 (1986)
  `10.1063/1.451353 <http://scitation.aip.org/content/aip/journal/jcp/85/12/10.1063/1.451353>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _beta : Optional[float], default: 0.0040299798850411735
    Small x limit
  _gamma : Optional[float], default: 0.007
    Parameter in the denominator
  _omega : Optional[float], default: 0.8
    Exponent of denominator
  """
  _beta = (_beta or 0.0040299798850411735)
  _gamma = (_gamma or 0.007)
  _omega = (_omega or 0.8)
  p = get_p("gga_x_b86_mgc", polarized, _beta, _gamma, _omega)
  def _gga_x_b86_mgc_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_b86_mgc.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_b86_mgc_epsilon_xc

def gga_x_b88(
  polarized: bool = True,
  _beta: Optional[float] = None,
  _gamma: Optional[float] = None,
) -> Callable:
  r"""
  A. D. Becke.,  Phys. Rev. A 38, 3098 (1988)
  `10.1103/PhysRevA.38.3098 <http://link.aps.org/doi/10.1103/PhysRevA.38.3098>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _beta : Optional[float], default: 0.0042
    beta/X_FACTOR_C is the coefficient of the gradient expansion
  _gamma : Optional[float], default: 6.0
    gamma should be 6 to get the right asymptotics of Ex
  """
  _beta = (_beta or 0.0042)
  _gamma = (_gamma or 6.0)
  p = get_p("gga_x_b88", polarized, _beta, _gamma)
  def _gga_x_b88_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_b88.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_b88_epsilon_xc

def gga_x_g96(
  polarized: bool = True,
) -> Callable:
  r"""
  P. M. W. Gill.,  Mol. Phys. 89, 433 (1996)
  `10.1080/002689796173813 <http://www.tandfonline.com/doi/abs/10.1080/002689796173813>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_x_g96", polarized, )
  def _gga_x_g96_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_g96.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_g96_epsilon_xc

def gga_x_pw86(
  polarized: bool = True,
  _aa: Optional[float] = None,
  _bb: Optional[float] = None,
  _cc: Optional[float] = None,
) -> Callable:
  r"""
  J. P. Perdew and W. Yue.,  Phys. Rev. B 33, 8800 (1986)
  `10.1103/PhysRevB.33.8800 <http://link.aps.org/doi/10.1103/PhysRevB.33.8800>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _aa : Optional[float], default: 1.296
    Coefficient of s^2 term
  _bb : Optional[float], default: 14.0
    Coefficient of s^4 term
  _cc : Optional[float], default: 0.2
    Coefficient of s^6 term
  """
  _aa = (_aa or 1.296)
  _bb = (_bb or 14.0)
  _cc = (_cc or 0.2)
  p = get_p("gga_x_pw86", polarized, _aa, _bb, _cc)
  def _gga_x_pw86_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_pw86.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_pw86_epsilon_xc

def gga_x_pw91(
  polarized: bool = True,
  _a: Optional[float] = None,
  _b: Optional[float] = None,
  _c: Optional[float] = None,
  _d: Optional[float] = None,
  _f: Optional[float] = None,
  _alpha: Optional[float] = None,
  _expo: Optional[float] = None,
) -> Callable:
  r"""
  J. P. Perdew. In P. Ziesche and H. Eschrig, editors, Proceedings of the 75. WE-Heraeus-Seminar and 21st Annual International Symposium on Electronic Structure of Solids, 11. Berlin, 1991. Akademie Verlag.
  

  J. P. Perdew, J. A. Chevary, S. H. Vosko, K. A. Jackson, M. R. Pederson, D. J. Singh, and C. Fiolhais.,  Phys. Rev. B 46, 6671 (1992)
  `10.1103/PhysRevB.46.6671 <http://link.aps.org/doi/10.1103/PhysRevB.46.6671>`_

  J. P. Perdew, J. A. Chevary, S. H. Vosko, K. A. Jackson, M. R. Pederson, D. J. Singh, and C. Fiolhais.,  Phys. Rev. B 48, 4978 (1993)
  `10.1103/PhysRevB.48.4978.2 <http://link.aps.org/doi/10.1103/PhysRevB.48.4978.2>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a : Optional[float], default: 0.19645
    a parameter
  _b : Optional[float], default: 7.7956
    b parameter
  _c : Optional[float], default: 0.2743
    c parameter
  _d : Optional[float], default: -0.1508
    d parameter
  _f : Optional[float], default: 0.004
    f parameter
  _alpha : Optional[float], default: 100.0
    alpha parameter
  _expo : Optional[float], default: 4.0
    exponent
  """
  _a = (_a or 0.19645)
  _b = (_b or 7.7956)
  _c = (_c or 0.2743)
  _d = (_d or -0.1508)
  _f = (_f or 0.004)
  _alpha = (_alpha or 100.0)
  _expo = (_expo or 4.0)
  p = get_p("gga_x_pw91", polarized, _a, _b, _c, _d, _f, _alpha, _expo)
  def _gga_x_pw91_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_pw91.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_pw91_epsilon_xc

def gga_x_optx(
  polarized: bool = True,
  _a: Optional[float] = None,
  _b: Optional[float] = None,
  _gamma: Optional[float] = None,
) -> Callable:
  r"""
  N. C. Handy and A. J. Cohen.,  Mol. Phys. 99, 403 (2001)
  `10.1080/00268970010018431 <http://www.tandfonline.com/doi/abs/10.1080/00268970010018431>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a : Optional[float], default: 1.05151
    a
  _b : Optional[float], default: 1.5385818404305593
    b
  _gamma : Optional[float], default: 0.006
    gamma
  """
  _a = (_a or 1.05151)
  _b = (_b or 1.5385818404305593)
  _gamma = (_gamma or 0.006)
  p = get_p("gga_x_optx", polarized, _a, _b, _gamma)
  def _gga_x_optx_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_optx.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_optx_epsilon_xc

def gga_x_dk87_r1(
  polarized: bool = True,
  _a1: Optional[float] = None,
  _b1: Optional[float] = None,
  _alpha: Optional[float] = None,
) -> Callable:
  r"""
  A. E. DePristo and J. D. Kress.,  J. Chem. Phys. 86, 1425 (1987)
  `10.1063/1.452230 <http://scitation.aip.org/content/aip/journal/jcp/86/3/10.1063/1.452230>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a1 : Optional[float], default: 0.861504
    a1 parameter
  _b1 : Optional[float], default: 0.044286
    b1 parameter
  _alpha : Optional[float], default: 1.0
    alpha parameter
  """
  _a1 = (_a1 or 0.861504)
  _b1 = (_b1 or 0.044286)
  _alpha = (_alpha or 1.0)
  p = get_p("gga_x_dk87_r1", polarized, _a1, _b1, _alpha)
  def _gga_x_dk87_r1_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_dk87_r1.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_dk87_r1_epsilon_xc

def gga_x_dk87_r2(
  polarized: bool = True,
  _a1: Optional[float] = None,
  _b1: Optional[float] = None,
  _alpha: Optional[float] = None,
) -> Callable:
  r"""
  A. E. DePristo and J. D. Kress.,  J. Chem. Phys. 86, 1425 (1987)
  `10.1063/1.452230 <http://scitation.aip.org/content/aip/journal/jcp/86/3/10.1063/1.452230>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a1 : Optional[float], default: 0.861213
    a1 parameter
  _b1 : Optional[float], default: 0.042076
    b1 parameter
  _alpha : Optional[float], default: 0.98
    alpha parameter
  """
  _a1 = (_a1 or 0.861213)
  _b1 = (_b1 or 0.042076)
  _alpha = (_alpha or 0.98)
  p = get_p("gga_x_dk87_r2", polarized, _a1, _b1, _alpha)
  def _gga_x_dk87_r2_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_dk87_r2.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_dk87_r2_epsilon_xc

def gga_x_lg93(
  polarized: bool = True,
) -> Callable:
  r"""
  D. J. Lacks and R. G. Gordon.,  Phys. Rev. A 47, 4681 (1993)
  `10.1103/PhysRevA.47.4681 <http://link.aps.org/doi/10.1103/PhysRevA.47.4681>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_x_lg93", polarized, )
  def _gga_x_lg93_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_lg93.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_lg93_epsilon_xc

def gga_x_ft97_a(
  polarized: bool = True,
  _beta0: Optional[float] = None,
  _beta1: Optional[float] = None,
  _beta2: Optional[float] = None,
) -> Callable:
  r"""
  M. Filatov and W. Thiel.,  Mol. Phys. 91, 847 (1997)
  `10.1080/002689797170950 <http://www.tandfonline.com/doi/abs/10.1080/002689797170950>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _beta0 : Optional[float], default: 0.00293
    beta0
  _beta1 : Optional[float], default: 0.0
    beta1
  _beta2 : Optional[float], default: 0.0
    beta2
  """
  _beta0 = (_beta0 or 0.00293)
  _beta1 = (_beta1 or 0.0)
  _beta2 = (_beta2 or 0.0)
  p = get_p("gga_x_ft97_a", polarized, _beta0, _beta1, _beta2)
  def _gga_x_ft97_a_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_ft97_a.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_ft97_a_epsilon_xc

def gga_x_ft97_b(
  polarized: bool = True,
  _beta0: Optional[float] = None,
  _beta1: Optional[float] = None,
  _beta2: Optional[float] = None,
) -> Callable:
  r"""
  M. Filatov and W. Thiel.,  Mol. Phys. 91, 847 (1997)
  `10.1080/002689797170950 <http://www.tandfonline.com/doi/abs/10.1080/002689797170950>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _beta0 : Optional[float], default: 0.002913644
    beta0
  _beta1 : Optional[float], default: 0.0009474169
    beta1
  _beta2 : Optional[float], default: 6255746.320201
    beta2
  """
  _beta0 = (_beta0 or 0.002913644)
  _beta1 = (_beta1 or 0.0009474169)
  _beta2 = (_beta2 or 6255746.320201)
  p = get_p("gga_x_ft97_b", polarized, _beta0, _beta1, _beta2)
  def _gga_x_ft97_b_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_ft97_b.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_ft97_b_epsilon_xc

def gga_x_pbe_sol(
  polarized: bool = True,
  _kappa: Optional[float] = None,
  _mu: Optional[float] = None,
) -> Callable:
  r"""
  J. P. Perdew, A. Ruzsinszky, G. I. Csonka, O. A. Vydrov, G. E. Scuseria, L. A. Constantin, X. Zhou, and K. Burke.,  Phys. Rev. Lett. 100, 136406 (2008)
  `10.1103/PhysRevLett.100.136406 <http://link.aps.org/doi/10.1103/PhysRevLett.100.136406>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _kappa : Optional[float], default: 0.804
    Asymptotic value of the enhancement function
  _mu : Optional[float], default: 0.12345679012345678
    Coefficient of the 2nd order expansion
  """
  _kappa = (_kappa or 0.804)
  _mu = (_mu or 0.12345679012345678)
  p = get_p("gga_x_pbe_sol", polarized, _kappa, _mu)
  def _gga_x_pbe_sol_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_pbe_sol.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_pbe_sol_epsilon_xc

def gga_x_rpbe(
  polarized: bool = True,
  _kappa: Optional[float] = None,
  _mu: Optional[float] = None,
) -> Callable:
  r"""
  B. Hammer, L. B. Hansen, and J. K. Nørskov.,  Phys. Rev. B 59, 7413 (1999)
  `10.1103/PhysRevB.59.7413 <http://link.aps.org/doi/10.1103/PhysRevB.59.7413>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _kappa : Optional[float], default: 0.804
    Asymptotic value of the enhancement function
  _mu : Optional[float], default: 0.2195149727645171
    Coefficient of the 2nd order expansion
  """
  _kappa = (_kappa or 0.804)
  _mu = (_mu or 0.2195149727645171)
  p = get_p("gga_x_rpbe", polarized, _kappa, _mu)
  def _gga_x_rpbe_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_rpbe.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_rpbe_epsilon_xc

def gga_x_wc(
  polarized: bool = True,
) -> Callable:
  r"""
  Z. Wu and R. E. Cohen.,  Phys. Rev. B 73, 235116 (2006)
  `10.1103/PhysRevB.73.235116 <http://link.aps.org/doi/10.1103/PhysRevB.73.235116>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_x_wc", polarized, )
  def _gga_x_wc_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_wc.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_wc_epsilon_xc

def gga_x_mpw91(
  polarized: bool = True,
  _bt: Optional[float] = None,
  _alpha: Optional[float] = None,
  _expo: Optional[float] = None,
) -> Callable:
  r"""
  C. Adamo and V. Barone.,  J. Chem. Phys. 108, 664 (1998)
  `10.1063/1.475428 <http://scitation.aip.org/content/aip/journal/jcp/108/2/10.1063/1.475428>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _bt : Optional[float], default: 0.00426
    a = 6 bt/X2S
  _alpha : Optional[float], default: 100.0
    parameter of the exponential term
  _expo : Optional[float], default: 3.72
    exponent of the power in the numerator
  """
  _bt = (_bt or 0.00426)
  _alpha = (_alpha or 100.0)
  _expo = (_expo or 3.72)
  p = get_p("gga_x_mpw91", polarized, _bt, _alpha, _expo)
  def _gga_x_mpw91_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_mpw91.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_mpw91_epsilon_xc

def gga_x_am05(
  polarized: bool = True,
  _alpha: Optional[float] = None,
  _c: Optional[float] = None,
) -> Callable:
  r"""
  R. Armiento and A. E. Mattsson.,  Phys. Rev. B 72, 085108 (2005)
  `10.1103/PhysRevB.72.085108 <http://link.aps.org/doi/10.1103/PhysRevB.72.085108>`_

  A. E. Mattsson, R. Armiento, J. Paier, G. Kresse, J. M. Wills, and T. R. Mattsson.,  J. Chem. Phys. 128, 084714 (2008)
  `10.1063/1.2835596 <http://scitation.aip.org/content/aip/journal/jcp/128/8/10.1063/1.2835596>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _alpha : Optional[float], default: 2.804
    alpha
  _c : Optional[float], default: 0.7168
    c
  """
  _alpha = (_alpha or 2.804)
  _c = (_c or 0.7168)
  p = get_p("gga_x_am05", polarized, _alpha, _c)
  def _gga_x_am05_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_am05.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_am05_epsilon_xc

def gga_x_pbea(
  polarized: bool = True,
) -> Callable:
  r"""
  G. K. H. Madsen.,  Phys. Rev. B 75, 195108 (2007)
  `10.1103/PhysRevB.75.195108 <http://link.aps.org/doi/10.1103/PhysRevB.75.195108>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_x_pbea", polarized, )
  def _gga_x_pbea_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_pbea.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_pbea_epsilon_xc

def gga_x_mpbe(
  polarized: bool = True,
) -> Callable:
  r"""
  C. Adamo and V. Barone.,  J. Chem. Phys. 116, 5933 (2002)
  `10.1063/1.1458927 <http://scitation.aip.org/content/aip/journal/jcp/116/14/10.1063/1.1458927>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_x_mpbe", polarized, )
  def _gga_x_mpbe_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_mpbe.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_mpbe_epsilon_xc

def gga_x_xpbe(
  polarized: bool = True,
  _kappa: Optional[float] = None,
  _mu: Optional[float] = None,
) -> Callable:
  r"""
  X. Xu and W. A. Goddard.,  J. Chem. Phys. 121, 4068 (2004)
  `10.1063/1.1771632 <http://scitation.aip.org/content/aip/journal/jcp/121/9/10.1063/1.1771632>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _kappa : Optional[float], default: 0.91954
    Asymptotic value of the enhancement function
  _mu : Optional[float], default: 0.23214
    Coefficient of the 2nd order expansion
  """
  _kappa = (_kappa or 0.91954)
  _mu = (_mu or 0.23214)
  p = get_p("gga_x_xpbe", polarized, _kappa, _mu)
  def _gga_x_xpbe_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_xpbe.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_xpbe_epsilon_xc

def gga_x_2d_b86_mgc(
  polarized: bool = True,
) -> Callable:
  r"""
  S. Pittalis, E. Räsänen, J. G. Vilhena, and M. A. L. Marques.,  Phys. Rev. A 79, 012503 (2009)
  `10.1103/PhysRevA.79.012503 <http://link.aps.org/doi/10.1103/PhysRevA.79.012503>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_x_2d_b86_mgc", polarized, )
  def _gga_x_2d_b86_mgc_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_2d_b86_mgc.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_2d_b86_mgc_epsilon_xc

def gga_x_bayesian(
  polarized: bool = True,
) -> Callable:
  r"""
  J. J. Mortensen, K. Kaasbjerg, S. L. Frederiksen, J. K. Nørskov, J. P. Sethna, and K. W. Jacobsen.,  Phys. Rev. Lett. 95, 216401 (2005)
  `10.1103/PhysRevLett.95.216401 <http://link.aps.org/doi/10.1103/PhysRevLett.95.216401>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_x_bayesian", polarized, )
  def _gga_x_bayesian_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_bayesian.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_bayesian_epsilon_xc

def gga_x_pbe_jsjr(
  polarized: bool = True,
  _kappa: Optional[float] = None,
  _mu: Optional[float] = None,
) -> Callable:
  r"""
  L. S. Pedroza, A. J. R. da Silva, and K. Capelle.,  Phys. Rev. B 79, 201106 (2009)
  `10.1103/PhysRevB.79.201106 <http://link.aps.org/doi/10.1103/PhysRevB.79.201106>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _kappa : Optional[float], default: 0.804
    Asymptotic value of the enhancement function
  _mu : Optional[float], default: 0.15133393415003682
    Coefficient of the 2nd order expansion
  """
  _kappa = (_kappa or 0.804)
  _mu = (_mu or 0.15133393415003682)
  p = get_p("gga_x_pbe_jsjr", polarized, _kappa, _mu)
  def _gga_x_pbe_jsjr_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_pbe_jsjr.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_pbe_jsjr_epsilon_xc

def gga_x_2d_b88(
  polarized: bool = True,
) -> Callable:
  r"""
  J. G. Vilhena, E. Räsänen, M. A. L. Marques, and S. Pittalis.,  J. Chem. Theory Comput. 10, 1837-1842 (2014)
  `10.1021/ct4010728 <https://doi.org/10.1021/ct4010728>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_x_2d_b88", polarized, )
  def _gga_x_2d_b88_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_2d_b88.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_2d_b88_epsilon_xc

def gga_x_2d_b86(
  polarized: bool = True,
) -> Callable:
  r"""
  J. G. Vilhena, E. Räsänen, M. A. L. Marques, and S. Pittalis.,  J. Chem. Theory Comput. 10, 1837-1842 (2014)
  `10.1021/ct4010728 <https://doi.org/10.1021/ct4010728>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_x_2d_b86", polarized, )
  def _gga_x_2d_b86_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_2d_b86.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_2d_b86_epsilon_xc

def gga_x_2d_pbe(
  polarized: bool = True,
) -> Callable:
  r"""
  J. G. Vilhena, E. Räsänen, M. A. L. Marques, and S. Pittalis.,  J. Chem. Theory Comput. 10, 1837-1842 (2014)
  `10.1021/ct4010728 <https://doi.org/10.1021/ct4010728>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_x_2d_pbe", polarized, )
  def _gga_x_2d_pbe_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_2d_pbe.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_2d_pbe_epsilon_xc

def gga_c_pbe(
  polarized: bool = True,
  _beta: Optional[float] = None,
  _gamma: Optional[float] = None,
  _B: Optional[float] = None,
) -> Callable:
  r"""
  J. P. Perdew, K. Burke, and M. Ernzerhof.,  Phys. Rev. Lett. 77, 3865 (1996)
  `10.1103/PhysRevLett.77.3865 <http://link.aps.org/doi/10.1103/PhysRevLett.77.3865>`_

  J. P. Perdew, K. Burke, and M. Ernzerhof.,  Phys. Rev. Lett. 78, 1396 (1997)
  `10.1103/PhysRevLett.78.1396 <http://link.aps.org/doi/10.1103/PhysRevLett.78.1396>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _beta : Optional[float], default: 0.06672455060314922
    beta constant
  _gamma : Optional[float], default: 0.031090690869654894
    (1 - ln(2))/Pi^2 in the PBE
  _B : Optional[float], default: 1.0
    Multiplies the A t^2 term. Used in the SPBE functional
  """
  _beta = (_beta or 0.06672455060314922)
  _gamma = (_gamma or 0.031090690869654894)
  _B = (_B or 1.0)
  p = get_p("gga_c_pbe", polarized, _beta, _gamma, _B)
  def _gga_c_pbe_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_c_pbe.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_c_pbe_epsilon_xc

def gga_c_lyp(
  polarized: bool = True,
  _a: Optional[float] = None,
  _b: Optional[float] = None,
  _c: Optional[float] = None,
  _d: Optional[float] = None,
) -> Callable:
  r"""
  C. Lee, W. Yang, and R. G. Parr.,  Phys. Rev. B 37, 785 (1988)
  `10.1103/PhysRevB.37.785 <http://link.aps.org/doi/10.1103/PhysRevB.37.785>`_

  B. Miehlich, A. Savin, H. Stoll, and H. Preuss.,  Chem. Phys. Lett. 157, 200 (1989)
  `10.1016/0009-2614(89)87234-3 <http://www.sciencedirect.com/science/article/pii/0009261489872343>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a : Optional[float], default: 0.04918
    Parameter a of LYP
  _b : Optional[float], default: 0.132
    Parameter b of LYP
  _c : Optional[float], default: 0.2533
    Parameter c of LYP
  _d : Optional[float], default: 0.349
    Parameter d of LYP
  """
  _a = (_a or 0.04918)
  _b = (_b or 0.132)
  _c = (_c or 0.2533)
  _d = (_d or 0.349)
  p = get_p("gga_c_lyp", polarized, _a, _b, _c, _d)
  def _gga_c_lyp_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_c_lyp.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_c_lyp_epsilon_xc

def gga_c_p86(
  polarized: bool = True,
  _malpha: Optional[float] = None,
  _mbeta: Optional[float] = None,
  _mgamma: Optional[float] = None,
  _mdelta: Optional[float] = None,
  _aa: Optional[float] = None,
  _bb: Optional[float] = None,
  _ftilde: Optional[float] = None,
) -> Callable:
  r"""
  J. P. Perdew.,  Phys. Rev. B 33, 8822 (1986)
  `10.1103/PhysRevB.33.8822 <http://link.aps.org/doi/10.1103/PhysRevB.33.8822>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _malpha : Optional[float], default: 0.023266
    alpha in eq 6
  _mbeta : Optional[float], default: 7.389e-06
    beta in eq 6
  _mgamma : Optional[float], default: 8.723
    gamma in eq 6
  _mdelta : Optional[float], default: 0.472
    delta in eq 6
  _aa : Optional[float], default: 0.001667
    linear parameter in eq 6
  _bb : Optional[float], default: 0.002568
    constant in the numerator in eq 6
  _ftilde : Optional[float], default: 0.19195
    constant in eq 9
  """
  _malpha = (_malpha or 0.023266)
  _mbeta = (_mbeta or 7.389e-06)
  _mgamma = (_mgamma or 8.723)
  _mdelta = (_mdelta or 0.472)
  _aa = (_aa or 0.001667)
  _bb = (_bb or 0.002568)
  _ftilde = (_ftilde or 0.19195)
  p = get_p("gga_c_p86", polarized, _malpha, _mbeta, _mgamma, _mdelta, _aa, _bb, _ftilde)
  def _gga_c_p86_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_c_p86.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_c_p86_epsilon_xc

def gga_c_pbe_sol(
  polarized: bool = True,
  _beta: Optional[float] = None,
  _gamma: Optional[float] = None,
  _B: Optional[float] = None,
) -> Callable:
  r"""
  J. P. Perdew, A. Ruzsinszky, G. I. Csonka, O. A. Vydrov, G. E. Scuseria, L. A. Constantin, X. Zhou, and K. Burke.,  Phys. Rev. Lett. 100, 136406 (2008)
  `10.1103/PhysRevLett.100.136406 <http://link.aps.org/doi/10.1103/PhysRevLett.100.136406>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _beta : Optional[float], default: 0.046
    beta constant
  _gamma : Optional[float], default: 0.031090690869654894
    (1 - ln(2))/Pi^2 in the PBE
  _B : Optional[float], default: 1.0
    Multiplies the A t^2 term. Used in the SPBE functional
  """
  _beta = (_beta or 0.046)
  _gamma = (_gamma or 0.031090690869654894)
  _B = (_B or 1.0)
  p = get_p("gga_c_pbe_sol", polarized, _beta, _gamma, _B)
  def _gga_c_pbe_sol_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_c_pbe_sol.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_c_pbe_sol_epsilon_xc

def gga_c_pw91(
  polarized: bool = True,
) -> Callable:
  r"""
  J. P. Perdew. In P. Ziesche and H. Eschrig, editors, Proceedings of the 75. WE-Heraeus-Seminar and 21st Annual International Symposium on Electronic Structure of Solids, 11. Berlin, 1991. Akademie Verlag.
  

  J. P. Perdew, J. A. Chevary, S. H. Vosko, K. A. Jackson, M. R. Pederson, D. J. Singh, and C. Fiolhais.,  Phys. Rev. B 46, 6671 (1992)
  `10.1103/PhysRevB.46.6671 <http://link.aps.org/doi/10.1103/PhysRevB.46.6671>`_

  J. P. Perdew, J. A. Chevary, S. H. Vosko, K. A. Jackson, M. R. Pederson, D. J. Singh, and C. Fiolhais.,  Phys. Rev. B 48, 4978 (1993)
  `10.1103/PhysRevB.48.4978.2 <http://link.aps.org/doi/10.1103/PhysRevB.48.4978.2>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_c_pw91", polarized, )
  def _gga_c_pw91_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_c_pw91.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_c_pw91_epsilon_xc

def gga_c_am05(
  polarized: bool = True,
  _alpha: Optional[float] = None,
  _gamma: Optional[float] = None,
) -> Callable:
  r"""
  R. Armiento and A. E. Mattsson.,  Phys. Rev. B 72, 085108 (2005)
  `10.1103/PhysRevB.72.085108 <http://link.aps.org/doi/10.1103/PhysRevB.72.085108>`_

  A. E. Mattsson, R. Armiento, J. Paier, G. Kresse, J. M. Wills, and T. R. Mattsson.,  J. Chem. Phys. 128, 084714 (2008)
  `10.1063/1.2835596 <http://scitation.aip.org/content/aip/journal/jcp/128/8/10.1063/1.2835596>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _alpha : Optional[float], default: 2.804
    alpha
  _gamma : Optional[float], default: 0.8098
    gamma
  """
  _alpha = (_alpha or 2.804)
  _gamma = (_gamma or 0.8098)
  p = get_p("gga_c_am05", polarized, _alpha, _gamma)
  def _gga_c_am05_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_c_am05.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_c_am05_epsilon_xc

def gga_c_xpbe(
  polarized: bool = True,
  _beta: Optional[float] = None,
  _gamma: Optional[float] = None,
  _B: Optional[float] = None,
) -> Callable:
  r"""
  X. Xu and W. A. Goddard.,  J. Chem. Phys. 121, 4068 (2004)
  `10.1063/1.1771632 <http://scitation.aip.org/content/aip/journal/jcp/121/9/10.1063/1.1771632>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _beta : Optional[float], default: 0.089809
    beta constant
  _gamma : Optional[float], default: 0.0204335576602504
    (1 - ln(2))/Pi^2 in the PBE
  _B : Optional[float], default: 1.0
    Multiplies the A t^2 term. Used in the SPBE functional
  """
  _beta = (_beta or 0.089809)
  _gamma = (_gamma or 0.0204335576602504)
  _B = (_B or 1.0)
  p = get_p("gga_c_xpbe", polarized, _beta, _gamma, _B)
  def _gga_c_xpbe_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_c_xpbe.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_c_xpbe_epsilon_xc

def gga_c_lm(
  polarized: bool = True,
  _f: Optional[float] = None,
) -> Callable:
  r"""
  D. C. Langreth and M. J. Mehl.,  Phys. Rev. Lett. 47, 446 (1981)
  `10.1103/PhysRevLett.47.446 <http://link.aps.org/doi/10.1103/PhysRevLett.47.446>`_

  C. D. Hu and D. C. Langreth.,  Phys. Scr. 32, 391 (1985)
  `10.1088/0031-8949/32/4/024 <http://stacks.iop.org/1402-4896/32/i = 4/a = 024>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _f : Optional[float], default: 0.15
    f parameter
  """
  _f = (_f or 0.15)
  p = get_p("gga_c_lm", polarized, _f)
  def _gga_c_lm_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_c_lm.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_c_lm_epsilon_xc

def gga_c_pbe_jrgx(
  polarized: bool = True,
  _beta: Optional[float] = None,
  _gamma: Optional[float] = None,
  _B: Optional[float] = None,
) -> Callable:
  r"""
  L. S. Pedroza, A. J. R. da Silva, and K. Capelle.,  Phys. Rev. B 79, 201106 (2009)
  `10.1103/PhysRevB.79.201106 <http://link.aps.org/doi/10.1103/PhysRevB.79.201106>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _beta : Optional[float], default: 0.03752636431497906
    beta constant
  _gamma : Optional[float], default: 0.031090690869654894
    (1 - ln(2))/Pi^2 in the PBE
  _B : Optional[float], default: 1.0
    Multiplies the A t^2 term. Used in the SPBE functional
  """
  _beta = (_beta or 0.03752636431497906)
  _gamma = (_gamma or 0.031090690869654894)
  _B = (_B or 1.0)
  p = get_p("gga_c_pbe_jrgx", polarized, _beta, _gamma, _B)
  def _gga_c_pbe_jrgx_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_c_pbe_jrgx.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_c_pbe_jrgx_epsilon_xc

def gga_x_optb88_vdw(
  polarized: bool = True,
  _beta: Optional[float] = None,
  _gamma: Optional[float] = None,
) -> Callable:
  r"""
  J. Klimeš, D. R. Bowler, and A. Michaelides.,  J. Phys.: Condens. Matter 22, 022201 (2010)
  `10.1088/0953-8984/22/2/022201 <http://stacks.iop.org/0953-8984/22/i=2/a=022201>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _beta : Optional[float], default: 0.00336865923905927
    beta/X_FACTOR_C is the coefficient of the gradient expansion
  _gamma : Optional[float], default: 6.98131700797731
    gamma should be 6 to get the right asymptotics of Ex
  """
  _beta = (_beta or 0.00336865923905927)
  _gamma = (_gamma or 6.98131700797731)
  p = get_p("gga_x_optb88_vdw", polarized, _beta, _gamma)
  def _gga_x_optb88_vdw_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_optb88_vdw.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_optb88_vdw_epsilon_xc

def gga_x_pbek1_vdw(
  polarized: bool = True,
  _kappa: Optional[float] = None,
  _mu: Optional[float] = None,
) -> Callable:
  r"""
  J. Klimeš, D. R. Bowler, and A. Michaelides.,  J. Phys.: Condens. Matter 22, 022201 (2010)
  `10.1088/0953-8984/22/2/022201 <http://stacks.iop.org/0953-8984/22/i=2/a=022201>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _kappa : Optional[float], default: 1.0
    Asymptotic value of the enhancement function
  _mu : Optional[float], default: 0.2195149727645171
    Coefficient of the 2nd order expansion
  """
  _kappa = (_kappa or 1.0)
  _mu = (_mu or 0.2195149727645171)
  p = get_p("gga_x_pbek1_vdw", polarized, _kappa, _mu)
  def _gga_x_pbek1_vdw_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_pbek1_vdw.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_pbek1_vdw_epsilon_xc

def gga_x_optpbe_vdw(
  polarized: bool = True,
) -> Callable:
  r"""
  J. Klimeš, D. R. Bowler, and A. Michaelides.,  J. Phys.: Condens. Matter 22, 022201 (2010)
  `10.1088/0953-8984/22/2/022201 <http://stacks.iop.org/0953-8984/22/i=2/a=022201>`_

  
  Mixing of the following functionals:
    gga_x_pbe (coefficient: 0.945268)
    gga_x_rpbe (coefficient: 0.054732)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_x_optpbe_vdw", polarized, )
  def _gga_x_optpbe_vdw_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_optpbe_vdw.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _gga_x_optpbe_vdw_epsilon_xc.cam_alpha = p.cam_alpha
  _gga_x_optpbe_vdw_epsilon_xc.cam_beta = p.cam_beta
  _gga_x_optpbe_vdw_epsilon_xc.cam_omega = p.cam_omega
  _gga_x_optpbe_vdw_epsilon_xc.nlc_b = p.nlc_b
  _gga_x_optpbe_vdw_epsilon_xc.nlc_C = p.nlc_C

  return _gga_x_optpbe_vdw_epsilon_xc

def gga_x_rge2(
  polarized: bool = True,
) -> Callable:
  r"""
  A. Ruzsinszky, G. I. Csonka, and G. E. Scuseria.,  J. Chem. Theory Comput. 5, 763 (2009)
  `10.1021/ct8005369 <http://pubs.acs.org/doi/abs/10.1021/ct8005369>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_x_rge2", polarized, )
  def _gga_x_rge2_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_rge2.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_rge2_epsilon_xc

def gga_c_rge2(
  polarized: bool = True,
  _beta: Optional[float] = None,
  _gamma: Optional[float] = None,
  _B: Optional[float] = None,
) -> Callable:
  r"""
  A. Ruzsinszky, G. I. Csonka, and G. E. Scuseria.,  J. Chem. Theory Comput. 5, 763 (2009)
  `10.1021/ct8005369 <http://pubs.acs.org/doi/abs/10.1021/ct8005369>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _beta : Optional[float], default: 0.053
    beta constant
  _gamma : Optional[float], default: 0.031090690869654894
    (1 - ln(2))/Pi^2 in the PBE
  _B : Optional[float], default: 1.0
    Multiplies the A t^2 term. Used in the SPBE functional
  """
  _beta = (_beta or 0.053)
  _gamma = (_gamma or 0.031090690869654894)
  _B = (_B or 1.0)
  p = get_p("gga_c_rge2", polarized, _beta, _gamma, _B)
  def _gga_c_rge2_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_c_rge2.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_c_rge2_epsilon_xc

def gga_x_rpw86(
  polarized: bool = True,
  _aa: Optional[float] = None,
  _bb: Optional[float] = None,
  _cc: Optional[float] = None,
) -> Callable:
  r"""
  É. D. Murray, K. Lee, and D. C. Langreth.,  J. Chem. Theory Comput. 5, 2754 (2009)
  `10.1021/ct900365q <http://pubs.acs.org/doi/abs/10.1021/ct900365q>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _aa : Optional[float], default: 1.851
    Coefficient of s^2 term
  _bb : Optional[float], default: 17.33
    Coefficient of s^4 term
  _cc : Optional[float], default: 0.163
    Coefficient of s^6 term
  """
  _aa = (_aa or 1.851)
  _bb = (_bb or 17.33)
  _cc = (_cc or 0.163)
  p = get_p("gga_x_rpw86", polarized, _aa, _bb, _cc)
  def _gga_x_rpw86_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_rpw86.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_rpw86_epsilon_xc

def gga_x_kt1(
  polarized: bool = True,
  _gamma: Optional[float] = None,
  _delta: Optional[float] = None,
) -> Callable:
  r"""
  T. W. Keal and D. J. Tozer.,  J. Chem. Phys. 119, 3015 (2003)
  `10.1063/1.1590634 <http://scitation.aip.org/content/aip/journal/jcp/119/6/10.1063/1.1590634>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _gamma : Optional[float], default: -0.006
    gamma
  _delta : Optional[float], default: 0.1
    delta
  """
  _gamma = (_gamma or -0.006)
  _delta = (_delta or 0.1)
  p = get_p("gga_x_kt1", polarized, _gamma, _delta)
  def _gga_x_kt1_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_kt1.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_kt1_epsilon_xc

def gga_xc_kt2(
  polarized: bool = True,
) -> Callable:
  r"""
  T. W. Keal and D. J. Tozer.,  J. Chem. Phys. 119, 3015 (2003)
  `10.1063/1.1590634 <http://scitation.aip.org/content/aip/journal/jcp/119/6/10.1063/1.1590634>`_

  
  Mixing of the following functionals:
    lda_x (coefficient: 0.07173000000000007)
    gga_x_kt1 (coefficient: 1.0)
    lda_c_vwn (coefficient: 0.576727)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_xc_kt2", polarized, )
  def _gga_xc_kt2_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_xc_kt2.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _gga_xc_kt2_epsilon_xc.cam_alpha = p.cam_alpha
  _gga_xc_kt2_epsilon_xc.cam_beta = p.cam_beta
  _gga_xc_kt2_epsilon_xc.cam_omega = p.cam_omega
  _gga_xc_kt2_epsilon_xc.nlc_b = p.nlc_b
  _gga_xc_kt2_epsilon_xc.nlc_C = p.nlc_C

  return _gga_xc_kt2_epsilon_xc

def gga_c_wl(
  polarized: bool = True,
) -> Callable:
  r"""
  L. C. Wilson and M. Levy.,  Phys. Rev. B 41, 12930 (1990)
  `10.1103/PhysRevB.41.12930 <http://link.aps.org/doi/10.1103/PhysRevB.41.12930>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_c_wl", polarized, )
  def _gga_c_wl_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_c_wl.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_c_wl_epsilon_xc

def gga_c_wi(
  polarized: bool = True,
  _a: Optional[float] = None,
  _b: Optional[float] = None,
  _c: Optional[float] = None,
  _d: Optional[float] = None,
  _k: Optional[float] = None,
) -> Callable:
  r"""
  L. C. Wilson and S. Ivanov.,  Int. J. Quantum Chem. 69, 523 (1998)
  `10.1002/(SICI)1097-461X(1998)69:4<523::AID-QUA9>3.0.CO;2-X <http://onlinelibrary.wiley.com/doi/10.1002/(SICI)1097-461X(1998)69:4\<523::AID-QUA9\>3.0.CO;2-X/abstract>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a : Optional[float], default: -0.00652
    a parameter
  _b : Optional[float], default: 0.0007
    b parameter
  _c : Optional[float], default: 0.21
    c parameter
  _d : Optional[float], default: 0.002
    d parameter
  _k : Optional[float], default: 0.001
    k parameter
  """
  _a = (_a or -0.00652)
  _b = (_b or 0.0007)
  _c = (_c or 0.21)
  _d = (_d or 0.002)
  _k = (_k or 0.001)
  p = get_p("gga_c_wi", polarized, _a, _b, _c, _d, _k)
  def _gga_c_wi_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_c_wi.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_c_wi_epsilon_xc

def gga_x_mb88(
  polarized: bool = True,
  _beta: Optional[float] = None,
  _gamma: Optional[float] = None,
) -> Callable:
  r"""
  V. Tognetti and C. Adamo.,  J. Phys. Chem. A 113, 14415 (2009)
  `10.1021/jp903672e <http://pubs.acs.org/doi/abs/10.1021/jp903672e>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _beta : Optional[float], default: 0.0011
    beta/X_FACTOR_C is the coefficient of the gradient expansion
  _gamma : Optional[float], default: 6.0
    gamma should be 6 to get the right asymptotics of Ex
  """
  _beta = (_beta or 0.0011)
  _gamma = (_gamma or 6.0)
  p = get_p("gga_x_mb88", polarized, _beta, _gamma)
  def _gga_x_mb88_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_mb88.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_mb88_epsilon_xc

def gga_x_sogga(
  polarized: bool = True,
) -> Callable:
  r"""
  Y. Zhao and D. G. Truhlar.,  J. Chem. Phys. 128, 184109 (2008)
  `10.1063/1.2912068 <http://scitation.aip.org/content/aip/journal/jcp/128/18/10.1063/1.2912068>`_

  
  Mixing of the following functionals:
    gga_x_pbe (coefficient: 0.5)
    gga_x_rpbe (coefficient: 0.5)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_x_sogga", polarized, )
  def _gga_x_sogga_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_sogga.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _gga_x_sogga_epsilon_xc.cam_alpha = p.cam_alpha
  _gga_x_sogga_epsilon_xc.cam_beta = p.cam_beta
  _gga_x_sogga_epsilon_xc.cam_omega = p.cam_omega
  _gga_x_sogga_epsilon_xc.nlc_b = p.nlc_b
  _gga_x_sogga_epsilon_xc.nlc_C = p.nlc_C

  return _gga_x_sogga_epsilon_xc

def gga_x_sogga11(
  polarized: bool = True,
  _kappa: Optional[float] = None,
  _mu: Optional[float] = None,
  _a0: Optional[float] = None,
  _a1: Optional[float] = None,
  _a2: Optional[float] = None,
  _a3: Optional[float] = None,
  _a4: Optional[float] = None,
  _a5: Optional[float] = None,
  _b0: Optional[float] = None,
  _b1: Optional[float] = None,
  _b2: Optional[float] = None,
  _b3: Optional[float] = None,
  _b4: Optional[float] = None,
  _b5: Optional[float] = None,
) -> Callable:
  r"""
  R. Peverati, Y. Zhao, and D. G. Truhlar.,  J. Phys. Chem. Lett. 2, 1991 (2011)
  `10.1021/jz200616w <http://pubs.acs.org/doi/abs/10.1021/jz200616w>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _kappa : Optional[float], default: 0.552
    kappa
  _mu : Optional[float], default: 0.12345679012345678
    mu
  _a0 : Optional[float], default: 0.5
    a0
  _a1 : Optional[float], default: -2.95535
    a1
  _a2 : Optional[float], default: 15.7974
    a2
  _a3 : Optional[float], default: -91.1804
    a3
  _a4 : Optional[float], default: 96.203
    a4
  _a5 : Optional[float], default: 0.18683
    a5
  _b0 : Optional[float], default: 0.5
    b0
  _b1 : Optional[float], default: 3.50743
    b1
  _b2 : Optional[float], default: -12.9523
    b2
  _b3 : Optional[float], default: 49.787
    b3
  _b4 : Optional[float], default: -33.2545
    b4
  _b5 : Optional[float], default: -11.1396
    b5
  """
  _kappa = (_kappa or 0.552)
  _mu = (_mu or 0.12345679012345678)
  _a0 = (_a0 or 0.5)
  _a1 = (_a1 or -2.95535)
  _a2 = (_a2 or 15.7974)
  _a3 = (_a3 or -91.1804)
  _a4 = (_a4 or 96.203)
  _a5 = (_a5 or 0.18683)
  _b0 = (_b0 or 0.5)
  _b1 = (_b1 or 3.50743)
  _b2 = (_b2 or -12.9523)
  _b3 = (_b3 or 49.787)
  _b4 = (_b4 or -33.2545)
  _b5 = (_b5 or -11.1396)
  p = get_p("gga_x_sogga11", polarized, _kappa, _mu, _a0, _a1, _a2, _a3, _a4, _a5, _b0, _b1, _b2, _b3, _b4, _b5)
  def _gga_x_sogga11_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_sogga11.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_sogga11_epsilon_xc

def gga_c_sogga11(
  polarized: bool = True,
  _a0: Optional[float] = None,
  _a1: Optional[float] = None,
  _a2: Optional[float] = None,
  _a3: Optional[float] = None,
  _a4: Optional[float] = None,
  _a5: Optional[float] = None,
  _b0: Optional[float] = None,
  _b1: Optional[float] = None,
  _b2: Optional[float] = None,
  _b3: Optional[float] = None,
  _b4: Optional[float] = None,
  _b5: Optional[float] = None,
) -> Callable:
  r"""
  R. Peverati, Y. Zhao, and D. G. Truhlar.,  J. Phys. Chem. Lett. 2, 1991 (2011)
  `10.1021/jz200616w <http://pubs.acs.org/doi/abs/10.1021/jz200616w>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a0 : Optional[float], default: 0.5
    a0
  _a1 : Optional[float], default: -4.62334
    a1
  _a2 : Optional[float], default: 8.0041
    a2
  _a3 : Optional[float], default: -130.226
    a3
  _a4 : Optional[float], default: 38.2685
    a4
  _a5 : Optional[float], default: 69.5599
    a5
  _b0 : Optional[float], default: 0.5
    b0
  _b1 : Optional[float], default: 3.62334
    b1
  _b2 : Optional[float], default: 9.36393
    b2
  _b3 : Optional[float], default: 34.5114
    b3
  _b4 : Optional[float], default: -18.5684
    b4
  _b5 : Optional[float], default: -0.16519
    b5
  """
  _a0 = (_a0 or 0.5)
  _a1 = (_a1 or -4.62334)
  _a2 = (_a2 or 8.0041)
  _a3 = (_a3 or -130.226)
  _a4 = (_a4 or 38.2685)
  _a5 = (_a5 or 69.5599)
  _b0 = (_b0 or 0.5)
  _b1 = (_b1 or 3.62334)
  _b2 = (_b2 or 9.36393)
  _b3 = (_b3 or 34.5114)
  _b4 = (_b4 or -18.5684)
  _b5 = (_b5 or -0.16519)
  p = get_p("gga_c_sogga11", polarized, _a0, _a1, _a2, _a3, _a4, _a5, _b0, _b1, _b2, _b3, _b4, _b5)
  def _gga_c_sogga11_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_c_sogga11.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_c_sogga11_epsilon_xc

def gga_c_wi0(
  polarized: bool = True,
  _a: Optional[float] = None,
  _b: Optional[float] = None,
  _c: Optional[float] = None,
  _d: Optional[float] = None,
  _k: Optional[float] = None,
) -> Callable:
  r"""
  L. C. Wilson and S. Ivanov.,  Int. J. Quantum Chem. 69, 523 (1998)
  `10.1002/(SICI)1097-461X(1998)69:4<523::AID-QUA9>3.0.CO;2-X <http://onlinelibrary.wiley.com/doi/10.1002/(SICI)1097-461X(1998)69:4\<523::AID-QUA9\>3.0.CO;2-X/abstract>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a : Optional[float], default: -0.44
    a parameter
  _b : Optional[float], default: 0.0032407
    b parameter
  _c : Optional[float], default: 7.8
    c parameter
  _d : Optional[float], default: 0.0073
    d parameter
  _k : Optional[float], default: 0.000311
    k parameter
  """
  _a = (_a or -0.44)
  _b = (_b or 0.0032407)
  _c = (_c or 7.8)
  _d = (_d or 0.0073)
  _k = (_k or 0.000311)
  p = get_p("gga_c_wi0", polarized, _a, _b, _c, _d, _k)
  def _gga_c_wi0_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_c_wi0.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_c_wi0_epsilon_xc

def gga_xc_th1(
  polarized: bool = True,
  _w_0_: Optional[float] = None,
  _w_1_: Optional[float] = None,
  _w_2_: Optional[float] = None,
  _w_3_: Optional[float] = None,
  _w_4_: Optional[float] = None,
  _w_5_: Optional[float] = None,
  _w_6_: Optional[float] = None,
  _w_7_: Optional[float] = None,
  _w_8_: Optional[float] = None,
  _w_9_: Optional[float] = None,
  _w_10_: Optional[float] = None,
  _w_11_: Optional[float] = None,
  _w_12_: Optional[float] = None,
  _w_13_: Optional[float] = None,
  _w_14_: Optional[float] = None,
  _w_15_: Optional[float] = None,
  _w_16_: Optional[float] = None,
  _w_17_: Optional[float] = None,
  _w_18_: Optional[float] = None,
  _w_19_: Optional[float] = None,
  _w_20_: Optional[float] = None,
) -> Callable:
  r"""
  D. J. Tozer and N. C. Handy.,  J. Chem. Phys. 108, 2545 (1998)
  `10.1063/1.475638 <http://scitation.aip.org/content/aip/journal/jcp/108/6/10.1063/1.475638>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _w_0_ : Optional[float], default: -0.728255
    w[0]
  _w_1_ : Optional[float], default: 0.331699
    w[1]
  _w_2_ : Optional[float], default: -1.02946
    w[2]
  _w_3_ : Optional[float], default: 0.235703
    w[3]
  _w_4_ : Optional[float], default: -0.0876221
    w[4]
  _w_5_ : Optional[float], default: 0.140854
    w[5]
  _w_6_ : Optional[float], default: 0.0336982
    w[6]
  _w_7_ : Optional[float], default: -0.0353615
    w[7]
  _w_8_ : Optional[float], default: 0.0049793
    w[8]
  _w_9_ : Optional[float], default: -0.06459
    w[9]
  _w_10_ : Optional[float], default: 0.0461795
    w[10]
  _w_11_ : Optional[float], default: -0.00757191
    w[11]
  _w_12_ : Optional[float], default: -0.00242717
    w[12]
  _w_13_ : Optional[float], default: 0.042814
    w[13]
  _w_14_ : Optional[float], default: -0.0744891
    w[14]
  _w_15_ : Optional[float], default: 0.0386577
    w[15]
  _w_16_ : Optional[float], default: -0.352519
    w[16]
  _w_17_ : Optional[float], default: 2.19805
    w[17]
  _w_18_ : Optional[float], default: -3.72927
    w[18]
  _w_19_ : Optional[float], default: 1.94441
    w[19]
  _w_20_ : Optional[float], default: 0.128877
    w[20]
  """
  _w_0_ = (_w_0_ or -0.728255)
  _w_1_ = (_w_1_ or 0.331699)
  _w_2_ = (_w_2_ or -1.02946)
  _w_3_ = (_w_3_ or 0.235703)
  _w_4_ = (_w_4_ or -0.0876221)
  _w_5_ = (_w_5_ or 0.140854)
  _w_6_ = (_w_6_ or 0.0336982)
  _w_7_ = (_w_7_ or -0.0353615)
  _w_8_ = (_w_8_ or 0.0049793)
  _w_9_ = (_w_9_ or -0.06459)
  _w_10_ = (_w_10_ or 0.0461795)
  _w_11_ = (_w_11_ or -0.00757191)
  _w_12_ = (_w_12_ or -0.00242717)
  _w_13_ = (_w_13_ or 0.042814)
  _w_14_ = (_w_14_ or -0.0744891)
  _w_15_ = (_w_15_ or 0.0386577)
  _w_16_ = (_w_16_ or -0.352519)
  _w_17_ = (_w_17_ or 2.19805)
  _w_18_ = (_w_18_ or -3.72927)
  _w_19_ = (_w_19_ or 1.94441)
  _w_20_ = (_w_20_ or 0.128877)
  p = get_p("gga_xc_th1", polarized, _w_0_, _w_1_, _w_2_, _w_3_, _w_4_, _w_5_, _w_6_, _w_7_, _w_8_, _w_9_, _w_10_, _w_11_, _w_12_, _w_13_, _w_14_, _w_15_, _w_16_, _w_17_, _w_18_, _w_19_, _w_20_)
  def _gga_xc_th1_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_xc_th1.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_xc_th1_epsilon_xc

def gga_xc_th2(
  polarized: bool = True,
) -> Callable:
  r"""
  D. J. Tozer and N. C. Handy.,  J. Phys. Chem. A 102, 3162 (1998)
  `10.1021/jp980259s <http://pubs.acs.org/doi/abs/10.1021/jp980259s>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_xc_th2", polarized, )
  def _gga_xc_th2_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_xc_th2.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_xc_th2_epsilon_xc

def gga_xc_th3(
  polarized: bool = True,
) -> Callable:
  r"""
  N. C. Handy and D. J. Tozer.,  Mol. Phys. 94, 707 (1998)
  `10.1080/002689798167863 <http://www.tandfonline.com/doi/abs/10.1080/002689798167863>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_xc_th3", polarized, )
  def _gga_xc_th3_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_xc_th3.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_xc_th3_epsilon_xc

def gga_xc_th4(
  polarized: bool = True,
) -> Callable:
  r"""
  N. C. Handy and D. J. Tozer.,  Mol. Phys. 94, 707 (1998)
  `10.1080/002689798167863 <http://www.tandfonline.com/doi/abs/10.1080/002689798167863>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_xc_th4", polarized, )
  def _gga_xc_th4_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_xc_th4.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_xc_th4_epsilon_xc

def gga_x_c09x(
  polarized: bool = True,
) -> Callable:
  r"""
  V. R. Cooper.,  Phys. Rev. B 81, 161104 (2010)
  `10.1103/PhysRevB.81.161104 <http://link.aps.org/doi/10.1103/PhysRevB.81.161104>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_x_c09x", polarized, )
  def _gga_x_c09x_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_c09x.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_c09x_epsilon_xc

def gga_c_sogga11_x(
  polarized: bool = True,
  _a0: Optional[float] = None,
  _a1: Optional[float] = None,
  _a2: Optional[float] = None,
  _a3: Optional[float] = None,
  _a4: Optional[float] = None,
  _a5: Optional[float] = None,
  _b0: Optional[float] = None,
  _b1: Optional[float] = None,
  _b2: Optional[float] = None,
  _b3: Optional[float] = None,
  _b4: Optional[float] = None,
  _b5: Optional[float] = None,
) -> Callable:
  r"""
  R. Peverati and D. G. Truhlar.,  J. Chem. Phys. 135, 191102 (2011)
  `10.1063/1.3663871 <http://scitation.aip.org/content/aip/journal/jcp/135/19/10.1063/1.3663871>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a0 : Optional[float], default: 0.5
    a0
  _a1 : Optional[float], default: 78.2439
    a1
  _a2 : Optional[float], default: 25.7211
    a2
  _a3 : Optional[float], default: -13.883
    a3
  _a4 : Optional[float], default: -9.87375
    a4
  _a5 : Optional[float], default: -14.1357
    a5
  _b0 : Optional[float], default: 0.5
    b0
  _b1 : Optional[float], default: -79.2439
    b1
  _b2 : Optional[float], default: 16.3725
    b2
  _b3 : Optional[float], default: 2.08129
    b3
  _b4 : Optional[float], default: 7.50769
    b4
  _b5 : Optional[float], default: -10.1861
    b5
  """
  _a0 = (_a0 or 0.5)
  _a1 = (_a1 or 78.2439)
  _a2 = (_a2 or 25.7211)
  _a3 = (_a3 or -13.883)
  _a4 = (_a4 or -9.87375)
  _a5 = (_a5 or -14.1357)
  _b0 = (_b0 or 0.5)
  _b1 = (_b1 or -79.2439)
  _b2 = (_b2 or 16.3725)
  _b3 = (_b3 or 2.08129)
  _b4 = (_b4 or 7.50769)
  _b5 = (_b5 or -10.1861)
  p = get_p("gga_c_sogga11_x", polarized, _a0, _a1, _a2, _a3, _a4, _a5, _b0, _b1, _b2, _b3, _b4, _b5)
  def _gga_c_sogga11_x_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_c_sogga11_x.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_c_sogga11_x_epsilon_xc

def gga_x_lb(
  polarized: bool = True,
) -> Callable:
  r"""
  R. van Leeuwen and E. J. Baerends.,  Phys. Rev. A 49, 2421 (1994)
  `10.1103/PhysRevA.49.2421 <http://link.aps.org/doi/10.1103/PhysRevA.49.2421>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_x_lb", polarized, )
  def _gga_x_lb_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_lb.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_lb_epsilon_xc

def gga_xc_hcth_93(
  polarized: bool = True,
  _cx0: Optional[float] = None,
  _cx1: Optional[float] = None,
  _cx2: Optional[float] = None,
  _cx3: Optional[float] = None,
  _cx4: Optional[float] = None,
  _css0: Optional[float] = None,
  _css1: Optional[float] = None,
  _css2: Optional[float] = None,
  _css3: Optional[float] = None,
  _css4: Optional[float] = None,
  _cos0: Optional[float] = None,
  _cos1: Optional[float] = None,
  _cos2: Optional[float] = None,
  _cos3: Optional[float] = None,
  _cos4: Optional[float] = None,
) -> Callable:
  r"""
  F. A. Hamprecht, A. J. Cohen, D. J. Tozer, and N. C. Handy.,  J. Chem. Phys. 109, 6264 (1998)
  `10.1063/1.477267 <http://scitation.aip.org/content/aip/journal/jcp/109/15/10.1063/1.477267>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _cx0 : Optional[float], default: 1.0932
    u^0 coefficient for exchange
  _cx1 : Optional[float], default: -0.744056
    u^1 coefficient for exchange
  _cx2 : Optional[float], default: 5.5992
    u^2 coefficient for exchange
  _cx3 : Optional[float], default: -6.78549
    u^3 coefficient for exchange
  _cx4 : Optional[float], default: 4.49357
    u^4 coefficient for exchange
  _css0 : Optional[float], default: 0.222601
    u^0 coefficient for same-spin correlation
  _css1 : Optional[float], default: -0.0338622
    u^1 coefficient for same-spin correlation
  _css2 : Optional[float], default: -0.012517
    u^2 coefficient for same-spin correlation
  _css3 : Optional[float], default: -0.802496
    u^3 coefficient for same-spin correlation
  _css4 : Optional[float], default: 1.55396
    u^4 coefficient for same-spin correlation
  _cos0 : Optional[float], default: 0.729974
    u^0 coefficient for opposite-spin correlation
  _cos1 : Optional[float], default: 3.35287
    u^1 coefficient for opposite-spin correlation
  _cos2 : Optional[float], default: -11.543
    u^2 coefficient for opposite-spin correlation
  _cos3 : Optional[float], default: 8.08564
    u^3 coefficient for opposite-spin correlation
  _cos4 : Optional[float], default: -4.47857
    u^4 coefficient for opposite-spin correlation
  """
  _cx0 = (_cx0 or 1.0932)
  _cx1 = (_cx1 or -0.744056)
  _cx2 = (_cx2 or 5.5992)
  _cx3 = (_cx3 or -6.78549)
  _cx4 = (_cx4 or 4.49357)
  _css0 = (_css0 or 0.222601)
  _css1 = (_css1 or -0.0338622)
  _css2 = (_css2 or -0.012517)
  _css3 = (_css3 or -0.802496)
  _css4 = (_css4 or 1.55396)
  _cos0 = (_cos0 or 0.729974)
  _cos1 = (_cos1 or 3.35287)
  _cos2 = (_cos2 or -11.543)
  _cos3 = (_cos3 or 8.08564)
  _cos4 = (_cos4 or -4.47857)
  p = get_p("gga_xc_hcth_93", polarized, _cx0, _cx1, _cx2, _cx3, _cx4, _css0, _css1, _css2, _css3, _css4, _cos0, _cos1, _cos2, _cos3, _cos4)
  def _gga_xc_hcth_93_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_xc_hcth_93.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_xc_hcth_93_epsilon_xc

def gga_xc_hcth_120(
  polarized: bool = True,
  _cx0: Optional[float] = None,
  _cx1: Optional[float] = None,
  _cx2: Optional[float] = None,
  _cx3: Optional[float] = None,
  _cx4: Optional[float] = None,
  _css0: Optional[float] = None,
  _css1: Optional[float] = None,
  _css2: Optional[float] = None,
  _css3: Optional[float] = None,
  _css4: Optional[float] = None,
  _cos0: Optional[float] = None,
  _cos1: Optional[float] = None,
  _cos2: Optional[float] = None,
  _cos3: Optional[float] = None,
  _cos4: Optional[float] = None,
) -> Callable:
  r"""
  A. D. Boese, N. L. Doltsinis, N. C. Handy, and M. Sprik.,  J. Chem. Phys. 112, 1670 (2000)
  `10.1063/1.480732 <http://scitation.aip.org/content/aip/journal/jcp/112/4/10.1063/1.480732>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _cx0 : Optional[float], default: 1.09163
    u^0 coefficient for exchange
  _cx1 : Optional[float], default: -0.747215
    u^1 coefficient for exchange
  _cx2 : Optional[float], default: 5.07833
    u^2 coefficient for exchange
  _cx3 : Optional[float], default: -4.10746
    u^3 coefficient for exchange
  _cx4 : Optional[float], default: 1.17173
    u^4 coefficient for exchange
  _css0 : Optional[float], default: 0.489508
    u^0 coefficient for same-spin correlation
  _css1 : Optional[float], default: -0.260699
    u^1 coefficient for same-spin correlation
  _css2 : Optional[float], default: 0.432917
    u^2 coefficient for same-spin correlation
  _css3 : Optional[float], default: -1.99247
    u^3 coefficient for same-spin correlation
  _css4 : Optional[float], default: 2.48531
    u^4 coefficient for same-spin correlation
  _cos0 : Optional[float], default: 0.51473
    u^0 coefficient for opposite-spin correlation
  _cos1 : Optional[float], default: 6.92982
    u^1 coefficient for opposite-spin correlation
  _cos2 : Optional[float], default: -24.7073
    u^2 coefficient for opposite-spin correlation
  _cos3 : Optional[float], default: 23.1098
    u^3 coefficient for opposite-spin correlation
  _cos4 : Optional[float], default: -11.3234
    u^4 coefficient for opposite-spin correlation
  """
  _cx0 = (_cx0 or 1.09163)
  _cx1 = (_cx1 or -0.747215)
  _cx2 = (_cx2 or 5.07833)
  _cx3 = (_cx3 or -4.10746)
  _cx4 = (_cx4 or 1.17173)
  _css0 = (_css0 or 0.489508)
  _css1 = (_css1 or -0.260699)
  _css2 = (_css2 or 0.432917)
  _css3 = (_css3 or -1.99247)
  _css4 = (_css4 or 2.48531)
  _cos0 = (_cos0 or 0.51473)
  _cos1 = (_cos1 or 6.92982)
  _cos2 = (_cos2 or -24.7073)
  _cos3 = (_cos3 or 23.1098)
  _cos4 = (_cos4 or -11.3234)
  p = get_p("gga_xc_hcth_120", polarized, _cx0, _cx1, _cx2, _cx3, _cx4, _css0, _css1, _css2, _css3, _css4, _cos0, _cos1, _cos2, _cos3, _cos4)
  def _gga_xc_hcth_120_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_xc_hcth_120.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_xc_hcth_120_epsilon_xc

def gga_xc_hcth_147(
  polarized: bool = True,
  _cx0: Optional[float] = None,
  _cx1: Optional[float] = None,
  _cx2: Optional[float] = None,
  _cx3: Optional[float] = None,
  _cx4: Optional[float] = None,
  _css0: Optional[float] = None,
  _css1: Optional[float] = None,
  _css2: Optional[float] = None,
  _css3: Optional[float] = None,
  _css4: Optional[float] = None,
  _cos0: Optional[float] = None,
  _cos1: Optional[float] = None,
  _cos2: Optional[float] = None,
  _cos3: Optional[float] = None,
  _cos4: Optional[float] = None,
) -> Callable:
  r"""
  A. D. Boese, N. L. Doltsinis, N. C. Handy, and M. Sprik.,  J. Chem. Phys. 112, 1670 (2000)
  `10.1063/1.480732 <http://scitation.aip.org/content/aip/journal/jcp/112/4/10.1063/1.480732>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _cx0 : Optional[float], default: 1.09025
    u^0 coefficient for exchange
  _cx1 : Optional[float], default: -0.799194
    u^1 coefficient for exchange
  _cx2 : Optional[float], default: 5.57212
    u^2 coefficient for exchange
  _cx3 : Optional[float], default: -5.8676
    u^3 coefficient for exchange
  _cx4 : Optional[float], default: 3.04544
    u^4 coefficient for exchange
  _css0 : Optional[float], default: 0.562576
    u^0 coefficient for same-spin correlation
  _css1 : Optional[float], default: 0.0171436
    u^1 coefficient for same-spin correlation
  _css2 : Optional[float], default: -1.30636
    u^2 coefficient for same-spin correlation
  _css3 : Optional[float], default: 1.05747
    u^3 coefficient for same-spin correlation
  _css4 : Optional[float], default: 0.885429
    u^4 coefficient for same-spin correlation
  _cos0 : Optional[float], default: 0.542352
    u^0 coefficient for opposite-spin correlation
  _cos1 : Optional[float], default: 7.01464
    u^1 coefficient for opposite-spin correlation
  _cos2 : Optional[float], default: -28.3822
    u^2 coefficient for opposite-spin correlation
  _cos3 : Optional[float], default: 35.0329
    u^3 coefficient for opposite-spin correlation
  _cos4 : Optional[float], default: -20.4284
    u^4 coefficient for opposite-spin correlation
  """
  _cx0 = (_cx0 or 1.09025)
  _cx1 = (_cx1 or -0.799194)
  _cx2 = (_cx2 or 5.57212)
  _cx3 = (_cx3 or -5.8676)
  _cx4 = (_cx4 or 3.04544)
  _css0 = (_css0 or 0.562576)
  _css1 = (_css1 or 0.0171436)
  _css2 = (_css2 or -1.30636)
  _css3 = (_css3 or 1.05747)
  _css4 = (_css4 or 0.885429)
  _cos0 = (_cos0 or 0.542352)
  _cos1 = (_cos1 or 7.01464)
  _cos2 = (_cos2 or -28.3822)
  _cos3 = (_cos3 or 35.0329)
  _cos4 = (_cos4 or -20.4284)
  p = get_p("gga_xc_hcth_147", polarized, _cx0, _cx1, _cx2, _cx3, _cx4, _css0, _css1, _css2, _css3, _css4, _cos0, _cos1, _cos2, _cos3, _cos4)
  def _gga_xc_hcth_147_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_xc_hcth_147.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_xc_hcth_147_epsilon_xc

def gga_xc_hcth_407(
  polarized: bool = True,
  _cx0: Optional[float] = None,
  _cx1: Optional[float] = None,
  _cx2: Optional[float] = None,
  _cx3: Optional[float] = None,
  _cx4: Optional[float] = None,
  _css0: Optional[float] = None,
  _css1: Optional[float] = None,
  _css2: Optional[float] = None,
  _css3: Optional[float] = None,
  _css4: Optional[float] = None,
  _cos0: Optional[float] = None,
  _cos1: Optional[float] = None,
  _cos2: Optional[float] = None,
  _cos3: Optional[float] = None,
  _cos4: Optional[float] = None,
) -> Callable:
  r"""
  A. D. Boese and N. C. Handy.,  J. Chem. Phys. 114, 5497 (2001)
  `10.1063/1.1347371 <http://scitation.aip.org/content/aip/journal/jcp/114/13/10.1063/1.1347371>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _cx0 : Optional[float], default: 1.08184
    u^0 coefficient for exchange
  _cx1 : Optional[float], default: -0.518339
    u^1 coefficient for exchange
  _cx2 : Optional[float], default: 3.42562
    u^2 coefficient for exchange
  _cx3 : Optional[float], default: -2.62901
    u^3 coefficient for exchange
  _cx4 : Optional[float], default: 2.28855
    u^4 coefficient for exchange
  _css0 : Optional[float], default: 1.18777
    u^0 coefficient for same-spin correlation
  _css1 : Optional[float], default: -2.40292
    u^1 coefficient for same-spin correlation
  _css2 : Optional[float], default: 5.61741
    u^2 coefficient for same-spin correlation
  _css3 : Optional[float], default: -9.17923
    u^3 coefficient for same-spin correlation
  _css4 : Optional[float], default: 6.24798
    u^4 coefficient for same-spin correlation
  _cos0 : Optional[float], default: 0.589076
    u^0 coefficient for opposite-spin correlation
  _cos1 : Optional[float], default: 4.42374
    u^1 coefficient for opposite-spin correlation
  _cos2 : Optional[float], default: -19.2218
    u^2 coefficient for opposite-spin correlation
  _cos3 : Optional[float], default: 42.5721
    u^3 coefficient for opposite-spin correlation
  _cos4 : Optional[float], default: -42.0052
    u^4 coefficient for opposite-spin correlation
  """
  _cx0 = (_cx0 or 1.08184)
  _cx1 = (_cx1 or -0.518339)
  _cx2 = (_cx2 or 3.42562)
  _cx3 = (_cx3 or -2.62901)
  _cx4 = (_cx4 or 2.28855)
  _css0 = (_css0 or 1.18777)
  _css1 = (_css1 or -2.40292)
  _css2 = (_css2 or 5.61741)
  _css3 = (_css3 or -9.17923)
  _css4 = (_css4 or 6.24798)
  _cos0 = (_cos0 or 0.589076)
  _cos1 = (_cos1 or 4.42374)
  _cos2 = (_cos2 or -19.2218)
  _cos3 = (_cos3 or 42.5721)
  _cos4 = (_cos4 or -42.0052)
  p = get_p("gga_xc_hcth_407", polarized, _cx0, _cx1, _cx2, _cx3, _cx4, _css0, _css1, _css2, _css3, _css4, _cos0, _cos1, _cos2, _cos3, _cos4)
  def _gga_xc_hcth_407_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_xc_hcth_407.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_xc_hcth_407_epsilon_xc

def gga_xc_edf1(
  polarized: bool = True,
) -> Callable:
  r"""
  R. D. Adamson, P. M. W. Gill, and J. A. Pople.,  Chem. Phys. Lett. 284, 6 (1998)
  `10.1016/S0009-2614(97)01282-7 <http://www.sciencedirect.com/science/article/pii/S0009261497012827>`_

  
  Mixing of the following functionals:
    lda_x (coefficient: -0.9228179999999995)
    gga_x_b88 (coefficient: 10.4017)
    gga_x_b88 (coefficient: -8.44793)
    gga_c_lyp (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_xc_edf1", polarized, )
  def _gga_xc_edf1_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_xc_edf1.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _gga_xc_edf1_epsilon_xc.cam_alpha = p.cam_alpha
  _gga_xc_edf1_epsilon_xc.cam_beta = p.cam_beta
  _gga_xc_edf1_epsilon_xc.cam_omega = p.cam_omega
  _gga_xc_edf1_epsilon_xc.nlc_b = p.nlc_b
  _gga_xc_edf1_epsilon_xc.nlc_C = p.nlc_C

  return _gga_xc_edf1_epsilon_xc

def gga_xc_xlyp(
  polarized: bool = True,
) -> Callable:
  r"""
  X. Xu and W. A. Goddard.,  Proc. Natl. Acad. Sci. U. S. A. 101, 2673 (2004)
  `10.1073/pnas.0308730100 <http://www.pnas.org/content/101/9/2673.abstract>`_

  
  Mixing of the following functionals:
    lda_x (coefficient: -0.06899999999999995)
    gga_x_b88 (coefficient: 0.722)
    gga_x_pw91 (coefficient: 0.347)
    gga_c_lyp (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_xc_xlyp", polarized, )
  def _gga_xc_xlyp_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_xc_xlyp.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _gga_xc_xlyp_epsilon_xc.cam_alpha = p.cam_alpha
  _gga_xc_xlyp_epsilon_xc.cam_beta = p.cam_beta
  _gga_xc_xlyp_epsilon_xc.cam_omega = p.cam_omega
  _gga_xc_xlyp_epsilon_xc.nlc_b = p.nlc_b
  _gga_xc_xlyp_epsilon_xc.nlc_C = p.nlc_C

  return _gga_xc_xlyp_epsilon_xc

def gga_xc_kt1(
  polarized: bool = True,
) -> Callable:
  r"""
  T. W. Keal and D. J. Tozer.,  J. Chem. Phys. 119, 3015 (2003)
  `10.1063/1.1590634 <http://scitation.aip.org/content/aip/journal/jcp/119/6/10.1063/1.1590634>`_

  
  Mixing of the following functionals:
    gga_x_kt1 (coefficient: 1.0)
    lda_c_vwn (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_xc_kt1", polarized, )
  def _gga_xc_kt1_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_xc_kt1.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _gga_xc_kt1_epsilon_xc.cam_alpha = p.cam_alpha
  _gga_xc_kt1_epsilon_xc.cam_beta = p.cam_beta
  _gga_xc_kt1_epsilon_xc.cam_omega = p.cam_omega
  _gga_xc_kt1_epsilon_xc.nlc_b = p.nlc_b
  _gga_xc_kt1_epsilon_xc.nlc_C = p.nlc_C

  return _gga_xc_kt1_epsilon_xc

def gga_x_lspbe(
  polarized: bool = True,
  _kappa: Optional[float] = None,
  _mu: Optional[float] = None,
  _alpha: Optional[float] = None,
) -> Callable:
  r"""
  J. C. Pacheco-Kato, J. M. del Campo, J. L. Gázquez, S.B. Trickey, and A. Vela.,  Chem. Phys. Lett. 651, 268-273 (2016)
  `10.1016/j.cplett.2016.03.028 <http://www.sciencedirect.com/science/article/pii/S0009261416301373>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _kappa : Optional[float], default: 0.804
    Asymptotic value of the enhancement function
  _mu : Optional[float], default: 0.2195149727645171
    Coefficient of the 2nd order expansion of the full Lspbe functional
  _alpha : Optional[float], default: 0.00145165
    Exponent that should satisfy the PW91 criterion
  """
  _kappa = (_kappa or 0.804)
  _mu = (_mu or 0.2195149727645171)
  _alpha = (_alpha or 0.00145165)
  p = get_p("gga_x_lspbe", polarized, _kappa, _mu, _alpha)
  def _gga_x_lspbe_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_lspbe.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_lspbe_epsilon_xc

def gga_x_lsrpbe(
  polarized: bool = True,
  _kappa: Optional[float] = None,
  _mu: Optional[float] = None,
  _alpha: Optional[float] = None,
) -> Callable:
  r"""
  J. C. Pacheco-Kato, J. M. del Campo, J. L. Gázquez, S.B. Trickey, and A. Vela.,  Chem. Phys. Lett. 651, 268-273 (2016)
  `10.1016/j.cplett.2016.03.028 <http://www.sciencedirect.com/science/article/pii/S0009261416301373>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _kappa : Optional[float], default: 0.804
    Asymptotic value of the enhancement function
  _mu : Optional[float], default: 0.2195149727645171
    Coefficient of the 2nd order expansion of the full Lspbe functional
  _alpha : Optional[float], default: 0.00680892
    Exponent that should satisfy the PW91 criterion
  """
  _kappa = (_kappa or 0.804)
  _mu = (_mu or 0.2195149727645171)
  _alpha = (_alpha or 0.00680892)
  p = get_p("gga_x_lsrpbe", polarized, _kappa, _mu, _alpha)
  def _gga_x_lsrpbe_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_lsrpbe.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_lsrpbe_epsilon_xc

def gga_xc_b97_d(
  polarized: bool = True,
  _cx0: Optional[float] = None,
  _cx1: Optional[float] = None,
  _cx2: Optional[float] = None,
  _cx3: Optional[float] = None,
  _cx4: Optional[float] = None,
  _css0: Optional[float] = None,
  _css1: Optional[float] = None,
  _css2: Optional[float] = None,
  _css3: Optional[float] = None,
  _css4: Optional[float] = None,
  _cos0: Optional[float] = None,
  _cos1: Optional[float] = None,
  _cos2: Optional[float] = None,
  _cos3: Optional[float] = None,
  _cos4: Optional[float] = None,
) -> Callable:
  r"""
  S. Grimme.,  J. Comput. Chem. 27, 1787 (2006)
  `10.1002/jcc.20495 <http://onlinelibrary.wiley.com/doi/10.1002/jcc.20495/abstract>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _cx0 : Optional[float], default: 1.08662
    u^0 coefficient for exchange
  _cx1 : Optional[float], default: -0.52127
    u^1 coefficient for exchange
  _cx2 : Optional[float], default: 3.25429
    u^2 coefficient for exchange
  _cx3 : Optional[float], default: 0.0
    u^3 coefficient for exchange
  _cx4 : Optional[float], default: 0.0
    u^4 coefficient for exchange
  _css0 : Optional[float], default: 0.2234
    u^0 coefficient for same-spin correlation
  _css1 : Optional[float], default: -1.56208
    u^1 coefficient for same-spin correlation
  _css2 : Optional[float], default: 1.94293
    u^2 coefficient for same-spin correlation
  _css3 : Optional[float], default: 0.0
    u^3 coefficient for same-spin correlation
  _css4 : Optional[float], default: 0.0
    u^4 coefficient for same-spin correlation
  _cos0 : Optional[float], default: 0.69041
    u^0 coefficient for opposite-spin correlation
  _cos1 : Optional[float], default: 6.3027
    u^1 coefficient for opposite-spin correlation
  _cos2 : Optional[float], default: -14.9712
    u^2 coefficient for opposite-spin correlation
  _cos3 : Optional[float], default: 0.0
    u^3 coefficient for opposite-spin correlation
  _cos4 : Optional[float], default: 0.0
    u^4 coefficient for opposite-spin correlation
  """
  _cx0 = (_cx0 or 1.08662)
  _cx1 = (_cx1 or -0.52127)
  _cx2 = (_cx2 or 3.25429)
  _cx3 = (_cx3 or 0.0)
  _cx4 = (_cx4 or 0.0)
  _css0 = (_css0 or 0.2234)
  _css1 = (_css1 or -1.56208)
  _css2 = (_css2 or 1.94293)
  _css3 = (_css3 or 0.0)
  _css4 = (_css4 or 0.0)
  _cos0 = (_cos0 or 0.69041)
  _cos1 = (_cos1 or 6.3027)
  _cos2 = (_cos2 or -14.9712)
  _cos3 = (_cos3 or 0.0)
  _cos4 = (_cos4 or 0.0)
  p = get_p("gga_xc_b97_d", polarized, _cx0, _cx1, _cx2, _cx3, _cx4, _css0, _css1, _css2, _css3, _css4, _cos0, _cos1, _cos2, _cos3, _cos4)
  def _gga_xc_b97_d_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_xc_b97_d.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_xc_b97_d_epsilon_xc

def gga_x_optb86b_vdw(
  polarized: bool = True,
  _beta: Optional[float] = None,
  _gamma: Optional[float] = None,
  _omega: Optional[float] = None,
) -> Callable:
  r"""
  J. Klimeš, D. R. Bowler, and A. Michaelides.,  Phys. Rev. B 83, 195131 (2011)
  `10.1103/PhysRevB.83.195131 <https://link.aps.org/doi/10.1103/PhysRevB.83.195131>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _beta : Optional[float], default: 0.002031519487163032
    Small x limit
  _gamma : Optional[float], default: 0.002031519487163032
    Parameter in the denominator
  _omega : Optional[float], default: 0.8
    Exponent of denominator
  """
  _beta = (_beta or 0.002031519487163032)
  _gamma = (_gamma or 0.002031519487163032)
  _omega = (_omega or 0.8)
  p = get_p("gga_x_optb86b_vdw", polarized, _beta, _gamma, _omega)
  def _gga_x_optb86b_vdw_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_optb86b_vdw.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_optb86b_vdw_epsilon_xc

def mgga_c_revm11(
  polarized: bool = True,
  _a0: Optional[float] = None,
  _a1: Optional[float] = None,
  _a2: Optional[float] = None,
  _a3: Optional[float] = None,
  _a4: Optional[float] = None,
  _a5: Optional[float] = None,
  _a6: Optional[float] = None,
  _a7: Optional[float] = None,
  _a8: Optional[float] = None,
  _a9: Optional[float] = None,
  _a10: Optional[float] = None,
  _a11: Optional[float] = None,
  _b0: Optional[float] = None,
  _b1: Optional[float] = None,
  _b2: Optional[float] = None,
  _b3: Optional[float] = None,
  _b4: Optional[float] = None,
  _b5: Optional[float] = None,
  _b6: Optional[float] = None,
  _b7: Optional[float] = None,
  _b8: Optional[float] = None,
  _b9: Optional[float] = None,
  _b10: Optional[float] = None,
  _b11: Optional[float] = None,
) -> Callable:
  r"""
  P. Verma, Y. Wang, S. Ghosh, X. He, and D. G. Truhlar.,  J. Phys. Chem. A 123, 2966-2990 (2019)
  `10.1021/acs.jpca.8b11499 <https://doi.org/10.1021/acs.jpca.8b11499>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a0 : Optional[float], default: 1.0
    a0
  _a1 : Optional[float], default: 0.0
    a1
  _a2 : Optional[float], default: -0.7860212983
    a2
  _a3 : Optional[float], default: -5.1132585425
    a3
  _a4 : Optional[float], default: -4.0716488878
    a4
  _a5 : Optional[float], default: 1.5806421214
    a5
  _a6 : Optional[float], default: 8.4135687567
    a6
  _a7 : Optional[float], default: 0.0
    a7
  _a8 : Optional[float], default: 0.0
    a8
  _a9 : Optional[float], default: 0.0
    a9
  _a10 : Optional[float], default: 0.0
    a10
  _a11 : Optional[float], default: 0.0
    a11
  _b0 : Optional[float], default: 0.9732839024
    b0
  _b1 : Optional[float], default: -2.1674450396
    b1
  _b2 : Optional[float], default: -9.3318324572
    b2
  _b3 : Optional[float], default: -12.9399606617
    b3
  _b4 : Optional[float], default: -2.212932066
    b4
  _b5 : Optional[float], default: -2.95085491
    b5
  _b6 : Optional[float], default: -1.506631936
    b6
  _b7 : Optional[float], default: 0.0
    b7
  _b8 : Optional[float], default: 0.0
    b8
  _b9 : Optional[float], default: 0.0
    b9
  _b10 : Optional[float], default: 0.0
    b10
  _b11 : Optional[float], default: 0.0
    b11
  """
  _a0 = (_a0 or 1.0)
  _a1 = (_a1 or 0.0)
  _a2 = (_a2 or -0.7860212983)
  _a3 = (_a3 or -5.1132585425)
  _a4 = (_a4 or -4.0716488878)
  _a5 = (_a5 or 1.5806421214)
  _a6 = (_a6 or 8.4135687567)
  _a7 = (_a7 or 0.0)
  _a8 = (_a8 or 0.0)
  _a9 = (_a9 or 0.0)
  _a10 = (_a10 or 0.0)
  _a11 = (_a11 or 0.0)
  _b0 = (_b0 or 0.9732839024)
  _b1 = (_b1 or -2.1674450396)
  _b2 = (_b2 or -9.3318324572)
  _b3 = (_b3 or -12.9399606617)
  _b4 = (_b4 or -2.212932066)
  _b5 = (_b5 or -2.95085491)
  _b6 = (_b6 or -1.506631936)
  _b7 = (_b7 or 0.0)
  _b8 = (_b8 or 0.0)
  _b9 = (_b9 or 0.0)
  _b10 = (_b10 or 0.0)
  _b11 = (_b11 or 0.0)
  p = get_p("mgga_c_revm11", polarized, _a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8, _a9, _a10, _a11, _b0, _b1, _b2, _b3, _b4, _b5, _b6, _b7, _b8, _b9, _b10, _b11)
  def _mgga_c_revm11_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_c_revm11.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_c_revm11_epsilon_xc

def gga_xc_pbe1w(
  polarized: bool = True,
) -> Callable:
  r"""
  E. E. Dahlke and D. G. Truhlar.,  J. Phys. Chem. B 109, 15677 (2005)
  `10.1021/jp052436c <http://pubs.acs.org/doi/abs/10.1021/jp052436c>`_

  
  Mixing of the following functionals:
    lda_c_vwn (coefficient: 0.26)
    gga_x_pbe (coefficient: 1.0)
    gga_c_pbe (coefficient: 0.74)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_xc_pbe1w", polarized, )
  def _gga_xc_pbe1w_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_xc_pbe1w.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _gga_xc_pbe1w_epsilon_xc.cam_alpha = p.cam_alpha
  _gga_xc_pbe1w_epsilon_xc.cam_beta = p.cam_beta
  _gga_xc_pbe1w_epsilon_xc.cam_omega = p.cam_omega
  _gga_xc_pbe1w_epsilon_xc.nlc_b = p.nlc_b
  _gga_xc_pbe1w_epsilon_xc.nlc_C = p.nlc_C

  return _gga_xc_pbe1w_epsilon_xc

def gga_xc_mpwlyp1w(
  polarized: bool = True,
) -> Callable:
  r"""
  E. E. Dahlke and D. G. Truhlar.,  J. Phys. Chem. B 109, 15677 (2005)
  `10.1021/jp052436c <http://pubs.acs.org/doi/abs/10.1021/jp052436c>`_

  
  Mixing of the following functionals:
    lda_c_vwn (coefficient: 0.12)
    gga_x_mpw91 (coefficient: 1.0)
    gga_c_lyp (coefficient: 0.88)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_xc_mpwlyp1w", polarized, )
  def _gga_xc_mpwlyp1w_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_xc_mpwlyp1w.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _gga_xc_mpwlyp1w_epsilon_xc.cam_alpha = p.cam_alpha
  _gga_xc_mpwlyp1w_epsilon_xc.cam_beta = p.cam_beta
  _gga_xc_mpwlyp1w_epsilon_xc.cam_omega = p.cam_omega
  _gga_xc_mpwlyp1w_epsilon_xc.nlc_b = p.nlc_b
  _gga_xc_mpwlyp1w_epsilon_xc.nlc_C = p.nlc_C

  return _gga_xc_mpwlyp1w_epsilon_xc

def gga_xc_pbelyp1w(
  polarized: bool = True,
) -> Callable:
  r"""
  E. E. Dahlke and D. G. Truhlar.,  J. Phys. Chem. B 109, 15677 (2005)
  `10.1021/jp052436c <http://pubs.acs.org/doi/abs/10.1021/jp052436c>`_

  
  Mixing of the following functionals:
    lda_c_vwn (coefficient: 0.26)
    gga_x_pbe (coefficient: 1.0)
    gga_c_lyp (coefficient: 0.74)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_xc_pbelyp1w", polarized, )
  def _gga_xc_pbelyp1w_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_xc_pbelyp1w.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _gga_xc_pbelyp1w_epsilon_xc.cam_alpha = p.cam_alpha
  _gga_xc_pbelyp1w_epsilon_xc.cam_beta = p.cam_beta
  _gga_xc_pbelyp1w_epsilon_xc.cam_omega = p.cam_omega
  _gga_xc_pbelyp1w_epsilon_xc.nlc_b = p.nlc_b
  _gga_xc_pbelyp1w_epsilon_xc.nlc_C = p.nlc_C

  return _gga_xc_pbelyp1w_epsilon_xc

def gga_c_acggap(
  polarized: bool = True,
) -> Callable:
  r"""
  A. Cancio, G. P. Chen, B. T. Krull, and K. Burke.,  J. Chem. Phys. 149, 084116 (2018)
  `10.1063/1.5021597 <https://doi.org/10.1063/1.5021597>`_

  K. Burke, A. Cancio, T. Gould, and S. Pittalis.,  ArXiv e-prints  (2014)
  

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_c_acggap", polarized, )
  def _gga_c_acggap_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_c_acggap.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_c_acggap_epsilon_xc

def hyb_lda_xc_lda0(
  polarized: bool = True,
) -> Callable:
  r"""
  P. Rinke, A. Schleife, E. Kioupakis, A. Janotti, C. Rödl, F. Bechstedt, M. Scheffler, and C. G. Van de Walle.,  Phys. Rev. Lett. 108, 126404 (2012)
  `10.1103/PhysRevLett.108.126404 <https://link.aps.org/doi/10.1103/PhysRevLett.108.126404>`_

  
  Mixing of the following functionals:
    lda_x (coefficient: 0.75)
    lda_c_pw_mod (coefficient: 0.75)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("hyb_lda_xc_lda0", polarized, )
  def _hyb_lda_xc_lda0_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_lda_xc_lda0.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_lda_xc_lda0_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_lda_xc_lda0_epsilon_xc.cam_beta = p.cam_beta
  _hyb_lda_xc_lda0_epsilon_xc.cam_omega = p.cam_omega
  _hyb_lda_xc_lda0_epsilon_xc.nlc_b = p.nlc_b
  _hyb_lda_xc_lda0_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_lda_xc_lda0_epsilon_xc

def hyb_lda_xc_cam_lda0(
  polarized: bool = True,
) -> Callable:
  r"""
  M. A. Mosquera, C. H. Borca, M. A. Ratner, and G. C. Schatz.,  J. Phys. Chem. A 120, 1605-1612 (2016)
  `10.1021/acs.jpca.5b10864 <https://doi.org/10.1021/acs.jpca.5b10864>`_

  
  Mixing of the following functionals:
    lda_x (coefficient: 0.5)
    lda_x_erf (coefficient: 0.25)
    lda_c_pw_mod (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("hyb_lda_xc_cam_lda0", polarized, )
  def _hyb_lda_xc_cam_lda0_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_lda_xc_cam_lda0.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_lda_xc_cam_lda0_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_lda_xc_cam_lda0_epsilon_xc.cam_beta = p.cam_beta
  _hyb_lda_xc_cam_lda0_epsilon_xc.cam_omega = p.cam_omega
  _hyb_lda_xc_cam_lda0_epsilon_xc.nlc_b = p.nlc_b
  _hyb_lda_xc_cam_lda0_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_lda_xc_cam_lda0_epsilon_xc

def gga_x_b88_6311g(
  polarized: bool = True,
  _beta: Optional[float] = None,
  _gamma: Optional[float] = None,
) -> Callable:
  r"""
  J. M. Ugalde, C. Sarasola, and M. Aguado.,  J. Phys. B: At., Mol. Opt. Phys. 27, 423–427 (1994)
  `10.1088/0953-4075/27/3/009 <https://doi.org/10.1088/0953-4075/27/3/009>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _beta : Optional[float], default: 0.0051
    beta/X_FACTOR_C is the coefficient of the gradient expansion
  _gamma : Optional[float], default: 6.0
    gamma should be 6 to get the right asymptotics of Ex
  """
  _beta = (_beta or 0.0051)
  _gamma = (_gamma or 6.0)
  p = get_p("gga_x_b88_6311g", polarized, _beta, _gamma)
  def _gga_x_b88_6311g_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_b88_6311g.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_b88_6311g_epsilon_xc

def gga_x_ncap(
  polarized: bool = True,
  _alpha: Optional[float] = None,
  _beta: Optional[float] = None,
  _mu: Optional[float] = None,
  _zeta: Optional[float] = None,
) -> Callable:
  r"""
  J. Carmona-Espíndola, J. L. Gázquez, A. Vela, and S. B. Trickey.,  J. Chem. Theory Comput. 15, 303-310 (2019)
  `10.1021/acs.jctc.8b00998 <https://doi.org/10.1021/acs.jctc.8b00998>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _alpha : Optional[float], default: 0.3451117169263783
    alpha
  _beta : Optional[float], default: 0.01808569669
    beta
  _mu : Optional[float], default: 0.2195149727645171
    mu
  _zeta : Optional[float], default: 0.30412141859531383
    zeta
  """
  _alpha = (_alpha or 0.3451117169263783)
  _beta = (_beta or 0.01808569669)
  _mu = (_mu or 0.2195149727645171)
  _zeta = (_zeta or 0.30412141859531383)
  p = get_p("gga_x_ncap", polarized, _alpha, _beta, _mu, _zeta)
  def _gga_x_ncap_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_ncap.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_ncap_epsilon_xc

def gga_xc_ncap(
  polarized: bool = True,
) -> Callable:
  r"""
  J. Carmona-Espíndola, J. L. Gázquez, A. Vela, and S. B. Trickey.,  J. Chem. Theory Comput. 15, 303-310 (2019)
  `10.1021/acs.jctc.8b00998 <https://doi.org/10.1021/acs.jctc.8b00998>`_

  
  Mixing of the following functionals:
    gga_x_ncap (coefficient: 1.0)
    gga_c_p86 (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_xc_ncap", polarized, )
  def _gga_xc_ncap_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_xc_ncap.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _gga_xc_ncap_epsilon_xc.cam_alpha = p.cam_alpha
  _gga_xc_ncap_epsilon_xc.cam_beta = p.cam_beta
  _gga_xc_ncap_epsilon_xc.cam_omega = p.cam_omega
  _gga_xc_ncap_epsilon_xc.nlc_b = p.nlc_b
  _gga_xc_ncap_epsilon_xc.nlc_C = p.nlc_C

  return _gga_xc_ncap_epsilon_xc

def gga_x_lbm(
  polarized: bool = True,
) -> Callable:
  r"""
  P. R. T. Schipper, O. V. Gritsenko, S. J. A. van Gisbergen, and E. J. Baerends.,  J. Chem. Phys. 112, 1344 (2000)
  `10.1063/1.480688 <http://scitation.aip.org/content/aip/journal/jcp/112/3/10.1063/1.480688>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_x_lbm", polarized, )
  def _gga_x_lbm_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_lbm.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_lbm_epsilon_xc

def gga_x_ol2(
  polarized: bool = True,
  _aa: Optional[float] = None,
  _bb: Optional[float] = None,
  _cc: Optional[float] = None,
) -> Callable:
  r"""
  P. Fuentealba and O. Reyes.,  Chem. Phys. Lett. 232, 31 (1995)
  `10.1016/0009-2614(94)01321-L <http://www.sciencedirect.com/science/article/pii/000926149401321L>`_

  H. Ou-Yang and M. Levy.,  Int. J. Quantum Chem. 40, 379 (1991)
  `10.1002/qua.560400309 <http://onlinelibrary.wiley.com/doi/10.1002/qua.560400309/abstract>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _aa : Optional[float], default: 0.09564574034649151
    aa
  _bb : Optional[float], default: 0.09564574034649151
    bb
  _cc : Optional[float], default: 4.098833606342553
    cc
  """
  _aa = (_aa or 0.09564574034649151)
  _bb = (_bb or 0.09564574034649151)
  _cc = (_cc or 4.098833606342553)
  p = get_p("gga_x_ol2", polarized, _aa, _bb, _cc)
  def _gga_x_ol2_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_ol2.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_ol2_epsilon_xc

def gga_x_apbe(
  polarized: bool = True,
  _kappa: Optional[float] = None,
  _mu: Optional[float] = None,
) -> Callable:
  r"""
  L. A. Constantin, E. Fabiano, S. Laricchia, and F. Della Sala.,  Phys. Rev. Lett. 106, 186406 (2011)
  `10.1103/PhysRevLett.106.186406 <http://link.aps.org/doi/10.1103/PhysRevLett.106.186406>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _kappa : Optional[float], default: 0.804
    Asymptotic value of the enhancement function
  _mu : Optional[float], default: 0.26
    Coefficient of the 2nd order expansion
  """
  _kappa = (_kappa or 0.804)
  _mu = (_mu or 0.26)
  p = get_p("gga_x_apbe", polarized, _kappa, _mu)
  def _gga_x_apbe_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_apbe.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_apbe_epsilon_xc

def gga_k_apbe(
  polarized: bool = True,
) -> Callable:
  r"""
  L. A. Constantin, E. Fabiano, S. Laricchia, and F. Della Sala.,  Phys. Rev. Lett. 106, 186406 (2011)
  `10.1103/PhysRevLett.106.186406 <http://link.aps.org/doi/10.1103/PhysRevLett.106.186406>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_k_apbe", polarized, )
  def _gga_k_apbe_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_k_apbe.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_k_apbe_epsilon_xc

def gga_c_apbe(
  polarized: bool = True,
  _beta: Optional[float] = None,
  _gamma: Optional[float] = None,
  _B: Optional[float] = None,
) -> Callable:
  r"""
  L. A. Constantin, E. Fabiano, S. Laricchia, and F. Della Sala.,  Phys. Rev. Lett. 106, 186406 (2011)
  `10.1103/PhysRevLett.106.186406 <http://link.aps.org/doi/10.1103/PhysRevLett.106.186406>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _beta : Optional[float], default: 0.07903052324102346
    beta constant
  _gamma : Optional[float], default: 0.031090690869654894
    (1 - ln(2))/Pi^2 in the PBE
  _B : Optional[float], default: 1.0
    Multiplies the A t^2 term. Used in the SPBE functional
  """
  _beta = (_beta or 0.07903052324102346)
  _gamma = (_gamma or 0.031090690869654894)
  _B = (_B or 1.0)
  p = get_p("gga_c_apbe", polarized, _beta, _gamma, _B)
  def _gga_c_apbe_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_c_apbe.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_c_apbe_epsilon_xc

def gga_k_tw1(
  polarized: bool = True,
) -> Callable:
  r"""
  F. Tran and T. A. Wesołowski.,  Int. J. Quantum Chem. 89, 441 (2002)
  `10.1002/qua.10306 <http://onlinelibrary.wiley.com/doi/10.1002/qua.10306/abstract>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_k_tw1", polarized, )
  def _gga_k_tw1_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_k_tw1.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_k_tw1_epsilon_xc

def gga_k_tw2(
  polarized: bool = True,
) -> Callable:
  r"""
  F. Tran and T. A. Wesołowski.,  Int. J. Quantum Chem. 89, 441 (2002)
  `10.1002/qua.10306 <http://onlinelibrary.wiley.com/doi/10.1002/qua.10306/abstract>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_k_tw2", polarized, )
  def _gga_k_tw2_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_k_tw2.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_k_tw2_epsilon_xc

def gga_k_tw3(
  polarized: bool = True,
) -> Callable:
  r"""
  F. Tran and T. A. Wesołowski.,  Int. J. Quantum Chem. 89, 441 (2002)
  `10.1002/qua.10306 <http://onlinelibrary.wiley.com/doi/10.1002/qua.10306/abstract>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_k_tw3", polarized, )
  def _gga_k_tw3_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_k_tw3.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_k_tw3_epsilon_xc

def gga_k_tw4(
  polarized: bool = True,
) -> Callable:
  r"""
  F. Tran and T. A. Wesołowski.,  Int. J. Quantum Chem. 89, 441 (2002)
  `10.1002/qua.10306 <http://onlinelibrary.wiley.com/doi/10.1002/qua.10306/abstract>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_k_tw4", polarized, )
  def _gga_k_tw4_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_k_tw4.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_k_tw4_epsilon_xc

def gga_x_htbs(
  polarized: bool = True,
) -> Callable:
  r"""
  P. Haas, F. Tran, P. Blaha, and K. Schwarz.,  Phys. Rev. B 83, 205117 (2011)
  `10.1103/PhysRevB.83.205117 <http://link.aps.org/doi/10.1103/PhysRevB.83.205117>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_x_htbs", polarized, )
  def _gga_x_htbs_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_htbs.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_htbs_epsilon_xc

def gga_x_airy(
  polarized: bool = True,
) -> Callable:
  r"""
  L. A. Constantin, A. Ruzsinszky, and J. P. Perdew.,  Phys. Rev. B 80, 035125 (2009)
  `10.1103/PhysRevB.80.035125 <http://link.aps.org/doi/10.1103/PhysRevB.80.035125>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_x_airy", polarized, )
  def _gga_x_airy_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_airy.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_airy_epsilon_xc

def gga_x_lag(
  polarized: bool = True,
) -> Callable:
  r"""
  L. Vitos, B. Johansson, J. Kollár, and H. L. Skriver.,  Phys. Rev. B 62, 10046 (2000)
  `10.1103/PhysRevB.62.10046 <http://link.aps.org/doi/10.1103/PhysRevB.62.10046>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_x_lag", polarized, )
  def _gga_x_lag_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_lag.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_lag_epsilon_xc

def gga_xc_mohlyp(
  polarized: bool = True,
) -> Callable:
  r"""
  N. E. Schultz, Y. Zhao, and D. G. Truhlar.,  J. Phys. Chem. A 109, 11127 (2005)
  `10.1021/jp0539223 <http://pubs.acs.org/doi/abs/10.1021/jp0539223>`_

  
  Mixing of the following functionals:
    gga_x_optx (coefficient: 1.0)
    lda_c_vwn (coefficient: 0.5)
    gga_c_lyp (coefficient: 0.5)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_xc_mohlyp", polarized, )
  def _gga_xc_mohlyp_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_xc_mohlyp.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _gga_xc_mohlyp_epsilon_xc.cam_alpha = p.cam_alpha
  _gga_xc_mohlyp_epsilon_xc.cam_beta = p.cam_beta
  _gga_xc_mohlyp_epsilon_xc.cam_omega = p.cam_omega
  _gga_xc_mohlyp_epsilon_xc.nlc_b = p.nlc_b
  _gga_xc_mohlyp_epsilon_xc.nlc_C = p.nlc_C

  return _gga_xc_mohlyp_epsilon_xc

def gga_xc_mohlyp2(
  polarized: bool = True,
) -> Callable:
  r"""
  J. Zheng, Y. Zhao, and D. G. Truhlar.,  J. Chem. Theory Comput. 5, 808 (2009)
  `10.1021/ct800568m <http://pubs.acs.org/doi/abs/10.1021/ct800568m>`_

  
  Mixing of the following functionals:
    gga_x_optx (coefficient: 1.0)
    gga_c_lyp (coefficient: 0.5)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_xc_mohlyp2", polarized, )
  def _gga_xc_mohlyp2_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_xc_mohlyp2.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _gga_xc_mohlyp2_epsilon_xc.cam_alpha = p.cam_alpha
  _gga_xc_mohlyp2_epsilon_xc.cam_beta = p.cam_beta
  _gga_xc_mohlyp2_epsilon_xc.cam_omega = p.cam_omega
  _gga_xc_mohlyp2_epsilon_xc.nlc_b = p.nlc_b
  _gga_xc_mohlyp2_epsilon_xc.nlc_C = p.nlc_C

  return _gga_xc_mohlyp2_epsilon_xc

def gga_xc_th_fl(
  polarized: bool = True,
  _w_0_: Optional[float] = None,
  _w_1_: Optional[float] = None,
  _w_2_: Optional[float] = None,
  _w_3_: Optional[float] = None,
  _w_4_: Optional[float] = None,
  _w_5_: Optional[float] = None,
  _w_6_: Optional[float] = None,
  _w_7_: Optional[float] = None,
  _w_8_: Optional[float] = None,
  _w_9_: Optional[float] = None,
  _w_10_: Optional[float] = None,
  _w_11_: Optional[float] = None,
  _w_12_: Optional[float] = None,
  _w_13_: Optional[float] = None,
  _w_14_: Optional[float] = None,
  _w_15_: Optional[float] = None,
  _w_16_: Optional[float] = None,
  _w_17_: Optional[float] = None,
  _w_18_: Optional[float] = None,
  _w_19_: Optional[float] = None,
  _w_20_: Optional[float] = None,
) -> Callable:
  r"""
  D. J. Tozer, N. C. Handy, and W. H. Green.,  Chem. Phys. Lett. 273, 183 (1997)
  `10.1016/S0009-2614(97)00586-1 <http://www.sciencedirect.com/science/article/pii/S0009261497005861>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _w_0_ : Optional[float], default: -1.06141
    w[0]
  _w_1_ : Optional[float], default: 0.898203
    w[1]
  _w_2_ : Optional[float], default: -1.34439
    w[2]
  _w_3_ : Optional[float], default: 0.302369
    w[3]
  _w_4_ : Optional[float], default: 0.0
    w[4]
  _w_5_ : Optional[float], default: 0.0
    w[5]
  _w_6_ : Optional[float], default: 0.0
    w[6]
  _w_7_ : Optional[float], default: 0.0
    w[7]
  _w_8_ : Optional[float], default: 0.0
    w[8]
  _w_9_ : Optional[float], default: 0.0
    w[9]
  _w_10_ : Optional[float], default: 0.0
    w[10]
  _w_11_ : Optional[float], default: 0.0
    w[11]
  _w_12_ : Optional[float], default: 0.0
    w[12]
  _w_13_ : Optional[float], default: 0.0
    w[13]
  _w_14_ : Optional[float], default: 0.0
    w[14]
  _w_15_ : Optional[float], default: 0.0
    w[15]
  _w_16_ : Optional[float], default: 0.0
    w[16]
  _w_17_ : Optional[float], default: 0.0
    w[17]
  _w_18_ : Optional[float], default: 0.0
    w[18]
  _w_19_ : Optional[float], default: 0.0
    w[19]
  _w_20_ : Optional[float], default: 0.0
    w[20]
  """
  _w_0_ = (_w_0_ or -1.06141)
  _w_1_ = (_w_1_ or 0.898203)
  _w_2_ = (_w_2_ or -1.34439)
  _w_3_ = (_w_3_ or 0.302369)
  _w_4_ = (_w_4_ or 0.0)
  _w_5_ = (_w_5_ or 0.0)
  _w_6_ = (_w_6_ or 0.0)
  _w_7_ = (_w_7_ or 0.0)
  _w_8_ = (_w_8_ or 0.0)
  _w_9_ = (_w_9_ or 0.0)
  _w_10_ = (_w_10_ or 0.0)
  _w_11_ = (_w_11_ or 0.0)
  _w_12_ = (_w_12_ or 0.0)
  _w_13_ = (_w_13_ or 0.0)
  _w_14_ = (_w_14_ or 0.0)
  _w_15_ = (_w_15_ or 0.0)
  _w_16_ = (_w_16_ or 0.0)
  _w_17_ = (_w_17_ or 0.0)
  _w_18_ = (_w_18_ or 0.0)
  _w_19_ = (_w_19_ or 0.0)
  _w_20_ = (_w_20_ or 0.0)
  p = get_p("gga_xc_th_fl", polarized, _w_0_, _w_1_, _w_2_, _w_3_, _w_4_, _w_5_, _w_6_, _w_7_, _w_8_, _w_9_, _w_10_, _w_11_, _w_12_, _w_13_, _w_14_, _w_15_, _w_16_, _w_17_, _w_18_, _w_19_, _w_20_)
  def _gga_xc_th_fl_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_xc_th_fl.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_xc_th_fl_epsilon_xc

def gga_xc_th_fc(
  polarized: bool = True,
  _w_0_: Optional[float] = None,
  _w_1_: Optional[float] = None,
  _w_2_: Optional[float] = None,
  _w_3_: Optional[float] = None,
  _w_4_: Optional[float] = None,
  _w_5_: Optional[float] = None,
  _w_6_: Optional[float] = None,
  _w_7_: Optional[float] = None,
  _w_8_: Optional[float] = None,
  _w_9_: Optional[float] = None,
  _w_10_: Optional[float] = None,
  _w_11_: Optional[float] = None,
  _w_12_: Optional[float] = None,
  _w_13_: Optional[float] = None,
  _w_14_: Optional[float] = None,
  _w_15_: Optional[float] = None,
  _w_16_: Optional[float] = None,
  _w_17_: Optional[float] = None,
  _w_18_: Optional[float] = None,
  _w_19_: Optional[float] = None,
  _w_20_: Optional[float] = None,
) -> Callable:
  r"""
  D. J. Tozer, N. C. Handy, and W. H. Green.,  Chem. Phys. Lett. 273, 183 (1997)
  `10.1016/S0009-2614(97)00586-1 <http://www.sciencedirect.com/science/article/pii/S0009261497005861>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _w_0_ : Optional[float], default: -0.864448
    w[0]
  _w_1_ : Optional[float], default: 0.56513
    w[1]
  _w_2_ : Optional[float], default: -1.27306
    w[2]
  _w_3_ : Optional[float], default: 0.309681
    w[3]
  _w_4_ : Optional[float], default: -0.287658
    w[4]
  _w_5_ : Optional[float], default: 0.588767
    w[5]
  _w_6_ : Optional[float], default: -0.2527
    w[6]
  _w_7_ : Optional[float], default: 0.0223563
    w[7]
  _w_8_ : Optional[float], default: 0.0140131
    w[8]
  _w_9_ : Optional[float], default: -0.0826608
    w[9]
  _w_10_ : Optional[float], default: 0.055608
    w[10]
  _w_11_ : Optional[float], default: -0.00936227
    w[11]
  _w_12_ : Optional[float], default: 0.0
    w[12]
  _w_13_ : Optional[float], default: 0.0
    w[13]
  _w_14_ : Optional[float], default: 0.0
    w[14]
  _w_15_ : Optional[float], default: 0.0
    w[15]
  _w_16_ : Optional[float], default: 0.0
    w[16]
  _w_17_ : Optional[float], default: 0.0
    w[17]
  _w_18_ : Optional[float], default: 0.0
    w[18]
  _w_19_ : Optional[float], default: 0.0
    w[19]
  _w_20_ : Optional[float], default: 0.0
    w[20]
  """
  _w_0_ = (_w_0_ or -0.864448)
  _w_1_ = (_w_1_ or 0.56513)
  _w_2_ = (_w_2_ or -1.27306)
  _w_3_ = (_w_3_ or 0.309681)
  _w_4_ = (_w_4_ or -0.287658)
  _w_5_ = (_w_5_ or 0.588767)
  _w_6_ = (_w_6_ or -0.2527)
  _w_7_ = (_w_7_ or 0.0223563)
  _w_8_ = (_w_8_ or 0.0140131)
  _w_9_ = (_w_9_ or -0.0826608)
  _w_10_ = (_w_10_ or 0.055608)
  _w_11_ = (_w_11_ or -0.00936227)
  _w_12_ = (_w_12_ or 0.0)
  _w_13_ = (_w_13_ or 0.0)
  _w_14_ = (_w_14_ or 0.0)
  _w_15_ = (_w_15_ or 0.0)
  _w_16_ = (_w_16_ or 0.0)
  _w_17_ = (_w_17_ or 0.0)
  _w_18_ = (_w_18_ or 0.0)
  _w_19_ = (_w_19_ or 0.0)
  _w_20_ = (_w_20_ or 0.0)
  p = get_p("gga_xc_th_fc", polarized, _w_0_, _w_1_, _w_2_, _w_3_, _w_4_, _w_5_, _w_6_, _w_7_, _w_8_, _w_9_, _w_10_, _w_11_, _w_12_, _w_13_, _w_14_, _w_15_, _w_16_, _w_17_, _w_18_, _w_19_, _w_20_)
  def _gga_xc_th_fc_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_xc_th_fc.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_xc_th_fc_epsilon_xc

def gga_xc_th_fcfo(
  polarized: bool = True,
  _w_0_: Optional[float] = None,
  _w_1_: Optional[float] = None,
  _w_2_: Optional[float] = None,
  _w_3_: Optional[float] = None,
  _w_4_: Optional[float] = None,
  _w_5_: Optional[float] = None,
  _w_6_: Optional[float] = None,
  _w_7_: Optional[float] = None,
  _w_8_: Optional[float] = None,
  _w_9_: Optional[float] = None,
  _w_10_: Optional[float] = None,
  _w_11_: Optional[float] = None,
  _w_12_: Optional[float] = None,
  _w_13_: Optional[float] = None,
  _w_14_: Optional[float] = None,
  _w_15_: Optional[float] = None,
  _w_16_: Optional[float] = None,
  _w_17_: Optional[float] = None,
  _w_18_: Optional[float] = None,
  _w_19_: Optional[float] = None,
  _w_20_: Optional[float] = None,
) -> Callable:
  r"""
  D. J. Tozer, N. C. Handy, and W. H. Green.,  Chem. Phys. Lett. 273, 183 (1997)
  `10.1016/S0009-2614(97)00586-1 <http://www.sciencedirect.com/science/article/pii/S0009261497005861>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _w_0_ : Optional[float], default: -0.864448
    w[0]
  _w_1_ : Optional[float], default: 0.56513
    w[1]
  _w_2_ : Optional[float], default: -1.27306
    w[2]
  _w_3_ : Optional[float], default: 0.309681
    w[3]
  _w_4_ : Optional[float], default: -0.287658
    w[4]
  _w_5_ : Optional[float], default: 0.588767
    w[5]
  _w_6_ : Optional[float], default: -0.2527
    w[6]
  _w_7_ : Optional[float], default: 0.0223563
    w[7]
  _w_8_ : Optional[float], default: 0.0140131
    w[8]
  _w_9_ : Optional[float], default: -0.0826608
    w[9]
  _w_10_ : Optional[float], default: 0.055608
    w[10]
  _w_11_ : Optional[float], default: -0.00936227
    w[11]
  _w_12_ : Optional[float], default: -0.00677146
    w[12]
  _w_13_ : Optional[float], default: 0.0515199
    w[13]
  _w_14_ : Optional[float], default: -0.0874213
    w[14]
  _w_15_ : Optional[float], default: 0.0423827
    w[15]
  _w_16_ : Optional[float], default: 0.43194
    w[16]
  _w_17_ : Optional[float], default: -0.691153
    w[17]
  _w_18_ : Optional[float], default: -0.637866
    w[18]
  _w_19_ : Optional[float], default: 1.07565
    w[19]
  _w_20_ : Optional[float], default: 0.0
    w[20]
  """
  _w_0_ = (_w_0_ or -0.864448)
  _w_1_ = (_w_1_ or 0.56513)
  _w_2_ = (_w_2_ or -1.27306)
  _w_3_ = (_w_3_ or 0.309681)
  _w_4_ = (_w_4_ or -0.287658)
  _w_5_ = (_w_5_ or 0.588767)
  _w_6_ = (_w_6_ or -0.2527)
  _w_7_ = (_w_7_ or 0.0223563)
  _w_8_ = (_w_8_ or 0.0140131)
  _w_9_ = (_w_9_ or -0.0826608)
  _w_10_ = (_w_10_ or 0.055608)
  _w_11_ = (_w_11_ or -0.00936227)
  _w_12_ = (_w_12_ or -0.00677146)
  _w_13_ = (_w_13_ or 0.0515199)
  _w_14_ = (_w_14_ or -0.0874213)
  _w_15_ = (_w_15_ or 0.0423827)
  _w_16_ = (_w_16_ or 0.43194)
  _w_17_ = (_w_17_ or -0.691153)
  _w_18_ = (_w_18_ or -0.637866)
  _w_19_ = (_w_19_ or 1.07565)
  _w_20_ = (_w_20_ or 0.0)
  p = get_p("gga_xc_th_fcfo", polarized, _w_0_, _w_1_, _w_2_, _w_3_, _w_4_, _w_5_, _w_6_, _w_7_, _w_8_, _w_9_, _w_10_, _w_11_, _w_12_, _w_13_, _w_14_, _w_15_, _w_16_, _w_17_, _w_18_, _w_19_, _w_20_)
  def _gga_xc_th_fcfo_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_xc_th_fcfo.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_xc_th_fcfo_epsilon_xc

def gga_xc_th_fco(
  polarized: bool = True,
  _w_0_: Optional[float] = None,
  _w_1_: Optional[float] = None,
  _w_2_: Optional[float] = None,
  _w_3_: Optional[float] = None,
  _w_4_: Optional[float] = None,
  _w_5_: Optional[float] = None,
  _w_6_: Optional[float] = None,
  _w_7_: Optional[float] = None,
  _w_8_: Optional[float] = None,
  _w_9_: Optional[float] = None,
  _w_10_: Optional[float] = None,
  _w_11_: Optional[float] = None,
  _w_12_: Optional[float] = None,
  _w_13_: Optional[float] = None,
  _w_14_: Optional[float] = None,
  _w_15_: Optional[float] = None,
  _w_16_: Optional[float] = None,
  _w_17_: Optional[float] = None,
  _w_18_: Optional[float] = None,
  _w_19_: Optional[float] = None,
  _w_20_: Optional[float] = None,
) -> Callable:
  r"""
  D. J. Tozer, N. C. Handy, and W. H. Green.,  Chem. Phys. Lett. 273, 183 (1997)
  `10.1016/S0009-2614(97)00586-1 <http://www.sciencedirect.com/science/article/pii/S0009261497005861>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _w_0_ : Optional[float], default: -0.962998
    w[0]
  _w_1_ : Optional[float], default: 0.860233
    w[1]
  _w_2_ : Optional[float], default: -1.54092
    w[2]
  _w_3_ : Optional[float], default: 0.381602
    w[3]
  _w_4_ : Optional[float], default: -0.210208
    w[4]
  _w_5_ : Optional[float], default: 0.391496
    w[5]
  _w_6_ : Optional[float], default: -0.10766
    w[6]
  _w_7_ : Optional[float], default: -0.0105324
    w[7]
  _w_8_ : Optional[float], default: 0.00837384
    w[8]
  _w_9_ : Optional[float], default: -0.0617859
    w[9]
  _w_10_ : Optional[float], default: 0.0383072
    w[10]
  _w_11_ : Optional[float], default: -0.00526905
    w[11]
  _w_12_ : Optional[float], default: -0.00381514
    w[12]
  _w_13_ : Optional[float], default: 0.0321541
    w[13]
  _w_14_ : Optional[float], default: -0.056828
    w[14]
  _w_15_ : Optional[float], default: 0.0288585
    w[15]
  _w_16_ : Optional[float], default: 0.368326
    w[16]
  _w_17_ : Optional[float], default: -0.328799
    w[17]
  _w_18_ : Optional[float], default: -1.22595
    w[18]
  _w_19_ : Optional[float], default: 1.36412
    w[19]
  _w_20_ : Optional[float], default: 0.0
    w[20]
  """
  _w_0_ = (_w_0_ or -0.962998)
  _w_1_ = (_w_1_ or 0.860233)
  _w_2_ = (_w_2_ or -1.54092)
  _w_3_ = (_w_3_ or 0.381602)
  _w_4_ = (_w_4_ or -0.210208)
  _w_5_ = (_w_5_ or 0.391496)
  _w_6_ = (_w_6_ or -0.10766)
  _w_7_ = (_w_7_ or -0.0105324)
  _w_8_ = (_w_8_ or 0.00837384)
  _w_9_ = (_w_9_ or -0.0617859)
  _w_10_ = (_w_10_ or 0.0383072)
  _w_11_ = (_w_11_ or -0.00526905)
  _w_12_ = (_w_12_ or -0.00381514)
  _w_13_ = (_w_13_ or 0.0321541)
  _w_14_ = (_w_14_ or -0.056828)
  _w_15_ = (_w_15_ or 0.0288585)
  _w_16_ = (_w_16_ or 0.368326)
  _w_17_ = (_w_17_ or -0.328799)
  _w_18_ = (_w_18_ or -1.22595)
  _w_19_ = (_w_19_ or 1.36412)
  _w_20_ = (_w_20_ or 0.0)
  p = get_p("gga_xc_th_fco", polarized, _w_0_, _w_1_, _w_2_, _w_3_, _w_4_, _w_5_, _w_6_, _w_7_, _w_8_, _w_9_, _w_10_, _w_11_, _w_12_, _w_13_, _w_14_, _w_15_, _w_16_, _w_17_, _w_18_, _w_19_, _w_20_)
  def _gga_xc_th_fco_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_xc_th_fco.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_xc_th_fco_epsilon_xc

def gga_c_optc(
  polarized: bool = True,
  _c1: Optional[float] = None,
  _c2: Optional[float] = None,
) -> Callable:
  r"""
  A. J. Cohen and N. C. Handy.,  Mol. Phys. 99, 607 (2001)
  `10.1080/00268970010023435 <http://www.tandfonline.com/doi/abs/10.1080/00268970010023435>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _c1 : Optional[float], default: 1.1015
    c1
  _c2 : Optional[float], default: 0.6625
    c2
  """
  _c1 = (_c1 or 1.1015)
  _c2 = (_c2 or 0.6625)
  p = get_p("gga_c_optc", polarized, _c1, _c2)
  def _gga_c_optc_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_c_optc.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_c_optc_epsilon_xc

def mgga_x_lta(
  polarized: bool = True,
  _ltafrac: Optional[float] = None,
) -> Callable:
  r"""
  M. Ernzerhof and G. E. Scuseria.,  J. Chem. Phys. 111, 911 (1999)
  `10.1063/1.479374 <http://scitation.aip.org/content/aip/journal/jcp/111/3/10.1063/1.479374>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _ltafrac : Optional[float], default: 1.0
    Fraction of LTA density
  """
  _ltafrac = (_ltafrac or 1.0)
  p = get_p("mgga_x_lta", polarized, _ltafrac)
  def _mgga_x_lta_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_lta.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_lta_epsilon_xc

def mgga_x_tpss(
  polarized: bool = True,
  _b: Optional[float] = None,
  _c: Optional[float] = None,
  _e: Optional[float] = None,
  _kappa: Optional[float] = None,
  _mu: Optional[float] = None,
  _BLOC_a: Optional[float] = None,
  _BLOC_b: Optional[float] = None,
) -> Callable:
  r"""
  J. Tao, J. P. Perdew, V. N. Staroverov, and G. E. Scuseria.,  Phys. Rev. Lett. 91, 146401 (2003)
  `10.1103/PhysRevLett.91.146401 <http://link.aps.org/doi/10.1103/PhysRevLett.91.146401>`_

  J. P. Perdew, J. Tao, V. N. Staroverov, and G. E. Scuseria.,  J. Chem. Phys. 120, 6898 (2004)
  `10.1063/1.1665298 <http://scitation.aip.org/content/aip/journal/jcp/120/15/10.1063/1.1665298>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _b : Optional[float], default: 0.4
    b
  _c : Optional[float], default: 1.59096
    c
  _e : Optional[float], default: 1.537
    e
  _kappa : Optional[float], default: 0.804
    Asymptotic value of the enhancement function
  _mu : Optional[float], default: 0.21951
    Coefficient of the 2nd order expansion
  _BLOC_a : Optional[float], default: 2.0
    BLOC_a
  _BLOC_b : Optional[float], default: 0.0
    BLOC_b
  """
  _b = (_b or 0.4)
  _c = (_c or 1.59096)
  _e = (_e or 1.537)
  _kappa = (_kappa or 0.804)
  _mu = (_mu or 0.21951)
  _BLOC_a = (_BLOC_a or 2.0)
  _BLOC_b = (_BLOC_b or 0.0)
  p = get_p("mgga_x_tpss", polarized, _b, _c, _e, _kappa, _mu, _BLOC_a, _BLOC_b)
  def _mgga_x_tpss_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_tpss.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_tpss_epsilon_xc

def mgga_x_m06_l(
  polarized: bool = True,
  _a0: Optional[float] = None,
  _a1: Optional[float] = None,
  _a2: Optional[float] = None,
  _a3: Optional[float] = None,
  _a4: Optional[float] = None,
  _a5: Optional[float] = None,
  _a6: Optional[float] = None,
  _a7: Optional[float] = None,
  _a8: Optional[float] = None,
  _a9: Optional[float] = None,
  _a10: Optional[float] = None,
  _a11: Optional[float] = None,
  _d0: Optional[float] = None,
  _d1: Optional[float] = None,
  _d2: Optional[float] = None,
  _d3: Optional[float] = None,
  _d4: Optional[float] = None,
  _d5: Optional[float] = None,
) -> Callable:
  r"""
  Y. Zhao and D. G. Truhlar.,  J. Chem. Phys. 125, 194101 (2006)
  `10.1063/1.2370993 <http://scitation.aip.org/content/aip/journal/jcp/125/19/10.1063/1.2370993>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a0 : Optional[float], default: 0.3987756
    _a0 parameter
  _a1 : Optional[float], default: 0.2548219
    _a1 parameter
  _a2 : Optional[float], default: 0.3923994
    _a2 parameter
  _a3 : Optional[float], default: -2.103655
    _a3 parameter
  _a4 : Optional[float], default: -6.302147
    _a4 parameter
  _a5 : Optional[float], default: 10.97615
    _a5 parameter
  _a6 : Optional[float], default: 30.97273
    _a6 parameter
  _a7 : Optional[float], default: -23.18489
    _a7 parameter
  _a8 : Optional[float], default: -56.7348
    _a8 parameter
  _a9 : Optional[float], default: 21.60364
    _a9 parameter
  _a10 : Optional[float], default: 34.21814
    _a10 parameter
  _a11 : Optional[float], default: -9.049762
    _a11 parameter
  _d0 : Optional[float], default: 0.6012244
    _d0 parameter
  _d1 : Optional[float], default: 0.004748822
    _d1 parameter
  _d2 : Optional[float], default: -0.008635108
    _d2 parameter
  _d3 : Optional[float], default: -9.308062e-06
    _d3 parameter
  _d4 : Optional[float], default: 4.482811e-05
    _d4 parameter
  _d5 : Optional[float], default: 0.0
    _d5 parameter
  """
  _a0 = (_a0 or 0.3987756)
  _a1 = (_a1 or 0.2548219)
  _a2 = (_a2 or 0.3923994)
  _a3 = (_a3 or -2.103655)
  _a4 = (_a4 or -6.302147)
  _a5 = (_a5 or 10.97615)
  _a6 = (_a6 or 30.97273)
  _a7 = (_a7 or -23.18489)
  _a8 = (_a8 or -56.7348)
  _a9 = (_a9 or 21.60364)
  _a10 = (_a10 or 34.21814)
  _a11 = (_a11 or -9.049762)
  _d0 = (_d0 or 0.6012244)
  _d1 = (_d1 or 0.004748822)
  _d2 = (_d2 or -0.008635108)
  _d3 = (_d3 or -9.308062e-06)
  _d4 = (_d4 or 4.482811e-05)
  _d5 = (_d5 or 0.0)
  p = get_p("mgga_x_m06_l", polarized, _a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8, _a9, _a10, _a11, _d0, _d1, _d2, _d3, _d4, _d5)
  def _mgga_x_m06_l_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_m06_l.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_m06_l_epsilon_xc

def mgga_x_gvt4(
  polarized: bool = True,
) -> Callable:
  r"""
  T. V. Voorhis and G. E. Scuseria.,  J. Chem. Phys. 109, 400 (1998)
  `10.1063/1.476577 <http://scitation.aip.org/content/aip/journal/jcp/109/2/10.1063/1.476577>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("mgga_x_gvt4", polarized, )
  def _mgga_x_gvt4_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_gvt4.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_gvt4_epsilon_xc

def mgga_x_tau_hcth(
  polarized: bool = True,
  _cxl0: Optional[float] = None,
  _cxl1: Optional[float] = None,
  _cxl2: Optional[float] = None,
  _cxl3: Optional[float] = None,
  _cxnl0: Optional[float] = None,
  _cxnl1: Optional[float] = None,
  _cxnl2: Optional[float] = None,
  _cxnl3: Optional[float] = None,
) -> Callable:
  r"""
  A. D. Boese and N. C. Handy.,  J. Chem. Phys. 116, 9559 (2002)
  `10.1063/1.1476309 <http://scitation.aip.org/content/aip/journal/jcp/116/22/10.1063/1.1476309>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _cxl0 : Optional[float], default: 1.10734
    Local exchange, u^0 coefficient
  _cxl1 : Optional[float], default: -1.0534
    Local exchange, u^1 coefficient
  _cxl2 : Optional[float], default: 6.3491
    Local exchange, u^2 coefficient
  _cxl3 : Optional[float], default: -2.5531
    Local exchange, u^3 coefficient
  _cxnl0 : Optional[float], default: 0.0011
    Non-local exchange, u^0 coefficient
  _cxnl1 : Optional[float], default: -0.3041
    Non-local exchange, u^1 coefficient
  _cxnl2 : Optional[float], default: 6.9543
    Non-local exchange, u^2 coefficient
  _cxnl3 : Optional[float], default: -0.7235
    Non-local exchange, u^3 coefficient
  """
  _cxl0 = (_cxl0 or 1.10734)
  _cxl1 = (_cxl1 or -1.0534)
  _cxl2 = (_cxl2 or 6.3491)
  _cxl3 = (_cxl3 or -2.5531)
  _cxnl0 = (_cxnl0 or 0.0011)
  _cxnl1 = (_cxnl1 or -0.3041)
  _cxnl2 = (_cxnl2 or 6.9543)
  _cxnl3 = (_cxnl3 or -0.7235)
  p = get_p("mgga_x_tau_hcth", polarized, _cxl0, _cxl1, _cxl2, _cxl3, _cxnl0, _cxnl1, _cxnl2, _cxnl3)
  def _mgga_x_tau_hcth_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_tau_hcth.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_tau_hcth_epsilon_xc

def mgga_x_br89(
  polarized: bool = True,
  _gamma: Optional[float] = None,
  _at: Optional[float] = None,
) -> Callable:
  r"""
  A. D. Becke and M. R. Roussel.,  Phys. Rev. A 39, 3761 (1989)
  `10.1103/PhysRevA.39.3761 <http://link.aps.org/doi/10.1103/PhysRevA.39.3761>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _gamma : Optional[float], default: 0.8
    gamma
  _at : Optional[float], default: 0.0
    at
  """
  _gamma = (_gamma or 0.8)
  _at = (_at or 0.0)
  p = get_p("mgga_x_br89", polarized, _gamma, _at)
  def _mgga_x_br89_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_br89.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_br89_epsilon_xc

def mgga_x_bj06(
  polarized: bool = True,
  c: Optional[float] = None,
  _alpha: Optional[float] = None,
) -> Callable:
  r"""
  A. D. Becke and E. R. Johnson.,  J. Chem. Phys. 124, 221101 (2006)
  `10.1063/1.2213970 <http://scitation.aip.org/content/aip/journal/jcp/124/22/10.1063/1.2213970>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  c : Optional[float], default: 1.0
    This parameter involves an average over the unit cell and must be calculated by the calling program.
  _alpha : Optional[float], default: 0.0
    alpha = 0 for BJ06 and 1 for RPP
  """
  c = (c or 1.0)
  _alpha = (_alpha or 0.0)
  p = get_p("mgga_x_bj06", polarized, c, _alpha)
  def _mgga_x_bj06_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_bj06.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_bj06_epsilon_xc

def mgga_x_tb09(
  polarized: bool = True,
  c: Optional[float] = None,
  _alpha: Optional[float] = None,
) -> Callable:
  r"""
  F. Tran and P. Blaha.,  Phys. Rev. Lett. 102, 226401 (2009)
  `10.1103/PhysRevLett.102.226401 <http://link.aps.org/doi/10.1103/PhysRevLett.102.226401>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  c : Optional[float], default: 1.0
    This parameter involves an average over the unit cell and must be calculated by the calling program.
  _alpha : Optional[float], default: 0.0
    alpha = 0 for BJ06 and 1 for RPP
  """
  c = (c or 1.0)
  _alpha = (_alpha or 0.0)
  p = get_p("mgga_x_tb09", polarized, c, _alpha)
  def _mgga_x_tb09_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_tb09.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_tb09_epsilon_xc

def mgga_x_rpp09(
  polarized: bool = True,
  c: Optional[float] = None,
  _alpha: Optional[float] = None,
) -> Callable:
  r"""
  E. Räsänen, S. Pittalis, and C. R. Proetto.,  J. Chem. Phys. 132, 044112 (2010)
  `10.1063/1.3300063 <http://scitation.aip.org/content/aip/journal/jcp/132/4/10.1063/1.3300063>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  c : Optional[float], default: 1.0
    This parameter involves an average over the unit cell and must be calculated by the calling program.
  _alpha : Optional[float], default: 1.0
    alpha = 0 for BJ06 and 1 for RPP
  """
  c = (c or 1.0)
  _alpha = (_alpha or 1.0)
  p = get_p("mgga_x_rpp09", polarized, c, _alpha)
  def _mgga_x_rpp09_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_rpp09.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_rpp09_epsilon_xc

def mgga_x_2d_prhg07(
  polarized: bool = True,
) -> Callable:
  r"""
  S. Pittalis, E. Räsänen, N. Helbig, and E. K. U. Gross.,  Phys. Rev. B 76, 235314 (2007)
  `10.1103/PhysRevB.76.235314 <http://link.aps.org/doi/10.1103/PhysRevB.76.235314>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("mgga_x_2d_prhg07", polarized, )
  def _mgga_x_2d_prhg07_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_2d_prhg07.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_2d_prhg07_epsilon_xc

def mgga_x_2d_prhg07_prp10(
  polarized: bool = True,
) -> Callable:
  r"""
  S. Pittalis, E. Räsänen, N. Helbig, and E. K. U. Gross.,  Phys. Rev. B 76, 235314 (2007)
  `10.1103/PhysRevB.76.235314 <http://link.aps.org/doi/10.1103/PhysRevB.76.235314>`_

  S. Pittalis, E. Räsänen, and C. R. Proetto.,  Phys. Rev. B 81, 115108 (2010)
  `10.1103/PhysRevB.81.115108 <http://link.aps.org/doi/10.1103/PhysRevB.81.115108>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("mgga_x_2d_prhg07_prp10", polarized, )
  def _mgga_x_2d_prhg07_prp10_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_2d_prhg07_prp10.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_2d_prhg07_prp10_epsilon_xc

def mgga_x_revtpss(
  polarized: bool = True,
  _b: Optional[float] = None,
  _c: Optional[float] = None,
  _e: Optional[float] = None,
  _kappa: Optional[float] = None,
  _mu: Optional[float] = None,
  _BLOC_a: Optional[float] = None,
  _BLOC_b: Optional[float] = None,
) -> Callable:
  r"""
  J. P. Perdew, A. Ruzsinszky, G. I. Csonka, L. A. Constantin, and J. Sun.,  Phys. Rev. Lett. 103, 026403 (2009)
  `10.1103/PhysRevLett.103.026403 <http://link.aps.org/doi/10.1103/PhysRevLett.103.026403>`_

  J. P. Perdew, A. Ruzsinszky, G. I. Csonka, L. A. Constantin, and J. Sun.,  Phys. Rev. Lett. 106, 179902 (2011)
  `10.1103/PhysRevLett.106.179902 <http://link.aps.org/doi/10.1103/PhysRevLett.106.179902>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _b : Optional[float], default: 0.4
    b
  _c : Optional[float], default: 2.35203946
    c
  _e : Optional[float], default: 2.16769874
    e
  _kappa : Optional[float], default: 0.804
    Asymptotic value of the enhancement function
  _mu : Optional[float], default: 0.14
    Coefficient of the 2nd order expansion
  _BLOC_a : Optional[float], default: 3.0
    BLOC_a
  _BLOC_b : Optional[float], default: 0.0
    BLOC_b
  """
  _b = (_b or 0.4)
  _c = (_c or 2.35203946)
  _e = (_e or 2.16769874)
  _kappa = (_kappa or 0.804)
  _mu = (_mu or 0.14)
  _BLOC_a = (_BLOC_a or 3.0)
  _BLOC_b = (_BLOC_b or 0.0)
  p = get_p("mgga_x_revtpss", polarized, _b, _c, _e, _kappa, _mu, _BLOC_a, _BLOC_b)
  def _mgga_x_revtpss_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_revtpss.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_revtpss_epsilon_xc

def mgga_x_pkzb(
  polarized: bool = True,
) -> Callable:
  r"""
  J. P. Perdew, S. Kurth, A. Zupan, and P. Blaha.,  Phys. Rev. Lett. 82, 2544 (1999)
  `10.1103/PhysRevLett.82.2544 <http://link.aps.org/doi/10.1103/PhysRevLett.82.2544>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("mgga_x_pkzb", polarized, )
  def _mgga_x_pkzb_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_pkzb.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_pkzb_epsilon_xc

def mgga_x_br89_1(
  polarized: bool = True,
  _gamma: Optional[float] = None,
  _at: Optional[float] = None,
) -> Callable:
  r"""
  A. D. Becke and M. R. Roussel.,  Phys. Rev. A 39, 3761 (1989)
  `10.1103/PhysRevA.39.3761 <http://link.aps.org/doi/10.1103/PhysRevA.39.3761>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _gamma : Optional[float], default: 1.0
    gamma
  _at : Optional[float], default: 0.0
    at
  """
  _gamma = (_gamma or 1.0)
  _at = (_at or 0.0)
  p = get_p("mgga_x_br89_1", polarized, _gamma, _at)
  def _mgga_x_br89_1_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_br89_1.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_br89_1_epsilon_xc

def gga_x_ecmv92(
  polarized: bool = True,
  _a1: Optional[float] = None,
  _a2: Optional[float] = None,
  _a3: Optional[float] = None,
  _b1: Optional[float] = None,
  _b2: Optional[float] = None,
  _b3: Optional[float] = None,
) -> Callable:
  r"""
  E. Engel, J. A. Chevary, L. D. Macdonald, and S. H. Vosko.,  Z. Phys. D: At., Mol. Clusters 23, 7–14 (1992)
  `10.1007/BF01436696 <https://doi.org/10.1007/BF01436696>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a1 : Optional[float], default: 27.8428
    a1
  _a2 : Optional[float], default: 11.7683
    a2
  _a3 : Optional[float], default: 0.0
    a3
  _b1 : Optional[float], default: 27.5026
    b1
  _b2 : Optional[float], default: 5.7728
    b2
  _b3 : Optional[float], default: 0.0
    b3
  """
  _a1 = (_a1 or 27.8428)
  _a2 = (_a2 or 11.7683)
  _a3 = (_a3 or 0.0)
  _b1 = (_b1 or 27.5026)
  _b2 = (_b2 or 5.7728)
  _b3 = (_b3 or 0.0)
  p = get_p("gga_x_ecmv92", polarized, _a1, _a2, _a3, _b1, _b2, _b3)
  def _gga_x_ecmv92_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_ecmv92.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_ecmv92_epsilon_xc

def gga_c_pbe_vwn(
  polarized: bool = True,
  _beta: Optional[float] = None,
  _gamma: Optional[float] = None,
  _B: Optional[float] = None,
) -> Callable:
  r"""
  E. Kraisler, G. Makov, and I. Kelson.,  Phys. Rev. A 82, 042516 (2010)
  `10.1103/PhysRevA.82.042516 <https://link.aps.org/doi/10.1103/PhysRevA.82.042516>`_

  J. P. Perdew, K. Burke, and M. Ernzerhof.,  Phys. Rev. Lett. 77, 3865 (1996)
  `10.1103/PhysRevLett.77.3865 <http://link.aps.org/doi/10.1103/PhysRevLett.77.3865>`_

  J. P. Perdew, K. Burke, and M. Ernzerhof.,  Phys. Rev. Lett. 78, 1396 (1997)
  `10.1103/PhysRevLett.78.1396 <http://link.aps.org/doi/10.1103/PhysRevLett.78.1396>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _beta : Optional[float], default: 0.06672455060314922
    beta constant
  _gamma : Optional[float], default: 0.031090690869654894
    (1 - ln(2))/Pi^2 in the PBE
  _B : Optional[float], default: 1.0
    Multiplies the A t^2 term. Used in the SPBE functional
  """
  _beta = (_beta or 0.06672455060314922)
  _gamma = (_gamma or 0.031090690869654894)
  _B = (_B or 1.0)
  p = get_p("gga_c_pbe_vwn", polarized, _beta, _gamma, _B)
  def _gga_c_pbe_vwn_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_c_pbe_vwn.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_c_pbe_vwn_epsilon_xc

def gga_c_p86_ft(
  polarized: bool = True,
  _malpha: Optional[float] = None,
  _mbeta: Optional[float] = None,
  _mgamma: Optional[float] = None,
  _mdelta: Optional[float] = None,
  _aa: Optional[float] = None,
  _bb: Optional[float] = None,
  _ftilde: Optional[float] = None,
) -> Callable:
  r"""
  J. P. Perdew.,  Phys. Rev. B 33, 8822 (1986)
  `10.1103/PhysRevB.33.8822 <http://link.aps.org/doi/10.1103/PhysRevB.33.8822>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _malpha : Optional[float], default: 0.023266
    alpha in eq 6
  _mbeta : Optional[float], default: 7.389e-06
    beta in eq 6
  _mgamma : Optional[float], default: 8.723
    gamma in eq 6
  _mdelta : Optional[float], default: 0.472
    delta in eq 6
  _aa : Optional[float], default: 0.001667
    linear parameter in eq 6
  _bb : Optional[float], default: 0.002568
    constant in the numerator in eq 6
  _ftilde : Optional[float], default: 0.19199566167376364
    constant in eq 9
  """
  _malpha = (_malpha or 0.023266)
  _mbeta = (_mbeta or 7.389e-06)
  _mgamma = (_mgamma or 8.723)
  _mdelta = (_mdelta or 0.472)
  _aa = (_aa or 0.001667)
  _bb = (_bb or 0.002568)
  _ftilde = (_ftilde or 0.19199566167376364)
  p = get_p("gga_c_p86_ft", polarized, _malpha, _mbeta, _mgamma, _mdelta, _aa, _bb, _ftilde)
  def _gga_c_p86_ft_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_c_p86_ft.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_c_p86_ft_epsilon_xc

def gga_k_rational_p(
  polarized: bool = True,
  _C2: Optional[float] = None,
  _p: Optional[float] = None,
) -> Callable:
  r"""
  J. Lehtomäki and O. Lopez-Acevedo.,  Phys. Rev. B 100, 165111 (2019)
  `10.1103/PhysRevB.100.165111 <https://link.aps.org/doi/10.1103/PhysRevB.100.165111>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _C2 : Optional[float], default: 0.7687
    Coefficient for s^2
  _p : Optional[float], default: 1.5
    Exponent
  """
  _C2 = (_C2 or 0.7687)
  _p = (_p or 1.5)
  p = get_p("gga_k_rational_p", polarized, _C2, _p)
  def _gga_k_rational_p_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_k_rational_p.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_k_rational_p_epsilon_xc

def gga_k_pg1(
  polarized: bool = True,
  _mu: Optional[float] = None,
) -> Callable:
  r"""
  L. A. Constantin, E. Fabiano, and F. Della Sala.,  J. Phys. Chem. Lett. 9, 4385-4390 (2018)
  `10.1021/acs.jpclett.8b01926 <https://doi.org/10.1021/acs.jpclett.8b01926>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _mu : Optional[float], default: 1.0
    Prefactor in exponent
  """
  _mu = (_mu or 1.0)
  p = get_p("gga_k_pg1", polarized, _mu)
  def _gga_k_pg1_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_k_pg1.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_k_pg1_epsilon_xc

def mgga_k_pgsl025(
  polarized: bool = True,
  _mu: Optional[float] = None,
  _beta: Optional[float] = None,
) -> Callable:
  r"""
  L. A. Constantin, E. Fabiano, and F. Della Sala.,  J. Phys. Chem. Lett. 9, 4385-4390 (2018)
  `10.1021/acs.jpclett.8b01926 <https://doi.org/10.1021/acs.jpclett.8b01926>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _mu : Optional[float], default: 1.4814814814814814
    Prefactor in exponent
  _beta : Optional[float], default: 0.25
    Coefficient of Laplacian term
  """
  _mu = (_mu or 1.4814814814814814)
  _beta = (_beta or 0.25)
  p = get_p("mgga_k_pgsl025", polarized, _mu, _beta)
  def _mgga_k_pgsl025_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_k_pgsl025.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_k_pgsl025_epsilon_xc

def mgga_x_ms0(
  polarized: bool = True,
  _kappa: Optional[float] = None,
  _c: Optional[float] = None,
  _b: Optional[float] = None,
) -> Callable:
  r"""
  J. Sun, B. Xiao, and A. Ruzsinszky.,  J. Chem. Phys. 137, 051101 (2012)
  `10.1063/1.4742312 <http://scitation.aip.org/content/aip/journal/jcp/137/5/10.1063/1.4742312>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _kappa : Optional[float], default: 0.29
    kappa parameter
  _c : Optional[float], default: 0.28771
    c parameter
  _b : Optional[float], default: 1.0
    exponent b
  """
  _kappa = (_kappa or 0.29)
  _c = (_c or 0.28771)
  _b = (_b or 1.0)
  p = get_p("mgga_x_ms0", polarized, _kappa, _c, _b)
  def _mgga_x_ms0_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_ms0.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_ms0_epsilon_xc

def mgga_x_ms1(
  polarized: bool = True,
  _kappa: Optional[float] = None,
  _c: Optional[float] = None,
  _b: Optional[float] = None,
) -> Callable:
  r"""
  J. Sun, R. Haunschild, B. Xiao, I. W. Bulik, G. E. Scuseria, and J. P. Perdew.,  J. Chem. Phys. 138, 044113 (2013)
  `10.1063/1.4789414 <http://scitation.aip.org/content/aip/journal/jcp/138/4/10.1063/1.4789414>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _kappa : Optional[float], default: 0.404
    kappa parameter
  _c : Optional[float], default: 0.1815
    c parameter
  _b : Optional[float], default: 1.0
    exponent b
  """
  _kappa = (_kappa or 0.404)
  _c = (_c or 0.1815)
  _b = (_b or 1.0)
  p = get_p("mgga_x_ms1", polarized, _kappa, _c, _b)
  def _mgga_x_ms1_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_ms1.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_ms1_epsilon_xc

def mgga_x_ms2(
  polarized: bool = True,
  _kappa: Optional[float] = None,
  _c: Optional[float] = None,
  _b: Optional[float] = None,
) -> Callable:
  r"""
  J. Sun, R. Haunschild, B. Xiao, I. W. Bulik, G. E. Scuseria, and J. P. Perdew.,  J. Chem. Phys. 138, 044113 (2013)
  `10.1063/1.4789414 <http://scitation.aip.org/content/aip/journal/jcp/138/4/10.1063/1.4789414>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _kappa : Optional[float], default: 0.504
    kappa parameter
  _c : Optional[float], default: 0.14601
    c parameter
  _b : Optional[float], default: 4.0
    exponent b
  """
  _kappa = (_kappa or 0.504)
  _c = (_c or 0.14601)
  _b = (_b or 4.0)
  p = get_p("mgga_x_ms2", polarized, _kappa, _c, _b)
  def _mgga_x_ms2_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_ms2.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_ms2_epsilon_xc

def hyb_mgga_x_ms2h(
  polarized: bool = True,
) -> Callable:
  r"""
  J. Sun, R. Haunschild, B. Xiao, I. W. Bulik, G. E. Scuseria, and J. P. Perdew.,  J. Chem. Phys. 138, 044113 (2013)
  `10.1063/1.4789414 <http://scitation.aip.org/content/aip/journal/jcp/138/4/10.1063/1.4789414>`_

  
  Mixing of the following functionals:
    mgga_x_ms2 (coefficient: 0.91)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("hyb_mgga_x_ms2h", polarized, )
  def _hyb_mgga_x_ms2h_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_mgga_x_ms2h.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  
  _hyb_mgga_x_ms2h_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_mgga_x_ms2h_epsilon_xc.cam_beta = p.cam_beta
  _hyb_mgga_x_ms2h_epsilon_xc.cam_omega = p.cam_omega
  _hyb_mgga_x_ms2h_epsilon_xc.nlc_b = p.nlc_b
  _hyb_mgga_x_ms2h_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_mgga_x_ms2h_epsilon_xc

def mgga_x_th(
  polarized: bool = True,
) -> Callable:
  r"""
  T. Tsuneda and K. Hirao.,  Phys. Rev. B 62, 15527–15531 (2000)
  `10.1103/PhysRevB.62.15527 <https://link.aps.org/doi/10.1103/PhysRevB.62.15527>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("mgga_x_th", polarized, )
  def _mgga_x_th_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_th.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_th_epsilon_xc

def mgga_x_m11_l(
  polarized: bool = True,
  _a0: Optional[float] = None,
  _a1: Optional[float] = None,
  _a2: Optional[float] = None,
  _a3: Optional[float] = None,
  _a4: Optional[float] = None,
  _a5: Optional[float] = None,
  _a6: Optional[float] = None,
  _a7: Optional[float] = None,
  _a8: Optional[float] = None,
  _a9: Optional[float] = None,
  _a10: Optional[float] = None,
  _a11: Optional[float] = None,
  _b0: Optional[float] = None,
  _b1: Optional[float] = None,
  _b2: Optional[float] = None,
  _b3: Optional[float] = None,
  _b4: Optional[float] = None,
  _b5: Optional[float] = None,
  _b6: Optional[float] = None,
  _b7: Optional[float] = None,
  _b8: Optional[float] = None,
  _b9: Optional[float] = None,
  _b10: Optional[float] = None,
  _b11: Optional[float] = None,
  _c0: Optional[float] = None,
  _c1: Optional[float] = None,
  _c2: Optional[float] = None,
  _c3: Optional[float] = None,
  _c4: Optional[float] = None,
  _c5: Optional[float] = None,
  _c6: Optional[float] = None,
  _c7: Optional[float] = None,
  _c8: Optional[float] = None,
  _c9: Optional[float] = None,
  _c10: Optional[float] = None,
  _c11: Optional[float] = None,
  _d0: Optional[float] = None,
  _d1: Optional[float] = None,
  _d2: Optional[float] = None,
  _d3: Optional[float] = None,
  _d4: Optional[float] = None,
  _d5: Optional[float] = None,
  _d6: Optional[float] = None,
  _d7: Optional[float] = None,
  _d8: Optional[float] = None,
  _d9: Optional[float] = None,
  _d10: Optional[float] = None,
  _d11: Optional[float] = None,
  _omega: Optional[float] = None,
) -> Callable:
  r"""
  R. Peverati and D. G. Truhlar.,  J. Phys. Chem. Lett. 3, 117 (2012)
  `10.1021/jz201525m <http://pubs.acs.org/doi/abs/10.1021/jz201525m>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a0 : Optional[float], default: 0.8121131
    a0 parameter
  _a1 : Optional[float], default: 17.38124
    a1 parameter
  _a2 : Optional[float], default: 1.154007
    a2 parameter
  _a3 : Optional[float], default: 68.69556
    a3 parameter
  _a4 : Optional[float], default: 101.6864
    a4 parameter
  _a5 : Optional[float], default: -5.887467
    a5 parameter
  _a6 : Optional[float], default: 45.17409
    a6 parameter
  _a7 : Optional[float], default: -2.773149
    a7 parameter
  _a8 : Optional[float], default: -26.17211
    a8 parameter
  _a9 : Optional[float], default: 0.0
    a9 parameter
  _a10 : Optional[float], default: 0.0
    a10 parameter
  _a11 : Optional[float], default: 0.0
    a11 parameter
  _b0 : Optional[float], default: 0.1878869
    b0 parameter
  _b1 : Optional[float], default: -16.53877
    b1 parameter
  _b2 : Optional[float], default: 0.6755753
    b2 parameter
  _b3 : Optional[float], default: -75.67572
    b3 parameter
  _b4 : Optional[float], default: -104.0272
    b4 parameter
  _b5 : Optional[float], default: 18.31853
    b5 parameter
  _b6 : Optional[float], default: -55.73352
    b6 parameter
  _b7 : Optional[float], default: -3.52021
    b7 parameter
  _b8 : Optional[float], default: 37.24276
    b8 parameter
  _b9 : Optional[float], default: 0.0
    b9 parameter
  _b10 : Optional[float], default: 0.0
    b10 parameter
  _b11 : Optional[float], default: 0.0
    b11 parameter
  _c0 : Optional[float], default: -0.4386615
    c0 parameter
  _c1 : Optional[float], default: -121.4016
    c1 parameter
  _c2 : Optional[float], default: -139.3573
    c2 parameter
  _c3 : Optional[float], default: -2.046649
    c3 parameter
  _c4 : Optional[float], default: 28.04098
    c4 parameter
  _c5 : Optional[float], default: -13.12258
    c5 parameter
  _c6 : Optional[float], default: -6.361819
    c6 parameter
  _c7 : Optional[float], default: -0.8055758
    c7 parameter
  _c8 : Optional[float], default: 3.736551
    c8 parameter
  _c9 : Optional[float], default: 0.0
    c9 parameter
  _c10 : Optional[float], default: 0.0
    c10 parameter
  _c11 : Optional[float], default: 0.0
    c11 parameter
  _d0 : Optional[float], default: 1.438662
    d0 parameter
  _d1 : Optional[float], default: 120.9465
    d1 parameter
  _d2 : Optional[float], default: 132.8252
    d2 parameter
  _d3 : Optional[float], default: 12.96355
    d3 parameter
  _d4 : Optional[float], default: 5.854866
    d4 parameter
  _d5 : Optional[float], default: -3.378162
    d5 parameter
  _d6 : Optional[float], default: -44.23393
    d6 parameter
  _d7 : Optional[float], default: 6.844475
    d7 parameter
  _d8 : Optional[float], default: 19.49541
    d8 parameter
  _d9 : Optional[float], default: 0.0
    d9 parameter
  _d10 : Optional[float], default: 0.0
    d10 parameter
  _d11 : Optional[float], default: 0.0
    d11 parameter
  _omega : Optional[float], default: 0.25
    range separation
  """
  _a0 = (_a0 or 0.8121131)
  _a1 = (_a1 or 17.38124)
  _a2 = (_a2 or 1.154007)
  _a3 = (_a3 or 68.69556)
  _a4 = (_a4 or 101.6864)
  _a5 = (_a5 or -5.887467)
  _a6 = (_a6 or 45.17409)
  _a7 = (_a7 or -2.773149)
  _a8 = (_a8 or -26.17211)
  _a9 = (_a9 or 0.0)
  _a10 = (_a10 or 0.0)
  _a11 = (_a11 or 0.0)
  _b0 = (_b0 or 0.1878869)
  _b1 = (_b1 or -16.53877)
  _b2 = (_b2 or 0.6755753)
  _b3 = (_b3 or -75.67572)
  _b4 = (_b4 or -104.0272)
  _b5 = (_b5 or 18.31853)
  _b6 = (_b6 or -55.73352)
  _b7 = (_b7 or -3.52021)
  _b8 = (_b8 or 37.24276)
  _b9 = (_b9 or 0.0)
  _b10 = (_b10 or 0.0)
  _b11 = (_b11 or 0.0)
  _c0 = (_c0 or -0.4386615)
  _c1 = (_c1 or -121.4016)
  _c2 = (_c2 or -139.3573)
  _c3 = (_c3 or -2.046649)
  _c4 = (_c4 or 28.04098)
  _c5 = (_c5 or -13.12258)
  _c6 = (_c6 or -6.361819)
  _c7 = (_c7 or -0.8055758)
  _c8 = (_c8 or 3.736551)
  _c9 = (_c9 or 0.0)
  _c10 = (_c10 or 0.0)
  _c11 = (_c11 or 0.0)
  _d0 = (_d0 or 1.438662)
  _d1 = (_d1 or 120.9465)
  _d2 = (_d2 or 132.8252)
  _d3 = (_d3 or 12.96355)
  _d4 = (_d4 or 5.854866)
  _d5 = (_d5 or -3.378162)
  _d6 = (_d6 or -44.23393)
  _d7 = (_d7 or 6.844475)
  _d8 = (_d8 or 19.49541)
  _d9 = (_d9 or 0.0)
  _d10 = (_d10 or 0.0)
  _d11 = (_d11 or 0.0)
  _omega = (_omega or 0.25)
  p = get_p("mgga_x_m11_l", polarized, _a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8, _a9, _a10, _a11, _b0, _b1, _b2, _b3, _b4, _b5, _b6, _b7, _b8, _b9, _b10, _b11, _c0, _c1, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _d0, _d1, _d2, _d3, _d4, _d5, _d6, _d7, _d8, _d9, _d10, _d11, _omega)
  def _mgga_x_m11_l_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_m11_l.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_m11_l_epsilon_xc

def mgga_x_mn12_l(
  polarized: bool = True,
  _CC000: Optional[float] = None,
  _CC001: Optional[float] = None,
  _CC002: Optional[float] = None,
  _CC003: Optional[float] = None,
  _CC004: Optional[float] = None,
  _CC005: Optional[float] = None,
  _CC010: Optional[float] = None,
  _CC011: Optional[float] = None,
  _CC012: Optional[float] = None,
  _CC013: Optional[float] = None,
  _CC014: Optional[float] = None,
  _CC020: Optional[float] = None,
  _CC021: Optional[float] = None,
  _CC022: Optional[float] = None,
  _CC023: Optional[float] = None,
  _CC030: Optional[float] = None,
  _CC031: Optional[float] = None,
  _CC032: Optional[float] = None,
  _CC100: Optional[float] = None,
  _CC101: Optional[float] = None,
  _CC102: Optional[float] = None,
  _CC103: Optional[float] = None,
  _CC104: Optional[float] = None,
  _CC110: Optional[float] = None,
  _CC111: Optional[float] = None,
  _CC112: Optional[float] = None,
  _CC113: Optional[float] = None,
  _CC120: Optional[float] = None,
  _CC121: Optional[float] = None,
  _CC122: Optional[float] = None,
  _CC200: Optional[float] = None,
  _CC201: Optional[float] = None,
  _CC202: Optional[float] = None,
  _CC203: Optional[float] = None,
  _CC210: Optional[float] = None,
  _CC211: Optional[float] = None,
  _CC212: Optional[float] = None,
  _CC300: Optional[float] = None,
  _CC301: Optional[float] = None,
  _CC302: Optional[float] = None,
) -> Callable:
  r"""
  R. Peverati and D. G. Truhlar.,  Phys. Chem. Chem. Phys. 14, 13171 (2012)
  `10.1039/C2CP42025B <http://pubs.rsc.org/en/Content/ArticleLanding/2012/CP/c2cp42025b>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _CC000 : Optional[float], default: 0.6735981
    CC000
  _CC001 : Optional[float], default: -2.270598
    CC001
  _CC002 : Optional[float], default: -2.613712
    CC002
  _CC003 : Optional[float], default: 3.993609
    CC003
  _CC004 : Optional[float], default: 4.635575
    CC004
  _CC005 : Optional[float], default: 1.250676
    CC005
  _CC010 : Optional[float], default: 0.844492
    CC010
  _CC011 : Optional[float], default: -13.01173
    CC011
  _CC012 : Optional[float], default: -17.7773
    CC012
  _CC013 : Optional[float], default: -4.627211
    CC013
  _CC014 : Optional[float], default: 5.976605
    CC014
  _CC020 : Optional[float], default: 1.142897
    CC020
  _CC021 : Optional[float], default: -20.40226
    CC021
  _CC022 : Optional[float], default: -23.82843
    CC022
  _CC023 : Optional[float], default: 7.119109
    CC023
  _CC030 : Optional[float], default: -23.35726
    CC030
  _CC031 : Optional[float], default: -16.22633
    CC031
  _CC032 : Optional[float], default: 14.82732
    CC032
  _CC100 : Optional[float], default: 1.449285
    CC100
  _CC101 : Optional[float], default: 10.20598
    CC101
  _CC102 : Optional[float], default: 4.40745
    CC102
  _CC103 : Optional[float], default: -20.08193
    CC103
  _CC104 : Optional[float], default: -12.53561
    CC104
  _CC110 : Optional[float], default: -5.435031
    CC110
  _CC111 : Optional[float], default: 16.56736
    CC111
  _CC112 : Optional[float], default: 20.00229
    CC112
  _CC113 : Optional[float], default: -2.513105
    CC113
  _CC120 : Optional[float], default: 9.658436
    CC120
  _CC121 : Optional[float], default: -3.825281
    CC121
  _CC122 : Optional[float], default: -25.0
    CC122
  _CC200 : Optional[float], default: -2.07008
    CC200
  _CC201 : Optional[float], default: -9.951913
    CC201
  _CC202 : Optional[float], default: 0.8731211
    CC202
  _CC203 : Optional[float], default: 22.10891
    CC203
  _CC210 : Optional[float], default: 8.822633
    CC210
  _CC211 : Optional[float], default: 24.99949
    CC211
  _CC212 : Optional[float], default: 25.0
    CC212
  _CC300 : Optional[float], default: 0.6851693
    CC300
  _CC301 : Optional[float], default: -0.07406948
    CC301
  _CC302 : Optional[float], default: -0.6788
    CC302
  """
  _CC000 = (_CC000 or 0.6735981)
  _CC001 = (_CC001 or -2.270598)
  _CC002 = (_CC002 or -2.613712)
  _CC003 = (_CC003 or 3.993609)
  _CC004 = (_CC004 or 4.635575)
  _CC005 = (_CC005 or 1.250676)
  _CC010 = (_CC010 or 0.844492)
  _CC011 = (_CC011 or -13.01173)
  _CC012 = (_CC012 or -17.7773)
  _CC013 = (_CC013 or -4.627211)
  _CC014 = (_CC014 or 5.976605)
  _CC020 = (_CC020 or 1.142897)
  _CC021 = (_CC021 or -20.40226)
  _CC022 = (_CC022 or -23.82843)
  _CC023 = (_CC023 or 7.119109)
  _CC030 = (_CC030 or -23.35726)
  _CC031 = (_CC031 or -16.22633)
  _CC032 = (_CC032 or 14.82732)
  _CC100 = (_CC100 or 1.449285)
  _CC101 = (_CC101 or 10.20598)
  _CC102 = (_CC102 or 4.40745)
  _CC103 = (_CC103 or -20.08193)
  _CC104 = (_CC104 or -12.53561)
  _CC110 = (_CC110 or -5.435031)
  _CC111 = (_CC111 or 16.56736)
  _CC112 = (_CC112 or 20.00229)
  _CC113 = (_CC113 or -2.513105)
  _CC120 = (_CC120 or 9.658436)
  _CC121 = (_CC121 or -3.825281)
  _CC122 = (_CC122 or -25.0)
  _CC200 = (_CC200 or -2.07008)
  _CC201 = (_CC201 or -9.951913)
  _CC202 = (_CC202 or 0.8731211)
  _CC203 = (_CC203 or 22.10891)
  _CC210 = (_CC210 or 8.822633)
  _CC211 = (_CC211 or 24.99949)
  _CC212 = (_CC212 or 25.0)
  _CC300 = (_CC300 or 0.6851693)
  _CC301 = (_CC301 or -0.07406948)
  _CC302 = (_CC302 or -0.6788)
  p = get_p("mgga_x_mn12_l", polarized, _CC000, _CC001, _CC002, _CC003, _CC004, _CC005, _CC010, _CC011, _CC012, _CC013, _CC014, _CC020, _CC021, _CC022, _CC023, _CC030, _CC031, _CC032, _CC100, _CC101, _CC102, _CC103, _CC104, _CC110, _CC111, _CC112, _CC113, _CC120, _CC121, _CC122, _CC200, _CC201, _CC202, _CC203, _CC210, _CC211, _CC212, _CC300, _CC301, _CC302)
  def _mgga_x_mn12_l_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_mn12_l.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_mn12_l_epsilon_xc

def mgga_x_ms2_rev(
  polarized: bool = True,
  _kappa: Optional[float] = None,
  _c: Optional[float] = None,
  _b: Optional[float] = None,
) -> Callable:
  r"""
  J. Sun, R. Haunschild, B. Xiao, I. W. Bulik, G. E. Scuseria, and J. P. Perdew.,  J. Chem. Phys. 138, 044113 (2013)
  `10.1063/1.4789414 <http://scitation.aip.org/content/aip/journal/jcp/138/4/10.1063/1.4789414>`_

  J. W. Furness and J. Sun.,  Phys. Rev. B 99, 041119 (2019)
  `10.1103/PhysRevB.99.041119 <https://link.aps.org/doi/10.1103/PhysRevB.99.041119>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _kappa : Optional[float], default: 0.504
    kappa parameter
  _c : Optional[float], default: 0.14607
    c parameter
  _b : Optional[float], default: 4.0
    exponent b
  """
  _kappa = (_kappa or 0.504)
  _c = (_c or 0.14607)
  _b = (_b or 4.0)
  p = get_p("mgga_x_ms2_rev", polarized, _kappa, _c, _b)
  def _mgga_x_ms2_rev_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_ms2_rev.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_ms2_rev_epsilon_xc

def mgga_xc_cc06(
  polarized: bool = True,
) -> Callable:
  r"""
  A. C. Cancio and M. Y. Chou.,  Phys. Rev. B 74, 081202 (2006)
  `10.1103/PhysRevB.74.081202 <http://link.aps.org/doi/10.1103/PhysRevB.74.081202>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("mgga_xc_cc06", polarized, )
  def _mgga_xc_cc06_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_xc_cc06.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_xc_cc06_epsilon_xc

def mgga_x_mk00(
  polarized: bool = True,
  _prefactor: Optional[float] = None,
) -> Callable:
  r"""
  F. R. Manby and P. J. Knowles.,  J. Chem. Phys. 112, 7002 (2000)
  `10.1063/1.481298 <http://scitation.aip.org/content/aip/journal/jcp/112/16/10.1063/1.481298>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _prefactor : Optional[float], default: 0.8
    Prefactor that multiplies functional
  """
  _prefactor = (_prefactor or 0.8)
  p = get_p("mgga_x_mk00", polarized, _prefactor)
  def _mgga_x_mk00_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_mk00.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_mk00_epsilon_xc

def mgga_c_tpss(
  polarized: bool = True,
  _beta: Optional[float] = None,
  _d: Optional[float] = None,
  _C0_c0: Optional[float] = None,
  _C0_c1: Optional[float] = None,
  _C0_c2: Optional[float] = None,
  _C0_c3: Optional[float] = None,
) -> Callable:
  r"""
  J. Tao, J. P. Perdew, V. N. Staroverov, and G. E. Scuseria.,  Phys. Rev. Lett. 91, 146401 (2003)
  `10.1103/PhysRevLett.91.146401 <http://link.aps.org/doi/10.1103/PhysRevLett.91.146401>`_

  J. P. Perdew, J. Tao, V. N. Staroverov, and G. E. Scuseria.,  J. Chem. Phys. 120, 6898 (2004)
  `10.1063/1.1665298 <http://scitation.aip.org/content/aip/journal/jcp/120/15/10.1063/1.1665298>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _beta : Optional[float], default: 0.06672455060314922
    beta
  _d : Optional[float], default: 2.8
    d
  _C0_c0 : Optional[float], default: 0.53
    C0_c0
  _C0_c1 : Optional[float], default: 0.87
    C0_c1
  _C0_c2 : Optional[float], default: 0.5
    C0_c2
  _C0_c3 : Optional[float], default: 2.26
    C0_c3
  """
  _beta = (_beta or 0.06672455060314922)
  _d = (_d or 2.8)
  _C0_c0 = (_C0_c0 or 0.53)
  _C0_c1 = (_C0_c1 or 0.87)
  _C0_c2 = (_C0_c2 or 0.5)
  _C0_c3 = (_C0_c3 or 2.26)
  p = get_p("mgga_c_tpss", polarized, _beta, _d, _C0_c0, _C0_c1, _C0_c2, _C0_c3)
  def _mgga_c_tpss_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_c_tpss.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_c_tpss_epsilon_xc

def mgga_c_vsxc(
  polarized: bool = True,
  _alpha_ss: Optional[float] = None,
  _alpha_os: Optional[float] = None,
  _dss0: Optional[float] = None,
  _dss1: Optional[float] = None,
  _dss2: Optional[float] = None,
  _dss3: Optional[float] = None,
  _dss4: Optional[float] = None,
  _dss5: Optional[float] = None,
  _dab0: Optional[float] = None,
  _dab1: Optional[float] = None,
  _dab2: Optional[float] = None,
  _dab3: Optional[float] = None,
  _dab4: Optional[float] = None,
  _dab5: Optional[float] = None,
) -> Callable:
  r"""
  T. V. Voorhis and G. E. Scuseria.,  J. Chem. Phys. 109, 400 (1998)
  `10.1063/1.476577 <http://scitation.aip.org/content/aip/journal/jcp/109/2/10.1063/1.476577>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _alpha_ss : Optional[float], default: 0.00515088
    same-spin alpha
  _alpha_os : Optional[float], default: 0.00304966
    opposite-spin alpha
  _dss0 : Optional[float], default: 0.3270912
    same-spin a parameter
  _dss1 : Optional[float], default: -0.03228915
    same-spin b parameter
  _dss2 : Optional[float], default: -0.02942406
    same-spin c parameter
  _dss3 : Optional[float], default: 0.002134222
    same-spin d parameter
  _dss4 : Optional[float], default: -0.005451559
    same-spin e parameter
  _dss5 : Optional[float], default: 0.01577575
    same-spin f parameter
  _dab0 : Optional[float], default: 0.703501
    opposite-spin a parameter
  _dab1 : Optional[float], default: 0.007694574
    opposite-spin b parameter
  _dab2 : Optional[float], default: 0.05152765
    opposite-spin c parameter
  _dab3 : Optional[float], default: 3.394308e-05
    opposite-spin d parameter
  _dab4 : Optional[float], default: -0.00126942
    opposite-spin e parameter
  _dab5 : Optional[float], default: 0.001296118
    opposite-spin f parameter
  """
  _alpha_ss = (_alpha_ss or 0.00515088)
  _alpha_os = (_alpha_os or 0.00304966)
  _dss0 = (_dss0 or 0.3270912)
  _dss1 = (_dss1 or -0.03228915)
  _dss2 = (_dss2 or -0.02942406)
  _dss3 = (_dss3 or 0.002134222)
  _dss4 = (_dss4 or -0.005451559)
  _dss5 = (_dss5 or 0.01577575)
  _dab0 = (_dab0 or 0.703501)
  _dab1 = (_dab1 or 0.007694574)
  _dab2 = (_dab2 or 0.05152765)
  _dab3 = (_dab3 or 3.394308e-05)
  _dab4 = (_dab4 or -0.00126942)
  _dab5 = (_dab5 or 0.001296118)
  p = get_p("mgga_c_vsxc", polarized, _alpha_ss, _alpha_os, _dss0, _dss1, _dss2, _dss3, _dss4, _dss5, _dab0, _dab1, _dab2, _dab3, _dab4, _dab5)
  def _mgga_c_vsxc_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_c_vsxc.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_c_vsxc_epsilon_xc

def mgga_c_m06_l(
  polarized: bool = True,
  _gamma_ss: Optional[float] = None,
  _gamma_ab: Optional[float] = None,
  _alpha_ss: Optional[float] = None,
  _alpha_ab: Optional[float] = None,
  _css0: Optional[float] = None,
  _css1: Optional[float] = None,
  _css2: Optional[float] = None,
  _css3: Optional[float] = None,
  _css4: Optional[float] = None,
  _cab0: Optional[float] = None,
  _cab1: Optional[float] = None,
  _cab2: Optional[float] = None,
  _cab3: Optional[float] = None,
  _cab4: Optional[float] = None,
  _dss0: Optional[float] = None,
  _dss1: Optional[float] = None,
  _dss2: Optional[float] = None,
  _dss3: Optional[float] = None,
  _dss4: Optional[float] = None,
  _dss5: Optional[float] = None,
  _dab0: Optional[float] = None,
  _dab1: Optional[float] = None,
  _dab2: Optional[float] = None,
  _dab3: Optional[float] = None,
  _dab4: Optional[float] = None,
  _dab5: Optional[float] = None,
  _Fermi_D_cnst: Optional[float] = None,
) -> Callable:
  r"""
  Y. Zhao and D. G. Truhlar.,  J. Chem. Phys. 125, 194101 (2006)
  `10.1063/1.2370993 <http://scitation.aip.org/content/aip/journal/jcp/125/19/10.1063/1.2370993>`_

  Y. Zhao and D. G. Truhlar.,  Theor. Chem. Acc. 120, 215 (2008)
  `10.1007/s00214-007-0310-x <http://link.springer.com/article/10.1007\%2Fs00214-007-0310-x>`_

  
  Mixing of the following functionals:
    lda_c_pw_mod (coefficient: 1.4916681462400413e-154)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _gamma_ss : Optional[float], default: 0.06
    gamma_ss
  _gamma_ab : Optional[float], default: 0.0031
    gamma_ab
  _alpha_ss : Optional[float], default: 0.00515088
    alpha_ss
  _alpha_ab : Optional[float], default: 0.00304966
    alpha_ab
  _css0 : Optional[float], default: 0.5349466
    css0
  _css1 : Optional[float], default: 0.539662
    css1
  _css2 : Optional[float], default: -31.61217
    css2
  _css3 : Optional[float], default: 51.49592
    css3
  _css4 : Optional[float], default: -29.19613
    css4
  _cab0 : Optional[float], default: 0.6042374
    cab0
  _cab1 : Optional[float], default: 177.6783
    cab1
  _cab2 : Optional[float], default: -251.3252
    cab2
  _cab3 : Optional[float], default: 76.35173
    cab3
  _cab4 : Optional[float], default: -12.55699
    cab4
  _dss0 : Optional[float], default: 0.4650534
    dss0
  _dss1 : Optional[float], default: 0.1617589
    dss1
  _dss2 : Optional[float], default: 0.1833657
    dss2
  _dss3 : Optional[float], default: 0.00046921
    dss3
  _dss4 : Optional[float], default: -0.004990573
    dss4
  _dss5 : Optional[float], default: 0.0
    dss5
  _dab0 : Optional[float], default: 0.3957626
    dab0
  _dab1 : Optional[float], default: -0.5614546
    dab1
  _dab2 : Optional[float], default: 0.01403963
    dab2
  _dab3 : Optional[float], default: 0.0009831442
    dab3
  _dab4 : Optional[float], default: -0.003577176
    dab4
  _dab5 : Optional[float], default: 0.0
    dab5
  _Fermi_D_cnst : Optional[float], default: 1e-10
    Constant for the correction term similar to 10.1063/1.2800011
  """
  _gamma_ss = (_gamma_ss or 0.06)
  _gamma_ab = (_gamma_ab or 0.0031)
  _alpha_ss = (_alpha_ss or 0.00515088)
  _alpha_ab = (_alpha_ab or 0.00304966)
  _css0 = (_css0 or 0.5349466)
  _css1 = (_css1 or 0.539662)
  _css2 = (_css2 or -31.61217)
  _css3 = (_css3 or 51.49592)
  _css4 = (_css4 or -29.19613)
  _cab0 = (_cab0 or 0.6042374)
  _cab1 = (_cab1 or 177.6783)
  _cab2 = (_cab2 or -251.3252)
  _cab3 = (_cab3 or 76.35173)
  _cab4 = (_cab4 or -12.55699)
  _dss0 = (_dss0 or 0.4650534)
  _dss1 = (_dss1 or 0.1617589)
  _dss2 = (_dss2 or 0.1833657)
  _dss3 = (_dss3 or 0.00046921)
  _dss4 = (_dss4 or -0.004990573)
  _dss5 = (_dss5 or 0.0)
  _dab0 = (_dab0 or 0.3957626)
  _dab1 = (_dab1 or -0.5614546)
  _dab2 = (_dab2 or 0.01403963)
  _dab3 = (_dab3 or 0.0009831442)
  _dab4 = (_dab4 or -0.003577176)
  _dab5 = (_dab5 or 0.0)
  _Fermi_D_cnst = (_Fermi_D_cnst or 1e-10)
  p = get_p("mgga_c_m06_l", polarized, _gamma_ss, _gamma_ab, _alpha_ss, _alpha_ab, _css0, _css1, _css2, _css3, _css4, _cab0, _cab1, _cab2, _cab3, _cab4, _dss0, _dss1, _dss2, _dss3, _dss4, _dss5, _dab0, _dab1, _dab2, _dab3, _dab4, _dab5, _Fermi_D_cnst)
  def _mgga_c_m06_l_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_c_m06_l.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  
  _mgga_c_m06_l_epsilon_xc.cam_alpha = p.cam_alpha
  _mgga_c_m06_l_epsilon_xc.cam_beta = p.cam_beta
  _mgga_c_m06_l_epsilon_xc.cam_omega = p.cam_omega
  _mgga_c_m06_l_epsilon_xc.nlc_b = p.nlc_b
  _mgga_c_m06_l_epsilon_xc.nlc_C = p.nlc_C

  return _mgga_c_m06_l_epsilon_xc

def mgga_c_m06_hf(
  polarized: bool = True,
  _gamma_ss: Optional[float] = None,
  _gamma_ab: Optional[float] = None,
  _alpha_ss: Optional[float] = None,
  _alpha_ab: Optional[float] = None,
  _css0: Optional[float] = None,
  _css1: Optional[float] = None,
  _css2: Optional[float] = None,
  _css3: Optional[float] = None,
  _css4: Optional[float] = None,
  _cab0: Optional[float] = None,
  _cab1: Optional[float] = None,
  _cab2: Optional[float] = None,
  _cab3: Optional[float] = None,
  _cab4: Optional[float] = None,
  _dss0: Optional[float] = None,
  _dss1: Optional[float] = None,
  _dss2: Optional[float] = None,
  _dss3: Optional[float] = None,
  _dss4: Optional[float] = None,
  _dss5: Optional[float] = None,
  _dab0: Optional[float] = None,
  _dab1: Optional[float] = None,
  _dab2: Optional[float] = None,
  _dab3: Optional[float] = None,
  _dab4: Optional[float] = None,
  _dab5: Optional[float] = None,
  _Fermi_D_cnst: Optional[float] = None,
) -> Callable:
  r"""
  Y. Zhao and D. G. Truhlar.,  J. Phys. Chem. A 110, 13126 (2006)
  `10.1021/jp066479k <http://pubs.acs.org/doi/abs/10.1021/jp066479k>`_

  
  Mixing of the following functionals:
    lda_c_pw_mod (coefficient: 1.4916681462400413e-154)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _gamma_ss : Optional[float], default: 0.06
    gamma_ss
  _gamma_ab : Optional[float], default: 0.0031
    gamma_ab
  _alpha_ss : Optional[float], default: 0.00515088
    alpha_ss
  _alpha_ab : Optional[float], default: 0.00304966
    alpha_ab
  _css0 : Optional[float], default: 0.1023254
    css0
  _css1 : Optional[float], default: -2.453783
    css1
  _css2 : Optional[float], default: 29.1318
    css2
  _css3 : Optional[float], default: -34.94358
    css3
  _css4 : Optional[float], default: 23.15955
    css4
  _cab0 : Optional[float], default: 1.674634
    cab0
  _cab1 : Optional[float], default: 57.32017
    cab1
  _cab2 : Optional[float], default: 59.55416
    cab2
  _cab3 : Optional[float], default: -231.1007
    cab3
  _cab4 : Optional[float], default: 125.5199
    cab4
  _dss0 : Optional[float], default: 0.8976746
    dss0
  _dss1 : Optional[float], default: -0.234583
    dss1
  _dss2 : Optional[float], default: 0.2368173
    dss2
  _dss3 : Optional[float], default: -0.000991389
    dss3
  _dss4 : Optional[float], default: -0.01146165
    dss4
  _dss5 : Optional[float], default: 0.0
    dss5
  _dab0 : Optional[float], default: -0.6746338
    dab0
  _dab1 : Optional[float], default: -0.1534002
    dab1
  _dab2 : Optional[float], default: -0.09021521
    dab2
  _dab3 : Optional[float], default: -0.001292037
    dab3
  _dab4 : Optional[float], default: -0.0002352983
    dab4
  _dab5 : Optional[float], default: 0.0
    dab5
  _Fermi_D_cnst : Optional[float], default: 1e-10
    Constant for the correction term similar to 10.1063/1.2800011
  """
  _gamma_ss = (_gamma_ss or 0.06)
  _gamma_ab = (_gamma_ab or 0.0031)
  _alpha_ss = (_alpha_ss or 0.00515088)
  _alpha_ab = (_alpha_ab or 0.00304966)
  _css0 = (_css0 or 0.1023254)
  _css1 = (_css1 or -2.453783)
  _css2 = (_css2 or 29.1318)
  _css3 = (_css3 or -34.94358)
  _css4 = (_css4 or 23.15955)
  _cab0 = (_cab0 or 1.674634)
  _cab1 = (_cab1 or 57.32017)
  _cab2 = (_cab2 or 59.55416)
  _cab3 = (_cab3 or -231.1007)
  _cab4 = (_cab4 or 125.5199)
  _dss0 = (_dss0 or 0.8976746)
  _dss1 = (_dss1 or -0.234583)
  _dss2 = (_dss2 or 0.2368173)
  _dss3 = (_dss3 or -0.000991389)
  _dss4 = (_dss4 or -0.01146165)
  _dss5 = (_dss5 or 0.0)
  _dab0 = (_dab0 or -0.6746338)
  _dab1 = (_dab1 or -0.1534002)
  _dab2 = (_dab2 or -0.09021521)
  _dab3 = (_dab3 or -0.001292037)
  _dab4 = (_dab4 or -0.0002352983)
  _dab5 = (_dab5 or 0.0)
  _Fermi_D_cnst = (_Fermi_D_cnst or 1e-10)
  p = get_p("mgga_c_m06_hf", polarized, _gamma_ss, _gamma_ab, _alpha_ss, _alpha_ab, _css0, _css1, _css2, _css3, _css4, _cab0, _cab1, _cab2, _cab3, _cab4, _dss0, _dss1, _dss2, _dss3, _dss4, _dss5, _dab0, _dab1, _dab2, _dab3, _dab4, _dab5, _Fermi_D_cnst)
  def _mgga_c_m06_hf_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_c_m06_hf.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  
  _mgga_c_m06_hf_epsilon_xc.cam_alpha = p.cam_alpha
  _mgga_c_m06_hf_epsilon_xc.cam_beta = p.cam_beta
  _mgga_c_m06_hf_epsilon_xc.cam_omega = p.cam_omega
  _mgga_c_m06_hf_epsilon_xc.nlc_b = p.nlc_b
  _mgga_c_m06_hf_epsilon_xc.nlc_C = p.nlc_C

  return _mgga_c_m06_hf_epsilon_xc

def mgga_c_m06(
  polarized: bool = True,
  _gamma_ss: Optional[float] = None,
  _gamma_ab: Optional[float] = None,
  _alpha_ss: Optional[float] = None,
  _alpha_ab: Optional[float] = None,
  _css0: Optional[float] = None,
  _css1: Optional[float] = None,
  _css2: Optional[float] = None,
  _css3: Optional[float] = None,
  _css4: Optional[float] = None,
  _cab0: Optional[float] = None,
  _cab1: Optional[float] = None,
  _cab2: Optional[float] = None,
  _cab3: Optional[float] = None,
  _cab4: Optional[float] = None,
  _dss0: Optional[float] = None,
  _dss1: Optional[float] = None,
  _dss2: Optional[float] = None,
  _dss3: Optional[float] = None,
  _dss4: Optional[float] = None,
  _dss5: Optional[float] = None,
  _dab0: Optional[float] = None,
  _dab1: Optional[float] = None,
  _dab2: Optional[float] = None,
  _dab3: Optional[float] = None,
  _dab4: Optional[float] = None,
  _dab5: Optional[float] = None,
  _Fermi_D_cnst: Optional[float] = None,
) -> Callable:
  r"""
  Y. Zhao and D. G. Truhlar.,  Theor. Chem. Acc. 120, 215 (2008)
  `10.1007/s00214-007-0310-x <http://link.springer.com/article/10.1007\%2Fs00214-007-0310-x>`_

  
  Mixing of the following functionals:
    lda_c_pw_mod (coefficient: 1.4916681462400413e-154)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _gamma_ss : Optional[float], default: 0.06
    gamma_ss
  _gamma_ab : Optional[float], default: 0.0031
    gamma_ab
  _alpha_ss : Optional[float], default: 0.00515088
    alpha_ss
  _alpha_ab : Optional[float], default: 0.00304966
    alpha_ab
  _css0 : Optional[float], default: 0.5094055
    css0
  _css1 : Optional[float], default: -1.491085
    css1
  _css2 : Optional[float], default: 17.23922
    css2
  _css3 : Optional[float], default: -38.59018
    css3
  _css4 : Optional[float], default: 28.45044
    css4
  _cab0 : Optional[float], default: 3.741539
    cab0
  _cab1 : Optional[float], default: 218.7098
    cab1
  _cab2 : Optional[float], default: -453.1252
    cab2
  _cab3 : Optional[float], default: 293.6479
    cab3
  _cab4 : Optional[float], default: -62.8747
    cab4
  _dss0 : Optional[float], default: 0.4905945
    dss0
  _dss1 : Optional[float], default: -0.1437348
    dss1
  _dss2 : Optional[float], default: 0.2357824
    dss2
  _dss3 : Optional[float], default: 0.001871015
    dss3
  _dss4 : Optional[float], default: -0.003788963
    dss4
  _dss5 : Optional[float], default: 0.0
    dss5
  _dab0 : Optional[float], default: -2.741539
    dab0
  _dab1 : Optional[float], default: -0.6720113
    dab1
  _dab2 : Optional[float], default: -0.07932688
    dab2
  _dab3 : Optional[float], default: 0.001918681
    dab3
  _dab4 : Optional[float], default: -0.002032902
    dab4
  _dab5 : Optional[float], default: 0.0
    dab5
  _Fermi_D_cnst : Optional[float], default: 1e-10
    Constant for the correction term similar to 10.1063/1.2800011
  """
  _gamma_ss = (_gamma_ss or 0.06)
  _gamma_ab = (_gamma_ab or 0.0031)
  _alpha_ss = (_alpha_ss or 0.00515088)
  _alpha_ab = (_alpha_ab or 0.00304966)
  _css0 = (_css0 or 0.5094055)
  _css1 = (_css1 or -1.491085)
  _css2 = (_css2 or 17.23922)
  _css3 = (_css3 or -38.59018)
  _css4 = (_css4 or 28.45044)
  _cab0 = (_cab0 or 3.741539)
  _cab1 = (_cab1 or 218.7098)
  _cab2 = (_cab2 or -453.1252)
  _cab3 = (_cab3 or 293.6479)
  _cab4 = (_cab4 or -62.8747)
  _dss0 = (_dss0 or 0.4905945)
  _dss1 = (_dss1 or -0.1437348)
  _dss2 = (_dss2 or 0.2357824)
  _dss3 = (_dss3 or 0.001871015)
  _dss4 = (_dss4 or -0.003788963)
  _dss5 = (_dss5 or 0.0)
  _dab0 = (_dab0 or -2.741539)
  _dab1 = (_dab1 or -0.6720113)
  _dab2 = (_dab2 or -0.07932688)
  _dab3 = (_dab3 or 0.001918681)
  _dab4 = (_dab4 or -0.002032902)
  _dab5 = (_dab5 or 0.0)
  _Fermi_D_cnst = (_Fermi_D_cnst or 1e-10)
  p = get_p("mgga_c_m06", polarized, _gamma_ss, _gamma_ab, _alpha_ss, _alpha_ab, _css0, _css1, _css2, _css3, _css4, _cab0, _cab1, _cab2, _cab3, _cab4, _dss0, _dss1, _dss2, _dss3, _dss4, _dss5, _dab0, _dab1, _dab2, _dab3, _dab4, _dab5, _Fermi_D_cnst)
  def _mgga_c_m06_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_c_m06.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  
  _mgga_c_m06_epsilon_xc.cam_alpha = p.cam_alpha
  _mgga_c_m06_epsilon_xc.cam_beta = p.cam_beta
  _mgga_c_m06_epsilon_xc.cam_omega = p.cam_omega
  _mgga_c_m06_epsilon_xc.nlc_b = p.nlc_b
  _mgga_c_m06_epsilon_xc.nlc_C = p.nlc_C

  return _mgga_c_m06_epsilon_xc

def mgga_c_m06_2x(
  polarized: bool = True,
  _gamma_ss: Optional[float] = None,
  _gamma_ab: Optional[float] = None,
  _alpha_ss: Optional[float] = None,
  _alpha_ab: Optional[float] = None,
  _css0: Optional[float] = None,
  _css1: Optional[float] = None,
  _css2: Optional[float] = None,
  _css3: Optional[float] = None,
  _css4: Optional[float] = None,
  _cab0: Optional[float] = None,
  _cab1: Optional[float] = None,
  _cab2: Optional[float] = None,
  _cab3: Optional[float] = None,
  _cab4: Optional[float] = None,
  _dss0: Optional[float] = None,
  _dss1: Optional[float] = None,
  _dss2: Optional[float] = None,
  _dss3: Optional[float] = None,
  _dss4: Optional[float] = None,
  _dss5: Optional[float] = None,
  _dab0: Optional[float] = None,
  _dab1: Optional[float] = None,
  _dab2: Optional[float] = None,
  _dab3: Optional[float] = None,
  _dab4: Optional[float] = None,
  _dab5: Optional[float] = None,
  _Fermi_D_cnst: Optional[float] = None,
) -> Callable:
  r"""
  Y. Zhao and D. G. Truhlar.,  Theor. Chem. Acc. 120, 215 (2008)
  `10.1007/s00214-007-0310-x <http://link.springer.com/article/10.1007\%2Fs00214-007-0310-x>`_

  
  Mixing of the following functionals:
    lda_c_pw_mod (coefficient: 1.4916681462400413e-154)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _gamma_ss : Optional[float], default: 0.06
    gamma_ss
  _gamma_ab : Optional[float], default: 0.0031
    gamma_ab
  _alpha_ss : Optional[float], default: 0.00515088
    alpha_ss
  _alpha_ab : Optional[float], default: 0.00304966
    alpha_ab
  _css0 : Optional[float], default: 0.3097855
    css0
  _css1 : Optional[float], default: -5.528642
    css1
  _css2 : Optional[float], default: 13.4742
    css2
  _css3 : Optional[float], default: -32.13623
    css3
  _css4 : Optional[float], default: 28.46742
    css4
  _cab0 : Optional[float], default: 0.8833596
    cab0
  _cab1 : Optional[float], default: 33.57972
    cab1
  _cab2 : Optional[float], default: -70.43548
    cab2
  _cab3 : Optional[float], default: 49.78271
    cab3
  _cab4 : Optional[float], default: -18.52891
    cab4
  _dss0 : Optional[float], default: 0.6902145
    dss0
  _dss1 : Optional[float], default: 0.09847204
    dss1
  _dss2 : Optional[float], default: 0.2214797
    dss2
  _dss3 : Optional[float], default: -0.001968264
    dss3
  _dss4 : Optional[float], default: -0.006775479
    dss4
  _dss5 : Optional[float], default: 0.0
    dss5
  _dab0 : Optional[float], default: 0.1166404
    dab0
  _dab1 : Optional[float], default: -0.09120847
    dab1
  _dab2 : Optional[float], default: -0.06726189
    dab2
  _dab3 : Optional[float], default: 6.72058e-05
    dab3
  _dab4 : Optional[float], default: 0.0008448011
    dab4
  _dab5 : Optional[float], default: 0.0
    dab5
  _Fermi_D_cnst : Optional[float], default: 1e-10
    Constant for the correction term similar to 10.1063/1.2800011
  """
  _gamma_ss = (_gamma_ss or 0.06)
  _gamma_ab = (_gamma_ab or 0.0031)
  _alpha_ss = (_alpha_ss or 0.00515088)
  _alpha_ab = (_alpha_ab or 0.00304966)
  _css0 = (_css0 or 0.3097855)
  _css1 = (_css1 or -5.528642)
  _css2 = (_css2 or 13.4742)
  _css3 = (_css3 or -32.13623)
  _css4 = (_css4 or 28.46742)
  _cab0 = (_cab0 or 0.8833596)
  _cab1 = (_cab1 or 33.57972)
  _cab2 = (_cab2 or -70.43548)
  _cab3 = (_cab3 or 49.78271)
  _cab4 = (_cab4 or -18.52891)
  _dss0 = (_dss0 or 0.6902145)
  _dss1 = (_dss1 or 0.09847204)
  _dss2 = (_dss2 or 0.2214797)
  _dss3 = (_dss3 or -0.001968264)
  _dss4 = (_dss4 or -0.006775479)
  _dss5 = (_dss5 or 0.0)
  _dab0 = (_dab0 or 0.1166404)
  _dab1 = (_dab1 or -0.09120847)
  _dab2 = (_dab2 or -0.06726189)
  _dab3 = (_dab3 or 6.72058e-05)
  _dab4 = (_dab4 or 0.0008448011)
  _dab5 = (_dab5 or 0.0)
  _Fermi_D_cnst = (_Fermi_D_cnst or 1e-10)
  p = get_p("mgga_c_m06_2x", polarized, _gamma_ss, _gamma_ab, _alpha_ss, _alpha_ab, _css0, _css1, _css2, _css3, _css4, _cab0, _cab1, _cab2, _cab3, _cab4, _dss0, _dss1, _dss2, _dss3, _dss4, _dss5, _dab0, _dab1, _dab2, _dab3, _dab4, _dab5, _Fermi_D_cnst)
  def _mgga_c_m06_2x_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_c_m06_2x.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  
  _mgga_c_m06_2x_epsilon_xc.cam_alpha = p.cam_alpha
  _mgga_c_m06_2x_epsilon_xc.cam_beta = p.cam_beta
  _mgga_c_m06_2x_epsilon_xc.cam_omega = p.cam_omega
  _mgga_c_m06_2x_epsilon_xc.nlc_b = p.nlc_b
  _mgga_c_m06_2x_epsilon_xc.nlc_C = p.nlc_C

  return _mgga_c_m06_2x_epsilon_xc

def mgga_c_m05(
  polarized: bool = True,
  _gamma_ss: Optional[float] = None,
  _gamma_ab: Optional[float] = None,
  _css0: Optional[float] = None,
  _css1: Optional[float] = None,
  _css2: Optional[float] = None,
  _css3: Optional[float] = None,
  _css4: Optional[float] = None,
  _cab0: Optional[float] = None,
  _cab1: Optional[float] = None,
  _cab2: Optional[float] = None,
  _cab3: Optional[float] = None,
  _cab4: Optional[float] = None,
  _Fermi_D_cnst: Optional[float] = None,
) -> Callable:
  r"""
  Y. Zhao, N. E. Schultz, and D. G. Truhlar.,  J. Chem. Phys. 123, 161103 (2005)
  `10.1063/1.2126975 <http://scitation.aip.org/content/aip/journal/jcp/123/16/10.1063/1.2126975>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _gamma_ss : Optional[float], default: 0.06
    gamma_ss
  _gamma_ab : Optional[float], default: 0.0031
    gamma_ab
  _css0 : Optional[float], default: 1.0
    css0
  _css1 : Optional[float], default: 3.77344
    css1
  _css2 : Optional[float], default: -26.04463
    css2
  _css3 : Optional[float], default: 30.69913
    css3
  _css4 : Optional[float], default: -9.22695
    css4
  _cab0 : Optional[float], default: 1.0
    cab0
  _cab1 : Optional[float], default: 3.78569
    cab1
  _cab2 : Optional[float], default: -14.15261
    cab2
  _cab3 : Optional[float], default: -7.46589
    cab3
  _cab4 : Optional[float], default: 17.94491
    cab4
  _Fermi_D_cnst : Optional[float], default: 1e-10
    Constant for the correction term similar to 10.1063/1.2800011
  """
  _gamma_ss = (_gamma_ss or 0.06)
  _gamma_ab = (_gamma_ab or 0.0031)
  _css0 = (_css0 or 1.0)
  _css1 = (_css1 or 3.77344)
  _css2 = (_css2 or -26.04463)
  _css3 = (_css3 or 30.69913)
  _css4 = (_css4 or -9.22695)
  _cab0 = (_cab0 or 1.0)
  _cab1 = (_cab1 or 3.78569)
  _cab2 = (_cab2 or -14.15261)
  _cab3 = (_cab3 or -7.46589)
  _cab4 = (_cab4 or 17.94491)
  _Fermi_D_cnst = (_Fermi_D_cnst or 1e-10)
  p = get_p("mgga_c_m05", polarized, _gamma_ss, _gamma_ab, _css0, _css1, _css2, _css3, _css4, _cab0, _cab1, _cab2, _cab3, _cab4, _Fermi_D_cnst)
  def _mgga_c_m05_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_c_m05.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_c_m05_epsilon_xc

def mgga_c_m05_2x(
  polarized: bool = True,
  _gamma_ss: Optional[float] = None,
  _gamma_ab: Optional[float] = None,
  _css0: Optional[float] = None,
  _css1: Optional[float] = None,
  _css2: Optional[float] = None,
  _css3: Optional[float] = None,
  _css4: Optional[float] = None,
  _cab0: Optional[float] = None,
  _cab1: Optional[float] = None,
  _cab2: Optional[float] = None,
  _cab3: Optional[float] = None,
  _cab4: Optional[float] = None,
  _Fermi_D_cnst: Optional[float] = None,
) -> Callable:
  r"""
  Y. Zhao, N. E. Schultz, and D. G. Truhlar.,  J. Chem. Theory Comput. 2, 364 (2006)
  `10.1021/ct0502763 <http://pubs.acs.org/doi/abs/10.1021/ct0502763>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _gamma_ss : Optional[float], default: 0.06
    gamma_ss
  _gamma_ab : Optional[float], default: 0.0031
    gamma_ab
  _css0 : Optional[float], default: 1.0
    css0
  _css1 : Optional[float], default: -3.0543
    css1
  _css2 : Optional[float], default: 7.61854
    css2
  _css3 : Optional[float], default: 1.47665
    css3
  _css4 : Optional[float], default: -11.92365
    css4
  _cab0 : Optional[float], default: 1.0
    cab0
  _cab1 : Optional[float], default: 1.09297
    cab1
  _cab2 : Optional[float], default: -3.79171
    cab2
  _cab3 : Optional[float], default: 2.8281
    cab3
  _cab4 : Optional[float], default: -10.58909
    cab4
  _Fermi_D_cnst : Optional[float], default: 1e-10
    Constant for the correction term similar to 10.1063/1.2800011
  """
  _gamma_ss = (_gamma_ss or 0.06)
  _gamma_ab = (_gamma_ab or 0.0031)
  _css0 = (_css0 or 1.0)
  _css1 = (_css1 or -3.0543)
  _css2 = (_css2 or 7.61854)
  _css3 = (_css3 or 1.47665)
  _css4 = (_css4 or -11.92365)
  _cab0 = (_cab0 or 1.0)
  _cab1 = (_cab1 or 1.09297)
  _cab2 = (_cab2 or -3.79171)
  _cab3 = (_cab3 or 2.8281)
  _cab4 = (_cab4 or -10.58909)
  _Fermi_D_cnst = (_Fermi_D_cnst or 1e-10)
  p = get_p("mgga_c_m05_2x", polarized, _gamma_ss, _gamma_ab, _css0, _css1, _css2, _css3, _css4, _cab0, _cab1, _cab2, _cab3, _cab4, _Fermi_D_cnst)
  def _mgga_c_m05_2x_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_c_m05_2x.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_c_m05_2x_epsilon_xc

def mgga_c_pkzb(
  polarized: bool = True,
) -> Callable:
  r"""
  J. P. Perdew, S. Kurth, A. Zupan, and P. Blaha.,  Phys. Rev. Lett. 82, 2544 (1999)
  `10.1103/PhysRevLett.82.2544 <http://link.aps.org/doi/10.1103/PhysRevLett.82.2544>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("mgga_c_pkzb", polarized, )
  def _mgga_c_pkzb_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_c_pkzb.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_c_pkzb_epsilon_xc

def mgga_c_bc95(
  polarized: bool = True,
  _css: Optional[float] = None,
  _copp: Optional[float] = None,
) -> Callable:
  r"""
  A. D. Becke.,  J. Chem. Phys. 104, 1040 (1996)
  `10.1063/1.470829 <http://scitation.aip.org/content/aip/journal/jcp/104/3/10.1063/1.470829>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _css : Optional[float], default: 0.038
    Parallel spin
  _copp : Optional[float], default: 0.0031
    Opposite spin
  """
  _css = (_css or 0.038)
  _copp = (_copp or 0.0031)
  p = get_p("mgga_c_bc95", polarized, _css, _copp)
  def _mgga_c_bc95_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_c_bc95.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_c_bc95_epsilon_xc

def mgga_c_revtpss(
  polarized: bool = True,
  _d: Optional[float] = None,
  _C0_c0: Optional[float] = None,
  _C0_c1: Optional[float] = None,
  _C0_c2: Optional[float] = None,
  _C0_c3: Optional[float] = None,
) -> Callable:
  r"""
  J. P. Perdew, A. Ruzsinszky, G. I. Csonka, L. A. Constantin, and J. Sun.,  Phys. Rev. Lett. 103, 026403 (2009)
  `10.1103/PhysRevLett.103.026403 <http://link.aps.org/doi/10.1103/PhysRevLett.103.026403>`_

  J. P. Perdew, A. Ruzsinszky, G. I. Csonka, L. A. Constantin, and J. Sun.,  Phys. Rev. Lett. 106, 179902 (2011)
  `10.1103/PhysRevLett.106.179902 <http://link.aps.org/doi/10.1103/PhysRevLett.106.179902>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _d : Optional[float], default: 2.8
    d
  _C0_c0 : Optional[float], default: 0.59
    C0_c0
  _C0_c1 : Optional[float], default: 0.9269
    C0_c1
  _C0_c2 : Optional[float], default: 0.6225
    C0_c2
  _C0_c3 : Optional[float], default: 2.154
    C0_c3
  """
  _d = (_d or 2.8)
  _C0_c0 = (_C0_c0 or 0.59)
  _C0_c1 = (_C0_c1 or 0.9269)
  _C0_c2 = (_C0_c2 or 0.6225)
  _C0_c3 = (_C0_c3 or 2.154)
  p = get_p("mgga_c_revtpss", polarized, _d, _C0_c0, _C0_c1, _C0_c2, _C0_c3)
  def _mgga_c_revtpss_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_c_revtpss.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_c_revtpss_epsilon_xc

def mgga_xc_tpsslyp1w(
  polarized: bool = True,
) -> Callable:
  r"""
  E. E. Dahlke and D. G. Truhlar.,  J. Phys. Chem. B 109, 15677 (2005)
  `10.1021/jp052436c <http://pubs.acs.org/doi/abs/10.1021/jp052436c>`_

  
  Mixing of the following functionals:
    lda_c_vwn (coefficient: 0.26)
    mgga_x_tpss (coefficient: 1.0)
    gga_c_lyp (coefficient: 0.74)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("mgga_xc_tpsslyp1w", polarized, )
  def _mgga_xc_tpsslyp1w_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_xc_tpsslyp1w.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  
  _mgga_xc_tpsslyp1w_epsilon_xc.cam_alpha = p.cam_alpha
  _mgga_xc_tpsslyp1w_epsilon_xc.cam_beta = p.cam_beta
  _mgga_xc_tpsslyp1w_epsilon_xc.cam_omega = p.cam_omega
  _mgga_xc_tpsslyp1w_epsilon_xc.nlc_b = p.nlc_b
  _mgga_xc_tpsslyp1w_epsilon_xc.nlc_C = p.nlc_C

  return _mgga_xc_tpsslyp1w_epsilon_xc

def mgga_x_mk00b(
  polarized: bool = True,
) -> Callable:
  r"""
  F. R. Manby and P. J. Knowles.,  J. Chem. Phys. 112, 7002 (2000)
  `10.1063/1.481298 <http://scitation.aip.org/content/aip/journal/jcp/112/16/10.1063/1.481298>`_

  
  Mixing of the following functionals:
    lda_x (coefficient: -1.0)
    gga_x_b88 (coefficient: 1.0)
    mgga_x_mk00 (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("mgga_x_mk00b", polarized, )
  def _mgga_x_mk00b_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_mk00b.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  
  _mgga_x_mk00b_epsilon_xc.cam_alpha = p.cam_alpha
  _mgga_x_mk00b_epsilon_xc.cam_beta = p.cam_beta
  _mgga_x_mk00b_epsilon_xc.cam_omega = p.cam_omega
  _mgga_x_mk00b_epsilon_xc.nlc_b = p.nlc_b
  _mgga_x_mk00b_epsilon_xc.nlc_C = p.nlc_C

  return _mgga_x_mk00b_epsilon_xc

def mgga_x_bloc(
  polarized: bool = True,
  _b: Optional[float] = None,
  _c: Optional[float] = None,
  _e: Optional[float] = None,
  _kappa: Optional[float] = None,
  _mu: Optional[float] = None,
  _BLOC_a: Optional[float] = None,
  _BLOC_b: Optional[float] = None,
) -> Callable:
  r"""
  L. A. Constantin, E. Fabiano, and F. Della Sala.,  J. Chem. Theory Comput. 9, 2256 (2013)
  `10.1021/ct400148r <http://pubs.acs.org/doi/abs/10.1021/ct400148r>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _b : Optional[float], default: 0.4
    b
  _c : Optional[float], default: 1.59096
    c
  _e : Optional[float], default: 1.537
    e
  _kappa : Optional[float], default: 0.804
    Asymptotic value of the enhancement function
  _mu : Optional[float], default: 0.21951
    Coefficient of the 2nd order expansion
  _BLOC_a : Optional[float], default: 4.0
    BLOC_a
  _BLOC_b : Optional[float], default: -3.3
    BLOC_b
  """
  _b = (_b or 0.4)
  _c = (_c or 1.59096)
  _e = (_e or 1.537)
  _kappa = (_kappa or 0.804)
  _mu = (_mu or 0.21951)
  _BLOC_a = (_BLOC_a or 4.0)
  _BLOC_b = (_BLOC_b or -3.3)
  p = get_p("mgga_x_bloc", polarized, _b, _c, _e, _kappa, _mu, _BLOC_a, _BLOC_b)
  def _mgga_x_bloc_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_bloc.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_bloc_epsilon_xc

def mgga_x_modtpss(
  polarized: bool = True,
  _b: Optional[float] = None,
  _c: Optional[float] = None,
  _e: Optional[float] = None,
  _kappa: Optional[float] = None,
  _mu: Optional[float] = None,
  _BLOC_a: Optional[float] = None,
  _BLOC_b: Optional[float] = None,
) -> Callable:
  r"""
  J. P. Perdew, A. Ruzsinszky, J. Tao, G. I. Csonka, and G. E. Scuseria.,  Phys. Rev. A 76, 042506 (2007)
  `10.1103/PhysRevA.76.042506 <http://link.aps.org/doi/10.1103/PhysRevA.76.042506>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _b : Optional[float], default: 0.4
    b
  _c : Optional[float], default: 1.38496
    c
  _e : Optional[float], default: 1.37
    e
  _kappa : Optional[float], default: 0.804
    Asymptotic value of the enhancement function
  _mu : Optional[float], default: 0.252
    Coefficient of the 2nd order expansion
  _BLOC_a : Optional[float], default: 2.0
    BLOC_a
  _BLOC_b : Optional[float], default: 0.0
    BLOC_b
  """
  _b = (_b or 0.4)
  _c = (_c or 1.38496)
  _e = (_e or 1.37)
  _kappa = (_kappa or 0.804)
  _mu = (_mu or 0.252)
  _BLOC_a = (_BLOC_a or 2.0)
  _BLOC_b = (_BLOC_b or 0.0)
  p = get_p("mgga_x_modtpss", polarized, _b, _c, _e, _kappa, _mu, _BLOC_a, _BLOC_b)
  def _mgga_x_modtpss_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_modtpss.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_modtpss_epsilon_xc

def gga_c_pbeloc(
  polarized: bool = True,
) -> Callable:
  r"""
  L. A. Constantin, E. Fabiano, and F. Della Sala.,  Phys. Rev. B 86, 035130 (2012)
  `10.1103/PhysRevB.86.035130 <http://link.aps.org/doi/10.1103/PhysRevB.86.035130>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_c_pbeloc", polarized, )
  def _gga_c_pbeloc_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_c_pbeloc.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_c_pbeloc_epsilon_xc

def mgga_c_tpssloc(
  polarized: bool = True,
) -> Callable:
  r"""
  L. A. Constantin, E. Fabiano, and F. Della Sala.,  Phys. Rev. B 86, 035130 (2012)
  `10.1103/PhysRevB.86.035130 <http://link.aps.org/doi/10.1103/PhysRevB.86.035130>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("mgga_c_tpssloc", polarized, )
  def _mgga_c_tpssloc_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_c_tpssloc.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_c_tpssloc_epsilon_xc

def hyb_mgga_x_mn12_sx(
  polarized: bool = True,
  _CC000: Optional[float] = None,
  _CC001: Optional[float] = None,
  _CC002: Optional[float] = None,
  _CC003: Optional[float] = None,
  _CC004: Optional[float] = None,
  _CC005: Optional[float] = None,
  _CC010: Optional[float] = None,
  _CC011: Optional[float] = None,
  _CC012: Optional[float] = None,
  _CC013: Optional[float] = None,
  _CC014: Optional[float] = None,
  _CC020: Optional[float] = None,
  _CC021: Optional[float] = None,
  _CC022: Optional[float] = None,
  _CC023: Optional[float] = None,
  _CC030: Optional[float] = None,
  _CC031: Optional[float] = None,
  _CC032: Optional[float] = None,
  _CC100: Optional[float] = None,
  _CC101: Optional[float] = None,
  _CC102: Optional[float] = None,
  _CC103: Optional[float] = None,
  _CC104: Optional[float] = None,
  _CC110: Optional[float] = None,
  _CC111: Optional[float] = None,
  _CC112: Optional[float] = None,
  _CC113: Optional[float] = None,
  _CC120: Optional[float] = None,
  _CC121: Optional[float] = None,
  _CC122: Optional[float] = None,
  _CC200: Optional[float] = None,
  _CC201: Optional[float] = None,
  _CC202: Optional[float] = None,
  _CC203: Optional[float] = None,
  _CC210: Optional[float] = None,
  _CC211: Optional[float] = None,
  _CC212: Optional[float] = None,
  _CC300: Optional[float] = None,
  _CC301: Optional[float] = None,
  _CC302: Optional[float] = None,
  _ax: Optional[float] = None,
  _sx: Optional[float] = None,
  _omega: Optional[float] = None,
) -> Callable:
  r"""
  R. Peverati and D. G. Truhlar.,  Phys. Chem. Chem. Phys. 14, 16187 (2012)
  `10.1039/C2CP42576A <http://pubs.rsc.org/en/Content/ArticleLanding/2012/CP/c2cp42576a>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _CC000 : Optional[float], default: 0.5226556
    CC000
  _CC001 : Optional[float], default: -0.2681208
    CC001
  _CC002 : Optional[float], default: -4.670705
    CC002
  _CC003 : Optional[float], default: 3.06732
    CC003
  _CC004 : Optional[float], default: 4.09537
    CC004
  _CC005 : Optional[float], default: 2.653023
    CC005
  _CC010 : Optional[float], default: 0.5165969
    CC010
  _CC011 : Optional[float], default: -20.35442
    CC011
  _CC012 : Optional[float], default: -9.946472
    CC012
  _CC013 : Optional[float], default: 2.938637
    CC013
  _CC014 : Optional[float], default: 11.311
    CC014
  _CC020 : Optional[float], default: 4.752452
    CC020
  _CC021 : Optional[float], default: -3.061331
    CC021
  _CC022 : Optional[float], default: -25.23173
    CC022
  _CC023 : Optional[float], default: 17.10903
    CC023
  _CC030 : Optional[float], default: -23.5748
    CC030
  _CC031 : Optional[float], default: -27.27754
    CC031
  _CC032 : Optional[float], default: 16.03291
    CC032
  _CC100 : Optional[float], default: 1.842503
    CC100
  _CC101 : Optional[float], default: 1.92712
    CC101
  _CC102 : Optional[float], default: 11.07987
    CC102
  _CC103 : Optional[float], default: -11.82087
    CC103
  _CC104 : Optional[float], default: -11.17768
    CC104
  _CC110 : Optional[float], default: -5.821
    CC110
  _CC111 : Optional[float], default: 22.66545
    CC111
  _CC112 : Optional[float], default: 8.246708
    CC112
  _CC113 : Optional[float], default: -4.778364
    CC113
  _CC120 : Optional[float], default: 0.5329122
    CC120
  _CC121 : Optional[float], default: -6.666755
    CC121
  _CC122 : Optional[float], default: 1.671429
    CC122
  _CC200 : Optional[float], default: -3.311409
    CC200
  _CC201 : Optional[float], default: 0.3415913
    CC201
  _CC202 : Optional[float], default: -6.413076
    CC202
  _CC203 : Optional[float], default: 10.38584
    CC203
  _CC210 : Optional[float], default: 9.026277
    CC210
  _CC211 : Optional[float], default: 19.29689
    CC211
  _CC212 : Optional[float], default: 26.69232
    CC212
  _CC300 : Optional[float], default: 1.517278
    CC300
  _CC301 : Optional[float], default: -3.442503
    CC301
  _CC302 : Optional[float], default: 1.100161
    CC302
  _ax : Optional[float], default: 0.0
    exact exchange
  _sx : Optional[float], default: 0.25
    short-range exchange
  _omega : Optional[float], default: 0.11
    range separation
  """
  _CC000 = (_CC000 or 0.5226556)
  _CC001 = (_CC001 or -0.2681208)
  _CC002 = (_CC002 or -4.670705)
  _CC003 = (_CC003 or 3.06732)
  _CC004 = (_CC004 or 4.09537)
  _CC005 = (_CC005 or 2.653023)
  _CC010 = (_CC010 or 0.5165969)
  _CC011 = (_CC011 or -20.35442)
  _CC012 = (_CC012 or -9.946472)
  _CC013 = (_CC013 or 2.938637)
  _CC014 = (_CC014 or 11.311)
  _CC020 = (_CC020 or 4.752452)
  _CC021 = (_CC021 or -3.061331)
  _CC022 = (_CC022 or -25.23173)
  _CC023 = (_CC023 or 17.10903)
  _CC030 = (_CC030 or -23.5748)
  _CC031 = (_CC031 or -27.27754)
  _CC032 = (_CC032 or 16.03291)
  _CC100 = (_CC100 or 1.842503)
  _CC101 = (_CC101 or 1.92712)
  _CC102 = (_CC102 or 11.07987)
  _CC103 = (_CC103 or -11.82087)
  _CC104 = (_CC104 or -11.17768)
  _CC110 = (_CC110 or -5.821)
  _CC111 = (_CC111 or 22.66545)
  _CC112 = (_CC112 or 8.246708)
  _CC113 = (_CC113 or -4.778364)
  _CC120 = (_CC120 or 0.5329122)
  _CC121 = (_CC121 or -6.666755)
  _CC122 = (_CC122 or 1.671429)
  _CC200 = (_CC200 or -3.311409)
  _CC201 = (_CC201 or 0.3415913)
  _CC202 = (_CC202 or -6.413076)
  _CC203 = (_CC203 or 10.38584)
  _CC210 = (_CC210 or 9.026277)
  _CC211 = (_CC211 or 19.29689)
  _CC212 = (_CC212 or 26.69232)
  _CC300 = (_CC300 or 1.517278)
  _CC301 = (_CC301 or -3.442503)
  _CC302 = (_CC302 or 1.100161)
  _ax = (_ax or 0.0)
  _sx = (_sx or 0.25)
  _omega = (_omega or 0.11)
  p = get_p("hyb_mgga_x_mn12_sx", polarized, _CC000, _CC001, _CC002, _CC003, _CC004, _CC005, _CC010, _CC011, _CC012, _CC013, _CC014, _CC020, _CC021, _CC022, _CC023, _CC030, _CC031, _CC032, _CC100, _CC101, _CC102, _CC103, _CC104, _CC110, _CC111, _CC112, _CC113, _CC120, _CC121, _CC122, _CC200, _CC201, _CC202, _CC203, _CC210, _CC211, _CC212, _CC300, _CC301, _CC302, _ax, _sx, _omega)
  def _hyb_mgga_x_mn12_sx_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_mgga_x_mn12_sx.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _hyb_mgga_x_mn12_sx_epsilon_xc

def mgga_x_mbeef(
  polarized: bool = True,
) -> Callable:
  r"""
  J. Wellendorff, K. T. Lundgaard, K. W. Jacobsen, and T. Bligaard.,  J. Chem. Phys. 140, 144107 (2014)
  `10.1063/1.4870397 <http://scitation.aip.org/content/aip/journal/jcp/140/14/10.1063/1.4870397>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("mgga_x_mbeef", polarized, )
  def _mgga_x_mbeef_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_mbeef.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_mbeef_epsilon_xc

def mgga_x_mbeefvdw(
  polarized: bool = True,
) -> Callable:
  r"""
  K. T. Lundgaard, J. Wellendorff, J. Voss, K. W. Jacobsen, and T. Bligaard.,  Phys. Rev. B 93, 235162 (2016)
  `10.1103/PhysRevB.93.235162 <http://link.aps.org/doi/10.1103/PhysRevB.93.235162>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("mgga_x_mbeefvdw", polarized, )
  def _mgga_x_mbeefvdw_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_mbeefvdw.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_mbeefvdw_epsilon_xc

def mgga_c_tm(
  polarized: bool = True,
  _beta: Optional[float] = None,
  _d: Optional[float] = None,
  _C0_c0: Optional[float] = None,
  _C0_c1: Optional[float] = None,
  _C0_c2: Optional[float] = None,
  _C0_c3: Optional[float] = None,
) -> Callable:
  r"""
  J. Tao and Y. Mo.,  Phys. Rev. Lett. 117, 073001 (2016)
  `10.1103/PhysRevLett.117.073001 <http://link.aps.org/doi/10.1103/PhysRevLett.117.073001>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _beta : Optional[float], default: 0.06672455060314922
    beta
  _d : Optional[float], default: 2.8
    d
  _C0_c0 : Optional[float], default: 0.0
    C0_c0
  _C0_c1 : Optional[float], default: 0.1
    C0_c1
  _C0_c2 : Optional[float], default: 0.32
    C0_c2
  _C0_c3 : Optional[float], default: 0.0
    C0_c3
  """
  _beta = (_beta or 0.06672455060314922)
  _d = (_d or 2.8)
  _C0_c0 = (_C0_c0 or 0.0)
  _C0_c1 = (_C0_c1 or 0.1)
  _C0_c2 = (_C0_c2 or 0.32)
  _C0_c3 = (_C0_c3 or 0.0)
  p = get_p("mgga_c_tm", polarized, _beta, _d, _C0_c0, _C0_c1, _C0_c2, _C0_c3)
  def _mgga_c_tm_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_c_tm.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_c_tm_epsilon_xc

def gga_c_p86vwn(
  polarized: bool = True,
  _malpha: Optional[float] = None,
  _mbeta: Optional[float] = None,
  _mgamma: Optional[float] = None,
  _mdelta: Optional[float] = None,
  _aa: Optional[float] = None,
  _bb: Optional[float] = None,
  _ftilde: Optional[float] = None,
) -> Callable:
  r"""
  J. P. Perdew.,  Phys. Rev. B 33, 8822 (1986)
  `10.1103/PhysRevB.33.8822 <http://link.aps.org/doi/10.1103/PhysRevB.33.8822>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _malpha : Optional[float], default: 0.023266
    alpha in eq 6
  _mbeta : Optional[float], default: 7.389e-06
    beta in eq 6
  _mgamma : Optional[float], default: 8.723
    gamma in eq 6
  _mdelta : Optional[float], default: 0.472
    delta in eq 6
  _aa : Optional[float], default: 0.001667
    linear parameter in eq 6
  _bb : Optional[float], default: 0.002568
    constant in the numerator in eq 6
  _ftilde : Optional[float], default: 0.19195
    constant in eq 9
  """
  _malpha = (_malpha or 0.023266)
  _mbeta = (_mbeta or 7.389e-06)
  _mgamma = (_mgamma or 8.723)
  _mdelta = (_mdelta or 0.472)
  _aa = (_aa or 0.001667)
  _bb = (_bb or 0.002568)
  _ftilde = (_ftilde or 0.19195)
  p = get_p("gga_c_p86vwn", polarized, _malpha, _mbeta, _mgamma, _mdelta, _aa, _bb, _ftilde)
  def _gga_c_p86vwn_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_c_p86vwn.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_c_p86vwn_epsilon_xc

def gga_c_p86vwn_ft(
  polarized: bool = True,
  _malpha: Optional[float] = None,
  _mbeta: Optional[float] = None,
  _mgamma: Optional[float] = None,
  _mdelta: Optional[float] = None,
  _aa: Optional[float] = None,
  _bb: Optional[float] = None,
  _ftilde: Optional[float] = None,
) -> Callable:
  r"""
  J. P. Perdew.,  Phys. Rev. B 33, 8822 (1986)
  `10.1103/PhysRevB.33.8822 <http://link.aps.org/doi/10.1103/PhysRevB.33.8822>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _malpha : Optional[float], default: 0.023266
    alpha in eq 6
  _mbeta : Optional[float], default: 7.389e-06
    beta in eq 6
  _mgamma : Optional[float], default: 8.723
    gamma in eq 6
  _mdelta : Optional[float], default: 0.472
    delta in eq 6
  _aa : Optional[float], default: 0.001667
    linear parameter in eq 6
  _bb : Optional[float], default: 0.002568
    constant in the numerator in eq 6
  _ftilde : Optional[float], default: 0.19199566167376364
    constant in eq 9
  """
  _malpha = (_malpha or 0.023266)
  _mbeta = (_mbeta or 7.389e-06)
  _mgamma = (_mgamma or 8.723)
  _mdelta = (_mdelta or 0.472)
  _aa = (_aa or 0.001667)
  _bb = (_bb or 0.002568)
  _ftilde = (_ftilde or 0.19199566167376364)
  p = get_p("gga_c_p86vwn_ft", polarized, _malpha, _mbeta, _mgamma, _mdelta, _aa, _bb, _ftilde)
  def _gga_c_p86vwn_ft_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_c_p86vwn_ft.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_c_p86vwn_ft_epsilon_xc

def mgga_xc_b97m_v(
  polarized: bool = True,
) -> Callable:
  r"""
  N. Mardirossian and M. Head-Gordon.,  J. Chem. Phys. 142, 074111 (2015)
  `10.1063/1.4907719 <https://doi.org/10.1063/1.4907719>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("mgga_xc_b97m_v", polarized, )
  def _mgga_xc_b97m_v_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_xc_b97m_v.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_xc_b97m_v_epsilon_xc

def gga_xc_vv10(
  polarized: bool = True,
  _b: Optional[float] = None,
  _C: Optional[float] = None,
) -> Callable:
  r"""
  O. A. Vydrov and T. Van Voorhis.,  J. Chem. Phys. 133, 244103 (2010)
  `10.1063/1.3521275 <https://doi.org/10.1063/1.3521275>`_

  
  Mixing of the following functionals:
    gga_x_rpw86 (coefficient: 1.0)
    gga_c_pbe (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _b : Optional[float], default: 5.9
    VV10 b parameter
  _C : Optional[float], default: 0.0093
    VV10 C parameter
  """
  _b = (_b or 5.9)
  _C = (_C or 0.0093)
  p = get_p("gga_xc_vv10", polarized, _b, _C)
  def _gga_xc_vv10_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_xc_vv10.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _gga_xc_vv10_epsilon_xc.cam_alpha = p.cam_alpha
  _gga_xc_vv10_epsilon_xc.cam_beta = p.cam_beta
  _gga_xc_vv10_epsilon_xc.cam_omega = p.cam_omega
  _gga_xc_vv10_epsilon_xc.nlc_b = p.nlc_b
  _gga_xc_vv10_epsilon_xc.nlc_C = p.nlc_C

  return _gga_xc_vv10_epsilon_xc

def mgga_x_jk(
  polarized: bool = True,
  _beta: Optional[float] = None,
  _gamma: Optional[float] = None,
) -> Callable:
  r"""
  P. Jemmer and P. J. Knowles.,  Phys. Rev. A 51, 3571–3575 (1995)
  `10.1103/PhysRevA.51.3571 <https://link.aps.org/doi/10.1103/PhysRevA.51.3571>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _beta : Optional[float], default: 0.0586
    beta/X_FACTOR_C is the coefficient of the gradient expansion
  _gamma : Optional[float], default: 6.0
    gamma should be 6 to get the right asymptotics of Ex
  """
  _beta = (_beta or 0.0586)
  _gamma = (_gamma or 6.0)
  p = get_p("mgga_x_jk", polarized, _beta, _gamma)
  def _mgga_x_jk_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_jk.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_jk_epsilon_xc

def mgga_x_mvs(
  polarized: bool = True,
  _e1: Optional[float] = None,
  _c1: Optional[float] = None,
  _k0: Optional[float] = None,
  _b: Optional[float] = None,
) -> Callable:
  r"""
  J. Sun, J. P. Perdew, and A. Ruzsinszky.,  Proc. Natl. Acad. Sci. U. S. A. 112, 685-689 (2015)
  `10.1073/pnas.1423145112 <http://www.pnas.org/content/112/3/685.abstract>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _e1 : Optional[float], default: -1.6665
    e1 parameter
  _c1 : Optional[float], default: 0.7438
    c1 parameter
  _k0 : Optional[float], default: 0.174
    k0 parameter
  _b : Optional[float], default: 0.0233
    b parameter
  """
  _e1 = (_e1 or -1.6665)
  _c1 = (_c1 or 0.7438)
  _k0 = (_k0 or 0.174)
  _b = (_b or 0.0233)
  p = get_p("mgga_x_mvs", polarized, _e1, _c1, _k0, _b)
  def _mgga_x_mvs_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_mvs.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_mvs_epsilon_xc

def gga_c_pbefe(
  polarized: bool = True,
  _beta: Optional[float] = None,
  _gamma: Optional[float] = None,
  _B: Optional[float] = None,
) -> Callable:
  r"""
  R. Sarmiento-Pérez, S. Botti, and M. A. L. Marques.,  J. Chem. Theory Comput. 11, 3844-3850 (2015)
  `10.1021/acs.jctc.5b00529 <http://doi.org/10.1021/acs.jctc.5b00529>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _beta : Optional[float], default: 0.043
    beta constant
  _gamma : Optional[float], default: 0.031090690869654894
    (1 - ln(2))/Pi^2 in the PBE
  _B : Optional[float], default: 1.0
    Multiplies the A t^2 term. Used in the SPBE functional
  """
  _beta = (_beta or 0.043)
  _gamma = (_gamma or 0.031090690869654894)
  _B = (_B or 1.0)
  p = get_p("gga_c_pbefe", polarized, _beta, _gamma, _B)
  def _gga_c_pbefe_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_c_pbefe.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_c_pbefe_epsilon_xc

def lda_xc_ksdt(
  polarized: bool = True,
  T: Optional[float] = None,
) -> Callable:
  r"""
  V. V. Karasiev, T. Sjostrom, J. Dufty, and S. B. Trickey.,  Phys. Rev. Lett. 112, 076403 (2014)
  `10.1103/PhysRevLett.112.076403 <http://link.aps.org/doi/10.1103/PhysRevLett.112.076403>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  T : Optional[float], default: 0.0
    Temperature
  """
  T = (T or 0.0)
  p = get_p("lda_xc_ksdt", polarized, T)
  def _lda_xc_ksdt_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of lda_xc_ksdt.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _lda_xc_ksdt_epsilon_xc

def mgga_x_mn15_l(
  polarized: bool = True,
  _CC000: Optional[float] = None,
  _CC001: Optional[float] = None,
  _CC002: Optional[float] = None,
  _CC003: Optional[float] = None,
  _CC004: Optional[float] = None,
  _CC005: Optional[float] = None,
  _CC010: Optional[float] = None,
  _CC011: Optional[float] = None,
  _CC012: Optional[float] = None,
  _CC013: Optional[float] = None,
  _CC014: Optional[float] = None,
  _CC020: Optional[float] = None,
  _CC021: Optional[float] = None,
  _CC022: Optional[float] = None,
  _CC023: Optional[float] = None,
  _CC030: Optional[float] = None,
  _CC031: Optional[float] = None,
  _CC032: Optional[float] = None,
  _CC100: Optional[float] = None,
  _CC101: Optional[float] = None,
  _CC102: Optional[float] = None,
  _CC103: Optional[float] = None,
  _CC104: Optional[float] = None,
  _CC110: Optional[float] = None,
  _CC111: Optional[float] = None,
  _CC112: Optional[float] = None,
  _CC113: Optional[float] = None,
  _CC120: Optional[float] = None,
  _CC121: Optional[float] = None,
  _CC122: Optional[float] = None,
  _CC200: Optional[float] = None,
  _CC201: Optional[float] = None,
  _CC202: Optional[float] = None,
  _CC203: Optional[float] = None,
  _CC210: Optional[float] = None,
  _CC211: Optional[float] = None,
  _CC212: Optional[float] = None,
  _CC300: Optional[float] = None,
  _CC301: Optional[float] = None,
  _CC302: Optional[float] = None,
) -> Callable:
  r"""
  H. S. Yu, X. He, and D. G. Truhlar.,  J. Chem. Theory Comput. 12, 1280-1293 (2016)
  `10.1021/acs.jctc.5b01082 <http://doi.org/10.1021/acs.jctc.5b01082>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _CC000 : Optional[float], default: 0.670864162
    CC000
  _CC001 : Optional[float], default: -0.822003903
    CC001
  _CC002 : Optional[float], default: -1.022407046
    CC002
  _CC003 : Optional[float], default: 1.689460986
    CC003
  _CC004 : Optional[float], default: -0.00562032
    CC004
  _CC005 : Optional[float], default: -0.110293849
    CC005
  _CC010 : Optional[float], default: 0.972245178
    CC010
  _CC011 : Optional[float], default: -6.697641991
    CC011
  _CC012 : Optional[float], default: -4.322814495
    CC012
  _CC013 : Optional[float], default: -6.786641376
    CC013
  _CC014 : Optional[float], default: -5.687461462
    CC014
  _CC020 : Optional[float], default: 9.419643818
    CC020
  _CC021 : Optional[float], default: 11.83939406
    CC021
  _CC022 : Optional[float], default: 5.086951311
    CC022
  _CC023 : Optional[float], default: 4.302369948
    CC023
  _CC030 : Optional[float], default: -8.07344065
    CC030
  _CC031 : Optional[float], default: 2.429988978
    CC031
  _CC032 : Optional[float], default: 11.09485698
    CC032
  _CC100 : Optional[float], default: 1.247333909
    CC100
  _CC101 : Optional[float], default: 3.700485291
    CC101
  _CC102 : Optional[float], default: 0.867791614
    CC102
  _CC103 : Optional[float], default: -0.591190518
    CC103
  _CC104 : Optional[float], default: -0.295305435
    CC104
  _CC110 : Optional[float], default: -5.825759145
    CC110
  _CC111 : Optional[float], default: 2.537532196
    CC111
  _CC112 : Optional[float], default: 3.143390933
    CC112
  _CC113 : Optional[float], default: 2.939126332
    CC113
  _CC120 : Optional[float], default: 0.599342114
    CC120
  _CC121 : Optional[float], default: 2.241702738
    CC121
  _CC122 : Optional[float], default: 2.035713838
    CC122
  _CC200 : Optional[float], default: -1.525344043
    CC200
  _CC201 : Optional[float], default: -2.325875691
    CC201
  _CC202 : Optional[float], default: 1.141940663
    CC202
  _CC203 : Optional[float], default: -1.563165026
    CC203
  _CC210 : Optional[float], default: 7.882032871
    CC210
  _CC211 : Optional[float], default: 11.93400684
    CC211
  _CC212 : Optional[float], default: 9.852928303
    CC212
  _CC300 : Optional[float], default: 0.584030245
    CC300
  _CC301 : Optional[float], default: -0.720941131
    CC301
  _CC302 : Optional[float], default: -2.836037078
    CC302
  """
  _CC000 = (_CC000 or 0.670864162)
  _CC001 = (_CC001 or -0.822003903)
  _CC002 = (_CC002 or -1.022407046)
  _CC003 = (_CC003 or 1.689460986)
  _CC004 = (_CC004 or -0.00562032)
  _CC005 = (_CC005 or -0.110293849)
  _CC010 = (_CC010 or 0.972245178)
  _CC011 = (_CC011 or -6.697641991)
  _CC012 = (_CC012 or -4.322814495)
  _CC013 = (_CC013 or -6.786641376)
  _CC014 = (_CC014 or -5.687461462)
  _CC020 = (_CC020 or 9.419643818)
  _CC021 = (_CC021 or 11.83939406)
  _CC022 = (_CC022 or 5.086951311)
  _CC023 = (_CC023 or 4.302369948)
  _CC030 = (_CC030 or -8.07344065)
  _CC031 = (_CC031 or 2.429988978)
  _CC032 = (_CC032 or 11.09485698)
  _CC100 = (_CC100 or 1.247333909)
  _CC101 = (_CC101 or 3.700485291)
  _CC102 = (_CC102 or 0.867791614)
  _CC103 = (_CC103 or -0.591190518)
  _CC104 = (_CC104 or -0.295305435)
  _CC110 = (_CC110 or -5.825759145)
  _CC111 = (_CC111 or 2.537532196)
  _CC112 = (_CC112 or 3.143390933)
  _CC113 = (_CC113 or 2.939126332)
  _CC120 = (_CC120 or 0.599342114)
  _CC121 = (_CC121 or 2.241702738)
  _CC122 = (_CC122 or 2.035713838)
  _CC200 = (_CC200 or -1.525344043)
  _CC201 = (_CC201 or -2.325875691)
  _CC202 = (_CC202 or 1.141940663)
  _CC203 = (_CC203 or -1.563165026)
  _CC210 = (_CC210 or 7.882032871)
  _CC211 = (_CC211 or 11.93400684)
  _CC212 = (_CC212 or 9.852928303)
  _CC300 = (_CC300 or 0.584030245)
  _CC301 = (_CC301 or -0.720941131)
  _CC302 = (_CC302 or -2.836037078)
  p = get_p("mgga_x_mn15_l", polarized, _CC000, _CC001, _CC002, _CC003, _CC004, _CC005, _CC010, _CC011, _CC012, _CC013, _CC014, _CC020, _CC021, _CC022, _CC023, _CC030, _CC031, _CC032, _CC100, _CC101, _CC102, _CC103, _CC104, _CC110, _CC111, _CC112, _CC113, _CC120, _CC121, _CC122, _CC200, _CC201, _CC202, _CC203, _CC210, _CC211, _CC212, _CC300, _CC301, _CC302)
  def _mgga_x_mn15_l_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_mn15_l.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_mn15_l_epsilon_xc

def mgga_c_mn15_l(
  polarized: bool = True,
  _a0: Optional[float] = None,
  _a1: Optional[float] = None,
  _a2: Optional[float] = None,
  _a3: Optional[float] = None,
  _a4: Optional[float] = None,
  _a5: Optional[float] = None,
  _a6: Optional[float] = None,
  _a7: Optional[float] = None,
  _a8: Optional[float] = None,
  _a9: Optional[float] = None,
  _a10: Optional[float] = None,
  _a11: Optional[float] = None,
  _b0: Optional[float] = None,
  _b1: Optional[float] = None,
  _b2: Optional[float] = None,
  _b3: Optional[float] = None,
  _b4: Optional[float] = None,
  _b5: Optional[float] = None,
  _b6: Optional[float] = None,
  _b7: Optional[float] = None,
  _b8: Optional[float] = None,
  _b9: Optional[float] = None,
  _b10: Optional[float] = None,
  _b11: Optional[float] = None,
) -> Callable:
  r"""
  H. S. Yu, X. He, and D. G. Truhlar.,  J. Chem. Theory Comput. 12, 1280-1293 (2016)
  `10.1021/acs.jctc.5b01082 <http://doi.org/10.1021/acs.jctc.5b01082>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a0 : Optional[float], default: 0.952058087
    a0
  _a1 : Optional[float], default: -0.756954364
    a1
  _a2 : Optional[float], default: 5.677396094
    a2
  _a3 : Optional[float], default: -5.017104782
    a3
  _a4 : Optional[float], default: -5.10654071
    a4
  _a5 : Optional[float], default: -4.812053335
    a5
  _a6 : Optional[float], default: 3.397640087
    a6
  _a7 : Optional[float], default: 1.980041517
    a7
  _a8 : Optional[float], default: 10.1231046
    a8
  _a9 : Optional[float], default: 0.0
    a9
  _a10 : Optional[float], default: 0.0
    a10
  _a11 : Optional[float], default: 0.0
    a11
  _b0 : Optional[float], default: 0.819504932
    b0
  _b1 : Optional[float], default: -7.689358913
    b1
  _b2 : Optional[float], default: -0.70532663
    b2
  _b3 : Optional[float], default: -0.600096421
    b3
  _b4 : Optional[float], default: 11.03332527
    b4
  _b5 : Optional[float], default: 5.861969337
    b5
  _b6 : Optional[float], default: 8.913865465
    b6
  _b7 : Optional[float], default: 5.74529876
    b7
  _b8 : Optional[float], default: 4.254880837
    b8
  _b9 : Optional[float], default: 0.0
    b9
  _b10 : Optional[float], default: 0.0
    b10
  _b11 : Optional[float], default: 0.0
    b11
  """
  _a0 = (_a0 or 0.952058087)
  _a1 = (_a1 or -0.756954364)
  _a2 = (_a2 or 5.677396094)
  _a3 = (_a3 or -5.017104782)
  _a4 = (_a4 or -5.10654071)
  _a5 = (_a5 or -4.812053335)
  _a6 = (_a6 or 3.397640087)
  _a7 = (_a7 or 1.980041517)
  _a8 = (_a8 or 10.1231046)
  _a9 = (_a9 or 0.0)
  _a10 = (_a10 or 0.0)
  _a11 = (_a11 or 0.0)
  _b0 = (_b0 or 0.819504932)
  _b1 = (_b1 or -7.689358913)
  _b2 = (_b2 or -0.70532663)
  _b3 = (_b3 or -0.600096421)
  _b4 = (_b4 or 11.03332527)
  _b5 = (_b5 or 5.861969337)
  _b6 = (_b6 or 8.913865465)
  _b7 = (_b7 or 5.74529876)
  _b8 = (_b8 or 4.254880837)
  _b9 = (_b9 or 0.0)
  _b10 = (_b10 or 0.0)
  _b11 = (_b11 or 0.0)
  p = get_p("mgga_c_mn15_l", polarized, _a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8, _a9, _a10, _a11, _b0, _b1, _b2, _b3, _b4, _b5, _b6, _b7, _b8, _b9, _b10, _b11)
  def _mgga_c_mn15_l_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_c_mn15_l.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_c_mn15_l_epsilon_xc

def gga_c_op_pw91(
  polarized: bool = True,
) -> Callable:
  r"""
  T. Tsuneda, T. Suzumura, and K. Hirao.,  J. Chem. Phys. 110, 10664 (1999)
  `10.1063/1.479012 <http://scitation.aip.org/content/aip/journal/jcp/110/22/10.1063/1.479012>`_

  T. Tsuneda, T. Suzumura, and K. Hirao.,  J. Chem. Phys. 111, 5656-5667 (1999)
  `10.1063/1.479954 <http://scitation.aip.org/content/aip/journal/jcp/111/13/10.1063/1.479954>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_c_op_pw91", polarized, )
  def _gga_c_op_pw91_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_c_op_pw91.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_c_op_pw91_epsilon_xc

def mgga_x_scan(
  polarized: bool = True,
  _c1: Optional[float] = None,
  _c2: Optional[float] = None,
  _d: Optional[float] = None,
  _k1: Optional[float] = None,
) -> Callable:
  r"""
  J. Sun, A. Ruzsinszky, and J. P. Perdew.,  Phys. Rev. Lett. 115, 036402 (2015)
  `10.1103/PhysRevLett.115.036402 <http://link.aps.org/doi/10.1103/PhysRevLett.115.036402>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _c1 : Optional[float], default: 0.667
    c1 parameter
  _c2 : Optional[float], default: 0.8
    c2 parameter
  _d : Optional[float], default: 1.24
    d parameter
  _k1 : Optional[float], default: 0.065
    k1 parameter
  """
  _c1 = (_c1 or 0.667)
  _c2 = (_c2 or 0.8)
  _d = (_d or 1.24)
  _k1 = (_k1 or 0.065)
  p = get_p("mgga_x_scan", polarized, _c1, _c2, _d, _k1)
  def _mgga_x_scan_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_scan.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_scan_epsilon_xc

def hyb_mgga_x_scan0(
  polarized: bool = True,
  _exx: Optional[float] = None,
) -> Callable:
  r"""
  K. Hui and J.-D. Chai.,  J. Chem. Phys. 144, 044114 (2016)
  `10.1063/1.4940734 <https://doi.org/10.1063/1.4940734>`_

  
  Mixing of the following functionals:
    mgga_x_scan (coefficient: 0.75)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _exx : Optional[float], default: 0.25
    fraction of exact exchange
  """
  _exx = (_exx or 0.25)
  p = get_p("hyb_mgga_x_scan0", polarized, _exx)
  def _hyb_mgga_x_scan0_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_mgga_x_scan0.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  
  _hyb_mgga_x_scan0_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_mgga_x_scan0_epsilon_xc.cam_beta = p.cam_beta
  _hyb_mgga_x_scan0_epsilon_xc.cam_omega = p.cam_omega
  _hyb_mgga_x_scan0_epsilon_xc.nlc_b = p.nlc_b
  _hyb_mgga_x_scan0_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_mgga_x_scan0_epsilon_xc

def gga_x_pbefe(
  polarized: bool = True,
  _kappa: Optional[float] = None,
  _mu: Optional[float] = None,
) -> Callable:
  r"""
  R. Sarmiento-Pérez, S. Botti, and M. A. L. Marques.,  J. Chem. Theory Comput. 11, 3844-3850 (2015)
  `10.1021/acs.jctc.5b00529 <http://doi.org/10.1021/acs.jctc.5b00529>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _kappa : Optional[float], default: 0.437
    Asymptotic value of the enhancement function
  _mu : Optional[float], default: 0.346
    Coefficient of the 2nd order expansion
  """
  _kappa = (_kappa or 0.437)
  _mu = (_mu or 0.346)
  p = get_p("gga_x_pbefe", polarized, _kappa, _mu)
  def _gga_x_pbefe_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_pbefe.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_pbefe_epsilon_xc

def hyb_gga_xc_b97_1p(
  polarized: bool = True,
  _cx0: Optional[float] = None,
  _cx1: Optional[float] = None,
  _cx2: Optional[float] = None,
  _cx3: Optional[float] = None,
  _cx4: Optional[float] = None,
  _css0: Optional[float] = None,
  _css1: Optional[float] = None,
  _css2: Optional[float] = None,
  _css3: Optional[float] = None,
  _css4: Optional[float] = None,
  _cos0: Optional[float] = None,
  _cos1: Optional[float] = None,
  _cos2: Optional[float] = None,
  _cos3: Optional[float] = None,
  _cos4: Optional[float] = None,
  _cxx: Optional[float] = None,
) -> Callable:
  r"""
  A. J. Cohen and N. C. Handy.,  Chem. Phys. Lett. 316, 160 (2000)
  `10.1016/S0009-2614(99)01273-7 <http://www.sciencedirect.com/science/article/pii/S0009261499012737>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _cx0 : Optional[float], default: 0.8773
    u^0 coefficient for exchange
  _cx1 : Optional[float], default: 0.2149
    u^1 coefficient for exchange
  _cx2 : Optional[float], default: 1.5204
    u^2 coefficient for exchange
  _cx3 : Optional[float], default: 0.0
    u^3 coefficient for exchange
  _cx4 : Optional[float], default: 0.0
    u^4 coefficient for exchange
  _css0 : Optional[float], default: 0.2228
    u^0 coefficient for same-spin correlation
  _css1 : Optional[float], default: 1.3678
    u^1 coefficient for same-spin correlation
  _css2 : Optional[float], default: -1.5068
    u^2 coefficient for same-spin correlation
  _css3 : Optional[float], default: 0.0
    u^3 coefficient for same-spin correlation
  _css4 : Optional[float], default: 0.0
    u^4 coefficient for same-spin correlation
  _cos0 : Optional[float], default: 0.9253
    u^0 coefficient for opposite-spin correlation
  _cos1 : Optional[float], default: 2.027
    u^1 coefficient for opposite-spin correlation
  _cos2 : Optional[float], default: -7.3431
    u^2 coefficient for opposite-spin correlation
  _cos3 : Optional[float], default: 0.0
    u^3 coefficient for opposite-spin correlation
  _cos4 : Optional[float], default: 0.0
    u^4 coefficient for opposite-spin correlation
  _cxx : Optional[float], default: 0.15
    coefficient for exact exchange
  """
  _cx0 = (_cx0 or 0.8773)
  _cx1 = (_cx1 or 0.2149)
  _cx2 = (_cx2 or 1.5204)
  _cx3 = (_cx3 or 0.0)
  _cx4 = (_cx4 or 0.0)
  _css0 = (_css0 or 0.2228)
  _css1 = (_css1 or 1.3678)
  _css2 = (_css2 or -1.5068)
  _css3 = (_css3 or 0.0)
  _css4 = (_css4 or 0.0)
  _cos0 = (_cos0 or 0.9253)
  _cos1 = (_cos1 or 2.027)
  _cos2 = (_cos2 or -7.3431)
  _cos3 = (_cos3 or 0.0)
  _cos4 = (_cos4 or 0.0)
  _cxx = (_cxx or 0.15)
  p = get_p("hyb_gga_xc_b97_1p", polarized, _cx0, _cx1, _cx2, _cx3, _cx4, _css0, _css1, _css2, _css3, _css4, _cos0, _cos1, _cos2, _cos3, _cos4, _cxx)
  def _hyb_gga_xc_b97_1p_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_b97_1p.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _hyb_gga_xc_b97_1p_epsilon_xc

def mgga_c_scan(
  polarized: bool = True,
) -> Callable:
  r"""
  J. Sun, A. Ruzsinszky, and J. P. Perdew.,  Phys. Rev. Lett. 115, 036402 (2015)
  `10.1103/PhysRevLett.115.036402 <http://link.aps.org/doi/10.1103/PhysRevLett.115.036402>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("mgga_c_scan", polarized, )
  def _mgga_c_scan_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_c_scan.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_c_scan_epsilon_xc

def hyb_mgga_x_mn15(
  polarized: bool = True,
  _CC000: Optional[float] = None,
  _CC001: Optional[float] = None,
  _CC002: Optional[float] = None,
  _CC003: Optional[float] = None,
  _CC004: Optional[float] = None,
  _CC005: Optional[float] = None,
  _CC010: Optional[float] = None,
  _CC011: Optional[float] = None,
  _CC012: Optional[float] = None,
  _CC013: Optional[float] = None,
  _CC014: Optional[float] = None,
  _CC020: Optional[float] = None,
  _CC021: Optional[float] = None,
  _CC022: Optional[float] = None,
  _CC023: Optional[float] = None,
  _CC030: Optional[float] = None,
  _CC031: Optional[float] = None,
  _CC032: Optional[float] = None,
  _CC100: Optional[float] = None,
  _CC101: Optional[float] = None,
  _CC102: Optional[float] = None,
  _CC103: Optional[float] = None,
  _CC104: Optional[float] = None,
  _CC110: Optional[float] = None,
  _CC111: Optional[float] = None,
  _CC112: Optional[float] = None,
  _CC113: Optional[float] = None,
  _CC120: Optional[float] = None,
  _CC121: Optional[float] = None,
  _CC122: Optional[float] = None,
  _CC200: Optional[float] = None,
  _CC201: Optional[float] = None,
  _CC202: Optional[float] = None,
  _CC203: Optional[float] = None,
  _CC210: Optional[float] = None,
  _CC211: Optional[float] = None,
  _CC212: Optional[float] = None,
  _CC300: Optional[float] = None,
  _CC301: Optional[float] = None,
  _CC302: Optional[float] = None,
  _ax: Optional[float] = None,
) -> Callable:
  r"""
  H. S. Yu, X. He, S. L. Li, and D. G. Truhlar.,  Chem. Sci. 7, 5032-5051 (2016)
  `10.1039/C6SC00705H <http://doi.org/10.1039/C6SC00705H>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _CC000 : Optional[float], default: 0.073852235
    CC000
  _CC001 : Optional[float], default: -0.839976156
    CC001
  _CC002 : Optional[float], default: -3.082660125
    CC002
  _CC003 : Optional[float], default: -1.02881285
    CC003
  _CC004 : Optional[float], default: -0.811697255
    CC004
  _CC005 : Optional[float], default: -0.063404387
    CC005
  _CC010 : Optional[float], default: 2.54805518
    CC010
  _CC011 : Optional[float], default: -5.031578906
    CC011
  _CC012 : Optional[float], default: 0.31702159
    CC012
  _CC013 : Optional[float], default: 2.981868205
    CC013
  _CC014 : Optional[float], default: -0.749503735
    CC014
  _CC020 : Optional[float], default: 0.231825661
    CC020
  _CC021 : Optional[float], default: 1.261961411
    CC021
  _CC022 : Optional[float], default: 1.665920815
    CC022
  _CC023 : Optional[float], default: 7.483304941
    CC023
  _CC030 : Optional[float], default: -2.544245723
    CC030
  _CC031 : Optional[float], default: 1.384720031
    CC031
  _CC032 : Optional[float], default: 6.902569885
    CC032
  _CC100 : Optional[float], default: 1.657399451
    CC100
  _CC101 : Optional[float], default: 2.98526709
    CC101
  _CC102 : Optional[float], default: 6.89391326
    CC102
  _CC103 : Optional[float], default: 2.489813993
    CC103
  _CC104 : Optional[float], default: 1.454724691
    CC104
  _CC110 : Optional[float], default: -5.054324071
    CC110
  _CC111 : Optional[float], default: 2.35273334
    CC111
  _CC112 : Optional[float], default: 1.299104132
    CC112
  _CC113 : Optional[float], default: 1.203168217
    CC113
  _CC120 : Optional[float], default: 0.121595877
    CC120
  _CC121 : Optional[float], default: 8.048348238
    CC121
  _CC122 : Optional[float], default: 21.91203659
    CC122
  _CC200 : Optional[float], default: -1.852335832
    CC200
  _CC201 : Optional[float], default: -3.4722735
    CC201
  _CC202 : Optional[float], default: -1.564591493
    CC202
  _CC203 : Optional[float], default: -2.29578769
    CC203
  _CC210 : Optional[float], default: 3.666482991
    CC210
  _CC211 : Optional[float], default: 10.87074639
    CC211
  _CC212 : Optional[float], default: 9.696691388
    CC212
  _CC300 : Optional[float], default: 0.630701064
    CC300
  _CC301 : Optional[float], default: -0.505825216
    CC301
  _CC302 : Optional[float], default: -3.562354535
    CC302
  _ax : Optional[float], default: 0.44
    exact exchange
  """
  _CC000 = (_CC000 or 0.073852235)
  _CC001 = (_CC001 or -0.839976156)
  _CC002 = (_CC002 or -3.082660125)
  _CC003 = (_CC003 or -1.02881285)
  _CC004 = (_CC004 or -0.811697255)
  _CC005 = (_CC005 or -0.063404387)
  _CC010 = (_CC010 or 2.54805518)
  _CC011 = (_CC011 or -5.031578906)
  _CC012 = (_CC012 or 0.31702159)
  _CC013 = (_CC013 or 2.981868205)
  _CC014 = (_CC014 or -0.749503735)
  _CC020 = (_CC020 or 0.231825661)
  _CC021 = (_CC021 or 1.261961411)
  _CC022 = (_CC022 or 1.665920815)
  _CC023 = (_CC023 or 7.483304941)
  _CC030 = (_CC030 or -2.544245723)
  _CC031 = (_CC031 or 1.384720031)
  _CC032 = (_CC032 or 6.902569885)
  _CC100 = (_CC100 or 1.657399451)
  _CC101 = (_CC101 or 2.98526709)
  _CC102 = (_CC102 or 6.89391326)
  _CC103 = (_CC103 or 2.489813993)
  _CC104 = (_CC104 or 1.454724691)
  _CC110 = (_CC110 or -5.054324071)
  _CC111 = (_CC111 or 2.35273334)
  _CC112 = (_CC112 or 1.299104132)
  _CC113 = (_CC113 or 1.203168217)
  _CC120 = (_CC120 or 0.121595877)
  _CC121 = (_CC121 or 8.048348238)
  _CC122 = (_CC122 or 21.91203659)
  _CC200 = (_CC200 or -1.852335832)
  _CC201 = (_CC201 or -3.4722735)
  _CC202 = (_CC202 or -1.564591493)
  _CC203 = (_CC203 or -2.29578769)
  _CC210 = (_CC210 or 3.666482991)
  _CC211 = (_CC211 or 10.87074639)
  _CC212 = (_CC212 or 9.696691388)
  _CC300 = (_CC300 or 0.630701064)
  _CC301 = (_CC301 or -0.505825216)
  _CC302 = (_CC302 or -3.562354535)
  _ax = (_ax or 0.44)
  p = get_p("hyb_mgga_x_mn15", polarized, _CC000, _CC001, _CC002, _CC003, _CC004, _CC005, _CC010, _CC011, _CC012, _CC013, _CC014, _CC020, _CC021, _CC022, _CC023, _CC030, _CC031, _CC032, _CC100, _CC101, _CC102, _CC103, _CC104, _CC110, _CC111, _CC112, _CC113, _CC120, _CC121, _CC122, _CC200, _CC201, _CC202, _CC203, _CC210, _CC211, _CC212, _CC300, _CC301, _CC302, _ax)
  def _hyb_mgga_x_mn15_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_mgga_x_mn15.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _hyb_mgga_x_mn15_epsilon_xc

def mgga_c_mn15(
  polarized: bool = True,
  _a0: Optional[float] = None,
  _a1: Optional[float] = None,
  _a2: Optional[float] = None,
  _a3: Optional[float] = None,
  _a4: Optional[float] = None,
  _a5: Optional[float] = None,
  _a6: Optional[float] = None,
  _a7: Optional[float] = None,
  _a8: Optional[float] = None,
  _a9: Optional[float] = None,
  _a10: Optional[float] = None,
  _a11: Optional[float] = None,
  _b0: Optional[float] = None,
  _b1: Optional[float] = None,
  _b2: Optional[float] = None,
  _b3: Optional[float] = None,
  _b4: Optional[float] = None,
  _b5: Optional[float] = None,
  _b6: Optional[float] = None,
  _b7: Optional[float] = None,
  _b8: Optional[float] = None,
  _b9: Optional[float] = None,
  _b10: Optional[float] = None,
  _b11: Optional[float] = None,
) -> Callable:
  r"""
  H. S. Yu, X. He, S. L. Li, and D. G. Truhlar.,  Chem. Sci. 7, 5032-5051 (2016)
  `10.1039/C6SC00705H <http://doi.org/10.1039/C6SC00705H>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a0 : Optional[float], default: 1.093250748
    a0
  _a1 : Optional[float], default: -0.269735037
    a1
  _a2 : Optional[float], default: 6.368997613
    a2
  _a3 : Optional[float], default: -0.245337101
    a3
  _a4 : Optional[float], default: -1.587103441
    a4
  _a5 : Optional[float], default: 0.124698862
    a5
  _a6 : Optional[float], default: 1.605819855
    a6
  _a7 : Optional[float], default: 0.466206031
    a7
  _a8 : Optional[float], default: 3.484978654
    a8
  _a9 : Optional[float], default: 0.0
    a9
  _a10 : Optional[float], default: 0.0
    a10
  _a11 : Optional[float], default: 0.0
    a11
  _b0 : Optional[float], default: 1.427424993
    b0
  _b1 : Optional[float], default: -3.57883682
    b1
  _b2 : Optional[float], default: 7.398727547
    b2
  _b3 : Optional[float], default: 3.927810559
    b3
  _b4 : Optional[float], default: 2.789804639
    b4
  _b5 : Optional[float], default: 4.988320462
    b5
  _b6 : Optional[float], default: 3.079464318
    b6
  _b7 : Optional[float], default: 3.521636859
    b7
  _b8 : Optional[float], default: 4.769671992
    b8
  _b9 : Optional[float], default: 0.0
    b9
  _b10 : Optional[float], default: 0.0
    b10
  _b11 : Optional[float], default: 0.0
    b11
  """
  _a0 = (_a0 or 1.093250748)
  _a1 = (_a1 or -0.269735037)
  _a2 = (_a2 or 6.368997613)
  _a3 = (_a3 or -0.245337101)
  _a4 = (_a4 or -1.587103441)
  _a5 = (_a5 or 0.124698862)
  _a6 = (_a6 or 1.605819855)
  _a7 = (_a7 or 0.466206031)
  _a8 = (_a8 or 3.484978654)
  _a9 = (_a9 or 0.0)
  _a10 = (_a10 or 0.0)
  _a11 = (_a11 or 0.0)
  _b0 = (_b0 or 1.427424993)
  _b1 = (_b1 or -3.57883682)
  _b2 = (_b2 or 7.398727547)
  _b3 = (_b3 or 3.927810559)
  _b4 = (_b4 or 2.789804639)
  _b5 = (_b5 or 4.988320462)
  _b6 = (_b6 or 3.079464318)
  _b7 = (_b7 or 3.521636859)
  _b8 = (_b8 or 4.769671992)
  _b9 = (_b9 or 0.0)
  _b10 = (_b10 or 0.0)
  _b11 = (_b11 or 0.0)
  p = get_p("mgga_c_mn15", polarized, _a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8, _a9, _a10, _a11, _b0, _b1, _b2, _b3, _b4, _b5, _b6, _b7, _b8, _b9, _b10, _b11)
  def _mgga_c_mn15_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_c_mn15.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_c_mn15_epsilon_xc

def gga_x_cap(
  polarized: bool = True,
  _alphaoAx: Optional[float] = None,
  _c: Optional[float] = None,
) -> Callable:
  r"""
  J. Carmona-Espíndola, J. L. Gázquez, A. Vela, and S. B. Trickey.,  J. Chem. Phys. 142, 054105 (2015)
  `10.1063/1.4906606 <https://doi.org/10.1063/1.4906606>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _alphaoAx : Optional[float], default: -0.2195149727645171
    alphaoAx
  _c : Optional[float], default: 0.05240533950570443
    c
  """
  _alphaoAx = (_alphaoAx or -0.2195149727645171)
  _c = (_c or 0.05240533950570443)
  p = get_p("gga_x_cap", polarized, _alphaoAx, _c)
  def _gga_x_cap_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_cap.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_cap_epsilon_xc

def gga_x_eb88(
  polarized: bool = True,
  _beta: Optional[float] = None,
  _gamma: Optional[float] = None,
) -> Callable:
  r"""
  P. Elliott and K. Burke.,  Can. J. Chem. 87, 1485-1491 (2009)
  `10.1139/V09-095 <http://www.nrcresearchpress.com/doi/abs/10.1139/V09-095>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _beta : Optional[float], default: 0.003968502629920499
    beta/X_FACTOR_C is the coefficient of the gradient expansion
  _gamma : Optional[float], default: 6.0
    gamma should be 6 to get the right asymptotics of Ex
  """
  _beta = (_beta or 0.003968502629920499)
  _gamma = (_gamma or 6.0)
  p = get_p("gga_x_eb88", polarized, _beta, _gamma)
  def _gga_x_eb88_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_eb88.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_eb88_epsilon_xc

def gga_c_pbe_mol(
  polarized: bool = True,
  _beta: Optional[float] = None,
  _gamma: Optional[float] = None,
  _B: Optional[float] = None,
) -> Callable:
  r"""
  J. M. del Campo, J. L. Gázquez, S. B. Trickey, and A. Vela.,  J. Chem. Phys. 136, 104108 (2012)
  `10.1063/1.3691197 <http://scitation.aip.org/content/aip/journal/jcp/136/10/10.1063/1.3691197>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _beta : Optional[float], default: 0.08384
    beta constant
  _gamma : Optional[float], default: 0.031090690869654894
    (1 - ln(2))/Pi^2 in the PBE
  _B : Optional[float], default: 1.0
    Multiplies the A t^2 term. Used in the SPBE functional
  """
  _beta = (_beta or 0.08384)
  _gamma = (_gamma or 0.031090690869654894)
  _B = (_B or 1.0)
  p = get_p("gga_c_pbe_mol", polarized, _beta, _gamma, _B)
  def _gga_c_pbe_mol_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_c_pbe_mol.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_c_pbe_mol_epsilon_xc

def hyb_gga_xc_pbe_mol0(
  polarized: bool = True,
  _beta: Optional[float] = None,
) -> Callable:
  r"""
  J. M. del Campo, J. L. Gázquez, S. B. Trickey, and A. Vela.,  J. Chem. Phys. 136, 104108 (2012)
  `10.1063/1.3691197 <http://scitation.aip.org/content/aip/journal/jcp/136/10/10.1063/1.3691197>`_

  
  Mixing of the following functionals:
    gga_x_pbe_mol (coefficient: 0.75)
    gga_c_pbe_mol (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _beta : Optional[float], default: 0.25
    Mixing parameter
  """
  _beta = (_beta or 0.25)
  p = get_p("hyb_gga_xc_pbe_mol0", polarized, _beta)
  def _hyb_gga_xc_pbe_mol0_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_pbe_mol0.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_pbe_mol0_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_pbe_mol0_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_pbe_mol0_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_pbe_mol0_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_pbe_mol0_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_pbe_mol0_epsilon_xc

def hyb_gga_xc_pbe_sol0(
  polarized: bool = True,
  _beta: Optional[float] = None,
) -> Callable:
  r"""
  J. M. del Campo, J. L. Gázquez, S. B. Trickey, and A. Vela.,  J. Chem. Phys. 136, 104108 (2012)
  `10.1063/1.3691197 <http://scitation.aip.org/content/aip/journal/jcp/136/10/10.1063/1.3691197>`_

  
  Mixing of the following functionals:
    gga_x_pbe_sol (coefficient: 0.75)
    gga_c_pbe_sol (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _beta : Optional[float], default: 0.25
    Mixing parameter
  """
  _beta = (_beta or 0.25)
  p = get_p("hyb_gga_xc_pbe_sol0", polarized, _beta)
  def _hyb_gga_xc_pbe_sol0_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_pbe_sol0.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_pbe_sol0_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_pbe_sol0_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_pbe_sol0_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_pbe_sol0_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_pbe_sol0_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_pbe_sol0_epsilon_xc

def hyb_gga_xc_pbeb0(
  polarized: bool = True,
  _beta: Optional[float] = None,
) -> Callable:
  r"""
  J. M. del Campo, J. L. Gázquez, S. B. Trickey, and A. Vela.,  J. Chem. Phys. 136, 104108 (2012)
  `10.1063/1.3691197 <http://scitation.aip.org/content/aip/journal/jcp/136/10/10.1063/1.3691197>`_

  
  Mixing of the following functionals:
    gga_x_pbe (coefficient: 0.75)
    gga_c_pbe (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _beta : Optional[float], default: 0.25
    Mixing parameter
  """
  _beta = (_beta or 0.25)
  p = get_p("hyb_gga_xc_pbeb0", polarized, _beta)
  def _hyb_gga_xc_pbeb0_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_pbeb0.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_pbeb0_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_pbeb0_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_pbeb0_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_pbeb0_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_pbeb0_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_pbeb0_epsilon_xc

def hyb_gga_xc_pbe_molb0(
  polarized: bool = True,
  _beta: Optional[float] = None,
) -> Callable:
  r"""
  J. M. del Campo, J. L. Gázquez, S. B. Trickey, and A. Vela.,  J. Chem. Phys. 136, 104108 (2012)
  `10.1063/1.3691197 <http://scitation.aip.org/content/aip/journal/jcp/136/10/10.1063/1.3691197>`_

  
  Mixing of the following functionals:
    gga_x_pbe_mol (coefficient: 0.75)
    gga_c_pbe (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _beta : Optional[float], default: 0.25
    Mixing parameter
  """
  _beta = (_beta or 0.25)
  p = get_p("hyb_gga_xc_pbe_molb0", polarized, _beta)
  def _hyb_gga_xc_pbe_molb0_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_pbe_molb0.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_pbe_molb0_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_pbe_molb0_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_pbe_molb0_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_pbe_molb0_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_pbe_molb0_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_pbe_molb0_epsilon_xc

def gga_k_absp3(
  polarized: bool = True,
  N: Optional[float] = None,
) -> Callable:
  r"""
  P. K. Acharya, L. J. Bartolotti, S. B. Sears, and R. G. Parr.,  Proc. Natl. Acad. Sci. U. S. A. 77, 6978 (1980)
  `10.1073/pnas.77.12.6978 <http://www.pnas.org/content/77/12/6978.abstract>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  N : Optional[float], default: 1.0
    Number of electrons
  """
  N = (N or 1.0)
  p = get_p("gga_k_absp3", polarized, N)
  def _gga_k_absp3_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_k_absp3.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_k_absp3_epsilon_xc

def gga_k_absp4(
  polarized: bool = True,
  N: Optional[float] = None,
) -> Callable:
  r"""
  P. K. Acharya, L. J. Bartolotti, S. B. Sears, and R. G. Parr.,  Proc. Natl. Acad. Sci. U. S. A. 77, 6978 (1980)
  `10.1073/pnas.77.12.6978 <http://www.pnas.org/content/77/12/6978.abstract>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  N : Optional[float], default: 1.0
    Number of electrons
  """
  N = (N or 1.0)
  p = get_p("gga_k_absp4", polarized, N)
  def _gga_k_absp4_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_k_absp4.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_k_absp4_epsilon_xc

def hyb_mgga_x_bmk(
  polarized: bool = True,
  _cxl0: Optional[float] = None,
  _cxl1: Optional[float] = None,
  _cxl2: Optional[float] = None,
  _cxl3: Optional[float] = None,
  _cxnl0: Optional[float] = None,
  _cxnl1: Optional[float] = None,
  _cxnl2: Optional[float] = None,
  _cxnl3: Optional[float] = None,
  _ax: Optional[float] = None,
) -> Callable:
  r"""
  A. D. Boese and J. M. L. Martin.,  J. Chem. Phys. 121, 3405 (2004)
  `10.1063/1.1774975 <http://scitation.aip.org/content/aip/journal/jcp/121/8/10.1063/1.1774975>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _cxl0 : Optional[float], default: 0.474302
    Local exchange, u^0 coefficient
  _cxl1 : Optional[float], default: 2.77701
    Local exchange, u^1 coefficient
  _cxl2 : Optional[float], default: -11.423
    Local exchange, u^2 coefficient
  _cxl3 : Optional[float], default: 11.7167
    Local exchange, u^3 coefficient
  _cxnl0 : Optional[float], default: -0.192212
    Non-local exchange, u^0 coefficient
  _cxnl1 : Optional[float], default: 4.73936
    Non-local exchange, u^1 coefficient
  _cxnl2 : Optional[float], default: -26.6188
    Non-local exchange, u^2 coefficient
  _cxnl3 : Optional[float], default: 22.4891
    Non-local exchange, u^3 coefficient
  _ax : Optional[float], default: 0.42
    Fraction of exact exchange
  """
  _cxl0 = (_cxl0 or 0.474302)
  _cxl1 = (_cxl1 or 2.77701)
  _cxl2 = (_cxl2 or -11.423)
  _cxl3 = (_cxl3 or 11.7167)
  _cxnl0 = (_cxnl0 or -0.192212)
  _cxnl1 = (_cxnl1 or 4.73936)
  _cxnl2 = (_cxnl2 or -26.6188)
  _cxnl3 = (_cxnl3 or 22.4891)
  _ax = (_ax or 0.42)
  p = get_p("hyb_mgga_x_bmk", polarized, _cxl0, _cxl1, _cxl2, _cxl3, _cxnl0, _cxnl1, _cxnl2, _cxnl3, _ax)
  def _hyb_mgga_x_bmk_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_mgga_x_bmk.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _hyb_mgga_x_bmk_epsilon_xc

def gga_c_bmk(
  polarized: bool = True,
  _css0: Optional[float] = None,
  _css1: Optional[float] = None,
  _css2: Optional[float] = None,
  _css3: Optional[float] = None,
  _css4: Optional[float] = None,
  _cos0: Optional[float] = None,
  _cos1: Optional[float] = None,
  _cos2: Optional[float] = None,
  _cos3: Optional[float] = None,
  _cos4: Optional[float] = None,
) -> Callable:
  r"""
  A. D. Boese and J. M. L. Martin.,  J. Chem. Phys. 121, 3405 (2004)
  `10.1063/1.1774975 <http://scitation.aip.org/content/aip/journal/jcp/121/8/10.1063/1.1774975>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _css0 : Optional[float], default: -2.19098
    u^0 coefficient for same-spin correlation
  _css1 : Optional[float], default: 23.8939
    u^1 coefficient for same-spin correlation
  _css2 : Optional[float], default: -44.3303
    u^2 coefficient for same-spin correlation
  _css3 : Optional[float], default: 22.5982
    u^3 coefficient for same-spin correlation
  _css4 : Optional[float], default: 0.0
    u^4 coefficient for same-spin correlation
  _cos0 : Optional[float], default: 1.22334
    u^0 coefficient for opposite-spin correlation
  _cos1 : Optional[float], default: -3.4631
    u^1 coefficient for opposite-spin correlation
  _cos2 : Optional[float], default: 10.0731
    u^2 coefficient for opposite-spin correlation
  _cos3 : Optional[float], default: -11.1974
    u^3 coefficient for opposite-spin correlation
  _cos4 : Optional[float], default: 0.0
    u^4 coefficient for opposite-spin correlation
  """
  _css0 = (_css0 or -2.19098)
  _css1 = (_css1 or 23.8939)
  _css2 = (_css2 or -44.3303)
  _css3 = (_css3 or 22.5982)
  _css4 = (_css4 or 0.0)
  _cos0 = (_cos0 or 1.22334)
  _cos1 = (_cos1 or -3.4631)
  _cos2 = (_cos2 or 10.0731)
  _cos3 = (_cos3 or -11.1974)
  _cos4 = (_cos4 or 0.0)
  p = get_p("gga_c_bmk", polarized, _css0, _css1, _css2, _css3, _css4, _cos0, _cos1, _cos2, _cos3, _cos4)
  def _gga_c_bmk_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_c_bmk.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_c_bmk_epsilon_xc

def gga_c_tau_hcth(
  polarized: bool = True,
  _css0: Optional[float] = None,
  _css1: Optional[float] = None,
  _css2: Optional[float] = None,
  _css3: Optional[float] = None,
  _css4: Optional[float] = None,
  _cos0: Optional[float] = None,
  _cos1: Optional[float] = None,
  _cos2: Optional[float] = None,
  _cos3: Optional[float] = None,
  _cos4: Optional[float] = None,
) -> Callable:
  r"""
  A. D. Boese and N. C. Handy.,  J. Chem. Phys. 116, 9559 (2002)
  `10.1063/1.1476309 <http://scitation.aip.org/content/aip/journal/jcp/116/22/10.1063/1.1476309>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _css0 : Optional[float], default: 0.41385
    u^0 coefficient for same-spin correlation
  _css1 : Optional[float], default: -0.9086
    u^1 coefficient for same-spin correlation
  _css2 : Optional[float], default: -0.0549
    u^2 coefficient for same-spin correlation
  _css3 : Optional[float], default: 1.748
    u^3 coefficient for same-spin correlation
  _css4 : Optional[float], default: 0.0
    u^4 coefficient for same-spin correlation
  _cos0 : Optional[float], default: 0.65262
    u^0 coefficient for opposite-spin correlation
  _cos1 : Optional[float], default: 6.3638
    u^1 coefficient for opposite-spin correlation
  _cos2 : Optional[float], default: -14.08
    u^2 coefficient for opposite-spin correlation
  _cos3 : Optional[float], default: -3.3755
    u^3 coefficient for opposite-spin correlation
  _cos4 : Optional[float], default: 0.0
    u^4 coefficient for opposite-spin correlation
  """
  _css0 = (_css0 or 0.41385)
  _css1 = (_css1 or -0.9086)
  _css2 = (_css2 or -0.0549)
  _css3 = (_css3 or 1.748)
  _css4 = (_css4 or 0.0)
  _cos0 = (_cos0 or 0.65262)
  _cos1 = (_cos1 or 6.3638)
  _cos2 = (_cos2 or -14.08)
  _cos3 = (_cos3 or -3.3755)
  _cos4 = (_cos4 or 0.0)
  p = get_p("gga_c_tau_hcth", polarized, _css0, _css1, _css2, _css3, _css4, _cos0, _cos1, _cos2, _cos3, _cos4)
  def _gga_c_tau_hcth_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_c_tau_hcth.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_c_tau_hcth_epsilon_xc

def hyb_mgga_x_tau_hcth(
  polarized: bool = True,
  _cxl0: Optional[float] = None,
  _cxl1: Optional[float] = None,
  _cxl2: Optional[float] = None,
  _cxl3: Optional[float] = None,
  _cxnl0: Optional[float] = None,
  _cxnl1: Optional[float] = None,
  _cxnl2: Optional[float] = None,
  _cxnl3: Optional[float] = None,
  _ax: Optional[float] = None,
) -> Callable:
  r"""
  A. D. Boese and N. C. Handy.,  J. Chem. Phys. 116, 9559 (2002)
  `10.1063/1.1476309 <http://scitation.aip.org/content/aip/journal/jcp/116/22/10.1063/1.1476309>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _cxl0 : Optional[float], default: 0.86735
    Local exchange, u^0 coefficient
  _cxl1 : Optional[float], default: 0.3008
    Local exchange, u^1 coefficient
  _cxl2 : Optional[float], default: 1.2208
    Local exchange, u^2 coefficient
  _cxl3 : Optional[float], default: 0.1574
    Local exchange, u^3 coefficient
  _cxnl0 : Optional[float], default: -0.0023
    Non-local exchange, u^0 coefficient
  _cxnl1 : Optional[float], default: -0.2849
    Non-local exchange, u^1 coefficient
  _cxnl2 : Optional[float], default: 5.4146
    Non-local exchange, u^2 coefficient
  _cxnl3 : Optional[float], default: -10.909
    Non-local exchange, u^3 coefficient
  _ax : Optional[float], default: 0.15
    Fraction of exact exchange
  """
  _cxl0 = (_cxl0 or 0.86735)
  _cxl1 = (_cxl1 or 0.3008)
  _cxl2 = (_cxl2 or 1.2208)
  _cxl3 = (_cxl3 or 0.1574)
  _cxnl0 = (_cxnl0 or -0.0023)
  _cxnl1 = (_cxnl1 or -0.2849)
  _cxnl2 = (_cxnl2 or 5.4146)
  _cxnl3 = (_cxnl3 or -10.909)
  _ax = (_ax or 0.15)
  p = get_p("hyb_mgga_x_tau_hcth", polarized, _cxl0, _cxl1, _cxl2, _cxl3, _cxnl0, _cxnl1, _cxnl2, _cxnl3, _ax)
  def _hyb_mgga_x_tau_hcth_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_mgga_x_tau_hcth.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _hyb_mgga_x_tau_hcth_epsilon_xc

def gga_c_hyb_tau_hcth(
  polarized: bool = True,
  _css0: Optional[float] = None,
  _css1: Optional[float] = None,
  _css2: Optional[float] = None,
  _css3: Optional[float] = None,
  _css4: Optional[float] = None,
  _cos0: Optional[float] = None,
  _cos1: Optional[float] = None,
  _cos2: Optional[float] = None,
  _cos3: Optional[float] = None,
  _cos4: Optional[float] = None,
) -> Callable:
  r"""
  A. D. Boese and N. C. Handy.,  J. Chem. Phys. 116, 9559 (2002)
  `10.1063/1.1476309 <http://scitation.aip.org/content/aip/journal/jcp/116/22/10.1063/1.1476309>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _css0 : Optional[float], default: 0.186
    u^0 coefficient for same-spin correlation
  _css1 : Optional[float], default: 3.9782
    u^1 coefficient for same-spin correlation
  _css2 : Optional[float], default: -7.0694
    u^2 coefficient for same-spin correlation
  _css3 : Optional[float], default: 3.4747
    u^3 coefficient for same-spin correlation
  _css4 : Optional[float], default: 0.0
    u^4 coefficient for same-spin correlation
  _cos0 : Optional[float], default: 0.8049
    u^0 coefficient for opposite-spin correlation
  _cos1 : Optional[float], default: 3.8388
    u^1 coefficient for opposite-spin correlation
  _cos2 : Optional[float], default: -13.547
    u^2 coefficient for opposite-spin correlation
  _cos3 : Optional[float], default: 3.9133
    u^3 coefficient for opposite-spin correlation
  _cos4 : Optional[float], default: 0.0
    u^4 coefficient for opposite-spin correlation
  """
  _css0 = (_css0 or 0.186)
  _css1 = (_css1 or 3.9782)
  _css2 = (_css2 or -7.0694)
  _css3 = (_css3 or 3.4747)
  _css4 = (_css4 or 0.0)
  _cos0 = (_cos0 or 0.8049)
  _cos1 = (_cos1 or 3.8388)
  _cos2 = (_cos2 or -13.547)
  _cos3 = (_cos3 or 3.9133)
  _cos4 = (_cos4 or 0.0)
  p = get_p("gga_c_hyb_tau_hcth", polarized, _css0, _css1, _css2, _css3, _css4, _cos0, _cos1, _cos2, _cos3, _cos4)
  def _gga_c_hyb_tau_hcth_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_c_hyb_tau_hcth.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_c_hyb_tau_hcth_epsilon_xc

def mgga_x_b00(
  polarized: bool = True,
  _gamma: Optional[float] = None,
  _at: Optional[float] = None,
) -> Callable:
  r"""
  A. D. Becke.,  J. Chem. Phys. 112, 4020-4026 (2000)
  `10.1063/1.480951 <http://scitation.aip.org/content/aip/journal/jcp/112/9/10.1063/1.480951>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _gamma : Optional[float], default: 1.0
    gamma
  _at : Optional[float], default: 0.928
    at
  """
  _gamma = (_gamma or 1.0)
  _at = (_at or 0.928)
  p = get_p("mgga_x_b00", polarized, _gamma, _at)
  def _mgga_x_b00_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_b00.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_b00_epsilon_xc

def gga_x_beefvdw(
  polarized: bool = True,
) -> Callable:
  r"""
  J. Wellendorff, K. T. Lundgaard, A. Møgelhøj, V. Petzold, D. D. Landis, J. K. Nørskov, T. Bligaard, and K. W. Jacobsen.,  Phys. Rev. B 85, 235149 (2012)
  `10.1103/PhysRevB.85.235149 <http://link.aps.org/doi/10.1103/PhysRevB.85.235149>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_x_beefvdw", polarized, )
  def _gga_x_beefvdw_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_beefvdw.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_beefvdw_epsilon_xc

def gga_xc_beefvdw(
  polarized: bool = True,
) -> Callable:
  r"""
  J. Wellendorff, K. T. Lundgaard, A. Møgelhøj, V. Petzold, D. D. Landis, J. K. Nørskov, T. Bligaard, and K. W. Jacobsen.,  Phys. Rev. B 85, 235149 (2012)
  `10.1103/PhysRevB.85.235149 <http://link.aps.org/doi/10.1103/PhysRevB.85.235149>`_

  
  Mixing of the following functionals:
    gga_x_beefvdw (coefficient: 1.0)
    lda_c_pw_mod (coefficient: 0.6001664769)
    gga_c_pbe (coefficient: 0.3998335231)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_xc_beefvdw", polarized, )
  def _gga_xc_beefvdw_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_xc_beefvdw.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _gga_xc_beefvdw_epsilon_xc.cam_alpha = p.cam_alpha
  _gga_xc_beefvdw_epsilon_xc.cam_beta = p.cam_beta
  _gga_xc_beefvdw_epsilon_xc.cam_omega = p.cam_omega
  _gga_xc_beefvdw_epsilon_xc.nlc_b = p.nlc_b
  _gga_xc_beefvdw_epsilon_xc.nlc_C = p.nlc_C

  return _gga_xc_beefvdw_epsilon_xc

def lda_c_chachiyo(
  polarized: bool = True,
  _ap: Optional[float] = None,
  _bp: Optional[float] = None,
  _cp: Optional[float] = None,
  _af: Optional[float] = None,
  _bf: Optional[float] = None,
  _cf: Optional[float] = None,
) -> Callable:
  r"""
  T. Chachiyo.,  J. Chem. Phys. 145, 021101 (2016)
  `10.1063/1.4958669 <http://scitation.aip.org/content/aip/journal/jcp/145/2/10.1063/1.4958669>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _ap : Optional[float], default: -0.01554535
    ap parameter
  _bp : Optional[float], default: 20.4562557
    bp parameter
  _cp : Optional[float], default: 20.4562557
    cp parameter
  _af : Optional[float], default: -0.007772675
    af parameter
  _bf : Optional[float], default: 27.4203609
    bf parameter
  _cf : Optional[float], default: 27.4203609
    cf parameter
  """
  _ap = (_ap or -0.01554535)
  _bp = (_bp or 20.4562557)
  _cp = (_cp or 20.4562557)
  _af = (_af or -0.007772675)
  _bf = (_bf or 27.4203609)
  _cf = (_cf or 27.4203609)
  p = get_p("lda_c_chachiyo", polarized, _ap, _bp, _cp, _af, _bf, _cf)
  def _lda_c_chachiyo_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of lda_c_chachiyo.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _lda_c_chachiyo_epsilon_xc

def mgga_xc_hle17(
  polarized: bool = True,
) -> Callable:
  r"""
  P. Verma and D. G. Truhlar.,  J. Phys. Chem. C 121, 7144-7154 (2017)
  `10.1021/acs.jpcc.7b01066 <http://doi.org/10.1021/acs.jpcc.7b01066>`_

  
  Mixing of the following functionals:
    mgga_x_tpss (coefficient: 1.25)
    mgga_c_tpss (coefficient: 0.5)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("mgga_xc_hle17", polarized, )
  def _mgga_xc_hle17_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_xc_hle17.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  
  _mgga_xc_hle17_epsilon_xc.cam_alpha = p.cam_alpha
  _mgga_xc_hle17_epsilon_xc.cam_beta = p.cam_beta
  _mgga_xc_hle17_epsilon_xc.cam_omega = p.cam_omega
  _mgga_xc_hle17_epsilon_xc.nlc_b = p.nlc_b
  _mgga_xc_hle17_epsilon_xc.nlc_C = p.nlc_C

  return _mgga_xc_hle17_epsilon_xc

def lda_c_lp96(
  polarized: bool = True,
  _C1: Optional[float] = None,
  _C2: Optional[float] = None,
  _C3: Optional[float] = None,
) -> Callable:
  r"""
  S. Liu and R. G. Parr.,  Phys. Rev. A 53, 2211–2219 (1996)
  `10.1103/PhysRevA.53.2211 <http://link.aps.org/doi/10.1103/PhysRevA.53.2211>`_

  S. Liu and R.G Parr.,  J. Mol. Struct.: THEOCHEM 501–502, 29 - 34 (2000)
  `10.1016/S0166-1280(99)00410-8 <http://www.sciencedirect.com/science/article/pii/S0166128099004108>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _C1 : Optional[float], default: -0.0603
    C1 parameter
  _C2 : Optional[float], default: 0.0175
    C2 parameter
  _C3 : Optional[float], default: -0.00053
    C3 parameter
  """
  _C1 = (_C1 or -0.0603)
  _C2 = (_C2 or 0.0175)
  _C3 = (_C3 or -0.00053)
  p = get_p("lda_c_lp96", polarized, _C1, _C2, _C3)
  def _lda_c_lp96_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of lda_c_lp96.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _lda_c_lp96_epsilon_xc

def hyb_gga_xc_pbe50(
  polarized: bool = True,
  _beta: Optional[float] = None,
) -> Callable:
  r"""
  Y. A. Bernard, Y. Shao, and A. I. Krylov.,  J. Chem. Phys. 136, 204103 (2012)
  `10.1063/1.4714499 <http://doi.org/10.1063/1.4714499>`_

  
  Mixing of the following functionals:
    gga_x_pbe (coefficient: 0.5)
    gga_c_pbe (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _beta : Optional[float], default: 0.5
    Mixing parameter
  """
  _beta = (_beta or 0.5)
  p = get_p("hyb_gga_xc_pbe50", polarized, _beta)
  def _hyb_gga_xc_pbe50_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_pbe50.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_pbe50_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_pbe50_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_pbe50_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_pbe50_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_pbe50_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_pbe50_epsilon_xc

def gga_x_pbetrans(
  polarized: bool = True,
) -> Callable:
  r"""
  Éric Brémond, I. Ciofini, and C. Adamo.,  Mol. Phys. 114, 1059-1065 (2016)
  `10.1080/00268976.2015.1132788 <http://doi.org/10.1080/00268976.2015.1132788>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_x_pbetrans", polarized, )
  def _gga_x_pbetrans_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_pbetrans.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_pbetrans_epsilon_xc

def mgga_c_scan_rvv10(
  polarized: bool = True,
) -> Callable:
  r"""
  H. Peng, Z.-H. Yang, J. P. Perdew, and J. Sun.,  Phys. Rev. X 6, 041005 (2016)
  `10.1103/PhysRevX.6.041005 <https://link.aps.org/doi/10.1103/PhysRevX.6.041005>`_

  
  Mixing of the following functionals:
    mgga_c_scan (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("mgga_c_scan_rvv10", polarized, )
  def _mgga_c_scan_rvv10_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_c_scan_rvv10.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  
  _mgga_c_scan_rvv10_epsilon_xc.cam_alpha = p.cam_alpha
  _mgga_c_scan_rvv10_epsilon_xc.cam_beta = p.cam_beta
  _mgga_c_scan_rvv10_epsilon_xc.cam_omega = p.cam_omega
  _mgga_c_scan_rvv10_epsilon_xc.nlc_b = p.nlc_b
  _mgga_c_scan_rvv10_epsilon_xc.nlc_C = p.nlc_C

  return _mgga_c_scan_rvv10_epsilon_xc

def mgga_x_revm06_l(
  polarized: bool = True,
  _a0: Optional[float] = None,
  _a1: Optional[float] = None,
  _a2: Optional[float] = None,
  _a3: Optional[float] = None,
  _a4: Optional[float] = None,
  _a5: Optional[float] = None,
  _a6: Optional[float] = None,
  _a7: Optional[float] = None,
  _a8: Optional[float] = None,
  _a9: Optional[float] = None,
  _a10: Optional[float] = None,
  _a11: Optional[float] = None,
  _d0: Optional[float] = None,
  _d1: Optional[float] = None,
  _d2: Optional[float] = None,
  _d3: Optional[float] = None,
  _d4: Optional[float] = None,
  _d5: Optional[float] = None,
) -> Callable:
  r"""
  Y. Wang, X. Jin, H. S. Yu, D. G. Truhlar, and X. He.,  Proc. Natl. Acad. Sci. U. S. A. 114, 8487-8492 (2017)
  `10.1073/pnas.1705670114 <http://www.pnas.org/content/114/32/8487.abstract>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a0 : Optional[float], default: 1.423227252
    _a0 parameter
  _a1 : Optional[float], default: 0.471820438
    _a1 parameter
  _a2 : Optional[float], default: -0.167555701
    _a2 parameter
  _a3 : Optional[float], default: -0.250154262
    _a3 parameter
  _a4 : Optional[float], default: 0.062487588
    _a4 parameter
  _a5 : Optional[float], default: 0.73350124
    _a5 parameter
  _a6 : Optional[float], default: -2.359736776
    _a6 parameter
  _a7 : Optional[float], default: -1.436594372
    _a7 parameter
  _a8 : Optional[float], default: 0.444643793
    _a8 parameter
  _a9 : Optional[float], default: 1.529925054
    _a9 parameter
  _a10 : Optional[float], default: 2.053941717
    _a10 parameter
  _a11 : Optional[float], default: -0.036536031
    _a11 parameter
  _d0 : Optional[float], default: -0.423227252
    _d0 parameter
  _d1 : Optional[float], default: 0.0
    _d1 parameter
  _d2 : Optional[float], default: 0.003724234
    _d2 parameter
  _d3 : Optional[float], default: 0.0
    _d3 parameter
  _d4 : Optional[float], default: 0.0
    _d4 parameter
  _d5 : Optional[float], default: 0.0
    _d5 parameter
  """
  _a0 = (_a0 or 1.423227252)
  _a1 = (_a1 or 0.471820438)
  _a2 = (_a2 or -0.167555701)
  _a3 = (_a3 or -0.250154262)
  _a4 = (_a4 or 0.062487588)
  _a5 = (_a5 or 0.73350124)
  _a6 = (_a6 or -2.359736776)
  _a7 = (_a7 or -1.436594372)
  _a8 = (_a8 or 0.444643793)
  _a9 = (_a9 or 1.529925054)
  _a10 = (_a10 or 2.053941717)
  _a11 = (_a11 or -0.036536031)
  _d0 = (_d0 or -0.423227252)
  _d1 = (_d1 or 0.0)
  _d2 = (_d2 or 0.003724234)
  _d3 = (_d3 or 0.0)
  _d4 = (_d4 or 0.0)
  _d5 = (_d5 or 0.0)
  p = get_p("mgga_x_revm06_l", polarized, _a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8, _a9, _a10, _a11, _d0, _d1, _d2, _d3, _d4, _d5)
  def _mgga_x_revm06_l_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_revm06_l.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_revm06_l_epsilon_xc

def mgga_c_revm06_l(
  polarized: bool = True,
  _gamma_ss: Optional[float] = None,
  _gamma_ab: Optional[float] = None,
  _alpha_ss: Optional[float] = None,
  _alpha_ab: Optional[float] = None,
  _css0: Optional[float] = None,
  _css1: Optional[float] = None,
  _css2: Optional[float] = None,
  _css3: Optional[float] = None,
  _css4: Optional[float] = None,
  _cab0: Optional[float] = None,
  _cab1: Optional[float] = None,
  _cab2: Optional[float] = None,
  _cab3: Optional[float] = None,
  _cab4: Optional[float] = None,
  _dss0: Optional[float] = None,
  _dss1: Optional[float] = None,
  _dss2: Optional[float] = None,
  _dss3: Optional[float] = None,
  _dss4: Optional[float] = None,
  _dss5: Optional[float] = None,
  _dab0: Optional[float] = None,
  _dab1: Optional[float] = None,
  _dab2: Optional[float] = None,
  _dab3: Optional[float] = None,
  _dab4: Optional[float] = None,
  _dab5: Optional[float] = None,
  _Fermi_D_cnst: Optional[float] = None,
) -> Callable:
  r"""
  Y. Wang, X. Jin, H. S. Yu, D. G. Truhlar, and X. He.,  Proc. Natl. Acad. Sci. U. S. A. 114, 8487-8492 (2017)
  `10.1073/pnas.1705670114 <http://www.pnas.org/content/114/32/8487.abstract>`_

  
  Mixing of the following functionals:
    lda_c_pw_mod (coefficient: 1.4916681462400413e-154)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _gamma_ss : Optional[float], default: 0.06
    gamma_ss
  _gamma_ab : Optional[float], default: 0.0031
    gamma_ab
  _alpha_ss : Optional[float], default: 0.00515088
    alpha_ss
  _alpha_ab : Optional[float], default: 0.00304966
    alpha_ab
  _css0 : Optional[float], default: 1.227659748
    css0
  _css1 : Optional[float], default: 0.855201283
    css1
  _css2 : Optional[float], default: -3.113346677
    css2
  _css3 : Optional[float], default: -2.239678026
    css3
  _css4 : Optional[float], default: 0.354638962
    css4
  _cab0 : Optional[float], default: 0.344360696
    cab0
  _cab1 : Optional[float], default: -0.557080242
    cab1
  _cab2 : Optional[float], default: -2.009821162
    cab2
  _cab3 : Optional[float], default: -1.857641887
    cab3
  _cab4 : Optional[float], default: -1.076639864
    cab4
  _dss0 : Optional[float], default: -0.538821292
    dss0
  _dss1 : Optional[float], default: -0.02829603
    dss1
  _dss2 : Optional[float], default: 0.023889696
    dss2
  _dss3 : Optional[float], default: 0.0
    dss3
  _dss4 : Optional[float], default: 0.0
    dss4
  _dss5 : Optional[float], default: -0.002437902
    dss5
  _dab0 : Optional[float], default: 0.4007146
    dab0
  _dab1 : Optional[float], default: 0.015796569
    dab1
  _dab2 : Optional[float], default: -0.032680984
    dab2
  _dab3 : Optional[float], default: 0.0
    dab3
  _dab4 : Optional[float], default: 0.0
    dab4
  _dab5 : Optional[float], default: 0.001260132
    dab5
  _Fermi_D_cnst : Optional[float], default: 1e-10
    Constant for the correction term similar to 10.1063/1.2800011
  """
  _gamma_ss = (_gamma_ss or 0.06)
  _gamma_ab = (_gamma_ab or 0.0031)
  _alpha_ss = (_alpha_ss or 0.00515088)
  _alpha_ab = (_alpha_ab or 0.00304966)
  _css0 = (_css0 or 1.227659748)
  _css1 = (_css1 or 0.855201283)
  _css2 = (_css2 or -3.113346677)
  _css3 = (_css3 or -2.239678026)
  _css4 = (_css4 or 0.354638962)
  _cab0 = (_cab0 or 0.344360696)
  _cab1 = (_cab1 or -0.557080242)
  _cab2 = (_cab2 or -2.009821162)
  _cab3 = (_cab3 or -1.857641887)
  _cab4 = (_cab4 or -1.076639864)
  _dss0 = (_dss0 or -0.538821292)
  _dss1 = (_dss1 or -0.02829603)
  _dss2 = (_dss2 or 0.023889696)
  _dss3 = (_dss3 or 0.0)
  _dss4 = (_dss4 or 0.0)
  _dss5 = (_dss5 or -0.002437902)
  _dab0 = (_dab0 or 0.4007146)
  _dab1 = (_dab1 or 0.015796569)
  _dab2 = (_dab2 or -0.032680984)
  _dab3 = (_dab3 or 0.0)
  _dab4 = (_dab4 or 0.0)
  _dab5 = (_dab5 or 0.001260132)
  _Fermi_D_cnst = (_Fermi_D_cnst or 1e-10)
  p = get_p("mgga_c_revm06_l", polarized, _gamma_ss, _gamma_ab, _alpha_ss, _alpha_ab, _css0, _css1, _css2, _css3, _css4, _cab0, _cab1, _cab2, _cab3, _cab4, _dss0, _dss1, _dss2, _dss3, _dss4, _dss5, _dab0, _dab1, _dab2, _dab3, _dab4, _dab5, _Fermi_D_cnst)
  def _mgga_c_revm06_l_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_c_revm06_l.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  
  _mgga_c_revm06_l_epsilon_xc.cam_alpha = p.cam_alpha
  _mgga_c_revm06_l_epsilon_xc.cam_beta = p.cam_beta
  _mgga_c_revm06_l_epsilon_xc.cam_omega = p.cam_omega
  _mgga_c_revm06_l_epsilon_xc.nlc_b = p.nlc_b
  _mgga_c_revm06_l_epsilon_xc.nlc_C = p.nlc_C

  return _mgga_c_revm06_l_epsilon_xc

def hyb_mgga_x_m08_hx(
  polarized: bool = True,
  _a0: Optional[float] = None,
  _a1: Optional[float] = None,
  _a2: Optional[float] = None,
  _a3: Optional[float] = None,
  _a4: Optional[float] = None,
  _a5: Optional[float] = None,
  _a6: Optional[float] = None,
  _a7: Optional[float] = None,
  _a8: Optional[float] = None,
  _a9: Optional[float] = None,
  _a10: Optional[float] = None,
  _a11: Optional[float] = None,
  _b0: Optional[float] = None,
  _b1: Optional[float] = None,
  _b2: Optional[float] = None,
  _b3: Optional[float] = None,
  _b4: Optional[float] = None,
  _b5: Optional[float] = None,
  _b6: Optional[float] = None,
  _b7: Optional[float] = None,
  _b8: Optional[float] = None,
  _b9: Optional[float] = None,
  _b10: Optional[float] = None,
  _b11: Optional[float] = None,
  _ax: Optional[float] = None,
) -> Callable:
  r"""
  Y. Zhao and D. G. Truhlar.,  J. Chem. Theory Comput. 4, 1849 (2008)
  `10.1021/ct800246v <http://pubs.acs.org/doi/abs/10.1021/ct800246v>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a0 : Optional[float], default: 1.3340172
    a0
  _a1 : Optional[float], default: -9.4751087
    a1
  _a2 : Optional[float], default: -12.541893
    a2
  _a3 : Optional[float], default: 9.1369974
    a3
  _a4 : Optional[float], default: 34.717204
    a4
  _a5 : Optional[float], default: 58.831807
    a5
  _a6 : Optional[float], default: 71.369574
    a6
  _a7 : Optional[float], default: 23.312961
    a7
  _a8 : Optional[float], default: 4.8314679
    a8
  _a9 : Optional[float], default: -6.5044167
    a9
  _a10 : Optional[float], default: -14.058265
    a10
  _a11 : Optional[float], default: 12.88057
    a11
  _b0 : Optional[float], default: -0.85631823
    b0
  _b1 : Optional[float], default: 9.2810354
    b1
  _b2 : Optional[float], default: 12.260749
    b2
  _b3 : Optional[float], default: -5.5189665
    b3
  _b4 : Optional[float], default: -35.534989
    b4
  _b5 : Optional[float], default: -82.049996
    b5
  _b6 : Optional[float], default: -68.586558
    b6
  _b7 : Optional[float], default: 36.085694
    b7
  _b8 : Optional[float], default: -9.3740983
    b8
  _b9 : Optional[float], default: -59.731688
    b9
  _b10 : Optional[float], default: 16.587868
    b10
  _b11 : Optional[float], default: 13.993203
    b11
  _ax : Optional[float], default: 0.5223
    exact exchange
  """
  _a0 = (_a0 or 1.3340172)
  _a1 = (_a1 or -9.4751087)
  _a2 = (_a2 or -12.541893)
  _a3 = (_a3 or 9.1369974)
  _a4 = (_a4 or 34.717204)
  _a5 = (_a5 or 58.831807)
  _a6 = (_a6 or 71.369574)
  _a7 = (_a7 or 23.312961)
  _a8 = (_a8 or 4.8314679)
  _a9 = (_a9 or -6.5044167)
  _a10 = (_a10 or -14.058265)
  _a11 = (_a11 or 12.88057)
  _b0 = (_b0 or -0.85631823)
  _b1 = (_b1 or 9.2810354)
  _b2 = (_b2 or 12.260749)
  _b3 = (_b3 or -5.5189665)
  _b4 = (_b4 or -35.534989)
  _b5 = (_b5 or -82.049996)
  _b6 = (_b6 or -68.586558)
  _b7 = (_b7 or 36.085694)
  _b8 = (_b8 or -9.3740983)
  _b9 = (_b9 or -59.731688)
  _b10 = (_b10 or 16.587868)
  _b11 = (_b11 or 13.993203)
  _ax = (_ax or 0.5223)
  p = get_p("hyb_mgga_x_m08_hx", polarized, _a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8, _a9, _a10, _a11, _b0, _b1, _b2, _b3, _b4, _b5, _b6, _b7, _b8, _b9, _b10, _b11, _ax)
  def _hyb_mgga_x_m08_hx_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_mgga_x_m08_hx.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _hyb_mgga_x_m08_hx_epsilon_xc

def hyb_mgga_x_m08_so(
  polarized: bool = True,
  _a0: Optional[float] = None,
  _a1: Optional[float] = None,
  _a2: Optional[float] = None,
  _a3: Optional[float] = None,
  _a4: Optional[float] = None,
  _a5: Optional[float] = None,
  _a6: Optional[float] = None,
  _a7: Optional[float] = None,
  _a8: Optional[float] = None,
  _a9: Optional[float] = None,
  _a10: Optional[float] = None,
  _a11: Optional[float] = None,
  _b0: Optional[float] = None,
  _b1: Optional[float] = None,
  _b2: Optional[float] = None,
  _b3: Optional[float] = None,
  _b4: Optional[float] = None,
  _b5: Optional[float] = None,
  _b6: Optional[float] = None,
  _b7: Optional[float] = None,
  _b8: Optional[float] = None,
  _b9: Optional[float] = None,
  _b10: Optional[float] = None,
  _b11: Optional[float] = None,
  _ax: Optional[float] = None,
) -> Callable:
  r"""
  Y. Zhao and D. G. Truhlar.,  J. Chem. Theory Comput. 4, 1849 (2008)
  `10.1021/ct800246v <http://pubs.acs.org/doi/abs/10.1021/ct800246v>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a0 : Optional[float], default: -0.34888428
    a0
  _a1 : Optional[float], default: -5.8157416
    a1
  _a2 : Optional[float], default: 37.55081
    a2
  _a3 : Optional[float], default: 63.727406
    a3
  _a4 : Optional[float], default: -53.742313
    a4
  _a5 : Optional[float], default: -98.595529
    a5
  _a6 : Optional[float], default: 16.282216
    a6
  _a7 : Optional[float], default: 17.513468
    a7
  _a8 : Optional[float], default: -6.7627553
    a8
  _a9 : Optional[float], default: 11.106658
    a9
  _a10 : Optional[float], default: 1.5663545
    a10
  _a11 : Optional[float], default: 8.760347
    a11
  _b0 : Optional[float], default: 0.78098428
    b0
  _b1 : Optional[float], default: 5.4538178
    b1
  _b2 : Optional[float], default: -37.853348
    b2
  _b3 : Optional[float], default: -62.29508
    b3
  _b4 : Optional[float], default: 46.713254
    b4
  _b5 : Optional[float], default: 87.321376
    b5
  _b6 : Optional[float], default: 16.053446
    b6
  _b7 : Optional[float], default: 20.12692
    b7
  _b8 : Optional[float], default: -40.343695
    b8
  _b9 : Optional[float], default: -58.577565
    b9
  _b10 : Optional[float], default: 20.890272
    b10
  _b11 : Optional[float], default: 10.946903
    b11
  _ax : Optional[float], default: 0.5679
    exact exchange
  """
  _a0 = (_a0 or -0.34888428)
  _a1 = (_a1 or -5.8157416)
  _a2 = (_a2 or 37.55081)
  _a3 = (_a3 or 63.727406)
  _a4 = (_a4 or -53.742313)
  _a5 = (_a5 or -98.595529)
  _a6 = (_a6 or 16.282216)
  _a7 = (_a7 or 17.513468)
  _a8 = (_a8 or -6.7627553)
  _a9 = (_a9 or 11.106658)
  _a10 = (_a10 or 1.5663545)
  _a11 = (_a11 or 8.760347)
  _b0 = (_b0 or 0.78098428)
  _b1 = (_b1 or 5.4538178)
  _b2 = (_b2 or -37.853348)
  _b3 = (_b3 or -62.29508)
  _b4 = (_b4 or 46.713254)
  _b5 = (_b5 or 87.321376)
  _b6 = (_b6 or 16.053446)
  _b7 = (_b7 or 20.12692)
  _b8 = (_b8 or -40.343695)
  _b9 = (_b9 or -58.577565)
  _b10 = (_b10 or 20.890272)
  _b11 = (_b11 or 10.946903)
  _ax = (_ax or 0.5679)
  p = get_p("hyb_mgga_x_m08_so", polarized, _a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8, _a9, _a10, _a11, _b0, _b1, _b2, _b3, _b4, _b5, _b6, _b7, _b8, _b9, _b10, _b11, _ax)
  def _hyb_mgga_x_m08_so_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_mgga_x_m08_so.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _hyb_mgga_x_m08_so_epsilon_xc

def hyb_mgga_x_m11(
  polarized: bool = True,
  _a0: Optional[float] = None,
  _a1: Optional[float] = None,
  _a2: Optional[float] = None,
  _a3: Optional[float] = None,
  _a4: Optional[float] = None,
  _a5: Optional[float] = None,
  _a6: Optional[float] = None,
  _a7: Optional[float] = None,
  _a8: Optional[float] = None,
  _a9: Optional[float] = None,
  _a10: Optional[float] = None,
  _a11: Optional[float] = None,
  _b0: Optional[float] = None,
  _b1: Optional[float] = None,
  _b2: Optional[float] = None,
  _b3: Optional[float] = None,
  _b4: Optional[float] = None,
  _b5: Optional[float] = None,
  _b6: Optional[float] = None,
  _b7: Optional[float] = None,
  _b8: Optional[float] = None,
  _b9: Optional[float] = None,
  _b10: Optional[float] = None,
  _b11: Optional[float] = None,
  _alpha: Optional[float] = None,
  _beta: Optional[float] = None,
  _omega: Optional[float] = None,
) -> Callable:
  r"""
  R. Peverati and D. G. Truhlar.,  J. Phys. Chem. Lett. 2, 2810 (2011)
  `10.1021/jz201170d <http://pubs.acs.org/doi/abs/10.1021/jz201170d>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a0 : Optional[float], default: -0.183999
    a0 parameter
  _a1 : Optional[float], default: -13.9046703
    a1 parameter
  _a2 : Optional[float], default: 11.8206837
    a2 parameter
  _a3 : Optional[float], default: 31.0098465
    a3 parameter
  _a4 : Optional[float], default: -51.9625696
    a4 parameter
  _a5 : Optional[float], default: 15.5750312
    a5 parameter
  _a6 : Optional[float], default: -6.9477573
    a6 parameter
  _a7 : Optional[float], default: -158.465014
    a7 parameter
  _a8 : Optional[float], default: -1.48447565
    a8 parameter
  _a9 : Optional[float], default: 55.1042124
    a9 parameter
  _a10 : Optional[float], default: -13.4714184
    a10 parameter
  _a11 : Optional[float], default: 0.0
    a11 parameter
  _b0 : Optional[float], default: 0.755999
    b0 parameter
  _b1 : Optional[float], default: 13.7137944
    b1 parameter
  _b2 : Optional[float], default: -12.7998304
    b2 parameter
  _b3 : Optional[float], default: -29.3428814
    b3 parameter
  _b4 : Optional[float], default: 59.1075674
    b4 parameter
  _b5 : Optional[float], default: -22.7604866
    b5 parameter
  _b6 : Optional[float], default: -10.276934
    b6 parameter
  _b7 : Optional[float], default: 164.752731
    b7 parameter
  _b8 : Optional[float], default: 18.5349258
    b8 parameter
  _b9 : Optional[float], default: -55.6825639
    b9 parameter
  _b10 : Optional[float], default: 7.47980859
    b10 parameter
  _b11 : Optional[float], default: 0.0
    b11 parameter
  _alpha : Optional[float], default: 1.0
    exact exchange
  _beta : Optional[float], default: -0.5720000000000001
    short-range exchange
  _omega : Optional[float], default: 0.25
    range-separation
  """
  _a0 = (_a0 or -0.183999)
  _a1 = (_a1 or -13.9046703)
  _a2 = (_a2 or 11.8206837)
  _a3 = (_a3 or 31.0098465)
  _a4 = (_a4 or -51.9625696)
  _a5 = (_a5 or 15.5750312)
  _a6 = (_a6 or -6.9477573)
  _a7 = (_a7 or -158.465014)
  _a8 = (_a8 or -1.48447565)
  _a9 = (_a9 or 55.1042124)
  _a10 = (_a10 or -13.4714184)
  _a11 = (_a11 or 0.0)
  _b0 = (_b0 or 0.755999)
  _b1 = (_b1 or 13.7137944)
  _b2 = (_b2 or -12.7998304)
  _b3 = (_b3 or -29.3428814)
  _b4 = (_b4 or 59.1075674)
  _b5 = (_b5 or -22.7604866)
  _b6 = (_b6 or -10.276934)
  _b7 = (_b7 or 164.752731)
  _b8 = (_b8 or 18.5349258)
  _b9 = (_b9 or -55.6825639)
  _b10 = (_b10 or 7.47980859)
  _b11 = (_b11 or 0.0)
  _alpha = (_alpha or 1.0)
  _beta = (_beta or -0.5720000000000001)
  _omega = (_omega or 0.25)
  p = get_p("hyb_mgga_x_m11", polarized, _a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8, _a9, _a10, _a11, _b0, _b1, _b2, _b3, _b4, _b5, _b6, _b7, _b8, _b9, _b10, _b11, _alpha, _beta, _omega)
  def _hyb_mgga_x_m11_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_mgga_x_m11.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _hyb_mgga_x_m11_epsilon_xc

def gga_x_chachiyo(
  polarized: bool = True,
) -> Callable:
  r"""
  T. Chachiyo and H. Chachiyo.,  Molecules 25, 3485 (2020)
  `10.3390/molecules25153485 <https://www.mdpi.com/1420-3049/25/15/3485>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_x_chachiyo", polarized, )
  def _gga_x_chachiyo_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_chachiyo.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_chachiyo_epsilon_xc

def mgga_x_rtpss(
  polarized: bool = True,
  _b: Optional[float] = None,
  _c: Optional[float] = None,
  _e: Optional[float] = None,
  _kappa: Optional[float] = None,
  _mu: Optional[float] = None,
) -> Callable:
  r"""
  A. J. Garza, A. T. Bell, and M. Head-Gordon.,  J. Chem. Theory Comput. 14, 3083-3090 (2018)
  `10.1021/acs.jctc.8b00288 <https://doi.org/10.1021/acs.jctc.8b00288>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _b : Optional[float], default: 0.4
    b
  _c : Optional[float], default: 1.59096
    c
  _e : Optional[float], default: 1.537
    e
  _kappa : Optional[float], default: 0.804
    Asymptotic value of the enhancement function
  _mu : Optional[float], default: 0.21951
    Coefficient of the 2nd order expansion
  """
  _b = (_b or 0.4)
  _c = (_c or 1.59096)
  _e = (_e or 1.537)
  _kappa = (_kappa or 0.804)
  _mu = (_mu or 0.21951)
  p = get_p("mgga_x_rtpss", polarized, _b, _c, _e, _kappa, _mu)
  def _mgga_x_rtpss_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_rtpss.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_rtpss_epsilon_xc

def mgga_x_ms2b(
  polarized: bool = True,
) -> Callable:
  r"""
  J. W. Furness and J. Sun.,  Phys. Rev. B 99, 041119 (2019)
  `10.1103/PhysRevB.99.041119 <https://link.aps.org/doi/10.1103/PhysRevB.99.041119>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("mgga_x_ms2b", polarized, )
  def _mgga_x_ms2b_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_ms2b.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_ms2b_epsilon_xc

def mgga_x_ms2bs(
  polarized: bool = True,
) -> Callable:
  r"""
  J. W. Furness and J. Sun.,  ArXiv e-prints  (2018)
  

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("mgga_x_ms2bs", polarized, )
  def _mgga_x_ms2bs_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_ms2bs.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_ms2bs_epsilon_xc

def mgga_x_mvsb(
  polarized: bool = True,
  _e1: Optional[float] = None,
  _c1: Optional[float] = None,
  _k0: Optional[float] = None,
  _b: Optional[float] = None,
) -> Callable:
  r"""
  J. W. Furness and J. Sun.,  ArXiv e-prints  (2018)
  

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _e1 : Optional[float], default: -1.6665
    e1 parameter
  _c1 : Optional[float], default: 7.8393
    c1 parameter
  _k0 : Optional[float], default: 0.174
    k0 parameter
  _b : Optional[float], default: 0.0233
    b parameter
  """
  _e1 = (_e1 or -1.6665)
  _c1 = (_c1 or 7.8393)
  _k0 = (_k0 or 0.174)
  _b = (_b or 0.0233)
  p = get_p("mgga_x_mvsb", polarized, _e1, _c1, _k0, _b)
  def _mgga_x_mvsb_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_mvsb.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_mvsb_epsilon_xc

def mgga_x_mvsbs(
  polarized: bool = True,
  _e1: Optional[float] = None,
  _c1: Optional[float] = None,
  _k0: Optional[float] = None,
  _b: Optional[float] = None,
) -> Callable:
  r"""
  J. W. Furness and J. Sun.,  ArXiv e-prints  (2018)
  

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _e1 : Optional[float], default: -2.38
    e1 parameter
  _c1 : Optional[float], default: 6.3783
    c1 parameter
  _k0 : Optional[float], default: 0.174
    k0 parameter
  _b : Optional[float], default: 0.0233
    b parameter
  """
  _e1 = (_e1 or -2.38)
  _c1 = (_c1 or 6.3783)
  _k0 = (_k0 or 0.174)
  _b = (_b or 0.0233)
  p = get_p("mgga_x_mvsbs", polarized, _e1, _c1, _k0, _b)
  def _mgga_x_mvsbs_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_mvsbs.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_mvsbs_epsilon_xc

def hyb_mgga_x_revm11(
  polarized: bool = True,
  _a0: Optional[float] = None,
  _a1: Optional[float] = None,
  _a2: Optional[float] = None,
  _a3: Optional[float] = None,
  _a4: Optional[float] = None,
  _a5: Optional[float] = None,
  _a6: Optional[float] = None,
  _a7: Optional[float] = None,
  _a8: Optional[float] = None,
  _a9: Optional[float] = None,
  _a10: Optional[float] = None,
  _a11: Optional[float] = None,
  _b0: Optional[float] = None,
  _b1: Optional[float] = None,
  _b2: Optional[float] = None,
  _b3: Optional[float] = None,
  _b4: Optional[float] = None,
  _b5: Optional[float] = None,
  _b6: Optional[float] = None,
  _b7: Optional[float] = None,
  _b8: Optional[float] = None,
  _b9: Optional[float] = None,
  _b10: Optional[float] = None,
  _b11: Optional[float] = None,
  _alpha: Optional[float] = None,
  _beta: Optional[float] = None,
  _omega: Optional[float] = None,
) -> Callable:
  r"""
  P. Verma, Y. Wang, S. Ghosh, X. He, and D. G. Truhlar.,  J. Phys. Chem. A 123, 2966-2990 (2019)
  `10.1021/acs.jpca.8b11499 <https://doi.org/10.1021/acs.jpca.8b11499>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a0 : Optional[float], default: -0.3288860885
    a0 parameter
  _a1 : Optional[float], default: -8.3888150476
    a1 parameter
  _a2 : Optional[float], default: 0.7123891057
    a2 parameter
  _a3 : Optional[float], default: 3.6196212952
    a3 parameter
  _a4 : Optional[float], default: 4.3941708207
    a4 parameter
  _a5 : Optional[float], default: 5.0453345584
    a5 parameter
  _a6 : Optional[float], default: 7.8667061191
    a6 parameter
  _a7 : Optional[float], default: 0.0
    a7 parameter
  _a8 : Optional[float], default: 0.0
    a8 parameter
  _a9 : Optional[float], default: 0.0
    a9 parameter
  _a10 : Optional[float], default: 0.0
    a10 parameter
  _a11 : Optional[float], default: 0.0
    a11 parameter
  _b0 : Optional[float], default: 1.1038860885
    b0 parameter
  _b1 : Optional[float], default: 8.0476369587
    b1 parameter
  _b2 : Optional[float], default: -0.7353624773
    b2 parameter
  _b3 : Optional[float], default: -2.473527555
    b3 parameter
  _b4 : Optional[float], default: -4.7319060355
    b4 parameter
  _b5 : Optional[float], default: -5.8502502096
    b5 parameter
  _b6 : Optional[float], default: -7.5059975327
    b6 parameter
  _b7 : Optional[float], default: 0.0
    b7 parameter
  _b8 : Optional[float], default: 0.0
    b8 parameter
  _b9 : Optional[float], default: 0.0
    b9 parameter
  _b10 : Optional[float], default: 0.0
    b10 parameter
  _b11 : Optional[float], default: 0.0
    b11 parameter
  _alpha : Optional[float], default: 1.0
    exact exchange
  _beta : Optional[float], default: -0.775
    short-range exchange
  _omega : Optional[float], default: 0.4
    range-separation
  """
  _a0 = (_a0 or -0.3288860885)
  _a1 = (_a1 or -8.3888150476)
  _a2 = (_a2 or 0.7123891057)
  _a3 = (_a3 or 3.6196212952)
  _a4 = (_a4 or 4.3941708207)
  _a5 = (_a5 or 5.0453345584)
  _a6 = (_a6 or 7.8667061191)
  _a7 = (_a7 or 0.0)
  _a8 = (_a8 or 0.0)
  _a9 = (_a9 or 0.0)
  _a10 = (_a10 or 0.0)
  _a11 = (_a11 or 0.0)
  _b0 = (_b0 or 1.1038860885)
  _b1 = (_b1 or 8.0476369587)
  _b2 = (_b2 or -0.7353624773)
  _b3 = (_b3 or -2.473527555)
  _b4 = (_b4 or -4.7319060355)
  _b5 = (_b5 or -5.8502502096)
  _b6 = (_b6 or -7.5059975327)
  _b7 = (_b7 or 0.0)
  _b8 = (_b8 or 0.0)
  _b9 = (_b9 or 0.0)
  _b10 = (_b10 or 0.0)
  _b11 = (_b11 or 0.0)
  _alpha = (_alpha or 1.0)
  _beta = (_beta or -0.775)
  _omega = (_omega or 0.4)
  p = get_p("hyb_mgga_x_revm11", polarized, _a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8, _a9, _a10, _a11, _b0, _b1, _b2, _b3, _b4, _b5, _b6, _b7, _b8, _b9, _b10, _b11, _alpha, _beta, _omega)
  def _hyb_mgga_x_revm11_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_mgga_x_revm11.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _hyb_mgga_x_revm11_epsilon_xc

def hyb_mgga_x_revm06(
  polarized: bool = True,
  _a0: Optional[float] = None,
  _a1: Optional[float] = None,
  _a2: Optional[float] = None,
  _a3: Optional[float] = None,
  _a4: Optional[float] = None,
  _a5: Optional[float] = None,
  _a6: Optional[float] = None,
  _a7: Optional[float] = None,
  _a8: Optional[float] = None,
  _a9: Optional[float] = None,
  _a10: Optional[float] = None,
  _a11: Optional[float] = None,
  _d0: Optional[float] = None,
  _d1: Optional[float] = None,
  _d2: Optional[float] = None,
  _d3: Optional[float] = None,
  _d4: Optional[float] = None,
  _d5: Optional[float] = None,
  _X: Optional[float] = None,
) -> Callable:
  r"""
  Y. Wang, P. Verma, X. Jin, D. G. Truhlar, and X. He.,  Proc. Natl. Acad. Sci. U. S. A. 115, 10257–10262 (2018)
  `10.1073/pnas.1810421115 <https://www.pnas.org/content/115/41/10257>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a0 : Optional[float], default: 0.6511394014
    _a0 parameter
  _a1 : Optional[float], default: -0.1214497763
    _a1 parameter
  _a2 : Optional[float], default: -0.1367041135
    _a2 parameter
  _a3 : Optional[float], default: 0.3987218551
    _a3 parameter
  _a4 : Optional[float], default: 0.6056741356
    _a4 parameter
  _a5 : Optional[float], default: -2.379738662
    _a5 parameter
  _a6 : Optional[float], default: -1.492098351
    _a6 parameter
  _a7 : Optional[float], default: 3.03147342
    _a7 parameter
  _a8 : Optional[float], default: 0.5149637108
    _a8 parameter
  _a9 : Optional[float], default: 2.633751911
    _a9 parameter
  _a10 : Optional[float], default: 0.9886749252
    _a10 parameter
  _a11 : Optional[float], default: -4.243714128
    _a11 parameter
  _d0 : Optional[float], default: -0.0552394014
    _d0 parameter
  _d1 : Optional[float], default: 0.0
    _d1 parameter
  _d2 : Optional[float], default: -0.003782631233
    _d2 parameter
  _d3 : Optional[float], default: 0.0
    _d3 parameter
  _d4 : Optional[float], default: 0.0
    _d4 parameter
  _d5 : Optional[float], default: 0.0
    _d5 parameter
  _X : Optional[float], default: 0.4041
    Fraction of exact exchange
  """
  _a0 = (_a0 or 0.6511394014)
  _a1 = (_a1 or -0.1214497763)
  _a2 = (_a2 or -0.1367041135)
  _a3 = (_a3 or 0.3987218551)
  _a4 = (_a4 or 0.6056741356)
  _a5 = (_a5 or -2.379738662)
  _a6 = (_a6 or -1.492098351)
  _a7 = (_a7 or 3.03147342)
  _a8 = (_a8 or 0.5149637108)
  _a9 = (_a9 or 2.633751911)
  _a10 = (_a10 or 0.9886749252)
  _a11 = (_a11 or -4.243714128)
  _d0 = (_d0 or -0.0552394014)
  _d1 = (_d1 or 0.0)
  _d2 = (_d2 or -0.003782631233)
  _d3 = (_d3 or 0.0)
  _d4 = (_d4 or 0.0)
  _d5 = (_d5 or 0.0)
  _X = (_X or 0.4041)
  p = get_p("hyb_mgga_x_revm06", polarized, _a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8, _a9, _a10, _a11, _d0, _d1, _d2, _d3, _d4, _d5, _X)
  def _hyb_mgga_x_revm06_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_mgga_x_revm06.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _hyb_mgga_x_revm06_epsilon_xc

def mgga_c_revm06(
  polarized: bool = True,
  _gamma_ss: Optional[float] = None,
  _gamma_ab: Optional[float] = None,
  _alpha_ss: Optional[float] = None,
  _alpha_ab: Optional[float] = None,
  _css0: Optional[float] = None,
  _css1: Optional[float] = None,
  _css2: Optional[float] = None,
  _css3: Optional[float] = None,
  _css4: Optional[float] = None,
  _cab0: Optional[float] = None,
  _cab1: Optional[float] = None,
  _cab2: Optional[float] = None,
  _cab3: Optional[float] = None,
  _cab4: Optional[float] = None,
  _dss0: Optional[float] = None,
  _dss1: Optional[float] = None,
  _dss2: Optional[float] = None,
  _dss3: Optional[float] = None,
  _dss4: Optional[float] = None,
  _dss5: Optional[float] = None,
  _dab0: Optional[float] = None,
  _dab1: Optional[float] = None,
  _dab2: Optional[float] = None,
  _dab3: Optional[float] = None,
  _dab4: Optional[float] = None,
  _dab5: Optional[float] = None,
  _Fermi_D_cnst: Optional[float] = None,
) -> Callable:
  r"""
  Y. Wang, P. Verma, X. Jin, D. G. Truhlar, and X. He.,  Proc. Natl. Acad. Sci. U. S. A. 115, 10257–10262 (2018)
  `10.1073/pnas.1810421115 <https://www.pnas.org/content/115/41/10257>`_

  
  Mixing of the following functionals:
    lda_c_pw_mod (coefficient: 1.4916681462400413e-154)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _gamma_ss : Optional[float], default: 0.06
    gamma_ss
  _gamma_ab : Optional[float], default: 0.0031
    gamma_ab
  _alpha_ss : Optional[float], default: 0.00515088
    alpha_ss
  _alpha_ab : Optional[float], default: 0.00304966
    alpha_ab
  _css0 : Optional[float], default: 0.9017224575
    css0
  _css1 : Optional[float], default: 0.2079991827
    css1
  _css2 : Optional[float], default: -1.823747562
    css2
  _css3 : Optional[float], default: -1.384430429
    css3
  _css4 : Optional[float], default: -0.4423253381
    css4
  _cab0 : Optional[float], default: 1.222401598
    cab0
  _cab1 : Optional[float], default: 0.6613907336
    cab1
  _cab2 : Optional[float], default: -1.884581043
    cab2
  _cab3 : Optional[float], default: -2.780360568
    cab3
  _cab4 : Optional[float], default: -3.068579344
    cab4
  _dss0 : Optional[float], default: -0.14670959
    dss0
  _dss1 : Optional[float], default: -0.0001832187007
    dss1
  _dss2 : Optional[float], default: 0.0848437243
    dss2
  _dss3 : Optional[float], default: 0.0
    dss3
  _dss4 : Optional[float], default: 0.0
    dss4
  _dss5 : Optional[float], default: 0.0002280677172
    dss5
  _dab0 : Optional[float], default: -0.339066672
    dab0
  _dab1 : Optional[float], default: 0.003790156384
    dab1
  _dab2 : Optional[float], default: -0.02762485975
    dab2
  _dab3 : Optional[float], default: 0.0
    dab3
  _dab4 : Optional[float], default: 0.0
    dab4
  _dab5 : Optional[float], default: 0.0004076285162
    dab5
  _Fermi_D_cnst : Optional[float], default: 1e-10
    Constant for the correction term similar to 10.1063/1.2800011
  """
  _gamma_ss = (_gamma_ss or 0.06)
  _gamma_ab = (_gamma_ab or 0.0031)
  _alpha_ss = (_alpha_ss or 0.00515088)
  _alpha_ab = (_alpha_ab or 0.00304966)
  _css0 = (_css0 or 0.9017224575)
  _css1 = (_css1 or 0.2079991827)
  _css2 = (_css2 or -1.823747562)
  _css3 = (_css3 or -1.384430429)
  _css4 = (_css4 or -0.4423253381)
  _cab0 = (_cab0 or 1.222401598)
  _cab1 = (_cab1 or 0.6613907336)
  _cab2 = (_cab2 or -1.884581043)
  _cab3 = (_cab3 or -2.780360568)
  _cab4 = (_cab4 or -3.068579344)
  _dss0 = (_dss0 or -0.14670959)
  _dss1 = (_dss1 or -0.0001832187007)
  _dss2 = (_dss2 or 0.0848437243)
  _dss3 = (_dss3 or 0.0)
  _dss4 = (_dss4 or 0.0)
  _dss5 = (_dss5 or 0.0002280677172)
  _dab0 = (_dab0 or -0.339066672)
  _dab1 = (_dab1 or 0.003790156384)
  _dab2 = (_dab2 or -0.02762485975)
  _dab3 = (_dab3 or 0.0)
  _dab4 = (_dab4 or 0.0)
  _dab5 = (_dab5 or 0.0004076285162)
  _Fermi_D_cnst = (_Fermi_D_cnst or 1e-10)
  p = get_p("mgga_c_revm06", polarized, _gamma_ss, _gamma_ab, _alpha_ss, _alpha_ab, _css0, _css1, _css2, _css3, _css4, _cab0, _cab1, _cab2, _cab3, _cab4, _dss0, _dss1, _dss2, _dss3, _dss4, _dss5, _dab0, _dab1, _dab2, _dab3, _dab4, _dab5, _Fermi_D_cnst)
  def _mgga_c_revm06_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_c_revm06.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  
  _mgga_c_revm06_epsilon_xc.cam_alpha = p.cam_alpha
  _mgga_c_revm06_epsilon_xc.cam_beta = p.cam_beta
  _mgga_c_revm06_epsilon_xc.cam_omega = p.cam_omega
  _mgga_c_revm06_epsilon_xc.nlc_b = p.nlc_b
  _mgga_c_revm06_epsilon_xc.nlc_C = p.nlc_C

  return _mgga_c_revm06_epsilon_xc

def lda_c_chachiyo_mod(
  polarized: bool = True,
  _ap: Optional[float] = None,
  _bp: Optional[float] = None,
  _cp: Optional[float] = None,
  _af: Optional[float] = None,
  _bf: Optional[float] = None,
  _cf: Optional[float] = None,
) -> Callable:
  r"""
  T. Chachiyo and H. Chachiyo.,  Comput. Theor. Chem. 1172, 112669 (2020)
  `10.1016/j.comptc.2019.112669 <http://www.sciencedirect.com/science/article/pii/S2210271X19303652>`_

  T. Chachiyo.,  J. Chem. Phys. 145, 021101 (2016)
  `10.1063/1.4958669 <http://scitation.aip.org/content/aip/journal/jcp/145/2/10.1063/1.4958669>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _ap : Optional[float], default: -0.01554535
    ap parameter
  _bp : Optional[float], default: 20.4562557
    bp parameter
  _cp : Optional[float], default: 20.4562557
    cp parameter
  _af : Optional[float], default: -0.007772675
    af parameter
  _bf : Optional[float], default: 27.4203609
    bf parameter
  _cf : Optional[float], default: 27.4203609
    cf parameter
  """
  _ap = (_ap or -0.01554535)
  _bp = (_bp or 20.4562557)
  _cp = (_cp or 20.4562557)
  _af = (_af or -0.007772675)
  _bf = (_bf or 27.4203609)
  _cf = (_cf or 27.4203609)
  p = get_p("lda_c_chachiyo_mod", polarized, _ap, _bp, _cp, _af, _bf, _cf)
  def _lda_c_chachiyo_mod_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of lda_c_chachiyo_mod.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _lda_c_chachiyo_mod_epsilon_xc

def lda_c_karasiev_mod(
  polarized: bool = True,
  _ap: Optional[float] = None,
  _bp: Optional[float] = None,
  _cp: Optional[float] = None,
  _af: Optional[float] = None,
  _bf: Optional[float] = None,
  _cf: Optional[float] = None,
) -> Callable:
  r"""
  T. Chachiyo and H. Chachiyo.,  Comput. Theor. Chem. 1172, 112669 (2020)
  `10.1016/j.comptc.2019.112669 <http://www.sciencedirect.com/science/article/pii/S2210271X19303652>`_

  V. V. Karasiev.,  J. Chem. Phys. 145, 157101 (2016)
  `10.1063/1.4964758 <https://doi.org/10.1063/1.4964758>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _ap : Optional[float], default: -0.01554535
    ap parameter
  _bp : Optional[float], default: 21.7392245
    bp parameter
  _cp : Optional[float], default: 20.4562557
    cp parameter
  _af : Optional[float], default: -0.007772675
    af parameter
  _bf : Optional[float], default: 28.3559732
    bf parameter
  _cf : Optional[float], default: 27.4203609
    cf parameter
  """
  _ap = (_ap or -0.01554535)
  _bp = (_bp or 21.7392245)
  _cp = (_cp or 20.4562557)
  _af = (_af or -0.007772675)
  _bf = (_bf or 28.3559732)
  _cf = (_cf or 27.4203609)
  p = get_p("lda_c_karasiev_mod", polarized, _ap, _bp, _cp, _af, _bf, _cf)
  def _lda_c_karasiev_mod_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of lda_c_karasiev_mod.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _lda_c_karasiev_mod_epsilon_xc

def gga_c_chachiyo(
  polarized: bool = True,
  _ap: Optional[float] = None,
  _bp: Optional[float] = None,
  _cp: Optional[float] = None,
  _af: Optional[float] = None,
  _bf: Optional[float] = None,
  _cf: Optional[float] = None,
  _h: Optional[float] = None,
) -> Callable:
  r"""
  T. Chachiyo and H. Chachiyo.,  Comput. Theor. Chem. 1172, 112669 (2020)
  `10.1016/j.comptc.2019.112669 <http://www.sciencedirect.com/science/article/pii/S2210271X19303652>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _ap : Optional[float], default: -0.01554535
    ap parameter
  _bp : Optional[float], default: 20.4562557
    bp parameter
  _cp : Optional[float], default: 20.4562557
    cp parameter
  _af : Optional[float], default: -0.007772675
    af parameter
  _bf : Optional[float], default: 27.4203609
    bf parameter
  _cf : Optional[float], default: 27.4203609
    cf parameter
  _h : Optional[float], default: 0.06672632
    h parameter
  """
  _ap = (_ap or -0.01554535)
  _bp = (_bp or 20.4562557)
  _cp = (_cp or 20.4562557)
  _af = (_af or -0.007772675)
  _bf = (_bf or 27.4203609)
  _cf = (_cf or 27.4203609)
  _h = (_h or 0.06672632)
  p = get_p("gga_c_chachiyo", polarized, _ap, _bp, _cp, _af, _bf, _cf, _h)
  def _gga_c_chachiyo_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_c_chachiyo.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_c_chachiyo_epsilon_xc

def hyb_mgga_x_m06_sx(
  polarized: bool = True,
  _a0: Optional[float] = None,
  _a1: Optional[float] = None,
  _a2: Optional[float] = None,
  _a3: Optional[float] = None,
  _a4: Optional[float] = None,
  _a5: Optional[float] = None,
  _a6: Optional[float] = None,
  _a7: Optional[float] = None,
  _a8: Optional[float] = None,
  _a9: Optional[float] = None,
  _a10: Optional[float] = None,
  _a11: Optional[float] = None,
  _b0: Optional[float] = None,
  _b1: Optional[float] = None,
  _b2: Optional[float] = None,
  b3: Optional[float] = None,
  _b4: Optional[float] = None,
  _b5: Optional[float] = None,
  _beta: Optional[float] = None,
  _omega: Optional[float] = None,
) -> Callable:
  r"""
  Y. Wang, P. Verma, L. Zhang, Y. Li, Z. Liu, D. G. Truhlar, and X. He.,  Proc. Natl. Acad. Sci. U. S. A. 117, 2294–2301 (2020)
  `10.1073/pnas.1913699117 <https://www.pnas.org/content/117/5/2294>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a0 : Optional[float], default: 0.996501680264007
    _a0 parameter
  _a1 : Optional[float], default: 0.0301264933631367
    _a1 parameter
  _a2 : Optional[float], default: -0.103366758333673
    _a2 parameter
  _a3 : Optional[float], default: -0.155653062500239
    _a3 parameter
  _a4 : Optional[float], default: 0.00795768051149902
    _a4 parameter
  _a5 : Optional[float], default: 0.0871986277454856
    _a5 parameter
  _a6 : Optional[float], default: -0.816152625764469
    _a6 parameter
  _a7 : Optional[float], default: 0.67277300661242
    _a7 parameter
  _a8 : Optional[float], default: 0.521127186174968
    _a8 parameter
  _a9 : Optional[float], default: 0.399466945122217
    _a9 parameter
  _a10 : Optional[float], default: 0.519400018999204
    _a10 parameter
  _a11 : Optional[float], default: -0.965261552636835
    _a11 parameter
  _b0 : Optional[float], default: -0.347792307472902
    _d0 parameter
  _b1 : Optional[float], default: 0.0
    _d1 parameter
  _b2 : Optional[float], default: -0.00270366787478266
    _d2 parameter
  b3 : Optional[float], default: 0.0
    _d3 parameter
  _b4 : Optional[float], default: 0.0
    _d4 parameter
  _b5 : Optional[float], default: 0.0
    _d5 parameter
  _beta : Optional[float], default: 0.335
    Fraction of short-range exchange
  _omega : Optional[float], default: 0.1
    Range separation parameter
  """
  _a0 = (_a0 or 0.996501680264007)
  _a1 = (_a1 or 0.0301264933631367)
  _a2 = (_a2 or -0.103366758333673)
  _a3 = (_a3 or -0.155653062500239)
  _a4 = (_a4 or 0.00795768051149902)
  _a5 = (_a5 or 0.0871986277454856)
  _a6 = (_a6 or -0.816152625764469)
  _a7 = (_a7 or 0.67277300661242)
  _a8 = (_a8 or 0.521127186174968)
  _a9 = (_a9 or 0.399466945122217)
  _a10 = (_a10 or 0.519400018999204)
  _a11 = (_a11 or -0.965261552636835)
  _b0 = (_b0 or -0.347792307472902)
  _b1 = (_b1 or 0.0)
  _b2 = (_b2 or -0.00270366787478266)
  b3 = (b3 or 0.0)
  _b4 = (_b4 or 0.0)
  _b5 = (_b5 or 0.0)
  _beta = (_beta or 0.335)
  _omega = (_omega or 0.1)
  p = get_p("hyb_mgga_x_m06_sx", polarized, _a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8, _a9, _a10, _a11, _b0, _b1, _b2, b3, _b4, _b5, _beta, _omega)
  def _hyb_mgga_x_m06_sx_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_mgga_x_m06_sx.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _hyb_mgga_x_m06_sx_epsilon_xc

def mgga_c_m06_sx(
  polarized: bool = True,
  _gamma_ss: Optional[float] = None,
  _gamma_ab: Optional[float] = None,
  _alpha_ss: Optional[float] = None,
  _alpha_ab: Optional[float] = None,
  _css0: Optional[float] = None,
  _css1: Optional[float] = None,
  _css2: Optional[float] = None,
  _css3: Optional[float] = None,
  _css4: Optional[float] = None,
  _cab0: Optional[float] = None,
  _cab1: Optional[float] = None,
  _cab2: Optional[float] = None,
  _cab3: Optional[float] = None,
  _cab4: Optional[float] = None,
  _dss0: Optional[float] = None,
  _dss1: Optional[float] = None,
  _dss2: Optional[float] = None,
  _dss3: Optional[float] = None,
  _dss4: Optional[float] = None,
  _dss5: Optional[float] = None,
  _dab0: Optional[float] = None,
  _dab1: Optional[float] = None,
  _dab2: Optional[float] = None,
  _dab3: Optional[float] = None,
  _dab4: Optional[float] = None,
  _dab5: Optional[float] = None,
  _Fermi_D_cnst: Optional[float] = None,
) -> Callable:
  r"""
  Y. Wang, P. Verma, L. Zhang, Y. Li, Z. Liu, D. G. Truhlar, and X. He.,  Proc. Natl. Acad. Sci. U. S. A. 117, 2294–2301 (2020)
  `10.1073/pnas.1913699117 <https://www.pnas.org/content/117/5/2294>`_

  
  Mixing of the following functionals:
    lda_c_pw_mod (coefficient: 1.4916681462400413e-154)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _gamma_ss : Optional[float], default: 0.06
    gamma_ss
  _gamma_ab : Optional[float], default: 0.0031
    gamma_ab
  _alpha_ss : Optional[float], default: 0.00515088
    alpha_ss
  _alpha_ab : Optional[float], default: 0.00304966
    alpha_ab
  _css0 : Optional[float], default: 1.17575011057022
    css0
  _css1 : Optional[float], default: 0.658083496678423
    css1
  _css2 : Optional[float], default: -2.78913774852905
    css2
  _css3 : Optional[float], default: -1.18597601856255
    css3
  _css4 : Optional[float], default: 1.16439928209688
    css4
  _cab0 : Optional[float], default: 0.163738167314691
    cab0
  _cab1 : Optional[float], default: -0.436481171027951
    cab1
  _cab2 : Optional[float], default: -1.90232628449712
    cab2
  _cab3 : Optional[float], default: -1.42432902881841
    cab3
  _cab4 : Optional[float], default: -0.905909137360893
    cab4
  _dss0 : Optional[float], default: 0.0817322574473352
    dss0
  _dss1 : Optional[float], default: -0.0288531085759385
    dss1
  _dss2 : Optional[float], default: 0.090591773486813
    dss2
  _dss3 : Optional[float], default: 0.0
    dss3
  _dss4 : Optional[float], default: 0.0
    dss4
  _dss5 : Optional[float], default: -0.000486297499082106
    dss5
  _dab0 : Optional[float], default: 0.740594619832397
    dab0
  _dab1 : Optional[float], default: 0.0123306511345974
    dab1
  _dab2 : Optional[float], default: -0.0188253421850249
    dab2
  _dab3 : Optional[float], default: 0.0
    dab3
  _dab4 : Optional[float], default: 0.0
    dab4
  _dab5 : Optional[float], default: 0.000487276242162303
    dab5
  _Fermi_D_cnst : Optional[float], default: 1e-10
    Constant for the correction term similar to 10.1063/1.2800011
  """
  _gamma_ss = (_gamma_ss or 0.06)
  _gamma_ab = (_gamma_ab or 0.0031)
  _alpha_ss = (_alpha_ss or 0.00515088)
  _alpha_ab = (_alpha_ab or 0.00304966)
  _css0 = (_css0 or 1.17575011057022)
  _css1 = (_css1 or 0.658083496678423)
  _css2 = (_css2 or -2.78913774852905)
  _css3 = (_css3 or -1.18597601856255)
  _css4 = (_css4 or 1.16439928209688)
  _cab0 = (_cab0 or 0.163738167314691)
  _cab1 = (_cab1 or -0.436481171027951)
  _cab2 = (_cab2 or -1.90232628449712)
  _cab3 = (_cab3 or -1.42432902881841)
  _cab4 = (_cab4 or -0.905909137360893)
  _dss0 = (_dss0 or 0.0817322574473352)
  _dss1 = (_dss1 or -0.0288531085759385)
  _dss2 = (_dss2 or 0.090591773486813)
  _dss3 = (_dss3 or 0.0)
  _dss4 = (_dss4 or 0.0)
  _dss5 = (_dss5 or -0.000486297499082106)
  _dab0 = (_dab0 or 0.740594619832397)
  _dab1 = (_dab1 or 0.0123306511345974)
  _dab2 = (_dab2 or -0.0188253421850249)
  _dab3 = (_dab3 or 0.0)
  _dab4 = (_dab4 or 0.0)
  _dab5 = (_dab5 or 0.000487276242162303)
  _Fermi_D_cnst = (_Fermi_D_cnst or 1e-10)
  p = get_p("mgga_c_m06_sx", polarized, _gamma_ss, _gamma_ab, _alpha_ss, _alpha_ab, _css0, _css1, _css2, _css3, _css4, _cab0, _cab1, _cab2, _cab3, _cab4, _dss0, _dss1, _dss2, _dss3, _dss4, _dss5, _dab0, _dab1, _dab2, _dab3, _dab4, _dab5, _Fermi_D_cnst)
  def _mgga_c_m06_sx_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_c_m06_sx.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  
  _mgga_c_m06_sx_epsilon_xc.cam_alpha = p.cam_alpha
  _mgga_c_m06_sx_epsilon_xc.cam_beta = p.cam_beta
  _mgga_c_m06_sx_epsilon_xc.cam_omega = p.cam_omega
  _mgga_c_m06_sx_epsilon_xc.nlc_b = p.nlc_b
  _mgga_c_m06_sx_epsilon_xc.nlc_C = p.nlc_C

  return _mgga_c_m06_sx_epsilon_xc

def gga_x_revssb_d(
  polarized: bool = True,
  _A: Optional[float] = None,
  _B: Optional[float] = None,
  _C: Optional[float] = None,
  _D: Optional[float] = None,
  _E: Optional[float] = None,
  _F: Optional[float] = None,
  _u: Optional[float] = None,
  _delta: Optional[float] = None,
) -> Callable:
  r"""
  M. Swart, M. Solá, and F. M. Bickelhaupt.,  J. Comput. Chem. 32, 1117-1127 (2011)
  `10.1002/jcc.21693 <https://onlinelibrary.wiley.com/doi/abs/10.1002/jcc.21693>`_

  
  Mixing of the following functionals:
    lda_x (coefficient: -1.0)
    gga_x_ssb_sw (coefficient: 1.0)
    gga_x_kt1 (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _A : Optional[float], default: 1.082138
    A, Constant s limit
  _B : Optional[float], default: 0.177998
    B in B s^2/(1 + C s^2)
  _C : Optional[float], default: 0.246582
    C in B s^2/(1 + C s^2)
  _D : Optional[float], default: 0.177998
    D in D s^2/(1 + E s^4)
  _E : Optional[float], default: 6.284673
    E in D s^2/(1 + E s^4)
  _F : Optional[float], default: 1.0
    F, prefactor for KT term
  _u : Optional[float], default: -0.618168
    u, reweighting of KT and SSB terms
  _delta : Optional[float], default: 0.1
    delta, KT parameter
  """
  _A = (_A or 1.082138)
  _B = (_B or 0.177998)
  _C = (_C or 0.246582)
  _D = (_D or 0.177998)
  _E = (_E or 6.284673)
  _F = (_F or 1.0)
  _u = (_u or -0.618168)
  _delta = (_delta or 0.1)
  p = get_p("gga_x_revssb_d", polarized, _A, _B, _C, _D, _E, _F, _u, _delta)
  def _gga_x_revssb_d_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_revssb_d.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _gga_x_revssb_d_epsilon_xc.cam_alpha = p.cam_alpha
  _gga_x_revssb_d_epsilon_xc.cam_beta = p.cam_beta
  _gga_x_revssb_d_epsilon_xc.cam_omega = p.cam_omega
  _gga_x_revssb_d_epsilon_xc.nlc_b = p.nlc_b
  _gga_x_revssb_d_epsilon_xc.nlc_C = p.nlc_C

  return _gga_x_revssb_d_epsilon_xc

def gga_c_ccdf(
  polarized: bool = True,
  _c1: Optional[float] = None,
  _c2: Optional[float] = None,
  _c3: Optional[float] = None,
  _c4: Optional[float] = None,
  _c5: Optional[float] = None,
) -> Callable:
  r"""
  J. T. Margraf, C. Kunkel, and K. Reuter.,  J. Chem. Phys. 150, 244116 (2019)
  `10.1063/1.5094788 <https://doi.org/10.1063/1.5094788>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _c1 : Optional[float], default: -0.0468
    c1 parameter
  _c2 : Optional[float], default: 0.023
    c2 parameter
  _c3 : Optional[float], default: 0.544
    c3 parameter
  _c4 : Optional[float], default: 23.401
    c4 parameter
  _c5 : Optional[float], default: 0.479
    c5 parameter
  """
  _c1 = (_c1 or -0.0468)
  _c2 = (_c2 or 0.023)
  _c3 = (_c3 or 0.544)
  _c4 = (_c4 or 23.401)
  _c5 = (_c5 or 0.479)
  p = get_p("gga_c_ccdf", polarized, _c1, _c2, _c3, _c4, _c5)
  def _gga_c_ccdf_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_c_ccdf.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_c_ccdf_epsilon_xc

def hyb_gga_xc_hflyp(
  polarized: bool = True,
) -> Callable:
  r"""
  C. Lee, W. Yang, and R. G. Parr.,  Phys. Rev. B 37, 785 (1988)
  `10.1103/PhysRevB.37.785 <http://link.aps.org/doi/10.1103/PhysRevB.37.785>`_

  B. Miehlich, A. Savin, H. Stoll, and H. Preuss.,  Chem. Phys. Lett. 157, 200 (1989)
  `10.1016/0009-2614(89)87234-3 <http://www.sciencedirect.com/science/article/pii/0009261489872343>`_

  
  Mixing of the following functionals:
    gga_c_lyp (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("hyb_gga_xc_hflyp", polarized, )
  def _hyb_gga_xc_hflyp_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_hflyp.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_hflyp_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_hflyp_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_hflyp_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_hflyp_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_hflyp_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_hflyp_epsilon_xc

def hyb_gga_xc_b3p86_nwchem(
  polarized: bool = True,
) -> Callable:
  r"""
  Defined through NWChem implementation.
  

  
  Mixing of the following functionals:
    lda_x (coefficient: 0.08)
    gga_x_b88 (coefficient: 0.72)
    lda_c_vwn_rpa (coefficient: 1.0)
    gga_c_p86 (coefficient: 0.81)
    lda_c_pz (coefficient: -0.81)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("hyb_gga_xc_b3p86_nwchem", polarized, )
  def _hyb_gga_xc_b3p86_nwchem_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_b3p86_nwchem.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_b3p86_nwchem_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_b3p86_nwchem_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_b3p86_nwchem_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_b3p86_nwchem_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_b3p86_nwchem_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_b3p86_nwchem_epsilon_xc

def gga_x_pw91_mod(
  polarized: bool = True,
  _bt: Optional[float] = None,
  _alpha: Optional[float] = None,
  _expo: Optional[float] = None,
) -> Callable:
  r"""
  J. P. Perdew. In P. Ziesche and H. Eschrig, editors, Proceedings of the 75. WE-Heraeus-Seminar and 21st Annual International Symposium on Electronic Structure of Solids, 11. Berlin, 1991. Akademie Verlag.
  

  J. P. Perdew, J. A. Chevary, S. H. Vosko, K. A. Jackson, M. R. Pederson, D. J. Singh, and C. Fiolhais.,  Phys. Rev. B 46, 6671 (1992)
  `10.1103/PhysRevB.46.6671 <http://link.aps.org/doi/10.1103/PhysRevB.46.6671>`_

  J. P. Perdew, J. A. Chevary, S. H. Vosko, K. A. Jackson, M. R. Pederson, D. J. Singh, and C. Fiolhais.,  Phys. Rev. B 48, 4978 (1993)
  `10.1103/PhysRevB.48.4978.2 <http://link.aps.org/doi/10.1103/PhysRevB.48.4978.2>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _bt : Optional[float], default: 0.0042
    a = 6 bt/X2S
  _alpha : Optional[float], default: 100.0
    parameter of the exponential term
  _expo : Optional[float], default: 4.0
    exponent of the power in the numerator
  """
  _bt = (_bt or 0.0042)
  _alpha = (_alpha or 100.0)
  _expo = (_expo or 4.0)
  p = get_p("gga_x_pw91_mod", polarized, _bt, _alpha, _expo)
  def _gga_x_pw91_mod_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_pw91_mod.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_pw91_mod_epsilon_xc

def lda_c_w20(
  polarized: bool = True,
) -> Callable:
  r"""
  Q.-X. Xie, J. Wu, and Y. Zhao.,  Phys. Rev. B 103, 045130 (2021)
  `10.1103/PhysRevB.103.045130 <https://link.aps.org/doi/10.1103/PhysRevB.103.045130>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("lda_c_w20", polarized, )
  def _lda_c_w20_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of lda_c_w20.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _lda_c_w20_epsilon_xc

def lda_xc_corrksdt(
  polarized: bool = True,
  T: Optional[float] = None,
) -> Callable:
  r"""
  V. V. Karasiev, J. W. Dufty, and S. B. Trickey.,  Phys. Rev. Lett. 120, 076401 (2018)
  `10.1103/PhysRevLett.120.076401 <https://link.aps.org/doi/10.1103/PhysRevLett.120.076401>`_

  V. V. Karasiev, T. Sjostrom, J. Dufty, and S. B. Trickey.,  Phys. Rev. Lett. 112, 076403 (2014)
  `10.1103/PhysRevLett.112.076403 <http://link.aps.org/doi/10.1103/PhysRevLett.112.076403>`_

  Karasiev has stated that the functional would need reparameterisation for spin-polarized functionals, so it should in principle be only used for spin-unpolarized calculations; see discussion in https://gitlab.com/libxc/libxc/-/merge_requests/465.
  

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  T : Optional[float], default: 0.0
    Temperature
  """
  T = (T or 0.0)
  p = get_p("lda_xc_corrksdt", polarized, T)
  def _lda_xc_corrksdt_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of lda_xc_corrksdt.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _lda_xc_corrksdt_epsilon_xc

def mgga_x_ft98(
  polarized: bool = True,
  _a: Optional[float] = None,
  _b: Optional[float] = None,
  _a1: Optional[float] = None,
  _a2: Optional[float] = None,
  _b1: Optional[float] = None,
  _b2: Optional[float] = None,
) -> Callable:
  r"""
  M. Filatov and W. Thiel.,  Phys. Rev. A 57, 189–199 (1998)
  `10.1103/PhysRevA.57.189 <https://link.aps.org/doi/10.1103/PhysRevA.57.189>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a : Optional[float], default: 0.00528014
    a
  _b : Optional[float], default: 3.904539e-05
    b
  _a1 : Optional[float], default: 2.816049
    a1
  _a2 : Optional[float], default: 0.879058
    a2
  _b1 : Optional[float], default: 0.398773
    b1
  _b2 : Optional[float], default: 66.364138
    b2
  """
  _a = (_a or 0.00528014)
  _b = (_b or 3.904539e-05)
  _a1 = (_a1 or 2.816049)
  _a2 = (_a2 or 0.879058)
  _b1 = (_b1 or 0.398773)
  _b2 = (_b2 or 66.364138)
  p = get_p("mgga_x_ft98", polarized, _a, _b, _a1, _a2, _b1, _b2)
  def _mgga_x_ft98_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_ft98.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_ft98_epsilon_xc

def gga_x_pbe_mod(
  polarized: bool = True,
  _kappa: Optional[float] = None,
  _mu: Optional[float] = None,
) -> Callable:
  r"""
  J. P. Perdew, K. Burke, and M. Ernzerhof.,  Phys. Rev. Lett. 77, 3865 (1996)
  `10.1103/PhysRevLett.77.3865 <http://link.aps.org/doi/10.1103/PhysRevLett.77.3865>`_

  J. P. Perdew, K. Burke, and M. Ernzerhof.,  Phys. Rev. Lett. 78, 1396 (1997)
  `10.1103/PhysRevLett.78.1396 <http://link.aps.org/doi/10.1103/PhysRevLett.78.1396>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _kappa : Optional[float], default: 0.804
    Asymptotic value of the enhancement function
  _mu : Optional[float], default: 0.2195164512208958
    Coefficient of the 2nd order expansion
  """
  _kappa = (_kappa or 0.804)
  _mu = (_mu or 0.2195164512208958)
  p = get_p("gga_x_pbe_mod", polarized, _kappa, _mu)
  def _gga_x_pbe_mod_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_pbe_mod.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_pbe_mod_epsilon_xc

def gga_x_pbe_gaussian(
  polarized: bool = True,
  _kappa: Optional[float] = None,
  _mu: Optional[float] = None,
) -> Callable:
  r"""
  J. P. Perdew, K. Burke, and M. Ernzerhof.,  Phys. Rev. Lett. 77, 3865 (1996)
  `10.1103/PhysRevLett.77.3865 <http://link.aps.org/doi/10.1103/PhysRevLett.77.3865>`_

  J. P. Perdew, K. Burke, and M. Ernzerhof.,  Phys. Rev. Lett. 78, 1396 (1997)
  `10.1103/PhysRevLett.78.1396 <http://link.aps.org/doi/10.1103/PhysRevLett.78.1396>`_

  Defined through Gaussian implementation.
  

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _kappa : Optional[float], default: 0.804000423825475
    Asymptotic value of the enhancement function
  _mu : Optional[float], default: 0.219510240580611
    Coefficient of the 2nd order expansion
  """
  _kappa = (_kappa or 0.804000423825475)
  _mu = (_mu or 0.219510240580611)
  p = get_p("gga_x_pbe_gaussian", polarized, _kappa, _mu)
  def _gga_x_pbe_gaussian_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_pbe_gaussian.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_pbe_gaussian_epsilon_xc

def gga_c_pbe_gaussian(
  polarized: bool = True,
  _beta: Optional[float] = None,
  _gamma: Optional[float] = None,
  _B: Optional[float] = None,
) -> Callable:
  r"""
  J. P. Perdew, K. Burke, and M. Ernzerhof.,  Phys. Rev. Lett. 77, 3865 (1996)
  `10.1103/PhysRevLett.77.3865 <http://link.aps.org/doi/10.1103/PhysRevLett.77.3865>`_

  J. P. Perdew, K. Burke, and M. Ernzerhof.,  Phys. Rev. Lett. 78, 1396 (1997)
  `10.1103/PhysRevLett.78.1396 <http://link.aps.org/doi/10.1103/PhysRevLett.78.1396>`_

  Defined through Gaussian implementation.
  

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _beta : Optional[float], default: 0.0667263212
    beta constant
  _gamma : Optional[float], default: 0.031090690869654894
    (1 - ln(2))/Pi^2 in the PBE
  _B : Optional[float], default: 1.0
    Multiplies the A t^2 term. Used in the SPBE functional
  """
  _beta = (_beta or 0.0667263212)
  _gamma = (_gamma or 0.031090690869654894)
  _B = (_B or 1.0)
  p = get_p("gga_c_pbe_gaussian", polarized, _beta, _gamma, _B)
  def _gga_c_pbe_gaussian_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_c_pbe_gaussian.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_c_pbe_gaussian_epsilon_xc

def mgga_c_tpss_gaussian(
  polarized: bool = True,
  _beta: Optional[float] = None,
  _d: Optional[float] = None,
  _C0_c0: Optional[float] = None,
  _C0_c1: Optional[float] = None,
  _C0_c2: Optional[float] = None,
  _C0_c3: Optional[float] = None,
) -> Callable:
  r"""
  J. Tao, J. P. Perdew, V. N. Staroverov, and G. E. Scuseria.,  Phys. Rev. Lett. 91, 146401 (2003)
  `10.1103/PhysRevLett.91.146401 <http://link.aps.org/doi/10.1103/PhysRevLett.91.146401>`_

  J. P. Perdew, J. Tao, V. N. Staroverov, and G. E. Scuseria.,  J. Chem. Phys. 120, 6898 (2004)
  `10.1063/1.1665298 <http://scitation.aip.org/content/aip/journal/jcp/120/15/10.1063/1.1665298>`_

  Defined through Gaussian implementation.
  

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _beta : Optional[float], default: 0.0667263212
    beta
  _d : Optional[float], default: 2.8
    d
  _C0_c0 : Optional[float], default: 0.53
    C0_c0
  _C0_c1 : Optional[float], default: 0.87
    C0_c1
  _C0_c2 : Optional[float], default: 0.5
    C0_c2
  _C0_c3 : Optional[float], default: 2.26
    C0_c3
  """
  _beta = (_beta or 0.0667263212)
  _d = (_d or 2.8)
  _C0_c0 = (_C0_c0 or 0.53)
  _C0_c1 = (_C0_c1 or 0.87)
  _C0_c2 = (_C0_c2 or 0.5)
  _C0_c3 = (_C0_c3 or 2.26)
  p = get_p("mgga_c_tpss_gaussian", polarized, _beta, _d, _C0_c0, _C0_c1, _C0_c2, _C0_c3)
  def _mgga_c_tpss_gaussian_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_c_tpss_gaussian.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_c_tpss_gaussian_epsilon_xc

def gga_x_ncapr(
  polarized: bool = True,
  _alpha: Optional[float] = None,
  _beta: Optional[float] = None,
  _mu: Optional[float] = None,
  _zeta: Optional[float] = None,
) -> Callable:
  r"""
  J. Carmona-Espíndola, A. Flores, J. L. Gázquez, A. Vela, and S. B. Trickey.,  J. Chem. Phys 157, 114109 (2022)
  10.1063/5.0096678

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _alpha : Optional[float], default: 0.3431510377915187
    alpha
  _beta : Optional[float], default: 0.017982946634292535
    beta
  _mu : Optional[float], default: 0.2195149727645171
    mu
  _zeta : Optional[float], default: 0.5
    zeta
  """
  _alpha = (_alpha or 0.3431510377915187)
  _beta = (_beta or 0.017982946634292535)
  _mu = (_mu or 0.2195149727645171)
  _zeta = (_zeta or 0.5)
  p = get_p("gga_x_ncapr", polarized, _alpha, _beta, _mu, _zeta)
  def _gga_x_ncapr_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_ncapr.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_ncapr_epsilon_xc

def gga_xc_b97_3c(
  polarized: bool = True,
  _cx0: Optional[float] = None,
  _cx1: Optional[float] = None,
  _cx2: Optional[float] = None,
  _cx3: Optional[float] = None,
  _cx4: Optional[float] = None,
  _css0: Optional[float] = None,
  _css1: Optional[float] = None,
  _css2: Optional[float] = None,
  _css3: Optional[float] = None,
  _css4: Optional[float] = None,
  _cos0: Optional[float] = None,
  _cos1: Optional[float] = None,
  _cos2: Optional[float] = None,
  _cos3: Optional[float] = None,
  _cos4: Optional[float] = None,
) -> Callable:
  r"""
  J. G. Brandenburg, C. Bannwarth, A. Hansen, and S. Grimme.,  J. Chem. Phys. 148, 064104 (2018)
  `10.1063/1.5012601 <https://doi.org/10.1063/1.5012601>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _cx0 : Optional[float], default: 1.076616
    u^0 coefficient for exchange
  _cx1 : Optional[float], default: -0.469912
    u^1 coefficient for exchange
  _cx2 : Optional[float], default: 3.322442
    u^2 coefficient for exchange
  _cx3 : Optional[float], default: 0.0
    u^3 coefficient for exchange
  _cx4 : Optional[float], default: 0.0
    u^4 coefficient for exchange
  _css0 : Optional[float], default: 0.543788
    u^0 coefficient for same-spin correlation
  _css1 : Optional[float], default: -1.44442
    u^1 coefficient for same-spin correlation
  _css2 : Optional[float], default: 1.637436
    u^2 coefficient for same-spin correlation
  _css3 : Optional[float], default: 0.0
    u^3 coefficient for same-spin correlation
  _css4 : Optional[float], default: 0.0
    u^4 coefficient for same-spin correlation
  _cos0 : Optional[float], default: 0.635047
    u^0 coefficient for opposite-spin correlation
  _cos1 : Optional[float], default: 5.532103
    u^1 coefficient for opposite-spin correlation
  _cos2 : Optional[float], default: -15.301575
    u^2 coefficient for opposite-spin correlation
  _cos3 : Optional[float], default: 0.0
    u^3 coefficient for opposite-spin correlation
  _cos4 : Optional[float], default: 0.0
    u^4 coefficient for opposite-spin correlation
  """
  _cx0 = (_cx0 or 1.076616)
  _cx1 = (_cx1 or -0.469912)
  _cx2 = (_cx2 or 3.322442)
  _cx3 = (_cx3 or 0.0)
  _cx4 = (_cx4 or 0.0)
  _css0 = (_css0 or 0.543788)
  _css1 = (_css1 or -1.44442)
  _css2 = (_css2 or 1.637436)
  _css3 = (_css3 or 0.0)
  _css4 = (_css4 or 0.0)
  _cos0 = (_cos0 or 0.635047)
  _cos1 = (_cos1 or 5.532103)
  _cos2 = (_cos2 or -15.301575)
  _cos3 = (_cos3 or 0.0)
  _cos4 = (_cos4 or 0.0)
  p = get_p("gga_xc_b97_3c", polarized, _cx0, _cx1, _cx2, _cx3, _cx4, _css0, _css1, _css2, _css3, _css4, _cos0, _cos1, _cos2, _cos3, _cos4)
  def _gga_xc_b97_3c_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_xc_b97_3c.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_xc_b97_3c_epsilon_xc

def mgga_c_cc(
  polarized: bool = True,
) -> Callable:
  r"""
  T. Schmidt, E. Kraisler, A. Makmal, L. Kronik, and S. Kümmel.,  J. Chem. Phys. 140, 18A510 (2014)
  10.1063/1.4865942

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("mgga_c_cc", polarized, )
  def _mgga_c_cc_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_c_cc.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_c_cc_epsilon_xc

def mgga_c_ccalda(
  polarized: bool = True,
  _c: Optional[float] = None,
) -> Callable:
  r"""
  T. Lebeda, T. Aschebrock, and S. Kümmel.,  Phys. Rev. Research 4, 023061 (2022)
  `10.1103/PhysRevResearch.4.023061 <https://link.aps.org/doi/10.1103/PhysRevResearch.4.023061>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _c : Optional[float], default: 10000.0
    c
  """
  _c = (_c or 10000.0)
  p = get_p("mgga_c_ccalda", polarized, _c)
  def _mgga_c_ccalda_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_c_ccalda.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_c_ccalda_epsilon_xc

def hyb_mgga_xc_br3p86(
  polarized: bool = True,
  _a: Optional[float] = None,
  _b: Optional[float] = None,
  _c: Optional[float] = None,
) -> Callable:
  r"""
  R. Neumann and N. C. Handy.,  Chem. Phys. Lett. 246, 381–386 (1995)
  `10.1016/0009-2614(95)01143-2 <https://www.sciencedirect.com/science/article/pii/0009261495011432>`_

  
  Mixing of the following functionals:
    lda_x (coefficient: 0.10999999999999999)
    mgga_x_br89_1 (coefficient: 0.67)
    lda_c_vwn (coefficient: 0.15000000000000002)
    gga_c_p86vwn (coefficient: 0.85)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a : Optional[float], default: 0.22
    Fraction of exact exchange
  _b : Optional[float], default: 0.67
    Fraction of BR exchange
  _c : Optional[float], default: 0.85
    Weight for P86 correlation
  """
  _a = (_a or 0.22)
  _b = (_b or 0.67)
  _c = (_c or 0.85)
  p = get_p("hyb_mgga_xc_br3p86", polarized, _a, _b, _c)
  def _hyb_mgga_xc_br3p86_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_mgga_xc_br3p86.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  
  _hyb_mgga_xc_br3p86_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_mgga_xc_br3p86_epsilon_xc.cam_beta = p.cam_beta
  _hyb_mgga_xc_br3p86_epsilon_xc.cam_omega = p.cam_omega
  _hyb_mgga_xc_br3p86_epsilon_xc.nlc_b = p.nlc_b
  _hyb_mgga_xc_br3p86_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_mgga_xc_br3p86_epsilon_xc

def hyb_gga_xc_case21(
  polarized: bool = True,
  _cx0: Optional[float] = None,
  _cx1: Optional[float] = None,
  _cx2: Optional[float] = None,
  _cx3: Optional[float] = None,
  _cx4: Optional[float] = None,
  _cx5: Optional[float] = None,
  _cx6: Optional[float] = None,
  _cx7: Optional[float] = None,
  _cx8: Optional[float] = None,
  _cx9: Optional[float] = None,
  _cc0: Optional[float] = None,
  _cc1: Optional[float] = None,
  _cc2: Optional[float] = None,
  _cc3: Optional[float] = None,
  _cc4: Optional[float] = None,
  _cc5: Optional[float] = None,
  _cc6: Optional[float] = None,
  _cc7: Optional[float] = None,
  _cc8: Optional[float] = None,
  _cc9: Optional[float] = None,
  _gammax: Optional[float] = None,
  _gammac: Optional[float] = None,
  _ax: Optional[float] = None,
) -> Callable:
  r"""
  Z. M. Sparrow, B. G. Ernst, T. K. Quady, and R. A. DiStasio.,  J. Phys. Chem. Lett. 13, 6896-6904 (2022)
  `10.1021/acs.jpclett.2c00643 <https://doi.org/10.1021/acs.jpclett.2c00643>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _cx0 : Optional[float], default: 0.889402
    cx0 parameter
  _cx1 : Optional[float], default: 0.997849
    cx1 parameter
  _cx2 : Optional[float], default: 1.11912
    cx2 parameter
  _cx3 : Optional[float], default: 1.24555
    cx3 parameter
  _cx4 : Optional[float], default: 1.35175
    cx4 parameter
  _cx5 : Optional[float], default: 1.4474
    cx5 parameter
  _cx6 : Optional[float], default: 1.54252
    cx6 parameter
  _cx7 : Optional[float], default: 1.63761
    cx7 parameter
  _cx8 : Optional[float], default: 1.73269
    cx8 parameter
  _cx9 : Optional[float], default: 1.82777
    cx9 parameter
  _cc0 : Optional[float], default: 1.14597
    cc0 parameter
  _cc1 : Optional[float], default: 0.998463
    cc1 parameter
  _cc2 : Optional[float], default: 0.860252
    cc2 parameter
  _cc3 : Optional[float], default: 0.730431
    cc3 parameter
  _cc4 : Optional[float], default: 0.597762
    cc4 parameter
  _cc5 : Optional[float], default: 0.457063
    cc5 parameter
  _cc6 : Optional[float], default: 0.30876
    cc6 parameter
  _cc7 : Optional[float], default: 0.155654
    cc7 parameter
  _cc8 : Optional[float], default: 7.45555e-05
    cc8 parameter
  _cc9 : Optional[float], default: -0.1559416
    cc9 parameter
  _gammax : Optional[float], default: 0.27302857309019535
    gammax parameter
  _gammac : Optional[float], default: 14.986987412588174
    gammac parameter
  _ax : Optional[float], default: 0.25
    ax parameter
  """
  _cx0 = (_cx0 or 0.889402)
  _cx1 = (_cx1 or 0.997849)
  _cx2 = (_cx2 or 1.11912)
  _cx3 = (_cx3 or 1.24555)
  _cx4 = (_cx4 or 1.35175)
  _cx5 = (_cx5 or 1.4474)
  _cx6 = (_cx6 or 1.54252)
  _cx7 = (_cx7 or 1.63761)
  _cx8 = (_cx8 or 1.73269)
  _cx9 = (_cx9 or 1.82777)
  _cc0 = (_cc0 or 1.14597)
  _cc1 = (_cc1 or 0.998463)
  _cc2 = (_cc2 or 0.860252)
  _cc3 = (_cc3 or 0.730431)
  _cc4 = (_cc4 or 0.597762)
  _cc5 = (_cc5 or 0.457063)
  _cc6 = (_cc6 or 0.30876)
  _cc7 = (_cc7 or 0.155654)
  _cc8 = (_cc8 or 7.45555e-05)
  _cc9 = (_cc9 or -0.1559416)
  _gammax = (_gammax or 0.27302857309019535)
  _gammac = (_gammac or 14.986987412588174)
  _ax = (_ax or 0.25)
  p = get_p("hyb_gga_xc_case21", polarized, _cx0, _cx1, _cx2, _cx3, _cx4, _cx5, _cx6, _cx7, _cx8, _cx9, _cc0, _cc1, _cc2, _cc3, _cc4, _cc5, _cc6, _cc7, _cc8, _cc9, _gammax, _gammac, _ax)
  def _hyb_gga_xc_case21_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_case21.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _hyb_gga_xc_case21_epsilon_xc

def mgga_c_rregtm(
  polarized: bool = True,
) -> Callable:
  r"""
  S. Jana, S. K. Behera, S. Śmiga, L. A. Constantin, and P. Samal.,  J. Chem. Phys. 155, 024103 (2021)
  `10.1063/5.0051331 <https://doi.org/10.1063/5.0051331>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("mgga_c_rregtm", polarized, )
  def _mgga_c_rregtm_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_c_rregtm.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_c_rregtm_epsilon_xc

def hyb_gga_xc_pbe_2x(
  polarized: bool = True,
  _beta: Optional[float] = None,
) -> Callable:
  r"""
  D. N. Tahchieva, D. Bakowies, R. Ramakrishnan, and O. A. von Lilienfeld.,  J. Chem. Theory Comput. 14, 4806-4817 (2018)
  `10.1021/acs.jctc.8b00174 <https://doi.org/10.1021/acs.jctc.8b00174>`_

  
  Mixing of the following functionals:
    gga_x_pbe (coefficient: 0.43999999999999995)
    gga_c_pbe (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _beta : Optional[float], default: 0.56
    Mixing parameter
  """
  _beta = (_beta or 0.56)
  p = get_p("hyb_gga_xc_pbe_2x", polarized, _beta)
  def _hyb_gga_xc_pbe_2x_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_pbe_2x.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_pbe_2x_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_pbe_2x_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_pbe_2x_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_pbe_2x_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_pbe_2x_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_pbe_2x_epsilon_xc

def hyb_gga_xc_pbe38(
  polarized: bool = True,
  _beta: Optional[float] = None,
) -> Callable:
  r"""
  S. Grimme, J. Antony, S. Ehrlich, and H. Krieg.,  J. Chem. Phys. 132, 154104 (2010)
  `10.1063/1.3382344 <https://doi.org/10.1063/1.3382344>`_

  
  Mixing of the following functionals:
    gga_x_pbe (coefficient: 0.625)
    gga_c_pbe (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _beta : Optional[float], default: 0.375
    Mixing parameter
  """
  _beta = (_beta or 0.375)
  p = get_p("hyb_gga_xc_pbe38", polarized, _beta)
  def _hyb_gga_xc_pbe38_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_pbe38.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_pbe38_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_pbe38_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_pbe38_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_pbe38_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_pbe38_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_pbe38_epsilon_xc

def hyb_gga_xc_b3lyp3(
  polarized: bool = True,
  _a0: Optional[float] = None,
  _ax: Optional[float] = None,
  _ac: Optional[float] = None,
) -> Callable:
  r"""
  P. J. Stephens, F. J. Devlin, C. F. Chabalowski, and M. J. Frisch.,  J. Phys. Chem. 98, 11623 (1994)
  `10.1021/j100096a001 <http://pubs.acs.org/doi/abs/10.1021/j100096a001>`_

  
  Mixing of the following functionals:
    lda_x (coefficient: 0.08000000000000007)
    gga_x_b88 (coefficient: 0.72)
    lda_c_vwn_3 (coefficient: 0.18999999999999995)
    gga_c_lyp (coefficient: 0.81)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a0 : Optional[float], default: 0.2
    Fraction of exact exchange
  _ax : Optional[float], default: 0.72
    Fraction of GGA exchange correction
  _ac : Optional[float], default: 0.81
    Fraction of GGA correlation correction
  """
  _a0 = (_a0 or 0.2)
  _ax = (_ax or 0.72)
  _ac = (_ac or 0.81)
  p = get_p("hyb_gga_xc_b3lyp3", polarized, _a0, _ax, _ac)
  def _hyb_gga_xc_b3lyp3_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_b3lyp3.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_b3lyp3_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_b3lyp3_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_b3lyp3_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_b3lyp3_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_b3lyp3_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_b3lyp3_epsilon_xc

def hyb_gga_xc_cam_o3lyp(
  polarized: bool = True,
  _csr: Optional[float] = None,
  _b: Optional[float] = None,
  _c: Optional[float] = None,
  _clyp: Optional[float] = None,
  _clr: Optional[float] = None,
  _omega: Optional[float] = None,
) -> Callable:
  r"""
  M. P. Bircher and U. Rothlisberger.,  J. Chem. Theory Comput. 14, 3184-3195 (2018)
  `10.1021/acs.jctc.8b00069 <https://doi.org/10.1021/acs.jctc.8b00069>`_

  
  Mixing of the following functionals:
    lda_x_erf (coefficient: 0.07100691700000006)
    gga_x_ityh_optx (coefficient: 0.8133)
    lda_c_vwn (coefficient: 0.18999999999999995)
    gga_c_lyp (coefficient: 0.81)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _csr : Optional[float], default: 0.1161
    fraction of short-range HF exchange
  _b : Optional[float], default: 0.9262
    fraction of LDA exchage
  _c : Optional[float], default: 0.8133
    fraction of OPTX gradient correction
  _clyp : Optional[float], default: 0.81
    fraction of LYP correlation
  _clr : Optional[float], default: 0.8
    fraction of long-range HF exchange
  _omega : Optional[float], default: 0.33
    range separation parameter
  """
  _csr = (_csr or 0.1161)
  _b = (_b or 0.9262)
  _c = (_c or 0.8133)
  _clyp = (_clyp or 0.81)
  _clr = (_clr or 0.8)
  _omega = (_omega or 0.33)
  p = get_p("hyb_gga_xc_cam_o3lyp", polarized, _csr, _b, _c, _clyp, _clr, _omega)
  def _hyb_gga_xc_cam_o3lyp_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_cam_o3lyp.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_cam_o3lyp_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_cam_o3lyp_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_cam_o3lyp_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_cam_o3lyp_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_cam_o3lyp_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_cam_o3lyp_epsilon_xc

def hyb_mgga_xc_tpss0(
  polarized: bool = True,
) -> Callable:
  r"""
  S. Grimme.,  J. Phys. Chem. A 109, 3067-3077 (2005)
  `10.1021/jp050036j <https://doi.org/10.1021/jp050036j>`_

  
  Mixing of the following functionals:
    mgga_x_tpss (coefficient: 0.75)
    mgga_c_tpss (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("hyb_mgga_xc_tpss0", polarized, )
  def _hyb_mgga_xc_tpss0_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_mgga_xc_tpss0.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  
  _hyb_mgga_xc_tpss0_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_mgga_xc_tpss0_epsilon_xc.cam_beta = p.cam_beta
  _hyb_mgga_xc_tpss0_epsilon_xc.cam_omega = p.cam_omega
  _hyb_mgga_xc_tpss0_epsilon_xc.nlc_b = p.nlc_b
  _hyb_mgga_xc_tpss0_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_mgga_xc_tpss0_epsilon_xc

def mgga_c_b94(
  polarized: bool = True,
  _gamma: Optional[float] = None,
  _css: Optional[float] = None,
  _cab: Optional[float] = None,
) -> Callable:
  r"""
  A. D. Becke.,  Int. J. Quantum Chem. 52, 625-632 (1994)
  `10.1002/qua.560520855 <https://onlinelibrary.wiley.com/doi/abs/10.1002/qua.560520855>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _gamma : Optional[float], default: 1.0
    gamma
  _css : Optional[float], default: 0.88
    css
  _cab : Optional[float], default: 0.63
    cab
  """
  _gamma = (_gamma or 1.0)
  _css = (_css or 0.88)
  _cab = (_cab or 0.63)
  p = get_p("mgga_c_b94", polarized, _gamma, _css, _cab)
  def _mgga_c_b94_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_c_b94.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_c_b94_epsilon_xc

def hyb_mgga_xc_b94_hyb(
  polarized: bool = True,
  _gamma: Optional[float] = None,
  _css: Optional[float] = None,
  _cab: Optional[float] = None,
  _cx: Optional[float] = None,
) -> Callable:
  r"""
  A. D. Becke.,  Int. J. Quantum Chem. 52, 625-632 (1994)
  `10.1002/qua.560520855 <https://onlinelibrary.wiley.com/doi/abs/10.1002/qua.560520855>`_

  
  Mixing of the following functionals:
    mgga_x_br89 (coefficient: 0.846)
    mgga_c_b94 (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _gamma : Optional[float], default: 1.0
    gamma
  _css : Optional[float], default: 0.88
    css
  _cab : Optional[float], default: 0.66
    cab
  _cx : Optional[float], default: 0.154
    cx
  """
  _gamma = (_gamma or 1.0)
  _css = (_css or 0.88)
  _cab = (_cab or 0.66)
  _cx = (_cx or 0.154)
  p = get_p("hyb_mgga_xc_b94_hyb", polarized, _gamma, _css, _cab, _cx)
  def _hyb_mgga_xc_b94_hyb_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_mgga_xc_b94_hyb.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  
  _hyb_mgga_xc_b94_hyb_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_mgga_xc_b94_hyb_epsilon_xc.cam_beta = p.cam_beta
  _hyb_mgga_xc_b94_hyb_epsilon_xc.cam_omega = p.cam_omega
  _hyb_mgga_xc_b94_hyb_epsilon_xc.nlc_b = p.nlc_b
  _hyb_mgga_xc_b94_hyb_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_mgga_xc_b94_hyb_epsilon_xc

def hyb_gga_xc_wb97x_d3(
  polarized: bool = True,
  _cx0: Optional[float] = None,
  _cx1: Optional[float] = None,
  _cx2: Optional[float] = None,
  _cx3: Optional[float] = None,
  _cx4: Optional[float] = None,
  _css0: Optional[float] = None,
  _css1: Optional[float] = None,
  _css2: Optional[float] = None,
  _css3: Optional[float] = None,
  _css4: Optional[float] = None,
  _cos0: Optional[float] = None,
  _cos1: Optional[float] = None,
  _cos2: Optional[float] = None,
  _cos3: Optional[float] = None,
  _cos4: Optional[float] = None,
  _alpha: Optional[float] = None,
  _beta: Optional[float] = None,
  _omega: Optional[float] = None,
) -> Callable:
  r"""
  Y.-S. Lin, G.-D. Li, S.-P. Mao, and J.-D. Chai.,  J. Chem. Theory Comput. 9, 263-272 (2013)
  `10.1021/ct300715s <https://doi.org/10.1021/ct300715s>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _cx0 : Optional[float], default: 0.804272
    u^0 coefficient for exchange
  _cx1 : Optional[float], default: 0.6989
    u^1 coefficient for exchange
  _cx2 : Optional[float], default: 0.50894
    u^2 coefficient for exchange
  _cx3 : Optional[float], default: -3.744903
    u^3 coefficient for exchange
  _cx4 : Optional[float], default: 10.06079
    u^4 coefficient for exchange
  _css0 : Optional[float], default: 1.0
    u^0 coefficient for same-spin correlation
  _css1 : Optional[float], default: -4.868902
    u^1 coefficient for same-spin correlation
  _css2 : Optional[float], default: 21.295726
    u^2 coefficient for same-spin correlation
  _css3 : Optional[float], default: -36.020866
    u^3 coefficient for same-spin correlation
  _css4 : Optional[float], default: 19.177018
    u^4 coefficient for same-spin correlation
  _cos0 : Optional[float], default: 1.0
    u^0 coefficient for opposite-spin correlation
  _cos1 : Optional[float], default: 2.433266
    u^1 coefficient for opposite-spin correlation
  _cos2 : Optional[float], default: -15.446008
    u^2 coefficient for opposite-spin correlation
  _cos3 : Optional[float], default: 17.64439
    u^3 coefficient for opposite-spin correlation
  _cos4 : Optional[float], default: -8.879494
    u^4 coefficient for opposite-spin correlation
  _alpha : Optional[float], default: 1.0
    fraction of HF exchange
  _beta : Optional[float], default: -0.804272
    fraction of short-range exchange
  _omega : Optional[float], default: 0.25
    range-separation constant
  """
  _cx0 = (_cx0 or 0.804272)
  _cx1 = (_cx1 or 0.6989)
  _cx2 = (_cx2 or 0.50894)
  _cx3 = (_cx3 or -3.744903)
  _cx4 = (_cx4 or 10.06079)
  _css0 = (_css0 or 1.0)
  _css1 = (_css1 or -4.868902)
  _css2 = (_css2 or 21.295726)
  _css3 = (_css3 or -36.020866)
  _css4 = (_css4 or 19.177018)
  _cos0 = (_cos0 or 1.0)
  _cos1 = (_cos1 or 2.433266)
  _cos2 = (_cos2 or -15.446008)
  _cos3 = (_cos3 or 17.64439)
  _cos4 = (_cos4 or -8.879494)
  _alpha = (_alpha or 1.0)
  _beta = (_beta or -0.804272)
  _omega = (_omega or 0.25)
  p = get_p("hyb_gga_xc_wb97x_d3", polarized, _cx0, _cx1, _cx2, _cx3, _cx4, _css0, _css1, _css2, _css3, _css4, _cos0, _cos1, _cos2, _cos3, _cos4, _alpha, _beta, _omega)
  def _hyb_gga_xc_wb97x_d3_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_wb97x_d3.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _hyb_gga_xc_wb97x_d3_epsilon_xc

def hyb_gga_xc_lc_blyp(
  polarized: bool = True,
  _omega: Optional[float] = None,
) -> Callable:
  r"""
  Y. Tawada, T. Tsuneda, S. Yanagisawa, T. Yanai, and K. Hirao.,  J. Chem. Phys. 120, 8425-8433 (2004)
  `10.1063/1.1688752 <http://doi.org/10.1063/1.1688752>`_

  
  Mixing of the following functionals:
    gga_x_ityh (coefficient: 1.0)
    gga_c_lyp (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _omega : Optional[float], default: 0.33
    Range separation parameter
  """
  _omega = (_omega or 0.33)
  p = get_p("hyb_gga_xc_lc_blyp", polarized, _omega)
  def _hyb_gga_xc_lc_blyp_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_lc_blyp.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_lc_blyp_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_lc_blyp_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_lc_blyp_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_lc_blyp_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_lc_blyp_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_lc_blyp_epsilon_xc

def hyb_gga_xc_b3pw91(
  polarized: bool = True,
  _a0: Optional[float] = None,
  _ax: Optional[float] = None,
  _ac: Optional[float] = None,
) -> Callable:
  r"""
  A. D. Becke.,  J. Chem. Phys. 98, 5648 (1993)
  `10.1063/1.464913 <http://scitation.aip.org/content/aip/journal/jcp/98/7/10.1063/1.464913>`_

  
  Mixing of the following functionals:
    lda_x (coefficient: 0.08000000000000007)
    gga_x_b88 (coefficient: 0.72)
    lda_c_pw (coefficient: 0.18999999999999995)
    gga_c_pw91 (coefficient: 0.81)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a0 : Optional[float], default: 0.2
    Fraction of exact exchange
  _ax : Optional[float], default: 0.72
    Fraction of GGA exchange correction
  _ac : Optional[float], default: 0.81
    Fraction of GGA correlation correction
  """
  _a0 = (_a0 or 0.2)
  _ax = (_ax or 0.72)
  _ac = (_ac or 0.81)
  p = get_p("hyb_gga_xc_b3pw91", polarized, _a0, _ax, _ac)
  def _hyb_gga_xc_b3pw91_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_b3pw91.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_b3pw91_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_b3pw91_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_b3pw91_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_b3pw91_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_b3pw91_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_b3pw91_epsilon_xc

def hyb_gga_xc_b3lyp(
  polarized: bool = True,
  _a0: Optional[float] = None,
  _ax: Optional[float] = None,
  _ac: Optional[float] = None,
) -> Callable:
  r"""
  P. J. Stephens, F. J. Devlin, C. F. Chabalowski, and M. J. Frisch.,  J. Phys. Chem. 98, 11623 (1994)
  `10.1021/j100096a001 <http://pubs.acs.org/doi/abs/10.1021/j100096a001>`_

  
  Mixing of the following functionals:
    lda_x (coefficient: 0.08000000000000007)
    gga_x_b88 (coefficient: 0.72)
    lda_c_vwn_rpa (coefficient: 0.18999999999999995)
    gga_c_lyp (coefficient: 0.81)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a0 : Optional[float], default: 0.2
    Fraction of exact exchange
  _ax : Optional[float], default: 0.72
    Fraction of GGA exchange correction
  _ac : Optional[float], default: 0.81
    Fraction of GGA correlation correction
  """
  _a0 = (_a0 or 0.2)
  _ax = (_ax or 0.72)
  _ac = (_ac or 0.81)
  p = get_p("hyb_gga_xc_b3lyp", polarized, _a0, _ax, _ac)
  def _hyb_gga_xc_b3lyp_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_b3lyp.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_b3lyp_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_b3lyp_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_b3lyp_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_b3lyp_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_b3lyp_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_b3lyp_epsilon_xc

def hyb_gga_xc_b3p86(
  polarized: bool = True,
  _a0: Optional[float] = None,
  _ax: Optional[float] = None,
  _ac: Optional[float] = None,
) -> Callable:
  r"""
  Defined through Gaussian implementation.
  

  
  Mixing of the following functionals:
    lda_x (coefficient: 0.08000000000000007)
    gga_x_b88 (coefficient: 0.72)
    lda_c_vwn_rpa (coefficient: 0.18999999999999995)
    gga_c_p86 (coefficient: 0.81)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a0 : Optional[float], default: 0.2
    Fraction of exact exchange
  _ax : Optional[float], default: 0.72
    Fraction of GGA exchange correction
  _ac : Optional[float], default: 0.81
    Fraction of GGA correlation correction
  """
  _a0 = (_a0 or 0.2)
  _ax = (_ax or 0.72)
  _ac = (_ac or 0.81)
  p = get_p("hyb_gga_xc_b3p86", polarized, _a0, _ax, _ac)
  def _hyb_gga_xc_b3p86_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_b3p86.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_b3p86_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_b3p86_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_b3p86_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_b3p86_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_b3p86_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_b3p86_epsilon_xc

def hyb_gga_xc_o3lyp(
  polarized: bool = True,
  _a: Optional[float] = None,
  _b: Optional[float] = None,
  _c: Optional[float] = None,
  _clyp: Optional[float] = None,
) -> Callable:
  r"""
  W.-M. Hoe, A. J. Cohen, and N. C. Handy.,  Chem. Phys. Lett. 341, 319–328 (2001)
  `10.1016/S0009-2614(01)00581-4 <https://www.sciencedirect.com/science/article/pii/S0009261401005814>`_

  A. J. Cohen and N. C. Handy.,  Mol. Phys. 99, 607 (2001)
  `10.1080/00268970010023435 <http://www.tandfonline.com/doi/abs/10.1080/00268970010023435>`_

  
  Mixing of the following functionals:
    lda_x (coefficient: 0.07100691700000006)
    gga_x_optx (coefficient: 0.8133)
    lda_c_vwn (coefficient: 0.18999999999999995)
    gga_c_lyp (coefficient: 0.81)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a : Optional[float], default: 0.1161
    fraction of HF exchange
  _b : Optional[float], default: 0.9262
    fraction of LDA exchage
  _c : Optional[float], default: 0.8133
    fraction of OPTX gradient correction
  _clyp : Optional[float], default: 0.81
    fraction of LYP correlation
  """
  _a = (_a or 0.1161)
  _b = (_b or 0.9262)
  _c = (_c or 0.8133)
  _clyp = (_clyp or 0.81)
  p = get_p("hyb_gga_xc_o3lyp", polarized, _a, _b, _c, _clyp)
  def _hyb_gga_xc_o3lyp_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_o3lyp.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_o3lyp_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_o3lyp_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_o3lyp_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_o3lyp_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_o3lyp_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_o3lyp_epsilon_xc

def hyb_gga_xc_mpw1k(
  polarized: bool = True,
  _cx: Optional[float] = None,
) -> Callable:
  r"""
  B. J. Lynch, P. L. Fast, M. Harris, and D. G. Truhlar.,  J. Phys. Chem. A 104, 4811 (2000)
  `10.1021/jp000497z <http://pubs.acs.org/doi/abs/10.1021/jp000497z>`_

  
  Mixing of the following functionals:
    gga_x_mpw91 (coefficient: 0.5720000000000001)
    gga_c_pw91 (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _cx : Optional[float], default: 0.428
    Fraction of exact exchange
  """
  _cx = (_cx or 0.428)
  p = get_p("hyb_gga_xc_mpw1k", polarized, _cx)
  def _hyb_gga_xc_mpw1k_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_mpw1k.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_mpw1k_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_mpw1k_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_mpw1k_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_mpw1k_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_mpw1k_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_mpw1k_epsilon_xc

def hyb_gga_xc_pbeh(
  polarized: bool = True,
  _beta: Optional[float] = None,
) -> Callable:
  r"""
  C. Adamo and V. Barone.,  J. Chem. Phys. 110, 6158 (1999)
  `10.1063/1.478522 <http://scitation.aip.org/content/aip/journal/jcp/110/13/10.1063/1.478522>`_

  M. Ernzerhof and G. E. Scuseria.,  J. Chem. Phys. 110, 5029 (1999)
  `10.1063/1.478401 <http://scitation.aip.org/content/aip/journal/jcp/110/11/10.1063/1.478401>`_

  
  Mixing of the following functionals:
    gga_x_pbe (coefficient: 0.75)
    gga_c_pbe (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _beta : Optional[float], default: 0.25
    Mixing parameter
  """
  _beta = (_beta or 0.25)
  p = get_p("hyb_gga_xc_pbeh", polarized, _beta)
  def _hyb_gga_xc_pbeh_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_pbeh.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_pbeh_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_pbeh_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_pbeh_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_pbeh_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_pbeh_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_pbeh_epsilon_xc

def hyb_gga_xc_b97(
  polarized: bool = True,
  _cx0: Optional[float] = None,
  _cx1: Optional[float] = None,
  _cx2: Optional[float] = None,
  _cx3: Optional[float] = None,
  _cx4: Optional[float] = None,
  _css0: Optional[float] = None,
  _css1: Optional[float] = None,
  _css2: Optional[float] = None,
  _css3: Optional[float] = None,
  _css4: Optional[float] = None,
  _cos0: Optional[float] = None,
  _cos1: Optional[float] = None,
  _cos2: Optional[float] = None,
  _cos3: Optional[float] = None,
  _cos4: Optional[float] = None,
  _cxx: Optional[float] = None,
) -> Callable:
  r"""
  A. D. Becke.,  J. Chem. Phys. 107, 8554 (1997)
  `10.1063/1.475007 <http://scitation.aip.org/content/aip/journal/jcp/107/20/10.1063/1.475007>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _cx0 : Optional[float], default: 0.8094
    u^0 coefficient for exchange
  _cx1 : Optional[float], default: 0.5073
    u^1 coefficient for exchange
  _cx2 : Optional[float], default: 0.7481
    u^2 coefficient for exchange
  _cx3 : Optional[float], default: 0.0
    u^3 coefficient for exchange
  _cx4 : Optional[float], default: 0.0
    u^4 coefficient for exchange
  _css0 : Optional[float], default: 0.1737
    u^0 coefficient for same-spin correlation
  _css1 : Optional[float], default: 2.3487
    u^1 coefficient for same-spin correlation
  _css2 : Optional[float], default: -2.4868
    u^2 coefficient for same-spin correlation
  _css3 : Optional[float], default: 0.0
    u^3 coefficient for same-spin correlation
  _css4 : Optional[float], default: 0.0
    u^4 coefficient for same-spin correlation
  _cos0 : Optional[float], default: 0.9454
    u^0 coefficient for opposite-spin correlation
  _cos1 : Optional[float], default: 0.7471
    u^1 coefficient for opposite-spin correlation
  _cos2 : Optional[float], default: -4.5961
    u^2 coefficient for opposite-spin correlation
  _cos3 : Optional[float], default: 0.0
    u^3 coefficient for opposite-spin correlation
  _cos4 : Optional[float], default: 0.0
    u^4 coefficient for opposite-spin correlation
  _cxx : Optional[float], default: 0.1943
    coefficient for exact exchange
  """
  _cx0 = (_cx0 or 0.8094)
  _cx1 = (_cx1 or 0.5073)
  _cx2 = (_cx2 or 0.7481)
  _cx3 = (_cx3 or 0.0)
  _cx4 = (_cx4 or 0.0)
  _css0 = (_css0 or 0.1737)
  _css1 = (_css1 or 2.3487)
  _css2 = (_css2 or -2.4868)
  _css3 = (_css3 or 0.0)
  _css4 = (_css4 or 0.0)
  _cos0 = (_cos0 or 0.9454)
  _cos1 = (_cos1 or 0.7471)
  _cos2 = (_cos2 or -4.5961)
  _cos3 = (_cos3 or 0.0)
  _cos4 = (_cos4 or 0.0)
  _cxx = (_cxx or 0.1943)
  p = get_p("hyb_gga_xc_b97", polarized, _cx0, _cx1, _cx2, _cx3, _cx4, _css0, _css1, _css2, _css3, _css4, _cos0, _cos1, _cos2, _cos3, _cos4, _cxx)
  def _hyb_gga_xc_b97_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_b97.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _hyb_gga_xc_b97_epsilon_xc

def hyb_gga_xc_b97_1(
  polarized: bool = True,
  _cx0: Optional[float] = None,
  _cx1: Optional[float] = None,
  _cx2: Optional[float] = None,
  _cx3: Optional[float] = None,
  _cx4: Optional[float] = None,
  _css0: Optional[float] = None,
  _css1: Optional[float] = None,
  _css2: Optional[float] = None,
  _css3: Optional[float] = None,
  _css4: Optional[float] = None,
  _cos0: Optional[float] = None,
  _cos1: Optional[float] = None,
  _cos2: Optional[float] = None,
  _cos3: Optional[float] = None,
  _cos4: Optional[float] = None,
  _cxx: Optional[float] = None,
) -> Callable:
  r"""
  F. A. Hamprecht, A. J. Cohen, D. J. Tozer, and N. C. Handy.,  J. Chem. Phys. 109, 6264 (1998)
  `10.1063/1.477267 <http://scitation.aip.org/content/aip/journal/jcp/109/15/10.1063/1.477267>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _cx0 : Optional[float], default: 0.789518
    u^0 coefficient for exchange
  _cx1 : Optional[float], default: 0.573805
    u^1 coefficient for exchange
  _cx2 : Optional[float], default: 0.660975
    u^2 coefficient for exchange
  _cx3 : Optional[float], default: 0.0
    u^3 coefficient for exchange
  _cx4 : Optional[float], default: 0.0
    u^4 coefficient for exchange
  _css0 : Optional[float], default: 0.0820011
    u^0 coefficient for same-spin correlation
  _css1 : Optional[float], default: 2.71681
    u^1 coefficient for same-spin correlation
  _css2 : Optional[float], default: -2.87103
    u^2 coefficient for same-spin correlation
  _css3 : Optional[float], default: 0.0
    u^3 coefficient for same-spin correlation
  _css4 : Optional[float], default: 0.0
    u^4 coefficient for same-spin correlation
  _cos0 : Optional[float], default: 0.955689
    u^0 coefficient for opposite-spin correlation
  _cos1 : Optional[float], default: 0.788552
    u^1 coefficient for opposite-spin correlation
  _cos2 : Optional[float], default: -5.47869
    u^2 coefficient for opposite-spin correlation
  _cos3 : Optional[float], default: 0.0
    u^3 coefficient for opposite-spin correlation
  _cos4 : Optional[float], default: 0.0
    u^4 coefficient for opposite-spin correlation
  _cxx : Optional[float], default: 0.21
    coefficient for exact exchange
  """
  _cx0 = (_cx0 or 0.789518)
  _cx1 = (_cx1 or 0.573805)
  _cx2 = (_cx2 or 0.660975)
  _cx3 = (_cx3 or 0.0)
  _cx4 = (_cx4 or 0.0)
  _css0 = (_css0 or 0.0820011)
  _css1 = (_css1 or 2.71681)
  _css2 = (_css2 or -2.87103)
  _css3 = (_css3 or 0.0)
  _css4 = (_css4 or 0.0)
  _cos0 = (_cos0 or 0.955689)
  _cos1 = (_cos1 or 0.788552)
  _cos2 = (_cos2 or -5.47869)
  _cos3 = (_cos3 or 0.0)
  _cos4 = (_cos4 or 0.0)
  _cxx = (_cxx or 0.21)
  p = get_p("hyb_gga_xc_b97_1", polarized, _cx0, _cx1, _cx2, _cx3, _cx4, _css0, _css1, _css2, _css3, _css4, _cos0, _cos1, _cos2, _cos3, _cos4, _cxx)
  def _hyb_gga_xc_b97_1_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_b97_1.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _hyb_gga_xc_b97_1_epsilon_xc

def hyb_gga_xc_apf(
  polarized: bool = True,
) -> Callable:
  r"""
  A. Austin, G. A. Petersson, M. J. Frisch, F. J. Dobek, G. Scalmani, and K. Throssell.,  J. Chem. Theory Comput. 8, 4989-5007 (2012)
  `10.1021/ct300778e <https://doi.org/10.1021/ct300778e>`_

  
  Mixing of the following functionals:
    lda_x (coefficient: 0.03288000000000003)
    gga_x_b88 (coefficient: 0.29591999999999996)
    lda_c_pw (coefficient: 0.07808999999999998)
    gga_c_pw91 (coefficient: 0.33291)
    gga_x_pbe (coefficient: 0.44175)
    gga_c_pbe (coefficient: 0.589)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("hyb_gga_xc_apf", polarized, )
  def _hyb_gga_xc_apf_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_apf.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_apf_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_apf_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_apf_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_apf_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_apf_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_apf_epsilon_xc

def hyb_gga_xc_b97_2(
  polarized: bool = True,
  _cx0: Optional[float] = None,
  _cx1: Optional[float] = None,
  _cx2: Optional[float] = None,
  _cx3: Optional[float] = None,
  _cx4: Optional[float] = None,
  _css0: Optional[float] = None,
  _css1: Optional[float] = None,
  _css2: Optional[float] = None,
  _css3: Optional[float] = None,
  _css4: Optional[float] = None,
  _cos0: Optional[float] = None,
  _cos1: Optional[float] = None,
  _cos2: Optional[float] = None,
  _cos3: Optional[float] = None,
  _cos4: Optional[float] = None,
  _cxx: Optional[float] = None,
) -> Callable:
  r"""
  P. J. Wilson, T. J. Bradley, and D. J. Tozer.,  J. Chem. Phys. 115, 9233 (2001)
  `10.1063/1.1412605 <http://scitation.aip.org/content/aip/journal/jcp/115/20/10.1063/1.1412605>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _cx0 : Optional[float], default: 0.827642
    u^0 coefficient for exchange
  _cx1 : Optional[float], default: 0.04784
    u^1 coefficient for exchange
  _cx2 : Optional[float], default: 1.76125
    u^2 coefficient for exchange
  _cx3 : Optional[float], default: 0.0
    u^3 coefficient for exchange
  _cx4 : Optional[float], default: 0.0
    u^4 coefficient for exchange
  _css0 : Optional[float], default: 0.585808
    u^0 coefficient for same-spin correlation
  _css1 : Optional[float], default: -0.691682
    u^1 coefficient for same-spin correlation
  _css2 : Optional[float], default: 0.394796
    u^2 coefficient for same-spin correlation
  _css3 : Optional[float], default: 0.0
    u^3 coefficient for same-spin correlation
  _css4 : Optional[float], default: 0.0
    u^4 coefficient for same-spin correlation
  _cos0 : Optional[float], default: 0.999849
    u^0 coefficient for opposite-spin correlation
  _cos1 : Optional[float], default: 1.40626
    u^1 coefficient for opposite-spin correlation
  _cos2 : Optional[float], default: -7.4406
    u^2 coefficient for opposite-spin correlation
  _cos3 : Optional[float], default: 0.0
    u^3 coefficient for opposite-spin correlation
  _cos4 : Optional[float], default: 0.0
    u^4 coefficient for opposite-spin correlation
  _cxx : Optional[float], default: 0.21
    coefficient for exact exchange
  """
  _cx0 = (_cx0 or 0.827642)
  _cx1 = (_cx1 or 0.04784)
  _cx2 = (_cx2 or 1.76125)
  _cx3 = (_cx3 or 0.0)
  _cx4 = (_cx4 or 0.0)
  _css0 = (_css0 or 0.585808)
  _css1 = (_css1 or -0.691682)
  _css2 = (_css2 or 0.394796)
  _css3 = (_css3 or 0.0)
  _css4 = (_css4 or 0.0)
  _cos0 = (_cos0 or 0.999849)
  _cos1 = (_cos1 or 1.40626)
  _cos2 = (_cos2 or -7.4406)
  _cos3 = (_cos3 or 0.0)
  _cos4 = (_cos4 or 0.0)
  _cxx = (_cxx or 0.21)
  p = get_p("hyb_gga_xc_b97_2", polarized, _cx0, _cx1, _cx2, _cx3, _cx4, _css0, _css1, _css2, _css3, _css4, _cos0, _cos1, _cos2, _cos3, _cos4, _cxx)
  def _hyb_gga_xc_b97_2_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_b97_2.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _hyb_gga_xc_b97_2_epsilon_xc

def hyb_gga_xc_x3lyp(
  polarized: bool = True,
  _a0: Optional[float] = None,
  _ax: Optional[float] = None,
  _ac: Optional[float] = None,
  _ax1: Optional[float] = None,
  _ax2: Optional[float] = None,
) -> Callable:
  r"""
  X. Xu and W. A. Goddard.,  Proc. Natl. Acad. Sci. U. S. A. 101, 2673 (2004)
  `10.1073/pnas.0308730100 <http://www.pnas.org/content/101/9/2673.abstract>`_

  
  Mixing of the following functionals:
    lda_x (coefficient: 0.07300000000000006)
    gga_x_b88 (coefficient: 0.542385)
    gga_x_pw91 (coefficient: 0.16661499999999999)
    lda_c_vwn_rpa (coefficient: 0.129)
    gga_c_lyp (coefficient: 0.871)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a0 : Optional[float], default: 0.218
    fraction of HF exchange
  _ax : Optional[float], default: 0.709
    fraction of XLYP gradient correction
  _ac : Optional[float], default: 0.871
    fraction of VWN correction
  _ax1 : Optional[float], default: 0.765
    weight of B88 enhancement in XLYP exchange
  _ax2 : Optional[float], default: 0.235
    weight of PW91 enhancement in XLYP exchange
  """
  _a0 = (_a0 or 0.218)
  _ax = (_ax or 0.709)
  _ac = (_ac or 0.871)
  _ax1 = (_ax1 or 0.765)
  _ax2 = (_ax2 or 0.235)
  p = get_p("hyb_gga_xc_x3lyp", polarized, _a0, _ax, _ac, _ax1, _ax2)
  def _hyb_gga_xc_x3lyp_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_x3lyp.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_x3lyp_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_x3lyp_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_x3lyp_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_x3lyp_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_x3lyp_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_x3lyp_epsilon_xc

def hyb_gga_xc_b1wc(
  polarized: bool = True,
  _cx: Optional[float] = None,
) -> Callable:
  r"""
  D. I. Bilc, R. Orlando, R. Shaltaf, G.-M. Rignanese, J. Íñiguez, and Ph. Ghosez.,  Phys. Rev. B 77, 165107 (2008)
  `10.1103/PhysRevB.77.165107 <http://link.aps.org/doi/10.1103/PhysRevB.77.165107>`_

  
  Mixing of the following functionals:
    gga_x_wc (coefficient: 0.84)
    gga_c_pbe (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _cx : Optional[float], default: 0.16
    Fraction of exact exchange
  """
  _cx = (_cx or 0.16)
  p = get_p("hyb_gga_xc_b1wc", polarized, _cx)
  def _hyb_gga_xc_b1wc_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_b1wc.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_b1wc_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_b1wc_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_b1wc_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_b1wc_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_b1wc_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_b1wc_epsilon_xc

def hyb_gga_xc_b97_k(
  polarized: bool = True,
  _cx0: Optional[float] = None,
  _cx1: Optional[float] = None,
  _cx2: Optional[float] = None,
  _cx3: Optional[float] = None,
  _cx4: Optional[float] = None,
  _css0: Optional[float] = None,
  _css1: Optional[float] = None,
  _css2: Optional[float] = None,
  _css3: Optional[float] = None,
  _css4: Optional[float] = None,
  _cos0: Optional[float] = None,
  _cos1: Optional[float] = None,
  _cos2: Optional[float] = None,
  _cos3: Optional[float] = None,
  _cos4: Optional[float] = None,
  _cxx: Optional[float] = None,
) -> Callable:
  r"""
  A. D. Boese and J. M. L. Martin.,  J. Chem. Phys. 121, 3405 (2004)
  `10.1063/1.1774975 <http://scitation.aip.org/content/aip/journal/jcp/121/8/10.1063/1.1774975>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _cx0 : Optional[float], default: 0.507863
    u^0 coefficient for exchange
  _cx1 : Optional[float], default: 1.46873
    u^1 coefficient for exchange
  _cx2 : Optional[float], default: -1.51301
    u^2 coefficient for exchange
  _cx3 : Optional[float], default: 0.0
    u^3 coefficient for exchange
  _cx4 : Optional[float], default: 0.0
    u^4 coefficient for exchange
  _css0 : Optional[float], default: 0.12355
    u^0 coefficient for same-spin correlation
  _css1 : Optional[float], default: 2.65399
    u^1 coefficient for same-spin correlation
  _css2 : Optional[float], default: -3.20694
    u^2 coefficient for same-spin correlation
  _css3 : Optional[float], default: 0.0
    u^3 coefficient for same-spin correlation
  _css4 : Optional[float], default: 0.0
    u^4 coefficient for same-spin correlation
  _cos0 : Optional[float], default: 1.58613
    u^0 coefficient for opposite-spin correlation
  _cos1 : Optional[float], default: -6.20977
    u^1 coefficient for opposite-spin correlation
  _cos2 : Optional[float], default: 6.46106
    u^2 coefficient for opposite-spin correlation
  _cos3 : Optional[float], default: 0.0
    u^3 coefficient for opposite-spin correlation
  _cos4 : Optional[float], default: 0.0
    u^4 coefficient for opposite-spin correlation
  _cxx : Optional[float], default: 0.42
    coefficient for exact exchange
  """
  _cx0 = (_cx0 or 0.507863)
  _cx1 = (_cx1 or 1.46873)
  _cx2 = (_cx2 or -1.51301)
  _cx3 = (_cx3 or 0.0)
  _cx4 = (_cx4 or 0.0)
  _css0 = (_css0 or 0.12355)
  _css1 = (_css1 or 2.65399)
  _css2 = (_css2 or -3.20694)
  _css3 = (_css3 or 0.0)
  _css4 = (_css4 or 0.0)
  _cos0 = (_cos0 or 1.58613)
  _cos1 = (_cos1 or -6.20977)
  _cos2 = (_cos2 or 6.46106)
  _cos3 = (_cos3 or 0.0)
  _cos4 = (_cos4 or 0.0)
  _cxx = (_cxx or 0.42)
  p = get_p("hyb_gga_xc_b97_k", polarized, _cx0, _cx1, _cx2, _cx3, _cx4, _css0, _css1, _css2, _css3, _css4, _cos0, _cos1, _cos2, _cos3, _cos4, _cxx)
  def _hyb_gga_xc_b97_k_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_b97_k.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _hyb_gga_xc_b97_k_epsilon_xc

def hyb_gga_xc_b97_3(
  polarized: bool = True,
  _cx0: Optional[float] = None,
  _cx1: Optional[float] = None,
  _cx2: Optional[float] = None,
  _cx3: Optional[float] = None,
  _cx4: Optional[float] = None,
  _css0: Optional[float] = None,
  _css1: Optional[float] = None,
  _css2: Optional[float] = None,
  _css3: Optional[float] = None,
  _css4: Optional[float] = None,
  _cos0: Optional[float] = None,
  _cos1: Optional[float] = None,
  _cos2: Optional[float] = None,
  _cos3: Optional[float] = None,
  _cos4: Optional[float] = None,
  _cxx: Optional[float] = None,
) -> Callable:
  r"""
  T. W. Keal and D. J. Tozer.,  J. Chem. Phys. 123, 121103 (2005)
  `10.1063/1.2061227 <http://scitation.aip.org/content/aip/journal/jcp/123/12/10.1063/1.2061227>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _cx0 : Optional[float], default: 0.7334648
    u^0 coefficient for exchange
  _cx1 : Optional[float], default: 0.292527
    u^1 coefficient for exchange
  _cx2 : Optional[float], default: 3.338789
    u^2 coefficient for exchange
  _cx3 : Optional[float], default: -10.51158
    u^3 coefficient for exchange
  _cx4 : Optional[float], default: 10.60907
    u^4 coefficient for exchange
  _css0 : Optional[float], default: 0.5623649
    u^0 coefficient for same-spin correlation
  _css1 : Optional[float], default: -1.32298
    u^1 coefficient for same-spin correlation
  _css2 : Optional[float], default: 6.359191
    u^2 coefficient for same-spin correlation
  _css3 : Optional[float], default: -7.464002
    u^3 coefficient for same-spin correlation
  _css4 : Optional[float], default: 1.827082
    u^4 coefficient for same-spin correlation
  _cos0 : Optional[float], default: 1.13383
    u^0 coefficient for opposite-spin correlation
  _cos1 : Optional[float], default: -2.811967
    u^1 coefficient for opposite-spin correlation
  _cos2 : Optional[float], default: 7.431302
    u^2 coefficient for opposite-spin correlation
  _cos3 : Optional[float], default: -1.969342
    u^3 coefficient for opposite-spin correlation
  _cos4 : Optional[float], default: -11.74423
    u^4 coefficient for opposite-spin correlation
  _cxx : Optional[float], default: 0.269288
    coefficient for exact exchange
  """
  _cx0 = (_cx0 or 0.7334648)
  _cx1 = (_cx1 or 0.292527)
  _cx2 = (_cx2 or 3.338789)
  _cx3 = (_cx3 or -10.51158)
  _cx4 = (_cx4 or 10.60907)
  _css0 = (_css0 or 0.5623649)
  _css1 = (_css1 or -1.32298)
  _css2 = (_css2 or 6.359191)
  _css3 = (_css3 or -7.464002)
  _css4 = (_css4 or 1.827082)
  _cos0 = (_cos0 or 1.13383)
  _cos1 = (_cos1 or -2.811967)
  _cos2 = (_cos2 or 7.431302)
  _cos3 = (_cos3 or -1.969342)
  _cos4 = (_cos4 or -11.74423)
  _cxx = (_cxx or 0.269288)
  p = get_p("hyb_gga_xc_b97_3", polarized, _cx0, _cx1, _cx2, _cx3, _cx4, _css0, _css1, _css2, _css3, _css4, _cos0, _cos1, _cos2, _cos3, _cos4, _cxx)
  def _hyb_gga_xc_b97_3_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_b97_3.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _hyb_gga_xc_b97_3_epsilon_xc

def hyb_gga_xc_mpw3pw(
  polarized: bool = True,
  _a0: Optional[float] = None,
  _ax: Optional[float] = None,
  _ac: Optional[float] = None,
) -> Callable:
  r"""
  C. Adamo and V. Barone.,  J. Chem. Phys. 108, 664 (1998)
  `10.1063/1.475428 <http://scitation.aip.org/content/aip/journal/jcp/108/2/10.1063/1.475428>`_

  
  Mixing of the following functionals:
    lda_x (coefficient: 0.08000000000000007)
    gga_x_mpw91 (coefficient: 0.72)
    lda_c_vwn_rpa (coefficient: 0.18999999999999995)
    gga_c_pw91 (coefficient: 0.81)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a0 : Optional[float], default: 0.2
    Fraction of exact exchange
  _ax : Optional[float], default: 0.72
    Fraction of GGA exchange correction
  _ac : Optional[float], default: 0.81
    Fraction of GGA correlation correction
  """
  _a0 = (_a0 or 0.2)
  _ax = (_ax or 0.72)
  _ac = (_ac or 0.81)
  p = get_p("hyb_gga_xc_mpw3pw", polarized, _a0, _ax, _ac)
  def _hyb_gga_xc_mpw3pw_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_mpw3pw.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_mpw3pw_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_mpw3pw_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_mpw3pw_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_mpw3pw_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_mpw3pw_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_mpw3pw_epsilon_xc

def hyb_gga_xc_b1lyp(
  polarized: bool = True,
  _cx: Optional[float] = None,
) -> Callable:
  r"""
  C. Adamo and V. Barone.,  Chem. Phys. Lett. 274, 242 (1997)
  `10.1016/S0009-2614(97)00651-9 <http://www.sciencedirect.com/science/article/pii/S0009261497006519>`_

  
  Mixing of the following functionals:
    gga_x_b88 (coefficient: 0.75)
    gga_c_lyp (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _cx : Optional[float], default: 0.25
    Fraction of exact exchange
  """
  _cx = (_cx or 0.25)
  p = get_p("hyb_gga_xc_b1lyp", polarized, _cx)
  def _hyb_gga_xc_b1lyp_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_b1lyp.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_b1lyp_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_b1lyp_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_b1lyp_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_b1lyp_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_b1lyp_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_b1lyp_epsilon_xc

def hyb_gga_xc_b1pw91(
  polarized: bool = True,
  _cx: Optional[float] = None,
) -> Callable:
  r"""
  C. Adamo and V. Barone.,  Chem. Phys. Lett. 274, 242 (1997)
  `10.1016/S0009-2614(97)00651-9 <http://www.sciencedirect.com/science/article/pii/S0009261497006519>`_

  
  Mixing of the following functionals:
    gga_x_b88 (coefficient: 0.75)
    gga_c_pw91 (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _cx : Optional[float], default: 0.25
    Fraction of exact exchange
  """
  _cx = (_cx or 0.25)
  p = get_p("hyb_gga_xc_b1pw91", polarized, _cx)
  def _hyb_gga_xc_b1pw91_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_b1pw91.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_b1pw91_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_b1pw91_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_b1pw91_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_b1pw91_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_b1pw91_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_b1pw91_epsilon_xc

def hyb_gga_xc_mpw1pw(
  polarized: bool = True,
  _cx: Optional[float] = None,
) -> Callable:
  r"""
  C. Adamo and V. Barone.,  J. Chem. Phys. 108, 664 (1998)
  `10.1063/1.475428 <http://scitation.aip.org/content/aip/journal/jcp/108/2/10.1063/1.475428>`_

  
  Mixing of the following functionals:
    gga_x_mpw91 (coefficient: 0.75)
    gga_c_pw91 (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _cx : Optional[float], default: 0.25
    Fraction of exact exchange
  """
  _cx = (_cx or 0.25)
  p = get_p("hyb_gga_xc_mpw1pw", polarized, _cx)
  def _hyb_gga_xc_mpw1pw_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_mpw1pw.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_mpw1pw_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_mpw1pw_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_mpw1pw_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_mpw1pw_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_mpw1pw_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_mpw1pw_epsilon_xc

def hyb_gga_xc_mpw3lyp(
  polarized: bool = True,
  _a0: Optional[float] = None,
  _ax: Optional[float] = None,
  _ac: Optional[float] = None,
) -> Callable:
  r"""
  Y. Zhao and D. G. Truhlar.,  J. Phys. Chem. A 108, 6908 (2004)
  `10.1021/jp048147q <http://pubs.acs.org/doi/abs/10.1021/jp048147q>`_

  
  Mixing of the following functionals:
    lda_x (coefficient: 0.07300000000000006)
    gga_x_mpw91 (coefficient: 0.709)
    lda_c_vwn_rpa (coefficient: 0.129)
    gga_c_lyp (coefficient: 0.871)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a0 : Optional[float], default: 0.218
    Fraction of exact exchange
  _ax : Optional[float], default: 0.709
    Fraction of GGA exchange correction
  _ac : Optional[float], default: 0.871
    Fraction of GGA correlation correction
  """
  _a0 = (_a0 or 0.218)
  _ax = (_ax or 0.709)
  _ac = (_ac or 0.871)
  p = get_p("hyb_gga_xc_mpw3lyp", polarized, _a0, _ax, _ac)
  def _hyb_gga_xc_mpw3lyp_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_mpw3lyp.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_mpw3lyp_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_mpw3lyp_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_mpw3lyp_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_mpw3lyp_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_mpw3lyp_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_mpw3lyp_epsilon_xc

def hyb_gga_xc_sb98_1a(
  polarized: bool = True,
  _cx0: Optional[float] = None,
  _cx1: Optional[float] = None,
  _cx2: Optional[float] = None,
  _cx3: Optional[float] = None,
  _cx4: Optional[float] = None,
  _css0: Optional[float] = None,
  _css1: Optional[float] = None,
  _css2: Optional[float] = None,
  _css3: Optional[float] = None,
  _css4: Optional[float] = None,
  _cos0: Optional[float] = None,
  _cos1: Optional[float] = None,
  _cos2: Optional[float] = None,
  _cos3: Optional[float] = None,
  _cos4: Optional[float] = None,
  _cxx: Optional[float] = None,
) -> Callable:
  r"""
  H. L. Schmider and A. D. Becke.,  J. Chem. Phys. 108, 9624 (1998)
  `10.1063/1.476438 <http://scitation.aip.org/content/aip/journal/jcp/108/23/10.1063/1.476438>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _cx0 : Optional[float], default: 0.845975
    u^0 coefficient for exchange
  _cx1 : Optional[float], default: 0.228183
    u^1 coefficient for exchange
  _cx2 : Optional[float], default: 0.749949
    u^2 coefficient for exchange
  _cx3 : Optional[float], default: 0.0
    u^3 coefficient for exchange
  _cx4 : Optional[float], default: 0.0
    u^4 coefficient for exchange
  _css0 : Optional[float], default: -0.817637
    u^0 coefficient for same-spin correlation
  _css1 : Optional[float], default: -0.054676
    u^1 coefficient for same-spin correlation
  _css2 : Optional[float], default: 0.592163
    u^2 coefficient for same-spin correlation
  _css3 : Optional[float], default: 0.0
    u^3 coefficient for same-spin correlation
  _css4 : Optional[float], default: 0.0
    u^4 coefficient for same-spin correlation
  _cos0 : Optional[float], default: 0.975483
    u^0 coefficient for opposite-spin correlation
  _cos1 : Optional[float], default: 0.398379
    u^1 coefficient for opposite-spin correlation
  _cos2 : Optional[float], default: -3.7354
    u^2 coefficient for opposite-spin correlation
  _cos3 : Optional[float], default: 0.0
    u^3 coefficient for opposite-spin correlation
  _cos4 : Optional[float], default: 0.0
    u^4 coefficient for opposite-spin correlation
  _cxx : Optional[float], default: 0.229015
    coefficient for exact exchange
  """
  _cx0 = (_cx0 or 0.845975)
  _cx1 = (_cx1 or 0.228183)
  _cx2 = (_cx2 or 0.749949)
  _cx3 = (_cx3 or 0.0)
  _cx4 = (_cx4 or 0.0)
  _css0 = (_css0 or -0.817637)
  _css1 = (_css1 or -0.054676)
  _css2 = (_css2 or 0.592163)
  _css3 = (_css3 or 0.0)
  _css4 = (_css4 or 0.0)
  _cos0 = (_cos0 or 0.975483)
  _cos1 = (_cos1 or 0.398379)
  _cos2 = (_cos2 or -3.7354)
  _cos3 = (_cos3 or 0.0)
  _cos4 = (_cos4 or 0.0)
  _cxx = (_cxx or 0.229015)
  p = get_p("hyb_gga_xc_sb98_1a", polarized, _cx0, _cx1, _cx2, _cx3, _cx4, _css0, _css1, _css2, _css3, _css4, _cos0, _cos1, _cos2, _cos3, _cos4, _cxx)
  def _hyb_gga_xc_sb98_1a_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_sb98_1a.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _hyb_gga_xc_sb98_1a_epsilon_xc

def hyb_gga_xc_sb98_1b(
  polarized: bool = True,
  _cx0: Optional[float] = None,
  _cx1: Optional[float] = None,
  _cx2: Optional[float] = None,
  _cx3: Optional[float] = None,
  _cx4: Optional[float] = None,
  _css0: Optional[float] = None,
  _css1: Optional[float] = None,
  _css2: Optional[float] = None,
  _css3: Optional[float] = None,
  _css4: Optional[float] = None,
  _cos0: Optional[float] = None,
  _cos1: Optional[float] = None,
  _cos2: Optional[float] = None,
  _cos3: Optional[float] = None,
  _cos4: Optional[float] = None,
  _cxx: Optional[float] = None,
) -> Callable:
  r"""
  H. L. Schmider and A. D. Becke.,  J. Chem. Phys. 108, 9624 (1998)
  `10.1063/1.476438 <http://scitation.aip.org/content/aip/journal/jcp/108/23/10.1063/1.476438>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _cx0 : Optional[float], default: 0.800103
    u^0 coefficient for exchange
  _cx1 : Optional[float], default: -0.084192
    u^1 coefficient for exchange
  _cx2 : Optional[float], default: 1.47742
    u^2 coefficient for exchange
  _cx3 : Optional[float], default: 0.0
    u^3 coefficient for exchange
  _cx4 : Optional[float], default: 0.0
    u^4 coefficient for exchange
  _css0 : Optional[float], default: 1.44946
    u^0 coefficient for same-spin correlation
  _css1 : Optional[float], default: -2.37073
    u^1 coefficient for same-spin correlation
  _css2 : Optional[float], default: 2.13564
    u^2 coefficient for same-spin correlation
  _css3 : Optional[float], default: 0.0
    u^3 coefficient for same-spin correlation
  _css4 : Optional[float], default: 0.0
    u^4 coefficient for same-spin correlation
  _cos0 : Optional[float], default: 0.977621
    u^0 coefficient for opposite-spin correlation
  _cos1 : Optional[float], default: 0.931199
    u^1 coefficient for opposite-spin correlation
  _cos2 : Optional[float], default: -4.76973
    u^2 coefficient for opposite-spin correlation
  _cos3 : Optional[float], default: 0.0
    u^3 coefficient for opposite-spin correlation
  _cos4 : Optional[float], default: 0.0
    u^4 coefficient for opposite-spin correlation
  _cxx : Optional[float], default: 0.199352
    coefficient for exact exchange
  """
  _cx0 = (_cx0 or 0.800103)
  _cx1 = (_cx1 or -0.084192)
  _cx2 = (_cx2 or 1.47742)
  _cx3 = (_cx3 or 0.0)
  _cx4 = (_cx4 or 0.0)
  _css0 = (_css0 or 1.44946)
  _css1 = (_css1 or -2.37073)
  _css2 = (_css2 or 2.13564)
  _css3 = (_css3 or 0.0)
  _css4 = (_css4 or 0.0)
  _cos0 = (_cos0 or 0.977621)
  _cos1 = (_cos1 or 0.931199)
  _cos2 = (_cos2 or -4.76973)
  _cos3 = (_cos3 or 0.0)
  _cos4 = (_cos4 or 0.0)
  _cxx = (_cxx or 0.199352)
  p = get_p("hyb_gga_xc_sb98_1b", polarized, _cx0, _cx1, _cx2, _cx3, _cx4, _css0, _css1, _css2, _css3, _css4, _cos0, _cos1, _cos2, _cos3, _cos4, _cxx)
  def _hyb_gga_xc_sb98_1b_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_sb98_1b.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _hyb_gga_xc_sb98_1b_epsilon_xc

def hyb_gga_xc_sb98_1c(
  polarized: bool = True,
  _cx0: Optional[float] = None,
  _cx1: Optional[float] = None,
  _cx2: Optional[float] = None,
  _cx3: Optional[float] = None,
  _cx4: Optional[float] = None,
  _css0: Optional[float] = None,
  _css1: Optional[float] = None,
  _css2: Optional[float] = None,
  _css3: Optional[float] = None,
  _css4: Optional[float] = None,
  _cos0: Optional[float] = None,
  _cos1: Optional[float] = None,
  _cos2: Optional[float] = None,
  _cos3: Optional[float] = None,
  _cos4: Optional[float] = None,
  _cxx: Optional[float] = None,
) -> Callable:
  r"""
  H. L. Schmider and A. D. Becke.,  J. Chem. Phys. 108, 9624 (1998)
  `10.1063/1.476438 <http://scitation.aip.org/content/aip/journal/jcp/108/23/10.1063/1.476438>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _cx0 : Optional[float], default: 0.810936
    u^0 coefficient for exchange
  _cx1 : Optional[float], default: 0.49609
    u^1 coefficient for exchange
  _cx2 : Optional[float], default: 0.772385
    u^2 coefficient for exchange
  _cx3 : Optional[float], default: 0.0
    u^3 coefficient for exchange
  _cx4 : Optional[float], default: 0.0
    u^4 coefficient for exchange
  _css0 : Optional[float], default: 0.262077
    u^0 coefficient for same-spin correlation
  _css1 : Optional[float], default: 2.12576
    u^1 coefficient for same-spin correlation
  _css2 : Optional[float], default: -2.30465
    u^2 coefficient for same-spin correlation
  _css3 : Optional[float], default: 0.0
    u^3 coefficient for same-spin correlation
  _css4 : Optional[float], default: 0.0
    u^4 coefficient for same-spin correlation
  _cos0 : Optional[float], default: 0.939269
    u^0 coefficient for opposite-spin correlation
  _cos1 : Optional[float], default: 0.898121
    u^1 coefficient for opposite-spin correlation
  _cos2 : Optional[float], default: -4.91276
    u^2 coefficient for opposite-spin correlation
  _cos3 : Optional[float], default: 0.0
    u^3 coefficient for opposite-spin correlation
  _cos4 : Optional[float], default: 0.0
    u^4 coefficient for opposite-spin correlation
  _cxx : Optional[float], default: 0.192416
    coefficient for exact exchange
  """
  _cx0 = (_cx0 or 0.810936)
  _cx1 = (_cx1 or 0.49609)
  _cx2 = (_cx2 or 0.772385)
  _cx3 = (_cx3 or 0.0)
  _cx4 = (_cx4 or 0.0)
  _css0 = (_css0 or 0.262077)
  _css1 = (_css1 or 2.12576)
  _css2 = (_css2 or -2.30465)
  _css3 = (_css3 or 0.0)
  _css4 = (_css4 or 0.0)
  _cos0 = (_cos0 or 0.939269)
  _cos1 = (_cos1 or 0.898121)
  _cos2 = (_cos2 or -4.91276)
  _cos3 = (_cos3 or 0.0)
  _cos4 = (_cos4 or 0.0)
  _cxx = (_cxx or 0.192416)
  p = get_p("hyb_gga_xc_sb98_1c", polarized, _cx0, _cx1, _cx2, _cx3, _cx4, _css0, _css1, _css2, _css3, _css4, _cos0, _cos1, _cos2, _cos3, _cos4, _cxx)
  def _hyb_gga_xc_sb98_1c_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_sb98_1c.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _hyb_gga_xc_sb98_1c_epsilon_xc

def hyb_gga_xc_sb98_2a(
  polarized: bool = True,
  _cx0: Optional[float] = None,
  _cx1: Optional[float] = None,
  _cx2: Optional[float] = None,
  _cx3: Optional[float] = None,
  _cx4: Optional[float] = None,
  _css0: Optional[float] = None,
  _css1: Optional[float] = None,
  _css2: Optional[float] = None,
  _css3: Optional[float] = None,
  _css4: Optional[float] = None,
  _cos0: Optional[float] = None,
  _cos1: Optional[float] = None,
  _cos2: Optional[float] = None,
  _cos3: Optional[float] = None,
  _cos4: Optional[float] = None,
  _cxx: Optional[float] = None,
) -> Callable:
  r"""
  H. L. Schmider and A. D. Becke.,  J. Chem. Phys. 108, 9624 (1998)
  `10.1063/1.476438 <http://scitation.aip.org/content/aip/journal/jcp/108/23/10.1063/1.476438>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _cx0 : Optional[float], default: 0.7492
    u^0 coefficient for exchange
  _cx1 : Optional[float], default: 0.402322
    u^1 coefficient for exchange
  _cx2 : Optional[float], default: 0.620779
    u^2 coefficient for exchange
  _cx3 : Optional[float], default: 0.0
    u^3 coefficient for exchange
  _cx4 : Optional[float], default: 0.0
    u^4 coefficient for exchange
  _css0 : Optional[float], default: 1.26686
    u^0 coefficient for same-spin correlation
  _css1 : Optional[float], default: 1.67146
    u^1 coefficient for same-spin correlation
  _css2 : Optional[float], default: -1.22565
    u^2 coefficient for same-spin correlation
  _css3 : Optional[float], default: 0.0
    u^3 coefficient for same-spin correlation
  _css4 : Optional[float], default: 0.0
    u^4 coefficient for same-spin correlation
  _cos0 : Optional[float], default: 0.964641
    u^0 coefficient for opposite-spin correlation
  _cos1 : Optional[float], default: 0.050527
    u^1 coefficient for opposite-spin correlation
  _cos2 : Optional[float], default: -3.01966
    u^2 coefficient for opposite-spin correlation
  _cos3 : Optional[float], default: 0.0
    u^3 coefficient for opposite-spin correlation
  _cos4 : Optional[float], default: 0.0
    u^4 coefficient for opposite-spin correlation
  _cxx : Optional[float], default: 0.232055
    coefficient for exact exchange
  """
  _cx0 = (_cx0 or 0.7492)
  _cx1 = (_cx1 or 0.402322)
  _cx2 = (_cx2 or 0.620779)
  _cx3 = (_cx3 or 0.0)
  _cx4 = (_cx4 or 0.0)
  _css0 = (_css0 or 1.26686)
  _css1 = (_css1 or 1.67146)
  _css2 = (_css2 or -1.22565)
  _css3 = (_css3 or 0.0)
  _css4 = (_css4 or 0.0)
  _cos0 = (_cos0 or 0.964641)
  _cos1 = (_cos1 or 0.050527)
  _cos2 = (_cos2 or -3.01966)
  _cos3 = (_cos3 or 0.0)
  _cos4 = (_cos4 or 0.0)
  _cxx = (_cxx or 0.232055)
  p = get_p("hyb_gga_xc_sb98_2a", polarized, _cx0, _cx1, _cx2, _cx3, _cx4, _css0, _css1, _css2, _css3, _css4, _cos0, _cos1, _cos2, _cos3, _cos4, _cxx)
  def _hyb_gga_xc_sb98_2a_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_sb98_2a.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _hyb_gga_xc_sb98_2a_epsilon_xc

def hyb_gga_xc_sb98_2b(
  polarized: bool = True,
  _cx0: Optional[float] = None,
  _cx1: Optional[float] = None,
  _cx2: Optional[float] = None,
  _cx3: Optional[float] = None,
  _cx4: Optional[float] = None,
  _css0: Optional[float] = None,
  _css1: Optional[float] = None,
  _css2: Optional[float] = None,
  _css3: Optional[float] = None,
  _css4: Optional[float] = None,
  _cos0: Optional[float] = None,
  _cos1: Optional[float] = None,
  _cos2: Optional[float] = None,
  _cos3: Optional[float] = None,
  _cos4: Optional[float] = None,
  _cxx: Optional[float] = None,
) -> Callable:
  r"""
  H. L. Schmider and A. D. Becke.,  J. Chem. Phys. 108, 9624 (1998)
  `10.1063/1.476438 <http://scitation.aip.org/content/aip/journal/jcp/108/23/10.1063/1.476438>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _cx0 : Optional[float], default: 0.770587
    u^0 coefficient for exchange
  _cx1 : Optional[float], default: 0.180767
    u^1 coefficient for exchange
  _cx2 : Optional[float], default: 0.955246
    u^2 coefficient for exchange
  _cx3 : Optional[float], default: 0.0
    u^3 coefficient for exchange
  _cx4 : Optional[float], default: 0.0
    u^4 coefficient for exchange
  _css0 : Optional[float], default: 0.170473
    u^0 coefficient for same-spin correlation
  _css1 : Optional[float], default: 1.24051
    u^1 coefficient for same-spin correlation
  _css2 : Optional[float], default: -0.862711
    u^2 coefficient for same-spin correlation
  _css3 : Optional[float], default: 0.0
    u^3 coefficient for same-spin correlation
  _css4 : Optional[float], default: 0.0
    u^4 coefficient for same-spin correlation
  _cos0 : Optional[float], default: 0.965362
    u^0 coefficient for opposite-spin correlation
  _cos1 : Optional[float], default: 0.8633
    u^1 coefficient for opposite-spin correlation
  _cos2 : Optional[float], default: -4.61778
    u^2 coefficient for opposite-spin correlation
  _cos3 : Optional[float], default: 0.0
    u^3 coefficient for opposite-spin correlation
  _cos4 : Optional[float], default: 0.0
    u^4 coefficient for opposite-spin correlation
  _cxx : Optional[float], default: 0.237978
    coefficient for exact exchange
  """
  _cx0 = (_cx0 or 0.770587)
  _cx1 = (_cx1 or 0.180767)
  _cx2 = (_cx2 or 0.955246)
  _cx3 = (_cx3 or 0.0)
  _cx4 = (_cx4 or 0.0)
  _css0 = (_css0 or 0.170473)
  _css1 = (_css1 or 1.24051)
  _css2 = (_css2 or -0.862711)
  _css3 = (_css3 or 0.0)
  _css4 = (_css4 or 0.0)
  _cos0 = (_cos0 or 0.965362)
  _cos1 = (_cos1 or 0.8633)
  _cos2 = (_cos2 or -4.61778)
  _cos3 = (_cos3 or 0.0)
  _cos4 = (_cos4 or 0.0)
  _cxx = (_cxx or 0.237978)
  p = get_p("hyb_gga_xc_sb98_2b", polarized, _cx0, _cx1, _cx2, _cx3, _cx4, _css0, _css1, _css2, _css3, _css4, _cos0, _cos1, _cos2, _cos3, _cos4, _cxx)
  def _hyb_gga_xc_sb98_2b_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_sb98_2b.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _hyb_gga_xc_sb98_2b_epsilon_xc

def hyb_gga_xc_sb98_2c(
  polarized: bool = True,
  _cx0: Optional[float] = None,
  _cx1: Optional[float] = None,
  _cx2: Optional[float] = None,
  _cx3: Optional[float] = None,
  _cx4: Optional[float] = None,
  _css0: Optional[float] = None,
  _css1: Optional[float] = None,
  _css2: Optional[float] = None,
  _css3: Optional[float] = None,
  _css4: Optional[float] = None,
  _cos0: Optional[float] = None,
  _cos1: Optional[float] = None,
  _cos2: Optional[float] = None,
  _cos3: Optional[float] = None,
  _cos4: Optional[float] = None,
  _cxx: Optional[float] = None,
) -> Callable:
  r"""
  H. L. Schmider and A. D. Becke.,  J. Chem. Phys. 108, 9624 (1998)
  `10.1063/1.476438 <http://scitation.aip.org/content/aip/journal/jcp/108/23/10.1063/1.476438>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _cx0 : Optional[float], default: 0.790194
    u^0 coefficient for exchange
  _cx1 : Optional[float], default: 0.400271
    u^1 coefficient for exchange
  _cx2 : Optional[float], default: 0.832857
    u^2 coefficient for exchange
  _cx3 : Optional[float], default: 0.0
    u^3 coefficient for exchange
  _cx4 : Optional[float], default: 0.0
    u^4 coefficient for exchange
  _css0 : Optional[float], default: -0.120163
    u^0 coefficient for same-spin correlation
  _css1 : Optional[float], default: 2.82332
    u^1 coefficient for same-spin correlation
  _css2 : Optional[float], default: -2.59412
    u^2 coefficient for same-spin correlation
  _css3 : Optional[float], default: 0.0
    u^3 coefficient for same-spin correlation
  _css4 : Optional[float], default: 0.0
    u^4 coefficient for same-spin correlation
  _cos0 : Optional[float], default: 0.934715
    u^0 coefficient for opposite-spin correlation
  _cos1 : Optional[float], default: 1.14105
    u^1 coefficient for opposite-spin correlation
  _cos2 : Optional[float], default: -5.33398
    u^2 coefficient for opposite-spin correlation
  _cos3 : Optional[float], default: 0.0
    u^3 coefficient for opposite-spin correlation
  _cos4 : Optional[float], default: 0.0
    u^4 coefficient for opposite-spin correlation
  _cxx : Optional[float], default: 0.219847
    coefficient for exact exchange
  """
  _cx0 = (_cx0 or 0.790194)
  _cx1 = (_cx1 or 0.400271)
  _cx2 = (_cx2 or 0.832857)
  _cx3 = (_cx3 or 0.0)
  _cx4 = (_cx4 or 0.0)
  _css0 = (_css0 or -0.120163)
  _css1 = (_css1 or 2.82332)
  _css2 = (_css2 or -2.59412)
  _css3 = (_css3 or 0.0)
  _css4 = (_css4 or 0.0)
  _cos0 = (_cos0 or 0.934715)
  _cos1 = (_cos1 or 1.14105)
  _cos2 = (_cos2 or -5.33398)
  _cos3 = (_cos3 or 0.0)
  _cos4 = (_cos4 or 0.0)
  _cxx = (_cxx or 0.219847)
  p = get_p("hyb_gga_xc_sb98_2c", polarized, _cx0, _cx1, _cx2, _cx3, _cx4, _css0, _css1, _css2, _css3, _css4, _cos0, _cos1, _cos2, _cos3, _cos4, _cxx)
  def _hyb_gga_xc_sb98_2c_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_sb98_2c.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _hyb_gga_xc_sb98_2c_epsilon_xc

def hyb_gga_x_sogga11_x(
  polarized: bool = True,
  _kappa: Optional[float] = None,
  _mu: Optional[float] = None,
  _a0: Optional[float] = None,
  _a1: Optional[float] = None,
  _a2: Optional[float] = None,
  _a3: Optional[float] = None,
  _a4: Optional[float] = None,
  _a5: Optional[float] = None,
  _b0: Optional[float] = None,
  _b1: Optional[float] = None,
  _b2: Optional[float] = None,
  _b3: Optional[float] = None,
  _b4: Optional[float] = None,
  _b5: Optional[float] = None,
  _cx: Optional[float] = None,
) -> Callable:
  r"""
  R. Peverati and D. G. Truhlar.,  J. Chem. Phys. 135, 191102 (2011)
  `10.1063/1.3663871 <http://scitation.aip.org/content/aip/journal/jcp/135/19/10.1063/1.3663871>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _kappa : Optional[float], default: 0.552
    kappa
  _mu : Optional[float], default: 0.12345679012345678
    mu
  _a0 : Optional[float], default: 0.29925
    a0
  _a1 : Optional[float], default: 3.21638
    a1
  _a2 : Optional[float], default: -3.55605
    a2
  _a3 : Optional[float], default: 7.65852
    a3
  _a4 : Optional[float], default: -11.283
    a4
  _a5 : Optional[float], default: 5.25813
    a5
  _b0 : Optional[float], default: 0.29925
    b0
  _b1 : Optional[float], default: -2.88595
    b1
  _b2 : Optional[float], default: 3.23617
    b2
  _b3 : Optional[float], default: -2.45393
    b3
  _b4 : Optional[float], default: -3.75495
    b4
  _b5 : Optional[float], default: 3.96613
    b5
  _cx : Optional[float], default: 0.4015
    Fraction of exact exchange
  """
  _kappa = (_kappa or 0.552)
  _mu = (_mu or 0.12345679012345678)
  _a0 = (_a0 or 0.29925)
  _a1 = (_a1 or 3.21638)
  _a2 = (_a2 or -3.55605)
  _a3 = (_a3 or 7.65852)
  _a4 = (_a4 or -11.283)
  _a5 = (_a5 or 5.25813)
  _b0 = (_b0 or 0.29925)
  _b1 = (_b1 or -2.88595)
  _b2 = (_b2 or 3.23617)
  _b3 = (_b3 or -2.45393)
  _b4 = (_b4 or -3.75495)
  _b5 = (_b5 or 3.96613)
  _cx = (_cx or 0.4015)
  p = get_p("hyb_gga_x_sogga11_x", polarized, _kappa, _mu, _a0, _a1, _a2, _a3, _a4, _a5, _b0, _b1, _b2, _b3, _b4, _b5, _cx)
  def _hyb_gga_x_sogga11_x_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_x_sogga11_x.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _hyb_gga_x_sogga11_x_epsilon_xc

def hyb_gga_xc_hse03(
  polarized: bool = True,
  _beta: Optional[float] = None,
  _omega_HF: Optional[float] = None,
  _omega_PBE: Optional[float] = None,
) -> Callable:
  r"""
  J. Heyd, G. E. Scuseria, and M. Ernzerhof.,  J. Chem. Phys. 118, 8207 (2003)
  `10.1063/1.1564060 <http://scitation.aip.org/content/aip/journal/jcp/118/18/10.1063/1.1564060>`_

  J. Heyd, G. E. Scuseria, and M. Ernzerhof.,  J. Chem. Phys. 124, 219906 (2006)
  `10.1063/1.2204597 <http://scitation.aip.org/content/aip/journal/jcp/124/21/10.1063/1.2204597>`_

  
  Mixing of the following functionals:
    gga_x_wpbeh (coefficient: 1.0)
    gga_x_wpbeh (coefficient: -0.25)
    gga_c_pbe (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _beta : Optional[float], default: 0.25
    Mixing parameter
  _omega_HF : Optional[float], default: 0.10606601717798213
    Screening parameter for HF
  _omega_PBE : Optional[float], default: 0.18898815748423098
    Screening parameter for PBE
  """
  _beta = (_beta or 0.25)
  _omega_HF = (_omega_HF or 0.10606601717798213)
  _omega_PBE = (_omega_PBE or 0.18898815748423098)
  p = get_p("hyb_gga_xc_hse03", polarized, _beta, _omega_HF, _omega_PBE)
  def _hyb_gga_xc_hse03_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_hse03.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_hse03_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_hse03_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_hse03_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_hse03_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_hse03_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_hse03_epsilon_xc

def hyb_gga_xc_hse06(
  polarized: bool = True,
  _beta: Optional[float] = None,
  _omega_HF: Optional[float] = None,
  _omega_PBE: Optional[float] = None,
) -> Callable:
  r"""
  J. Heyd, G. E. Scuseria, and M. Ernzerhof.,  J. Chem. Phys. 118, 8207 (2003)
  `10.1063/1.1564060 <http://scitation.aip.org/content/aip/journal/jcp/118/18/10.1063/1.1564060>`_

  J. Heyd, G. E. Scuseria, and M. Ernzerhof.,  J. Chem. Phys. 124, 219906 (2006)
  `10.1063/1.2204597 <http://scitation.aip.org/content/aip/journal/jcp/124/21/10.1063/1.2204597>`_

  A. V. Krukau, O. A. Vydrov, A. F. Izmaylov, and G. E. Scuseria.,  J. Chem. Phys. 125, 224106 (2006)
  `10.1063/1.2404663 <http://scitation.aip.org/content/aip/journal/jcp/125/22/10.1063/1.2404663>`_

  
  Mixing of the following functionals:
    gga_x_wpbeh (coefficient: 1.0)
    gga_x_wpbeh (coefficient: -0.25)
    gga_c_pbe (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _beta : Optional[float], default: 0.25
    Mixing parameter
  _omega_HF : Optional[float], default: 0.11
    Screening parameter for HF
  _omega_PBE : Optional[float], default: 0.11
    Screening parameter for PBE
  """
  _beta = (_beta or 0.25)
  _omega_HF = (_omega_HF or 0.11)
  _omega_PBE = (_omega_PBE or 0.11)
  p = get_p("hyb_gga_xc_hse06", polarized, _beta, _omega_HF, _omega_PBE)
  def _hyb_gga_xc_hse06_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_hse06.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_hse06_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_hse06_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_hse06_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_hse06_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_hse06_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_hse06_epsilon_xc

def hyb_gga_xc_hjs_pbe(
  polarized: bool = True,
) -> Callable:
  r"""
  T. M. Henderson, B. G. Janesko, and G. E. Scuseria.,  J. Chem. Phys. 128, 194105 (2008)
  `10.1063/1.2921797 <http://scitation.aip.org/content/aip/journal/jcp/128/19/10.1063/1.2921797>`_

  
  Mixing of the following functionals:
    gga_x_hjs_pbe (coefficient: 1.0)
    gga_x_hjs_pbe (coefficient: -0.25)
    gga_c_pbe (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("hyb_gga_xc_hjs_pbe", polarized, )
  def _hyb_gga_xc_hjs_pbe_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_hjs_pbe.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_hjs_pbe_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_hjs_pbe_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_hjs_pbe_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_hjs_pbe_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_hjs_pbe_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_hjs_pbe_epsilon_xc

def hyb_gga_xc_hjs_pbe_sol(
  polarized: bool = True,
) -> Callable:
  r"""
  T. M. Henderson, B. G. Janesko, and G. E. Scuseria.,  J. Chem. Phys. 128, 194105 (2008)
  `10.1063/1.2921797 <http://scitation.aip.org/content/aip/journal/jcp/128/19/10.1063/1.2921797>`_

  
  Mixing of the following functionals:
    gga_x_hjs_pbe_sol (coefficient: 1.0)
    gga_x_hjs_pbe_sol (coefficient: -0.25)
    gga_c_pbe (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("hyb_gga_xc_hjs_pbe_sol", polarized, )
  def _hyb_gga_xc_hjs_pbe_sol_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_hjs_pbe_sol.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_hjs_pbe_sol_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_hjs_pbe_sol_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_hjs_pbe_sol_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_hjs_pbe_sol_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_hjs_pbe_sol_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_hjs_pbe_sol_epsilon_xc

def hyb_gga_xc_hjs_b88(
  polarized: bool = True,
) -> Callable:
  r"""
  T. M. Henderson, B. G. Janesko, and G. E. Scuseria.,  J. Chem. Phys. 128, 194105 (2008)
  `10.1063/1.2921797 <http://scitation.aip.org/content/aip/journal/jcp/128/19/10.1063/1.2921797>`_

  
  Mixing of the following functionals:
    gga_x_hjs_b88 (coefficient: 1.0)
    gga_x_hjs_b88 (coefficient: -0.25)
    gga_c_pbe (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("hyb_gga_xc_hjs_b88", polarized, )
  def _hyb_gga_xc_hjs_b88_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_hjs_b88.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_hjs_b88_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_hjs_b88_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_hjs_b88_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_hjs_b88_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_hjs_b88_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_hjs_b88_epsilon_xc

def hyb_gga_xc_hjs_b97x(
  polarized: bool = True,
) -> Callable:
  r"""
  T. M. Henderson, B. G. Janesko, and G. E. Scuseria.,  J. Chem. Phys. 128, 194105 (2008)
  `10.1063/1.2921797 <http://scitation.aip.org/content/aip/journal/jcp/128/19/10.1063/1.2921797>`_

  
  Mixing of the following functionals:
    gga_x_hjs_b97x (coefficient: 1.0)
    gga_x_hjs_b97x (coefficient: -0.25)
    gga_c_pbe (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("hyb_gga_xc_hjs_b97x", polarized, )
  def _hyb_gga_xc_hjs_b97x_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_hjs_b97x.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_hjs_b97x_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_hjs_b97x_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_hjs_b97x_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_hjs_b97x_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_hjs_b97x_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_hjs_b97x_epsilon_xc

def hyb_gga_xc_cam_b3lyp(
  polarized: bool = True,
  _alpha: Optional[float] = None,
  _beta: Optional[float] = None,
  _omega: Optional[float] = None,
  _ac: Optional[float] = None,
) -> Callable:
  r"""
  T. Yanai, D. P. Tew, and N. C. Handy.,  Chem. Phys. Lett. 393, 51 (2004)
  `10.1016/j.cplett.2004.06.011 <http://www.sciencedirect.com/science/article/pii/S0009261404008620>`_

  
  Mixing of the following functionals:
    gga_x_b88 (coefficient: 0.35)
    gga_x_ityh (coefficient: 0.46)
    lda_c_vwn (coefficient: 0.18999999999999995)
    gga_c_lyp (coefficient: 0.81)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _alpha : Optional[float], default: 0.65
    Fraction of Hartree-Fock exchange
  _beta : Optional[float], default: -0.46
    Fraction of short-range exact exchange
  _omega : Optional[float], default: 0.33
    Range separation parameter
  _ac : Optional[float], default: 0.81
    Fraction of LYP correlation
  """
  _alpha = (_alpha or 0.65)
  _beta = (_beta or -0.46)
  _omega = (_omega or 0.33)
  _ac = (_ac or 0.81)
  p = get_p("hyb_gga_xc_cam_b3lyp", polarized, _alpha, _beta, _omega, _ac)
  def _hyb_gga_xc_cam_b3lyp_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_cam_b3lyp.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_cam_b3lyp_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_cam_b3lyp_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_cam_b3lyp_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_cam_b3lyp_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_cam_b3lyp_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_cam_b3lyp_epsilon_xc

def hyb_gga_xc_tuned_cam_b3lyp(
  polarized: bool = True,
  _alpha: Optional[float] = None,
  _beta: Optional[float] = None,
  _omega: Optional[float] = None,
  _ac: Optional[float] = None,
) -> Callable:
  r"""
  K. Okuno, Y. Shigeta, R. Kishi, H. Miyasaka, and M. Nakano.,  J. Photochem. Photobiol., A 235, 29 (2012)
  `10.1016/j.jphotochem.2012.03.003 <http://www.sciencedirect.com/science/article/pii/S101060301200130X>`_

  
  Mixing of the following functionals:
    gga_x_b88 (coefficient: 0.0)
    gga_x_ityh (coefficient: 0.9201)
    lda_c_vwn (coefficient: 0.18999999999999995)
    gga_c_lyp (coefficient: 0.81)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _alpha : Optional[float], default: 1.0
    Fraction of Hartree-Fock exchange
  _beta : Optional[float], default: -0.9201
    Fraction of short-range exact exchange
  _omega : Optional[float], default: 0.15
    Range separation parameter
  _ac : Optional[float], default: 0.81
    Fraction of LYP correlation
  """
  _alpha = (_alpha or 1.0)
  _beta = (_beta or -0.9201)
  _omega = (_omega or 0.15)
  _ac = (_ac or 0.81)
  p = get_p("hyb_gga_xc_tuned_cam_b3lyp", polarized, _alpha, _beta, _omega, _ac)
  def _hyb_gga_xc_tuned_cam_b3lyp_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_tuned_cam_b3lyp.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_tuned_cam_b3lyp_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_tuned_cam_b3lyp_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_tuned_cam_b3lyp_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_tuned_cam_b3lyp_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_tuned_cam_b3lyp_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_tuned_cam_b3lyp_epsilon_xc

def hyb_gga_xc_bhandh(
  polarized: bool = True,
  _cx: Optional[float] = None,
) -> Callable:
  r"""
  A. D. Becke.,  J. Chem. Phys. 98, 1372 (1993)
  `10.1063/1.464304 <http://scitation.aip.org/content/aip/journal/jcp/98/2/10.1063/1.464304>`_

  Defined through Gaussian implementation.
  

  
  Mixing of the following functionals:
    lda_x (coefficient: 0.5)
    gga_c_lyp (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _cx : Optional[float], default: 0.5
    Fraction of exact exchange
  """
  _cx = (_cx or 0.5)
  p = get_p("hyb_gga_xc_bhandh", polarized, _cx)
  def _hyb_gga_xc_bhandh_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_bhandh.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_bhandh_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_bhandh_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_bhandh_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_bhandh_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_bhandh_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_bhandh_epsilon_xc

def hyb_gga_xc_bhandhlyp(
  polarized: bool = True,
  _cx: Optional[float] = None,
) -> Callable:
  r"""
  A. D. Becke.,  J. Chem. Phys. 98, 1372 (1993)
  `10.1063/1.464304 <http://scitation.aip.org/content/aip/journal/jcp/98/2/10.1063/1.464304>`_

  Defined through Gaussian implementation.
  

  
  Mixing of the following functionals:
    gga_x_b88 (coefficient: 0.5)
    gga_c_lyp (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _cx : Optional[float], default: 0.5
    Fraction of exact exchange
  """
  _cx = (_cx or 0.5)
  p = get_p("hyb_gga_xc_bhandhlyp", polarized, _cx)
  def _hyb_gga_xc_bhandhlyp_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_bhandhlyp.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_bhandhlyp_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_bhandhlyp_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_bhandhlyp_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_bhandhlyp_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_bhandhlyp_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_bhandhlyp_epsilon_xc

def hyb_gga_xc_mb3lyp_rc04(
  polarized: bool = True,
  _a0: Optional[float] = None,
  _ax: Optional[float] = None,
  _ac: Optional[float] = None,
  _d: Optional[float] = None,
) -> Callable:
  r"""
  V. Tognetti, P. Cortona, and C. Adamo.,  Chem. Phys. Lett. 439, 381 (2007)
  `10.1016/j.cplett.2007.03.081 <http://www.sciencedirect.com/science/article/pii/S0009261407003600>`_

  
  Mixing of the following functionals:
    lda_x (coefficient: 0.08000000000000007)
    gga_x_b88 (coefficient: 0.72)
    lda_c_rc04 (coefficient: 0.5383)
    gga_c_lyp (coefficient: 0.81)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a0 : Optional[float], default: 0.2
    Fraction of exact exchange
  _ax : Optional[float], default: 0.72
    Fraction of GGA exchange correction
  _ac : Optional[float], default: 0.81
    Fraction of GGA correlation correction
  _d : Optional[float], default: 0.57
    Correction factor for RC04 part
  """
  _a0 = (_a0 or 0.2)
  _ax = (_ax or 0.72)
  _ac = (_ac or 0.81)
  _d = (_d or 0.57)
  p = get_p("hyb_gga_xc_mb3lyp_rc04", polarized, _a0, _ax, _ac, _d)
  def _hyb_gga_xc_mb3lyp_rc04_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_mb3lyp_rc04.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_mb3lyp_rc04_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_mb3lyp_rc04_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_mb3lyp_rc04_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_mb3lyp_rc04_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_mb3lyp_rc04_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_mb3lyp_rc04_epsilon_xc

def hyb_mgga_x_m05(
  polarized: bool = True,
  _a0: Optional[float] = None,
  _a1: Optional[float] = None,
  _a2: Optional[float] = None,
  _a3: Optional[float] = None,
  _a4: Optional[float] = None,
  _a5: Optional[float] = None,
  _a6: Optional[float] = None,
  _a7: Optional[float] = None,
  _a8: Optional[float] = None,
  _a9: Optional[float] = None,
  _a10: Optional[float] = None,
  _a11: Optional[float] = None,
  _csi_HF: Optional[float] = None,
  _cx: Optional[float] = None,
) -> Callable:
  r"""
  Y. Zhao, N. E. Schultz, and D. G. Truhlar.,  J. Chem. Phys. 123, 161103 (2005)
  `10.1063/1.2126975 <http://scitation.aip.org/content/aip/journal/jcp/123/16/10.1063/1.2126975>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a0 : Optional[float], default: 1.0
    a0 parameter
  _a1 : Optional[float], default: 0.08151
    a1 parameter
  _a2 : Optional[float], default: -0.43956
    a2 parameter
  _a3 : Optional[float], default: -3.22422
    a3 parameter
  _a4 : Optional[float], default: 2.01819
    a4 parameter
  _a5 : Optional[float], default: 8.79431
    a5 parameter
  _a6 : Optional[float], default: -0.00295
    a6 parameter
  _a7 : Optional[float], default: 9.82029
    a7 parameter
  _a8 : Optional[float], default: -4.82351
    a8 parameter
  _a9 : Optional[float], default: -48.17574
    a9 parameter
  _a10 : Optional[float], default: 3.64802
    a10 parameter
  _a11 : Optional[float], default: 34.02248
    a11 parameter
  _csi_HF : Optional[float], default: 0.72
    overall scaling for DFT part
  _cx : Optional[float], default: 0.28
    fraction of exact exchange
  """
  _a0 = (_a0 or 1.0)
  _a1 = (_a1 or 0.08151)
  _a2 = (_a2 or -0.43956)
  _a3 = (_a3 or -3.22422)
  _a4 = (_a4 or 2.01819)
  _a5 = (_a5 or 8.79431)
  _a6 = (_a6 or -0.00295)
  _a7 = (_a7 or 9.82029)
  _a8 = (_a8 or -4.82351)
  _a9 = (_a9 or -48.17574)
  _a10 = (_a10 or 3.64802)
  _a11 = (_a11 or 34.02248)
  _csi_HF = (_csi_HF or 0.72)
  _cx = (_cx or 0.28)
  p = get_p("hyb_mgga_x_m05", polarized, _a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8, _a9, _a10, _a11, _csi_HF, _cx)
  def _hyb_mgga_x_m05_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_mgga_x_m05.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _hyb_mgga_x_m05_epsilon_xc

def hyb_mgga_x_m05_2x(
  polarized: bool = True,
  _a0: Optional[float] = None,
  _a1: Optional[float] = None,
  _a2: Optional[float] = None,
  _a3: Optional[float] = None,
  _a4: Optional[float] = None,
  _a5: Optional[float] = None,
  _a6: Optional[float] = None,
  _a7: Optional[float] = None,
  _a8: Optional[float] = None,
  _a9: Optional[float] = None,
  _a10: Optional[float] = None,
  _a11: Optional[float] = None,
  _csi_HF: Optional[float] = None,
  _cx: Optional[float] = None,
) -> Callable:
  r"""
  Y. Zhao, N. E. Schultz, and D. G. Truhlar.,  J. Chem. Theory Comput. 2, 364 (2006)
  `10.1021/ct0502763 <http://pubs.acs.org/doi/abs/10.1021/ct0502763>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a0 : Optional[float], default: 1.0
    a0 parameter
  _a1 : Optional[float], default: -0.56833
    a1 parameter
  _a2 : Optional[float], default: -1.30057
    a2 parameter
  _a3 : Optional[float], default: 5.5007
    a3 parameter
  _a4 : Optional[float], default: 9.06402
    a4 parameter
  _a5 : Optional[float], default: -32.21075
    a5 parameter
  _a6 : Optional[float], default: -23.73298
    a6 parameter
  _a7 : Optional[float], default: 70.22996
    a7 parameter
  _a8 : Optional[float], default: 29.88614
    a8 parameter
  _a9 : Optional[float], default: -60.25778
    a9 parameter
  _a10 : Optional[float], default: -13.22205
    a10 parameter
  _a11 : Optional[float], default: 15.23694
    a11 parameter
  _csi_HF : Optional[float], default: 0.43999999999999995
    overall scaling for DFT part
  _cx : Optional[float], default: 0.56
    fraction of exact exchange
  """
  _a0 = (_a0 or 1.0)
  _a1 = (_a1 or -0.56833)
  _a2 = (_a2 or -1.30057)
  _a3 = (_a3 or 5.5007)
  _a4 = (_a4 or 9.06402)
  _a5 = (_a5 or -32.21075)
  _a6 = (_a6 or -23.73298)
  _a7 = (_a7 or 70.22996)
  _a8 = (_a8 or 29.88614)
  _a9 = (_a9 or -60.25778)
  _a10 = (_a10 or -13.22205)
  _a11 = (_a11 or 15.23694)
  _csi_HF = (_csi_HF or 0.43999999999999995)
  _cx = (_cx or 0.56)
  p = get_p("hyb_mgga_x_m05_2x", polarized, _a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8, _a9, _a10, _a11, _csi_HF, _cx)
  def _hyb_mgga_x_m05_2x_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_mgga_x_m05_2x.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _hyb_mgga_x_m05_2x_epsilon_xc

def hyb_mgga_xc_b88b95(
  polarized: bool = True,
) -> Callable:
  r"""
  A. D. Becke.,  J. Chem. Phys. 104, 1040 (1996)
  `10.1063/1.470829 <http://scitation.aip.org/content/aip/journal/jcp/104/3/10.1063/1.470829>`_

  
  Mixing of the following functionals:
    gga_x_b88 (coefficient: 0.72)
    mgga_c_bc95 (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("hyb_mgga_xc_b88b95", polarized, )
  def _hyb_mgga_xc_b88b95_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_mgga_xc_b88b95.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  
  _hyb_mgga_xc_b88b95_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_mgga_xc_b88b95_epsilon_xc.cam_beta = p.cam_beta
  _hyb_mgga_xc_b88b95_epsilon_xc.cam_omega = p.cam_omega
  _hyb_mgga_xc_b88b95_epsilon_xc.nlc_b = p.nlc_b
  _hyb_mgga_xc_b88b95_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_mgga_xc_b88b95_epsilon_xc

def hyb_mgga_xc_b86b95(
  polarized: bool = True,
) -> Callable:
  r"""
  A. D. Becke.,  J. Chem. Phys. 104, 1040 (1996)
  `10.1063/1.470829 <http://scitation.aip.org/content/aip/journal/jcp/104/3/10.1063/1.470829>`_

  
  Mixing of the following functionals:
    gga_x_b86 (coefficient: 0.72)
    mgga_c_bc95 (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("hyb_mgga_xc_b86b95", polarized, )
  def _hyb_mgga_xc_b86b95_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_mgga_xc_b86b95.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  
  _hyb_mgga_xc_b86b95_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_mgga_xc_b86b95_epsilon_xc.cam_beta = p.cam_beta
  _hyb_mgga_xc_b86b95_epsilon_xc.cam_omega = p.cam_omega
  _hyb_mgga_xc_b86b95_epsilon_xc.nlc_b = p.nlc_b
  _hyb_mgga_xc_b86b95_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_mgga_xc_b86b95_epsilon_xc

def hyb_mgga_xc_pw86b95(
  polarized: bool = True,
) -> Callable:
  r"""
  A. D. Becke.,  J. Chem. Phys. 104, 1040 (1996)
  `10.1063/1.470829 <http://scitation.aip.org/content/aip/journal/jcp/104/3/10.1063/1.470829>`_

  
  Mixing of the following functionals:
    gga_x_pw86 (coefficient: 0.71)
    mgga_c_bc95 (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("hyb_mgga_xc_pw86b95", polarized, )
  def _hyb_mgga_xc_pw86b95_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_mgga_xc_pw86b95.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  
  _hyb_mgga_xc_pw86b95_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_mgga_xc_pw86b95_epsilon_xc.cam_beta = p.cam_beta
  _hyb_mgga_xc_pw86b95_epsilon_xc.cam_omega = p.cam_omega
  _hyb_mgga_xc_pw86b95_epsilon_xc.nlc_b = p.nlc_b
  _hyb_mgga_xc_pw86b95_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_mgga_xc_pw86b95_epsilon_xc

def hyb_mgga_xc_bb1k(
  polarized: bool = True,
) -> Callable:
  r"""
  Y. Zhao, B. J. Lynch, and D. G. Truhlar.,  J. Phys. Chem. A 108, 2715 (2004)
  `10.1021/jp049908s <http://pubs.acs.org/doi/abs/10.1021/jp049908s>`_

  
  Mixing of the following functionals:
    gga_x_b88 (coefficient: 0.5800000000000001)
    mgga_c_bc95 (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("hyb_mgga_xc_bb1k", polarized, )
  def _hyb_mgga_xc_bb1k_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_mgga_xc_bb1k.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  
  _hyb_mgga_xc_bb1k_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_mgga_xc_bb1k_epsilon_xc.cam_beta = p.cam_beta
  _hyb_mgga_xc_bb1k_epsilon_xc.cam_omega = p.cam_omega
  _hyb_mgga_xc_bb1k_epsilon_xc.nlc_b = p.nlc_b
  _hyb_mgga_xc_bb1k_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_mgga_xc_bb1k_epsilon_xc

def hyb_mgga_x_m06_hf(
  polarized: bool = True,
  _a0: Optional[float] = None,
  _a1: Optional[float] = None,
  _a2: Optional[float] = None,
  _a3: Optional[float] = None,
  _a4: Optional[float] = None,
  _a5: Optional[float] = None,
  _a6: Optional[float] = None,
  _a7: Optional[float] = None,
  _a8: Optional[float] = None,
  _a9: Optional[float] = None,
  _a10: Optional[float] = None,
  _a11: Optional[float] = None,
  _d0: Optional[float] = None,
  _d1: Optional[float] = None,
  _d2: Optional[float] = None,
  _d3: Optional[float] = None,
  _d4: Optional[float] = None,
  _d5: Optional[float] = None,
  _X: Optional[float] = None,
) -> Callable:
  r"""
  Y. Zhao and D. G. Truhlar.,  J. Phys. Chem. A 110, 13126 (2006)
  `10.1021/jp066479k <http://pubs.acs.org/doi/abs/10.1021/jp066479k>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a0 : Optional[float], default: 0.1179732
    _a0 parameter
  _a1 : Optional[float], default: -1.066708
    _a1 parameter
  _a2 : Optional[float], default: -0.1462405
    _a2 parameter
  _a3 : Optional[float], default: 7.481848
    _a3 parameter
  _a4 : Optional[float], default: 3.776679
    _a4 parameter
  _a5 : Optional[float], default: -44.36118
    _a5 parameter
  _a6 : Optional[float], default: -18.30962
    _a6 parameter
  _a7 : Optional[float], default: 100.3903
    _a7 parameter
  _a8 : Optional[float], default: 38.6436
    _a8 parameter
  _a9 : Optional[float], default: -98.06018
    _a9 parameter
  _a10 : Optional[float], default: -25.57716
    _a10 parameter
  _a11 : Optional[float], default: 35.90404
    _a11 parameter
  _d0 : Optional[float], default: -0.1179732
    _d0 parameter
  _d1 : Optional[float], default: -0.0025
    _d1 parameter
  _d2 : Optional[float], default: -0.01180065
    _d2 parameter
  _d3 : Optional[float], default: 0.0
    _d3 parameter
  _d4 : Optional[float], default: 0.0
    _d4 parameter
  _d5 : Optional[float], default: 0.0
    _d5 parameter
  _X : Optional[float], default: 1.0
    Fraction of exact exchange
  """
  _a0 = (_a0 or 0.1179732)
  _a1 = (_a1 or -1.066708)
  _a2 = (_a2 or -0.1462405)
  _a3 = (_a3 or 7.481848)
  _a4 = (_a4 or 3.776679)
  _a5 = (_a5 or -44.36118)
  _a6 = (_a6 or -18.30962)
  _a7 = (_a7 or 100.3903)
  _a8 = (_a8 or 38.6436)
  _a9 = (_a9 or -98.06018)
  _a10 = (_a10 or -25.57716)
  _a11 = (_a11 or 35.90404)
  _d0 = (_d0 or -0.1179732)
  _d1 = (_d1 or -0.0025)
  _d2 = (_d2 or -0.01180065)
  _d3 = (_d3 or 0.0)
  _d4 = (_d4 or 0.0)
  _d5 = (_d5 or 0.0)
  _X = (_X or 1.0)
  p = get_p("hyb_mgga_x_m06_hf", polarized, _a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8, _a9, _a10, _a11, _d0, _d1, _d2, _d3, _d4, _d5, _X)
  def _hyb_mgga_x_m06_hf_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_mgga_x_m06_hf.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _hyb_mgga_x_m06_hf_epsilon_xc

def hyb_mgga_xc_mpw1b95(
  polarized: bool = True,
) -> Callable:
  r"""
  Y. Zhao and D. G. Truhlar.,  J. Phys. Chem. A 108, 6908 (2004)
  `10.1021/jp048147q <http://pubs.acs.org/doi/abs/10.1021/jp048147q>`_

  
  Mixing of the following functionals:
    gga_x_mpw91 (coefficient: 0.69)
    mgga_c_bc95 (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("hyb_mgga_xc_mpw1b95", polarized, )
  def _hyb_mgga_xc_mpw1b95_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_mgga_xc_mpw1b95.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  
  _hyb_mgga_xc_mpw1b95_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_mgga_xc_mpw1b95_epsilon_xc.cam_beta = p.cam_beta
  _hyb_mgga_xc_mpw1b95_epsilon_xc.cam_omega = p.cam_omega
  _hyb_mgga_xc_mpw1b95_epsilon_xc.nlc_b = p.nlc_b
  _hyb_mgga_xc_mpw1b95_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_mgga_xc_mpw1b95_epsilon_xc

def hyb_mgga_xc_mpwb1k(
  polarized: bool = True,
) -> Callable:
  r"""
  Y. Zhao and D. G. Truhlar.,  J. Phys. Chem. A 108, 6908 (2004)
  `10.1021/jp048147q <http://pubs.acs.org/doi/abs/10.1021/jp048147q>`_

  
  Mixing of the following functionals:
    gga_x_mpw91 (coefficient: 0.56)
    mgga_c_bc95 (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("hyb_mgga_xc_mpwb1k", polarized, )
  def _hyb_mgga_xc_mpwb1k_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_mgga_xc_mpwb1k.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  
  _hyb_mgga_xc_mpwb1k_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_mgga_xc_mpwb1k_epsilon_xc.cam_beta = p.cam_beta
  _hyb_mgga_xc_mpwb1k_epsilon_xc.cam_omega = p.cam_omega
  _hyb_mgga_xc_mpwb1k_epsilon_xc.nlc_b = p.nlc_b
  _hyb_mgga_xc_mpwb1k_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_mgga_xc_mpwb1k_epsilon_xc

def hyb_mgga_xc_x1b95(
  polarized: bool = True,
) -> Callable:
  r"""
  Y. Zhao and D. G. Truhlar.,  J. Phys. Chem. A 108, 6908 (2004)
  `10.1021/jp048147q <http://pubs.acs.org/doi/abs/10.1021/jp048147q>`_

  
  Mixing of the following functionals:
    gga_x_b88 (coefficient: 0.2025)
    gga_x_pw91 (coefficient: 0.0705)
    mgga_c_bc95 (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("hyb_mgga_xc_x1b95", polarized, )
  def _hyb_mgga_xc_x1b95_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_mgga_xc_x1b95.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  
  _hyb_mgga_xc_x1b95_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_mgga_xc_x1b95_epsilon_xc.cam_beta = p.cam_beta
  _hyb_mgga_xc_x1b95_epsilon_xc.cam_omega = p.cam_omega
  _hyb_mgga_xc_x1b95_epsilon_xc.nlc_b = p.nlc_b
  _hyb_mgga_xc_x1b95_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_mgga_xc_x1b95_epsilon_xc

def hyb_mgga_xc_xb1k(
  polarized: bool = True,
) -> Callable:
  r"""
  Y. Zhao and D. G. Truhlar.,  J. Phys. Chem. A 108, 6908 (2004)
  `10.1021/jp048147q <http://pubs.acs.org/doi/abs/10.1021/jp048147q>`_

  
  Mixing of the following functionals:
    gga_x_b88 (coefficient: 0.29025)
    gga_x_pw91 (coefficient: 0.10104999999999999)
    mgga_c_bc95 (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("hyb_mgga_xc_xb1k", polarized, )
  def _hyb_mgga_xc_xb1k_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_mgga_xc_xb1k.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  
  _hyb_mgga_xc_xb1k_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_mgga_xc_xb1k_epsilon_xc.cam_beta = p.cam_beta
  _hyb_mgga_xc_xb1k_epsilon_xc.cam_omega = p.cam_omega
  _hyb_mgga_xc_xb1k_epsilon_xc.nlc_b = p.nlc_b
  _hyb_mgga_xc_xb1k_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_mgga_xc_xb1k_epsilon_xc

def hyb_mgga_x_m06(
  polarized: bool = True,
  _a0: Optional[float] = None,
  _a1: Optional[float] = None,
  _a2: Optional[float] = None,
  _a3: Optional[float] = None,
  _a4: Optional[float] = None,
  _a5: Optional[float] = None,
  _a6: Optional[float] = None,
  _a7: Optional[float] = None,
  _a8: Optional[float] = None,
  _a9: Optional[float] = None,
  _a10: Optional[float] = None,
  _a11: Optional[float] = None,
  _d0: Optional[float] = None,
  _d1: Optional[float] = None,
  _d2: Optional[float] = None,
  _d3: Optional[float] = None,
  _d4: Optional[float] = None,
  _d5: Optional[float] = None,
  _X: Optional[float] = None,
) -> Callable:
  r"""
  Y. Zhao and D. G. Truhlar.,  Theor. Chem. Acc. 120, 215 (2008)
  `10.1007/s00214-007-0310-x <http://link.springer.com/article/10.1007\%2Fs00214-007-0310-x>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a0 : Optional[float], default: 0.5877943
    _a0 parameter
  _a1 : Optional[float], default: -0.1371776
    _a1 parameter
  _a2 : Optional[float], default: 0.2682367
    _a2 parameter
  _a3 : Optional[float], default: -2.515898
    _a3 parameter
  _a4 : Optional[float], default: -2.978892
    _a4 parameter
  _a5 : Optional[float], default: 8.710679
    _a5 parameter
  _a6 : Optional[float], default: 16.88195
    _a6 parameter
  _a7 : Optional[float], default: -4.489724
    _a7 parameter
  _a8 : Optional[float], default: -32.99983
    _a8 parameter
  _a9 : Optional[float], default: -14.4905
    _a9 parameter
  _a10 : Optional[float], default: 20.43747
    _a10 parameter
  _a11 : Optional[float], default: 12.56504
    _a11 parameter
  _d0 : Optional[float], default: 0.1422057
    _d0 parameter
  _d1 : Optional[float], default: 0.0007370319
    _d1 parameter
  _d2 : Optional[float], default: -0.01601373
    _d2 parameter
  _d3 : Optional[float], default: 0.0
    _d3 parameter
  _d4 : Optional[float], default: 0.0
    _d4 parameter
  _d5 : Optional[float], default: 0.0
    _d5 parameter
  _X : Optional[float], default: 0.27
    Fraction of exact exchange
  """
  _a0 = (_a0 or 0.5877943)
  _a1 = (_a1 or -0.1371776)
  _a2 = (_a2 or 0.2682367)
  _a3 = (_a3 or -2.515898)
  _a4 = (_a4 or -2.978892)
  _a5 = (_a5 or 8.710679)
  _a6 = (_a6 or 16.88195)
  _a7 = (_a7 or -4.489724)
  _a8 = (_a8 or -32.99983)
  _a9 = (_a9 or -14.4905)
  _a10 = (_a10 or 20.43747)
  _a11 = (_a11 or 12.56504)
  _d0 = (_d0 or 0.1422057)
  _d1 = (_d1 or 0.0007370319)
  _d2 = (_d2 or -0.01601373)
  _d3 = (_d3 or 0.0)
  _d4 = (_d4 or 0.0)
  _d5 = (_d5 or 0.0)
  _X = (_X or 0.27)
  p = get_p("hyb_mgga_x_m06", polarized, _a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8, _a9, _a10, _a11, _d0, _d1, _d2, _d3, _d4, _d5, _X)
  def _hyb_mgga_x_m06_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_mgga_x_m06.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _hyb_mgga_x_m06_epsilon_xc

def hyb_mgga_x_m06_2x(
  polarized: bool = True,
  _a0: Optional[float] = None,
  _a1: Optional[float] = None,
  _a2: Optional[float] = None,
  _a3: Optional[float] = None,
  _a4: Optional[float] = None,
  _a5: Optional[float] = None,
  _a6: Optional[float] = None,
  _a7: Optional[float] = None,
  _a8: Optional[float] = None,
  _a9: Optional[float] = None,
  _a10: Optional[float] = None,
  _a11: Optional[float] = None,
  _csi_HF: Optional[float] = None,
  _cx: Optional[float] = None,
) -> Callable:
  r"""
  Y. Zhao and D. G. Truhlar.,  Theor. Chem. Acc. 120, 215 (2008)
  `10.1007/s00214-007-0310-x <http://link.springer.com/article/10.1007\%2Fs00214-007-0310-x>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a0 : Optional[float], default: 0.46
    a0 parameter
  _a1 : Optional[float], default: -0.2206052
    a1 parameter
  _a2 : Optional[float], default: -0.09431788
    a2 parameter
  _a3 : Optional[float], default: 2.164494
    a3 parameter
  _a4 : Optional[float], default: -2.556466
    a4 parameter
  _a5 : Optional[float], default: -14.22133
    a5 parameter
  _a6 : Optional[float], default: 15.55044
    a6 parameter
  _a7 : Optional[float], default: 35.98078
    a7 parameter
  _a8 : Optional[float], default: -27.22754
    a8 parameter
  _a9 : Optional[float], default: -39.24093
    a9 parameter
  _a10 : Optional[float], default: 15.22808
    a10 parameter
  _a11 : Optional[float], default: 15.22227
    a11 parameter
  _csi_HF : Optional[float], default: 1.0
    overall scaling for DFT part
  _cx : Optional[float], default: 0.54
    fraction of exact exchange
  """
  _a0 = (_a0 or 0.46)
  _a1 = (_a1 or -0.2206052)
  _a2 = (_a2 or -0.09431788)
  _a3 = (_a3 or 2.164494)
  _a4 = (_a4 or -2.556466)
  _a5 = (_a5 or -14.22133)
  _a6 = (_a6 or 15.55044)
  _a7 = (_a7 or 35.98078)
  _a8 = (_a8 or -27.22754)
  _a9 = (_a9 or -39.24093)
  _a10 = (_a10 or 15.22808)
  _a11 = (_a11 or 15.22227)
  _csi_HF = (_csi_HF or 1.0)
  _cx = (_cx or 0.54)
  p = get_p("hyb_mgga_x_m06_2x", polarized, _a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8, _a9, _a10, _a11, _csi_HF, _cx)
  def _hyb_mgga_x_m06_2x_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_mgga_x_m06_2x.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _hyb_mgga_x_m06_2x_epsilon_xc

def hyb_mgga_xc_pw6b95(
  polarized: bool = True,
) -> Callable:
  r"""
  Y. Zhao and D. G. Truhlar.,  J. Phys. Chem. A 109, 5656 (2005)
  `10.1021/jp050536c <http://pubs.acs.org/doi/abs/10.1021/jp050536c>`_

  
  Mixing of the following functionals:
    gga_x_mpw91 (coefficient: 0.72)
    mgga_c_bc95 (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("hyb_mgga_xc_pw6b95", polarized, )
  def _hyb_mgga_xc_pw6b95_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_mgga_xc_pw6b95.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  
  _hyb_mgga_xc_pw6b95_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_mgga_xc_pw6b95_epsilon_xc.cam_beta = p.cam_beta
  _hyb_mgga_xc_pw6b95_epsilon_xc.cam_omega = p.cam_omega
  _hyb_mgga_xc_pw6b95_epsilon_xc.nlc_b = p.nlc_b
  _hyb_mgga_xc_pw6b95_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_mgga_xc_pw6b95_epsilon_xc

def hyb_mgga_xc_pwb6k(
  polarized: bool = True,
) -> Callable:
  r"""
  Y. Zhao and D. G. Truhlar.,  J. Phys. Chem. A 109, 5656 (2005)
  `10.1021/jp050536c <http://pubs.acs.org/doi/abs/10.1021/jp050536c>`_

  
  Mixing of the following functionals:
    gga_x_mpw91 (coefficient: 0.54)
    mgga_c_bc95 (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("hyb_mgga_xc_pwb6k", polarized, )
  def _hyb_mgga_xc_pwb6k_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_mgga_xc_pwb6k.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  
  _hyb_mgga_xc_pwb6k_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_mgga_xc_pwb6k_epsilon_xc.cam_beta = p.cam_beta
  _hyb_mgga_xc_pwb6k_epsilon_xc.cam_omega = p.cam_omega
  _hyb_mgga_xc_pwb6k_epsilon_xc.nlc_b = p.nlc_b
  _hyb_mgga_xc_pwb6k_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_mgga_xc_pwb6k_epsilon_xc

def hyb_gga_xc_mpwlyp1m(
  polarized: bool = True,
  _cx: Optional[float] = None,
) -> Callable:
  r"""
  N. E. Schultz, Y. Zhao, and D. G. Truhlar.,  J. Phys. Chem. A 109, 11127 (2005)
  `10.1021/jp0539223 <http://pubs.acs.org/doi/abs/10.1021/jp0539223>`_

  
  Mixing of the following functionals:
    gga_x_mpw91 (coefficient: 0.95)
    gga_c_lyp (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _cx : Optional[float], default: 0.05
    Fraction of exact exchange
  """
  _cx = (_cx or 0.05)
  p = get_p("hyb_gga_xc_mpwlyp1m", polarized, _cx)
  def _hyb_gga_xc_mpwlyp1m_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_mpwlyp1m.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_mpwlyp1m_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_mpwlyp1m_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_mpwlyp1m_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_mpwlyp1m_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_mpwlyp1m_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_mpwlyp1m_epsilon_xc

def hyb_gga_xc_revb3lyp(
  polarized: bool = True,
  _a0: Optional[float] = None,
  _ax: Optional[float] = None,
  _ac: Optional[float] = None,
) -> Callable:
  r"""
  L. Lu, H. Hu, H. Hou, and B. Wang.,  Comput. Theor. Chem. 1015, 64 (2013)
  `10.1016/j.comptc.2013.04.009 <http://www.sciencedirect.com/science/article/pii/S2210271X13001576>`_

  
  Mixing of the following functionals:
    lda_x (coefficient: 0.13)
    gga_x_b88 (coefficient: 0.67)
    lda_c_vwn_rpa (coefficient: 0.16000000000000003)
    gga_c_lyp (coefficient: 0.84)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a0 : Optional[float], default: 0.2
    Fraction of exact exchange
  _ax : Optional[float], default: 0.67
    Fraction of GGA exchange correction
  _ac : Optional[float], default: 0.84
    Fraction of GGA correlation correction
  """
  _a0 = (_a0 or 0.2)
  _ax = (_ax or 0.67)
  _ac = (_ac or 0.84)
  p = get_p("hyb_gga_xc_revb3lyp", polarized, _a0, _ax, _ac)
  def _hyb_gga_xc_revb3lyp_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_revb3lyp.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_revb3lyp_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_revb3lyp_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_revb3lyp_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_revb3lyp_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_revb3lyp_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_revb3lyp_epsilon_xc

def hyb_gga_xc_camy_blyp(
  polarized: bool = True,
) -> Callable:
  r"""
  Y. Akinaga and S. Ten-no.,  Chem. Phys. Lett. 462, 348 (2008)
  `10.1016/j.cplett.2008.07.103 <http://www.sciencedirect.com/science/article/pii/S0009261408010609>`_

  
  Mixing of the following functionals:
    gga_x_b88 (coefficient: 0.0)
    gga_x_sfat (coefficient: 0.8)
    gga_c_lyp (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("hyb_gga_xc_camy_blyp", polarized, )
  def _hyb_gga_xc_camy_blyp_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_camy_blyp.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_camy_blyp_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_camy_blyp_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_camy_blyp_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_camy_blyp_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_camy_blyp_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_camy_blyp_epsilon_xc

def hyb_gga_xc_pbe0_13(
  polarized: bool = True,
  _beta: Optional[float] = None,
) -> Callable:
  r"""
  P. Cortona.,  J. Chem. Phys. 136, 086101 (2012)
  `10.1063/1.3690462 <http://scitation.aip.org/content/aip/journal/jcp/136/8/10.1063/1.3690462>`_

  
  Mixing of the following functionals:
    gga_x_pbe (coefficient: 0.6666666666666667)
    gga_c_pbe (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _beta : Optional[float], default: 0.3333333333333333
    Mixing parameter
  """
  _beta = (_beta or 0.3333333333333333)
  p = get_p("hyb_gga_xc_pbe0_13", polarized, _beta)
  def _hyb_gga_xc_pbe0_13_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_pbe0_13.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_pbe0_13_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_pbe0_13_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_pbe0_13_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_pbe0_13_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_pbe0_13_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_pbe0_13_epsilon_xc

def hyb_mgga_xc_tpssh(
  polarized: bool = True,
) -> Callable:
  r"""
  V. N. Staroverov, G. E. Scuseria, J. Tao, and J. P. Perdew.,  J. Chem. Phys. 119, 12129 (2003)
  `10.1063/1.1626543 <http://scitation.aip.org/content/aip/journal/jcp/119/23/10.1063/1.1626543>`_

  
  Mixing of the following functionals:
    mgga_x_tpss (coefficient: 0.9)
    mgga_c_tpss (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("hyb_mgga_xc_tpssh", polarized, )
  def _hyb_mgga_xc_tpssh_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_mgga_xc_tpssh.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  
  _hyb_mgga_xc_tpssh_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_mgga_xc_tpssh_epsilon_xc.cam_beta = p.cam_beta
  _hyb_mgga_xc_tpssh_epsilon_xc.cam_omega = p.cam_omega
  _hyb_mgga_xc_tpssh_epsilon_xc.nlc_b = p.nlc_b
  _hyb_mgga_xc_tpssh_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_mgga_xc_tpssh_epsilon_xc

def hyb_mgga_xc_revtpssh(
  polarized: bool = True,
) -> Callable:
  r"""
  G. I. Csonka, J. P. Perdew, and A. Ruzsinszky.,  J. Chem. Theory Comput. 6, 3688 (2010)
  `10.1021/ct100488v <http://pubs.acs.org/doi/abs/10.1021/ct100488v>`_

  
  Mixing of the following functionals:
    mgga_x_revtpss (coefficient: 0.9)
    mgga_c_revtpss (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("hyb_mgga_xc_revtpssh", polarized, )
  def _hyb_mgga_xc_revtpssh_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_mgga_xc_revtpssh.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  
  _hyb_mgga_xc_revtpssh_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_mgga_xc_revtpssh_epsilon_xc.cam_beta = p.cam_beta
  _hyb_mgga_xc_revtpssh_epsilon_xc.cam_omega = p.cam_omega
  _hyb_mgga_xc_revtpssh_epsilon_xc.nlc_b = p.nlc_b
  _hyb_mgga_xc_revtpssh_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_mgga_xc_revtpssh_epsilon_xc

def hyb_gga_xc_b3lyps(
  polarized: bool = True,
  _a0: Optional[float] = None,
  _ax: Optional[float] = None,
  _ac: Optional[float] = None,
) -> Callable:
  r"""
  M. Reiher, O. Salomon, and B. A. Hess.,  Theor. Chem. Acc. 107, 48-55 (2001)
  `10.1007/s00214-001-0300-3 <http://doi.org/10.1007/s00214-001-0300-3>`_

  
  Mixing of the following functionals:
    lda_x (coefficient: 0.13)
    gga_x_b88 (coefficient: 0.72)
    lda_c_vwn_rpa (coefficient: 0.18999999999999995)
    gga_c_lyp (coefficient: 0.81)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a0 : Optional[float], default: 0.15
    Fraction of exact exchange
  _ax : Optional[float], default: 0.72
    Fraction of GGA exchange correction
  _ac : Optional[float], default: 0.81
    Fraction of GGA correlation correction
  """
  _a0 = (_a0 or 0.15)
  _ax = (_ax or 0.72)
  _ac = (_ac or 0.81)
  p = get_p("hyb_gga_xc_b3lyps", polarized, _a0, _ax, _ac)
  def _hyb_gga_xc_b3lyps_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_b3lyps.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_b3lyps_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_b3lyps_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_b3lyps_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_b3lyps_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_b3lyps_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_b3lyps_epsilon_xc

def hyb_gga_xc_qtp17(
  polarized: bool = True,
  _a0: Optional[float] = None,
  _ac: Optional[float] = None,
) -> Callable:
  r"""
  Y. Jin and R. J. Bartlett.,  J. Chem. Phys. 149, 064111 (2018)
  `10.1063/1.5038434 <https://doi.org/10.1063/1.5038434>`_

  
  Mixing of the following functionals:
    lda_x (coefficient: 0.38)
    lda_c_vwn_rpa (coefficient: 0.19999999999999996)
    gga_c_lyp (coefficient: 0.8)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a0 : Optional[float], default: 0.62
    Fraction of exact exchange
  _ac : Optional[float], default: 0.8
    Fraction of GGA correlation correction
  """
  _a0 = (_a0 or 0.62)
  _ac = (_ac or 0.8)
  p = get_p("hyb_gga_xc_qtp17", polarized, _a0, _ac)
  def _hyb_gga_xc_qtp17_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_qtp17.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_qtp17_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_qtp17_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_qtp17_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_qtp17_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_qtp17_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_qtp17_epsilon_xc

def hyb_gga_xc_b3lyp_mcm1(
  polarized: bool = True,
  _P1: Optional[float] = None,
  _P2: Optional[float] = None,
  _P3: Optional[float] = None,
  _P4: Optional[float] = None,
  _P5: Optional[float] = None,
  _P6: Optional[float] = None,
) -> Callable:
  r"""
  M. T. Caldeira and R. Custodio.,  J. Mol. Model. 25, 62 (2019)
  `10.1007/s00894-019-3952-4 <https://doi.org/10.1007/s00894-019-3952-4>`_

  
  Mixing of the following functionals:
    lda_x (coefficient: 0.1319999999999999)
    gga_x_b88 (coefficient: 0.6709)
    lda_c_vwn_rpa (coefficient: -0.17790000000000006)
    gga_c_lyp (coefficient: 1.1383)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _P1 : Optional[float], default: 1.0
    Scale factor for pure exchange
  _P2 : Optional[float], default: 0.1986
    Fraction of exact exchange
  _P3 : Optional[float], default: 0.6709
    Fraction of non-local exchange correction
  _P4 : Optional[float], default: 0.8029
    Fraction of local exchange
  _P5 : Optional[float], default: 1.1383
    Fraction of non-local correlation correction
  _P6 : Optional[float], default: 0.9604
    Fraction of local correlation
  """
  _P1 = (_P1 or 1.0)
  _P2 = (_P2 or 0.1986)
  _P3 = (_P3 or 0.6709)
  _P4 = (_P4 or 0.8029)
  _P5 = (_P5 or 1.1383)
  _P6 = (_P6 or 0.9604)
  p = get_p("hyb_gga_xc_b3lyp_mcm1", polarized, _P1, _P2, _P3, _P4, _P5, _P6)
  def _hyb_gga_xc_b3lyp_mcm1_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_b3lyp_mcm1.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_b3lyp_mcm1_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_b3lyp_mcm1_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_b3lyp_mcm1_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_b3lyp_mcm1_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_b3lyp_mcm1_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_b3lyp_mcm1_epsilon_xc

def hyb_gga_xc_b3lyp_mcm2(
  polarized: bool = True,
  _P1: Optional[float] = None,
  _P2: Optional[float] = None,
  _P3: Optional[float] = None,
  _P4: Optional[float] = None,
  _P5: Optional[float] = None,
  _P6: Optional[float] = None,
) -> Callable:
  r"""
  M. T. Caldeira and R. Custodio.,  J. Mol. Model. 25, 62 (2019)
  `10.1007/s00894-019-3952-4 <https://doi.org/10.1007/s00894-019-3952-4>`_

  
  Mixing of the following functionals:
    lda_x (coefficient: 0.07900000000000007)
    gga_x_b88 (coefficient: 0.729)
    lda_c_vwn_rpa (coefficient: 0.016799999999999926)
    gga_c_lyp (coefficient: 0.9421)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _P1 : Optional[float], default: 1.0
    Scale factor for pure exchange
  _P2 : Optional[float], default: 0.2228
    Fraction of exact exchange
  _P3 : Optional[float], default: 0.729
    Fraction of non-local exchange correction
  _P4 : Optional[float], default: 0.808
    Fraction of local exchange
  _P5 : Optional[float], default: 0.9421
    Fraction of non-local correlation correction
  _P6 : Optional[float], default: 0.9589
    Fraction of local correlation
  """
  _P1 = (_P1 or 1.0)
  _P2 = (_P2 or 0.2228)
  _P3 = (_P3 or 0.729)
  _P4 = (_P4 or 0.808)
  _P5 = (_P5 or 0.9421)
  _P6 = (_P6 or 0.9589)
  p = get_p("hyb_gga_xc_b3lyp_mcm2", polarized, _P1, _P2, _P3, _P4, _P5, _P6)
  def _hyb_gga_xc_b3lyp_mcm2_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_b3lyp_mcm2.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_b3lyp_mcm2_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_b3lyp_mcm2_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_b3lyp_mcm2_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_b3lyp_mcm2_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_b3lyp_mcm2_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_b3lyp_mcm2_epsilon_xc

def hyb_gga_xc_wb97(
  polarized: bool = True,
  _cx0: Optional[float] = None,
  _cx1: Optional[float] = None,
  _cx2: Optional[float] = None,
  _cx3: Optional[float] = None,
  _cx4: Optional[float] = None,
  _css0: Optional[float] = None,
  _css1: Optional[float] = None,
  _css2: Optional[float] = None,
  _css3: Optional[float] = None,
  _css4: Optional[float] = None,
  _cos0: Optional[float] = None,
  _cos1: Optional[float] = None,
  _cos2: Optional[float] = None,
  _cos3: Optional[float] = None,
  _cos4: Optional[float] = None,
  _alpha: Optional[float] = None,
  _beta: Optional[float] = None,
  _omega: Optional[float] = None,
) -> Callable:
  r"""
  J.-D. Chai and M. Head-Gordon.,  J. Chem. Phys. 128, 084106 (2008)
  `10.1063/1.2834918 <http://scitation.aip.org/content/aip/journal/jcp/128/8/10.1063/1.2834918>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _cx0 : Optional[float], default: 1.0
    u^0 coefficient for exchange
  _cx1 : Optional[float], default: 1.13116
    u^1 coefficient for exchange
  _cx2 : Optional[float], default: -2.74915
    u^2 coefficient for exchange
  _cx3 : Optional[float], default: 12.09
    u^3 coefficient for exchange
  _cx4 : Optional[float], default: -5.71642
    u^4 coefficient for exchange
  _css0 : Optional[float], default: 1.0
    u^0 coefficient for same-spin correlation
  _css1 : Optional[float], default: -2.55352
    u^1 coefficient for same-spin correlation
  _css2 : Optional[float], default: 11.8926
    u^2 coefficient for same-spin correlation
  _css3 : Optional[float], default: -26.9452
    u^3 coefficient for same-spin correlation
  _css4 : Optional[float], default: 17.0927
    u^4 coefficient for same-spin correlation
  _cos0 : Optional[float], default: 1.0
    u^0 coefficient for opposite-spin correlation
  _cos1 : Optional[float], default: 3.99051
    u^1 coefficient for opposite-spin correlation
  _cos2 : Optional[float], default: -17.0066
    u^2 coefficient for opposite-spin correlation
  _cos3 : Optional[float], default: 1.07292
    u^3 coefficient for opposite-spin correlation
  _cos4 : Optional[float], default: 8.88211
    u^4 coefficient for opposite-spin correlation
  _alpha : Optional[float], default: 1.0
    fraction of HF exchange
  _beta : Optional[float], default: -1.0
    fraction of short-range exchange
  _omega : Optional[float], default: 0.4
    range-separation constant
  """
  _cx0 = (_cx0 or 1.0)
  _cx1 = (_cx1 or 1.13116)
  _cx2 = (_cx2 or -2.74915)
  _cx3 = (_cx3 or 12.09)
  _cx4 = (_cx4 or -5.71642)
  _css0 = (_css0 or 1.0)
  _css1 = (_css1 or -2.55352)
  _css2 = (_css2 or 11.8926)
  _css3 = (_css3 or -26.9452)
  _css4 = (_css4 or 17.0927)
  _cos0 = (_cos0 or 1.0)
  _cos1 = (_cos1 or 3.99051)
  _cos2 = (_cos2 or -17.0066)
  _cos3 = (_cos3 or 1.07292)
  _cos4 = (_cos4 or 8.88211)
  _alpha = (_alpha or 1.0)
  _beta = (_beta or -1.0)
  _omega = (_omega or 0.4)
  p = get_p("hyb_gga_xc_wb97", polarized, _cx0, _cx1, _cx2, _cx3, _cx4, _css0, _css1, _css2, _css3, _css4, _cos0, _cos1, _cos2, _cos3, _cos4, _alpha, _beta, _omega)
  def _hyb_gga_xc_wb97_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_wb97.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _hyb_gga_xc_wb97_epsilon_xc

def hyb_gga_xc_wb97x(
  polarized: bool = True,
  _cx0: Optional[float] = None,
  _cx1: Optional[float] = None,
  _cx2: Optional[float] = None,
  _cx3: Optional[float] = None,
  _cx4: Optional[float] = None,
  _css0: Optional[float] = None,
  _css1: Optional[float] = None,
  _css2: Optional[float] = None,
  _css3: Optional[float] = None,
  _css4: Optional[float] = None,
  _cos0: Optional[float] = None,
  _cos1: Optional[float] = None,
  _cos2: Optional[float] = None,
  _cos3: Optional[float] = None,
  _cos4: Optional[float] = None,
  _alpha: Optional[float] = None,
  _beta: Optional[float] = None,
  _omega: Optional[float] = None,
) -> Callable:
  r"""
  J.-D. Chai and M. Head-Gordon.,  J. Chem. Phys. 128, 084106 (2008)
  `10.1063/1.2834918 <http://scitation.aip.org/content/aip/journal/jcp/128/8/10.1063/1.2834918>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _cx0 : Optional[float], default: 0.842294
    u^0 coefficient for exchange
  _cx1 : Optional[float], default: 0.726479
    u^1 coefficient for exchange
  _cx2 : Optional[float], default: 1.0476
    u^2 coefficient for exchange
  _cx3 : Optional[float], default: -5.70635
    u^3 coefficient for exchange
  _cx4 : Optional[float], default: 13.2794
    u^4 coefficient for exchange
  _css0 : Optional[float], default: 1.0
    u^0 coefficient for same-spin correlation
  _css1 : Optional[float], default: -4.33879
    u^1 coefficient for same-spin correlation
  _css2 : Optional[float], default: 18.2308
    u^2 coefficient for same-spin correlation
  _css3 : Optional[float], default: -31.743
    u^3 coefficient for same-spin correlation
  _css4 : Optional[float], default: 17.2901
    u^4 coefficient for same-spin correlation
  _cos0 : Optional[float], default: 1.0
    u^0 coefficient for opposite-spin correlation
  _cos1 : Optional[float], default: 2.37031
    u^1 coefficient for opposite-spin correlation
  _cos2 : Optional[float], default: -11.3995
    u^2 coefficient for opposite-spin correlation
  _cos3 : Optional[float], default: 6.58405
    u^3 coefficient for opposite-spin correlation
  _cos4 : Optional[float], default: -3.78132
    u^4 coefficient for opposite-spin correlation
  _alpha : Optional[float], default: 1.0
    fraction of HF exchange
  _beta : Optional[float], default: -0.842294
    fraction of short-range exchange
  _omega : Optional[float], default: 0.3
    range-separation constant
  """
  _cx0 = (_cx0 or 0.842294)
  _cx1 = (_cx1 or 0.726479)
  _cx2 = (_cx2 or 1.0476)
  _cx3 = (_cx3 or -5.70635)
  _cx4 = (_cx4 or 13.2794)
  _css0 = (_css0 or 1.0)
  _css1 = (_css1 or -4.33879)
  _css2 = (_css2 or 18.2308)
  _css3 = (_css3 or -31.743)
  _css4 = (_css4 or 17.2901)
  _cos0 = (_cos0 or 1.0)
  _cos1 = (_cos1 or 2.37031)
  _cos2 = (_cos2 or -11.3995)
  _cos3 = (_cos3 or 6.58405)
  _cos4 = (_cos4 or -3.78132)
  _alpha = (_alpha or 1.0)
  _beta = (_beta or -0.842294)
  _omega = (_omega or 0.3)
  p = get_p("hyb_gga_xc_wb97x", polarized, _cx0, _cx1, _cx2, _cx3, _cx4, _css0, _css1, _css2, _css3, _css4, _cos0, _cos1, _cos2, _cos3, _cos4, _alpha, _beta, _omega)
  def _hyb_gga_xc_wb97x_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_wb97x.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _hyb_gga_xc_wb97x_epsilon_xc

def hyb_gga_xc_lrc_wpbeh(
  polarized: bool = True,
  _alpha: Optional[float] = None,
  _beta: Optional[float] = None,
  _omega: Optional[float] = None,
) -> Callable:
  r"""
  M. A. Rohrdanz, K. M. Martins, and J. M. Herbert.,  J. Chem. Phys. 130, 054112 (2009)
  `10.1063/1.3073302 <http://scitation.aip.org/content/aip/journal/jcp/130/5/10.1063/1.3073302>`_

  
  Mixing of the following functionals:
    gga_x_hjs_pbe (coefficient: 0.8)
    gga_c_pbe (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _alpha : Optional[float], default: 1.0
    Fraction of Hartree-Fock exchange
  _beta : Optional[float], default: -0.8
    Fraction of short-range exact exchange
  _omega : Optional[float], default: 0.2
    Range separation constant
  """
  _alpha = (_alpha or 1.0)
  _beta = (_beta or -0.8)
  _omega = (_omega or 0.2)
  p = get_p("hyb_gga_xc_lrc_wpbeh", polarized, _alpha, _beta, _omega)
  def _hyb_gga_xc_lrc_wpbeh_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_lrc_wpbeh.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_lrc_wpbeh_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_lrc_wpbeh_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_lrc_wpbeh_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_lrc_wpbeh_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_lrc_wpbeh_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_lrc_wpbeh_epsilon_xc

def hyb_gga_xc_wb97x_v(
  polarized: bool = True,
  _cx0: Optional[float] = None,
  _cx1: Optional[float] = None,
  _cx2: Optional[float] = None,
  _cx3: Optional[float] = None,
  _cx4: Optional[float] = None,
  _css0: Optional[float] = None,
  _css1: Optional[float] = None,
  _css2: Optional[float] = None,
  _css3: Optional[float] = None,
  _css4: Optional[float] = None,
  _cos0: Optional[float] = None,
  _cos1: Optional[float] = None,
  _cos2: Optional[float] = None,
  _cos3: Optional[float] = None,
  _cos4: Optional[float] = None,
  _alpha: Optional[float] = None,
  _beta: Optional[float] = None,
  _omega: Optional[float] = None,
) -> Callable:
  r"""
  N. Mardirossian and M. Head-Gordon.,  Phys. Chem. Chem. Phys. 16, 9904-9924 (2014)
  `10.1039/C3CP54374A <http://doi.org/10.1039/C3CP54374A>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _cx0 : Optional[float], default: 0.833
    u^0 coefficient for exchange
  _cx1 : Optional[float], default: 0.603
    u^1 coefficient for exchange
  _cx2 : Optional[float], default: 1.194
    u^2 coefficient for exchange
  _cx3 : Optional[float], default: 0.0
    u^3 coefficient for exchange
  _cx4 : Optional[float], default: 0.0
    u^4 coefficient for exchange
  _css0 : Optional[float], default: 0.556
    u^0 coefficient for same-spin correlation
  _css1 : Optional[float], default: -0.257
    u^1 coefficient for same-spin correlation
  _css2 : Optional[float], default: 0.0
    u^2 coefficient for same-spin correlation
  _css3 : Optional[float], default: 0.0
    u^3 coefficient for same-spin correlation
  _css4 : Optional[float], default: 0.0
    u^4 coefficient for same-spin correlation
  _cos0 : Optional[float], default: 1.219
    u^0 coefficient for opposite-spin correlation
  _cos1 : Optional[float], default: -1.85
    u^1 coefficient for opposite-spin correlation
  _cos2 : Optional[float], default: 0.0
    u^2 coefficient for opposite-spin correlation
  _cos3 : Optional[float], default: 0.0
    u^3 coefficient for opposite-spin correlation
  _cos4 : Optional[float], default: 0.0
    u^4 coefficient for opposite-spin correlation
  _alpha : Optional[float], default: 1.0
    fraction of HF exchange
  _beta : Optional[float], default: -0.833
    fraction of short-range exchange
  _omega : Optional[float], default: 0.3
    range-separation constant
  """
  _cx0 = (_cx0 or 0.833)
  _cx1 = (_cx1 or 0.603)
  _cx2 = (_cx2 or 1.194)
  _cx3 = (_cx3 or 0.0)
  _cx4 = (_cx4 or 0.0)
  _css0 = (_css0 or 0.556)
  _css1 = (_css1 or -0.257)
  _css2 = (_css2 or 0.0)
  _css3 = (_css3 or 0.0)
  _css4 = (_css4 or 0.0)
  _cos0 = (_cos0 or 1.219)
  _cos1 = (_cos1 or -1.85)
  _cos2 = (_cos2 or 0.0)
  _cos3 = (_cos3 or 0.0)
  _cos4 = (_cos4 or 0.0)
  _alpha = (_alpha or 1.0)
  _beta = (_beta or -0.833)
  _omega = (_omega or 0.3)
  p = get_p("hyb_gga_xc_wb97x_v", polarized, _cx0, _cx1, _cx2, _cx3, _cx4, _css0, _css1, _css2, _css3, _css4, _cos0, _cos1, _cos2, _cos3, _cos4, _alpha, _beta, _omega)
  def _hyb_gga_xc_wb97x_v_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_wb97x_v.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _hyb_gga_xc_wb97x_v_epsilon_xc

def hyb_gga_xc_lcy_pbe(
  polarized: bool = True,
) -> Callable:
  r"""
  M. Seth and T. Ziegler.,  J. Chem. Theory Comput. 8, 901-907 (2012)
  `10.1021/ct300006h <http://doi.org/10.1021/ct300006h>`_

  M. Seth, T. Ziegler, M. Steinmetz, and S. Grimme.,  J. Chem. Theory Comput. 9, 2286-2299 (2013)
  `10.1021/ct301112m <http://doi.org/10.1021/ct301112m>`_

  
  Mixing of the following functionals:
    gga_x_sfat_pbe (coefficient: 1.0)
    gga_c_pbe (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("hyb_gga_xc_lcy_pbe", polarized, )
  def _hyb_gga_xc_lcy_pbe_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_lcy_pbe.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_lcy_pbe_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_lcy_pbe_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_lcy_pbe_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_lcy_pbe_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_lcy_pbe_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_lcy_pbe_epsilon_xc

def hyb_gga_xc_lcy_blyp(
  polarized: bool = True,
) -> Callable:
  r"""
  Y. Akinaga and S. Ten-no.,  Chem. Phys. Lett. 462, 348 (2008)
  `10.1016/j.cplett.2008.07.103 <http://www.sciencedirect.com/science/article/pii/S0009261408010609>`_

  M. Seth, T. Ziegler, M. Steinmetz, and S. Grimme.,  J. Chem. Theory Comput. 9, 2286-2299 (2013)
  `10.1021/ct301112m <http://doi.org/10.1021/ct301112m>`_

  
  Mixing of the following functionals:
    gga_x_sfat (coefficient: 1.0)
    gga_c_lyp (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("hyb_gga_xc_lcy_blyp", polarized, )
  def _hyb_gga_xc_lcy_blyp_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_lcy_blyp.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_lcy_blyp_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_lcy_blyp_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_lcy_blyp_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_lcy_blyp_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_lcy_blyp_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_lcy_blyp_epsilon_xc

def hyb_gga_xc_lc_vv10(
  polarized: bool = True,
  _alpha: Optional[float] = None,
  _beta: Optional[float] = None,
  _omega: Optional[float] = None,
  _b: Optional[float] = None,
  _C: Optional[float] = None,
) -> Callable:
  r"""
  O. A. Vydrov and T. Van Voorhis.,  J. Chem. Phys. 133, 244103 (2010)
  `10.1063/1.3521275 <https://doi.org/10.1063/1.3521275>`_

  
  Mixing of the following functionals:
    gga_x_hjs_pbe (coefficient: 1.0)
    gga_c_pbe (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _alpha : Optional[float], default: 1.0
    Fraction of Hartree-Fock exchange
  _beta : Optional[float], default: -1.0
    Fraction of short-range exact exchange
  _omega : Optional[float], default: 0.45
    Range separation constant
  _b : Optional[float], default: 6.3
    VV10 b parameter
  _C : Optional[float], default: 0.0089
    VV10 C parameter
  """
  _alpha = (_alpha or 1.0)
  _beta = (_beta or -1.0)
  _omega = (_omega or 0.45)
  _b = (_b or 6.3)
  _C = (_C or 0.0089)
  p = get_p("hyb_gga_xc_lc_vv10", polarized, _alpha, _beta, _omega, _b, _C)
  def _hyb_gga_xc_lc_vv10_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_lc_vv10.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_lc_vv10_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_lc_vv10_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_lc_vv10_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_lc_vv10_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_lc_vv10_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_lc_vv10_epsilon_xc

def hyb_gga_xc_camy_b3lyp(
  polarized: bool = True,
  _ac: Optional[float] = None,
  _alpha: Optional[float] = None,
  _beta: Optional[float] = None,
  _omega: Optional[float] = None,
) -> Callable:
  r"""
  M. Seth and T. Ziegler.,  J. Chem. Theory Comput. 8, 901-907 (2012)
  `10.1021/ct300006h <http://doi.org/10.1021/ct300006h>`_

  
  Mixing of the following functionals:
    gga_x_b88 (coefficient: 0.35)
    gga_x_sfat (coefficient: 0.46)
    lda_c_vwn (coefficient: 0.18999999999999995)
    gga_c_lyp (coefficient: 0.81)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _ac : Optional[float], default: 0.81
    Fraction of LYP correlation
  _alpha : Optional[float], default: 0.65
    Fraction of Hartree-Fock exchange
  _beta : Optional[float], default: -0.46
    Fraction of short-range exact exchange
  _omega : Optional[float], default: 0.34
    Range separation parameter
  """
  _ac = (_ac or 0.81)
  _alpha = (_alpha or 0.65)
  _beta = (_beta or -0.46)
  _omega = (_omega or 0.34)
  p = get_p("hyb_gga_xc_camy_b3lyp", polarized, _ac, _alpha, _beta, _omega)
  def _hyb_gga_xc_camy_b3lyp_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_camy_b3lyp.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_camy_b3lyp_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_camy_b3lyp_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_camy_b3lyp_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_camy_b3lyp_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_camy_b3lyp_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_camy_b3lyp_epsilon_xc

def hyb_gga_xc_wb97x_d(
  polarized: bool = True,
  _cx0: Optional[float] = None,
  _cx1: Optional[float] = None,
  _cx2: Optional[float] = None,
  _cx3: Optional[float] = None,
  _cx4: Optional[float] = None,
  _css0: Optional[float] = None,
  _css1: Optional[float] = None,
  _css2: Optional[float] = None,
  _css3: Optional[float] = None,
  _css4: Optional[float] = None,
  _cos0: Optional[float] = None,
  _cos1: Optional[float] = None,
  _cos2: Optional[float] = None,
  _cos3: Optional[float] = None,
  _cos4: Optional[float] = None,
  _alpha: Optional[float] = None,
  _beta: Optional[float] = None,
  _omega: Optional[float] = None,
) -> Callable:
  r"""
  J.-D. Chai and M. Head-Gordon.,  Phys. Chem. Chem. Phys. 10, 6615-6620 (2008)
  `10.1039/B810189B <http://doi.org/10.1039/B810189B>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _cx0 : Optional[float], default: 0.777964
    u^0 coefficient for exchange
  _cx1 : Optional[float], default: 0.66116
    u^1 coefficient for exchange
  _cx2 : Optional[float], default: 0.574541
    u^2 coefficient for exchange
  _cx3 : Optional[float], default: -5.25671
    u^3 coefficient for exchange
  _cx4 : Optional[float], default: 11.6386
    u^4 coefficient for exchange
  _css0 : Optional[float], default: 1.0
    u^0 coefficient for same-spin correlation
  _css1 : Optional[float], default: -6.90539
    u^1 coefficient for same-spin correlation
  _css2 : Optional[float], default: 31.3343
    u^2 coefficient for same-spin correlation
  _css3 : Optional[float], default: -51.0533
    u^3 coefficient for same-spin correlation
  _css4 : Optional[float], default: 26.4423
    u^4 coefficient for same-spin correlation
  _cos0 : Optional[float], default: 1.0
    u^0 coefficient for opposite-spin correlation
  _cos1 : Optional[float], default: 1.79413
    u^1 coefficient for opposite-spin correlation
  _cos2 : Optional[float], default: -12.0477
    u^2 coefficient for opposite-spin correlation
  _cos3 : Optional[float], default: 14.0847
    u^3 coefficient for opposite-spin correlation
  _cos4 : Optional[float], default: -8.50809
    u^4 coefficient for opposite-spin correlation
  _alpha : Optional[float], default: 1.0
    fraction of HF exchange
  _beta : Optional[float], default: -0.777964
    fraction of short-range exchange
  _omega : Optional[float], default: 0.2
    range-separation constant
  """
  _cx0 = (_cx0 or 0.777964)
  _cx1 = (_cx1 or 0.66116)
  _cx2 = (_cx2 or 0.574541)
  _cx3 = (_cx3 or -5.25671)
  _cx4 = (_cx4 or 11.6386)
  _css0 = (_css0 or 1.0)
  _css1 = (_css1 or -6.90539)
  _css2 = (_css2 or 31.3343)
  _css3 = (_css3 or -51.0533)
  _css4 = (_css4 or 26.4423)
  _cos0 = (_cos0 or 1.0)
  _cos1 = (_cos1 or 1.79413)
  _cos2 = (_cos2 or -12.0477)
  _cos3 = (_cos3 or 14.0847)
  _cos4 = (_cos4 or -8.50809)
  _alpha = (_alpha or 1.0)
  _beta = (_beta or -0.777964)
  _omega = (_omega or 0.2)
  p = get_p("hyb_gga_xc_wb97x_d", polarized, _cx0, _cx1, _cx2, _cx3, _cx4, _css0, _css1, _css2, _css3, _css4, _cos0, _cos1, _cos2, _cos3, _cos4, _alpha, _beta, _omega)
  def _hyb_gga_xc_wb97x_d_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_wb97x_d.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _hyb_gga_xc_wb97x_d_epsilon_xc

def hyb_gga_xc_hpbeint(
  polarized: bool = True,
  _beta: Optional[float] = None,
) -> Callable:
  r"""
  E. Fabiano, L. A. Constantin, and F. Della Sala.,  Int. J. Quantum Chem. 113, 673–682 (2013)
  `10.1002/qua.24042 <http://doi.org/10.1002/qua.24042>`_

  
  Mixing of the following functionals:
    gga_x_pbeint (coefficient: 0.8333333333333334)
    gga_c_pbeint (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _beta : Optional[float], default: 0.16666666666666666
    Mixing parameter
  """
  _beta = (_beta or 0.16666666666666666)
  p = get_p("hyb_gga_xc_hpbeint", polarized, _beta)
  def _hyb_gga_xc_hpbeint_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_hpbeint.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_hpbeint_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_hpbeint_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_hpbeint_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_hpbeint_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_hpbeint_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_hpbeint_epsilon_xc

def hyb_gga_xc_lrc_wpbe(
  polarized: bool = True,
  _alpha: Optional[float] = None,
  _beta: Optional[float] = None,
  _omega: Optional[float] = None,
) -> Callable:
  r"""
  M. A. Rohrdanz, K. M. Martins, and J. M. Herbert.,  J. Chem. Phys. 130, 054112 (2009)
  `10.1063/1.3073302 <http://scitation.aip.org/content/aip/journal/jcp/130/5/10.1063/1.3073302>`_

  
  Mixing of the following functionals:
    gga_x_hjs_pbe (coefficient: 1.0)
    gga_c_pbe (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _alpha : Optional[float], default: 1.0
    Fraction of Hartree-Fock exchange
  _beta : Optional[float], default: -1.0
    Fraction of short-range exact exchange
  _omega : Optional[float], default: 0.3
    Range separation constant
  """
  _alpha = (_alpha or 1.0)
  _beta = (_beta or -1.0)
  _omega = (_omega or 0.3)
  p = get_p("hyb_gga_xc_lrc_wpbe", polarized, _alpha, _beta, _omega)
  def _hyb_gga_xc_lrc_wpbe_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_lrc_wpbe.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_lrc_wpbe_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_lrc_wpbe_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_lrc_wpbe_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_lrc_wpbe_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_lrc_wpbe_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_lrc_wpbe_epsilon_xc

def hyb_mgga_x_mvsh(
  polarized: bool = True,
) -> Callable:
  r"""
  J. Sun, J. P. Perdew, and A. Ruzsinszky.,  Proc. Natl. Acad. Sci. U. S. A. 112, 685-689 (2015)
  `10.1073/pnas.1423145112 <http://www.pnas.org/content/112/3/685.abstract>`_

  
  Mixing of the following functionals:
    mgga_x_mvs (coefficient: 0.75)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("hyb_mgga_x_mvsh", polarized, )
  def _hyb_mgga_x_mvsh_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_mgga_x_mvsh.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  
  _hyb_mgga_x_mvsh_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_mgga_x_mvsh_epsilon_xc.cam_beta = p.cam_beta
  _hyb_mgga_x_mvsh_epsilon_xc.cam_omega = p.cam_omega
  _hyb_mgga_x_mvsh_epsilon_xc.nlc_b = p.nlc_b
  _hyb_mgga_x_mvsh_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_mgga_x_mvsh_epsilon_xc

def hyb_gga_xc_b3lyp5(
  polarized: bool = True,
  _a0: Optional[float] = None,
  _ax: Optional[float] = None,
  _ac: Optional[float] = None,
) -> Callable:
  r"""
  P. J. Stephens, F. J. Devlin, C. F. Chabalowski, and M. J. Frisch.,  J. Phys. Chem. 98, 11623 (1994)
  `10.1021/j100096a001 <http://pubs.acs.org/doi/abs/10.1021/j100096a001>`_

  
  Mixing of the following functionals:
    lda_x (coefficient: 0.08000000000000007)
    gga_x_b88 (coefficient: 0.72)
    lda_c_vwn (coefficient: 0.18999999999999995)
    gga_c_lyp (coefficient: 0.81)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a0 : Optional[float], default: 0.2
    Fraction of exact exchange
  _ax : Optional[float], default: 0.72
    Fraction of GGA exchange correction
  _ac : Optional[float], default: 0.81
    Fraction of GGA correlation correction
  """
  _a0 = (_a0 or 0.2)
  _ax = (_ax or 0.72)
  _ac = (_ac or 0.81)
  p = get_p("hyb_gga_xc_b3lyp5", polarized, _a0, _ax, _ac)
  def _hyb_gga_xc_b3lyp5_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_b3lyp5.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_b3lyp5_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_b3lyp5_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_b3lyp5_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_b3lyp5_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_b3lyp5_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_b3lyp5_epsilon_xc

def hyb_gga_xc_edf2(
  polarized: bool = True,
) -> Callable:
  r"""
  C. Y. Lin, M. W. George, and P. M. W. Gill.,  Aust. J. Chem. 57, 365-370 (2004)
  `10.1071/CH03263 <http://www.publish.csiro.au/?paper=CH03263>`_

  
  Mixing of the following functionals:
    lda_x (coefficient: 0.2811)
    gga_x_b88 (coefficient: 0.6227)
    gga_x_b88 (coefficient: -0.0551)
    lda_c_vwn (coefficient: 0.3029)
    gga_c_lyp (coefficient: 0.5998)
    gga_c_lyp (coefficient: -0.0053)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("hyb_gga_xc_edf2", polarized, )
  def _hyb_gga_xc_edf2_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_edf2.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_edf2_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_edf2_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_edf2_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_edf2_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_edf2_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_edf2_epsilon_xc

def hyb_gga_xc_cap0(
  polarized: bool = True,
) -> Callable:
  r"""
  J. Carmona-Espíndola, J. L. Gázquez, A. Vela, and S. B. Trickey.,  Theor. Chem. Acc. 135, 120 (2016)
  `10.1007/s00214-016-1864-2 <http://doi.org/10.1007/s00214-016-1864-2>`_

  
  Mixing of the following functionals:
    gga_x_cap (coefficient: 0.75)
    gga_c_pbe (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("hyb_gga_xc_cap0", polarized, )
  def _hyb_gga_xc_cap0_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_cap0.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_cap0_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_cap0_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_cap0_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_cap0_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_cap0_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_cap0_epsilon_xc

def hyb_gga_xc_lc_wpbe(
  polarized: bool = True,
  _alpha: Optional[float] = None,
  _beta: Optional[float] = None,
  _omega: Optional[float] = None,
) -> Callable:
  r"""
  O. A. Vydrov and G. E. Scuseria.,  J. Chem. Phys. 125, 234109 (2006)
  `10.1063/1.2409292 <https://doi.org/10.1063/1.2409292>`_

  
  Mixing of the following functionals:
    gga_x_wpbeh (coefficient: 1.0)
    gga_c_pbe (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _alpha : Optional[float], default: 1.0
    Fraction of Hartree-Fock exchange
  _beta : Optional[float], default: -1.0
    Fraction of short-range exact exchange
  _omega : Optional[float], default: 0.4
    Range separation constant
  """
  _alpha = (_alpha or 1.0)
  _beta = (_beta or -1.0)
  _omega = (_omega or 0.4)
  p = get_p("hyb_gga_xc_lc_wpbe", polarized, _alpha, _beta, _omega)
  def _hyb_gga_xc_lc_wpbe_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_lc_wpbe.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_lc_wpbe_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_lc_wpbe_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_lc_wpbe_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_lc_wpbe_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_lc_wpbe_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_lc_wpbe_epsilon_xc

def hyb_gga_xc_hse12(
  polarized: bool = True,
  _beta: Optional[float] = None,
  _omega_HF: Optional[float] = None,
  _omega_PBE: Optional[float] = None,
) -> Callable:
  r"""
  J. E. Moussa, P. A. Schultz, and J. R. Chelikowsky.,  J. Chem. Phys. 136, 204117 (2012)
  `10.1063/1.4722993 <http://scitation.aip.org/content/aip/journal/jcp/136/20/10.1063/1.4722993>`_

  
  Mixing of the following functionals:
    gga_x_wpbeh (coefficient: 1.0)
    gga_x_wpbeh (coefficient: -0.313)
    gga_c_pbe (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _beta : Optional[float], default: 0.313
    Mixing parameter
  _omega_HF : Optional[float], default: 0.0978977840165
    Screening parameter for HF
  _omega_PBE : Optional[float], default: 0.0978977840165
    Screening parameter for PBE
  """
  _beta = (_beta or 0.313)
  _omega_HF = (_omega_HF or 0.0978977840165)
  _omega_PBE = (_omega_PBE or 0.0978977840165)
  p = get_p("hyb_gga_xc_hse12", polarized, _beta, _omega_HF, _omega_PBE)
  def _hyb_gga_xc_hse12_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_hse12.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_hse12_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_hse12_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_hse12_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_hse12_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_hse12_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_hse12_epsilon_xc

def hyb_gga_xc_hse12s(
  polarized: bool = True,
  _beta: Optional[float] = None,
  _omega_HF: Optional[float] = None,
  _omega_PBE: Optional[float] = None,
) -> Callable:
  r"""
  J. E. Moussa, P. A. Schultz, and J. R. Chelikowsky.,  J. Chem. Phys. 136, 204117 (2012)
  `10.1063/1.4722993 <http://scitation.aip.org/content/aip/journal/jcp/136/20/10.1063/1.4722993>`_

  
  Mixing of the following functionals:
    gga_x_wpbeh (coefficient: 1.0)
    gga_x_wpbeh (coefficient: -0.425)
    gga_c_pbe (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _beta : Optional[float], default: 0.425
    Mixing parameter
  _omega_HF : Optional[float], default: 0.2159043020472
    Screening parameter for HF
  _omega_PBE : Optional[float], default: 0.2159043020472
    Screening parameter for PBE
  """
  _beta = (_beta or 0.425)
  _omega_HF = (_omega_HF or 0.2159043020472)
  _omega_PBE = (_omega_PBE or 0.2159043020472)
  p = get_p("hyb_gga_xc_hse12s", polarized, _beta, _omega_HF, _omega_PBE)
  def _hyb_gga_xc_hse12s_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_hse12s.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_hse12s_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_hse12s_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_hse12s_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_hse12s_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_hse12s_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_hse12s_epsilon_xc

def hyb_gga_xc_hse_sol(
  polarized: bool = True,
) -> Callable:
  r"""
  L. Schimka, J. Harl, and G. Kresse.,  J. Chem. Phys. 134, 024116 (2011)
  `10.1063/1.3524336 <http://scitation.aip.org/content/aip/journal/jcp/134/2/10.1063/1.3524336>`_

  
  Mixing of the following functionals:
    gga_x_hjs_pbe_sol (coefficient: 1.0)
    gga_x_hjs_pbe_sol (coefficient: -0.25)
    gga_c_pbe (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("hyb_gga_xc_hse_sol", polarized, )
  def _hyb_gga_xc_hse_sol_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_hse_sol.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_hse_sol_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_hse_sol_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_hse_sol_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_hse_sol_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_hse_sol_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_hse_sol_epsilon_xc

def hyb_gga_xc_cam_qtp_01(
  polarized: bool = True,
  _alpha: Optional[float] = None,
  _beta: Optional[float] = None,
  _omega: Optional[float] = None,
  _ac: Optional[float] = None,
) -> Callable:
  r"""
  Y. Jin and R. J. Bartlett.,  J. Chem. Phys. 145, 034107 (2016)
  `10.1063/1.4955497 <http://doi.org/10.1063/1.4955497>`_

  
  Mixing of the following functionals:
    gga_x_b88 (coefficient: 0.0)
    gga_x_ityh (coefficient: 0.77)
    lda_c_vwn (coefficient: 0.19999999999999996)
    gga_c_lyp (coefficient: 0.8)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _alpha : Optional[float], default: 1.0
    Fraction of Hartree-Fock exchange
  _beta : Optional[float], default: -0.77
    Fraction of short-range exact exchange
  _omega : Optional[float], default: 0.31
    Range separation parameter
  _ac : Optional[float], default: 0.8
    Fraction of LYP correlation
  """
  _alpha = (_alpha or 1.0)
  _beta = (_beta or -0.77)
  _omega = (_omega or 0.31)
  _ac = (_ac or 0.8)
  p = get_p("hyb_gga_xc_cam_qtp_01", polarized, _alpha, _beta, _omega, _ac)
  def _hyb_gga_xc_cam_qtp_01_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_cam_qtp_01.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_cam_qtp_01_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_cam_qtp_01_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_cam_qtp_01_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_cam_qtp_01_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_cam_qtp_01_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_cam_qtp_01_epsilon_xc

def hyb_gga_xc_mpw1lyp(
  polarized: bool = True,
  _cx: Optional[float] = None,
) -> Callable:
  r"""
  C. Adamo and V. Barone.,  J. Chem. Phys. 108, 664 (1998)
  `10.1063/1.475428 <http://scitation.aip.org/content/aip/journal/jcp/108/2/10.1063/1.475428>`_

  
  Mixing of the following functionals:
    gga_x_mpw91 (coefficient: 0.75)
    gga_c_lyp (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _cx : Optional[float], default: 0.25
    Fraction of exact exchange
  """
  _cx = (_cx or 0.25)
  p = get_p("hyb_gga_xc_mpw1lyp", polarized, _cx)
  def _hyb_gga_xc_mpw1lyp_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_mpw1lyp.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_mpw1lyp_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_mpw1lyp_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_mpw1lyp_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_mpw1lyp_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_mpw1lyp_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_mpw1lyp_epsilon_xc

def hyb_gga_xc_mpw1pbe(
  polarized: bool = True,
  _cx: Optional[float] = None,
) -> Callable:
  r"""
  C. Adamo and V. Barone.,  J. Chem. Phys. 108, 664 (1998)
  `10.1063/1.475428 <http://scitation.aip.org/content/aip/journal/jcp/108/2/10.1063/1.475428>`_

  
  Mixing of the following functionals:
    gga_x_mpw91 (coefficient: 0.75)
    gga_c_pbe (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _cx : Optional[float], default: 0.25
    Fraction of exact exchange
  """
  _cx = (_cx or 0.25)
  p = get_p("hyb_gga_xc_mpw1pbe", polarized, _cx)
  def _hyb_gga_xc_mpw1pbe_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_mpw1pbe.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_mpw1pbe_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_mpw1pbe_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_mpw1pbe_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_mpw1pbe_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_mpw1pbe_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_mpw1pbe_epsilon_xc

def hyb_gga_xc_kmlyp(
  polarized: bool = True,
  _a0: Optional[float] = None,
  _ac: Optional[float] = None,
) -> Callable:
  r"""
  J. K. Kang and C. B. Musgrave.,  J. Chem. Phys. 115, 11040-11051 (2001)
  `10.1063/1.1415079 <http://doi.org/10.1063/1.1415079>`_

  
  Mixing of the following functionals:
    lda_x (coefficient: 0.44299999999999995)
    lda_c_vwn_rpa (coefficient: 0.552)
    gga_c_lyp (coefficient: 0.448)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a0 : Optional[float], default: 0.557
    Fraction of exact exchange
  _ac : Optional[float], default: 0.448
    Fraction of GGA correlation correction
  """
  _a0 = (_a0 or 0.557)
  _ac = (_ac or 0.448)
  p = get_p("hyb_gga_xc_kmlyp", polarized, _a0, _ac)
  def _hyb_gga_xc_kmlyp_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_kmlyp.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_kmlyp_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_kmlyp_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_kmlyp_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_kmlyp_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_kmlyp_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_kmlyp_epsilon_xc

def hyb_gga_xc_lc_wpbe_whs(
  polarized: bool = True,
  _alpha: Optional[float] = None,
  _beta: Optional[float] = None,
  _omega: Optional[float] = None,
) -> Callable:
  r"""
  E. Weintraub, T. M. Henderson, and G. E. Scuseria.,  J. Chem. Theory Comput. 5, 754-762 (2009)
  `10.1021/ct800530u <http://pubs.acs.org/doi/abs/10.1021/ct800530u>`_

  T. M. Henderson, B. G. Janesko, and G. E. Scuseria.,  J. Chem. Phys. 128, 194105 (2008)
  `10.1063/1.2921797 <http://scitation.aip.org/content/aip/journal/jcp/128/19/10.1063/1.2921797>`_

  
  Mixing of the following functionals:
    gga_x_hjs_pbe (coefficient: 1.0)
    gga_c_pbe (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _alpha : Optional[float], default: 1.0
    Fraction of Hartree-Fock exchange
  _beta : Optional[float], default: -1.0
    Fraction of short-range exact exchange
  _omega : Optional[float], default: 0.4
    Range separation constant
  """
  _alpha = (_alpha or 1.0)
  _beta = (_beta or -1.0)
  _omega = (_omega or 0.4)
  p = get_p("hyb_gga_xc_lc_wpbe_whs", polarized, _alpha, _beta, _omega)
  def _hyb_gga_xc_lc_wpbe_whs_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_lc_wpbe_whs.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_lc_wpbe_whs_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_lc_wpbe_whs_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_lc_wpbe_whs_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_lc_wpbe_whs_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_lc_wpbe_whs_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_lc_wpbe_whs_epsilon_xc

def hyb_gga_xc_lc_wpbeh_whs(
  polarized: bool = True,
  _alpha: Optional[float] = None,
  _beta: Optional[float] = None,
  _omega: Optional[float] = None,
) -> Callable:
  r"""
  E. Weintraub, T. M. Henderson, and G. E. Scuseria.,  J. Chem. Theory Comput. 5, 754-762 (2009)
  `10.1021/ct800530u <http://pubs.acs.org/doi/abs/10.1021/ct800530u>`_

  T. M. Henderson, B. G. Janesko, and G. E. Scuseria.,  J. Chem. Phys. 128, 194105 (2008)
  `10.1063/1.2921797 <http://scitation.aip.org/content/aip/journal/jcp/128/19/10.1063/1.2921797>`_

  
  Mixing of the following functionals:
    gga_x_hjs_pbe (coefficient: 0.75)
    gga_c_pbe (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _alpha : Optional[float], default: 1.0
    Fraction of Hartree-Fock exchange
  _beta : Optional[float], default: -0.75
    Fraction of short-range exact exchange
  _omega : Optional[float], default: 0.4
    Range separation constant
  """
  _alpha = (_alpha or 1.0)
  _beta = (_beta or -0.75)
  _omega = (_omega or 0.4)
  p = get_p("hyb_gga_xc_lc_wpbeh_whs", polarized, _alpha, _beta, _omega)
  def _hyb_gga_xc_lc_wpbeh_whs_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_lc_wpbeh_whs.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_lc_wpbeh_whs_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_lc_wpbeh_whs_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_lc_wpbeh_whs_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_lc_wpbeh_whs_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_lc_wpbeh_whs_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_lc_wpbeh_whs_epsilon_xc

def hyb_gga_xc_lc_wpbe08_whs(
  polarized: bool = True,
  _alpha: Optional[float] = None,
  _beta: Optional[float] = None,
  _omega: Optional[float] = None,
) -> Callable:
  r"""
  E. Weintraub, T. M. Henderson, and G. E. Scuseria.,  J. Chem. Theory Comput. 5, 754-762 (2009)
  `10.1021/ct800530u <http://pubs.acs.org/doi/abs/10.1021/ct800530u>`_

  T. M. Henderson, B. G. Janesko, and G. E. Scuseria.,  J. Chem. Phys. 128, 194105 (2008)
  `10.1063/1.2921797 <http://scitation.aip.org/content/aip/journal/jcp/128/19/10.1063/1.2921797>`_

  
  Mixing of the following functionals:
    gga_x_hjs_pbe (coefficient: 1.0)
    gga_c_pbe (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _alpha : Optional[float], default: 1.0
    Fraction of Hartree-Fock exchange
  _beta : Optional[float], default: -1.0
    Fraction of short-range exact exchange
  _omega : Optional[float], default: 0.45
    Range separation constant
  """
  _alpha = (_alpha or 1.0)
  _beta = (_beta or -1.0)
  _omega = (_omega or 0.45)
  p = get_p("hyb_gga_xc_lc_wpbe08_whs", polarized, _alpha, _beta, _omega)
  def _hyb_gga_xc_lc_wpbe08_whs_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_lc_wpbe08_whs.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_lc_wpbe08_whs_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_lc_wpbe08_whs_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_lc_wpbe08_whs_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_lc_wpbe08_whs_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_lc_wpbe08_whs_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_lc_wpbe08_whs_epsilon_xc

def hyb_gga_xc_lc_wpbesol_whs(
  polarized: bool = True,
  _alpha: Optional[float] = None,
  _beta: Optional[float] = None,
  _omega: Optional[float] = None,
) -> Callable:
  r"""
  E. Weintraub, T. M. Henderson, and G. E. Scuseria.,  J. Chem. Theory Comput. 5, 754-762 (2009)
  `10.1021/ct800530u <http://pubs.acs.org/doi/abs/10.1021/ct800530u>`_

  T. M. Henderson, B. G. Janesko, and G. E. Scuseria.,  J. Chem. Phys. 128, 194105 (2008)
  `10.1063/1.2921797 <http://scitation.aip.org/content/aip/journal/jcp/128/19/10.1063/1.2921797>`_

  
  Mixing of the following functionals:
    gga_x_hjs_pbe_sol (coefficient: 1.0)
    gga_c_pbe_sol (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _alpha : Optional[float], default: 1.0
    Fraction of Hartree-Fock exchange
  _beta : Optional[float], default: -1.0
    Fraction of short-range exact exchange
  _omega : Optional[float], default: 0.6
    Range separation constant
  """
  _alpha = (_alpha or 1.0)
  _beta = (_beta or -1.0)
  _omega = (_omega or 0.6)
  p = get_p("hyb_gga_xc_lc_wpbesol_whs", polarized, _alpha, _beta, _omega)
  def _hyb_gga_xc_lc_wpbesol_whs_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_lc_wpbesol_whs.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_lc_wpbesol_whs_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_lc_wpbesol_whs_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_lc_wpbesol_whs_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_lc_wpbesol_whs_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_lc_wpbesol_whs_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_lc_wpbesol_whs_epsilon_xc

def hyb_gga_xc_cam_qtp_00(
  polarized: bool = True,
  _alpha: Optional[float] = None,
  _beta: Optional[float] = None,
  _omega: Optional[float] = None,
  _ac: Optional[float] = None,
) -> Callable:
  r"""
  P. Verma and R. J. Bartlett.,  J. Chem. Phys. 140, 18A534 (2014)
  `10.1063/1.4871409 <https://doi.org/10.1063/1.4871409>`_

  
  Mixing of the following functionals:
    gga_x_b88 (coefficient: 0.08999999999999997)
    gga_x_ityh (coefficient: 0.37)
    lda_c_vwn (coefficient: 0.19999999999999996)
    gga_c_lyp (coefficient: 0.8)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _alpha : Optional[float], default: 0.91
    Fraction of Hartree-Fock exchange
  _beta : Optional[float], default: -0.37
    Fraction of short-range exact exchange
  _omega : Optional[float], default: 0.29
    Range separation parameter
  _ac : Optional[float], default: 0.8
    Fraction of LYP correlation
  """
  _alpha = (_alpha or 0.91)
  _beta = (_beta or -0.37)
  _omega = (_omega or 0.29)
  _ac = (_ac or 0.8)
  p = get_p("hyb_gga_xc_cam_qtp_00", polarized, _alpha, _beta, _omega, _ac)
  def _hyb_gga_xc_cam_qtp_00_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_cam_qtp_00.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_cam_qtp_00_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_cam_qtp_00_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_cam_qtp_00_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_cam_qtp_00_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_cam_qtp_00_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_cam_qtp_00_epsilon_xc

def hyb_gga_xc_cam_qtp_02(
  polarized: bool = True,
  _alpha: Optional[float] = None,
  _beta: Optional[float] = None,
  _omega: Optional[float] = None,
  _ac: Optional[float] = None,
) -> Callable:
  r"""
  R. L. A. Haiduke and R. J. Bartlett.,  J. Chem. Phys. 148, 184106 (2018)
  `10.1063/1.5025723 <https://doi.org/10.1063/1.5025723>`_

  
  Mixing of the following functionals:
    gga_x_b88 (coefficient: 0.0)
    gga_x_ityh (coefficient: 0.72)
    lda_c_vwn (coefficient: 0.0)
    gga_c_lyp (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _alpha : Optional[float], default: 1.0
    Fraction of Hartree-Fock exchange
  _beta : Optional[float], default: -0.72
    Fraction of short-range exact exchange
  _omega : Optional[float], default: 0.335
    Range separation parameter
  _ac : Optional[float], default: 1.0
    Fraction of LYP correlation
  """
  _alpha = (_alpha or 1.0)
  _beta = (_beta or -0.72)
  _omega = (_omega or 0.335)
  _ac = (_ac or 1.0)
  p = get_p("hyb_gga_xc_cam_qtp_02", polarized, _alpha, _beta, _omega, _ac)
  def _hyb_gga_xc_cam_qtp_02_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_cam_qtp_02.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_cam_qtp_02_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_cam_qtp_02_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_cam_qtp_02_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_cam_qtp_02_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_cam_qtp_02_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_cam_qtp_02_epsilon_xc

def hyb_gga_xc_lc_qtp(
  polarized: bool = True,
  _alpha: Optional[float] = None,
  _beta: Optional[float] = None,
  _omega: Optional[float] = None,
  _ac: Optional[float] = None,
) -> Callable:
  r"""
  R. L. A. Haiduke and R. J. Bartlett.,  J. Chem. Phys. 148, 184106 (2018)
  `10.1063/1.5025723 <https://doi.org/10.1063/1.5025723>`_

  
  Mixing of the following functionals:
    gga_x_b88 (coefficient: 0.0)
    gga_x_ityh (coefficient: 1.0)
    lda_c_vwn (coefficient: 0.0)
    gga_c_lyp (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _alpha : Optional[float], default: 1.0
    Fraction of Hartree-Fock exchange
  _beta : Optional[float], default: -1.0
    Fraction of short-range exact exchange
  _omega : Optional[float], default: 0.475
    Range separation parameter
  _ac : Optional[float], default: 1.0
    Fraction of LYP correlation
  """
  _alpha = (_alpha or 1.0)
  _beta = (_beta or -1.0)
  _omega = (_omega or 0.475)
  _ac = (_ac or 1.0)
  p = get_p("hyb_gga_xc_lc_qtp", polarized, _alpha, _beta, _omega, _ac)
  def _hyb_gga_xc_lc_qtp_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_lc_qtp.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_lc_qtp_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_lc_qtp_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_lc_qtp_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_lc_qtp_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_lc_qtp_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_lc_qtp_epsilon_xc

def mgga_x_rscan(
  polarized: bool = True,
  _c2: Optional[float] = None,
  _d: Optional[float] = None,
  _k1: Optional[float] = None,
  _taur: Optional[float] = None,
  _alphar: Optional[float] = None,
) -> Callable:
  r"""
  A. P. Bartók and J. R. Yates.,  J. Chem. Phys. 150, 161101 (2019)
  `10.1063/1.5094646 <https://doi.org/10.1063/1.5094646>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _c2 : Optional[float], default: 0.8
    c2 parameter
  _d : Optional[float], default: 1.24
    d parameter
  _k1 : Optional[float], default: 0.065
    k1 parameter
  _taur : Optional[float], default: 0.0001
    taur parameter
  _alphar : Optional[float], default: 0.001
    alphar parameter
  """
  _c2 = (_c2 or 0.8)
  _d = (_d or 1.24)
  _k1 = (_k1 or 0.065)
  _taur = (_taur or 0.0001)
  _alphar = (_alphar or 0.001)
  p = get_p("mgga_x_rscan", polarized, _c2, _d, _k1, _taur, _alphar)
  def _mgga_x_rscan_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_rscan.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_rscan_epsilon_xc

def mgga_c_rscan(
  polarized: bool = True,
) -> Callable:
  r"""
  A. P. Bartók and J. R. Yates.,  J. Chem. Phys. 150, 161101 (2019)
  `10.1063/1.5094646 <https://doi.org/10.1063/1.5094646>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("mgga_c_rscan", polarized, )
  def _mgga_c_rscan_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_c_rscan.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_c_rscan_epsilon_xc

def gga_x_s12g(
  polarized: bool = True,
  _A: Optional[float] = None,
  _B: Optional[float] = None,
  _C: Optional[float] = None,
  _D: Optional[float] = None,
  _E: Optional[float] = None,
) -> Callable:
  r"""
  M. Swart.,  Chem. Phys. Lett. 580, 166 - 171 (2013)
  `10.1016/j.cplett.2013.06.045 <http://www.sciencedirect.com/science/article/pii/S0009261413008221>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _A : Optional[float], default: 1.03842032
    A parameter
  _B : Optional[float], default: 0.7185796799999999
    B parameter
  _C : Optional[float], default: 0.00403198
    C parameter
  _D : Optional[float], default: 0.00104596
    D parameter
  _E : Optional[float], default: 0.00594635
    E parameter
  """
  _A = (_A or 1.03842032)
  _B = (_B or 0.7185796799999999)
  _C = (_C or 0.00403198)
  _D = (_D or 0.00104596)
  _E = (_E or 0.00594635)
  p = get_p("gga_x_s12g", polarized, _A, _B, _C, _D, _E)
  def _gga_x_s12g_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_s12g.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_s12g_epsilon_xc

def hyb_gga_x_s12h(
  polarized: bool = True,
  _A: Optional[float] = None,
  _B: Optional[float] = None,
  _C: Optional[float] = None,
  _D: Optional[float] = None,
  _E: Optional[float] = None,
  _alpha: Optional[float] = None,
) -> Callable:
  r"""
  M. Swart.,  Chem. Phys. Lett. 580, 166 - 171 (2013)
  `10.1016/j.cplett.2013.06.045 <http://www.sciencedirect.com/science/article/pii/S0009261413008221>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _A : Optional[float], default: 1.02543951
    A parameter
  _B : Optional[float], default: 0.7315604899999999
    B parameter
  _C : Optional[float], default: 0.00761554
    C parameter
  _D : Optional[float], default: 0.00211063
    D parameter
  _E : Optional[float], default: 0.00604672
    E parameter
  _alpha : Optional[float], default: 0.25
    Fraction of exact exchange
  """
  _A = (_A or 1.02543951)
  _B = (_B or 0.7315604899999999)
  _C = (_C or 0.00761554)
  _D = (_D or 0.00211063)
  _E = (_E or 0.00604672)
  _alpha = (_alpha or 0.25)
  p = get_p("hyb_gga_x_s12h", polarized, _A, _B, _C, _D, _E, _alpha)
  def _hyb_gga_x_s12h_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_x_s12h.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _hyb_gga_x_s12h_epsilon_xc

def mgga_x_r2scan(
  polarized: bool = True,
  _c1: Optional[float] = None,
  _c2: Optional[float] = None,
  _d: Optional[float] = None,
  _k1: Optional[float] = None,
  _eta: Optional[float] = None,
  _dp2: Optional[float] = None,
) -> Callable:
  r"""
  J. W. Furness, A. D. Kaplan, J. Ning, J. P. Perdew, and J. Sun.,  J. Phys. Chem. Lett. 11, 8208-8215 (2020)
  `10.1021/acs.jpclett.0c02405 <https://doi.org/10.1021/acs.jpclett.0c02405>`_

  J. W. Furness, A. D. Kaplan, J. Ning, J. P. Perdew, and J. Sun.,  J. Phys. Chem. Lett. 11, 9248-9248 (2020)
  `10.1021/acs.jpclett.0c03077 <https://doi.org/10.1021/acs.jpclett.0c03077>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _c1 : Optional[float], default: 0.667
    c1 parameter
  _c2 : Optional[float], default: 0.8
    c2 parameter
  _d : Optional[float], default: 1.24
    d parameter
  _k1 : Optional[float], default: 0.065
    k1 parameter
  _eta : Optional[float], default: 0.001
    eta parameter
  _dp2 : Optional[float], default: 0.361
    dp2 parameter
  """
  _c1 = (_c1 or 0.667)
  _c2 = (_c2 or 0.8)
  _d = (_d or 1.24)
  _k1 = (_k1 or 0.065)
  _eta = (_eta or 0.001)
  _dp2 = (_dp2 or 0.361)
  p = get_p("mgga_x_r2scan", polarized, _c1, _c2, _d, _k1, _eta, _dp2)
  def _mgga_x_r2scan_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_r2scan.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_r2scan_epsilon_xc

def mgga_c_r2scan(
  polarized: bool = True,
  _eta: Optional[float] = None,
) -> Callable:
  r"""
  J. W. Furness, A. D. Kaplan, J. Ning, J. P. Perdew, and J. Sun.,  J. Phys. Chem. Lett. 11, 8208-8215 (2020)
  `10.1021/acs.jpclett.0c02405 <https://doi.org/10.1021/acs.jpclett.0c02405>`_

  J. W. Furness, A. D. Kaplan, J. Ning, J. P. Perdew, and J. Sun.,  J. Phys. Chem. Lett. 11, 9248-9248 (2020)
  `10.1021/acs.jpclett.0c03077 <https://doi.org/10.1021/acs.jpclett.0c03077>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _eta : Optional[float], default: 0.001
    Regularization parameter
  """
  _eta = (_eta or 0.001)
  p = get_p("mgga_c_r2scan", polarized, _eta)
  def _mgga_c_r2scan_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_c_r2scan.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_c_r2scan_epsilon_xc

def hyb_gga_xc_blyp35(
  polarized: bool = True,
  _cx: Optional[float] = None,
) -> Callable:
  r"""
  M. Renz, K. Theilacker, C. Lambert, and M. Kaupp.,  J. Am. Chem. Soc. 131, 16292-16302 (2009)
  `10.1021/ja9070859 <https://doi.org/10.1021/ja9070859>`_

  M. Kaupp, M. Renz, M. Parthey, M. Stolte, F. Würthner, and C. Lambert.,  Phys. Chem. Chem. Phys. 13, 16973-16986 (2011)
  `10.1039/C1CP21772K <http://doi.org/10.1039/C1CP21772K>`_

  
  Mixing of the following functionals:
    gga_x_b88 (coefficient: 0.65)
    gga_c_lyp (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _cx : Optional[float], default: 0.35
    Fraction of exact exchange
  """
  _cx = (_cx or 0.35)
  p = get_p("hyb_gga_xc_blyp35", polarized, _cx)
  def _hyb_gga_xc_blyp35_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_blyp35.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_blyp35_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_blyp35_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_blyp35_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_blyp35_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_blyp35_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_blyp35_epsilon_xc

def gga_k_vw(
  polarized: bool = True,
  _lambda_: Optional[float] = None,
  _gamma: Optional[float] = None,
) -> Callable:
  r"""
  C. F. von Weizsäcker.,  Z. Phys. 96, 431 (1935)
  `10.1007/BF01337700 <http://link.springer.com/article/10.1007\%2FBF01337700>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _lambda_ : Optional[float], default: 1.0
    Lambda
  _gamma : Optional[float], default: 0.0
    Gamma
  """
  _lambda_ = (_lambda_ or 1.0)
  _gamma = (_gamma or 0.0)
  p = get_p("gga_k_vw", polarized, _lambda_, _gamma)
  def _gga_k_vw_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_k_vw.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_k_vw_epsilon_xc

def gga_k_ge2(
  polarized: bool = True,
  _lambda_: Optional[float] = None,
  _gamma: Optional[float] = None,
) -> Callable:
  r"""
  A. S. Kompaneets and E. S. Pavlovskii.,  Zh. Eksp. Teor. Fiz. 31, 427 (1956)
  

  D. A. Kirznits.,  Zh. Eksp. Teor. Fiz. 32, 115 (1957)
  

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _lambda_ : Optional[float], default: 0.1111111111111111
    Lambda
  _gamma : Optional[float], default: 1.0
    Gamma
  """
  _lambda_ = (_lambda_ or 0.1111111111111111)
  _gamma = (_gamma or 1.0)
  p = get_p("gga_k_ge2", polarized, _lambda_, _gamma)
  def _gga_k_ge2_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_k_ge2.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_k_ge2_epsilon_xc

def gga_k_golden(
  polarized: bool = True,
  _lambda_: Optional[float] = None,
  _gamma: Optional[float] = None,
) -> Callable:
  r"""
  S. Golden.,  Phys. Rev. 105, 604 (1957)
  `10.1103/PhysRev.105.604 <http://link.aps.org/doi/10.1103/PhysRev.105.604>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _lambda_ : Optional[float], default: 0.28888888888888886
    Lambda
  _gamma : Optional[float], default: 1.0
    Gamma
  """
  _lambda_ = (_lambda_ or 0.28888888888888886)
  _gamma = (_gamma or 1.0)
  p = get_p("gga_k_golden", polarized, _lambda_, _gamma)
  def _gga_k_golden_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_k_golden.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_k_golden_epsilon_xc

def gga_k_yt65(
  polarized: bool = True,
  _lambda_: Optional[float] = None,
  _gamma: Optional[float] = None,
) -> Callable:
  r"""
  K. Yonei and Y. Tomishima.,  J. Phys. Soc. Jpn. 20, 1051 (1965)
  `10.1143/JPSJ.20.1051 <http://journals.jps.jp/doi/abs/10.1143/JPSJ.20.1051>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _lambda_ : Optional[float], default: 0.2
    Lambda
  _gamma : Optional[float], default: 1.0
    Gamma
  """
  _lambda_ = (_lambda_ or 0.2)
  _gamma = (_gamma or 1.0)
  p = get_p("gga_k_yt65", polarized, _lambda_, _gamma)
  def _gga_k_yt65_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_k_yt65.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_k_yt65_epsilon_xc

def gga_k_baltin(
  polarized: bool = True,
  _lambda_: Optional[float] = None,
  _gamma: Optional[float] = None,
) -> Callable:
  r"""
  R. Baltin.,  Z. Naturforsch. A 27, 1176 - 1186 (1972)
  `10.1515/zna-1972-8-903 <https://www.degruyter.com/view/journals/zna/27/8-9/article-p1176.xml>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _lambda_ : Optional[float], default: 0.5555555555555556
    Lambda
  _gamma : Optional[float], default: 1.0
    Gamma
  """
  _lambda_ = (_lambda_ or 0.5555555555555556)
  _gamma = (_gamma or 1.0)
  p = get_p("gga_k_baltin", polarized, _lambda_, _gamma)
  def _gga_k_baltin_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_k_baltin.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_k_baltin_epsilon_xc

def gga_k_lieb(
  polarized: bool = True,
  _lambda_: Optional[float] = None,
  _gamma: Optional[float] = None,
) -> Callable:
  r"""
  E. H. Lieb.,  Rev. Mod. Phys. 53, 603 (1981)
  `10.1103/RevModPhys.53.603 <http://link.aps.org/doi/10.1103/RevModPhys.53.603>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _lambda_ : Optional[float], default: 0.185909191
    Lambda
  _gamma : Optional[float], default: 1.0
    Gamma
  """
  _lambda_ = (_lambda_ or 0.185909191)
  _gamma = (_gamma or 1.0)
  p = get_p("gga_k_lieb", polarized, _lambda_, _gamma)
  def _gga_k_lieb_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_k_lieb.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_k_lieb_epsilon_xc

def gga_k_absp1(
  polarized: bool = True,
  N: Optional[float] = None,
) -> Callable:
  r"""
  P. K. Acharya, L. J. Bartolotti, S. B. Sears, and R. G. Parr.,  Proc. Natl. Acad. Sci. U. S. A. 77, 6978 (1980)
  `10.1073/pnas.77.12.6978 <http://www.pnas.org/content/77/12/6978.abstract>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  N : Optional[float], default: 1.0
    Number of electrons
  """
  N = (N or 1.0)
  p = get_p("gga_k_absp1", polarized, N)
  def _gga_k_absp1_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_k_absp1.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_k_absp1_epsilon_xc

def gga_k_absp2(
  polarized: bool = True,
  N: Optional[float] = None,
) -> Callable:
  r"""
  P. K. Acharya, L. J. Bartolotti, S. B. Sears, and R. G. Parr.,  Proc. Natl. Acad. Sci. U. S. A. 77, 6978 (1980)
  `10.1073/pnas.77.12.6978 <http://www.pnas.org/content/77/12/6978.abstract>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  N : Optional[float], default: 1.0
    Number of electrons
  """
  N = (N or 1.0)
  p = get_p("gga_k_absp2", polarized, N)
  def _gga_k_absp2_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_k_absp2.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_k_absp2_epsilon_xc

def gga_k_gr(
  polarized: bool = True,
  N: Optional[float] = None,
) -> Callable:
  r"""
  J. L. Gázquez and J. Robles.,  J. Chem. Phys. 76, 1467 (1982)
  `10.1063/1.443107 <http://scitation.aip.org/content/aip/journal/jcp/76/3/10.1063/1.443107>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  N : Optional[float], default: 1.0
    Number of electrons
  """
  N = (N or 1.0)
  p = get_p("gga_k_gr", polarized, N)
  def _gga_k_gr_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_k_gr.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_k_gr_epsilon_xc

def gga_k_ludena(
  polarized: bool = True,
  N: Optional[float] = None,
) -> Callable:
  r"""
  E. V. Ludeña. In F. B. Malik, editor, Cond. Matt. Theor., volume 1, 183. New York, 1986. Plenum.
  

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  N : Optional[float], default: 1.0
    Number of electrons
  """
  N = (N or 1.0)
  p = get_p("gga_k_ludena", polarized, N)
  def _gga_k_ludena_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_k_ludena.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_k_ludena_epsilon_xc

def gga_k_gp85(
  polarized: bool = True,
  N: Optional[float] = None,
) -> Callable:
  r"""
  S. K. Ghosh and R. G. Parr.,  J. Chem. Phys. 82, 3307 (1985)
  `10.1063/1.448229 <http://scitation.aip.org/content/aip/journal/jcp/82/7/10.1063/1.448229>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  N : Optional[float], default: 1.0
    Number of electrons
  """
  N = (N or 1.0)
  p = get_p("gga_k_gp85", polarized, N)
  def _gga_k_gp85_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_k_gp85.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_k_gp85_epsilon_xc

def gga_k_pearson(
  polarized: bool = True,
) -> Callable:
  r"""
  D. J. Lacks and R. G. Gordon.,  J. Chem. Phys. 100, 4446 (1994)
  `10.1063/1.466274 <http://scitation.aip.org/content/aip/journal/jcp/100/6/10.1063/1.466274>`_

  E. W. Pearson and R. G. Gordon.,  J. Chem. Phys. 82, 881 (1985)
  `10.1063/1.448516 <http://scitation.aip.org/content/aip/journal/jcp/82/2/10.1063/1.448516>`_

  E. W. Pearson. Theory and application of the electron gas model. PhD thesis, Harvard University, 1983. URL: http://discovery.lib.harvard.edu/?itemid=|library/m/aleph|001176470.
  ` <http://discovery.lib.harvard.edu/?itemid=|library/m/aleph|001176470>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_k_pearson", polarized, )
  def _gga_k_pearson_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_k_pearson.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_k_pearson_epsilon_xc

def gga_k_ol1(
  polarized: bool = True,
) -> Callable:
  r"""
  H. Ou-Yang and M. Levy.,  Int. J. Quantum Chem. 40, 379 (1991)
  `10.1002/qua.560400309 <http://onlinelibrary.wiley.com/doi/10.1002/qua.560400309/abstract>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_k_ol1", polarized, )
  def _gga_k_ol1_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_k_ol1.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_k_ol1_epsilon_xc

def gga_k_ol2(
  polarized: bool = True,
) -> Callable:
  r"""
  H. Ou-Yang and M. Levy.,  Int. J. Quantum Chem. 40, 379 (1991)
  `10.1002/qua.560400309 <http://onlinelibrary.wiley.com/doi/10.1002/qua.560400309/abstract>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_k_ol2", polarized, )
  def _gga_k_ol2_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_k_ol2.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_k_ol2_epsilon_xc

def gga_k_fr_b88(
  polarized: bool = True,
) -> Callable:
  r"""
  P. Fuentealba and O. Reyes.,  Chem. Phys. Lett. 232, 31 (1995)
  `10.1016/0009-2614(94)01321-L <http://www.sciencedirect.com/science/article/pii/000926149401321L>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_k_fr_b88", polarized, )
  def _gga_k_fr_b88_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_k_fr_b88.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_k_fr_b88_epsilon_xc

def gga_k_fr_pw86(
  polarized: bool = True,
) -> Callable:
  r"""
  P. Fuentealba and O. Reyes.,  Chem. Phys. Lett. 232, 31 (1995)
  `10.1016/0009-2614(94)01321-L <http://www.sciencedirect.com/science/article/pii/000926149401321L>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_k_fr_pw86", polarized, )
  def _gga_k_fr_pw86_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_k_fr_pw86.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_k_fr_pw86_epsilon_xc

def gga_k_dk(
  polarized: bool = True,
  _a0: Optional[float] = None,
  _a1: Optional[float] = None,
  _a2: Optional[float] = None,
  _a3: Optional[float] = None,
  _a4: Optional[float] = None,
  _b0: Optional[float] = None,
  _b1: Optional[float] = None,
  _b2: Optional[float] = None,
  _b3: Optional[float] = None,
  _b4: Optional[float] = None,
) -> Callable:
  r"""
  A. E. DePristo and J. D. Kress.,  Phys. Rev. A 35, 438 (1987)
  `10.1103/PhysRevA.35.438 <http://link.aps.org/doi/10.1103/PhysRevA.35.438>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a0 : Optional[float], default: 1.0
    constant term in numerator
  _a1 : Optional[float], default: 0.002894915269207321
    coefficient for x^2 in numerator
  _a2 : Optional[float], default: 0.00013261312158741373
    coefficient for x^4 in numerator
  _a3 : Optional[float], default: -5.540398637453735e-07
    coefficient for x^6 in numerator
  _a4 : Optional[float], default: 2.297777234019837e-09
    coefficient for x^8 in numerator
  _b0 : Optional[float], default: 1.0
    constant term in denominator
  _b1 : Optional[float], default: -0.00015236396153722742
    coefficient for x^2 in denominator
  _b2 : Optional[float], default: 9.284072099806483e-05
    coefficient for x^4 in denominator
  _b3 : Optional[float], default: 8.398620696364157e-08
    coefficient for x^6 in denominator
  _b4 : Optional[float], default: 0.0
    coefficient for x^8 in denominator
  """
  _a0 = (_a0 or 1.0)
  _a1 = (_a1 or 0.002894915269207321)
  _a2 = (_a2 or 0.00013261312158741373)
  _a3 = (_a3 or -5.540398637453735e-07)
  _a4 = (_a4 or 2.297777234019837e-09)
  _b0 = (_b0 or 1.0)
  _b1 = (_b1 or -0.00015236396153722742)
  _b2 = (_b2 or 9.284072099806483e-05)
  _b3 = (_b3 or 8.398620696364157e-08)
  _b4 = (_b4 or 0.0)
  p = get_p("gga_k_dk", polarized, _a0, _a1, _a2, _a3, _a4, _b0, _b1, _b2, _b3, _b4)
  def _gga_k_dk_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_k_dk.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_k_dk_epsilon_xc

def gga_k_perdew(
  polarized: bool = True,
  _a0: Optional[float] = None,
  _a1: Optional[float] = None,
  _a2: Optional[float] = None,
  _a3: Optional[float] = None,
  _a4: Optional[float] = None,
  _b0: Optional[float] = None,
  _b1: Optional[float] = None,
  _b2: Optional[float] = None,
  _b3: Optional[float] = None,
  _b4: Optional[float] = None,
) -> Callable:
  r"""
  J. P. Perdew.,  Phys. Lett. A 165, 79 (1992)
  `10.1016/0375-9601(92)91058-Y <http://www.sciencedirect.com/science/article/pii/037596019291058Y>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a0 : Optional[float], default: 1.0
    constant term in numerator
  _a1 : Optional[float], default: 1.4545833923568336
    coefficient for x^2 in numerator
  _a2 : Optional[float], default: 0.004432161727584875
    coefficient for x^4 in numerator
  _a3 : Optional[float], default: 0.0
    coefficient for x^6 in numerator
  _a4 : Optional[float], default: 0.0
    coefficient for x^8 in numerator
  _b0 : Optional[float], default: 1.0
    constant term in denominator
  _b1 : Optional[float], default: 1.4515358693437506
    coefficient for x^2 in denominator
  _b2 : Optional[float], default: 0.0
    coefficient for x^4 in denominator
  _b3 : Optional[float], default: 0.0
    coefficient for x^6 in denominator
  _b4 : Optional[float], default: 0.0
    coefficient for x^8 in denominator
  """
  _a0 = (_a0 or 1.0)
  _a1 = (_a1 or 1.4545833923568336)
  _a2 = (_a2 or 0.004432161727584875)
  _a3 = (_a3 or 0.0)
  _a4 = (_a4 or 0.0)
  _b0 = (_b0 or 1.0)
  _b1 = (_b1 or 1.4515358693437506)
  _b2 = (_b2 or 0.0)
  _b3 = (_b3 or 0.0)
  _b4 = (_b4 or 0.0)
  p = get_p("gga_k_perdew", polarized, _a0, _a1, _a2, _a3, _a4, _b0, _b1, _b2, _b3, _b4)
  def _gga_k_perdew_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_k_perdew.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_k_perdew_epsilon_xc

def gga_k_vsk(
  polarized: bool = True,
  _a0: Optional[float] = None,
  _a1: Optional[float] = None,
  _a2: Optional[float] = None,
  _a3: Optional[float] = None,
  _a4: Optional[float] = None,
  _b0: Optional[float] = None,
  _b1: Optional[float] = None,
  _b2: Optional[float] = None,
  _b3: Optional[float] = None,
  _b4: Optional[float] = None,
) -> Callable:
  r"""
  L. Vitos, H. L. Skriver, and J. Kollár.,  Phys. Rev. B 57, 12611 (1998)
  `10.1103/PhysRevB.57.12611 <http://link.aps.org/doi/10.1103/PhysRevB.57.12611>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a0 : Optional[float], default: 1.0
    constant term in numerator
  _a1 : Optional[float], default: 0.002894915269207321
    coefficient for x^2 in numerator
  _a2 : Optional[float], default: 0.0
    coefficient for x^4 in numerator
  _a3 : Optional[float], default: 1.008496627814284e-07
    coefficient for x^6 in numerator
  _a4 : Optional[float], default: 0.0
    coefficient for x^8 in numerator
  _b0 : Optional[float], default: 1.0
    constant term in denominator
  _b1 : Optional[float], default: -0.00015236396153722742
    coefficient for x^2 in denominator
  _b2 : Optional[float], default: 3.6772206412103267e-06
    coefficient for x^4 in denominator
  _b3 : Optional[float], default: 0.0
    coefficient for x^6 in denominator
  _b4 : Optional[float], default: 0.0
    coefficient for x^8 in denominator
  """
  _a0 = (_a0 or 1.0)
  _a1 = (_a1 or 0.002894915269207321)
  _a2 = (_a2 or 0.0)
  _a3 = (_a3 or 1.008496627814284e-07)
  _a4 = (_a4 or 0.0)
  _b0 = (_b0 or 1.0)
  _b1 = (_b1 or -0.00015236396153722742)
  _b2 = (_b2 or 3.6772206412103267e-06)
  _b3 = (_b3 or 0.0)
  _b4 = (_b4 or 0.0)
  p = get_p("gga_k_vsk", polarized, _a0, _a1, _a2, _a3, _a4, _b0, _b1, _b2, _b3, _b4)
  def _gga_k_vsk_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_k_vsk.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_k_vsk_epsilon_xc

def gga_k_vjks(
  polarized: bool = True,
  _a0: Optional[float] = None,
  _a1: Optional[float] = None,
  _a2: Optional[float] = None,
  _a3: Optional[float] = None,
  _a4: Optional[float] = None,
  _b0: Optional[float] = None,
  _b1: Optional[float] = None,
  _b2: Optional[float] = None,
  _b3: Optional[float] = None,
  _b4: Optional[float] = None,
) -> Callable:
  r"""
  L. Vitos, B. Johansson, J. Kollár, and H. L. Skriver.,  Phys. Rev. A 61, 052511 (2000)
  `10.1103/PhysRevA.61.052511 <http://link.aps.org/doi/10.1103/PhysRevA.61.052511>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a0 : Optional[float], default: 1.0
    constant term in numerator
  _a1 : Optional[float], default: 0.01471762733748079
    coefficient for x^2 in numerator
  _a2 : Optional[float], default: 0.0
    coefficient for x^4 in numerator
  _a3 : Optional[float], default: -1.9204159512886074e-07
    coefficient for x^6 in numerator
  _a4 : Optional[float], default: 0.0
    coefficient for x^8 in numerator
  _b0 : Optional[float], default: 1.0
    constant term in denominator
  _b1 : Optional[float], default: 0.010714050938543988
    coefficient for x^2 in denominator
  _b2 : Optional[float], default: 1.1670495436844882e-05
    coefficient for x^4 in denominator
  _b3 : Optional[float], default: 0.0
    coefficient for x^6 in denominator
  _b4 : Optional[float], default: 0.0
    coefficient for x^8 in denominator
  """
  _a0 = (_a0 or 1.0)
  _a1 = (_a1 or 0.01471762733748079)
  _a2 = (_a2 or 0.0)
  _a3 = (_a3 or -1.9204159512886074e-07)
  _a4 = (_a4 or 0.0)
  _b0 = (_b0 or 1.0)
  _b1 = (_b1 or 0.010714050938543988)
  _b2 = (_b2 or 1.1670495436844882e-05)
  _b3 = (_b3 or 0.0)
  _b4 = (_b4 or 0.0)
  p = get_p("gga_k_vjks", polarized, _a0, _a1, _a2, _a3, _a4, _b0, _b1, _b2, _b3, _b4)
  def _gga_k_vjks_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_k_vjks.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_k_vjks_epsilon_xc

def gga_k_ernzerhof(
  polarized: bool = True,
  _a0: Optional[float] = None,
  _a1: Optional[float] = None,
  _a2: Optional[float] = None,
  _a3: Optional[float] = None,
  _a4: Optional[float] = None,
  _b0: Optional[float] = None,
  _b1: Optional[float] = None,
  _b2: Optional[float] = None,
  _b3: Optional[float] = None,
  _b4: Optional[float] = None,
) -> Callable:
  r"""
  M. Ernzerhof.,  J. Mol. Struct.: THEOCHEM 501–502, 59 (2000)
  `10.1016/S0166-1280(99)00414-5 <http://www.sciencedirect.com/science/article/pii/S0166128099004145>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a0 : Optional[float], default: 135.0
    constant term in numerator
  _a1 : Optional[float], default: 0.4607486196885757
    coefficient for x^2 in numerator
  _a2 : Optional[float], default: 0.0013538857815365293
    coefficient for x^4 in numerator
  _a3 : Optional[float], default: 0.0
    coefficient for x^6 in numerator
  _a4 : Optional[float], default: 0.0
    coefficient for x^8 in numerator
  _b0 : Optional[float], default: 135.0
    constant term in denominator
  _b1 : Optional[float], default: 0.049365923538061685
    coefficient for x^2 in denominator
  _b2 : Optional[float], default: 0.0
    coefficient for x^4 in denominator
  _b3 : Optional[float], default: 0.0
    coefficient for x^6 in denominator
  _b4 : Optional[float], default: 0.0
    coefficient for x^8 in denominator
  """
  _a0 = (_a0 or 135.0)
  _a1 = (_a1 or 0.4607486196885757)
  _a2 = (_a2 or 0.0013538857815365293)
  _a3 = (_a3 or 0.0)
  _a4 = (_a4 or 0.0)
  _b0 = (_b0 or 135.0)
  _b1 = (_b1 or 0.049365923538061685)
  _b2 = (_b2 or 0.0)
  _b3 = (_b3 or 0.0)
  _b4 = (_b4 or 0.0)
  p = get_p("gga_k_ernzerhof", polarized, _a0, _a1, _a2, _a3, _a4, _b0, _b1, _b2, _b3, _b4)
  def _gga_k_ernzerhof_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_k_ernzerhof.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_k_ernzerhof_epsilon_xc

def gga_k_lc94(
  polarized: bool = True,
  _a: Optional[float] = None,
  _b: Optional[float] = None,
  _c: Optional[float] = None,
  _d: Optional[float] = None,
  _f: Optional[float] = None,
  _alpha: Optional[float] = None,
  _expo: Optional[float] = None,
) -> Callable:
  r"""
  A. Lembarki and H. Chermette.,  Phys. Rev. A 50, 5328 (1994)
  `10.1103/PhysRevA.50.5328 <http://link.aps.org/doi/10.1103/PhysRevA.50.5328>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a : Optional[float], default: 0.093907
    a parameter
  _b : Optional[float], default: 76.32
    b parameter
  _c : Optional[float], default: 0.26608
    c parameter
  _d : Optional[float], default: -0.0809615
    d parameter
  _f : Optional[float], default: 5.7767e-05
    f parameter
  _alpha : Optional[float], default: 100.0
    alpha parameter
  _expo : Optional[float], default: 4.0
    exponent
  """
  _a = (_a or 0.093907)
  _b = (_b or 76.32)
  _c = (_c or 0.26608)
  _d = (_d or -0.0809615)
  _f = (_f or 5.7767e-05)
  _alpha = (_alpha or 100.0)
  _expo = (_expo or 4.0)
  p = get_p("gga_k_lc94", polarized, _a, _b, _c, _d, _f, _alpha, _expo)
  def _gga_k_lc94_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_k_lc94.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_k_lc94_epsilon_xc

def gga_k_llp(
  polarized: bool = True,
) -> Callable:
  r"""
  H. Lee, C. Lee, and R. G. Parr.,  Phys. Rev. A 44, 768 (1991)
  `10.1103/PhysRevA.44.768 <http://link.aps.org/doi/10.1103/PhysRevA.44.768>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_k_llp", polarized, )
  def _gga_k_llp_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_k_llp.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_k_llp_epsilon_xc

def gga_k_thakkar(
  polarized: bool = True,
) -> Callable:
  r"""
  A. J. Thakkar.,  Phys. Rev. A 46, 6920 (1992)
  `10.1103/PhysRevA.46.6920 <http://link.aps.org/doi/10.1103/PhysRevA.46.6920>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_k_thakkar", polarized, )
  def _gga_k_thakkar_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_k_thakkar.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_k_thakkar_epsilon_xc

def gga_x_wpbeh(
  polarized: bool = True,
  _omega: Optional[float] = None,
) -> Callable:
  r"""
  J. Heyd, G. E. Scuseria, and M. Ernzerhof.,  J. Chem. Phys. 118, 8207 (2003)
  `10.1063/1.1564060 <http://scitation.aip.org/content/aip/journal/jcp/118/18/10.1063/1.1564060>`_

  J. Heyd, G. E. Scuseria, and M. Ernzerhof.,  J. Chem. Phys. 124, 219906 (2006)
  `10.1063/1.2204597 <http://scitation.aip.org/content/aip/journal/jcp/124/21/10.1063/1.2204597>`_

  M. Ernzerhof and J. P. Perdew.,  J. Chem. Phys. 109, 3313 (1998)
  `10.1063/1.476928 <http://scitation.aip.org/content/aip/journal/jcp/109/9/10.1063/1.476928>`_

  J. Heyd and G. E. Scuseria.,  J. Chem. Phys. 120, 7274 (2004)
  `10.1063/1.1668634 <http://scitation.aip.org/content/aip/journal/jcp/120/16/10.1063/1.1668634>`_

  T. M. Henderson, A. F. Izmaylov, G. Scalmani, and G. E. Scuseria.,  J. Chem. Phys. 131, 044108 (2009)
  `10.1063/1.3185673 <http://scitation.aip.org/content/aip/journal/jcp/131/4/10.1063/1.3185673>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _omega : Optional[float], default: 0.0
    screening parameter
  """
  _omega = (_omega or 0.0)
  p = get_p("gga_x_wpbeh", polarized, _omega)
  def _gga_x_wpbeh_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_wpbeh.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_wpbeh_epsilon_xc

def gga_x_hjs_pbe(
  polarized: bool = True,
  _a0: Optional[float] = None,
  _a1: Optional[float] = None,
  _a2: Optional[float] = None,
  _a3: Optional[float] = None,
  _a4: Optional[float] = None,
  _a5: Optional[float] = None,
  _b0: Optional[float] = None,
  _b1: Optional[float] = None,
  _b2: Optional[float] = None,
  _b3: Optional[float] = None,
  _b4: Optional[float] = None,
  _b5: Optional[float] = None,
  _b6: Optional[float] = None,
  _b7: Optional[float] = None,
  _b8: Optional[float] = None,
  _omega: Optional[float] = None,
) -> Callable:
  r"""
  T. M. Henderson, B. G. Janesko, and G. E. Scuseria.,  J. Chem. Phys. 128, 194105 (2008)
  `10.1063/1.2921797 <http://scitation.aip.org/content/aip/journal/jcp/128/19/10.1063/1.2921797>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a0 : Optional[float], default: 0.0159941
    a0
  _a1 : Optional[float], default: 0.0852995
    a1
  _a2 : Optional[float], default: -0.160368
    a2
  _a3 : Optional[float], default: 0.152645
    a3
  _a4 : Optional[float], default: -0.0971263
    a4
  _a5 : Optional[float], default: 0.0422061
    a5
  _b0 : Optional[float], default: 5.33319
    b0
  _b1 : Optional[float], default: -12.478
    b1
  _b2 : Optional[float], default: 11.0988
    b2
  _b3 : Optional[float], default: -5.11013
    b3
  _b4 : Optional[float], default: 1.71468
    b4
  _b5 : Optional[float], default: -0.61038
    b5
  _b6 : Optional[float], default: 0.307555
    b6
  _b7 : Optional[float], default: -0.0770547
    b7
  _b8 : Optional[float], default: 0.033484
    b8
  _omega : Optional[float], default: 0.11
    omega
  """
  _a0 = (_a0 or 0.0159941)
  _a1 = (_a1 or 0.0852995)
  _a2 = (_a2 or -0.160368)
  _a3 = (_a3 or 0.152645)
  _a4 = (_a4 or -0.0971263)
  _a5 = (_a5 or 0.0422061)
  _b0 = (_b0 or 5.33319)
  _b1 = (_b1 or -12.478)
  _b2 = (_b2 or 11.0988)
  _b3 = (_b3 or -5.11013)
  _b4 = (_b4 or 1.71468)
  _b5 = (_b5 or -0.61038)
  _b6 = (_b6 or 0.307555)
  _b7 = (_b7 or -0.0770547)
  _b8 = (_b8 or 0.033484)
  _omega = (_omega or 0.11)
  p = get_p("gga_x_hjs_pbe", polarized, _a0, _a1, _a2, _a3, _a4, _a5, _b0, _b1, _b2, _b3, _b4, _b5, _b6, _b7, _b8, _omega)
  def _gga_x_hjs_pbe_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_hjs_pbe.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_hjs_pbe_epsilon_xc

def gga_x_hjs_pbe_sol(
  polarized: bool = True,
  _a0: Optional[float] = None,
  _a1: Optional[float] = None,
  _a2: Optional[float] = None,
  _a3: Optional[float] = None,
  _a4: Optional[float] = None,
  _a5: Optional[float] = None,
  _b0: Optional[float] = None,
  _b1: Optional[float] = None,
  _b2: Optional[float] = None,
  _b3: Optional[float] = None,
  _b4: Optional[float] = None,
  _b5: Optional[float] = None,
  _b6: Optional[float] = None,
  _b7: Optional[float] = None,
  _b8: Optional[float] = None,
  _omega: Optional[float] = None,
) -> Callable:
  r"""
  T. M. Henderson, B. G. Janesko, and G. E. Scuseria.,  J. Chem. Phys. 128, 194105 (2008)
  `10.1063/1.2921797 <http://scitation.aip.org/content/aip/journal/jcp/128/19/10.1063/1.2921797>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a0 : Optional[float], default: 0.0047333
    a0
  _a1 : Optional[float], default: 0.0403304
    a1
  _a2 : Optional[float], default: -0.0574615
    a2
  _a3 : Optional[float], default: 0.0435395
    a3
  _a4 : Optional[float], default: -0.0216251
    a4
  _a5 : Optional[float], default: 0.0063721
    a5
  _b0 : Optional[float], default: 8.52056
    b0
  _b1 : Optional[float], default: -13.9885
    b1
  _b2 : Optional[float], default: 9.28583
    b2
  _b3 : Optional[float], default: -3.27287
    b3
  _b4 : Optional[float], default: 0.843499
    b4
  _b5 : Optional[float], default: -0.235543
    b5
  _b6 : Optional[float], default: 0.0847074
    b6
  _b7 : Optional[float], default: -0.0171561
    b7
  _b8 : Optional[float], default: 0.0050552
    b8
  _omega : Optional[float], default: 0.11
    omega
  """
  _a0 = (_a0 or 0.0047333)
  _a1 = (_a1 or 0.0403304)
  _a2 = (_a2 or -0.0574615)
  _a3 = (_a3 or 0.0435395)
  _a4 = (_a4 or -0.0216251)
  _a5 = (_a5 or 0.0063721)
  _b0 = (_b0 or 8.52056)
  _b1 = (_b1 or -13.9885)
  _b2 = (_b2 or 9.28583)
  _b3 = (_b3 or -3.27287)
  _b4 = (_b4 or 0.843499)
  _b5 = (_b5 or -0.235543)
  _b6 = (_b6 or 0.0847074)
  _b7 = (_b7 or -0.0171561)
  _b8 = (_b8 or 0.0050552)
  _omega = (_omega or 0.11)
  p = get_p("gga_x_hjs_pbe_sol", polarized, _a0, _a1, _a2, _a3, _a4, _a5, _b0, _b1, _b2, _b3, _b4, _b5, _b6, _b7, _b8, _omega)
  def _gga_x_hjs_pbe_sol_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_hjs_pbe_sol.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_hjs_pbe_sol_epsilon_xc

def gga_x_hjs_b88(
  polarized: bool = True,
  _a0: Optional[float] = None,
  _a1: Optional[float] = None,
  _a2: Optional[float] = None,
  _a3: Optional[float] = None,
  _a4: Optional[float] = None,
  _a5: Optional[float] = None,
  _b0: Optional[float] = None,
  _b1: Optional[float] = None,
  _b2: Optional[float] = None,
  _b3: Optional[float] = None,
  _b4: Optional[float] = None,
  _b5: Optional[float] = None,
  _b6: Optional[float] = None,
  _b7: Optional[float] = None,
  _b8: Optional[float] = None,
  _omega: Optional[float] = None,
) -> Callable:
  r"""
  T. M. Henderson, B. G. Janesko, and G. E. Scuseria.,  J. Chem. Phys. 128, 194105 (2008)
  `10.1063/1.2921797 <http://scitation.aip.org/content/aip/journal/jcp/128/19/10.1063/1.2921797>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a0 : Optional[float], default: 0.00968615
    a0
  _a1 : Optional[float], default: -0.0242498
    a1
  _a2 : Optional[float], default: 0.0259009
    a2
  _a3 : Optional[float], default: -0.0136606
    a3
  _a4 : Optional[float], default: 0.00309606
    a4
  _a5 : Optional[float], default: -7.32583e-05
    a5
  _b0 : Optional[float], default: -2.50356
    b0
  _b1 : Optional[float], default: 2.79656
    b1
  _b2 : Optional[float], default: -1.79401
    b2
  _b3 : Optional[float], default: 0.714888
    b3
  _b4 : Optional[float], default: -0.165924
    b4
  _b5 : Optional[float], default: 0.0118379
    b5
  _b6 : Optional[float], default: 0.0037806
    b6
  _b7 : Optional[float], default: -0.000157905
    b7
  _b8 : Optional[float], default: 1.45323e-06
    b8
  _omega : Optional[float], default: 0.11
    omega
  """
  _a0 = (_a0 or 0.00968615)
  _a1 = (_a1 or -0.0242498)
  _a2 = (_a2 or 0.0259009)
  _a3 = (_a3 or -0.0136606)
  _a4 = (_a4 or 0.00309606)
  _a5 = (_a5 or -7.32583e-05)
  _b0 = (_b0 or -2.50356)
  _b1 = (_b1 or 2.79656)
  _b2 = (_b2 or -1.79401)
  _b3 = (_b3 or 0.714888)
  _b4 = (_b4 or -0.165924)
  _b5 = (_b5 or 0.0118379)
  _b6 = (_b6 or 0.0037806)
  _b7 = (_b7 or -0.000157905)
  _b8 = (_b8 or 1.45323e-06)
  _omega = (_omega or 0.11)
  p = get_p("gga_x_hjs_b88", polarized, _a0, _a1, _a2, _a3, _a4, _a5, _b0, _b1, _b2, _b3, _b4, _b5, _b6, _b7, _b8, _omega)
  def _gga_x_hjs_b88_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_hjs_b88.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_hjs_b88_epsilon_xc

def gga_x_hjs_b97x(
  polarized: bool = True,
  _a0: Optional[float] = None,
  _a1: Optional[float] = None,
  _a2: Optional[float] = None,
  _a3: Optional[float] = None,
  _a4: Optional[float] = None,
  _a5: Optional[float] = None,
  _b0: Optional[float] = None,
  _b1: Optional[float] = None,
  _b2: Optional[float] = None,
  _b3: Optional[float] = None,
  _b4: Optional[float] = None,
  _b5: Optional[float] = None,
  _b6: Optional[float] = None,
  _b7: Optional[float] = None,
  _b8: Optional[float] = None,
  _omega: Optional[float] = None,
) -> Callable:
  r"""
  T. M. Henderson, B. G. Janesko, and G. E. Scuseria.,  J. Chem. Phys. 128, 194105 (2008)
  `10.1063/1.2921797 <http://scitation.aip.org/content/aip/journal/jcp/128/19/10.1063/1.2921797>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a0 : Optional[float], default: 0.0027355
    a0
  _a1 : Optional[float], default: 0.043297
    a1
  _a2 : Optional[float], default: -0.0669379
    a2
  _a3 : Optional[float], default: 0.069906
    a3
  _a4 : Optional[float], default: -0.0474635
    a4
  _a5 : Optional[float], default: 0.0153092
    a5
  _b0 : Optional[float], default: 15.8279
    b0
  _b1 : Optional[float], default: -26.8145
    b1
  _b2 : Optional[float], default: 17.8127
    b2
  _b3 : Optional[float], default: -5.98246
    b3
  _b4 : Optional[float], default: 1.25408
    b4
  _b5 : Optional[float], default: -0.270783
    b5
  _b6 : Optional[float], default: 0.0919536
    b6
  _b7 : Optional[float], default: -0.014096
    b7
  _b8 : Optional[float], default: 0.0045466
    b8
  _omega : Optional[float], default: 0.11
    omega
  """
  _a0 = (_a0 or 0.0027355)
  _a1 = (_a1 or 0.043297)
  _a2 = (_a2 or -0.0669379)
  _a3 = (_a3 or 0.069906)
  _a4 = (_a4 or -0.0474635)
  _a5 = (_a5 or 0.0153092)
  _b0 = (_b0 or 15.8279)
  _b1 = (_b1 or -26.8145)
  _b2 = (_b2 or 17.8127)
  _b3 = (_b3 or -5.98246)
  _b4 = (_b4 or 1.25408)
  _b5 = (_b5 or -0.270783)
  _b6 = (_b6 or 0.0919536)
  _b7 = (_b7 or -0.014096)
  _b8 = (_b8 or 0.0045466)
  _omega = (_omega or 0.11)
  p = get_p("gga_x_hjs_b97x", polarized, _a0, _a1, _a2, _a3, _a4, _a5, _b0, _b1, _b2, _b3, _b4, _b5, _b6, _b7, _b8, _omega)
  def _gga_x_hjs_b97x_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_hjs_b97x.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_hjs_b97x_epsilon_xc

def gga_x_ityh(
  polarized: bool = True,
  _omega: Optional[float] = None,
) -> Callable:
  r"""
  H. Iikura, T. Tsuneda, T. Yanai, and K. Hirao.,  J. Chem. Phys. 115, 3540 (2001)
  `10.1063/1.1383587 <http://scitation.aip.org/content/aip/journal/jcp/115/8/10.1063/1.1383587>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _omega : Optional[float], default: 0.2
    screening parameter
  """
  _omega = (_omega or 0.2)
  p = get_p("gga_x_ityh", polarized, _omega)
  def _gga_x_ityh_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_ityh.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_ityh_epsilon_xc

def gga_x_sfat(
  polarized: bool = True,
  _omega: Optional[float] = None,
) -> Callable:
  r"""
  A. Savin and H.-J. Flad.,  Int. J. Quantum Chem. 56, 327 (1995)
  `10.1002/qua.560560417 <http://onlinelibrary.wiley.com/doi/10.1002/qua.560560417/abstract>`_

  Y. Akinaga and S. Ten-no.,  Chem. Phys. Lett. 462, 348 (2008)
  `10.1016/j.cplett.2008.07.103 <http://www.sciencedirect.com/science/article/pii/S0009261408010609>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _omega : Optional[float], default: 0.44
    screening parameter
  """
  _omega = (_omega or 0.44)
  p = get_p("gga_x_sfat", polarized, _omega)
  def _gga_x_sfat_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_sfat.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_sfat_epsilon_xc

def hyb_mgga_xc_wb97m_v(
  polarized: bool = True,
  _cx00: Optional[float] = None,
  _cx01: Optional[float] = None,
  _cx10: Optional[float] = None,
  _css00: Optional[float] = None,
  _css04: Optional[float] = None,
  _css10: Optional[float] = None,
  _css20: Optional[float] = None,
  _css43: Optional[float] = None,
  _cos00: Optional[float] = None,
  _cos10: Optional[float] = None,
  _cos20: Optional[float] = None,
  _cos21: Optional[float] = None,
  _cos60: Optional[float] = None,
  _cos61: Optional[float] = None,
  _alpha: Optional[float] = None,
  _beta: Optional[float] = None,
  _omega: Optional[float] = None,
) -> Callable:
  r"""
  N. Mardirossian and M. Head-Gordon.,  J. Chem. Phys. 144, 214110 (2016)
  `10.1063/1.4952647 <http://scitation.aip.org/content/aip/journal/jcp/144/21/10.1063/1.4952647>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _cx00 : Optional[float], default: 0.85
    u^00 coefficient for exchange
  _cx01 : Optional[float], default: 1.007
    u^01 coefficient for exchange
  _cx10 : Optional[float], default: 0.259
    u^10 coefficient for exchange
  _css00 : Optional[float], default: 0.443
    u^00 coefficient for same-spin correlation
  _css04 : Optional[float], default: -1.437
    u^04 coefficient for same-spin correlation
  _css10 : Optional[float], default: -4.535
    u^10 coefficient for same-spin correlation
  _css20 : Optional[float], default: -3.39
    u^20 coefficient for same-spin correlation
  _css43 : Optional[float], default: 4.278
    u^43 coefficient for same-spin correlation
  _cos00 : Optional[float], default: 1.0
    u^00 coefficient for opposite-spin correlation
  _cos10 : Optional[float], default: 1.358
    u^10 coefficient for opposite-spin correlation
  _cos20 : Optional[float], default: 2.924
    u^20 coefficient for opposite-spin correlation
  _cos21 : Optional[float], default: -8.812
    u^21 coefficient for opposite-spin correlation
  _cos60 : Optional[float], default: -1.39
    u^60 coefficient for opposite-spin correlation
  _cos61 : Optional[float], default: 9.142
    u^61 coefficient for opposite-spin correlation
  _alpha : Optional[float], default: 1.0
    fraction of HF exchange
  _beta : Optional[float], default: -0.85
    fraction of short-range exchange
  _omega : Optional[float], default: 0.3
    range-separation constant
  """
  _cx00 = (_cx00 or 0.85)
  _cx01 = (_cx01 or 1.007)
  _cx10 = (_cx10 or 0.259)
  _css00 = (_css00 or 0.443)
  _css04 = (_css04 or -1.437)
  _css10 = (_css10 or -4.535)
  _css20 = (_css20 or -3.39)
  _css43 = (_css43 or 4.278)
  _cos00 = (_cos00 or 1.0)
  _cos10 = (_cos10 or 1.358)
  _cos20 = (_cos20 or 2.924)
  _cos21 = (_cos21 or -8.812)
  _cos60 = (_cos60 or -1.39)
  _cos61 = (_cos61 or 9.142)
  _alpha = (_alpha or 1.0)
  _beta = (_beta or -0.85)
  _omega = (_omega or 0.3)
  p = get_p("hyb_mgga_xc_wb97m_v", polarized, _cx00, _cx01, _cx10, _css00, _css04, _css10, _css20, _css43, _cos00, _cos10, _cos20, _cos21, _cos60, _cos61, _alpha, _beta, _omega)
  def _hyb_mgga_xc_wb97m_v_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_mgga_xc_wb97m_v.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _hyb_mgga_xc_wb97m_v_epsilon_xc

def lda_x_rel(
  polarized: bool = True,
) -> Callable:
  r"""
  A. K. Rajagopal.,  J. Phys. C: Solid State Phys. 11, L943 (1978)
  `10.1088/0022-3719/11/24/002 <http://stacks.iop.org/0022-3719/11/i = 24/a = 002>`_

  A. H. MacDonald and S. H. Vosko.,  J. Phys. C: Solid State Phys. 12, 2977 (1979)
  `10.1088/0022-3719/12/15/007 <http://stacks.iop.org/0022-3719/12/i = 15/a = 007>`_

  E. Engel, S. Keller, A. F. Bonetti, H. Müller, and R. M. Dreizler.,  Phys. Rev. A 52, 2750–2764 (1995)
  `10.1103/PhysRevA.52.2750 <http://link.aps.org/doi/10.1103/PhysRevA.52.2750>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("lda_x_rel", polarized, )
  def _lda_x_rel_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of lda_x_rel.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _lda_x_rel_epsilon_xc

def gga_x_sg4(
  polarized: bool = True,
) -> Callable:
  r"""
  L. A. Constantin, A. Terentjevs, F. Della Sala, P. Cortona, and E. Fabiano.,  Phys. Rev. B 93, 045126 (2016)
  `10.1103/PhysRevB.93.045126 <http://link.aps.org/doi/10.1103/PhysRevB.93.045126>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_x_sg4", polarized, )
  def _gga_x_sg4_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_sg4.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_sg4_epsilon_xc

def gga_c_sg4(
  polarized: bool = True,
) -> Callable:
  r"""
  L. A. Constantin, A. Terentjevs, F. Della Sala, P. Cortona, and E. Fabiano.,  Phys. Rev. B 93, 045126 (2016)
  `10.1103/PhysRevB.93.045126 <http://link.aps.org/doi/10.1103/PhysRevB.93.045126>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_c_sg4", polarized, )
  def _gga_c_sg4_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_c_sg4.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_c_sg4_epsilon_xc

def gga_x_gg99(
  polarized: bool = True,
) -> Callable:
  r"""
  A. T.B. Gilbert and P. M.W. Gill.,  Chem. Phys. Lett. 312, 511 - 521 (1999)
  `10.1016/S0009-2614(99)00836-2 <http://www.sciencedirect.com/science/article/pii/S0009261499008362>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_x_gg99", polarized, )
  def _gga_x_gg99_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_gg99.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_gg99_epsilon_xc

def lda_xc_1d_ehwlrg_1(
  polarized: bool = True,
) -> Callable:
  r"""
  M. T. Entwistle, M. J. P. Hodgson, J. Wetherell, B. Longstaff, J. D. Ramsden, and R. W. Godby.,  Phys. Rev. B 94, 205134 (2016)
  `10.1103/PhysRevB.94.205134 <http://link.aps.org/doi/10.1103/PhysRevB.94.205134>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("lda_xc_1d_ehwlrg_1", polarized, )
  def _lda_xc_1d_ehwlrg_1_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of lda_xc_1d_ehwlrg_1.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _lda_xc_1d_ehwlrg_1_epsilon_xc

def lda_xc_1d_ehwlrg_2(
  polarized: bool = True,
) -> Callable:
  r"""
  M. T. Entwistle, M. J. P. Hodgson, J. Wetherell, B. Longstaff, J. D. Ramsden, and R. W. Godby.,  Phys. Rev. B 94, 205134 (2016)
  `10.1103/PhysRevB.94.205134 <http://link.aps.org/doi/10.1103/PhysRevB.94.205134>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("lda_xc_1d_ehwlrg_2", polarized, )
  def _lda_xc_1d_ehwlrg_2_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of lda_xc_1d_ehwlrg_2.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _lda_xc_1d_ehwlrg_2_epsilon_xc

def lda_xc_1d_ehwlrg_3(
  polarized: bool = True,
) -> Callable:
  r"""
  M. T. Entwistle, M. J. P. Hodgson, J. Wetherell, B. Longstaff, J. D. Ramsden, and R. W. Godby.,  Phys. Rev. B 94, 205134 (2016)
  `10.1103/PhysRevB.94.205134 <http://link.aps.org/doi/10.1103/PhysRevB.94.205134>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("lda_xc_1d_ehwlrg_3", polarized, )
  def _lda_xc_1d_ehwlrg_3_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of lda_xc_1d_ehwlrg_3.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _lda_xc_1d_ehwlrg_3_epsilon_xc

def gga_x_pbepow(
  polarized: bool = True,
) -> Callable:
  r"""
  Éric Brémond.,  J. Chem. Phys. 145, 244102 (2016)
  `10.1063/1.4972815 <http://doi.org/10.1063/1.4972815>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_x_pbepow", polarized, )
  def _gga_x_pbepow_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_pbepow.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_pbepow_epsilon_xc

def mgga_x_tm(
  polarized: bool = True,
) -> Callable:
  r"""
  J. Tao and Y. Mo.,  Phys. Rev. Lett. 117, 073001 (2016)
  `10.1103/PhysRevLett.117.073001 <http://link.aps.org/doi/10.1103/PhysRevLett.117.073001>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("mgga_x_tm", polarized, )
  def _mgga_x_tm_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_tm.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_tm_epsilon_xc

def mgga_x_vt84(
  polarized: bool = True,
) -> Callable:
  r"""
  J. M. del Campo, J. L. Gázquez, S.B. Trickey, and A. Vela.,  Chem. Phys. Lett. 543, 179 - 183 (2012)
  `10.1016/j.cplett.2012.06.025 <http://www.sciencedirect.com/science/article/pii/S0009261412007117>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("mgga_x_vt84", polarized, )
  def _mgga_x_vt84_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_vt84.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_vt84_epsilon_xc

def mgga_x_sa_tpss(
  polarized: bool = True,
) -> Callable:
  r"""
  L. A. Constantin, E. Fabiano, J. M. Pitarke, and F. Della Sala.,  Phys. Rev. B 93, 115127 (2016)
  `10.1103/PhysRevB.93.115127 <http://link.aps.org/doi/10.1103/PhysRevB.93.115127>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("mgga_x_sa_tpss", polarized, )
  def _mgga_x_sa_tpss_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_sa_tpss.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_sa_tpss_epsilon_xc

def mgga_k_pc07(
  polarized: bool = True,
  _a: Optional[float] = None,
  _b: Optional[float] = None,
) -> Callable:
  r"""
  J. P. Perdew and L. A. Constantin.,  Phys. Rev. B 75, 155109 (2007)
  `10.1103/PhysRevB.75.155109 <http://link.aps.org/doi/10.1103/PhysRevB.75.155109>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a : Optional[float], default: 0.5389
    a
  _b : Optional[float], default: 3.0
    b
  """
  _a = (_a or 0.5389)
  _b = (_b or 3.0)
  p = get_p("mgga_k_pc07", polarized, _a, _b)
  def _mgga_k_pc07_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_k_pc07.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_k_pc07_epsilon_xc

def gga_x_kgg99(
  polarized: bool = True,
) -> Callable:
  r"""
  A. T.B. Gilbert and P. M.W. Gill.,  Chem. Phys. Lett. 312, 511 - 521 (1999)
  `10.1016/S0009-2614(99)00836-2 <http://www.sciencedirect.com/science/article/pii/S0009261499008362>`_

  
  Mixing of the following functionals:
    lda_x (coefficient: -0.05050908122584938)
    gga_x_gg99 (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_x_kgg99", polarized, )
  def _gga_x_kgg99_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_kgg99.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _gga_x_kgg99_epsilon_xc.cam_alpha = p.cam_alpha
  _gga_x_kgg99_epsilon_xc.cam_beta = p.cam_beta
  _gga_x_kgg99_epsilon_xc.cam_omega = p.cam_omega
  _gga_x_kgg99_epsilon_xc.nlc_b = p.nlc_b
  _gga_x_kgg99_epsilon_xc.nlc_C = p.nlc_C

  return _gga_x_kgg99_epsilon_xc

def gga_xc_hle16(
  polarized: bool = True,
  _cx0: Optional[float] = None,
  _cx1: Optional[float] = None,
  _cx2: Optional[float] = None,
  _cx3: Optional[float] = None,
  _cx4: Optional[float] = None,
  _css0: Optional[float] = None,
  _css1: Optional[float] = None,
  _css2: Optional[float] = None,
  _css3: Optional[float] = None,
  _css4: Optional[float] = None,
  _cos0: Optional[float] = None,
  _cos1: Optional[float] = None,
  _cos2: Optional[float] = None,
  _cos3: Optional[float] = None,
  _cos4: Optional[float] = None,
) -> Callable:
  r"""
  P. Verma and D. G. Truhlar.,  J. Phys. Chem. Lett. 8, 380-387 (2017)
  `10.1021/acs.jpclett.6b02757 <http://doi.org/10.1021/acs.jpclett.6b02757>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _cx0 : Optional[float], default: 1.3523
    u^0 coefficient for exchange
  _cx1 : Optional[float], default: -0.64792375
    u^1 coefficient for exchange
  _cx2 : Optional[float], default: 4.282025
    u^2 coefficient for exchange
  _cx3 : Optional[float], default: -3.2862625
    u^3 coefficient for exchange
  _cx4 : Optional[float], default: 2.8606875
    u^4 coefficient for exchange
  _css0 : Optional[float], default: 0.593885
    u^0 coefficient for same-spin correlation
  _css1 : Optional[float], default: -1.20146
    u^1 coefficient for same-spin correlation
  _css2 : Optional[float], default: 2.808705
    u^2 coefficient for same-spin correlation
  _css3 : Optional[float], default: -4.589615
    u^3 coefficient for same-spin correlation
  _css4 : Optional[float], default: 3.12399
    u^4 coefficient for same-spin correlation
  _cos0 : Optional[float], default: 0.294538
    u^0 coefficient for opposite-spin correlation
  _cos1 : Optional[float], default: 2.21187
    u^1 coefficient for opposite-spin correlation
  _cos2 : Optional[float], default: -9.6109
    u^2 coefficient for opposite-spin correlation
  _cos3 : Optional[float], default: 21.28605
    u^3 coefficient for opposite-spin correlation
  _cos4 : Optional[float], default: -21.0026
    u^4 coefficient for opposite-spin correlation
  """
  _cx0 = (_cx0 or 1.3523)
  _cx1 = (_cx1 or -0.64792375)
  _cx2 = (_cx2 or 4.282025)
  _cx3 = (_cx3 or -3.2862625)
  _cx4 = (_cx4 or 2.8606875)
  _css0 = (_css0 or 0.593885)
  _css1 = (_css1 or -1.20146)
  _css2 = (_css2 or 2.808705)
  _css3 = (_css3 or -4.589615)
  _css4 = (_css4 or 3.12399)
  _cos0 = (_cos0 or 0.294538)
  _cos1 = (_cos1 or 2.21187)
  _cos2 = (_cos2 or -9.6109)
  _cos3 = (_cos3 or 21.28605)
  _cos4 = (_cos4 or -21.0026)
  p = get_p("gga_xc_hle16", polarized, _cx0, _cx1, _cx2, _cx3, _cx4, _css0, _css1, _css2, _css3, _css4, _cos0, _cos1, _cos2, _cos3, _cos4)
  def _gga_xc_hle16_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_xc_hle16.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_xc_hle16_epsilon_xc

def lda_x_erf(
  polarized: bool = True,
  _omega: Optional[float] = None,
) -> Callable:
  r"""
  P. M. W. Gill, R. D. Adamson, and J. A. Pople.,  Mol. Phys. 88, 1005-1009 (1996)
  `10.1080/00268979609484488 <https://doi.org/10.1080/00268979609484488>`_

  J. Toulouse, A. Savin, and H.-J. Flad.,  Int. J. Quantum Chem. 100, 1047–1056 (2004)
  `10.1002/qua.20259 <http://doi.org/10.1002/qua.20259>`_

  Y. Tawada, T. Tsuneda, S. Yanagisawa, T. Yanai, and K. Hirao.,  J. Chem. Phys. 120, 8425-8433 (2004)
  `10.1063/1.1688752 <http://doi.org/10.1063/1.1688752>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _omega : Optional[float], default: 0.3
    screening parameter
  """
  _omega = (_omega or 0.3)
  p = get_p("lda_x_erf", polarized, _omega)
  def _lda_x_erf_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of lda_x_erf.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _lda_x_erf_epsilon_xc

def lda_xc_lp_a(
  polarized: bool = True,
  _a: Optional[float] = None,
  _b: Optional[float] = None,
) -> Callable:
  r"""
  C. Lee and R. G. Parr.,  Phys. Rev. A 42, 193–200 (1990)
  `10.1103/PhysRevA.42.193 <http://link.aps.org/doi/10.1103/PhysRevA.42.193>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a : Optional[float], default: -0.5351143334498224
    a parameter
  _b : Optional[float], default: 0.0
    b parameter
  """
  _a = (_a or -0.5351143334498224)
  _b = (_b or 0.0)
  p = get_p("lda_xc_lp_a", polarized, _a, _b)
  def _lda_xc_lp_a_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of lda_xc_lp_a.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _lda_xc_lp_a_epsilon_xc

def lda_xc_lp_b(
  polarized: bool = True,
  _a: Optional[float] = None,
  _b: Optional[float] = None,
) -> Callable:
  r"""
  C. Lee and R. G. Parr.,  Phys. Rev. A 42, 193–200 (1990)
  `10.1103/PhysRevA.42.193 <http://link.aps.org/doi/10.1103/PhysRevA.42.193>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a : Optional[float], default: -0.5620375447548563
    a parameter
  _b : Optional[float], default: 0.013639646243405107
    b parameter
  """
  _a = (_a or -0.5620375447548563)
  _b = (_b or 0.013639646243405107)
  p = get_p("lda_xc_lp_b", polarized, _a, _b)
  def _lda_xc_lp_b_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of lda_xc_lp_b.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _lda_xc_lp_b_epsilon_xc

def lda_x_rae(
  polarized: bool = True,
  N: Optional[float] = None,
) -> Callable:
  r"""
  A.I.M. Rae.,  Chem. Phys. Lett. 18, 574 - 577 (1973)
  `10.1016/0009-2614(73)80469-5 <//www.sciencedirect.com/science/article/pii/0009261473804695>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  N : Optional[float], default: 1.0
    Number of electrons
  """
  N = (N or 1.0)
  p = get_p("lda_x_rae", polarized, N)
  def _lda_x_rae_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of lda_x_rae.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _lda_x_rae_epsilon_xc

def lda_k_zlp(
  polarized: bool = True,
) -> Callable:
  r"""
  P. Fuentealba and O. Reyes.,  Chem. Phys. Lett. 232, 31 (1995)
  `10.1016/0009-2614(94)01321-L <http://www.sciencedirect.com/science/article/pii/000926149401321L>`_

  Q. Zhao, M. Levy, and R. G. Parr.,  Phys. Rev. A 47, 918–922 (1993)
  `10.1103/PhysRevA.47.918 <http://link.aps.org/doi/10.1103/PhysRevA.47.918>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("lda_k_zlp", polarized, )
  def _lda_k_zlp_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of lda_k_zlp.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _lda_k_zlp_epsilon_xc

def lda_c_mcweeny(
  polarized: bool = True,
  _a: Optional[float] = None,
  _b: Optional[float] = None,
) -> Callable:
  r"""
  R. McWeeny. Present status of the correlation problem. In B. Pullman and R. Parr, editors, The New World of Quantum Chemistry, 3–31. Boston, 1976. Reidel. doi:10.1007/978-94-010-1523-3_1.
  10.1007/978-94-010-1523-3_1

  G. B. Jr. and S. M. Rothstein.,  J. Chem. Phys. 69, 1177-1183 (1978)
  `10.1063/1.436705 <http://aip.scitation.org/doi/abs/10.1063/1.436705>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a : Optional[float], default: -0.21057382583143244
    a parameter
  _b : Optional[float], default: 2.0324585669249857
    b parameter
  """
  _a = (_a or -0.21057382583143244)
  _b = (_b or 2.0324585669249857)
  p = get_p("lda_c_mcweeny", polarized, _a, _b)
  def _lda_c_mcweeny_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of lda_c_mcweeny.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _lda_c_mcweeny_epsilon_xc

def lda_c_br78(
  polarized: bool = True,
  _a: Optional[float] = None,
  _b: Optional[float] = None,
) -> Callable:
  r"""
  G. B. Jr. and S. M. Rothstein.,  J. Chem. Phys. 69, 1177-1183 (1978)
  `10.1063/1.436705 <http://aip.scitation.org/doi/abs/10.1063/1.436705>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a : Optional[float], default: -0.02893830717448337
    a parameter
  _b : Optional[float], default: 0.2838847933816818
    b parameter
  """
  _a = (_a or -0.02893830717448337)
  _b = (_b or 0.2838847933816818)
  p = get_p("lda_c_br78", polarized, _a, _b)
  def _lda_c_br78_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of lda_c_br78.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _lda_c_br78_epsilon_xc

def gga_c_scan_e0(
  polarized: bool = True,
) -> Callable:
  r"""
  J. Sun, A. Ruzsinszky, and J. P. Perdew.,  Phys. Rev. Lett. 115, 036402 (2015)
  `10.1103/PhysRevLett.115.036402 <http://link.aps.org/doi/10.1103/PhysRevLett.115.036402>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_c_scan_e0", polarized, )
  def _gga_c_scan_e0_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_c_scan_e0.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_c_scan_e0_epsilon_xc

def lda_c_pk09(
  polarized: bool = True,
) -> Callable:
  r"""
  E. Proynov and J. Kong.,  Phys. Rev. A 79, 014103 (2009)
  `10.1103/PhysRevA.79.014103 <http://link.aps.org/doi/10.1103/PhysRevA.79.014103>`_

  E. Proynov and J. Kong.,  Phys. Rev. A 95, 059904 (2017)
  `10.1103/PhysRevA.95.059904 <https://link.aps.org/doi/10.1103/PhysRevA.95.059904>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("lda_c_pk09", polarized, )
  def _lda_c_pk09_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of lda_c_pk09.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _lda_c_pk09_epsilon_xc

def gga_c_gapc(
  polarized: bool = True,
) -> Callable:
  r"""
  E. Fabiano, P. E. Trevisanutto, A. Terentjevs, and L. A. Constantin.,  J. Chem. Theory Comput. 10, 2016-2026 (2014)
  `10.1021/ct500073b <http://doi.org/10.1021/ct500073b>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_c_gapc", polarized, )
  def _gga_c_gapc_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_c_gapc.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_c_gapc_epsilon_xc

def gga_c_gaploc(
  polarized: bool = True,
) -> Callable:
  r"""
  E. Fabiano, P. E. Trevisanutto, A. Terentjevs, and L. A. Constantin.,  J. Chem. Theory Comput. 10, 2016-2026 (2014)
  `10.1021/ct500073b <http://doi.org/10.1021/ct500073b>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_c_gaploc", polarized, )
  def _gga_c_gaploc_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_c_gaploc.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_c_gaploc_epsilon_xc

def gga_c_zvpbeint(
  polarized: bool = True,
) -> Callable:
  r"""
  L. A. Constantin, E. Fabiano, and F. D. Sala.,  J. Chem. Phys. 137, 194105 (2012)
  `10.1063/1.4766324 <http://doi.org/10.1063/1.4766324>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_c_zvpbeint", polarized, )
  def _gga_c_zvpbeint_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_c_zvpbeint.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_c_zvpbeint_epsilon_xc

def gga_c_zvpbesol(
  polarized: bool = True,
) -> Callable:
  r"""
  L. A. Constantin, E. Fabiano, and F. D. Sala.,  J. Chem. Phys. 137, 194105 (2012)
  `10.1063/1.4766324 <http://doi.org/10.1063/1.4766324>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_c_zvpbesol", polarized, )
  def _gga_c_zvpbesol_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_c_zvpbesol.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_c_zvpbesol_epsilon_xc

def gga_c_tm_lyp(
  polarized: bool = True,
  _a: Optional[float] = None,
  _b: Optional[float] = None,
  _c: Optional[float] = None,
  _d: Optional[float] = None,
) -> Callable:
  r"""
  A. J. Thakkar and S. P. McCarthy.,  J. Chem. Phys. 131, 134109 (2009)
  `10.1063/1.3243845 <http://doi.org/10.1063/1.3243845>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a : Optional[float], default: 0.0393
    Parameter a of LYP
  _b : Optional[float], default: 0.21
    Parameter b of LYP
  _c : Optional[float], default: 0.41
    Parameter c of LYP
  _d : Optional[float], default: 0.15
    Parameter d of LYP
  """
  _a = (_a or 0.0393)
  _b = (_b or 0.21)
  _c = (_c or 0.41)
  _d = (_d or 0.15)
  p = get_p("gga_c_tm_lyp", polarized, _a, _b, _c, _d)
  def _gga_c_tm_lyp_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_c_tm_lyp.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_c_tm_lyp_epsilon_xc

def gga_c_tm_pbe(
  polarized: bool = True,
  _beta: Optional[float] = None,
  _gamma: Optional[float] = None,
  _B: Optional[float] = None,
) -> Callable:
  r"""
  A. J. Thakkar and S. P. McCarthy.,  J. Chem. Phys. 131, 134109 (2009)
  `10.1063/1.3243845 <http://doi.org/10.1063/1.3243845>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _beta : Optional[float], default: -0.052728
    beta constant
  _gamma : Optional[float], default: -0.0156
    (1 - ln(2))/Pi^2 in the PBE
  _B : Optional[float], default: 1.0
    Multiplies the A t^2 term. Used in the SPBE functional
  """
  _beta = (_beta or -0.052728)
  _gamma = (_gamma or -0.0156)
  _B = (_B or 1.0)
  p = get_p("gga_c_tm_pbe", polarized, _beta, _gamma, _B)
  def _gga_c_tm_pbe_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_c_tm_pbe.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_c_tm_pbe_epsilon_xc

def gga_c_w94(
  polarized: bool = True,
) -> Callable:
  r"""
  L. C. Wilson.,  Chem. Phys. 181, 337 - 353 (1994)
  `10.1016/0301-0104(93)E0444-Z <http://www.sciencedirect.com/science/article/pii/0301010493E0444Z>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_c_w94", polarized, )
  def _gga_c_w94_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_c_w94.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_c_w94_epsilon_xc

def mgga_c_kcis(
  polarized: bool = True,
) -> Callable:
  r"""
  J. Rey and A. Savin.,  Int. J. Quantum Chem. 69, 581–590 (1998)
  `10.1002/(SICI)1097-461X(1998)69:4<581::AID-QUA16>3.0.CO;2-2 <http://doi.org/10.1002/(SICI)1097-461X(1998)69:4\<581::AID-QUA16\>3.0.CO;2-2>`_

  J. B. Krieger, J. Chen, G. J. Iafrate, and A. Savin. Construction of An Accurate Self-interaction-corrected Correlation Energy Functional Based on An Electron Gas with A Gap, pages 463–477. Springer US, Boston, MA, 1999. URL: http://doi.org/10.1007/978-1-4615-4715-0_28, doi:10.1007/978-1-4615-4715-0_28.
  `10.1007/978-1-4615-4715-0_28 <http://doi.org/10.1007/978-1-4615-4715-0_28>`_

  J. B. Krieger, J. Chen, and S. Kurth.,  AIP Conf. Proc. 577, 48-69 (2001)
  `10.1063/1.1390178 <http://aip.scitation.org/doi/abs/10.1063/1.1390178>`_

  S. Kurth, J. P. Perdew, and P. Blaha.,  Int. J. Quantum Chem. 75, 889-909 (1999)
  `10.1002/(SICI)1097-461X(1999)75:4/5<889::AID-QUA54>3.0.CO;2-8 <https://onlinelibrary.wiley.com/doi/abs/10.1002/%28SICI%291097-461X%281999%2975%3A4/5%3C889%3A%3AAID-QUA54%3E3.0.CO%3B2-8>`_

  J. Toulouse, A. Savin, and C. Adamo.,  J. Chem. Phys. 117, 10465-10473 (2002)
  `10.1063/1.1521432 <http://doi.org/10.1063/1.1521432>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("mgga_c_kcis", polarized, )
  def _mgga_c_kcis_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_c_kcis.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_c_kcis_epsilon_xc

def hyb_mgga_xc_b0kcis(
  polarized: bool = True,
) -> Callable:
  r"""
  J. Toulouse, A. Savin, and C. Adamo.,  J. Chem. Phys. 117, 10465-10473 (2002)
  `10.1063/1.1521432 <http://doi.org/10.1063/1.1521432>`_

  
  Mixing of the following functionals:
    gga_x_b88 (coefficient: 0.75)
    mgga_c_kcis (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("hyb_mgga_xc_b0kcis", polarized, )
  def _hyb_mgga_xc_b0kcis_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_mgga_xc_b0kcis.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  
  _hyb_mgga_xc_b0kcis_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_mgga_xc_b0kcis_epsilon_xc.cam_beta = p.cam_beta
  _hyb_mgga_xc_b0kcis_epsilon_xc.cam_omega = p.cam_omega
  _hyb_mgga_xc_b0kcis_epsilon_xc.nlc_b = p.nlc_b
  _hyb_mgga_xc_b0kcis_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_mgga_xc_b0kcis_epsilon_xc

def mgga_xc_lp90(
  polarized: bool = True,
) -> Callable:
  r"""
  C. Lee and R. G. Parr.,  Phys. Rev. A 42, 193–200 (1990)
  `10.1103/PhysRevA.42.193 <http://link.aps.org/doi/10.1103/PhysRevA.42.193>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("mgga_xc_lp90", polarized, )
  def _mgga_xc_lp90_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_xc_lp90.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_xc_lp90_epsilon_xc

def gga_c_cs1(
  polarized: bool = True,
) -> Callable:
  r"""
  N. C. Handy and A. J. Cohen.,  J. Chem. Phys. 116, 5411-5418 (2002)
  `10.1063/1.1457432 <http://doi.org/10.1063/1.1457432>`_

  E. I. Proynov and A. J. Thakkar.,  Int. J. Quantum Chem. 106, 436–446 (2006)
  `10.1002/qua.20758 <http://doi.org/10.1002/qua.20758>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_c_cs1", polarized, )
  def _gga_c_cs1_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_c_cs1.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_c_cs1_epsilon_xc

def hyb_mgga_xc_mpw1kcis(
  polarized: bool = True,
) -> Callable:
  r"""
  Y. Zhao, N. González-García, and D. G. Truhlar.,  J. Phys. Chem. A 109, 2012-2018 (2005)
  `10.1021/jp045141s <http://doi.org/10.1021/jp045141s>`_

  
  Mixing of the following functionals:
    gga_x_mpw91 (coefficient: 0.85)
    mgga_c_kcis (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("hyb_mgga_xc_mpw1kcis", polarized, )
  def _hyb_mgga_xc_mpw1kcis_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_mgga_xc_mpw1kcis.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  
  _hyb_mgga_xc_mpw1kcis_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_mgga_xc_mpw1kcis_epsilon_xc.cam_beta = p.cam_beta
  _hyb_mgga_xc_mpw1kcis_epsilon_xc.cam_omega = p.cam_omega
  _hyb_mgga_xc_mpw1kcis_epsilon_xc.nlc_b = p.nlc_b
  _hyb_mgga_xc_mpw1kcis_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_mgga_xc_mpw1kcis_epsilon_xc

def hyb_mgga_xc_mpwkcis1k(
  polarized: bool = True,
) -> Callable:
  r"""
  Y. Zhao, N. González-García, and D. G. Truhlar.,  J. Phys. Chem. A 109, 2012-2018 (2005)
  `10.1021/jp045141s <http://doi.org/10.1021/jp045141s>`_

  
  Mixing of the following functionals:
    gga_x_mpw91 (coefficient: 0.5900000000000001)
    mgga_c_kcis (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("hyb_mgga_xc_mpwkcis1k", polarized, )
  def _hyb_mgga_xc_mpwkcis1k_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_mgga_xc_mpwkcis1k.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  
  _hyb_mgga_xc_mpwkcis1k_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_mgga_xc_mpwkcis1k_epsilon_xc.cam_beta = p.cam_beta
  _hyb_mgga_xc_mpwkcis1k_epsilon_xc.cam_omega = p.cam_omega
  _hyb_mgga_xc_mpwkcis1k_epsilon_xc.nlc_b = p.nlc_b
  _hyb_mgga_xc_mpwkcis1k_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_mgga_xc_mpwkcis1k_epsilon_xc

def hyb_mgga_xc_pbe1kcis(
  polarized: bool = True,
) -> Callable:
  r"""
  Y. Zhao and D. G. Truhlar.,  J. Chem. Theory Comput. 1, 415-432 (2005)
  `10.1021/ct049851d <http://doi.org/10.1021/ct049851d>`_

  
  Mixing of the following functionals:
    gga_x_pbe (coefficient: 0.78)
    mgga_c_kcis (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("hyb_mgga_xc_pbe1kcis", polarized, )
  def _hyb_mgga_xc_pbe1kcis_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_mgga_xc_pbe1kcis.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  
  _hyb_mgga_xc_pbe1kcis_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_mgga_xc_pbe1kcis_epsilon_xc.cam_beta = p.cam_beta
  _hyb_mgga_xc_pbe1kcis_epsilon_xc.cam_omega = p.cam_omega
  _hyb_mgga_xc_pbe1kcis_epsilon_xc.nlc_b = p.nlc_b
  _hyb_mgga_xc_pbe1kcis_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_mgga_xc_pbe1kcis_epsilon_xc

def hyb_mgga_xc_tpss1kcis(
  polarized: bool = True,
) -> Callable:
  r"""
  Y. Zhao, B. J. Lynch, and D. G. Truhlar.,  Phys. Chem. Chem. Phys. 7, 43-52 (2005)
  `10.1039/B416937A <http://doi.org/10.1039/B416937A>`_

  
  Mixing of the following functionals:
    mgga_x_tpss (coefficient: 0.87)
    mgga_c_kcis (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("hyb_mgga_xc_tpss1kcis", polarized, )
  def _hyb_mgga_xc_tpss1kcis_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_mgga_xc_tpss1kcis.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  
  _hyb_mgga_xc_tpss1kcis_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_mgga_xc_tpss1kcis_epsilon_xc.cam_beta = p.cam_beta
  _hyb_mgga_xc_tpss1kcis_epsilon_xc.cam_omega = p.cam_omega
  _hyb_mgga_xc_tpss1kcis_epsilon_xc.nlc_b = p.nlc_b
  _hyb_mgga_xc_tpss1kcis_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_mgga_xc_tpss1kcis_epsilon_xc

def gga_x_b88m(
  polarized: bool = True,
  _beta: Optional[float] = None,
  _gamma: Optional[float] = None,
) -> Callable:
  r"""
  E. Proynov, H. Chermette, and D. R. Salahub.,  J. Chem. Phys. 113, 10013-10027 (2000)
  `10.1063/1.1321309 <http://doi.org/10.1063/1.1321309>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _beta : Optional[float], default: 0.0045
    beta/X_FACTOR_C is the coefficient of the gradient expansion
  _gamma : Optional[float], default: 6.0
    gamma should be 6 to get the right asymptotics of Ex
  """
  _beta = (_beta or 0.0045)
  _gamma = (_gamma or 6.0)
  p = get_p("gga_x_b88m", polarized, _beta, _gamma)
  def _gga_x_b88m_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_b88m.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_b88m_epsilon_xc

def mgga_c_b88(
  polarized: bool = True,
) -> Callable:
  r"""
  A. D. Becke.,  J. Chem. Phys. 88, 1053-1062 (1988)
  `10.1063/1.454274 <http://doi.org/10.1063/1.454274>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("mgga_c_b88", polarized, )
  def _mgga_c_b88_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_c_b88.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_c_b88_epsilon_xc

def hyb_gga_xc_b5050lyp(
  polarized: bool = True,
  _a0: Optional[float] = None,
  _ax: Optional[float] = None,
  _ac: Optional[float] = None,
) -> Callable:
  r"""
  Y. Shao, M. Head-Gordon, and A. I. Krylov.,  J. Chem. Phys. 118, 4807-4818 (2003)
  `10.1063/1.1545679 <http://doi.org/10.1063/1.1545679>`_

  
  Mixing of the following functionals:
    lda_x (coefficient: 0.08000000000000002)
    gga_x_b88 (coefficient: 0.42)
    lda_c_vwn (coefficient: 0.18999999999999995)
    gga_c_lyp (coefficient: 0.81)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a0 : Optional[float], default: 0.5
    Fraction of exact exchange
  _ax : Optional[float], default: 0.42
    Fraction of GGA exchange correction
  _ac : Optional[float], default: 0.81
    Fraction of GGA correlation correction
  """
  _a0 = (_a0 or 0.5)
  _ax = (_ax or 0.42)
  _ac = (_ac or 0.81)
  p = get_p("hyb_gga_xc_b5050lyp", polarized, _a0, _ax, _ac)
  def _hyb_gga_xc_b5050lyp_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_b5050lyp.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_b5050lyp_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_b5050lyp_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_b5050lyp_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_b5050lyp_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_b5050lyp_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_b5050lyp_epsilon_xc

def lda_c_ow_lyp(
  polarized: bool = True,
  _a: Optional[float] = None,
  _b: Optional[float] = None,
) -> Callable:
  r"""
  P. A. Stewart and P. M. W. Gill.,  J. Chem. Soc., Faraday Trans. 91, 4337-4341 (1995)
  `10.1039/FT9959104337 <http://doi.org/10.1039/FT9959104337>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a : Optional[float], default: -0.08741787146828796
    a parameter
  _b : Optional[float], default: 1.777508569912321
    b parameter
  """
  _a = (_a or -0.08741787146828796)
  _b = (_b or 1.777508569912321)
  p = get_p("lda_c_ow_lyp", polarized, _a, _b)
  def _lda_c_ow_lyp_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of lda_c_ow_lyp.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _lda_c_ow_lyp_epsilon_xc

def lda_c_ow(
  polarized: bool = True,
  _a: Optional[float] = None,
  _b: Optional[float] = None,
) -> Callable:
  r"""
  P. A. Stewart and P. M. W. Gill.,  J. Chem. Soc., Faraday Trans. 91, 4337-4341 (1995)
  `10.1039/FT9959104337 <http://doi.org/10.1039/FT9959104337>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a : Optional[float], default: -0.09349695077738808
    a parameter
  _b : Optional[float], default: 1.777508569912321
    b parameter
  """
  _a = (_a or -0.09349695077738808)
  _b = (_b or 1.777508569912321)
  p = get_p("lda_c_ow", polarized, _a, _b)
  def _lda_c_ow_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of lda_c_ow.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _lda_c_ow_epsilon_xc

def mgga_x_gx(
  polarized: bool = True,
  _c0: Optional[float] = None,
  _c1: Optional[float] = None,
  _alphainf: Optional[float] = None,
) -> Callable:
  r"""
  P.-F. Loos.,  J. Chem. Phys. 146, 114108 (2017)
  `10.1063/1.4978409 <http://doi.org/10.1063/1.4978409>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _c0 : Optional[float], default: 0.827411
    c0
  _c1 : Optional[float], default: -0.64356
    c1
  _alphainf : Optional[float], default: 0.852
    alphainf
  """
  _c0 = (_c0 or 0.827411)
  _c1 = (_c1 or -0.64356)
  _alphainf = (_alphainf or 0.852)
  p = get_p("mgga_x_gx", polarized, _c0, _c1, _alphainf)
  def _mgga_x_gx_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_gx.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_gx_epsilon_xc

def mgga_x_pbe_gx(
  polarized: bool = True,
) -> Callable:
  r"""
  P.-F. Loos.,  J. Chem. Phys. 146, 114108 (2017)
  `10.1063/1.4978409 <http://doi.org/10.1063/1.4978409>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("mgga_x_pbe_gx", polarized, )
  def _mgga_x_pbe_gx_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_pbe_gx.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_pbe_gx_epsilon_xc

def lda_xc_gdsmfb(
  polarized: bool = True,
  T: Optional[float] = None,
) -> Callable:
  r"""
  S. Groth, T. Dornheim, T. Sjostrom, F. D. Malone, W. M. C. Foulkes, and M. Bonitz.,  Phys. Rev. Lett. 119, 135001 (2017)
  `10.1103/PhysRevLett.119.135001 <https://link.aps.org/doi/10.1103/PhysRevLett.119.135001>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  T : Optional[float], default: 0.0
    Temperature
  """
  T = (T or 0.0)
  p = get_p("lda_xc_gdsmfb", polarized, T)
  def _lda_xc_gdsmfb_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of lda_xc_gdsmfb.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _lda_xc_gdsmfb_epsilon_xc

def lda_c_gk72(
  polarized: bool = True,
) -> Callable:
  r"""
  R. G. Gordon and Y. S. Kim.,  J. Chem. Phys. 56, 3122-3133 (1972)
  `10.1063/1.1677649 <https://doi.org/10.1063/1.1677649>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("lda_c_gk72", polarized, )
  def _lda_c_gk72_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of lda_c_gk72.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _lda_c_gk72_epsilon_xc

def lda_c_karasiev(
  polarized: bool = True,
  _ap: Optional[float] = None,
  _bp: Optional[float] = None,
  _cp: Optional[float] = None,
  _af: Optional[float] = None,
  _bf: Optional[float] = None,
  _cf: Optional[float] = None,
) -> Callable:
  r"""
  V. V. Karasiev.,  J. Chem. Phys. 145, 157101 (2016)
  `10.1063/1.4964758 <https://doi.org/10.1063/1.4964758>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _ap : Optional[float], default: -0.01554535
    ap parameter
  _bp : Optional[float], default: 21.7392245
    bp parameter
  _cp : Optional[float], default: 20.4562557
    cp parameter
  _af : Optional[float], default: -0.007772675
    af parameter
  _bf : Optional[float], default: 28.3559732
    bf parameter
  _cf : Optional[float], default: 27.4203609
    cf parameter
  """
  _ap = (_ap or -0.01554535)
  _bp = (_bp or 21.7392245)
  _cp = (_cp or 20.4562557)
  _af = (_af or -0.007772675)
  _bf = (_bf or 28.3559732)
  _cf = (_cf or 27.4203609)
  p = get_p("lda_c_karasiev", polarized, _ap, _bp, _cp, _af, _bf, _cf)
  def _lda_c_karasiev_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of lda_c_karasiev.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _lda_c_karasiev_epsilon_xc

def lda_k_lp96(
  polarized: bool = True,
  _C1: Optional[float] = None,
  _C2: Optional[float] = None,
  _C3: Optional[float] = None,
) -> Callable:
  r"""
  S. Liu and R. G. Parr.,  Phys. Rev. A 53, 2211–2219 (1996)
  `10.1103/PhysRevA.53.2211 <http://link.aps.org/doi/10.1103/PhysRevA.53.2211>`_

  S. Liu and R.G Parr.,  J. Mol. Struct.: THEOCHEM 501–502, 29 - 34 (2000)
  `10.1016/S0166-1280(99)00410-8 <http://www.sciencedirect.com/science/article/pii/S0166128099004108>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _C1 : Optional[float], default: 0.03777
    C1 parameter
  _C2 : Optional[float], default: -0.01002
    C2 parameter
  _C3 : Optional[float], default: 0.00039
    C3 parameter
  """
  _C1 = (_C1 or 0.03777)
  _C2 = (_C2 or -0.01002)
  _C3 = (_C3 or 0.00039)
  p = get_p("lda_k_lp96", polarized, _C1, _C2, _C3)
  def _lda_k_lp96_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of lda_k_lp96.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _lda_k_lp96_epsilon_xc

def mgga_x_revscan(
  polarized: bool = True,
  _c1: Optional[float] = None,
  _c2: Optional[float] = None,
  _d: Optional[float] = None,
  _k1: Optional[float] = None,
) -> Callable:
  r"""
  P. D. Mezei, G. I. Csonka, and M. Kállay.,  J. Chem. Theory Comput. 14, 2469-2479 (2018)
  `10.1021/acs.jctc.8b00072 <https://doi.org/10.1021/acs.jctc.8b00072>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _c1 : Optional[float], default: 0.607
    c1 parameter
  _c2 : Optional[float], default: 0.7
    c2 parameter
  _d : Optional[float], default: 1.37
    d parameter
  _k1 : Optional[float], default: 0.065
    k1 parameter
  """
  _c1 = (_c1 or 0.607)
  _c2 = (_c2 or 0.7)
  _d = (_d or 1.37)
  _k1 = (_k1 or 0.065)
  p = get_p("mgga_x_revscan", polarized, _c1, _c2, _d, _k1)
  def _mgga_x_revscan_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_revscan.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_revscan_epsilon_xc

def mgga_c_revscan(
  polarized: bool = True,
) -> Callable:
  r"""
  P. D. Mezei, G. I. Csonka, and M. Kállay.,  J. Chem. Theory Comput. 14, 2469-2479 (2018)
  `10.1021/acs.jctc.8b00072 <https://doi.org/10.1021/acs.jctc.8b00072>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("mgga_c_revscan", polarized, )
  def _mgga_c_revscan_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_c_revscan.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_c_revscan_epsilon_xc

def hyb_mgga_x_revscan0(
  polarized: bool = True,
  _exx: Optional[float] = None,
) -> Callable:
  r"""
  P. D. Mezei, G. I. Csonka, and M. Kállay.,  J. Chem. Theory Comput. 14, 2469-2479 (2018)
  `10.1021/acs.jctc.8b00072 <https://doi.org/10.1021/acs.jctc.8b00072>`_

  
  Mixing of the following functionals:
    mgga_x_revscan (coefficient: 0.75)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _exx : Optional[float], default: 0.25
    fraction of exact exchange
  """
  _exx = (_exx or 0.25)
  p = get_p("hyb_mgga_x_revscan0", polarized, _exx)
  def _hyb_mgga_x_revscan0_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_mgga_x_revscan0.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  
  _hyb_mgga_x_revscan0_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_mgga_x_revscan0_epsilon_xc.cam_beta = p.cam_beta
  _hyb_mgga_x_revscan0_epsilon_xc.cam_omega = p.cam_omega
  _hyb_mgga_x_revscan0_epsilon_xc.nlc_b = p.nlc_b
  _hyb_mgga_x_revscan0_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_mgga_x_revscan0_epsilon_xc

def mgga_c_scan_vv10(
  polarized: bool = True,
) -> Callable:
  r"""
  J. G. Brandenburg, J. E. Bates, J. Sun, and J. P. Perdew.,  Phys. Rev. B 94, 115144 (2016)
  `10.1103/PhysRevB.94.115144 <https://link.aps.org/doi/10.1103/PhysRevB.94.115144>`_

  
  Mixing of the following functionals:
    mgga_c_scan (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("mgga_c_scan_vv10", polarized, )
  def _mgga_c_scan_vv10_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_c_scan_vv10.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  
  _mgga_c_scan_vv10_epsilon_xc.cam_alpha = p.cam_alpha
  _mgga_c_scan_vv10_epsilon_xc.cam_beta = p.cam_beta
  _mgga_c_scan_vv10_epsilon_xc.cam_omega = p.cam_omega
  _mgga_c_scan_vv10_epsilon_xc.nlc_b = p.nlc_b
  _mgga_c_scan_vv10_epsilon_xc.nlc_C = p.nlc_C

  return _mgga_c_scan_vv10_epsilon_xc

def mgga_c_revscan_vv10(
  polarized: bool = True,
) -> Callable:
  r"""
  P. D. Mezei, G. I. Csonka, and M. Kállay.,  J. Chem. Theory Comput. 14, 2469-2479 (2018)
  `10.1021/acs.jctc.8b00072 <https://doi.org/10.1021/acs.jctc.8b00072>`_

  
  Mixing of the following functionals:
    mgga_c_revscan (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("mgga_c_revscan_vv10", polarized, )
  def _mgga_c_revscan_vv10_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_c_revscan_vv10.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  
  _mgga_c_revscan_vv10_epsilon_xc.cam_alpha = p.cam_alpha
  _mgga_c_revscan_vv10_epsilon_xc.cam_beta = p.cam_beta
  _mgga_c_revscan_vv10_epsilon_xc.cam_omega = p.cam_omega
  _mgga_c_revscan_vv10_epsilon_xc.nlc_b = p.nlc_b
  _mgga_c_revscan_vv10_epsilon_xc.nlc_C = p.nlc_C

  return _mgga_c_revscan_vv10_epsilon_xc

def mgga_x_br89_explicit(
  polarized: bool = True,
  _gamma: Optional[float] = None,
) -> Callable:
  r"""
  A. D. Becke and M. R. Roussel.,  Phys. Rev. A 39, 3761 (1989)
  `10.1103/PhysRevA.39.3761 <http://link.aps.org/doi/10.1103/PhysRevA.39.3761>`_

  E. Proynov, Z. Gan, and J. Kong.,  Chem. Phys. Lett. 455, 103 - 109 (2008)
  `10.1016/j.cplett.2008.02.039 <http://www.sciencedirect.com/science/article/pii/S0009261408002285>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _gamma : Optional[float], default: 0.8
    gamma
  """
  _gamma = (_gamma or 0.8)
  p = get_p("mgga_x_br89_explicit", polarized, _gamma)
  def _mgga_x_br89_explicit_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_br89_explicit.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_br89_explicit_epsilon_xc

def gga_xc_kt3(
  polarized: bool = True,
) -> Callable:
  r"""
  T. W. Keal and D. J. Tozer.,  J. Chem. Phys. 121, 5654-5660 (2004)
  `10.1063/1.1784777 <https://doi.org/10.1063/1.1784777>`_

  
  Mixing of the following functionals:
    lda_x (coefficient: -0.5877016340967667)
    gga_c_lyp (coefficient: 0.864409)
    gga_x_kt1 (coefficient: 1.0)
    gga_x_optx (coefficient: 0.6464052972361336)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_xc_kt3", polarized, )
  def _gga_xc_kt3_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_xc_kt3.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _gga_xc_kt3_epsilon_xc.cam_alpha = p.cam_alpha
  _gga_xc_kt3_epsilon_xc.cam_beta = p.cam_beta
  _gga_xc_kt3_epsilon_xc.cam_omega = p.cam_omega
  _gga_xc_kt3_epsilon_xc.nlc_b = p.nlc_b
  _gga_xc_kt3_epsilon_xc.nlc_C = p.nlc_C

  return _gga_xc_kt3_epsilon_xc

def hyb_lda_xc_bn05(
  polarized: bool = True,
  _omega: Optional[float] = None,
) -> Callable:
  r"""
  R. Baer and D. Neuhauser.,  Phys. Rev. Lett. 94, 043002 (2005)
  `10.1103/PhysRevLett.94.043002 <https://link.aps.org/doi/10.1103/PhysRevLett.94.043002>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _omega : Optional[float], default: 1.0
    Range separation parameter
  """
  _omega = (_omega or 1.0)
  p = get_p("hyb_lda_xc_bn05", polarized, _omega)
  def _hyb_lda_xc_bn05_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_lda_xc_bn05.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _hyb_lda_xc_bn05_epsilon_xc

def hyb_gga_xc_lb07(
  polarized: bool = True,
  _w: Optional[float] = None,
  _omega: Optional[float] = None,
) -> Callable:
  r"""
  E. Livshits and R. Baer.,  Phys. Chem. Chem. Phys. 9, 2932-2941 (2007)
  `10.1039/B617919C <http://doi.org/10.1039/B617919C>`_

  
  Mixing of the following functionals:
    lda_x_erf (coefficient: 0.9)
    gga_c_lyp (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _w : Optional[float], default: 0.9
    Fraction of short-range LDA exchange
  _omega : Optional[float], default: 0.5
    Range separation parameter
  """
  _w = (_w or 0.9)
  _omega = (_omega or 0.5)
  p = get_p("hyb_gga_xc_lb07", polarized, _w, _omega)
  def _hyb_gga_xc_lb07_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_lb07.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_lb07_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_lb07_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_lb07_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_lb07_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_lb07_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_lb07_epsilon_xc

def lda_c_pmgb06(
  polarized: bool = True,
  _omega: Optional[float] = None,
) -> Callable:
  r"""
  S. Paziani, S. Moroni, P. Gori-Giorgi, and G. B. Bachelet.,  Phys. Rev. B 73, 155111 (2006)
  `10.1103/PhysRevB.73.155111 <https://link.aps.org/doi/10.1103/PhysRevB.73.155111>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _omega : Optional[float], default: 0.3
    screening parameter
  """
  _omega = (_omega or 0.3)
  p = get_p("lda_c_pmgb06", polarized, _omega)
  def _lda_c_pmgb06_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of lda_c_pmgb06.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _lda_c_pmgb06_epsilon_xc

def gga_k_gds08(
  polarized: bool = True,
) -> Callable:
  r"""
  L. M. Ghiringhelli and L. Delle Site.,  Phys. Rev. B 77, 073104 (2008)
  `10.1103/PhysRevB.77.073104 <https://link.aps.org/doi/10.1103/PhysRevB.77.073104>`_

  
  Mixing of the following functionals:
    gga_k_vw (coefficient: 1.0)
    lda_k_gds08_worker (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_k_gds08", polarized, )
  def _gga_k_gds08_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_k_gds08.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _gga_k_gds08_epsilon_xc.cam_alpha = p.cam_alpha
  _gga_k_gds08_epsilon_xc.cam_beta = p.cam_beta
  _gga_k_gds08_epsilon_xc.cam_omega = p.cam_omega
  _gga_k_gds08_epsilon_xc.nlc_b = p.nlc_b
  _gga_k_gds08_epsilon_xc.nlc_C = p.nlc_C

  return _gga_k_gds08_epsilon_xc

def gga_k_ghds10(
  polarized: bool = True,
) -> Callable:
  r"""
  L. M. Ghiringhelli, I. P. Hamilton, and L. D. Site.,  J. Chem. Phys. 132, 014106 (2010)
  `10.1063/1.3280953 <https://doi.org/10.1063/1.3280953>`_

  
  Mixing of the following functionals:
    gga_k_tfvw (coefficient: 1.0)
    lda_k_gds08_worker (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_k_ghds10", polarized, )
  def _gga_k_ghds10_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_k_ghds10.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _gga_k_ghds10_epsilon_xc.cam_alpha = p.cam_alpha
  _gga_k_ghds10_epsilon_xc.cam_beta = p.cam_beta
  _gga_k_ghds10_epsilon_xc.cam_omega = p.cam_omega
  _gga_k_ghds10_epsilon_xc.nlc_b = p.nlc_b
  _gga_k_ghds10_epsilon_xc.nlc_C = p.nlc_C

  return _gga_k_ghds10_epsilon_xc

def gga_k_ghds10r(
  polarized: bool = True,
) -> Callable:
  r"""
  S. B. Trickey, V. V. Karasiev, and A. Vela.,  Phys. Rev. B 84, 075146 (2011)
  `10.1103/PhysRevB.84.075146 <https://link.aps.org/doi/10.1103/PhysRevB.84.075146>`_

  L. M. Ghiringhelli, I. P. Hamilton, and L. D. Site.,  J. Chem. Phys. 132, 014106 (2010)
  `10.1063/1.3280953 <https://doi.org/10.1063/1.3280953>`_

  
  Mixing of the following functionals:
    gga_k_tfvw (coefficient: 1.0)
    lda_k_gds08_worker (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_k_ghds10r", polarized, )
  def _gga_k_ghds10r_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_k_ghds10r.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _gga_k_ghds10r_epsilon_xc.cam_alpha = p.cam_alpha
  _gga_k_ghds10r_epsilon_xc.cam_beta = p.cam_beta
  _gga_k_ghds10r_epsilon_xc.cam_omega = p.cam_omega
  _gga_k_ghds10r_epsilon_xc.nlc_b = p.nlc_b
  _gga_k_ghds10r_epsilon_xc.nlc_C = p.nlc_C

  return _gga_k_ghds10r_epsilon_xc

def gga_k_tkvln(
  polarized: bool = True,
) -> Callable:
  r"""
  S. B. Trickey, V. V. Karasiev, and A. Vela.,  Phys. Rev. B 84, 075146 (2011)
  `10.1103/PhysRevB.84.075146 <https://link.aps.org/doi/10.1103/PhysRevB.84.075146>`_

  L. M. Ghiringhelli, I. P. Hamilton, and L. D. Site.,  J. Chem. Phys. 132, 014106 (2010)
  `10.1063/1.3280953 <https://doi.org/10.1063/1.3280953>`_

  
  Mixing of the following functionals:
    gga_k_tfvw (coefficient: 1.0)
    lda_k_gds08_worker (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_k_tkvln", polarized, )
  def _gga_k_tkvln_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_k_tkvln.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _gga_k_tkvln_epsilon_xc.cam_alpha = p.cam_alpha
  _gga_k_tkvln_epsilon_xc.cam_beta = p.cam_beta
  _gga_k_tkvln_epsilon_xc.cam_omega = p.cam_omega
  _gga_k_tkvln_epsilon_xc.nlc_b = p.nlc_b
  _gga_k_tkvln_epsilon_xc.nlc_C = p.nlc_C

  return _gga_k_tkvln_epsilon_xc

def gga_k_pbe3(
  polarized: bool = True,
  _a: Optional[float] = None,
  _c1: Optional[float] = None,
  _c2: Optional[float] = None,
  _c3: Optional[float] = None,
) -> Callable:
  r"""
  V. V. Karasiev, S. B. Trickey, and F. E. Harris.,  J. Comput.-Aided Mater. Des. 13, 111–129 (2006)
  `10.1007/s10820-006-9019-8 <https://doi.org/10.1007/s10820-006-9019-8>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a : Optional[float], default: 4.1355
    a
  _c1 : Optional[float], default: -3.7425
    c1
  _c2 : Optional[float], default: 50.258
    c2
  _c3 : Optional[float], default: 0.0
    c3
  """
  _a = (_a or 4.1355)
  _c1 = (_c1 or -3.7425)
  _c2 = (_c2 or 50.258)
  _c3 = (_c3 or 0.0)
  p = get_p("gga_k_pbe3", polarized, _a, _c1, _c2, _c3)
  def _gga_k_pbe3_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_k_pbe3.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_k_pbe3_epsilon_xc

def gga_k_pbe4(
  polarized: bool = True,
  _a: Optional[float] = None,
  _c1: Optional[float] = None,
  _c2: Optional[float] = None,
  _c3: Optional[float] = None,
) -> Callable:
  r"""
  V. V. Karasiev, S. B. Trickey, and F. E. Harris.,  J. Comput.-Aided Mater. Des. 13, 111–129 (2006)
  `10.1007/s10820-006-9019-8 <https://doi.org/10.1007/s10820-006-9019-8>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a : Optional[float], default: 1.7107
    a
  _c1 : Optional[float], default: -7.2333
    c1
  _c2 : Optional[float], default: 61.645
    c2
  _c3 : Optional[float], default: -93.683
    c3
  """
  _a = (_a or 1.7107)
  _c1 = (_c1 or -7.2333)
  _c2 = (_c2 or 61.645)
  _c3 = (_c3 or -93.683)
  p = get_p("gga_k_pbe4", polarized, _a, _c1, _c2, _c3)
  def _gga_k_pbe4_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_k_pbe4.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_k_pbe4_epsilon_xc

def gga_k_exp4(
  polarized: bool = True,
) -> Callable:
  r"""
  V. V. Karasiev, S. B. Trickey, and F. E. Harris.,  J. Comput.-Aided Mater. Des. 13, 111–129 (2006)
  `10.1007/s10820-006-9019-8 <https://doi.org/10.1007/s10820-006-9019-8>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_k_exp4", polarized, )
  def _gga_k_exp4_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_k_exp4.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_k_exp4_epsilon_xc

def hyb_mgga_xc_b98(
  polarized: bool = True,
) -> Callable:
  r"""
  A. D. Becke.,  J. Chem. Phys. 109, 2092-2098 (1998)
  `10.1063/1.476722 <https://doi.org/10.1063/1.476722>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("hyb_mgga_xc_b98", polarized, )
  def _hyb_mgga_xc_b98_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_mgga_xc_b98.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _hyb_mgga_xc_b98_epsilon_xc

def lda_xc_tih(
  polarized: bool = True,
) -> Callable:
  r"""
  D. J. Tozer, V. E. Ingamells, and N. C. Handy.,  J. Chem. Phys. 105, 9200-9213 (1996)
  `10.1063/1.472753 <https://doi.org/10.1063/1.472753>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("lda_xc_tih", polarized, )
  def _lda_xc_tih_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of lda_xc_tih.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _lda_xc_tih_epsilon_xc

def lda_x_1d_exponential(
  polarized: bool = True,
  beta: Optional[float] = None,
) -> Callable:
  r"""
  N. Helbig, J. I. Fuks, M. Casula, M. J. Verstraete, M. A. L. Marques, I. V. Tokatly, and A. Rubio.,  Phys. Rev. A 83, 032503 (2011)
  `10.1103/PhysRevA.83.032503 <http://link.aps.org/doi/10.1103/PhysRevA.83.032503>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  beta : Optional[float], default: 1.0
    Parameter of the exponential
  """
  beta = (beta or 1.0)
  p = get_p("lda_x_1d_exponential", polarized, beta)
  def _lda_x_1d_exponential_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of lda_x_1d_exponential.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _lda_x_1d_exponential_epsilon_xc

def gga_x_sfat_pbe(
  polarized: bool = True,
  _omega: Optional[float] = None,
) -> Callable:
  r"""
  A. Savin and H.-J. Flad.,  Int. J. Quantum Chem. 56, 327 (1995)
  `10.1002/qua.560560417 <http://onlinelibrary.wiley.com/doi/10.1002/qua.560560417/abstract>`_

  Y. Akinaga and S. Ten-no.,  Chem. Phys. Lett. 462, 348 (2008)
  `10.1016/j.cplett.2008.07.103 <http://www.sciencedirect.com/science/article/pii/S0009261408010609>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _omega : Optional[float], default: 0.44
    screening parameter
  """
  _omega = (_omega or 0.44)
  p = get_p("gga_x_sfat_pbe", polarized, _omega)
  def _gga_x_sfat_pbe_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_sfat_pbe.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_sfat_pbe_epsilon_xc

def mgga_x_br89_explicit_1(
  polarized: bool = True,
  _gamma: Optional[float] = None,
) -> Callable:
  r"""
  A. D. Becke and M. R. Roussel.,  Phys. Rev. A 39, 3761 (1989)
  `10.1103/PhysRevA.39.3761 <http://link.aps.org/doi/10.1103/PhysRevA.39.3761>`_

  E. Proynov, Z. Gan, and J. Kong.,  Chem. Phys. Lett. 455, 103 - 109 (2008)
  `10.1016/j.cplett.2008.02.039 <http://www.sciencedirect.com/science/article/pii/S0009261408002285>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _gamma : Optional[float], default: 1.0
    gamma
  """
  _gamma = (_gamma or 1.0)
  p = get_p("mgga_x_br89_explicit_1", polarized, _gamma)
  def _mgga_x_br89_explicit_1_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_br89_explicit_1.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_br89_explicit_1_epsilon_xc

def mgga_x_regtpss(
  polarized: bool = True,
) -> Callable:
  r"""
  A. Ruzsinszky, J. Sun, B. Xiao, and G. I. Csonka.,  J. Chem. Theory Comput. 8, 2078-2087 (2012)
  `10.1021/ct300269u <https://doi.org/10.1021/ct300269u>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("mgga_x_regtpss", polarized, )
  def _mgga_x_regtpss_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_regtpss.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_regtpss_epsilon_xc

def gga_x_fd_lb94(
  polarized: bool = True,
  _beta: Optional[float] = None,
) -> Callable:
  r"""
  A. P. Gaiduk and V. N. Staroverov.,  Phys. Rev. A 83, 012509 (2011)
  `10.1103/PhysRevA.83.012509 <https://link.aps.org/doi/10.1103/PhysRevA.83.012509>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _beta : Optional[float], default: 0.05
    beta parameter
  """
  _beta = (_beta or 0.05)
  p = get_p("gga_x_fd_lb94", polarized, _beta)
  def _gga_x_fd_lb94_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_fd_lb94.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_fd_lb94_epsilon_xc

def gga_x_fd_revlb94(
  polarized: bool = True,
  _beta: Optional[float] = None,
) -> Callable:
  r"""
  A. P. Gaiduk and V. N. Staroverov.,  Phys. Rev. A 83, 012509 (2011)
  `10.1103/PhysRevA.83.012509 <https://link.aps.org/doi/10.1103/PhysRevA.83.012509>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _beta : Optional[float], default: 0.004
    beta parameter
  """
  _beta = (_beta or 0.004)
  p = get_p("gga_x_fd_revlb94", polarized, _beta)
  def _gga_x_fd_revlb94_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_fd_revlb94.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_fd_revlb94_epsilon_xc

def gga_c_zvpbeloc(
  polarized: bool = True,
) -> Callable:
  r"""
  E. Fabiano, L. A. Constantin, P. Cortona, and F. Della Sala.,  J. Chem. Theory Comput. 11, 122-131 (2015)
  `10.1021/ct500902p <https://doi.org/10.1021/ct500902p>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_c_zvpbeloc", polarized, )
  def _gga_c_zvpbeloc_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_c_zvpbeloc.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_c_zvpbeloc_epsilon_xc

def hyb_gga_xc_apbe0(
  polarized: bool = True,
) -> Callable:
  r"""
  E. Fabiano, L. A. Constantin, P. Cortona, and F. Della Sala.,  J. Chem. Theory Comput. 11, 122-131 (2015)
  `10.1021/ct500902p <https://doi.org/10.1021/ct500902p>`_

  
  Mixing of the following functionals:
    gga_x_apbe (coefficient: 0.75)
    gga_c_apbe (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("hyb_gga_xc_apbe0", polarized, )
  def _hyb_gga_xc_apbe0_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_apbe0.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_apbe0_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_apbe0_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_apbe0_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_apbe0_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_apbe0_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_apbe0_epsilon_xc

def hyb_gga_xc_hapbe(
  polarized: bool = True,
) -> Callable:
  r"""
  E. Fabiano, L. A. Constantin, P. Cortona, and F. Della Sala.,  J. Chem. Theory Comput. 11, 122-131 (2015)
  `10.1021/ct500902p <https://doi.org/10.1021/ct500902p>`_

  
  Mixing of the following functionals:
    gga_x_apbe (coefficient: 0.8)
    gga_c_apbe (coefficient: 0.8)
    gga_c_zvpbeloc (coefficient: 0.2)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("hyb_gga_xc_hapbe", polarized, )
  def _hyb_gga_xc_hapbe_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_hapbe.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_hapbe_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_hapbe_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_hapbe_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_hapbe_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_hapbe_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_hapbe_epsilon_xc

def mgga_x_2d_js17(
  polarized: bool = True,
) -> Callable:
  r"""
  S. Jana and P. Samal.,  J. Phys. Chem. A 121, 4804-4811 (2017)
  `10.1021/acs.jpca.7b03686 <https://doi.org/10.1021/acs.jpca.7b03686>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("mgga_x_2d_js17", polarized, )
  def _mgga_x_2d_js17_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_2d_js17.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_2d_js17_epsilon_xc

def hyb_gga_xc_rcam_b3lyp(
  polarized: bool = True,
  _alpha: Optional[float] = None,
  _beta: Optional[float] = None,
  _omega: Optional[float] = None,
  _ab88: Optional[float] = None,
) -> Callable:
  r"""
  A. J. Cohen, P. Mori-Sánchez, and W. Yang.,  J. Chem. Phys. 126, 191109 (2007)
  `10.1063/1.2741248 <https://doi.org/10.1063/1.2741248>`_

  
  Mixing of the following functionals:
    lda_x (coefficient: -0.13590000000000002)
    gga_x_b88 (coefficient: 0.002589999999999981)
    gga_x_ityh (coefficient: 0.94979)
    gga_c_lyp (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _alpha : Optional[float], default: 1.13331
    Fraction of Hartree-Fock exchange
  _beta : Optional[float], default: -0.94979
    Fraction of short-range exact exchange
  _omega : Optional[float], default: 0.33
    Range separation parameter
  _ab88 : Optional[float], default: 0.95238
    Fraction of B88 exchange
  """
  _alpha = (_alpha or 1.13331)
  _beta = (_beta or -0.94979)
  _omega = (_omega or 0.33)
  _ab88 = (_ab88 or 0.95238)
  p = get_p("hyb_gga_xc_rcam_b3lyp", polarized, _alpha, _beta, _omega, _ab88)
  def _hyb_gga_xc_rcam_b3lyp_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_rcam_b3lyp.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_rcam_b3lyp_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_rcam_b3lyp_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_rcam_b3lyp_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_rcam_b3lyp_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_rcam_b3lyp_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_rcam_b3lyp_epsilon_xc

def hyb_gga_xc_wc04(
  polarized: bool = True,
) -> Callable:
  r"""
  K. W. Wiitala, T. R. Hoye, and C. J. Cramer.,  J. Chem. Theory Comput. 2, 1085-1092 (2006)
  `10.1021/ct6001016 <https://doi.org/10.1021/ct6001016>`_

  
  Mixing of the following functionals:
    lda_x (coefficient: -0.9998)
    gga_x_b88 (coefficient: 0.9999)
    lda_c_vwn_rpa (coefficient: 0.9998)
    gga_c_lyp (coefficient: 0.0001)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("hyb_gga_xc_wc04", polarized, )
  def _hyb_gga_xc_wc04_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_wc04.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_wc04_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_wc04_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_wc04_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_wc04_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_wc04_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_wc04_epsilon_xc

def hyb_gga_xc_wp04(
  polarized: bool = True,
) -> Callable:
  r"""
  K. W. Wiitala, T. R. Hoye, and C. J. Cramer.,  J. Chem. Theory Comput. 2, 1085-1092 (2006)
  `10.1021/ct6001016 <https://doi.org/10.1021/ct6001016>`_

  
  Mixing of the following functionals:
    lda_x (coefficient: 0.03849999999999998)
    gga_x_b88 (coefficient: 0.9614)
    lda_c_vwn_rpa (coefficient: 0.9998)
    gga_c_lyp (coefficient: 0.0001)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("hyb_gga_xc_wp04", polarized, )
  def _hyb_gga_xc_wp04_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_wp04.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_wp04_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_wp04_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_wp04_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_wp04_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_wp04_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_wp04_epsilon_xc

def gga_k_lkt(
  polarized: bool = True,
  _a: Optional[float] = None,
) -> Callable:
  r"""
  K. Luo, V. V. Karasiev, and S. B. Trickey.,  Phys. Rev. B 98, 041111 (2018)
  `10.1103/PhysRevB.98.041111 <https://link.aps.org/doi/10.1103/PhysRevB.98.041111>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a : Optional[float], default: 1.3
    a
  """
  _a = (_a or 1.3)
  p = get_p("gga_k_lkt", polarized, _a)
  def _gga_k_lkt_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_k_lkt.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_k_lkt_epsilon_xc

def hyb_gga_xc_camh_b3lyp(
  polarized: bool = True,
  _alpha: Optional[float] = None,
  _beta: Optional[float] = None,
  _omega: Optional[float] = None,
  _ac: Optional[float] = None,
) -> Callable:
  r"""
  Y. Shao, Y. Mei, D. Sundholm, and V. R. I. Kaila.,  J. Chem. Theory Comput. 16, 587-600 (2020)
  `10.1021/acs.jctc.9b00823 <https://doi.org/10.1021/acs.jctc.9b00823>`_

  
  Mixing of the following functionals:
    gga_x_b88 (coefficient: 0.5)
    gga_x_ityh (coefficient: 0.31)
    lda_c_vwn (coefficient: 0.18999999999999995)
    gga_c_lyp (coefficient: 0.81)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _alpha : Optional[float], default: 0.5
    Fraction of Hartree-Fock exchange
  _beta : Optional[float], default: -0.31
    Fraction of short-range exact exchange
  _omega : Optional[float], default: 0.33
    Range separation parameter
  _ac : Optional[float], default: 0.81
    Fraction of LYP correlation
  """
  _alpha = (_alpha or 0.5)
  _beta = (_beta or -0.31)
  _omega = (_omega or 0.33)
  _ac = (_ac or 0.81)
  p = get_p("hyb_gga_xc_camh_b3lyp", polarized, _alpha, _beta, _omega, _ac)
  def _hyb_gga_xc_camh_b3lyp_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_camh_b3lyp.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_camh_b3lyp_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_camh_b3lyp_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_camh_b3lyp_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_camh_b3lyp_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_camh_b3lyp_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_camh_b3lyp_epsilon_xc

def hyb_gga_xc_whpbe0(
  polarized: bool = True,
  _alpha: Optional[float] = None,
  _beta: Optional[float] = None,
  _omega: Optional[float] = None,
) -> Callable:
  r"""
  Y. Shao, Y. Mei, D. Sundholm, and V. R. I. Kaila.,  J. Chem. Theory Comput. 16, 587-600 (2020)
  `10.1021/acs.jctc.9b00823 <https://doi.org/10.1021/acs.jctc.9b00823>`_

  
  Mixing of the following functionals:
    gga_x_hjs_pbe (coefficient: 0.25)
    gga_c_pbe (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _alpha : Optional[float], default: 0.5
    Fraction of Hartree-Fock exchange
  _beta : Optional[float], default: -0.25
    Fraction of short-range exact exchange
  _omega : Optional[float], default: 0.2
    Range separation constant
  """
  _alpha = (_alpha or 0.5)
  _beta = (_beta or -0.25)
  _omega = (_omega or 0.2)
  p = get_p("hyb_gga_xc_whpbe0", polarized, _alpha, _beta, _omega)
  def _hyb_gga_xc_whpbe0_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_whpbe0.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_whpbe0_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_whpbe0_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_whpbe0_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_whpbe0_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_whpbe0_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_whpbe0_epsilon_xc

def gga_k_pbe2(
  polarized: bool = True,
  _a: Optional[float] = None,
  _c1: Optional[float] = None,
  _c2: Optional[float] = None,
  _c3: Optional[float] = None,
) -> Callable:
  r"""
  V. V. Karasiev, S. B. Trickey, and F. E. Harris.,  J. Comput.-Aided Mater. Des. 13, 111–129 (2006)
  `10.1007/s10820-006-9019-8 <https://doi.org/10.1007/s10820-006-9019-8>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a : Optional[float], default: 0.2942
    a
  _c1 : Optional[float], default: 2.0309
    c1
  _c2 : Optional[float], default: 0.0
    c2
  _c3 : Optional[float], default: 0.0
    c3
  """
  _a = (_a or 0.2942)
  _c1 = (_c1 or 2.0309)
  _c2 = (_c2 or 0.0)
  _c3 = (_c3 or 0.0)
  p = get_p("gga_k_pbe2", polarized, _a, _c1, _c2, _c3)
  def _gga_k_pbe2_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_k_pbe2.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_k_pbe2_epsilon_xc

def mgga_k_l04(
  polarized: bool = True,
  _kappa: Optional[float] = None,
) -> Callable:
  r"""
  S. Laricchia, L. A. Constantin, E. Fabiano, and F. Della Sala.,  J. Chem. Theory Comput. 10, 164-179 (2014)
  `10.1021/ct400836s <https://doi.org/10.1021/ct400836s>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _kappa : Optional[float], default: 0.402
    kappa parameter
  """
  _kappa = (_kappa or 0.402)
  p = get_p("mgga_k_l04", polarized, _kappa)
  def _mgga_k_l04_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_k_l04.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_k_l04_epsilon_xc

def mgga_k_l06(
  polarized: bool = True,
  _kappa: Optional[float] = None,
) -> Callable:
  r"""
  S. Laricchia, L. A. Constantin, E. Fabiano, and F. Della Sala.,  J. Chem. Theory Comput. 10, 164-179 (2014)
  `10.1021/ct400836s <https://doi.org/10.1021/ct400836s>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _kappa : Optional[float], default: 0.623
    kappa parameter
  """
  _kappa = (_kappa or 0.623)
  p = get_p("mgga_k_l06", polarized, _kappa)
  def _mgga_k_l06_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_k_l06.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_k_l06_epsilon_xc

def gga_k_vt84f(
  polarized: bool = True,
  _mu: Optional[float] = None,
  _alpha: Optional[float] = None,
) -> Callable:
  r"""
  V. V. Karasiev, D. Chakraborty, O. A. Shukruto, and S. B. Trickey.,  Phys. Rev. B 88, 161108 (2013)
  `10.1103/PhysRevB.88.161108 <https://link.aps.org/doi/10.1103/PhysRevB.88.161108>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _mu : Optional[float], default: 2.778
    mu parameter
  _alpha : Optional[float], default: 1.2965
    alpha parameter
  """
  _mu = (_mu or 2.778)
  _alpha = (_alpha or 1.2965)
  p = get_p("gga_k_vt84f", polarized, _mu, _alpha)
  def _gga_k_vt84f_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_k_vt84f.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_k_vt84f_epsilon_xc

def gga_k_lgap(
  polarized: bool = True,
  _kappa: Optional[float] = None,
  _mu1: Optional[float] = None,
  _mu2: Optional[float] = None,
  _mu3: Optional[float] = None,
) -> Callable:
  r"""
  L. A. Constantin, E. Fabiano, S. Śmiga, and F. Della Sala.,  Phys. Rev. B 95, 115153 (2017)
  `10.1103/PhysRevB.95.115153 <https://link.aps.org/doi/10.1103/PhysRevB.95.115153>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _kappa : Optional[float], default: 0.8
    kappa parameter
  _mu1 : Optional[float], default: 0.016375
    mu1 parameter
  _mu2 : Optional[float], default: 0.2317340703125
    mu2 parameter
  _mu3 : Optional[float], default: 0.03653651653161553
    mu3 parameter
  """
  _kappa = (_kappa or 0.8)
  _mu1 = (_mu1 or 0.016375)
  _mu2 = (_mu2 or 0.2317340703125)
  _mu3 = (_mu3 or 0.03653651653161553)
  p = get_p("gga_k_lgap", polarized, _kappa, _mu1, _mu2, _mu3)
  def _gga_k_lgap_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_k_lgap.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_k_lgap_epsilon_xc

def mgga_k_rda(
  polarized: bool = True,
  _A0: Optional[float] = None,
  _A1: Optional[float] = None,
  _A2: Optional[float] = None,
  _A3: Optional[float] = None,
  _beta1: Optional[float] = None,
  _beta2: Optional[float] = None,
  _beta3: Optional[float] = None,
  _a: Optional[float] = None,
  _b: Optional[float] = None,
  _c: Optional[float] = None,
) -> Callable:
  r"""
  V. V. Karasiev, R. S. Jones, S. B. Trickey, and F. E. Harris.,  Phys. Rev. B 80, 245120 (2009)
  `10.1103/PhysRevB.80.245120 <https://link.aps.org/doi/10.1103/PhysRevB.80.245120>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _A0 : Optional[float], default: 0.50616
    A0
  _A1 : Optional[float], default: 3.04121
    A1
  _A2 : Optional[float], default: -0.34567
    A2
  _A3 : Optional[float], default: -1.89738
    A3
  _beta1 : Optional[float], default: 1.29691
    beta1
  _beta2 : Optional[float], default: 0.56184
    beta2
  _beta3 : Optional[float], default: 0.21944
    beta3
  _a : Optional[float], default: 46.47662
    a
  _b : Optional[float], default: 18.80658
    b
  _c : Optional[float], default: -0.90346
    c
  """
  _A0 = (_A0 or 0.50616)
  _A1 = (_A1 or 3.04121)
  _A2 = (_A2 or -0.34567)
  _A3 = (_A3 or -1.89738)
  _beta1 = (_beta1 or 1.29691)
  _beta2 = (_beta2 or 0.56184)
  _beta3 = (_beta3 or 0.21944)
  _a = (_a or 46.47662)
  _b = (_b or 18.80658)
  _c = (_c or -0.90346)
  p = get_p("mgga_k_rda", polarized, _A0, _A1, _A2, _A3, _beta1, _beta2, _beta3, _a, _b, _c)
  def _mgga_k_rda_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_k_rda.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_k_rda_epsilon_xc

def gga_x_ityh_optx(
  polarized: bool = True,
  _a: Optional[float] = None,
  _b: Optional[float] = None,
  _gamma: Optional[float] = None,
  _omega: Optional[float] = None,
) -> Callable:
  r"""
  N. C. Handy and A. J. Cohen.,  Mol. Phys. 99, 403 (2001)
  `10.1080/00268970010018431 <http://www.tandfonline.com/doi/abs/10.1080/00268970010018431>`_

  H. Iikura, T. Tsuneda, T. Yanai, and K. Hirao.,  J. Chem. Phys. 115, 3540 (2001)
  `10.1063/1.1383587 <http://scitation.aip.org/content/aip/journal/jcp/115/8/10.1063/1.1383587>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a : Optional[float], default: 1.05151
    a
  _b : Optional[float], default: 1.5385818404305593
    b
  _gamma : Optional[float], default: 0.006
    gamma
  _omega : Optional[float], default: 0.2
    omega
  """
  _a = (_a or 1.05151)
  _b = (_b or 1.5385818404305593)
  _gamma = (_gamma or 0.006)
  _omega = (_omega or 0.2)
  p = get_p("gga_x_ityh_optx", polarized, _a, _b, _gamma, _omega)
  def _gga_x_ityh_optx_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_ityh_optx.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_ityh_optx_epsilon_xc

def gga_x_ityh_pbe(
  polarized: bool = True,
  _kappa: Optional[float] = None,
  _mu: Optional[float] = None,
  _omega: Optional[float] = None,
) -> Callable:
  r"""
  J. P. Perdew, K. Burke, and M. Ernzerhof.,  Phys. Rev. Lett. 77, 3865 (1996)
  `10.1103/PhysRevLett.77.3865 <http://link.aps.org/doi/10.1103/PhysRevLett.77.3865>`_

  J. P. Perdew, K. Burke, and M. Ernzerhof.,  Phys. Rev. Lett. 78, 1396 (1997)
  `10.1103/PhysRevLett.78.1396 <http://link.aps.org/doi/10.1103/PhysRevLett.78.1396>`_

  H. Iikura, T. Tsuneda, T. Yanai, and K. Hirao.,  J. Chem. Phys. 115, 3540 (2001)
  `10.1063/1.1383587 <http://scitation.aip.org/content/aip/journal/jcp/115/8/10.1063/1.1383587>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _kappa : Optional[float], default: 0.804
    Asymptotic value of the enhancement function
  _mu : Optional[float], default: 0.2195149727645171
    Coefficient of the 2nd order expansion
  _omega : Optional[float], default: 0.33
    Range-separation parameter
  """
  _kappa = (_kappa or 0.804)
  _mu = (_mu or 0.2195149727645171)
  _omega = (_omega or 0.33)
  p = get_p("gga_x_ityh_pbe", polarized, _kappa, _mu, _omega)
  def _gga_x_ityh_pbe_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_ityh_pbe.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_ityh_pbe_epsilon_xc

def gga_c_lypr(
  polarized: bool = True,
  _a: Optional[float] = None,
  _b: Optional[float] = None,
  _c: Optional[float] = None,
  _d: Optional[float] = None,
  _m1: Optional[float] = None,
  _m2: Optional[float] = None,
  _omega: Optional[float] = None,
) -> Callable:
  r"""
  W. Ai, W.-H. Fang, and N. Q. Su.,  J. Phys. Chem. Lett. 12, 1207-1213 (2021)
  `10.1021/acs.jpclett.0c03621 <https://doi.org/10.1021/acs.jpclett.0c03621>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a : Optional[float], default: 0.04918
    Parameter a
  _b : Optional[float], default: 0.132
    Parameter b
  _c : Optional[float], default: 0.2533
    Parameter c
  _d : Optional[float], default: 0.349
    Parameter d
  _m1 : Optional[float], default: 0.15283842794759825
    Parameter m1
  _m2 : Optional[float], default: 0.8733624454148472
    Parameter m2
  _omega : Optional[float], default: 0.33
    Range-separation parameter
  """
  _a = (_a or 0.04918)
  _b = (_b or 0.132)
  _c = (_c or 0.2533)
  _d = (_d or 0.349)
  _m1 = (_m1 or 0.15283842794759825)
  _m2 = (_m2 or 0.8733624454148472)
  _omega = (_omega or 0.33)
  p = get_p("gga_c_lypr", polarized, _a, _b, _c, _d, _m1, _m2, _omega)
  def _gga_c_lypr_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_c_lypr.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_c_lypr_epsilon_xc

def hyb_gga_xc_lc_blyp_ea(
  polarized: bool = True,
  _omega: Optional[float] = None,
) -> Callable:
  r"""
  L. N. Anderson, M. B. Oviedo, and B. M. Wong.,  J. Chem. Theory Comput. 13, 1656-1666 (2017)
  `10.1021/acs.jctc.6b01249 <https://doi.org/10.1021/acs.jctc.6b01249>`_

  Y. Tawada, T. Tsuneda, S. Yanagisawa, T. Yanai, and K. Hirao.,  J. Chem. Phys. 120, 8425-8433 (2004)
  `10.1063/1.1688752 <http://doi.org/10.1063/1.1688752>`_

  
  Mixing of the following functionals:
    gga_x_ityh (coefficient: 1.0)
    gga_c_lyp (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _omega : Optional[float], default: 0.3
    Range separation parameter
  """
  _omega = (_omega or 0.3)
  p = get_p("hyb_gga_xc_lc_blyp_ea", polarized, _omega)
  def _hyb_gga_xc_lc_blyp_ea_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_lc_blyp_ea.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_lc_blyp_ea_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_lc_blyp_ea_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_lc_blyp_ea_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_lc_blyp_ea_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_lc_blyp_ea_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_lc_blyp_ea_epsilon_xc

def mgga_x_regtm(
  polarized: bool = True,
) -> Callable:
  r"""
  A. Patra, S. Jana, and P. Samal.,  J. Chem. Phys. 153, 184112 (2020)
  `10.1063/5.0025173 <https://doi.org/10.1063/5.0025173>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("mgga_x_regtm", polarized, )
  def _mgga_x_regtm_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_regtm.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_regtm_epsilon_xc

def mgga_k_gea2(
  polarized: bool = True,
) -> Callable:
  r"""
  A. S. Kompaneets and E. S. Pavlovskii.,  Zh. Eksp. Teor. Fiz. 31, 427 (1956)
  

  D. A. Kirznits.,  Zh. Eksp. Teor. Fiz. 32, 115 (1957)
  

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("mgga_k_gea2", polarized, )
  def _mgga_k_gea2_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_k_gea2.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_k_gea2_epsilon_xc

def mgga_k_gea4(
  polarized: bool = True,
) -> Callable:
  r"""
  C. H. Hodges.,  Can. J. Phys. 51, 1428-1437 (1973)
  `10.1139/p73-189 <https://doi.org/10.1139/p73-189>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("mgga_k_gea4", polarized, )
  def _mgga_k_gea4_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_k_gea4.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_k_gea4_epsilon_xc

def mgga_k_csk1(
  polarized: bool = True,
  _a: Optional[float] = None,
) -> Callable:
  r"""
  A. C. Cancio, D. Stewart, and A. Kuna.,  J. Chem. Phys. 144, 084107 (2016)
  `10.1063/1.4942016 <https://doi.org/10.1063/1.4942016>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a : Optional[float], default: 1.0
    exponent used in the interpolation
  """
  _a = (_a or 1.0)
  p = get_p("mgga_k_csk1", polarized, _a)
  def _mgga_k_csk1_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_k_csk1.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_k_csk1_epsilon_xc

def mgga_k_csk4(
  polarized: bool = True,
  _a: Optional[float] = None,
) -> Callable:
  r"""
  A. C. Cancio, D. Stewart, and A. Kuna.,  J. Chem. Phys. 144, 084107 (2016)
  `10.1063/1.4942016 <https://doi.org/10.1063/1.4942016>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a : Optional[float], default: 4.0
    exponent used in the interpolation
  """
  _a = (_a or 4.0)
  p = get_p("mgga_k_csk4", polarized, _a)
  def _mgga_k_csk4_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_k_csk4.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_k_csk4_epsilon_xc

def mgga_k_csk_loc1(
  polarized: bool = True,
  _a: Optional[float] = None,
  _cp: Optional[float] = None,
  _cq: Optional[float] = None,
) -> Callable:
  r"""
  A. C. Cancio, D. Stewart, and A. Kuna.,  J. Chem. Phys. 144, 084107 (2016)
  `10.1063/1.4942016 <https://doi.org/10.1063/1.4942016>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a : Optional[float], default: 1.0
    exponent used in the interpolation
  _cp : Optional[float], default: -0.275
    coefficient of the p term
  _cq : Optional[float], default: 2.895
    coefficient of the q term
  """
  _a = (_a or 1.0)
  _cp = (_cp or -0.275)
  _cq = (_cq or 2.895)
  p = get_p("mgga_k_csk_loc1", polarized, _a, _cp, _cq)
  def _mgga_k_csk_loc1_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_k_csk_loc1.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_k_csk_loc1_epsilon_xc

def mgga_k_csk_loc4(
  polarized: bool = True,
  _a: Optional[float] = None,
  _cp: Optional[float] = None,
  _cq: Optional[float] = None,
) -> Callable:
  r"""
  A. C. Cancio, D. Stewart, and A. Kuna.,  J. Chem. Phys. 144, 084107 (2016)
  `10.1063/1.4942016 <https://doi.org/10.1063/1.4942016>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a : Optional[float], default: 4.0
    exponent used in the interpolation
  _cp : Optional[float], default: -0.275
    coefficient of the p term
  _cq : Optional[float], default: 2.895
    coefficient of the q term
  """
  _a = (_a or 4.0)
  _cp = (_cp or -0.275)
  _cq = (_cq or 2.895)
  p = get_p("mgga_k_csk_loc4", polarized, _a, _cp, _cq)
  def _mgga_k_csk_loc4_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_k_csk_loc4.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_k_csk_loc4_epsilon_xc

def gga_k_lgap_ge(
  polarized: bool = True,
  _mu1: Optional[float] = None,
  _mu2: Optional[float] = None,
  _mu3: Optional[float] = None,
) -> Callable:
  r"""
  L. A. Constantin, E. Fabiano, S. Śmiga, and F. Della Sala.,  Phys. Rev. B 95, 115153 (2017)
  `10.1103/PhysRevB.95.115153 <https://link.aps.org/doi/10.1103/PhysRevB.95.115153>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _mu1 : Optional[float], default: 0.0131
    mu1 parameter
  _mu2 : Optional[float], default: 0.18528
    mu2 parameter
  _mu3 : Optional[float], default: 0.0262
    mu3 parameter
  """
  _mu1 = (_mu1 or 0.0131)
  _mu2 = (_mu2 or 0.18528)
  _mu3 = (_mu3 or 0.0262)
  p = get_p("gga_k_lgap_ge", polarized, _mu1, _mu2, _mu3)
  def _gga_k_lgap_ge_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_k_lgap_ge.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_k_lgap_ge_epsilon_xc

def mgga_k_pc07_opt(
  polarized: bool = True,
  _a: Optional[float] = None,
  _b: Optional[float] = None,
) -> Callable:
  r"""
  D. Mejia-Rodriguez and S. B. Trickey.,  Phys. Rev. A 96, 052512 (2017)
  `10.1103/PhysRevA.96.052512 <https://link.aps.org/doi/10.1103/PhysRevA.96.052512>`_

  J. P. Perdew and L. A. Constantin.,  Phys. Rev. B 75, 155109 (2007)
  `10.1103/PhysRevB.75.155109 <http://link.aps.org/doi/10.1103/PhysRevB.75.155109>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a : Optional[float], default: 1.78472
    a
  _b : Optional[float], default: 0.258304
    b
  """
  _a = (_a or 1.78472)
  _b = (_b or 0.258304)
  p = get_p("mgga_k_pc07_opt", polarized, _a, _b)
  def _mgga_k_pc07_opt_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_k_pc07_opt.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_k_pc07_opt_epsilon_xc

def gga_k_tfvw_opt(
  polarized: bool = True,
  _lambda_: Optional[float] = None,
  _gamma: Optional[float] = None,
) -> Callable:
  r"""
  L. A. Espinosa Leal, A. Karpenko, M. A. Caro, and O. Lopez-Acevedo.,  Phys. Chem. Chem. Phys. 17, 31463-31471 (2015)
  `10.1039/C5CP01211B <http://dx.doi.org/10.1039/C5CP01211B>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _lambda_ : Optional[float], default: 0.599
    Lambda
  _gamma : Optional[float], default: 0.697
    Gamma
  """
  _lambda_ = (_lambda_ or 0.599)
  _gamma = (_gamma or 0.697)
  p = get_p("gga_k_tfvw_opt", polarized, _lambda_, _gamma)
  def _gga_k_tfvw_opt_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_k_tfvw_opt.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_k_tfvw_opt_epsilon_xc

def hyb_gga_xc_lc_bop(
  polarized: bool = True,
  _omega: Optional[float] = None,
) -> Callable:
  r"""
  J.-W. Song, T. Hirosawa, T. Tsuneda, and K. Hirao.,  J. Chem. Phys. 126, 154105 (2007)
  10.1063/1.2721532

  
  Mixing of the following functionals:
    gga_x_ityh (coefficient: 1.0)
    gga_c_op_b88 (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _omega : Optional[float], default: 0.47
    Range separation parameter
  """
  _omega = (_omega or 0.47)
  p = get_p("hyb_gga_xc_lc_bop", polarized, _omega)
  def _hyb_gga_xc_lc_bop_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_lc_bop.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_lc_bop_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_lc_bop_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_lc_bop_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_lc_bop_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_lc_bop_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_lc_bop_epsilon_xc

def hyb_gga_xc_lc_pbeop(
  polarized: bool = True,
  _omega: Optional[float] = None,
) -> Callable:
  r"""
  Y. Tawada, T. Tsuneda, S. Yanagisawa, T. Yanai, and K. Hirao.,  J. Chem. Phys. 120, 8425-8433 (2004)
  `10.1063/1.1688752 <http://doi.org/10.1063/1.1688752>`_

  
  Mixing of the following functionals:
    gga_x_ityh_pbe (coefficient: 1.0)
    gga_c_op_pbe (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _omega : Optional[float], default: 0.33
    Range separation parameter
  """
  _omega = (_omega or 0.33)
  p = get_p("hyb_gga_xc_lc_pbeop", polarized, _omega)
  def _hyb_gga_xc_lc_pbeop_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_lc_pbeop.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_lc_pbeop_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_lc_pbeop_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_lc_pbeop_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_lc_pbeop_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_lc_pbeop_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_lc_pbeop_epsilon_xc

def mgga_c_kcisk(
  polarized: bool = True,
) -> Callable:
  r"""
  J. Rey and A. Savin.,  Int. J. Quantum Chem. 69, 581–590 (1998)
  `10.1002/(SICI)1097-461X(1998)69:4<581::AID-QUA16>3.0.CO;2-2 <http://doi.org/10.1002/(SICI)1097-461X(1998)69:4\<581::AID-QUA16\>3.0.CO;2-2>`_

  J. B. Krieger, J. Chen, G. J. Iafrate, and A. Savin. Construction of An Accurate Self-interaction-corrected Correlation Energy Functional Based on An Electron Gas with A Gap, pages 463–477. Springer US, Boston, MA, 1999. URL: http://doi.org/10.1007/978-1-4615-4715-0_28, doi:10.1007/978-1-4615-4715-0_28.
  `10.1007/978-1-4615-4715-0_28 <http://doi.org/10.1007/978-1-4615-4715-0_28>`_

  J. B. Krieger, J. Chen, and S. Kurth.,  AIP Conf. Proc. 577, 48-69 (2001)
  `10.1063/1.1390178 <http://aip.scitation.org/doi/abs/10.1063/1.1390178>`_

  S. Kurth, J. P. Perdew, and P. Blaha.,  Int. J. Quantum Chem. 75, 889-909 (1999)
  `10.1002/(SICI)1097-461X(1999)75:4/5<889::AID-QUA54>3.0.CO;2-8 <https://onlinelibrary.wiley.com/doi/abs/10.1002/%28SICI%291097-461X%281999%2975%3A4/5%3C889%3A%3AAID-QUA54%3E3.0.CO%3B2-8>`_

  J. Toulouse, A. Savin, and C. Adamo.,  J. Chem. Phys. 117, 10465-10473 (2002)
  `10.1063/1.1521432 <http://doi.org/10.1063/1.1521432>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("mgga_c_kcisk", polarized, )
  def _mgga_c_kcisk_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_c_kcisk.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_c_kcisk_epsilon_xc

def hyb_gga_xc_lc_blypr(
  polarized: bool = True,
  _omega: Optional[float] = None,
) -> Callable:
  r"""
  W. Ai, W.-H. Fang, and N. Q. Su.,  J. Phys. Chem. Lett. 12, 1207-1213 (2021)
  `10.1021/acs.jpclett.0c03621 <https://doi.org/10.1021/acs.jpclett.0c03621>`_

  
  Mixing of the following functionals:
    gga_x_ityh (coefficient: 1.0)
    gga_c_lypr (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _omega : Optional[float], default: 0.33
    Range separation parameter
  """
  _omega = (_omega or 0.33)
  p = get_p("hyb_gga_xc_lc_blypr", polarized, _omega)
  def _hyb_gga_xc_lc_blypr_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_lc_blypr.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_lc_blypr_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_lc_blypr_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_lc_blypr_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_lc_blypr_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_lc_blypr_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_lc_blypr_epsilon_xc

def hyb_gga_xc_mcam_b3lyp(
  polarized: bool = True,
  _alpha: Optional[float] = None,
  _beta: Optional[float] = None,
  _omega: Optional[float] = None,
  _ac: Optional[float] = None,
) -> Callable:
  r"""
  P. N. Day, K. A. Nguyen, and R. Pachter.,  J. Chem. Phys. 125, 094103 (2006)
  `10.1063/1.2338031 <https://doi.org/10.1063/1.2338031>`_

  
  Mixing of the following functionals:
    gga_x_b88 (coefficient: 0.62)
    gga_x_ityh (coefficient: 0.19)
    lda_c_vwn (coefficient: 0.18999999999999995)
    gga_c_lyp (coefficient: 0.81)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _alpha : Optional[float], default: 0.38
    Fraction of Hartree-Fock exchange
  _beta : Optional[float], default: -0.19
    Fraction of short-range exact exchange
  _omega : Optional[float], default: 0.33
    Range separation parameter
  _ac : Optional[float], default: 0.81
    Fraction of LYP correlation
  """
  _alpha = (_alpha or 0.38)
  _beta = (_beta or -0.19)
  _omega = (_omega or 0.33)
  _ac = (_ac or 0.81)
  p = get_p("hyb_gga_xc_mcam_b3lyp", polarized, _alpha, _beta, _omega, _ac)
  def _hyb_gga_xc_mcam_b3lyp_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_mcam_b3lyp.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_mcam_b3lyp_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_mcam_b3lyp_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_mcam_b3lyp_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_mcam_b3lyp_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_mcam_b3lyp_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_mcam_b3lyp_epsilon_xc

def lda_x_yukawa(
  polarized: bool = True,
  _omega: Optional[float] = None,
) -> Callable:
  r"""
  A. Savin and H.-J. Flad.,  Int. J. Quantum Chem. 56, 327 (1995)
  `10.1002/qua.560560417 <http://onlinelibrary.wiley.com/doi/10.1002/qua.560560417/abstract>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _omega : Optional[float], default: 0.3
    screening parameter
  """
  _omega = (_omega or 0.3)
  p = get_p("lda_x_yukawa", polarized, _omega)
  def _lda_x_yukawa_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of lda_x_yukawa.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _lda_x_yukawa_epsilon_xc

def mgga_c_r2scan01(
  polarized: bool = True,
  _eta: Optional[float] = None,
) -> Callable:
  r"""
  J. W. Furness, A. D. Kaplan, J. Ning, J. P. Perdew, and J. Sun.,  J. Phys. Chem. Lett. 11, 8208-8215 (2020)
  `10.1021/acs.jpclett.0c02405 <https://doi.org/10.1021/acs.jpclett.0c02405>`_

  J. W. Furness, A. D. Kaplan, J. Ning, J. P. Perdew, and J. Sun.,  J. Phys. Chem. Lett. 11, 9248-9248 (2020)
  `10.1021/acs.jpclett.0c03077 <https://doi.org/10.1021/acs.jpclett.0c03077>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _eta : Optional[float], default: 0.01
    Regularization parameter
  """
  _eta = (_eta or 0.01)
  p = get_p("mgga_c_r2scan01", polarized, _eta)
  def _mgga_c_r2scan01_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_c_r2scan01.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_c_r2scan01_epsilon_xc

def mgga_c_rmggac(
  polarized: bool = True,
) -> Callable:
  r"""
  S. Jana, S. K. Behera, S. Śmiga, L. A. Constantin, and P. Samal.,  New J. Phys. 23, 063007 (2021)
  `10.1088/1367-2630/abfd4d <https://doi.org/10.1088/1367-2630/abfd4d>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("mgga_c_rmggac", polarized, )
  def _mgga_c_rmggac_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_c_rmggac.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_c_rmggac_epsilon_xc

def mgga_x_mcml(
  polarized: bool = True,
) -> Callable:
  r"""
  K. Brown, Y. Maimaiti, K. Trepte, T. Bligaard, and J. Voss.,  J. Comput. Chem. 42, 2004–2013 (2021)
  `10.1002/jcc.26732 <https://onlinelibrary.wiley.com/doi/abs/10.1002/jcc.26732>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("mgga_x_mcml", polarized, )
  def _mgga_x_mcml_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_mcml.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_mcml_epsilon_xc

def mgga_x_r2scan01(
  polarized: bool = True,
  _c1: Optional[float] = None,
  _c2: Optional[float] = None,
  _d: Optional[float] = None,
  _k1: Optional[float] = None,
  _eta: Optional[float] = None,
  _dp2: Optional[float] = None,
) -> Callable:
  r"""
  J. W. Furness, A. D. Kaplan, J. Ning, J. P. Perdew, and J. Sun.,  J. Phys. Chem. Lett. 11, 8208-8215 (2020)
  `10.1021/acs.jpclett.0c02405 <https://doi.org/10.1021/acs.jpclett.0c02405>`_

  J. W. Furness, A. D. Kaplan, J. Ning, J. P. Perdew, and J. Sun.,  J. Phys. Chem. Lett. 11, 9248-9248 (2020)
  `10.1021/acs.jpclett.0c03077 <https://doi.org/10.1021/acs.jpclett.0c03077>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _c1 : Optional[float], default: 0.667
    c1 parameter
  _c2 : Optional[float], default: 0.8
    c2 parameter
  _d : Optional[float], default: 1.24
    d parameter
  _k1 : Optional[float], default: 0.065
    k1 parameter
  _eta : Optional[float], default: 0.01
    eta parameter
  _dp2 : Optional[float], default: 0.361
    dp2 parameter
  """
  _c1 = (_c1 or 0.667)
  _c2 = (_c2 or 0.8)
  _d = (_d or 1.24)
  _k1 = (_k1 or 0.065)
  _eta = (_eta or 0.01)
  _dp2 = (_dp2 or 0.361)
  p = get_p("mgga_x_r2scan01", polarized, _c1, _c2, _d, _k1, _eta, _dp2)
  def _mgga_x_r2scan01_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_r2scan01.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_r2scan01_epsilon_xc

def hyb_gga_x_cam_s12g(
  polarized: bool = True,
  _A: Optional[float] = None,
  _B: Optional[float] = None,
  _C: Optional[float] = None,
  _D: Optional[float] = None,
  _E: Optional[float] = None,
  _alpha: Optional[float] = None,
  _beta: Optional[float] = None,
  _omega: Optional[float] = None,
) -> Callable:
  r"""
  M. Swart.,  Chem. Phys. Lett. 580, 166 - 171 (2013)
  `10.1016/j.cplett.2013.06.045 <http://www.sciencedirect.com/science/article/pii/S0009261413008221>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _A : Optional[float], default: 1.03323556
    A parameter
  _B : Optional[float], default: 0.7237644399999998
    B parameter
  _C : Optional[float], default: 0.00417251
    C parameter
  _D : Optional[float], default: 0.00115216
    D parameter
  _E : Optional[float], default: 0.00706184
    E parameter
  _alpha : Optional[float], default: 0.34485046
    fraction of HF exchange
  _beta : Optional[float], default: -0.34485046
    fraction of SR exchange
  _omega : Optional[float], default: 1.52420731
    range-separation parameter
  """
  _A = (_A or 1.03323556)
  _B = (_B or 0.7237644399999998)
  _C = (_C or 0.00417251)
  _D = (_D or 0.00115216)
  _E = (_E or 0.00706184)
  _alpha = (_alpha or 0.34485046)
  _beta = (_beta or -0.34485046)
  _omega = (_omega or 1.52420731)
  p = get_p("hyb_gga_x_cam_s12g", polarized, _A, _B, _C, _D, _E, _alpha, _beta, _omega)
  def _hyb_gga_x_cam_s12g_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_x_cam_s12g.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _hyb_gga_x_cam_s12g_epsilon_xc

def hyb_gga_x_cam_s12h(
  polarized: bool = True,
  _A: Optional[float] = None,
  _B: Optional[float] = None,
  _C: Optional[float] = None,
  _D: Optional[float] = None,
  _E: Optional[float] = None,
  _alpha: Optional[float] = None,
  _beta: Optional[float] = None,
  _omega: Optional[float] = None,
) -> Callable:
  r"""
  M. Swart.,  Chem. Phys. Lett. 580, 166 - 171 (2013)
  `10.1016/j.cplett.2013.06.045 <http://www.sciencedirect.com/science/article/pii/S0009261413008221>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _A : Optional[float], default: 1.02149642
    A parameter
  _B : Optional[float], default: 0.7355035799999998
    B parameter
  _C : Optional[float], default: 0.00825905
    C parameter
  _D : Optional[float], default: 0.00235804
    D parameter
  _E : Optional[float], default: 0.00654977
    E parameter
  _alpha : Optional[float], default: 0.35897845
    fraction of HF exchange
  _beta : Optional[float], default: -0.10897845
    fraction of SR exchange
  _omega : Optional[float], default: 0.48516891
    range-separation parameter
  """
  _A = (_A or 1.02149642)
  _B = (_B or 0.7355035799999998)
  _C = (_C or 0.00825905)
  _D = (_D or 0.00235804)
  _E = (_E or 0.00654977)
  _alpha = (_alpha or 0.35897845)
  _beta = (_beta or -0.10897845)
  _omega = (_omega or 0.48516891)
  p = get_p("hyb_gga_x_cam_s12h", polarized, _A, _B, _C, _D, _E, _alpha, _beta, _omega)
  def _hyb_gga_x_cam_s12h_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_x_cam_s12h.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _hyb_gga_x_cam_s12h_epsilon_xc

def mgga_x_rppscan(
  polarized: bool = True,
  _c2: Optional[float] = None,
  _d: Optional[float] = None,
  _k1: Optional[float] = None,
  _eta: Optional[float] = None,
) -> Callable:
  r"""
  J. W. Furness, A. D. Kaplan, J. Ning, J. P. Perdew, and J. Sun.,  J. Chem. Phys. 156, 034109 (2022)
  `10.1063/5.0073623 <https://doi.org/10.1063/5.0073623>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _c2 : Optional[float], default: 0.8
    c2 parameter
  _d : Optional[float], default: 1.24
    d parameter
  _k1 : Optional[float], default: 0.065
    k1 parameter
  _eta : Optional[float], default: 0.001
    eta parameter
  """
  _c2 = (_c2 or 0.8)
  _d = (_d or 1.24)
  _k1 = (_k1 or 0.065)
  _eta = (_eta or 0.001)
  p = get_p("mgga_x_rppscan", polarized, _c2, _d, _k1, _eta)
  def _mgga_x_rppscan_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_rppscan.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_rppscan_epsilon_xc

def mgga_c_rppscan(
  polarized: bool = True,
  _eta: Optional[float] = None,
) -> Callable:
  r"""
  J. W. Furness, A. D. Kaplan, J. Ning, J. P. Perdew, and J. Sun.,  J. Chem. Phys. 156, 034109 (2022)
  `10.1063/5.0073623 <https://doi.org/10.1063/5.0073623>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _eta : Optional[float], default: 0.001
    Regularization parameter
  """
  _eta = (_eta or 0.001)
  p = get_p("mgga_c_rppscan", polarized, _eta)
  def _mgga_c_rppscan_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_c_rppscan.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_c_rppscan_epsilon_xc

def mgga_x_r4scan(
  polarized: bool = True,
  _c1: Optional[float] = None,
  _c2: Optional[float] = None,
  _d: Optional[float] = None,
  _k1: Optional[float] = None,
  _eta: Optional[float] = None,
  _dp2: Optional[float] = None,
  _dp4: Optional[float] = None,
  _da4: Optional[float] = None,
) -> Callable:
  r"""
  J. W. Furness, A. D. Kaplan, J. Ning, J. P. Perdew, and J. Sun.,  J. Chem. Phys. 156, 034109 (2022)
  `10.1063/5.0073623 <https://doi.org/10.1063/5.0073623>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _c1 : Optional[float], default: 0.667
    c1 parameter
  _c2 : Optional[float], default: 0.8
    c2 parameter
  _d : Optional[float], default: 1.24
    d parameter
  _k1 : Optional[float], default: 0.065
    k1 parameter
  _eta : Optional[float], default: 0.001
    eta parameter
  _dp2 : Optional[float], default: 0.361
    dp2 parameter
  _dp4 : Optional[float], default: 0.802
    dp4 parameter
  _da4 : Optional[float], default: 0.178
    da4 parameter
  """
  _c1 = (_c1 or 0.667)
  _c2 = (_c2 or 0.8)
  _d = (_d or 1.24)
  _k1 = (_k1 or 0.065)
  _eta = (_eta or 0.001)
  _dp2 = (_dp2 or 0.361)
  _dp4 = (_dp4 or 0.802)
  _da4 = (_da4 or 0.178)
  p = get_p("mgga_x_r4scan", polarized, _c1, _c2, _d, _k1, _eta, _dp2, _dp4, _da4)
  def _mgga_x_r4scan_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_r4scan.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_r4scan_epsilon_xc

def mgga_x_vcml(
  polarized: bool = True,
) -> Callable:
  r"""
  K. Trepte and J. Voss.,  J. Comput. Chem. 43, 1104–1112 (2022)
  `10.1002/jcc.26872 <https://onlinelibrary.wiley.com/doi/abs/10.1002/jcc.26872>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("mgga_x_vcml", polarized, )
  def _mgga_x_vcml_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_vcml.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_vcml_epsilon_xc

def mgga_xc_vcml_rvv10(
  polarized: bool = True,
) -> Callable:
  r"""
  K. Trepte and J. Voss.,  J. Comput. Chem. 43, 1104–1112 (2022)
  `10.1002/jcc.26872 <https://onlinelibrary.wiley.com/doi/abs/10.1002/jcc.26872>`_

  
  Mixing of the following functionals:
    mgga_x_vcml (coefficient: 1.0)
    gga_c_regtpss (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("mgga_xc_vcml_rvv10", polarized, )
  def _mgga_xc_vcml_rvv10_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_xc_vcml_rvv10.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  
  _mgga_xc_vcml_rvv10_epsilon_xc.cam_alpha = p.cam_alpha
  _mgga_xc_vcml_rvv10_epsilon_xc.cam_beta = p.cam_beta
  _mgga_xc_vcml_rvv10_epsilon_xc.cam_omega = p.cam_omega
  _mgga_xc_vcml_rvv10_epsilon_xc.nlc_b = p.nlc_b
  _mgga_xc_vcml_rvv10_epsilon_xc.nlc_C = p.nlc_C

  return _mgga_xc_vcml_rvv10_epsilon_xc

def hyb_gga_xc_cam_pbeh(
  polarized: bool = True,
  _alpha: Optional[float] = None,
  _beta: Optional[float] = None,
  _omega: Optional[float] = None,
) -> Callable:
  r"""
  W. Chen, G. Miceli, G.-M. Rignanese, and A. Pasquarello.,  Phys. Rev. Mater. 2, 073803 (2018)
  `10.1103/PhysRevMaterials.2.073803 <https://link.aps.org/doi/10.1103/PhysRevMaterials.2.073803>`_

  
  Mixing of the following functionals:
    gga_x_pbe (coefficient: 0.8)
    gga_x_hjs_pbe (coefficient: -0.8)
    gga_c_pbe (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _alpha : Optional[float], default: 0.2
    Fraction of Hartree-Fock exchange
  _beta : Optional[float], default: 0.8
    Fraction of short-range exact exchange
  _omega : Optional[float], default: 0.7
    Range separation parameter
  """
  _alpha = (_alpha or 0.2)
  _beta = (_beta or 0.8)
  _omega = (_omega or 0.7)
  p = get_p("hyb_gga_xc_cam_pbeh", polarized, _alpha, _beta, _omega)
  def _hyb_gga_xc_cam_pbeh_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_cam_pbeh.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_cam_pbeh_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_cam_pbeh_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_cam_pbeh_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_cam_pbeh_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_cam_pbeh_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_cam_pbeh_epsilon_xc

def hyb_gga_xc_camy_pbeh(
  polarized: bool = True,
  _alpha: Optional[float] = None,
  _beta: Optional[float] = None,
  _omega: Optional[float] = None,
) -> Callable:
  r"""
  W. Chen, G. Miceli, G.-M. Rignanese, and A. Pasquarello.,  Phys. Rev. Mater. 2, 073803 (2018)
  `10.1103/PhysRevMaterials.2.073803 <https://link.aps.org/doi/10.1103/PhysRevMaterials.2.073803>`_

  
  Mixing of the following functionals:
    gga_x_pbe (coefficient: 0.8)
    gga_x_sfat (coefficient: -0.8)
    gga_c_pbe (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _alpha : Optional[float], default: 0.2
    Fraction of exact exchange
  _beta : Optional[float], default: 0.8
    Fraction of short-range exchange
  _omega : Optional[float], default: 0.7
    Range separation parameter
  """
  _alpha = (_alpha or 0.2)
  _beta = (_beta or 0.8)
  _omega = (_omega or 0.7)
  p = get_p("hyb_gga_xc_camy_pbeh", polarized, _alpha, _beta, _omega)
  def _hyb_gga_xc_camy_pbeh_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_gga_xc_camy_pbeh.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  
  _hyb_gga_xc_camy_pbeh_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_gga_xc_camy_pbeh_epsilon_xc.cam_beta = p.cam_beta
  _hyb_gga_xc_camy_pbeh_epsilon_xc.cam_omega = p.cam_omega
  _hyb_gga_xc_camy_pbeh_epsilon_xc.nlc_b = p.nlc_b
  _hyb_gga_xc_camy_pbeh_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_gga_xc_camy_pbeh_epsilon_xc

def lda_c_upw92(
  polarized: bool = True,
  _pp_0_: Optional[float] = None,
  _pp_1_: Optional[float] = None,
  _pp_2_: Optional[float] = None,
  _a_0_: Optional[float] = None,
  _a_1_: Optional[float] = None,
  _a_2_: Optional[float] = None,
  _alpha1_0_: Optional[float] = None,
  _alpha1_1_: Optional[float] = None,
  _alpha1_2_: Optional[float] = None,
  _beta1_0_: Optional[float] = None,
  _beta1_1_: Optional[float] = None,
  _beta1_2_: Optional[float] = None,
  _beta2_0_: Optional[float] = None,
  _beta2_1_: Optional[float] = None,
  _beta2_2_: Optional[float] = None,
  _beta3_0_: Optional[float] = None,
  _beta3_1_: Optional[float] = None,
  _beta3_2_: Optional[float] = None,
  _beta4_0_: Optional[float] = None,
  _beta4_1_: Optional[float] = None,
  _beta4_2_: Optional[float] = None,
  _fz20: Optional[float] = None,
) -> Callable:
  r"""
  M. Ruggeri, P. L. Ríos, and A. Alavi.,  Phys. Rev. B 98, 161105 (2018)
  `10.1103/PhysRevB.98.161105 <https://link.aps.org/doi/10.1103/PhysRevB.98.161105>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _pp_0_ : Optional[float], default: 1.0
    pp0
  _pp_1_ : Optional[float], default: 1.0
    pp1
  _pp_2_ : Optional[float], default: 1.0
    pp2
  _a_0_ : Optional[float], default: 0.0310907
    a0
  _a_1_ : Optional[float], default: 0.01554535
    a1
  _a_2_ : Optional[float], default: 0.0168869
    a2
  _alpha1_0_ : Optional[float], default: 0.227012
    alpha10
  _alpha1_1_ : Optional[float], default: 0.264193
    alpha11
  _alpha1_2_ : Optional[float], default: 0.11125
    alpha12
  _beta1_0_ : Optional[float], default: 7.5957
    beta10
  _beta1_1_ : Optional[float], default: 14.1189
    beta11
  _beta1_2_ : Optional[float], default: 10.357
    beta12
  _beta2_0_ : Optional[float], default: 3.5876
    beta20
  _beta2_1_ : Optional[float], default: 6.1977
    beta21
  _beta2_2_ : Optional[float], default: 3.6231
    beta22
  _beta3_0_ : Optional[float], default: 1.76522
    beta30
  _beta3_1_ : Optional[float], default: 4.78287
    beta31
  _beta3_2_ : Optional[float], default: 0.88026
    beta32
  _beta4_0_ : Optional[float], default: 0.523918
    beta40
  _beta4_1_ : Optional[float], default: 0.750424
    beta41
  _beta4_2_ : Optional[float], default: 0.49671
    beta42
  _fz20 : Optional[float], default: 1.7099209341613657
    fz20
  """
  _pp_0_ = (_pp_0_ or 1.0)
  _pp_1_ = (_pp_1_ or 1.0)
  _pp_2_ = (_pp_2_ or 1.0)
  _a_0_ = (_a_0_ or 0.0310907)
  _a_1_ = (_a_1_ or 0.01554535)
  _a_2_ = (_a_2_ or 0.0168869)
  _alpha1_0_ = (_alpha1_0_ or 0.227012)
  _alpha1_1_ = (_alpha1_1_ or 0.264193)
  _alpha1_2_ = (_alpha1_2_ or 0.11125)
  _beta1_0_ = (_beta1_0_ or 7.5957)
  _beta1_1_ = (_beta1_1_ or 14.1189)
  _beta1_2_ = (_beta1_2_ or 10.357)
  _beta2_0_ = (_beta2_0_ or 3.5876)
  _beta2_1_ = (_beta2_1_ or 6.1977)
  _beta2_2_ = (_beta2_2_ or 3.6231)
  _beta3_0_ = (_beta3_0_ or 1.76522)
  _beta3_1_ = (_beta3_1_ or 4.78287)
  _beta3_2_ = (_beta3_2_ or 0.88026)
  _beta4_0_ = (_beta4_0_ or 0.523918)
  _beta4_1_ = (_beta4_1_ or 0.750424)
  _beta4_2_ = (_beta4_2_ or 0.49671)
  _fz20 = (_fz20 or 1.7099209341613657)
  p = get_p("lda_c_upw92", polarized, _pp_0_, _pp_1_, _pp_2_, _a_0_, _a_1_, _a_2_, _alpha1_0_, _alpha1_1_, _alpha1_2_, _beta1_0_, _beta1_1_, _beta1_2_, _beta2_0_, _beta2_1_, _beta2_2_, _beta3_0_, _beta3_1_, _beta3_2_, _beta4_0_, _beta4_1_, _beta4_2_, _fz20)
  def _lda_c_upw92_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of lda_c_upw92.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _lda_c_upw92_epsilon_xc

def lda_c_rpw92(
  polarized: bool = True,
  _pp_0_: Optional[float] = None,
  _pp_1_: Optional[float] = None,
  _pp_2_: Optional[float] = None,
  _a_0_: Optional[float] = None,
  _a_1_: Optional[float] = None,
  _a_2_: Optional[float] = None,
  _alpha1_0_: Optional[float] = None,
  _alpha1_1_: Optional[float] = None,
  _alpha1_2_: Optional[float] = None,
  _beta1_0_: Optional[float] = None,
  _beta1_1_: Optional[float] = None,
  _beta1_2_: Optional[float] = None,
  _beta2_0_: Optional[float] = None,
  _beta2_1_: Optional[float] = None,
  _beta2_2_: Optional[float] = None,
  _beta3_0_: Optional[float] = None,
  _beta3_1_: Optional[float] = None,
  _beta3_2_: Optional[float] = None,
  _beta4_0_: Optional[float] = None,
  _beta4_1_: Optional[float] = None,
  _beta4_2_: Optional[float] = None,
  _fz20: Optional[float] = None,
) -> Callable:
  r"""
  M. Ruggeri, P. L. Ríos, and A. Alavi.,  Phys. Rev. B 98, 161105 (2018)
  `10.1103/PhysRevB.98.161105 <https://link.aps.org/doi/10.1103/PhysRevB.98.161105>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _pp_0_ : Optional[float], default: 1.0
    pp0
  _pp_1_ : Optional[float], default: 1.0
    pp1
  _pp_2_ : Optional[float], default: 1.0
    pp2
  _a_0_ : Optional[float], default: 0.0310907
    a0
  _a_1_ : Optional[float], default: 0.01554535
    a1
  _a_2_ : Optional[float], default: 0.0168869
    a2
  _alpha1_0_ : Optional[float], default: 0.2137
    alpha10
  _alpha1_1_ : Optional[float], default: 0.266529
    alpha11
  _alpha1_2_ : Optional[float], default: 0.11125
    alpha12
  _beta1_0_ : Optional[float], default: 7.5957
    beta10
  _beta1_1_ : Optional[float], default: 14.1189
    beta11
  _beta1_2_ : Optional[float], default: 10.357
    beta12
  _beta2_0_ : Optional[float], default: 3.5876
    beta20
  _beta2_1_ : Optional[float], default: 6.1977
    beta21
  _beta2_2_ : Optional[float], default: 3.6231
    beta22
  _beta3_0_ : Optional[float], default: 1.6382
    beta30
  _beta3_1_ : Optional[float], default: 4.86059
    beta31
  _beta3_2_ : Optional[float], default: 0.88026
    beta32
  _beta4_0_ : Optional[float], default: 0.49294
    beta40
  _beta4_1_ : Optional[float], default: 0.750188
    beta41
  _beta4_2_ : Optional[float], default: 0.49671
    beta42
  _fz20 : Optional[float], default: 1.7099209341613657
    fz20
  """
  _pp_0_ = (_pp_0_ or 1.0)
  _pp_1_ = (_pp_1_ or 1.0)
  _pp_2_ = (_pp_2_ or 1.0)
  _a_0_ = (_a_0_ or 0.0310907)
  _a_1_ = (_a_1_ or 0.01554535)
  _a_2_ = (_a_2_ or 0.0168869)
  _alpha1_0_ = (_alpha1_0_ or 0.2137)
  _alpha1_1_ = (_alpha1_1_ or 0.266529)
  _alpha1_2_ = (_alpha1_2_ or 0.11125)
  _beta1_0_ = (_beta1_0_ or 7.5957)
  _beta1_1_ = (_beta1_1_ or 14.1189)
  _beta1_2_ = (_beta1_2_ or 10.357)
  _beta2_0_ = (_beta2_0_ or 3.5876)
  _beta2_1_ = (_beta2_1_ or 6.1977)
  _beta2_2_ = (_beta2_2_ or 3.6231)
  _beta3_0_ = (_beta3_0_ or 1.6382)
  _beta3_1_ = (_beta3_1_ or 4.86059)
  _beta3_2_ = (_beta3_2_ or 0.88026)
  _beta4_0_ = (_beta4_0_ or 0.49294)
  _beta4_1_ = (_beta4_1_ or 0.750188)
  _beta4_2_ = (_beta4_2_ or 0.49671)
  _fz20 = (_fz20 or 1.7099209341613657)
  p = get_p("lda_c_rpw92", polarized, _pp_0_, _pp_1_, _pp_2_, _a_0_, _a_1_, _a_2_, _alpha1_0_, _alpha1_1_, _alpha1_2_, _beta1_0_, _beta1_1_, _beta1_2_, _beta2_0_, _beta2_1_, _beta2_2_, _beta3_0_, _beta3_1_, _beta3_2_, _beta4_0_, _beta4_1_, _beta4_2_, _fz20)
  def _lda_c_rpw92_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of lda_c_rpw92.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _lda_c_rpw92_epsilon_xc

def mgga_x_tlda(
  polarized: bool = True,
  _ltafrac: Optional[float] = None,
) -> Callable:
  r"""
  F. G. Eich and M. Hellgren.,  J. Chem. Phys. 141, 224107 (2014)
  `10.1063/1.4903273 <https://doi.org/10.1063/1.4903273>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _ltafrac : Optional[float], default: 0.25
    Fraction of LTA density
  """
  _ltafrac = (_ltafrac or 0.25)
  p = get_p("mgga_x_tlda", polarized, _ltafrac)
  def _mgga_x_tlda_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_tlda.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_tlda_epsilon_xc

def mgga_x_edmgga(
  polarized: bool = True,
) -> Callable:
  r"""
  J. Tao.,  J. Chem. Phys. 115, 3519-3530 (2001)
  `10.1063/1.1388047 <https://doi.org/10.1063/1.1388047>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("mgga_x_edmgga", polarized, )
  def _mgga_x_edmgga_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_edmgga.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_edmgga_epsilon_xc

def mgga_x_gdme_nv(
  polarized: bool = True,
  _a: Optional[float] = None,
  _AA: Optional[float] = None,
  _BB: Optional[float] = None,
) -> Callable:
  r"""
  J. W. Negele and D. Vautherin.,  Phys. Rev. C 5, 1472–1493 (1972)
  `10.1103/PhysRevC.5.1472 <https://link.aps.org/doi/10.1103/PhysRevC.5.1472>`_

  R. M. Koehl, G. K. Odom, and G. E. Scuseria.,  Mol. Phys. 87, 835-843 (1996)
  `10.1080/00268979600100561 <https://doi.org/10.1080/00268979600100561>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a : Optional[float], default: 0.5
    center of the s expansion of density-matrix
  _AA : Optional[float], default: 7.0685834705770345
    parameter of the first (LDA) term
  _BB : Optional[float], default: 9.16297857297023
    parameter of the correction term
  """
  _a = (_a or 0.5)
  _AA = (_AA or 7.0685834705770345)
  _BB = (_BB or 9.16297857297023)
  p = get_p("mgga_x_gdme_nv", polarized, _a, _AA, _BB)
  def _mgga_x_gdme_nv_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_gdme_nv.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_gdme_nv_epsilon_xc

def mgga_x_rlda(
  polarized: bool = True,
  _prefactor: Optional[float] = None,
) -> Callable:
  r"""
  X. Campi and A. Bouyssy.,  Phys. Lett. B 73, 263 - 266 (1978)
  `10.1016/0370-2693(78)90509-9 <http://www.sciencedirect.com/science/article/pii/0370269378905099>`_

  R. M. Koehl, G. K. Odom, and G. E. Scuseria.,  Mol. Phys. 87, 835-843 (1996)
  `10.1080/00268979600100561 <https://doi.org/10.1080/00268979600100561>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _prefactor : Optional[float], default: 1.0
    Prefactor that multiplies functional
  """
  _prefactor = (_prefactor or 1.0)
  p = get_p("mgga_x_rlda", polarized, _prefactor)
  def _mgga_x_rlda_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_rlda.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_rlda_epsilon_xc

def mgga_x_gdme_0(
  polarized: bool = True,
  _a: Optional[float] = None,
  _AA: Optional[float] = None,
  _BB: Optional[float] = None,
) -> Callable:
  r"""
  R. M. Koehl, G. K. Odom, and G. E. Scuseria.,  Mol. Phys. 87, 835-843 (1996)
  `10.1080/00268979600100561 <https://doi.org/10.1080/00268979600100561>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a : Optional[float], default: 0.0
    center of the s expansion of density-matrix
  _AA : Optional[float], default: 7.0685834705770345
    parameter of the first (LDA) term
  _BB : Optional[float], default: 9.16297857297023
    parameter of the correction term
  """
  _a = (_a or 0.0)
  _AA = (_AA or 7.0685834705770345)
  _BB = (_BB or 9.16297857297023)
  p = get_p("mgga_x_gdme_0", polarized, _a, _AA, _BB)
  def _mgga_x_gdme_0_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_gdme_0.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_gdme_0_epsilon_xc

def mgga_x_gdme_kos(
  polarized: bool = True,
  _a: Optional[float] = None,
  _AA: Optional[float] = None,
  _BB: Optional[float] = None,
) -> Callable:
  r"""
  R. M. Koehl, G. K. Odom, and G. E. Scuseria.,  Mol. Phys. 87, 835-843 (1996)
  `10.1080/00268979600100561 <https://doi.org/10.1080/00268979600100561>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a : Optional[float], default: 0.00638
    center of the s expansion of density-matrix
  _AA : Optional[float], default: 7.0685834705770345
    parameter of the first (LDA) term
  _BB : Optional[float], default: 9.16297857297023
    parameter of the correction term
  """
  _a = (_a or 0.00638)
  _AA = (_AA or 7.0685834705770345)
  _BB = (_BB or 9.16297857297023)
  p = get_p("mgga_x_gdme_kos", polarized, _a, _AA, _BB)
  def _mgga_x_gdme_kos_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_gdme_kos.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_gdme_kos_epsilon_xc

def mgga_x_gdme_vt(
  polarized: bool = True,
  _a: Optional[float] = None,
  _AA: Optional[float] = None,
  _BB: Optional[float] = None,
) -> Callable:
  r"""
  R. M. Koehl, G. K. Odom, and G. E. Scuseria.,  Mol. Phys. 87, 835-843 (1996)
  `10.1080/00268979600100561 <https://doi.org/10.1080/00268979600100561>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a : Optional[float], default: 0.0
    center of the s expansion of density-matrix
  _AA : Optional[float], default: 7.31275
    parameter of the first (LDA) term
  _BB : Optional[float], default: 5.43182
    parameter of the correction term
  """
  _a = (_a or 0.0)
  _AA = (_AA or 7.31275)
  _BB = (_BB or 5.43182)
  p = get_p("mgga_x_gdme_vt", polarized, _a, _AA, _BB)
  def _mgga_x_gdme_vt_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_gdme_vt.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_gdme_vt_epsilon_xc

def lda_x_sloc(
  polarized: bool = True,
  _a: Optional[float] = None,
  _b: Optional[float] = None,
) -> Callable:
  r"""
  K. Finzel and A. I. Baranov.,  Int. J. Quantum Chem. 117, 40-47 (2017)
  `10.1002/qua.25312 <https://onlinelibrary.wiley.com/doi/abs/10.1002/qua.25312>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a : Optional[float], default: 1.67
    Prefactor
  _b : Optional[float], default: 0.3
    Exponent
  """
  _a = (_a or 1.67)
  _b = (_b or 0.3)
  p = get_p("lda_x_sloc", polarized, _a, _b)
  def _lda_x_sloc_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of lda_x_sloc.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _lda_x_sloc_epsilon_xc

def mgga_x_revtm(
  polarized: bool = True,
) -> Callable:
  r"""
  S. Jana, K. Sharma, and P. Samal.,  J. Phys. Chem. A 123, 6356-6369 (2019)
  `10.1021/acs.jpca.9b02921 <https://doi.org/10.1021/acs.jpca.9b02921>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("mgga_x_revtm", polarized, )
  def _mgga_x_revtm_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_revtm.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_revtm_epsilon_xc

def mgga_c_revtm(
  polarized: bool = True,
  _d: Optional[float] = None,
  _C0_c0: Optional[float] = None,
  _C0_c1: Optional[float] = None,
  _C0_c2: Optional[float] = None,
  _C0_c3: Optional[float] = None,
) -> Callable:
  r"""
  S. Jana, K. Sharma, and P. Samal.,  J. Phys. Chem. A 123, 6356-6369 (2019)
  `10.1021/acs.jpca.9b02921 <https://doi.org/10.1021/acs.jpca.9b02921>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _d : Optional[float], default: 2.8
    d
  _C0_c0 : Optional[float], default: 0.0
    C0_c0
  _C0_c1 : Optional[float], default: 0.1
    C0_c1
  _C0_c2 : Optional[float], default: 0.32
    C0_c2
  _C0_c3 : Optional[float], default: 0.0
    C0_c3
  """
  _d = (_d or 2.8)
  _C0_c0 = (_C0_c0 or 0.0)
  _C0_c1 = (_C0_c1 or 0.1)
  _C0_c2 = (_C0_c2 or 0.32)
  _C0_c3 = (_C0_c3 or 0.0)
  p = get_p("mgga_c_revtm", polarized, _d, _C0_c0, _C0_c1, _C0_c2, _C0_c3)
  def _mgga_c_revtm_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_c_revtm.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_c_revtm_epsilon_xc

def hyb_mgga_xc_edmggah(
  polarized: bool = True,
) -> Callable:
  r"""
  J. Tao.,  J. Chem. Phys. 116, 2335-2337 (2002)
  `10.1063/1.1447882 <https://doi.org/10.1063/1.1447882>`_

  
  Mixing of the following functionals:
    mgga_x_edmgga (coefficient: 0.78)
    mgga_c_cs (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("hyb_mgga_xc_edmggah", polarized, )
  def _hyb_mgga_xc_edmggah_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_mgga_xc_edmggah.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  
  _hyb_mgga_xc_edmggah_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_mgga_xc_edmggah_epsilon_xc.cam_beta = p.cam_beta
  _hyb_mgga_xc_edmggah_epsilon_xc.cam_omega = p.cam_omega
  _hyb_mgga_xc_edmggah_epsilon_xc.nlc_b = p.nlc_b
  _hyb_mgga_xc_edmggah_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_mgga_xc_edmggah_epsilon_xc

def mgga_x_mbrxc_bg(
  polarized: bool = True,
) -> Callable:
  r"""
  B. Patra, S. Jana, L. A. Constantin, and P. Samal.,  Phys. Rev. B 100, 045147 (2019)
  `10.1103/PhysRevB.100.045147 <https://link.aps.org/doi/10.1103/PhysRevB.100.045147>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("mgga_x_mbrxc_bg", polarized, )
  def _mgga_x_mbrxc_bg_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_mbrxc_bg.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_mbrxc_bg_epsilon_xc

def mgga_x_mbrxh_bg(
  polarized: bool = True,
) -> Callable:
  r"""
  B. Patra, S. Jana, L. A. Constantin, and P. Samal.,  Phys. Rev. B 100, 045147 (2019)
  `10.1103/PhysRevB.100.045147 <https://link.aps.org/doi/10.1103/PhysRevB.100.045147>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("mgga_x_mbrxh_bg", polarized, )
  def _mgga_x_mbrxh_bg_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_mbrxh_bg.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_mbrxh_bg_epsilon_xc

def mgga_x_hlta(
  polarized: bool = True,
  _ltafrac: Optional[float] = None,
) -> Callable:
  r"""
  S. Lehtola and M. A. L. Marques.,  J. Chem. Theory Comput. 17, 943-948 (2021)
  `10.1021/acs.jctc.0c01147 <https://doi.org/10.1021/acs.jctc.0c01147>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _ltafrac : Optional[float], default: 0.5
    Fraction of LTA density
  """
  _ltafrac = (_ltafrac or 0.5)
  p = get_p("mgga_x_hlta", polarized, _ltafrac)
  def _mgga_x_hlta_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_hlta.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_hlta_epsilon_xc

def mgga_c_hltapw(
  polarized: bool = True,
  _ltafrac: Optional[float] = None,
) -> Callable:
  r"""
  S. Lehtola and M. A. L. Marques.,  J. Chem. Theory Comput. 17, 943-948 (2021)
  `10.1021/acs.jctc.0c01147 <https://doi.org/10.1021/acs.jctc.0c01147>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _ltafrac : Optional[float], default: 0.5
    Fraction of LTA density
  """
  _ltafrac = (_ltafrac or 0.5)
  p = get_p("mgga_c_hltapw", polarized, _ltafrac)
  def _mgga_c_hltapw_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_c_hltapw.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_c_hltapw_epsilon_xc

def mgga_x_scanl(
  polarized: bool = True,
  _c1: Optional[float] = None,
  _c2: Optional[float] = None,
  _d: Optional[float] = None,
  _k1: Optional[float] = None,
  _a: Optional[float] = None,
  _b: Optional[float] = None,
) -> Callable:
  r"""
  D. Mejia-Rodriguez and S. B. Trickey.,  Phys. Rev. A 96, 052512 (2017)
  `10.1103/PhysRevA.96.052512 <https://link.aps.org/doi/10.1103/PhysRevA.96.052512>`_

  D. Mejia-Rodriguez and S. B. Trickey.,  Phys. Rev. B 98, 115161 (2018)
  `10.1103/PhysRevB.98.115161 <https://link.aps.org/doi/10.1103/PhysRevB.98.115161>`_

  J. Sun, A. Ruzsinszky, and J. P. Perdew.,  Phys. Rev. Lett. 115, 036402 (2015)
  `10.1103/PhysRevLett.115.036402 <http://link.aps.org/doi/10.1103/PhysRevLett.115.036402>`_

  
  Mixing of the following functionals:
    mgga_x_scan (coefficient: 1.4916681462400413e-154)
    mgga_k_pc07_opt (coefficient: 1.4916681462400413e-154)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _c1 : Optional[float], default: 0.667
    scan c1
  _c2 : Optional[float], default: 0.8
    scan c2
  _d : Optional[float], default: 1.24
    scan d
  _k1 : Optional[float], default: 0.065
    scan k1
  _a : Optional[float], default: 1.78472
    pc07 a
  _b : Optional[float], default: 0.258304
    pc07 b
  """
  _c1 = (_c1 or 0.667)
  _c2 = (_c2 or 0.8)
  _d = (_d or 1.24)
  _k1 = (_k1 or 0.065)
  _a = (_a or 1.78472)
  _b = (_b or 0.258304)
  p = get_p("mgga_x_scanl", polarized, _c1, _c2, _d, _k1, _a, _b)
  def _mgga_x_scanl_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_scanl.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  
  _mgga_x_scanl_epsilon_xc.cam_alpha = p.cam_alpha
  _mgga_x_scanl_epsilon_xc.cam_beta = p.cam_beta
  _mgga_x_scanl_epsilon_xc.cam_omega = p.cam_omega
  _mgga_x_scanl_epsilon_xc.nlc_b = p.nlc_b
  _mgga_x_scanl_epsilon_xc.nlc_C = p.nlc_C

  return _mgga_x_scanl_epsilon_xc

def mgga_x_revscanl(
  polarized: bool = True,
  _c1: Optional[float] = None,
  _c2: Optional[float] = None,
  _d: Optional[float] = None,
  _k1: Optional[float] = None,
  _a: Optional[float] = None,
  _b: Optional[float] = None,
) -> Callable:
  r"""
  D. Mejia-Rodriguez and S. B. Trickey.,  Phys. Rev. A 96, 052512 (2017)
  `10.1103/PhysRevA.96.052512 <https://link.aps.org/doi/10.1103/PhysRevA.96.052512>`_

  D. Mejia-Rodriguez and S. B. Trickey.,  Phys. Rev. B 98, 115161 (2018)
  `10.1103/PhysRevB.98.115161 <https://link.aps.org/doi/10.1103/PhysRevB.98.115161>`_

  P. D. Mezei, G. I. Csonka, and M. Kállay.,  J. Chem. Theory Comput. 14, 2469-2479 (2018)
  `10.1021/acs.jctc.8b00072 <https://doi.org/10.1021/acs.jctc.8b00072>`_

  
  Mixing of the following functionals:
    mgga_x_revscan (coefficient: 1.4916681462400413e-154)
    mgga_k_pc07_opt (coefficient: 1.4916681462400413e-154)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _c1 : Optional[float], default: 0.607
    scan c1
  _c2 : Optional[float], default: 0.7
    scan c2
  _d : Optional[float], default: 1.37
    scan d
  _k1 : Optional[float], default: 0.065
    scan k1
  _a : Optional[float], default: 1.78472
    pc07 a
  _b : Optional[float], default: 0.258304
    pc07 b
  """
  _c1 = (_c1 or 0.607)
  _c2 = (_c2 or 0.7)
  _d = (_d or 1.37)
  _k1 = (_k1 or 0.065)
  _a = (_a or 1.78472)
  _b = (_b or 0.258304)
  p = get_p("mgga_x_revscanl", polarized, _c1, _c2, _d, _k1, _a, _b)
  def _mgga_x_revscanl_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_revscanl.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  
  _mgga_x_revscanl_epsilon_xc.cam_alpha = p.cam_alpha
  _mgga_x_revscanl_epsilon_xc.cam_beta = p.cam_beta
  _mgga_x_revscanl_epsilon_xc.cam_omega = p.cam_omega
  _mgga_x_revscanl_epsilon_xc.nlc_b = p.nlc_b
  _mgga_x_revscanl_epsilon_xc.nlc_C = p.nlc_C

  return _mgga_x_revscanl_epsilon_xc

def mgga_c_scanl(
  polarized: bool = True,
  _a: Optional[float] = None,
  _b: Optional[float] = None,
) -> Callable:
  r"""
  D. Mejia-Rodriguez and S. B. Trickey.,  Phys. Rev. A 96, 052512 (2017)
  `10.1103/PhysRevA.96.052512 <https://link.aps.org/doi/10.1103/PhysRevA.96.052512>`_

  D. Mejia-Rodriguez and S. B. Trickey.,  Phys. Rev. B 98, 115161 (2018)
  `10.1103/PhysRevB.98.115161 <https://link.aps.org/doi/10.1103/PhysRevB.98.115161>`_

  J. Sun, A. Ruzsinszky, and J. P. Perdew.,  Phys. Rev. Lett. 115, 036402 (2015)
  `10.1103/PhysRevLett.115.036402 <http://link.aps.org/doi/10.1103/PhysRevLett.115.036402>`_

  
  Mixing of the following functionals:
    mgga_c_scan (coefficient: 1.4916681462400413e-154)
    mgga_k_pc07_opt (coefficient: 1.4916681462400413e-154)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a : Optional[float], default: 1.78472
    pc07 a
  _b : Optional[float], default: 0.258304
    pc07 b
  """
  _a = (_a or 1.78472)
  _b = (_b or 0.258304)
  p = get_p("mgga_c_scanl", polarized, _a, _b)
  def _mgga_c_scanl_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_c_scanl.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  
  _mgga_c_scanl_epsilon_xc.cam_alpha = p.cam_alpha
  _mgga_c_scanl_epsilon_xc.cam_beta = p.cam_beta
  _mgga_c_scanl_epsilon_xc.cam_omega = p.cam_omega
  _mgga_c_scanl_epsilon_xc.nlc_b = p.nlc_b
  _mgga_c_scanl_epsilon_xc.nlc_C = p.nlc_C

  return _mgga_c_scanl_epsilon_xc

def mgga_c_scanl_rvv10(
  polarized: bool = True,
) -> Callable:
  r"""
  D. Mejia-Rodriguez and S. B. Trickey.,  Phys. Rev. A 96, 052512 (2017)
  `10.1103/PhysRevA.96.052512 <https://link.aps.org/doi/10.1103/PhysRevA.96.052512>`_

  D. Mejia-Rodriguez and S. B. Trickey.,  Phys. Rev. B 98, 115161 (2018)
  `10.1103/PhysRevB.98.115161 <https://link.aps.org/doi/10.1103/PhysRevB.98.115161>`_

  H. Peng, Z.-H. Yang, J. P. Perdew, and J. Sun.,  Phys. Rev. X 6, 041005 (2016)
  `10.1103/PhysRevX.6.041005 <https://link.aps.org/doi/10.1103/PhysRevX.6.041005>`_

  
  Mixing of the following functionals:
    mgga_c_scanl (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("mgga_c_scanl_rvv10", polarized, )
  def _mgga_c_scanl_rvv10_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_c_scanl_rvv10.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  
  _mgga_c_scanl_rvv10_epsilon_xc.cam_alpha = p.cam_alpha
  _mgga_c_scanl_rvv10_epsilon_xc.cam_beta = p.cam_beta
  _mgga_c_scanl_rvv10_epsilon_xc.cam_omega = p.cam_omega
  _mgga_c_scanl_rvv10_epsilon_xc.nlc_b = p.nlc_b
  _mgga_c_scanl_rvv10_epsilon_xc.nlc_C = p.nlc_C

  return _mgga_c_scanl_rvv10_epsilon_xc

def mgga_c_scanl_vv10(
  polarized: bool = True,
) -> Callable:
  r"""
  D. Mejia-Rodriguez and S. B. Trickey.,  Phys. Rev. A 96, 052512 (2017)
  `10.1103/PhysRevA.96.052512 <https://link.aps.org/doi/10.1103/PhysRevA.96.052512>`_

  D. Mejia-Rodriguez and S. B. Trickey.,  Phys. Rev. B 98, 115161 (2018)
  `10.1103/PhysRevB.98.115161 <https://link.aps.org/doi/10.1103/PhysRevB.98.115161>`_

  J. G. Brandenburg, J. E. Bates, J. Sun, and J. P. Perdew.,  Phys. Rev. B 94, 115144 (2016)
  `10.1103/PhysRevB.94.115144 <https://link.aps.org/doi/10.1103/PhysRevB.94.115144>`_

  
  Mixing of the following functionals:
    mgga_c_scanl (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("mgga_c_scanl_vv10", polarized, )
  def _mgga_c_scanl_vv10_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_c_scanl_vv10.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  
  _mgga_c_scanl_vv10_epsilon_xc.cam_alpha = p.cam_alpha
  _mgga_c_scanl_vv10_epsilon_xc.cam_beta = p.cam_beta
  _mgga_c_scanl_vv10_epsilon_xc.cam_omega = p.cam_omega
  _mgga_c_scanl_vv10_epsilon_xc.nlc_b = p.nlc_b
  _mgga_c_scanl_vv10_epsilon_xc.nlc_C = p.nlc_C

  return _mgga_c_scanl_vv10_epsilon_xc

def hyb_mgga_x_js18(
  polarized: bool = True,
  _a: Optional[float] = None,
  _omega: Optional[float] = None,
) -> Callable:
  r"""
  S. Jana and P. Samal.,  Phys. Chem. Chem. Phys. 20, 8999-9005 (2018)
  `10.1039/C8CP00333E <http://doi.org/10.1039/C8CP00333E>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a : Optional[float], default: 0.1
    Fraction of short-range Hartree-Fock exchange
  _omega : Optional[float], default: 0.33
    Range separation parameter
  """
  _a = (_a or 0.1)
  _omega = (_omega or 0.33)
  p = get_p("hyb_mgga_x_js18", polarized, _a, _omega)
  def _hyb_mgga_x_js18_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_mgga_x_js18.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _hyb_mgga_x_js18_epsilon_xc

def hyb_mgga_x_pjs18(
  polarized: bool = True,
  _omega: Optional[float] = None,
) -> Callable:
  r"""
  B. Patra, S. Jana, and P. Samal.,  Phys. Chem. Chem. Phys. 20, 8991-8998 (2018)
  `10.1039/C8CP00717A <http://doi.org/10.1039/C8CP00717A>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _omega : Optional[float], default: 0.33
    Range separation parameter
  """
  _omega = (_omega or 0.33)
  p = get_p("hyb_mgga_x_pjs18", polarized, _omega)
  def _hyb_mgga_x_pjs18_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_mgga_x_pjs18.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _hyb_mgga_x_pjs18_epsilon_xc

def mgga_x_task(
  polarized: bool = True,
  _c: Optional[float] = None,
  _d: Optional[float] = None,
  _h0x: Optional[float] = None,
  _anu0: Optional[float] = None,
  _anu1: Optional[float] = None,
  _anu2: Optional[float] = None,
  _bnu0: Optional[float] = None,
  _bnu1: Optional[float] = None,
  _bnu2: Optional[float] = None,
  _bnu3: Optional[float] = None,
  _bnu4: Optional[float] = None,
) -> Callable:
  r"""
  T. Aschebrock and S. Kümmel.,  Phys. Rev. Res. 1, 033082 (2019)
  `10.1103/PhysRevResearch.1.033082 <https://link.aps.org/doi/10.1103/PhysRevResearch.1.033082>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _c : Optional[float], default: 4.9479
    Value of the constant in the exponent of g_x
  _d : Optional[float], default: 10.0
    Value of the exponent of g_x(s^2)^c
  _h0x : Optional[float], default: 1.174
    Value of h_x^0
  _anu0 : Optional[float], default: 0.938719
    Coefficient 0 of the Chebyshev expansion for h_x^1
  _anu1 : Optional[float], default: -0.076371
    Coefficient 1 of the Chebyshev expansion for h_x^1
  _anu2 : Optional[float], default: -0.0150899
    Coefficient 2 of the Chebyshev expansion for h_x^1
  _bnu0 : Optional[float], default: -0.628591
    Coefficient 0 of the Chebyshev expansion for fx(a)
  _bnu1 : Optional[float], default: -2.10315
    Coefficient 1 of the Chebyshev expansion for fx(a)
  _bnu2 : Optional[float], default: -0.5
    Coefficient 2 of the Chebyshev expansion for fx(a)
  _bnu3 : Optional[float], default: 0.103153
    Coefficient 3 of the Chebyshev expansion for fx(a)
  _bnu4 : Optional[float], default: 0.128591
    Coefficient 4 of the Chebyshev expansion for fx(a)
  """
  _c = (_c or 4.9479)
  _d = (_d or 10.0)
  _h0x = (_h0x or 1.174)
  _anu0 = (_anu0 or 0.938719)
  _anu1 = (_anu1 or -0.076371)
  _anu2 = (_anu2 or -0.0150899)
  _bnu0 = (_bnu0 or -0.628591)
  _bnu1 = (_bnu1 or -2.10315)
  _bnu2 = (_bnu2 or -0.5)
  _bnu3 = (_bnu3 or 0.103153)
  _bnu4 = (_bnu4 or 0.128591)
  p = get_p("mgga_x_task", polarized, _c, _d, _h0x, _anu0, _anu1, _anu2, _bnu0, _bnu1, _bnu2, _bnu3, _bnu4)
  def _mgga_x_task_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_task.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_task_epsilon_xc

def mgga_x_mggac(
  polarized: bool = True,
) -> Callable:
  r"""
  B. Patra, S. Jana, L. A. Constantin, and P. Samal.,  Phys. Rev. B 100, 155140 (2019)
  `10.1103/PhysRevB.100.155140 <https://link.aps.org/doi/10.1103/PhysRevB.100.155140>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("mgga_x_mggac", polarized, )
  def _mgga_x_mggac_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_mggac.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_mggac_epsilon_xc

def gga_c_mggac(
  polarized: bool = True,
  _beta: Optional[float] = None,
  _gamma: Optional[float] = None,
  _B: Optional[float] = None,
) -> Callable:
  r"""
  B. Patra, S. Jana, L. A. Constantin, and P. Samal.,  Phys. Rev. B 100, 155140 (2019)
  `10.1103/PhysRevB.100.155140 <https://link.aps.org/doi/10.1103/PhysRevB.100.155140>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _beta : Optional[float], default: 0.03
    beta constant
  _gamma : Optional[float], default: 0.031090690869654894
    (1 - ln(2))/Pi^2 in the PBE
  _B : Optional[float], default: 1.0
    Multiplies the A t^2 term. Used in the SPBE functional
  """
  _beta = (_beta or 0.03)
  _gamma = (_gamma or 0.031090690869654894)
  _B = (_B or 1.0)
  p = get_p("gga_c_mggac", polarized, _beta, _gamma, _B)
  def _gga_c_mggac_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_c_mggac.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_c_mggac_epsilon_xc

def mgga_x_mbr(
  polarized: bool = True,
  _gamma: Optional[float] = None,
  _beta: Optional[float] = None,
  _lambda_: Optional[float] = None,
) -> Callable:
  r"""
  A. Patra, S. Jana, H. Myneni, and P. Samal.,  Phys. Chem. Chem. Phys. 21, 19639-19650 (2019)
  `10.1039/C9CP03356D <http://doi.org/10.1039/C9CP03356D>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _gamma : Optional[float], default: 1.0
    gamma
  _beta : Optional[float], default: 20.0
    beta
  _lambda_ : Optional[float], default: 0.877
    lambda
  """
  _gamma = (_gamma or 1.0)
  _beta = (_beta or 20.0)
  _lambda_ = (_lambda_ or 0.877)
  p = get_p("mgga_x_mbr", polarized, _gamma, _beta, _lambda_)
  def _mgga_x_mbr_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_mbr.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_mbr_epsilon_xc

def mgga_x_r2scanl(
  polarized: bool = True,
  _c1: Optional[float] = None,
  _c2: Optional[float] = None,
  _d: Optional[float] = None,
  _k1: Optional[float] = None,
  _eta: Optional[float] = None,
  _dp2: Optional[float] = None,
  _a: Optional[float] = None,
  _b: Optional[float] = None,
) -> Callable:
  r"""
  D. Mejía-Rodríguez and S. B. Trickey.,  Phys. Rev. B 102, 121109 (2020)
  `10.1103/PhysRevB.102.121109 <https://link.aps.org/doi/10.1103/PhysRevB.102.121109>`_

  J. W. Furness, A. D. Kaplan, J. Ning, J. P. Perdew, and J. Sun.,  J. Phys. Chem. Lett. 11, 8208-8215 (2020)
  `10.1021/acs.jpclett.0c02405 <https://doi.org/10.1021/acs.jpclett.0c02405>`_

  J. W. Furness, A. D. Kaplan, J. Ning, J. P. Perdew, and J. Sun.,  J. Phys. Chem. Lett. 11, 9248-9248 (2020)
  `10.1021/acs.jpclett.0c03077 <https://doi.org/10.1021/acs.jpclett.0c03077>`_

  
  Mixing of the following functionals:
    mgga_x_r2scan (coefficient: 1.4916681462400413e-154)
    mgga_k_pc07_opt (coefficient: 1.4916681462400413e-154)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _c1 : Optional[float], default: 0.667
    c1 parameter
  _c2 : Optional[float], default: 0.8
    c2 parameter
  _d : Optional[float], default: 1.24
    d parameter
  _k1 : Optional[float], default: 0.065
    k1 parameter
  _eta : Optional[float], default: 0.001
    eta parameter
  _dp2 : Optional[float], default: 0.361
    dp2 parameter
  _a : Optional[float], default: 1.78472
    a parameter
  _b : Optional[float], default: 0.258304
    b parameter
  """
  _c1 = (_c1 or 0.667)
  _c2 = (_c2 or 0.8)
  _d = (_d or 1.24)
  _k1 = (_k1 or 0.065)
  _eta = (_eta or 0.001)
  _dp2 = (_dp2 or 0.361)
  _a = (_a or 1.78472)
  _b = (_b or 0.258304)
  p = get_p("mgga_x_r2scanl", polarized, _c1, _c2, _d, _k1, _eta, _dp2, _a, _b)
  def _mgga_x_r2scanl_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_r2scanl.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  
  _mgga_x_r2scanl_epsilon_xc.cam_alpha = p.cam_alpha
  _mgga_x_r2scanl_epsilon_xc.cam_beta = p.cam_beta
  _mgga_x_r2scanl_epsilon_xc.cam_omega = p.cam_omega
  _mgga_x_r2scanl_epsilon_xc.nlc_b = p.nlc_b
  _mgga_x_r2scanl_epsilon_xc.nlc_C = p.nlc_C

  return _mgga_x_r2scanl_epsilon_xc

def mgga_c_r2scanl(
  polarized: bool = True,
  _a: Optional[float] = None,
  _b: Optional[float] = None,
) -> Callable:
  r"""
  D. Mejía-Rodríguez and S. B. Trickey.,  Phys. Rev. B 102, 121109 (2020)
  `10.1103/PhysRevB.102.121109 <https://link.aps.org/doi/10.1103/PhysRevB.102.121109>`_

  J. W. Furness, A. D. Kaplan, J. Ning, J. P. Perdew, and J. Sun.,  J. Phys. Chem. Lett. 11, 8208-8215 (2020)
  `10.1021/acs.jpclett.0c02405 <https://doi.org/10.1021/acs.jpclett.0c02405>`_

  J. W. Furness, A. D. Kaplan, J. Ning, J. P. Perdew, and J. Sun.,  J. Phys. Chem. Lett. 11, 9248-9248 (2020)
  `10.1021/acs.jpclett.0c03077 <https://doi.org/10.1021/acs.jpclett.0c03077>`_

  
  Mixing of the following functionals:
    mgga_c_r2scan (coefficient: 1.4916681462400413e-154)
    mgga_k_pc07_opt (coefficient: 1.4916681462400413e-154)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _a : Optional[float], default: 1.78472
    pc07 a
  _b : Optional[float], default: 0.258304
    pc07 b
  """
  _a = (_a or 1.78472)
  _b = (_b or 0.258304)
  p = get_p("mgga_c_r2scanl", polarized, _a, _b)
  def _mgga_c_r2scanl_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_c_r2scanl.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  
  _mgga_c_r2scanl_epsilon_xc.cam_alpha = p.cam_alpha
  _mgga_c_r2scanl_epsilon_xc.cam_beta = p.cam_beta
  _mgga_c_r2scanl_epsilon_xc.cam_omega = p.cam_omega
  _mgga_c_r2scanl_epsilon_xc.nlc_b = p.nlc_b
  _mgga_c_r2scanl_epsilon_xc.nlc_C = p.nlc_C

  return _mgga_c_r2scanl_epsilon_xc

def hyb_mgga_xc_lc_tmlyp(
  polarized: bool = True,
  _omega: Optional[float] = None,
) -> Callable:
  r"""
  S. Jana, B. Patra, H. Myneni, and P. Samal.,  Chem. Phys. Lett. 713, 1–9 (2018)
  `10.1016/j.cplett.2018.10.007 <http://www.sciencedirect.com/science/article/pii/S0009261418308194>`_

  
  Mixing of the following functionals:
    hyb_mgga_x_pjs18 (coefficient: 1.0)
    gga_c_lyp (coefficient: 1.0)
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _omega : Optional[float], default: 0.28
    Range separation parameter
  """
  _omega = (_omega or 0.28)
  p = get_p("hyb_mgga_xc_lc_tmlyp", polarized, _omega)
  def _hyb_mgga_xc_lc_tmlyp_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of hyb_mgga_xc_lc_tmlyp.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  
  _hyb_mgga_xc_lc_tmlyp_epsilon_xc.cam_alpha = p.cam_alpha
  _hyb_mgga_xc_lc_tmlyp_epsilon_xc.cam_beta = p.cam_beta
  _hyb_mgga_xc_lc_tmlyp_epsilon_xc.cam_omega = p.cam_omega
  _hyb_mgga_xc_lc_tmlyp_epsilon_xc.nlc_b = p.nlc_b
  _hyb_mgga_xc_lc_tmlyp_epsilon_xc.nlc_C = p.nlc_C

  return _hyb_mgga_xc_lc_tmlyp_epsilon_xc

def mgga_x_mtask(
  polarized: bool = True,
  _c: Optional[float] = None,
  _d: Optional[float] = None,
  _h0x: Optional[float] = None,
  _anu0: Optional[float] = None,
  _anu1: Optional[float] = None,
  _anu2: Optional[float] = None,
  _bnu0: Optional[float] = None,
  _bnu1: Optional[float] = None,
  _bnu2: Optional[float] = None,
  _bnu3: Optional[float] = None,
  _bnu4: Optional[float] = None,
) -> Callable:
  r"""
  B. Neupane, H. Tang, N. K. Nepal, S. Adhikari, and A. Ruzsinszky.,  Phys. Rev. Materials 5, 063803 (2021)
  `10.1103/PhysRevMaterials.5.063803 <https://link.aps.org/doi/10.1103/PhysRevMaterials.5.063803>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _c : Optional[float], default: 4.9479
    Value of the constant in the exponent of g_x
  _d : Optional[float], default: 10.0
    Value of the exponent of g_x(s^2)^c
  _h0x : Optional[float], default: 1.29
    Value of h_x^0
  _anu0 : Optional[float], default: 0.924374
    Coefficient 0 of the Chebyshev expansion for h_x^1
  _anu1 : Optional[float], default: -0.09276847
    Coefficient 1 of the Chebyshev expansion for h_x^1
  _anu2 : Optional[float], default: -0.017143
    Coefficient 2 of the Chebyshev expansion for h_x^1
  _bnu0 : Optional[float], default: -0.639572
    Coefficient 0 of the Chebyshev expansion for fx(a)
  _bnu1 : Optional[float], default: -2.087488
    Coefficient 1 of the Chebyshev expansion for fx(a)
  _bnu2 : Optional[float], default: -0.625
    Coefficient 2 of the Chebyshev expansion for fx(a)
  _bnu3 : Optional[float], default: -0.162512
    Coefficient 3 of the Chebyshev expansion for fx(a)
  _bnu4 : Optional[float], default: 0.014572
    Coefficient 4 of the Chebyshev expansion for fx(a)
  """
  _c = (_c or 4.9479)
  _d = (_d or 10.0)
  _h0x = (_h0x or 1.29)
  _anu0 = (_anu0 or 0.924374)
  _anu1 = (_anu1 or -0.09276847)
  _anu2 = (_anu2 or -0.017143)
  _bnu0 = (_bnu0 or -0.639572)
  _bnu1 = (_bnu1 or -2.087488)
  _bnu2 = (_bnu2 or -0.625)
  _bnu3 = (_bnu3 or -0.162512)
  _bnu4 = (_bnu4 or 0.014572)
  p = get_p("mgga_x_mtask", polarized, _c, _d, _h0x, _anu0, _anu1, _anu2, _bnu0, _bnu1, _bnu2, _bnu3, _bnu4)
  def _mgga_x_mtask_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of mgga_x_mtask.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r, mo)
  

  return _mgga_x_mtask_epsilon_xc

def gga_x_q1d(
  polarized: bool = True,
) -> Callable:
  r"""
  V. Urso and L. A. Constantin.,  Eur. Phys. J. B 94, 1–9 (2021)
  

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  """
  p = get_p("gga_x_q1d", polarized, )
  def _gga_x_q1d_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of gga_x_q1d.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _gga_x_q1d_epsilon_xc

def lda_k_gds08_worker(
  polarized: bool = True,
  _A: Optional[float] = None,
  _B: Optional[float] = None,
  _C: Optional[float] = None,
) -> Callable:
  r"""
  L. M. Ghiringhelli and L. Delle Site.,  Phys. Rev. B 77, 073104 (2008)
  `10.1103/PhysRevB.77.073104 <https://link.aps.org/doi/10.1103/PhysRevB.77.073104>`_

  
  Parameters
  ----------
  polarized : bool
    Whether the calculation is polarized.
  _A : Optional[float], default: 0.86
    linear term
  _B : Optional[float], default: 0.224
    term proportional to the logarithm of the density
  _C : Optional[float], default: 0.0
    term proportional to the square of the logarithm
  """
  _A = (_A or 0.86)
  _B = (_B or 0.224)
  _C = (_C or 0.0)
  p = get_p("lda_k_gds08_worker", polarized, _A, _B, _C)
  def _lda_k_gds08_worker_epsilon_xc(rho, r, mo=None):
    r"""
    The exchange-correlation energy density of lda_k_gds08_worker.
    
    Args:
      rho: Callable
        The electron density function, mapping 3D coordinate to a density value.
        If polarized returns one value for each spin, :math:`\rho\in R^3
        \rightarrow R^2`, otherwise, :math:`\rho\in R^3 \rightarrow R`.
      r: jnp.ndarray of shape (3,)
        The 3D coordinate of the point to evaluate the functional.
        Note this function is designed to accept single input,
        use vmap for batch.
      mo: Callable
        Molecular orbital function :math:`R^3 \rightarrow R^{2 \times N}`.
        :math:`N` is the number of orbitals. Requried only for mgga functionals.
    Returns:
      The energy density evaluated at r.
    """
    return invoke(p, rho, r)
  

  return _lda_k_gds08_worker_epsilon_xc

