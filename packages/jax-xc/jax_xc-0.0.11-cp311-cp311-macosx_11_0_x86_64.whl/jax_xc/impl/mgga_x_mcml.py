"""Generated from mgga_x_mcml.mpl."""

import jax
import jax.lax as lax
import jax.numpy as jnp
from jax.numpy import array as array
from jax.numpy import int32 as int32
from jax.numpy import nan as nan
from typing import Callable, Optional
from .utils import *


def pol(p, r, s=(None, None, None), l=(None, None), tau=(None, None)):
  params = p.params
  (r0, r1), (s0, s1, s2), (l0, l1), (tau0, tau1) = r, s, l, tau
  t2 = jnp.cbrt(3)
  t3 = jnp.cbrt(jnp.pi)
  t5 = t2 / t3
  t6 = r0 + r1
  t7 = 0.1e1 / t6
  t10 = 0.2e1 * r0 * t7 <= p.zeta_threshold
  t11 = p.zeta_threshold - 0.1e1
  t14 = 0.2e1 * r1 * t7 <= p.zeta_threshold
  t15 = -t11
  t17 = (r0 - r1) * t7
  t18 = lax_cond(t14, t15, t17)
  t19 = lax_cond(t10, t11, t18)
  t20 = t19 + 0.1e1
  t22 = jnp.cbrt(p.zeta_threshold)
  t23 = t22 * p.zeta_threshold
  t24 = jnp.cbrt(t20)
  t26 = lax_cond(t20 <= p.zeta_threshold, t23, t24 * t20)
  t27 = jnp.cbrt(t6)
  t29 = jnp.cbrt(6)
  t30 = jnp.pi ** 2
  t31 = jnp.cbrt(t30)
  t32 = t31 ** 2
  t33 = 0.1e1 / t32
  t34 = t29 * t33
  t35 = r0 ** 2
  t36 = jnp.cbrt(r0)
  t37 = t36 ** 2
  t40 = s0 / t37 / t35
  t46 = t34 * t40 / (0.65124e1 + t34 * t40 / 0.24e2)
  t48 = t46 / 0.12e2 - 0.1e1
  t49 = t48 ** 2
  t50 = t49 ** 2
  t53 = t50 * t49
  t62 = 0.5e1 / 0.9e1 * (tau0 / t37 / r0 - t40 / 0.8e1) * t29 * t33
  t64 = 0.1e5 < t62
  t65 = lax_cond(t64, t62, 0.1e5)
  t66 = t65 ** 2
  t72 = t66 ** 2
  t76 = lax_cond(t64, 0.1e5, t62)
  t77 = t76 ** 2
  t78 = 0.1e1 - t77
  t79 = t78 ** 2
  t81 = t77 * t76
  t88 = lax_cond(0.1e5 <= t62, -0.1e1 / 0.4e1 + 0.3e1 / 0.4e1 / t66 + 0.1e1 / t66 / t65 / 0.16e2 - 0.3e1 / 0.4e1 / t72, t79 * t78 / (0.1e1 + t81 * (0.1e1 + 0.4e1 * t81)))
  t89 = t88 ** 2
  t90 = t89 ** 2
  t91 = t90 * t89
  t96 = t90 * t88
  t98 = t89 * t88
  t100 = t90 * t98
  t102 = t50 * t48
  t104 = t49 * t48
  t106 = t50 * t104
  t109 = -0.1e1 / 0.2e1 + 0.3e1 / 0.2e1 * t49
  t112 = 0.3e1 / 0.8e1 + 0.35e2 / 0.8e1 * t90 - 0.15e2 / 0.4e1 * t89
  t116 = -0.1e1 / 0.2e1 + 0.3e1 / 0.2e1 * t89
  t121 = -0.1047053293912749375e-2 * t50 - 0.37102687351218925312 * t49 + 0.22419222998949863625e-1 * t53 - 0.28551704175417885e-1 * t91 + 0.294397262786656575e-1 * t90 - 0.58828844909941371e-2 * t89 + 0.20748619661467272631 * t88 + 0.8753451580964013919e-1 * t96 - 0.32121495135261672812e-1 * t98 - 0.67464548655177289688e-1 * t100 - 0.15887583418757175563e-1 * t102 + 0.7416880187036191562e-2 * t104 + 0.15682422300093093188e-1 * t106 - 0.1863882881010248e-2 * t109 * t112 - 0.1153807045825489e-2 * t109 * t116 - 0.1437960658302686e-1 * t109 * t88
  t125 = -0.5e1 / 0.16e2 + 0.231e3 / 0.16e2 * t91 - 0.315e3 / 0.16e2 * t90 + 0.105e3 / 0.16e2 * t89
  t132 = 0.429e3 / 0.16e2 * t100 - 0.693e3 / 0.16e2 * t96 + 0.315e3 / 0.16e2 * t98 - 0.35e2 / 0.16e2 * t88
  t138 = 0.63e2 / 0.8e1 * t96 - 0.35e2 / 0.4e1 * t98 + 0.15e2 / 0.8e1 * t88
  t147 = 0.5e1 / 0.2e1 * t98 - 0.3e1 / 0.2e1 * t88
  t154 = 0.3e1 / 0.8e1 + 0.35e2 / 0.8e1 * t50 - 0.15e2 / 0.4e1 * t49
  t159 = 0.5e1 / 0.2e1 * t104 - t46 / 0.8e1 + 0.3e1 / 0.2e1
  t176 = 0.1491587478361034e-2 * t48 * t125 + 0.1940164714223896e-2 * t48 * t132 + 0.2007295399058147e-2 * t48 * t138 + 0.2915285520983635e-2 * t48 * t112 + 0.179463855686441e-2 * t48 * t116 + 0.2125332357775206e-2 * t48 * t147 + 0.1179363564823021 * t48 * t88 + 0.1683215086686233e-1 * t154 * t88 - 0.6058496834176058e-3 * t159 * t125 + 0.4312411759243052e-3 * t159 * t132 + 0.1672905908063297e-3 * t159 * t138 - 0.2494950550547465e-2 * t159 * t112 + 0.3712786171321043e-2 * t159 * t147 - 0.1030571429426108e-1 * t159 * t88 - 0.7090296813211244e-3 * t159 * t116 - 0.1175614476758423e-2 * t109 * t132
  t187 = 0.63e2 / 0.8e1 * t102 - 0.35e2 / 0.4e1 * t104 + 0.5e1 / 0.32e2 * t46 - 0.15e2 / 0.8e1
  t213 = -0.5e1 / 0.16e2 + 0.231e3 / 0.16e2 * t53 - 0.315e3 / 0.16e2 * t50 + 0.105e3 / 0.16e2 * t49
  t218 = -0.1288306127279617e-2 * t109 * t125 - 0.1189668304951413e-2 * t109 * t138 - 0.9641371299507833e-3 * t109 * t147 - 0.5869916483960576e-3 * t187 * t138 - 0.1009981263546227e-2 * t187 * t112 + 0.2262886186270548e-3 * t187 * t147 + 0.6670848599065867e-2 * t187 * t116 - 0.257733338272708e-3 * t187 * t88 + 0.3212943141118693e-5 * t154 * t132 + 0.2776060240069905e-3 * t154 * t125 - 0.2721968500889238e-3 * t154 * t138 + 0.1282471852770764e-2 * t154 * t147 + 0.4187827907710905e-3 * t154 * t112 + 0.137028863545747e-3 * t154 * t116 + 0.4260858412001439e-3 * t213 * t125 + 0.1136485825094485e-2 * t213 * t138
  t235 = 0.429e3 / 0.16e2 * t106 - 0.693e3 / 0.16e2 * t102 + 0.315e3 / 0.16e2 * t104 - 0.35e2 / 0.192e3 * t46 + 0.35e2 / 0.16e2
  t253 = 0.13502664484515602222e1 - 0.6510071882485726e-2 * t213 * t147 + 0.4230264400260503e-3 * t213 * t112 - 0.5498112922165805e-2 * t213 * t116 + 0.2334616776649133e-2 * t213 * t88 - 0.1622621390953226e-2 * t187 * t125 - 0.2202759704065197e-3 * t187 * t132 - 0.3682519432462936e-3 * t235 * t125 + 0.1522474179598972e-2 * t235 * t138 + 0.245752591853626e-2 * t235 * t112 + 0.1243327883803539e-1 * t235 * t147 + 0.3837976998664341e-3 * t235 * t88 + 0.1421391023843761e-2 * t235 * t116 + 0.3807158595350892e-3 * t213 * t132 - 0.3695503801501715e-3 * t235 * t132 - 0.13465921726261020182e-1 * t46
  t259 = lax_cond(r0 <= p.dens_threshold, 0, -0.3e1 / 0.8e1 * t5 * t26 * t27 * (t121 + t176 + t218 + t253))
  t261 = lax_cond(t10, t15, -t17)
  t262 = lax_cond(t14, t11, t261)
  t263 = t262 + 0.1e1
  t265 = jnp.cbrt(t263)
  t267 = lax_cond(t263 <= p.zeta_threshold, t23, t265 * t263)
  t269 = r1 ** 2
  t270 = jnp.cbrt(r1)
  t271 = t270 ** 2
  t274 = s2 / t271 / t269
  t280 = t34 * t274 / (0.65124e1 + t34 * t274 / 0.24e2)
  t282 = t280 / 0.12e2 - 0.1e1
  t283 = t282 ** 2
  t284 = t283 ** 2
  t287 = t284 * t283
  t296 = 0.5e1 / 0.9e1 * (tau1 / t271 / r1 - t274 / 0.8e1) * t29 * t33
  t298 = 0.1e5 < t296
  t299 = lax_cond(t298, t296, 0.1e5)
  t300 = t299 ** 2
  t306 = t300 ** 2
  t310 = lax_cond(t298, 0.1e5, t296)
  t311 = t310 ** 2
  t312 = 0.1e1 - t311
  t313 = t312 ** 2
  t315 = t311 * t310
  t322 = lax_cond(0.1e5 <= t296, -0.1e1 / 0.4e1 + 0.3e1 / 0.4e1 / t300 + 0.1e1 / t300 / t299 / 0.16e2 - 0.3e1 / 0.4e1 / t306, t313 * t312 / (0.1e1 + t315 * (0.1e1 + 0.4e1 * t315)))
  t323 = t322 ** 2
  t324 = t323 * t322
  t326 = t323 ** 2
  t327 = t326 * t324
  t329 = t326 * t322
  t334 = t326 * t323
  t336 = t284 * t282
  t338 = t283 * t282
  t340 = t284 * t338
  t344 = -0.1e1 / 0.2e1 + 0.3e1 / 0.2e1 * t283
  t348 = 0.63e2 / 0.8e1 * t329 - 0.35e2 / 0.4e1 * t324 + 0.15e2 / 0.8e1 * t322
  t353 = 0.3e1 / 0.8e1 + 0.35e2 / 0.8e1 * t326 - 0.15e2 / 0.4e1 * t323
  t356 = -0.1047053293912749375e-2 * t284 - 0.37102687351218925312 * t283 + 0.22419222998949863625e-1 * t287 - 0.32121495135261672812e-1 * t324 - 0.67464548655177289688e-1 * t327 + 0.8753451580964013919e-1 * t329 + 0.20748619661467272631 * t322 + 0.294397262786656575e-1 * t326 - 0.58828844909941371e-2 * t323 - 0.28551704175417885e-1 * t334 - 0.15887583418757175563e-1 * t336 + 0.7416880187036191562e-2 * t338 + 0.15682422300093093188e-1 * t340 - 0.13465921726261020182e-1 * t280 - 0.1189668304951413e-2 * t344 * t348 - 0.1863882881010248e-2 * t344 * t353
  t358 = -0.1e1 / 0.2e1 + 0.3e1 / 0.2e1 * t323
  t363 = 0.5e1 / 0.2e1 * t324 - 0.3e1 / 0.2e1 * t322
  t371 = -0.5e1 / 0.16e2 + 0.231e3 / 0.16e2 * t334 - 0.315e3 / 0.16e2 * t326 + 0.105e3 / 0.16e2 * t323
  t378 = 0.429e3 / 0.16e2 * t327 - 0.693e3 / 0.16e2 * t329 + 0.315e3 / 0.16e2 * t324 - 0.35e2 / 0.16e2 * t322
  t393 = 0.3e1 / 0.8e1 + 0.35e2 / 0.8e1 * t284 - 0.15e2 / 0.4e1 * t283
  t404 = 0.5e1 / 0.2e1 * t338 - t280 / 0.8e1 + 0.3e1 / 0.2e1
  t409 = -0.1153807045825489e-2 * t344 * t358 - 0.9641371299507833e-3 * t344 * t363 - 0.1437960658302686e-1 * t344 * t322 + 0.1491587478361034e-2 * t282 * t371 + 0.1940164714223896e-2 * t282 * t378 + 0.2007295399058147e-2 * t282 * t348 + 0.2915285520983635e-2 * t282 * t353 + 0.2125332357775206e-2 * t282 * t363 + 0.1179363564823021 * t282 * t322 + 0.179463855686441e-2 * t282 * t358 + 0.4187827907710905e-3 * t393 * t353 + 0.137028863545747e-3 * t393 * t358 + 0.1282471852770764e-2 * t393 * t363 + 0.1683215086686233e-1 * t393 * t322 + 0.4312411759243052e-3 * t404 * t378 + 0.1672905908063297e-3 * t404 * t348
  t428 = 0.63e2 / 0.8e1 * t336 - 0.35e2 / 0.4e1 * t338 + 0.5e1 / 0.32e2 * t280 - 0.15e2 / 0.8e1
  t447 = -0.6058496834176058e-3 * t404 * t371 - 0.2494950550547465e-2 * t404 * t353 + 0.3712786171321043e-2 * t404 * t363 - 0.7090296813211244e-3 * t404 * t358 - 0.1030571429426108e-1 * t404 * t322 - 0.1175614476758423e-2 * t344 * t378 - 0.1288306127279617e-2 * t344 * t371 - 0.5869916483960576e-3 * t428 * t348 - 0.1622621390953226e-2 * t428 * t371 - 0.1009981263546227e-2 * t428 * t353 + 0.2262886186270548e-3 * t428 * t363 + 0.6670848599065867e-2 * t428 * t358 - 0.257733338272708e-3 * t428 * t322 + 0.3212943141118693e-5 * t393 * t378 + 0.2776060240069905e-3 * t393 * t371 - 0.2721968500889238e-3 * t393 * t348
  t451 = -0.5e1 / 0.16e2 + 0.231e3 / 0.16e2 * t287 - 0.315e3 / 0.16e2 * t284 + 0.105e3 / 0.16e2 * t283
  t472 = 0.429e3 / 0.16e2 * t340 - 0.693e3 / 0.16e2 * t336 + 0.315e3 / 0.16e2 * t338 - 0.35e2 / 0.192e3 * t280 + 0.35e2 / 0.16e2
  t487 = 0.13502664484515602222e1 + 0.3807158595350892e-3 * t451 * t378 + 0.4260858412001439e-3 * t451 * t371 + 0.1136485825094485e-2 * t451 * t348 + 0.4230264400260503e-3 * t451 * t353 - 0.5498112922165805e-2 * t451 * t358 - 0.6510071882485726e-2 * t451 * t363 + 0.2334616776649133e-2 * t451 * t322 - 0.2202759704065197e-3 * t428 * t378 - 0.3682519432462936e-3 * t472 * t371 - 0.3695503801501715e-3 * t472 * t378 + 0.1522474179598972e-2 * t472 * t348 + 0.245752591853626e-2 * t472 * t353 + 0.1243327883803539e-1 * t472 * t363 + 0.1421391023843761e-2 * t472 * t358 + 0.3837976998664341e-3 * t472 * t322
  t493 = lax_cond(r1 <= p.dens_threshold, 0, -0.3e1 / 0.8e1 * t5 * t267 * t27 * (t356 + t409 + t447 + t487))
  res = t259 + t493
  return res


def unpol(p, r, s=None, l=None, tau=None):
  params = p.params
  r0, s0, l0, tau0 = r, s, l, tau
  t3 = jnp.cbrt(3)
  t4 = jnp.cbrt(jnp.pi)
  t7 = 0.1e1 <= p.zeta_threshold
  t8 = p.zeta_threshold - 0.1e1
  t10 = lax_cond(t7, -t8, 0)
  t11 = lax_cond(t7, t8, t10)
  t12 = t11 + 0.1e1
  t14 = jnp.cbrt(p.zeta_threshold)
  t16 = jnp.cbrt(t12)
  t18 = lax_cond(t12 <= p.zeta_threshold, t14 * p.zeta_threshold, t16 * t12)
  t19 = jnp.cbrt(r0)
  t21 = jnp.cbrt(6)
  t22 = jnp.pi ** 2
  t23 = jnp.cbrt(t22)
  t24 = t23 ** 2
  t25 = 0.1e1 / t24
  t26 = t21 * t25
  t28 = jnp.cbrt(2)
  t29 = t28 ** 2
  t30 = r0 ** 2
  t31 = t19 ** 2
  t33 = 0.1e1 / t31 / t30
  t36 = s0 * t29 * t33
  t42 = t26 * s0 * t29 * t33 / (0.65124e1 + t26 * t36 / 0.24e2)
  t44 = t42 / 0.12e2 - 0.1e1
  t45 = t44 ** 2
  t46 = t45 ** 2
  t49 = t46 * t45
  t59 = 0.5e1 / 0.9e1 * (tau0 * t29 / t31 / r0 - t36 / 0.8e1) * t21 * t25
  t61 = 0.1e5 < t59
  t62 = lax_cond(t61, t59, 0.1e5)
  t63 = t62 ** 2
  t69 = t63 ** 2
  t73 = lax_cond(t61, 0.1e5, t59)
  t74 = t73 ** 2
  t75 = 0.1e1 - t74
  t76 = t75 ** 2
  t78 = t74 * t73
  t85 = lax_cond(0.1e5 <= t59, 0.3e1 / 0.4e1 / t63 + 0.1e1 / t63 / t62 / 0.16e2 - 0.3e1 / 0.4e1 / t69 - 0.1e1 / 0.4e1, t76 * t75 / (0.1e1 + t78 * (0.1e1 + 0.4e1 * t78)))
  t86 = t85 ** 2
  t87 = t86 * t85
  t88 = t86 ** 2
  t89 = t88 * t87
  t91 = t88 * t85
  t97 = t88 * t86
  t99 = t45 * t44
  t101 = t46 * t44
  t103 = t46 * t99
  t106 = -0.1e1 / 0.2e1 + 0.3e1 / 0.2e1 * t86
  t111 = 0.5e1 / 0.2e1 * t87 - 0.3e1 / 0.2e1 * t85
  t116 = 0.3e1 / 0.8e1 + 0.35e2 / 0.8e1 * t88 - 0.15e2 / 0.4e1 * t86
  t119 = -0.1047053293912749375e-2 * t46 - 0.37102687351218925312 * t45 + 0.22419222998949863625e-1 * t49 - 0.67464548655177289688e-1 * t89 + 0.8753451580964013919e-1 * t91 - 0.32121495135261672812e-1 * t87 + 0.20748619661467272631 * t85 + 0.294397262786656575e-1 * t88 - 0.58828844909941371e-2 * t86 - 0.28551704175417885e-1 * t97 + 0.7416880187036191562e-2 * t99 - 0.15887583418757175563e-1 * t101 + 0.15682422300093093188e-1 * t103 + 0.179463855686441e-2 * t44 * t106 + 0.2125332357775206e-2 * t44 * t111 + 0.2915285520983635e-2 * t44 * t116
  t123 = 0.63e2 / 0.8e1 * t91 - 0.35e2 / 0.4e1 * t87 + 0.15e2 / 0.8e1 * t85
  t129 = -0.5e1 / 0.16e2 + 0.231e3 / 0.16e2 * t97 - 0.315e3 / 0.16e2 * t88 + 0.105e3 / 0.16e2 * t86
  t136 = 0.429e3 / 0.16e2 * t89 - 0.693e3 / 0.16e2 * t91 + 0.315e3 / 0.16e2 * t87 - 0.35e2 / 0.16e2 * t85
  t140 = -0.1e1 / 0.2e1 + 0.3e1 / 0.2e1 * t45
  t157 = 0.5e1 / 0.2e1 * t99 - t42 / 0.8e1 + 0.3e1 / 0.2e1
  t171 = 0.63e2 / 0.8e1 * t101 - 0.35e2 / 0.4e1 * t99 + 0.5e1 / 0.32e2 * t42 - 0.15e2 / 0.8e1
  t174 = 0.2007295399058147e-2 * t44 * t123 + 0.1491587478361034e-2 * t44 * t129 + 0.1940164714223896e-2 * t44 * t136 - 0.1437960658302686e-1 * t140 * t85 - 0.1153807045825489e-2 * t140 * t106 - 0.9641371299507833e-3 * t140 * t111 - 0.1863882881010248e-2 * t140 * t116 - 0.1189668304951413e-2 * t140 * t123 - 0.1288306127279617e-2 * t140 * t129 - 0.1175614476758423e-2 * t140 * t136 - 0.1030571429426108e-1 * t157 * t85 - 0.7090296813211244e-3 * t157 * t106 + 0.3712786171321043e-2 * t157 * t111 - 0.2494950550547465e-2 * t157 * t116 + 0.1179363564823021 * t44 * t85 + 0.6670848599065867e-2 * t171 * t106
  t178 = 0.3e1 / 0.8e1 + 0.35e2 / 0.8e1 * t46 - 0.15e2 / 0.4e1 * t45
  t202 = -0.5e1 / 0.16e2 + 0.231e3 / 0.16e2 * t49 - 0.315e3 / 0.16e2 * t46 + 0.105e3 / 0.16e2 * t45
  t215 = 0.3212943141118693e-5 * t178 * t136 + 0.2776060240069905e-3 * t178 * t129 - 0.2721968500889238e-3 * t178 * t123 + 0.1282471852770764e-2 * t178 * t111 + 0.4187827907710905e-3 * t178 * t116 + 0.137028863545747e-3 * t178 * t106 + 0.1683215086686233e-1 * t178 * t85 - 0.6058496834176058e-3 * t157 * t129 + 0.4312411759243052e-3 * t157 * t136 + 0.1672905908063297e-3 * t157 * t123 + 0.4230264400260503e-3 * t202 * t116 - 0.5498112922165805e-2 * t202 * t106 + 0.2334616776649133e-2 * t202 * t85 - 0.2202759704065197e-3 * t171 * t136 - 0.5869916483960576e-3 * t171 * t123 - 0.1622621390953226e-2 * t171 * t129
  t226 = 0.429e3 / 0.16e2 * t103 - 0.693e3 / 0.16e2 * t101 + 0.315e3 / 0.16e2 * t99 - 0.35e2 / 0.192e3 * t42 + 0.35e2 / 0.16e2
  t250 = 0.13502664484515602222e1 - 0.1009981263546227e-2 * t171 * t116 + 0.2262886186270548e-3 * t171 * t111 - 0.257733338272708e-3 * t171 * t85 + 0.1243327883803539e-1 * t226 * t111 + 0.3837976998664341e-3 * t226 * t85 + 0.1421391023843761e-2 * t226 * t106 + 0.3807158595350892e-3 * t202 * t136 + 0.4260858412001439e-3 * t202 * t129 + 0.1136485825094485e-2 * t202 * t123 - 0.6510071882485726e-2 * t202 * t111 - 0.3682519432462936e-3 * t226 * t129 - 0.3695503801501715e-3 * t226 * t136 + 0.1522474179598972e-2 * t226 * t123 + 0.245752591853626e-2 * t226 * t116 - 0.13465921726261020182e-1 * t42
  t256 = lax_cond(r0 / 0.2e1 <= p.dens_threshold, 0, -0.3e1 / 0.8e1 * t3 / t4 * t18 * t19 * (t119 + t174 + t215 + t250))
  res = 0.2e1 * t256
  return res


def invoke(
  p: NamedTuple, rho: Callable, r: jnp.ndarray, mo: Optional[Callable] = None,
  deorbitalize: Optional[float] = None,
):
  args = rho_to_arguments(p, rho, r, mo, deorbitalize)
  code = pol if p.nspin == 2 else unpol
  dens = args[0] if p.nspin == 1 else sum(args[0])
  ret = lax.cond((dens < p.dens_threshold), lambda *_: 0.,
                 lambda *_: code(p, *args), None)
  return ret