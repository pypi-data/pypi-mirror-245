"""Generated from mgga_c_tpssloc.mpl."""

import jax
import jax.lax as lax
import jax.numpy as jnp
from jax.numpy import array as array
from jax.numpy import int32 as int32
from jax.numpy import nan as nan
from typing import Callable, Optional
from .utils import *


def pol(p, r, s=(None, None, None), l=(None, None), tau=(None, None)):
  params = p.params
  (r0, r1), (s0, s1, s2), (l0, l1), (tau0, tau1) = r, s, l, tau
  t1 = r0 - r1
  t2 = r0 + r1
  t4 = t1 / t2
  t6 = lax_cond(0. < t4, t4, -t4)
  t8 = t1 ** 2
  t9 = t2 ** 2
  t13 = t8 ** 2
  t14 = t9 ** 2
  t16 = t13 / t14
  t24 = 0.1e1 + t4
  t25 = t24 <= p.zeta_threshold
  t26 = p.zeta_threshold - 0.1e1
  t27 = 0.1e1 - t4
  t28 = t27 <= p.zeta_threshold
  t30 = lax_cond(t28, -t26, t4)
  t31 = lax_cond(t25, t26, t30)
  t32 = t31 ** 2
  t34 = r0 ** 2
  t35 = jnp.cbrt(r0)
  t36 = t35 ** 2
  t39 = s0 / t36 / t34
  t40 = 0.1e1 + t31
  t41 = t40 / 0.2e1
  t42 = jnp.cbrt(t41)
  t43 = t42 ** 2
  t46 = r1 ** 2
  t47 = jnp.cbrt(r1)
  t48 = t47 ** 2
  t51 = s2 / t48 / t46
  t52 = 0.1e1 - t31
  t53 = t52 / 0.2e1
  t54 = jnp.cbrt(t53)
  t55 = t54 ** 2
  t59 = s0 + 0.2e1 * s1 + s2
  t60 = jnp.cbrt(t2)
  t61 = t60 ** 2
  t64 = t59 / t61 / t9
  t67 = jnp.cbrt(3)
  t68 = jnp.pi ** 2
  t69 = jnp.cbrt(t68)
  t70 = t69 ** 2
  t73 = jnp.cbrt(t40)
  t74 = t73 * t40
  t76 = jnp.cbrt(t52)
  t77 = t76 * t52
  t84 = (0.1e1 + (0.1e1 - t32) * (t39 * t43 * t41 + t51 * t55 * t53 - t64) * t67 / t70 * (0.1e1 / t74 + 0.1e1 / t77) / 0.24e2) ** 2
  t85 = t84 ** 2
  t88 = lax_cond(-t6 <= -0.999999999999, 0.398e1, (0.35 + 0.87 * t8 / t9 + 0.5 * t16 + 0.226e1 * t13 * t8 / t14 / t9) / t85)
  t93 = t24 / 0.2e1
  t94 = jnp.cbrt(t93)
  t95 = t94 ** 2
  t101 = t27 / 0.2e1
  t102 = jnp.cbrt(t101)
  t103 = t102 ** 2
  t109 = t64 / (tau0 / t36 / r0 * t95 * t93 + tau1 / t48 / r1 * t103 * t101) / 0.8e1
  t111 = lax_cond(0.1e1 < t109, 1, t109)
  t112 = t111 ** 2
  t115 = jnp.logical_or(r0 <= p.dens_threshold, t25)
  t117 = jnp.cbrt(0.1e1 / jnp.pi)
  t118 = t67 * t117
  t119 = jnp.cbrt(4)
  t120 = t119 ** 2
  t121 = 0.1e1 / t60
  t123 = t118 * t120 * t121
  t126 = jnp.sqrt(t123)
  t129 = t123 ** 0.15e1
  t131 = t67 ** 2
  t132 = t117 ** 2
  t133 = t131 * t132
  t134 = 0.1e1 / t61
  t136 = t133 * t119 * t134
  t142 = jnp.log(0.1e1 + 0.16081979498692535067e2 / (0.379785e1 * t126 + 0.8969 * t123 + 0.204775 * t129 + 0.123235 * t136))
  t144 = 0.621814e-1 * (0.1e1 + 0.53425e-1 * t123) * t142
  t145 = t32 ** 2
  t146 = t40 <= p.zeta_threshold
  t147 = jnp.cbrt(p.zeta_threshold)
  t148 = t147 * p.zeta_threshold
  t149 = lax_cond(t146, t148, t74)
  t150 = t52 <= p.zeta_threshold
  t151 = lax_cond(t150, t148, t77)
  t152 = t149 + t151 - 0.2e1
  t154 = jnp.cbrt(2)
  t157 = 0.1e1 / (0.2e1 * t154 - 0.2e1)
  t168 = jnp.log(0.1e1 + 0.32163958997385070134e2 / (0.705945e1 * t126 + 0.1549425e1 * t123 + 0.420775 * t129 + 0.1562925 * t136))
  t181 = jnp.log(0.1e1 + 0.29608749977793437516e2 / (0.51785e1 * t126 + 0.905775 * t123 + 0.1100325 * t129 + 0.1241775 * t136))
  t182 = (0.1e1 + 0.278125e-1 * t123) * t181
  t184 = -0.310907e-1 * (0.1e1 + 0.5137e-1 * t123) * t168 + t144 - 0.19751673498613801407e-1 * t182
  t186 = t145 * t152 * t157 * t184
  t189 = 0.19751673498613801407e-1 * t152 * t157 * t182
  t190 = jnp.log(0.2e1)
  t191 = 0.1e1 - t190
  t193 = t191 / t68
  t194 = t147 ** 2
  t195 = t73 ** 2
  t196 = lax_cond(t146, t194, t195)
  t197 = t76 ** 2
  t198 = lax_cond(t150, t194, t197)
  t200 = t196 / 0.2e1 + t198 / 0.2e1
  t201 = t200 ** 2
  t202 = t201 * t200
  t205 = t59 / t60 / t9
  t206 = 0.1e1 / t201
  t209 = 0.1e1 / t117
  t212 = jnp.exp(-t136 / 0.4e1)
  t215 = t131 * t209 * t119 * (0.1e1 - t212)
  t218 = 0.375e-1 + 0.83333333333333333332e-3 * t205 * t154 * t206 * t215
  t219 = t205 * t154
  t221 = t209 * t119
  t225 = 0.1e1 / t191
  t226 = t218 * t225
  t232 = jnp.exp(-(-t144 + t186 + t189) * t225 * t68 / t202)
  t235 = t68 / (t232 - 0.1e1)
  t236 = t59 ** 2
  t241 = t154 ** 2
  t242 = 0.1e1 / t61 / t14 * t241
  t243 = t201 ** 2
  t246 = 0.1e1 / t132
  t248 = t67 * t246 * t120
  t252 = t219 * t206 * t131 * t221 / 0.96e2 + t226 * t235 * t236 * t242 / t243 * t248 / 0.3072e4
  t254 = t225 * t68
  t262 = jnp.log(0.1e1 + t218 * t252 * t254 / (t226 * t235 * t252 + 0.1e1))
  t265 = t193 * t202 * t262 - t144 + t186 + t189
  t268 = t118 * t120
  t269 = t121 * t154
  t271 = jnp.cbrt(0.1e1 / t40)
  t273 = t268 * t269 * t271
  t276 = jnp.sqrt(t273)
  t279 = t273 ** 0.15e1
  t281 = t133 * t119
  t282 = t134 * t241
  t283 = t271 ** 2
  t285 = t281 * t282 * t283
  t291 = jnp.log(0.1e1 + 0.16081979498692535067e2 / (0.379785e1 * t276 + 0.8969 * t273 + 0.204775 * t279 + 0.123235 * t285))
  t293 = 0.621814e-1 * (0.1e1 + 0.53425e-1 * t273) * t291
  t294 = 0.2e1 <= p.zeta_threshold
  t296 = lax_cond(t294, t148, 0.2e1 * t154)
  t297 = 0. <= p.zeta_threshold
  t298 = lax_cond(t297, t148, 0)
  t300 = (t296 + t298 - 0.2e1) * t157
  t311 = jnp.log(0.1e1 + 0.32163958997385070134e2 / (0.705945e1 * t276 + 0.1549425e1 * t273 + 0.420775 * t279 + 0.1562925 * t285))
  t324 = jnp.log(0.1e1 + 0.29608749977793437516e2 / (0.51785e1 * t276 + 0.905775 * t273 + 0.1100325 * t279 + 0.1241775 * t285))
  t325 = (0.1e1 + 0.278125e-1 * t273) * t324
  t328 = t300 * (-0.310907e-1 * (0.1e1 + 0.5137e-1 * t273) * t311 + t293 - 0.19751673498613801407e-1 * t325)
  t330 = 0.19751673498613801407e-1 * t300 * t325
  t331 = lax_cond(t294, t194, t241)
  t332 = lax_cond(t297, t194, 0)
  t334 = t331 / 0.2e1 + t332 / 0.2e1
  t335 = t334 ** 2
  t336 = t335 * t334
  t338 = 0.1e1 / t335 * t131
  t339 = t39 * t338
  t341 = t60 / t271
  t343 = jnp.exp(-t285 / 0.4e1)
  t349 = 0.375e-1 + 0.83333333333333333332e-3 * t339 * t221 * t341 * (0.1e1 - t343)
  t353 = t349 * t225
  t358 = t68 / t336
  t360 = jnp.exp(-(-t293 + t328 + t330) * t225 * t358)
  t362 = 0.1e1 / (t360 - 0.1e1)
  t363 = s0 ** 2
  t365 = t34 ** 2
  t371 = t335 ** 2
  t374 = 0.1e1 / t371 * t67 * t246
  t375 = t120 * t61
  t381 = t339 * t221 * t341 / 0.96e2 + t353 * t68 * t362 * t363 / t35 / t365 / r0 * t374 * t375 / t283 / 0.3072e4
  t391 = jnp.log(0.1e1 + t349 * t381 * t254 / (t353 * t68 * t362 * t381 + 0.1e1))
  t394 = t193 * t336 * t391 - t293 + t328 + t330
  t396 = lax_cond(t265 < t394, t394, t265)
  t399 = lax_cond(t115, t265 * t24 / 0.2e1, t396 * t40 / 0.2e1)
  t401 = jnp.logical_or(r1 <= p.dens_threshold, t28)
  t405 = jnp.cbrt(0.1e1 / t52)
  t407 = t268 * t269 * t405
  t410 = jnp.sqrt(t407)
  t413 = t407 ** 0.15e1
  t415 = t405 ** 2
  t417 = t281 * t282 * t415
  t423 = jnp.log(0.1e1 + 0.16081979498692535067e2 / (0.379785e1 * t410 + 0.8969 * t407 + 0.204775 * t413 + 0.123235 * t417))
  t425 = 0.621814e-1 * (0.1e1 + 0.53425e-1 * t407) * t423
  t436 = jnp.log(0.1e1 + 0.32163958997385070134e2 / (0.705945e1 * t410 + 0.1549425e1 * t407 + 0.420775 * t413 + 0.1562925 * t417))
  t449 = jnp.log(0.1e1 + 0.29608749977793437516e2 / (0.51785e1 * t410 + 0.905775 * t407 + 0.1100325 * t413 + 0.1241775 * t417))
  t450 = (0.1e1 + 0.278125e-1 * t407) * t449
  t453 = t300 * (-0.310907e-1 * (0.1e1 + 0.5137e-1 * t407) * t436 + t425 - 0.19751673498613801407e-1 * t450)
  t455 = 0.19751673498613801407e-1 * t300 * t450
  t456 = t51 * t338
  t458 = t60 / t405
  t460 = jnp.exp(-t417 / 0.4e1)
  t466 = 0.375e-1 + 0.83333333333333333332e-3 * t456 * t221 * t458 * (0.1e1 - t460)
  t470 = t466 * t225
  t475 = jnp.exp(-(-t425 + t453 + t455) * t225 * t358)
  t477 = 0.1e1 / (t475 - 0.1e1)
  t478 = s2 ** 2
  t480 = t46 ** 2
  t491 = t456 * t221 * t458 / 0.96e2 + t470 * t68 * t477 * t478 / t47 / t480 / r1 * t374 * t375 / t415 / 0.3072e4
  t501 = jnp.log(0.1e1 + t466 * t491 * t254 / (t470 * t68 * t477 * t491 + 0.1e1))
  t504 = t193 * t336 * t501 - t425 + t453 + t455
  t506 = lax_cond(t265 < t504, t504, t265)
  t509 = lax_cond(t401, t265 * t27 / 0.2e1, t506 * t52 / 0.2e1)
  t514 = jnp.cbrt(t24)
  t516 = lax_cond(t25, t148, t514 * t24)
  t517 = jnp.cbrt(t27)
  t519 = lax_cond(t28, t148, t517 * t27)
  t521 = (t516 + t519 - 0.2e1) * t157
  t523 = t16 * t521 * t184
  t525 = 0.19751673498613801407e-1 * t521 * t182
  t526 = t514 ** 2
  t527 = lax_cond(t25, t194, t526)
  t528 = t517 ** 2
  t529 = lax_cond(t28, t194, t528)
  t531 = t527 / 0.2e1 + t529 / 0.2e1
  t532 = t531 ** 2
  t533 = t532 * t531
  t534 = 0.1e1 / t532
  t539 = 0.375e-1 + 0.83333333333333333332e-3 * t205 * t154 * t534 * t215
  t544 = t539 * t225
  t550 = jnp.exp(-(-t144 + t523 + t525) * t225 * t68 / t533)
  t553 = t68 / (t550 - 0.1e1)
  t556 = t532 ** 2
  t562 = t219 * t534 * t131 * t221 / 0.96e2 + t544 * t553 * t236 * t242 / t556 * t248 / 0.3072e4
  t571 = jnp.log(0.1e1 + t539 * t562 * t254 / (t544 * t553 * t562 + 0.1e1))
  t576 = -(0.1e1 + t88) * t112 * (t399 + t509) + (t88 * t112 + 0.1e1) * (t193 * t533 * t571 - t144 + t523 + t525)
  res = t576 * (0.1e1 + 0.45e1 * t576 * t112 * t111)
  return res


def unpol(p, r, s=None, l=None, tau=None):
  params = p.params
  r0, s0, l0, tau0 = r, s, l, tau
  t2 = lax_cond(0 < 0, 0, 0)
  t4 = 0.1e1 <= p.zeta_threshold
  t5 = p.zeta_threshold - 0.1e1
  t7 = lax_cond(t4, -t5, 0)
  t8 = lax_cond(t4, t5, t7)
  t9 = t8 ** 2
  t11 = jnp.cbrt(2)
  t12 = t11 ** 2
  t13 = s0 * t12
  t14 = r0 ** 2
  t15 = jnp.cbrt(r0)
  t16 = t15 ** 2
  t18 = 0.1e1 / t16 / t14
  t19 = 0.1e1 + t8
  t20 = t19 / 0.2e1
  t21 = jnp.cbrt(t20)
  t22 = t21 ** 2
  t26 = 0.1e1 - t8
  t27 = t26 / 0.2e1
  t28 = jnp.cbrt(t27)
  t29 = t28 ** 2
  t36 = jnp.cbrt(3)
  t37 = jnp.pi ** 2
  t38 = jnp.cbrt(t37)
  t39 = t38 ** 2
  t42 = jnp.cbrt(t19)
  t43 = t42 * t19
  t45 = jnp.cbrt(t26)
  t46 = t45 * t26
  t53 = (0.1e1 + (0.1e1 - t9) * (t13 * t18 * t22 * t20 + t13 * t18 * t29 * t27 - s0 * t18) * t36 / t39 * (0.1e1 / t43 + 0.1e1 / t46) / 0.24e2) ** 2
  t54 = t53 ** 2
  t57 = lax_cond(-t2 <= -0.999999999999, 0.398e1, 0.35 / t54)
  t63 = s0 / r0 / tau0 / 0.8e1
  t65 = lax_cond(0.1e1 < t63, 1, t63)
  t66 = t65 ** 2
  t70 = jnp.logical_or(r0 / 0.2e1 <= p.dens_threshold, t4)
  t72 = jnp.cbrt(0.1e1 / jnp.pi)
  t73 = t36 * t72
  t74 = jnp.cbrt(4)
  t75 = t74 ** 2
  t76 = 0.1e1 / t15
  t78 = t73 * t75 * t76
  t81 = jnp.sqrt(t78)
  t84 = t78 ** 0.15e1
  t86 = t36 ** 2
  t87 = t72 ** 2
  t88 = t86 * t87
  t89 = 0.1e1 / t16
  t91 = t88 * t74 * t89
  t97 = jnp.log(0.1e1 + 0.16081979498692535067e2 / (0.379785e1 * t81 + 0.8969 * t78 + 0.204775 * t84 + 0.123235 * t91))
  t98 = (0.1e1 + 0.53425e-1 * t78) * t97
  t100 = t9 ** 2
  t101 = t19 <= p.zeta_threshold
  t102 = jnp.cbrt(p.zeta_threshold)
  t103 = t102 * p.zeta_threshold
  t104 = lax_cond(t101, t103, t43)
  t105 = t26 <= p.zeta_threshold
  t106 = lax_cond(t105, t103, t46)
  t107 = t104 + t106 - 0.2e1
  t111 = 0.1e1 / (0.2e1 * t11 - 0.2e1)
  t122 = jnp.log(0.1e1 + 0.32163958997385070134e2 / (0.705945e1 * t81 + 0.1549425e1 * t78 + 0.420775 * t84 + 0.1562925 * t91))
  t125 = 0.621814e-1 * t98
  t136 = jnp.log(0.1e1 + 0.29608749977793437516e2 / (0.51785e1 * t81 + 0.905775 * t78 + 0.1100325 * t84 + 0.1241775 * t91))
  t137 = (0.1e1 + 0.278125e-1 * t78) * t136
  t141 = t100 * t107 * t111 * (-0.310907e-1 * (0.1e1 + 0.5137e-1 * t78) * t122 + t125 - 0.19751673498613801407e-1 * t137)
  t144 = t107 * t111 * t137
  t146 = jnp.log(0.2e1)
  t147 = 0.1e1 - t146
  t149 = t147 / t37
  t150 = t102 ** 2
  t151 = t42 ** 2
  t152 = lax_cond(t101, t150, t151)
  t153 = t45 ** 2
  t154 = lax_cond(t105, t150, t153)
  t156 = t152 / 0.2e1 + t154 / 0.2e1
  t157 = t156 ** 2
  t158 = t157 * t156
  t161 = s0 / t15 / t14
  t162 = 0.1e1 / t157
  t165 = 0.1e1 / t72
  t168 = jnp.exp(-t91 / 0.4e1)
  t171 = t86 * t165 * t74 * (0.1e1 - t168)
  t174 = 0.375e-1 + 0.83333333333333333332e-3 * t161 * t11 * t162 * t171
  t175 = t161 * t11
  t177 = t165 * t74
  t181 = 0.1e1 / t147
  t182 = t174 * t181
  t183 = 0.19751673498613801407e-1 * t144
  t189 = jnp.exp(-(-t125 + t141 + t183) * t181 * t37 / t158)
  t192 = t37 / (t189 - 0.1e1)
  t193 = s0 ** 2
  t196 = t14 ** 2
  t198 = 0.1e1 / t16 / t196
  t199 = t198 * t12
  t200 = t157 ** 2
  t203 = 0.1e1 / t87
  t205 = t36 * t203 * t75
  t209 = t175 * t162 * t86 * t177 / 0.96e2 + t182 * t192 * t193 * t199 / t200 * t205 / 0.3072e4
  t211 = t181 * t37
  t219 = jnp.log(0.1e1 + t174 * t209 * t211 / (t182 * t192 * t209 + 0.1e1))
  t221 = t149 * t158 * t219
  t223 = -0.310907e-1 * t98 + t141 / 0.2e1 + 0.98758367493069007035e-2 * t144 + t221 / 0.2e1
  t224 = -t125 + t141 + t183 + t221
  t225 = t73 * t75
  t226 = t76 * t11
  t228 = jnp.cbrt(0.1e1 / t19)
  t230 = t225 * t226 * t228
  t233 = jnp.sqrt(t230)
  t236 = t230 ** 0.15e1
  t238 = t88 * t74
  t239 = t89 * t12
  t240 = t228 ** 2
  t242 = t238 * t239 * t240
  t248 = jnp.log(0.1e1 + 0.16081979498692535067e2 / (0.379785e1 * t233 + 0.8969 * t230 + 0.204775 * t236 + 0.123235 * t242))
  t250 = 0.621814e-1 * (0.1e1 + 0.53425e-1 * t230) * t248
  t251 = 0.2e1 <= p.zeta_threshold
  t253 = lax_cond(t251, t103, 0.2e1 * t11)
  t254 = 0. <= p.zeta_threshold
  t255 = lax_cond(t254, t103, 0)
  t257 = (t253 + t255 - 0.2e1) * t111
  t268 = jnp.log(0.1e1 + 0.32163958997385070134e2 / (0.705945e1 * t233 + 0.1549425e1 * t230 + 0.420775 * t236 + 0.1562925 * t242))
  t281 = jnp.log(0.1e1 + 0.29608749977793437516e2 / (0.51785e1 * t233 + 0.905775 * t230 + 0.1100325 * t236 + 0.1241775 * t242))
  t282 = (0.1e1 + 0.278125e-1 * t230) * t281
  t285 = t257 * (-0.310907e-1 * (0.1e1 + 0.5137e-1 * t230) * t268 + t250 - 0.19751673498613801407e-1 * t282)
  t287 = 0.19751673498613801407e-1 * t257 * t282
  t288 = lax_cond(t251, t150, t12)
  t289 = lax_cond(t254, t150, 0)
  t291 = t288 / 0.2e1 + t289 / 0.2e1
  t292 = t291 ** 2
  t293 = t292 * t291
  t296 = t161 / t292 * t86
  t298 = t12 / t228
  t300 = jnp.exp(-t242 / 0.4e1)
  t306 = 0.375e-1 + 0.83333333333333333335e-3 * t296 * t177 * t298 * (0.1e1 - t300)
  t310 = t306 * t181
  t315 = t37 / t293
  t317 = jnp.exp(-(-t250 + t285 + t287) * t181 * t315)
  t319 = 0.1e1 / (t317 - 0.1e1)
  t323 = t292 ** 2
  t326 = 0.1e1 / t323 * t36 * t203
  t327 = t75 * t11
  t333 = t296 * t177 * t298 / 0.96e2 + t310 * t37 * t319 * t193 * t198 * t326 * t327 / t240 / 0.1536e4
  t343 = jnp.log(0.1e1 + t306 * t333 * t211 / (t310 * t37 * t319 * t333 + 0.1e1))
  t346 = t149 * t293 * t343 - t250 + t285 + t287
  t348 = lax_cond(t224 < t346, t346, t224)
  t351 = lax_cond(t70, t223, t348 * t19 / 0.2e1)
  t353 = jnp.cbrt(0.1e1 / t26)
  t355 = t225 * t226 * t353
  t358 = jnp.sqrt(t355)
  t361 = t355 ** 0.15e1
  t363 = t353 ** 2
  t365 = t238 * t239 * t363
  t371 = jnp.log(0.1e1 + 0.16081979498692535067e2 / (0.379785e1 * t358 + 0.8969 * t355 + 0.204775 * t361 + 0.123235 * t365))
  t373 = 0.621814e-1 * (0.1e1 + 0.53425e-1 * t355) * t371
  t384 = jnp.log(0.1e1 + 0.32163958997385070134e2 / (0.705945e1 * t358 + 0.1549425e1 * t355 + 0.420775 * t361 + 0.1562925 * t365))
  t397 = jnp.log(0.1e1 + 0.29608749977793437516e2 / (0.51785e1 * t358 + 0.905775 * t355 + 0.1100325 * t361 + 0.1241775 * t365))
  t398 = (0.1e1 + 0.278125e-1 * t355) * t397
  t401 = t257 * (-0.310907e-1 * (0.1e1 + 0.5137e-1 * t355) * t384 + t373 - 0.19751673498613801407e-1 * t398)
  t403 = 0.19751673498613801407e-1 * t257 * t398
  t405 = t12 / t353
  t407 = jnp.exp(-t365 / 0.4e1)
  t413 = 0.375e-1 + 0.83333333333333333335e-3 * t296 * t177 * t405 * (0.1e1 - t407)
  t417 = t413 * t181
  t422 = jnp.exp(-(-t373 + t401 + t403) * t181 * t315)
  t424 = 0.1e1 / (t422 - 0.1e1)
  t433 = t296 * t177 * t405 / 0.96e2 + t417 * t37 * t424 * t193 * t198 * t326 * t327 / t363 / 0.1536e4
  t443 = jnp.log(0.1e1 + t413 * t433 * t211 / (t417 * t37 * t424 * t433 + 0.1e1))
  t446 = t149 * t293 * t443 - t373 + t401 + t403
  t448 = lax_cond(t224 < t446, t446, t224)
  t451 = lax_cond(t70, t223, t448 * t26 / 0.2e1)
  t456 = lax_cond(t4, t103, 1)
  t461 = 0.19751673498613801407e-1 * (0.2e1 * t456 - 0.2e1) * t111 * t137
  t462 = lax_cond(t4, t150, 1)
  t463 = t462 ** 2
  t464 = t463 * t462
  t465 = 0.1e1 / t463
  t470 = 0.375e-1 + 0.83333333333333333332e-3 * t161 * t11 * t465 * t171
  t475 = t470 * t181
  t481 = jnp.exp(-(-t125 + t461) * t181 * t37 / t464)
  t484 = t37 / (t481 - 0.1e1)
  t487 = t463 ** 2
  t493 = t175 * t465 * t86 * t177 / 0.96e2 + t475 * t484 * t193 * t199 / t487 * t205 / 0.3072e4
  t502 = jnp.log(0.1e1 + t470 * t493 * t211 / (t475 * t484 * t493 + 0.1e1))
  t507 = -(0.1e1 + t57) * t66 * (t351 + t451) + (t57 * t66 + 0.1e1) * (t149 * t464 * t502 - t125 + t461)
  res = t507 * (0.1e1 + 0.45e1 * t507 * t66 * t65)
  return res


def invoke(
  p: NamedTuple, rho: Callable, r: jnp.ndarray, mo: Optional[Callable] = None,
  deorbitalize: Optional[float] = None,
):
  args = rho_to_arguments(p, rho, r, mo, deorbitalize)
  code = pol if p.nspin == 2 else unpol
  dens = args[0] if p.nspin == 1 else sum(args[0])
  ret = lax.cond((dens < p.dens_threshold), lambda *_: 0.,
                 lambda *_: code(p, *args), None)
  return ret