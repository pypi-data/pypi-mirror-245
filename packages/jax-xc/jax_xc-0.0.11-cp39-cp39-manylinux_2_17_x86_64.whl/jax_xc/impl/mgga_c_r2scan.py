"""Generated from mgga_c_r2scan.mpl."""

import jax
import jax.lax as lax
import jax.numpy as jnp
from jax.numpy import array as array
from jax.numpy import int32 as int32
from jax.numpy import nan as nan
from typing import Callable, Optional
from .utils import *


def pol(p, r, s=(None, None, None), l=(None, None), tau=(None, None)):
  params = p.params
  (r0, r1), (s0, s1, s2), (l0, l1), (tau0, tau1) = r, s, l, tau
  t1 = jnp.cbrt(3)
  t3 = jnp.cbrt(0.1e1 / jnp.pi)
  t4 = t1 * t3
  t5 = jnp.cbrt(4)
  t6 = t5 ** 2
  t7 = r0 + r1
  t8 = jnp.cbrt(t7)
  t10 = t6 / t8
  t11 = t4 * t10
  t13 = 0.1e1 + 0.53425e-1 * t11
  t14 = jnp.sqrt(t11)
  t16 = 0.8969 * t11
  t17 = t11 ** 0.15e1
  t18 = 0.204775 * t17
  t19 = t1 ** 2
  t20 = t3 ** 2
  t22 = t8 ** 2
  t25 = t19 * t20 * t5 / t22
  t26 = 0.123235 * t25
  t31 = jnp.log(0.1e1 + 0.16081979498692535067e2 / (0.379785e1 * t14 + t16 + t18 + t26))
  t33 = 0.621814e-1 * t13 * t31
  t34 = r0 - r1
  t35 = t34 ** 2
  t36 = t35 ** 2
  t37 = t7 ** 2
  t38 = t37 ** 2
  t40 = t36 / t38
  t42 = t34 / t7
  t43 = 0.1e1 + t42
  t44 = t43 <= p.zeta_threshold
  t45 = jnp.cbrt(p.zeta_threshold)
  t46 = t45 * p.zeta_threshold
  t47 = jnp.cbrt(t43)
  t49 = lax_cond(t44, t46, t47 * t43)
  t50 = 0.1e1 - t42
  t51 = t50 <= p.zeta_threshold
  t52 = jnp.cbrt(t50)
  t54 = lax_cond(t51, t46, t52 * t50)
  t55 = t49 + t54 - 0.2e1
  t56 = jnp.cbrt(2)
  t57 = t56 - 0.1e1
  t59 = 0.1e1 / t57 / 0.2e1
  t60 = t55 * t59
  t62 = 0.1e1 + 0.5137e-1 * t11
  t64 = 0.1549425e1 * t11
  t65 = 0.420775 * t17
  t66 = 0.1562925 * t25
  t71 = jnp.log(0.1e1 + 0.32163958997385070134e2 / (0.705945e1 * t14 + t64 + t65 + t66))
  t75 = 0.1e1 + 0.278125e-1 * t11
  t77 = 0.905775 * t11
  t78 = 0.1100325 * t17
  t79 = 0.1241775 * t25
  t84 = jnp.log(0.1e1 + 0.29608749977793437516e2 / (0.51785e1 * t14 + t77 + t78 + t79))
  t85 = t75 * t84
  t89 = t40 * t60 * (-0.310907e-1 * t62 * t71 + t33 - 0.19751673498613801407e-1 * t85)
  t91 = 0.19751673498613801407e-1 * t60 * t85
  t92 = jnp.log(0.2e1)
  t93 = 0.1e1 - t92
  t94 = jnp.pi ** 2
  t97 = t45 ** 2
  t98 = t47 ** 2
  t99 = lax_cond(t44, t97, t98)
  t100 = t52 ** 2
  t101 = lax_cond(t51, t97, t100)
  t103 = t99 / 0.2e1 + t101 / 0.2e1
  t104 = t103 ** 2
  t105 = t104 * t103
  t107 = 0.1e1 / t93
  t109 = 0.1e1 / t105
  t112 = jnp.exp(-(-t33 + t89 + t91) * t107 * t94 * t109)
  t113 = t112 - 0.1e1
  t121 = s0 + 0.2e1 * s1 + s2
  t132 = t107 * t94
  t133 = 0.1e1 / t113
  t138 = t97 * p.zeta_threshold
  t140 = lax_cond(t44, t138, t98 * t43)
  t142 = lax_cond(t51, t138, t100 * t50)
  t148 = jnp.sqrt(0.4e1)
  t149 = t148 * t14
  t151 = 0.3138525e-1 * t11
  t153 = (0.1e1 + 0.22225e-1 * t149 + t151) ** 2
  t158 = 0.1e1 - 0.2363e1 * t57 * t55 * t59
  t160 = t36 ** 2
  t162 = t38 ** 2
  t166 = -t160 * t36 / t162 / t38 + 0.1e1
  t168 = t148 / t14
  t175 = 0.1898925e1 * t149 + t16 + t18 + t26
  t178 = 0.1e1 + 0.16081979498692535067e2 / t175
  t179 = jnp.log(t178)
  t180 = 0.1328816518e-1 * t179
  t181 = t175 ** 2
  t185 = t11 ** 0.5
  t192 = 0.1e1 * t13 / t181 * (0.379785e1 * t168 + 0.35876e1 + 0.122865e1 * t185 + 0.24647 * t11) / t178
  t194 = 0.3529725e1 * t149 + t64 + t65 + t66
  t197 = 0.1e1 + 0.32163958997385070134e2 / t194
  t198 = jnp.log(t197)
  t200 = t194 ** 2
  t212 = 0.258925e1 * t149 + t77 + t78 + t79
  t215 = 0.1e1 + 0.29608749977793437516e2 / t212
  t216 = jnp.log(t215)
  t218 = t212 ** 2
  t219 = 0.1e1 / t218
  t224 = 0.51785e1 * t168 + 0.36231e1 + 0.660195 * t185 + 0.248355 * t11
  t225 = 0.1e1 / t215
  t245 = 0.1e1 / (0.1e1 + 0.4445e-1 * t14 + t151)
  t255 = jnp.cbrt(6)
  t256 = jnp.cbrt(t94)
  t257 = t256 ** 2
  t259 = t255 / t257
  t260 = t56 ** 2
  t263 = 0.1e1 / t22 / t37
  t264 = t121 * t263
  t265 = t255 ** 2
  t269 = t121 ** 2
  t277 = jnp.exp(-0.20444604078896369094 * t265 / t256 / t94 * t56 * t269 / t8 / t38 / t7)
  t283 = (0.1e1 + 0.27801896084645508333e-2 * (0.1e1 + 0.25e-1 * t11) / (0.1e1 + 0.4445e-1 * t11) * t121 / t8 / t37 * t56 / t104 * t19 / t3 * t5 * t132 * t133 + 0.43913724338827160496e-2 * t132 / (t140 / 0.2e1 + t142 / 0.2e1) * t109 * t133 * (0.5e1 * t4 * t10 * (0.285764e-1 / t153 * t158 * t166 * (0.4445e-1 * t168 + 0.125541) + t180 - t192 - t40 * t60 * (-0.6388517036e-2 * t198 + 0.1e1 * t62 / t200 * (0.705945e1 * t168 + 0.61977e1 + 0.252465e1 * t185 + 0.312585 * t11) / t197 + t180 - t192 - 0.21973736767207854065e-2 * t216 + 0.5848223622634646207 * t75 * t219 * t224 * t225) - 0.21973736767207854065e-2 * t60 * t216 + 0.5848223622634646207 * t60 * t75 * t219 * t224 * t225) - 0.45e2 * params.eta * (-0.285764e-1 * t245 * t158 * t166 + t33 - t89 - t91)) * t259 * t260 * t264 * t277) ** (0.1e1 / 0.4e1)
  t288 = jnp.log(0.1e1 + t113 * (0.1e1 - 0.1e1 / t283))
  t290 = t93 / t94 * t105 * t288
  t291 = jnp.cbrt(r0)
  t292 = t291 ** 2
  t296 = t43 / 0.2e1
  t297 = jnp.cbrt(t296)
  t298 = t297 ** 2
  t299 = t298 * t296
  t301 = jnp.cbrt(r1)
  t302 = t301 ** 2
  t306 = t50 / 0.2e1
  t307 = jnp.cbrt(t306)
  t308 = t307 ** 2
  t309 = t308 * t306
  t322 = (tau0 / t292 / r0 * t299 + tau1 / t302 / r1 * t309 - t264 / 0.8e1) / (0.3e1 / 0.1e2 * t265 * t257 * (t299 + t309) + params.eta * t121 * t263 / 0.8e1)
  t325 = lax_cond(0. < t322, 0, t322)
  t330 = jnp.exp(-0.64 * t325 / (0.1e1 - t325))
  t332 = 0.25e1 < t322
  t333 = lax_cond(t332, 0.25e1, t322)
  t335 = t333 ** 2
  t337 = t335 * t333
  t339 = t335 ** 2
  t348 = lax_cond(t332, t322, 0.25e1)
  t352 = jnp.exp(0.15e1 / (0.1e1 - t348))
  t354 = lax_cond(t322 <= 0.25e1, 0.1e1 - 0.64 * t333 - 0.4352 * t335 - 0.1535685604549e1 * t337 + 0.3061560252175e1 * t339 - 0.1915710236206e1 * t339 * t333 + 0.516884468372 * t339 * t335 - 0.51848879792e-1 * t339 * t337, -0.7 * t352)
  t355 = lax_cond(t322 <= 0., t330, t354)
  t358 = jnp.exp(0.1e1 * t245)
  t365 = (0.1e1 + 0.21337642104376358333e-1 * t259 * t260 * t121 * t263) ** (0.1e1 / 0.4e1)
  t370 = jnp.log(0.1e1 + (t358 - 0.1e1) * (0.1e1 - 0.1e1 / t365))
  res = -t33 + t89 + t91 + t290 + t355 * ((-0.285764e-1 * t245 + 0.285764e-1 * t370) * t158 * t166 + t33 - t89 - t91 - t290)
  return res


def unpol(p, r, s=None, l=None, tau=None):
  params = p.params
  r0, s0, l0, tau0 = r, s, l, tau
  t1 = jnp.cbrt(3)
  t3 = jnp.cbrt(0.1e1 / jnp.pi)
  t4 = t1 * t3
  t5 = jnp.cbrt(4)
  t6 = t5 ** 2
  t7 = jnp.cbrt(r0)
  t9 = t6 / t7
  t10 = t4 * t9
  t12 = 0.1e1 + 0.53425e-1 * t10
  t13 = jnp.sqrt(t10)
  t15 = 0.8969 * t10
  t16 = t10 ** 0.15e1
  t17 = 0.204775 * t16
  t18 = t1 ** 2
  t19 = t3 ** 2
  t21 = t7 ** 2
  t24 = t18 * t19 * t5 / t21
  t25 = 0.123235 * t24
  t30 = jnp.log(0.1e1 + 0.16081979498692535067e2 / (0.379785e1 * t13 + t15 + t17 + t25))
  t32 = 0.621814e-1 * t12 * t30
  t33 = 0.1e1 <= p.zeta_threshold
  t34 = jnp.cbrt(p.zeta_threshold)
  t36 = lax_cond(t33, t34 * p.zeta_threshold, 1)
  t38 = 0.2e1 * t36 - 0.2e1
  t39 = jnp.cbrt(2)
  t40 = t39 - 0.1e1
  t42 = 0.1e1 / t40 / 0.2e1
  t43 = t38 * t42
  t45 = 0.1e1 + 0.278125e-1 * t10
  t47 = 0.905775 * t10
  t48 = 0.1100325 * t16
  t49 = 0.1241775 * t24
  t54 = jnp.log(0.1e1 + 0.29608749977793437516e2 / (0.51785e1 * t13 + t47 + t48 + t49))
  t57 = 0.19751673498613801407e-1 * t43 * t45 * t54
  t58 = jnp.log(0.2e1)
  t59 = 0.1e1 - t58
  t60 = jnp.pi ** 2
  t63 = t34 ** 2
  t64 = lax_cond(t33, t63, 1)
  t65 = t64 ** 2
  t66 = t65 * t64
  t68 = 0.1e1 / t59
  t70 = 0.1e1 / t66
  t73 = jnp.exp(-(-t32 + t57) * t68 * t60 * t70)
  t74 = t73 - 0.1e1
  t82 = r0 ** 2
  t92 = t68 * t60
  t93 = 0.1e1 / t74
  t99 = lax_cond(t33, t63 * p.zeta_threshold, 1)
  t103 = jnp.sqrt(0.4e1)
  t104 = t103 * t13
  t106 = 0.3138525e-1 * t10
  t108 = (0.1e1 + 0.22225e-1 * t104 + t106) ** 2
  t113 = 0.1e1 - 0.2363e1 * t40 * t38 * t42
  t116 = t103 / t13
  t122 = 0.1898925e1 * t104 + t15 + t17 + t25
  t125 = 0.1e1 + 0.16081979498692535067e2 / t122
  t126 = jnp.log(t125)
  t128 = t122 ** 2
  t132 = t10 ** 0.5
  t141 = 0.258925e1 * t104 + t47 + t48 + t49
  t144 = 0.1e1 + 0.29608749977793437516e2 / t141
  t145 = jnp.log(t144)
  t149 = t141 ** 2
  t166 = 0.1e1 / (0.1e1 + 0.4445e-1 * t13 + t106)
  t175 = jnp.cbrt(6)
  t176 = jnp.cbrt(t60)
  t177 = t176 ** 2
  t179 = t175 / t177
  t180 = t39 ** 2
  t183 = 0.1e1 / t21 / t82
  t184 = s0 * t183
  t185 = t175 ** 2
  t189 = s0 ** 2
  t191 = t82 ** 2
  t198 = jnp.exp(-0.20444604078896369094 * t185 / t176 / t60 * t39 * t189 / t7 / t191 / r0)
  t204 = (0.1e1 + 0.27801896084645508333e-2 * (0.1e1 + 0.25e-1 * t10) / (0.1e1 + 0.4445e-1 * t10) * s0 / t7 / t82 * t39 / t65 * t18 / t3 * t5 * t92 * t93 + 0.43913724338827160496e-2 * t92 / t99 * t70 * t93 * (0.5e1 * t4 * t9 * (0.285764e-1 / t108 * t113 * (0.4445e-1 * t116 + 0.125541) + 0.1328816518e-1 * t126 - 0.1e1 * t12 / t128 * (0.379785e1 * t116 + 0.35876e1 + 0.122865e1 * t132 + 0.24647 * t10) / t125 - 0.21973736767207854065e-2 * t43 * t145 + 0.5848223622634646207 * t43 * t45 / t149 * (0.51785e1 * t116 + 0.36231e1 + 0.660195 * t132 + 0.248355 * t10) / t144) - 0.45e2 * params.eta * (-0.285764e-1 * t166 * t113 + t32 - t57)) * t179 * t180 * t184 * t198) ** (0.1e1 / 0.4e1)
  t209 = jnp.log(0.1e1 + t74 * (0.1e1 - 0.1e1 / t204))
  t211 = t59 / t60 * t66 * t209
  t225 = (tau0 / t21 / r0 - t184 / 0.8e1) / (0.3e1 / 0.2e2 * t185 * t177 * t39 + params.eta * s0 * t183 / 0.8e1)
  t228 = lax_cond(0. < t225, 0, t225)
  t233 = jnp.exp(-0.64 * t228 / (0.1e1 - t228))
  t235 = 0.25e1 < t225
  t236 = lax_cond(t235, 0.25e1, t225)
  t238 = t236 ** 2
  t240 = t238 * t236
  t242 = t238 ** 2
  t251 = lax_cond(t235, t225, 0.25e1)
  t255 = jnp.exp(0.15e1 / (0.1e1 - t251))
  t257 = lax_cond(t225 <= 0.25e1, 0.1e1 - 0.64 * t236 - 0.4352 * t238 - 0.1535685604549e1 * t240 + 0.3061560252175e1 * t242 - 0.1915710236206e1 * t242 * t236 + 0.516884468372 * t242 * t238 - 0.51848879792e-1 * t242 * t240, -0.7 * t255)
  t258 = lax_cond(t225 <= 0., t233, t257)
  t261 = jnp.exp(0.1e1 * t166)
  t268 = (0.1e1 + 0.21337642104376358333e-1 * t179 * t180 * s0 * t183) ** (0.1e1 / 0.4e1)
  t273 = jnp.log(0.1e1 + (t261 - 0.1e1) * (0.1e1 - 0.1e1 / t268))
  res = -t32 + t57 + t211 + t258 * ((-0.285764e-1 * t166 + 0.285764e-1 * t273) * t113 + t32 - t57 - t211)
  return res


def invoke(
  p: NamedTuple, rho: Callable, r: jnp.ndarray, mo: Optional[Callable] = None,
  deorbitalize: Optional[float] = None,
):
  args = rho_to_arguments(p, rho, r, mo, deorbitalize)
  code = pol if p.nspin == 2 else unpol
  dens = args[0] if p.nspin == 1 else sum(args[0])
  ret = lax.cond((dens < p.dens_threshold), lambda *_: 0.,
                 lambda *_: code(p, *args), None)
  return ret