"""Generated from gga_c_optc.mpl."""

import jax
import jax.lax as lax
import jax.numpy as jnp
from jax.numpy import array as array
from jax.numpy import int32 as int32
from jax.numpy import nan as nan
from typing import Callable, Optional
from .utils import *


def pol(p, r, s=(None, None, None), l=(None, None), tau=(None, None)):
  params = p.params
  (r0, r1), (s0, s1, s2), (l0, l1), (tau0, tau1) = r, s, l, tau
  t1 = jnp.cbrt(3)
  t2 = 0.1e1 / jnp.pi
  t3 = jnp.cbrt(t2)
  t4 = t1 * t3
  t5 = jnp.cbrt(4)
  t6 = t5 ** 2
  t7 = r0 + r1
  t8 = jnp.cbrt(t7)
  t9 = 0.1e1 / t8
  t11 = t4 * t6 * t9
  t14 = jnp.sqrt(t11)
  t17 = t11 ** 0.15e1
  t19 = t1 ** 2
  t20 = t3 ** 2
  t21 = t19 * t20
  t22 = t8 ** 2
  t23 = 0.1e1 / t22
  t25 = t21 * t5 * t23
  t31 = jnp.log(0.1e1 + 0.16081824322151104822e2 / (0.379785e1 * t14 + 0.8969 * t11 + 0.204775 * t17 + 0.123235 * t25))
  t33 = 0.62182e-1 * (0.1e1 + 0.53425e-1 * t11) * t31
  t34 = r0 - r1
  t35 = t34 ** 2
  t36 = t35 ** 2
  t37 = t7 ** 2
  t38 = t37 ** 2
  t42 = t34 / t7
  t43 = 0.1e1 + t42
  t44 = t43 <= p.zeta_threshold
  t45 = jnp.cbrt(p.zeta_threshold)
  t46 = t45 * p.zeta_threshold
  t47 = jnp.cbrt(t43)
  t49 = lax_cond(t44, t46, t47 * t43)
  t50 = 0.1e1 - t42
  t51 = t50 <= p.zeta_threshold
  t52 = jnp.cbrt(t50)
  t54 = lax_cond(t51, t46, t52 * t50)
  t56 = jnp.cbrt(2)
  t59 = 0.1e1 / (0.2e1 * t56 - 0.2e1)
  t60 = (t49 + t54 - 0.2e1) * t59
  t71 = jnp.log(0.1e1 + 0.32164683177870697974e2 / (0.705945e1 * t14 + 0.1549425e1 * t11 + 0.420775 * t17 + 0.1562925 * t25))
  t84 = jnp.log(0.1e1 + 0.29608574643216675549e2 / (0.51785e1 * t14 + 0.905775 * t11 + 0.1100325 * t17 + 0.1241775 * t25))
  t85 = (0.1e1 + 0.278125e-1 * t11) * t84
  t89 = t36 / t38 * t60 * (-0.3109e-1 * (0.1e1 + 0.5137e-1 * t11) * t71 + t33 - 0.19751789702565206229e-1 * t85)
  t91 = 0.19751789702565206229e-1 * t60 * t85
  t92 = jnp.pi ** 2
  t94 = 0.1e1 / t92 * t19
  t95 = jnp.cbrt(t92)
  t96 = t95 ** 2
  t97 = t45 ** 2
  t98 = t47 ** 2
  t99 = lax_cond(t44, t97, t98)
  t100 = t52 ** 2
  t101 = lax_cond(t51, t97, t100)
  t103 = t99 / 0.2e1 + t101 / 0.2e1
  t104 = t103 ** 2
  t105 = t104 * t103
  t107 = jnp.pi * t19
  t108 = 0.1e1 / t95
  t110 = s0 + 0.2e1 * s1 + s2
  t112 = 0.1e1 / t8 / t37
  t115 = 0.1e1 / t104
  t117 = 0.1e1 / t3
  t118 = t117 * t5
  t122 = jnp.pi * t108
  t127 = 0.1e1 / t96
  t128 = t92 * t1 * t127
  t131 = jnp.exp(-0.13067859477648036197e2 * (-t33 + t89 + t91) / t105 * t128)
  t132 = t131 - 0.1e1
  t133 = 0.1e1 / t132
  t134 = t110 ** 2
  t139 = t56 ** 2
  t141 = t104 ** 2
  t143 = 0.1e1 / t20
  t146 = 0.1e1 / t22 / t38 * t139 / t141 * t143 * t6
  t151 = jnp.pi * t1
  t155 = t112 * t56
  t161 = t92 * t19
  t162 = t132 ** 2
  t175 = jnp.log(0.1e1 + 0.88547815820543093274 * t107 * t108 * (t110 * t112 * t56 * t115 * t19 * t118 / 0.96e2 + 0.86472476387249114526e-3 * t122 * t133 * t134 * t146) / (0.1e1 + 0.27671192443919716648e-1 * t151 * t108 * t133 * t110 * t155 * t115 * t117 * t5 + 0.76569489126843962094e-3 * t161 * t127 / t162 * t134 * t146))
  t179 = t2 * t95
  t193 = jnp.cbrt(9)
  t194 = t193 ** 2
  t196 = t2 * t5 * t194 * t3
  t204 = jnp.exp(-0.25e2 / 0.18e2 * t196 / t22 / t37 * t104 * t110 * t56)
  t212 = t4 * t6
  t213 = t9 * t56
  t215 = jnp.cbrt(0.1e1 / t43)
  t217 = t212 * t213 * t215
  t220 = jnp.sqrt(t217)
  t223 = t217 ** 0.15e1
  t225 = t21 * t5
  t226 = t23 * t139
  t227 = t215 ** 2
  t229 = t225 * t226 * t227
  t235 = jnp.log(0.1e1 + 0.16081824322151104822e2 / (0.379785e1 * t220 + 0.8969 * t217 + 0.204775 * t223 + 0.123235 * t229))
  t237 = 0.62182e-1 * (0.1e1 + 0.53425e-1 * t217) * t235
  t238 = 0.2e1 <= p.zeta_threshold
  t240 = lax_cond(t238, t46, 0.2e1 * t56)
  t241 = 0. <= p.zeta_threshold
  t242 = lax_cond(t241, t46, 0)
  t244 = (t240 + t242 - 0.2e1) * t59
  t255 = jnp.log(0.1e1 + 0.32164683177870697974e2 / (0.705945e1 * t220 + 0.1549425e1 * t217 + 0.420775 * t223 + 0.1562925 * t229))
  t268 = jnp.log(0.1e1 + 0.29608574643216675549e2 / (0.51785e1 * t220 + 0.905775 * t217 + 0.1100325 * t223 + 0.1241775 * t229))
  t269 = (0.1e1 + 0.278125e-1 * t217) * t268
  t272 = t244 * (-0.3109e-1 * (0.1e1 + 0.5137e-1 * t217) * t255 + t237 - 0.19751789702565206229e-1 * t269)
  t274 = 0.19751789702565206229e-1 * t244 * t269
  t275 = lax_cond(t238, t97, t139)
  t276 = lax_cond(t241, t97, 0)
  t278 = t275 / 0.2e1 + t276 / 0.2e1
  t279 = t278 ** 2
  t280 = t279 * t278
  t281 = t96 * t280
  t282 = r0 ** 2
  t283 = jnp.cbrt(r0)
  t284 = t283 ** 2
  t286 = 0.1e1 / t284 / t282
  t287 = s0 * t286
  t288 = 0.1e1 / t279
  t289 = t288 * t19
  t291 = 0.1e1 / t215
  t292 = t8 * t291
  t297 = 0.1e1 / t280
  t301 = jnp.exp(-0.13067859477648036197e2 * (-t237 + t272 + t274) * t297 * t128)
  t302 = t301 - 0.1e1
  t303 = 0.1e1 / t302
  t304 = s0 ** 2
  t306 = t282 ** 2
  t309 = 0.1e1 / t283 / t306 / r0
  t312 = t279 ** 2
  t313 = 0.1e1 / t312
  t314 = t313 * t143
  t315 = t6 * t22
  t317 = t315 / t227
  t328 = t5 * t8
  t333 = t302 ** 2
  t349 = jnp.log(0.1e1 + 0.88547815820543093274 * t107 * t108 * (t287 * t289 * t118 * t292 / 0.96e2 + 0.86472476387249114526e-3 * t122 * t303 * t304 * t309 * t314 * t317) / (0.1e1 + 0.27671192443919716648e-1 * t151 * t108 * t303 * s0 * t286 * t288 * t117 * t328 * t291 + 0.76569489126843962094e-3 * t161 * t127 / t333 * t304 * t309 * t313 * t143 * t317))
  t367 = t56 * t279
  t371 = jnp.exp(-0.25e2 / 0.18e2 * t196 * t367 * t287)
  t377 = lax_cond(t44, p.zeta_threshold, t43)
  t380 = jnp.cbrt(0.1e1 / t50)
  t382 = t212 * t213 * t380
  t385 = jnp.sqrt(t382)
  t388 = t382 ** 0.15e1
  t390 = t380 ** 2
  t392 = t225 * t226 * t390
  t398 = jnp.log(0.1e1 + 0.16081824322151104822e2 / (0.379785e1 * t385 + 0.8969 * t382 + 0.204775 * t388 + 0.123235 * t392))
  t400 = 0.62182e-1 * (0.1e1 + 0.53425e-1 * t382) * t398
  t411 = jnp.log(0.1e1 + 0.32164683177870697974e2 / (0.705945e1 * t385 + 0.1549425e1 * t382 + 0.420775 * t388 + 0.1562925 * t392))
  t424 = jnp.log(0.1e1 + 0.29608574643216675549e2 / (0.51785e1 * t385 + 0.905775 * t382 + 0.1100325 * t388 + 0.1241775 * t392))
  t425 = (0.1e1 + 0.278125e-1 * t382) * t424
  t428 = t244 * (-0.3109e-1 * (0.1e1 + 0.5137e-1 * t382) * t411 + t400 - 0.19751789702565206229e-1 * t425)
  t430 = 0.19751789702565206229e-1 * t244 * t425
  t431 = r1 ** 2
  t432 = jnp.cbrt(r1)
  t433 = t432 ** 2
  t435 = 0.1e1 / t433 / t431
  t436 = s2 * t435
  t438 = 0.1e1 / t380
  t439 = t8 * t438
  t447 = jnp.exp(-0.13067859477648036197e2 * (-t400 + t428 + t430) * t297 * t128)
  t448 = t447 - 0.1e1
  t449 = 0.1e1 / t448
  t450 = s2 ** 2
  t452 = t431 ** 2
  t455 = 0.1e1 / t432 / t452 / r1
  t459 = t315 / t390
  t474 = t448 ** 2
  t490 = jnp.log(0.1e1 + 0.88547815820543093274 * t107 * t108 * (t436 * t289 * t118 * t439 / 0.96e2 + 0.86472476387249114526e-3 * t122 * t449 * t450 * t455 * t314 * t459) / (0.1e1 + 0.27671192443919716648e-1 * t151 * t108 * t449 * s2 * t435 * t288 * t117 * t328 * t438 + 0.76569489126843962094e-3 * t161 * t127 / t474 * t450 * t455 * t313 * t143 * t459))
  t511 = jnp.exp(-0.25e2 / 0.18e2 * t196 * t367 * t436)
  t517 = lax_cond(t51, p.zeta_threshold, t50)
  res = params.c1 * (-t33 + t89 + t91 + 0.25507875555555555556e-1 * t94 * t96 * t105 * t175 + t179 * ((0.2568e1 + 0.58165e1 * t11 + 0.184725e-2 * t25) / (0.1e4 + 0.218075e4 * t11 + 0.118e3 * t25) - 0.18535714285714285714e-2) * t103 * t110 * t155 * t118 * t204 / 0.2e1) + (params.c2 - params.c1) * ((-t237 + t272 + t274 + 0.25507875555555555556e-1 * t94 * t281 * t349 + t179 * ((0.2568e1 + 0.58165e1 * t217 + 0.184725e-2 * t229) / (0.1e4 + 0.218075e4 * t217 + 0.118e3 * t229) - 0.18535714285714285714e-2) * t278 * s0 * t286 * t117 * t5 * t292 * t371 / 0.2e1) * t377 / 0.2e1 + (-t400 + t428 + t430 + 0.25507875555555555556e-1 * t94 * t281 * t490 + t179 * ((0.2568e1 + 0.58165e1 * t382 + 0.184725e-2 * t392) / (0.1e4 + 0.218075e4 * t382 + 0.118e3 * t392) - 0.18535714285714285714e-2) * t278 * s2 * t435 * t117 * t5 * t439 * t511 / 0.2e1) * t517 / 0.2e1)
  return res


def unpol(p, r, s=None, l=None, tau=None):
  params = p.params
  r0, s0, l0, tau0 = r, s, l, tau
  t1 = jnp.cbrt(3)
  t2 = 0.1e1 / jnp.pi
  t3 = jnp.cbrt(t2)
  t4 = t1 * t3
  t5 = jnp.cbrt(4)
  t6 = t5 ** 2
  t7 = jnp.cbrt(r0)
  t9 = t6 / t7
  t10 = t4 * t9
  t13 = jnp.sqrt(t10)
  t16 = t10 ** 0.15e1
  t18 = t1 ** 2
  t19 = t3 ** 2
  t20 = t18 * t19
  t21 = t7 ** 2
  t23 = t5 / t21
  t24 = t20 * t23
  t30 = jnp.log(0.1e1 + 0.16081824322151104822e2 / (0.379785e1 * t13 + 0.8969 * t10 + 0.204775 * t16 + 0.123235 * t24))
  t32 = 0.62182e-1 * (0.1e1 + 0.53425e-1 * t10) * t30
  t33 = 0.1e1 <= p.zeta_threshold
  t34 = jnp.cbrt(p.zeta_threshold)
  t35 = t34 * p.zeta_threshold
  t36 = lax_cond(t33, t35, 1)
  t39 = jnp.cbrt(2)
  t42 = 0.1e1 / (0.2e1 * t39 - 0.2e1)
  t54 = jnp.log(0.1e1 + 0.29608574643216675549e2 / (0.51785e1 * t13 + 0.905775 * t10 + 0.1100325 * t16 + 0.1241775 * t24))
  t57 = 0.19751789702565206229e-1 * (0.2e1 * t36 - 0.2e1) * t42 * (0.1e1 + 0.278125e-1 * t10) * t54
  t58 = jnp.pi ** 2
  t60 = 0.1e1 / t58 * t18
  t61 = jnp.cbrt(t58)
  t62 = t61 ** 2
  t63 = t34 ** 2
  t64 = lax_cond(t33, t63, 1)
  t65 = t64 ** 2
  t66 = t65 * t64
  t68 = jnp.pi * t18
  t69 = 0.1e1 / t61
  t70 = r0 ** 2
  t72 = 0.1e1 / t7 / t70
  t73 = s0 * t72
  t75 = 0.1e1 / t65
  t77 = 0.1e1 / t3
  t78 = t77 * t5
  t82 = jnp.pi * t69
  t87 = 0.1e1 / t62
  t88 = t58 * t1 * t87
  t91 = jnp.exp(-0.13067859477648036197e2 * (-t32 + t57) / t66 * t88)
  t92 = t91 - 0.1e1
  t93 = 0.1e1 / t92
  t94 = s0 ** 2
  t97 = t70 ** 2
  t99 = 0.1e1 / t21 / t97
  t100 = t39 ** 2
  t102 = t65 ** 2
  t104 = 0.1e1 / t19
  t107 = t99 * t100 / t102 * t104 * t6
  t112 = jnp.pi * t1
  t116 = t72 * t39
  t122 = t58 * t18
  t123 = t92 ** 2
  t136 = jnp.log(0.1e1 + 0.88547815820543093274 * t68 * t69 * (t73 * t39 * t75 * t18 * t78 / 0.96e2 + 0.86472476387249114526e-3 * t82 * t93 * t94 * t107) / (0.1e1 + 0.27671192443919716648e-1 * t112 * t69 * t93 * s0 * t116 * t75 * t77 * t5 + 0.76569489126843962094e-3 * t122 * t87 / t123 * t94 * t107))
  t140 = t2 * t61
  t153 = t2 * t5
  t154 = jnp.cbrt(9)
  t155 = t154 ** 2
  t159 = 0.1e1 / t21 / t70
  t165 = jnp.exp(-0.25e2 / 0.18e2 * t153 * t155 * t3 * t159 * t65 * s0 * t39)
  t174 = t4 * t9 * t39
  t177 = jnp.sqrt(t174)
  t180 = t174 ** 0.15e1
  t183 = t20 * t23 * t100
  t189 = jnp.log(0.1e1 + 0.16081824322151104822e2 / (0.379785e1 * t177 + 0.8969 * t174 + 0.204775 * t180 + 0.123235 * t183))
  t191 = 0.62182e-1 * (0.1e1 + 0.53425e-1 * t174) * t189
  t192 = 0.2e1 <= p.zeta_threshold
  t194 = lax_cond(t192, t35, 0.2e1 * t39)
  t195 = 0. <= p.zeta_threshold
  t196 = lax_cond(t195, t35, 0)
  t198 = (t194 + t196 - 0.2e1) * t42
  t209 = jnp.log(0.1e1 + 0.32164683177870697974e2 / (0.705945e1 * t177 + 0.1549425e1 * t174 + 0.420775 * t180 + 0.1562925 * t183))
  t222 = jnp.log(0.1e1 + 0.29608574643216675549e2 / (0.51785e1 * t177 + 0.905775 * t174 + 0.1100325 * t180 + 0.1241775 * t183))
  t223 = (0.1e1 + 0.278125e-1 * t174) * t222
  t226 = t198 * (-0.3109e-1 * (0.1e1 + 0.5137e-1 * t174) * t209 + t191 - 0.19751789702565206229e-1 * t223)
  t228 = 0.19751789702565206229e-1 * t198 * t223
  t229 = lax_cond(t192, t63, t100)
  t230 = lax_cond(t195, t63, 0)
  t232 = t229 / 0.2e1 + t230 / 0.2e1
  t233 = t232 ** 2
  t234 = t233 * t232
  t236 = 0.1e1 / t233
  t239 = t5 * t100
  t248 = jnp.exp(-0.13067859477648036197e2 * (-t191 + t226 + t228) / t234 * t88)
  t249 = t248 - 0.1e1
  t250 = 0.1e1 / t249
  t253 = t233 ** 2
  t258 = t99 / t253 * t104 * t6 * t39
  t271 = t249 ** 2
  t284 = jnp.log(0.1e1 + 0.88547815820543093274 * t68 * t69 * (t73 * t236 * t18 * t77 * t239 / 0.96e2 + 0.17294495277449822906e-2 * t82 * t250 * t94 * t258) / (0.1e1 + 0.27671192443919716647e-1 * t112 * t69 * t250 * s0 * t72 * t236 * t78 * t100 + 0.15313897825368792419e-2 * t122 * t87 / t271 * t94 * t258))
  t307 = jnp.exp(-0.25e2 / 0.9e1 * t153 * t155 * t3 * t159 * t233 * s0)
  t314 = lax_cond(t33, p.zeta_threshold, 1)
  res = params.c1 * (-t32 + t57 + 0.25507875555555555556e-1 * t60 * t62 * t66 * t136 + t140 * ((0.2568e1 + 0.58165e1 * t10 + 0.184725e-2 * t24) / (0.1e4 + 0.218075e4 * t10 + 0.118e3 * t24) - 0.18535714285714285714e-2) * t64 * s0 * t116 * t78 * t165 / 0.2e1) + (params.c2 - params.c1) * (-t191 + t226 + t228 + 0.25507875555555555556e-1 * t60 * t62 * t234 * t284 + t140 * ((0.2568e1 + 0.58165e1 * t174 + 0.184725e-2 * t183) / (0.1e4 + 0.218075e4 * t174 + 0.118e3 * t183) - 0.18535714285714285714e-2) * t232 * s0 * t72 * t77 * t239 * t307 / 0.2e1) * t314
  return res


def invoke(
  p: NamedTuple, rho: Callable, r: jnp.ndarray, mo: Optional[Callable] = None,
  deorbitalize: Optional[float] = None,
):
  args = rho_to_arguments(p, rho, r, mo, deorbitalize)
  code = pol if p.nspin == 2 else unpol
  dens = args[0] if p.nspin == 1 else sum(args[0])
  ret = lax.cond((dens < p.dens_threshold), lambda *_: 0.,
                 lambda *_: code(p, *args), None)
  return ret