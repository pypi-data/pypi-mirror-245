"""Generated from mgga_c_kcisk.mpl."""

import jax
import jax.lax as lax
import jax.numpy as jnp
from jax.numpy import array as array
from jax.numpy import int32 as int32
from jax.numpy import nan as nan
from typing import Callable, Optional
from .utils import *


def pol(p, r, s=(None, None, None), l=(None, None), tau=(None, None)):
  params = p.params
  (r0, r1), (s0, s1, s2), (l0, l1), (tau0, tau1) = r, s, l, tau
  t1 = jnp.cbrt(3)
  t2 = 0.1e1 / jnp.pi
  t3 = jnp.cbrt(t2)
  t4 = t1 * t3
  t5 = jnp.cbrt(4)
  t6 = t5 ** 2
  t7 = r0 + r1
  t8 = jnp.cbrt(t7)
  t9 = 0.1e1 / t8
  t10 = t6 * t9
  t11 = t4 * t10
  t14 = jnp.sqrt(t11)
  t17 = t11 ** 0.15e1
  t19 = t1 ** 2
  t20 = t3 ** 2
  t21 = t19 * t20
  t22 = t8 ** 2
  t23 = 0.1e1 / t22
  t24 = t5 * t23
  t25 = t21 * t24
  t31 = jnp.log(0.1e1 + 0.16081824322151104822e2 / (0.379785e1 * t14 + 0.8969 * t11 + 0.204775 * t17 + 0.123235 * t25))
  t33 = 0.62182e-1 * (0.1e1 + 0.53425e-1 * t11) * t31
  t35 = jnp.cbrt(p.zeta_threshold)
  t36 = t35 * p.zeta_threshold
  t37 = lax_cond(0.1e1 <= p.zeta_threshold, t36, 1)
  t40 = jnp.cbrt(2)
  t43 = 0.1e1 / (0.2e1 * t40 - 0.2e1)
  t44 = (0.2e1 * t37 - 0.2e1) * t43
  t55 = jnp.log(0.1e1 + 0.29608574643216675549e2 / (0.51785e1 * t14 + 0.905775 * t11 + 0.1100325 * t17 + 0.1241775 * t25))
  t56 = (0.1e1 + 0.278125e-1 * t11) * t55
  t59 = -t33 + 0.19751789702565206229e-1 * t44 * t56
  t61 = jnp.cbrt(6)
  t62 = t61 ** 2
  t64 = jnp.pi ** 2
  t65 = jnp.cbrt(t64)
  t66 = 0.1e1 / t65
  t70 = t40 * t1 * t3 * t6 * t9
  t73 = jnp.sqrt(t70)
  t76 = t70 ** 0.15e1
  t78 = t40 ** 2
  t82 = t78 * t19 * t20 * t5 * t23
  t88 = jnp.log(0.1e1 + 0.16081824322151104822e2 / (0.379785e1 * t73 + 0.8969 * t70 + 0.204775 * t76 + 0.123235 * t82))
  t101 = jnp.log(0.1e1 + 0.29608574643216675549e2 / (0.51785e1 * t73 + 0.905775 * t70 + 0.1100325 * t76 + 0.1241775 * t82))
  t109 = 0.1e2 / 0.9e1 * t40 * t2 * t62 * t66 * (-0.62182e-1 * (0.1e1 + 0.53425e-1 * t70) * t88 + 0.19751789702565206229e-1 * t44 * (0.1e1 + 0.278125e-1 * t70) * t101) * t9
  t112 = lax_cond(t109 < -0.66725e-1, 0, 0.66725e-1 + t109)
  t115 = s0 + 0.2e1 * s1 + s2
  t116 = t7 ** 2
  t118 = 0.1e1 / t8 / t116
  t121 = 0.1e1 / t3
  t122 = t19 * t121
  t125 = lax_cond(0. < t59, t59, -t59)
  t132 = jnp.log(0.1e1 + 0.53972366148531951642e-1 * t112 * t40 * t115 * t118 * t122 * t5 / t125)
  t138 = t1 / t20
  t139 = t138 * t6
  t141 = 0.1e1 / t8 / t7
  t142 = 0.1e1 / t7
  t143 = t2 * t142
  t149 = 0.1e1 + t14 * (0.107924e1 + 0.3964e-1 * t14 + 0.123825e-1 * t11) / 0.2e1
  t150 = t149 ** 2
  t156 = t1 * t3 * t2
  t161 = t19 * t20 * t2
  t163 = 0.1e1 / t22 / t7
  t167 = 0.1e1 / t64
  t168 = 0.1e1 / t116
  t169 = t167 * t168
  t172 = t1 * t3 * t167
  t176 = -0.1878e-1 * t143 + 0.1317375e-2 * t156 * t6 * t141 - 0.23775e-3 * t161 * t5 * t163 + 0.639e-4 * t169 - 0.540140625e-6 * t172 * t6 * t118
  t178 = 0.367983135e-2 * t143 / t150 - t59 * t176
  t180 = 4 ** (0.1e1 / 0.6e1)
  t182 = t14 * t11
  t184 = 0.1e1 / t149
  t188 = t59 ** 2
  t191 = 0.1e1 / (0.19711288999999999999e-2 * t138 * t180 * t22 * t182 * t184 - 0.2e1 * t188)
  t194 = t139 * t141 * t178 * t191 * t115
  t197 = jnp.sqrt(0.4e1)
  t202 = t6 * t22
  t209 = (0.619125e-2 * t59 * t197 * t182 * t184 - 0.79593333333333333331e-1 * t138 * t202 * t176) * t191 * t115 * t168
  t212 = t115 ** 2
  t213 = t116 ** 2
  t216 = t178 * t191 * t212 / t213
  t220 = (t59 / (0.1e1 + 0.193 * t132) + 0.99491666666666666664e-2 * t194) / (0.1e1 + t209 / 0.8e1 - t216 / 0.64e2)
  t222 = (r0 - r1) * t142
  t223 = 0.1e1 + t222
  t224 = t223 <= p.zeta_threshold
  t225 = jnp.cbrt(t223)
  t227 = lax_cond(t224, t36, t225 * t223)
  t228 = 0.1e1 - t222
  t229 = t228 <= p.zeta_threshold
  t230 = jnp.cbrt(t228)
  t232 = lax_cond(t229, t36, t230 * t228)
  t237 = lax_cond(0.2e1 <= p.zeta_threshold, t36, 0.2e1 * t40)
  t239 = lax_cond(0. <= p.zeta_threshold, t36, 0)
  t241 = (t237 + t239 - 0.2e1) * t43
  t252 = jnp.log(0.1e1 + 0.32164683177870697974e2 / (0.705945e1 * t14 + 0.1549425e1 * t11 + 0.420775 * t17 + 0.1562925 * t25))
  t260 = -t33 + t241 * (-0.3109e-1 * (0.1e1 + 0.5137e-1 * t11) * t252 + t33 - 0.19751789702565206229e-1 * t56) + 0.19751789702565206229e-1 * t241 * t56
  t261 = t2 * t62
  t265 = 0.1e2 / 0.9e1 * t261 * t66 * t59 * t9
  t268 = lax_cond(t265 < -0.66725e-1, 0, 0.66725e-1 + t265)
  t273 = lax_cond(0. < t260, t260, -t260)
  t280 = jnp.log(0.1e1 + 0.5397236614853195164e-1 * t268 * t115 * t118 * t122 * t5 / t273)
  t297 = lax_cond(t224, p.zeta_threshold, t223)
  t299 = t4 * t6
  t300 = t9 * t40
  t301 = 0.1e1 / t223
  t302 = jnp.cbrt(t301)
  t304 = t299 * t300 * t302
  t307 = jnp.sqrt(t304)
  t310 = t304 ** 0.15e1
  t312 = t21 * t5
  t313 = t23 * t78
  t314 = t302 ** 2
  t316 = t312 * t313 * t314
  t322 = jnp.log(0.1e1 + 0.16081824322151104822e2 / (0.379785e1 * t307 + 0.8969 * t304 + 0.204775 * t310 + 0.123235 * t316))
  t324 = 0.62182e-1 * (0.1e1 + 0.53425e-1 * t304) * t322
  t335 = jnp.log(0.1e1 + 0.29608574643216675549e2 / (0.51785e1 * t307 + 0.905775 * t304 + 0.1100325 * t310 + 0.1241775 * t316))
  t336 = (0.1e1 + 0.278125e-1 * t304) * t335
  t339 = -t324 + 0.19751789702565206229e-1 * t44 * t336
  t341 = t78 * t2 * t62
  t343 = t78 * t1 * t3
  t345 = t343 * t10 * t302
  t348 = jnp.sqrt(t345)
  t351 = t345 ** 0.15e1
  t354 = t40 * t19 * t20
  t356 = t354 * t24 * t314
  t362 = jnp.log(0.1e1 + 0.16081824322151104822e2 / (0.379785e1 * t348 + 0.8969 * t345 + 0.204775 * t351 + 0.24647 * t356))
  t375 = jnp.log(0.1e1 + 0.29608574643216675549e2 / (0.51785e1 * t348 + 0.905775 * t345 + 0.1100325 * t351 + 0.248355 * t356))
  t381 = t7 * t223
  t382 = jnp.cbrt(t381)
  t383 = 0.1e1 / t382
  t386 = 0.1e2 / 0.9e1 * t341 * t66 * (-0.62182e-1 * (0.1e1 + 0.53425e-1 * t345) * t362 + 0.19751789702565206229e-1 * t44 * (0.1e1 + 0.278125e-1 * t345) * t375) * t383
  t389 = lax_cond(t386 < -0.66725e-1, 0, 0.66725e-1 + t386)
  t391 = r0 ** 2
  t392 = jnp.cbrt(r0)
  t393 = t392 ** 2
  t395 = 0.1e1 / t393 / t391
  t398 = t121 * t5
  t400 = t8 / t302
  t403 = lax_cond(0. < t339, t339, -t339)
  t410 = jnp.log(0.1e1 + 0.5397236614853195164e-1 * t389 * s0 * t395 * t19 * t398 * t400 / t403)
  t416 = t138 * t202 * t78
  t417 = 0.1e1 / t314
  t423 = 0.1e1 + t307 * (0.107924e1 + 0.3964e-1 * t307 + 0.123825e-1 * t304) / 0.2e1
  t424 = t423 ** 2
  t431 = t156 * t6
  t432 = t141 * t40
  t437 = t161 * t5
  t438 = t163 * t78
  t443 = t223 ** 2
  t444 = 0.1e1 / t443
  t447 = t172 * t6
  t448 = t118 * t40
  t453 = -0.3756e-1 * t143 * t301 + 0.263475e-2 * t431 * t432 * t302 * t301 - 0.4755e-3 * t437 * t438 * t314 * t301 + 0.2556e-3 * t169 * t444 - 0.21605625e-5 * t447 * t448 * t302 * t444
  t455 = 0.73596627e-2 * t143 * t301 / t424 - t339 * t453
  t458 = t138 * t180 * t22
  t462 = t307 * t304 / t423
  t466 = t339 ** 2
  t469 = 0.1e1 / (0.98556445e-3 * t458 * t40 * t417 * t462 - 0.2e1 * t466)
  t471 = s0 * t395
  t472 = t382 ** 2
  t475 = t416 * t417 * t455 * t469 * t471 * t472
  t481 = t22 * t40
  t491 = (0.619125e-2 * t339 * t197 * t462 - 0.39796666666666666666e-1 * t139 * t481 * t417 * t453) * t469 * s0 * t395 * t40 * t472
  t494 = s0 ** 2
  t496 = t391 ** 2
  t503 = t455 * t469 * t494 / t392 / t496 / r0 * t78 * t382 * t381
  t507 = (t339 / (0.1e1 + 0.193 * t410) + 0.24872916666666666666e-2 * t475) / (0.1e1 + t491 / 0.16e2 - t503 / 0.256e3)
  t518 = jnp.log(0.1e1 + 0.32164683177870697974e2 / (0.705945e1 * t307 + 0.1549425e1 * t304 + 0.420775 * t310 + 0.1562925 * t316))
  t526 = -t324 + t241 * (-0.3109e-1 * (0.1e1 + 0.5137e-1 * t304) * t518 + t324 - 0.19751789702565206229e-1 * t336) + 0.19751789702565206229e-1 * t241 * t336
  t527 = t261 * t66
  t531 = 0.1e2 / 0.9e1 * t527 * t339 * t40 * t383
  t534 = lax_cond(t531 < -0.66725e-1, 0, 0.66725e-1 + t531)
  t540 = lax_cond(0. < t526, t526, -t526)
  t547 = jnp.log(0.1e1 + 0.2698618307426597582e-1 * t78 * t534 * t471 * t19 * t398 * t400 / t540)
  t568 = lax_cond(t229, p.zeta_threshold, t228)
  t570 = 0.1e1 / t228
  t571 = jnp.cbrt(t570)
  t573 = t299 * t300 * t571
  t576 = jnp.sqrt(t573)
  t579 = t573 ** 0.15e1
  t581 = t571 ** 2
  t583 = t312 * t313 * t581
  t589 = jnp.log(0.1e1 + 0.16081824322151104822e2 / (0.379785e1 * t576 + 0.8969 * t573 + 0.204775 * t579 + 0.123235 * t583))
  t591 = 0.62182e-1 * (0.1e1 + 0.53425e-1 * t573) * t589
  t602 = jnp.log(0.1e1 + 0.29608574643216675549e2 / (0.51785e1 * t576 + 0.905775 * t573 + 0.1100325 * t579 + 0.1241775 * t583))
  t603 = (0.1e1 + 0.278125e-1 * t573) * t602
  t606 = -t591 + 0.19751789702565206229e-1 * t44 * t603
  t608 = t343 * t10 * t571
  t611 = jnp.sqrt(t608)
  t614 = t608 ** 0.15e1
  t617 = t354 * t24 * t581
  t623 = jnp.log(0.1e1 + 0.16081824322151104822e2 / (0.379785e1 * t611 + 0.8969 * t608 + 0.204775 * t614 + 0.24647 * t617))
  t636 = jnp.log(0.1e1 + 0.29608574643216675549e2 / (0.51785e1 * t611 + 0.905775 * t608 + 0.1100325 * t614 + 0.248355 * t617))
  t642 = t7 * t228
  t643 = jnp.cbrt(t642)
  t644 = 0.1e1 / t643
  t647 = 0.1e2 / 0.9e1 * t341 * t66 * (-0.62182e-1 * (0.1e1 + 0.53425e-1 * t608) * t623 + 0.19751789702565206229e-1 * t44 * (0.1e1 + 0.278125e-1 * t608) * t636) * t644
  t650 = lax_cond(t647 < -0.66725e-1, 0, 0.66725e-1 + t647)
  t652 = r1 ** 2
  t653 = jnp.cbrt(r1)
  t654 = t653 ** 2
  t656 = 0.1e1 / t654 / t652
  t660 = t8 / t571
  t663 = lax_cond(0. < t606, t606, -t606)
  t670 = jnp.log(0.1e1 + 0.5397236614853195164e-1 * t650 * s2 * t656 * t19 * t398 * t660 / t663)
  t675 = 0.1e1 / t581
  t681 = 0.1e1 + t576 * (0.107924e1 + 0.3964e-1 * t576 + 0.123825e-1 * t573) / 0.2e1
  t682 = t681 ** 2
  t697 = t228 ** 2
  t698 = 0.1e1 / t697
  t705 = -0.3756e-1 * t143 * t570 + 0.263475e-2 * t431 * t432 * t571 * t570 - 0.4755e-3 * t437 * t438 * t581 * t570 + 0.2556e-3 * t169 * t698 - 0.21605625e-5 * t447 * t448 * t571 * t698
  t707 = 0.73596627e-2 * t143 * t570 / t682 - t606 * t705
  t712 = t576 * t573 / t681
  t716 = t606 ** 2
  t719 = 0.1e1 / (0.98556445e-3 * t458 * t40 * t675 * t712 - 0.2e1 * t716)
  t721 = s2 * t656
  t722 = t643 ** 2
  t725 = t416 * t675 * t707 * t719 * t721 * t722
  t740 = (0.619125e-2 * t606 * t197 * t712 - 0.39796666666666666666e-1 * t139 * t481 * t675 * t705) * t719 * s2 * t656 * t40 * t722
  t743 = s2 ** 2
  t745 = t652 ** 2
  t752 = t707 * t719 * t743 / t653 / t745 / r1 * t78 * t643 * t642
  t756 = (t606 / (0.1e1 + 0.193 * t670) + 0.24872916666666666666e-2 * t725) / (0.1e1 + t740 / 0.16e2 - t752 / 0.256e3)
  t767 = jnp.log(0.1e1 + 0.32164683177870697974e2 / (0.705945e1 * t576 + 0.1549425e1 * t573 + 0.420775 * t579 + 0.1562925 * t583))
  t775 = -t591 + t241 * (-0.3109e-1 * (0.1e1 + 0.5137e-1 * t573) * t767 + t591 - 0.19751789702565206229e-1 * t603) + 0.19751789702565206229e-1 * t241 * t603
  t779 = 0.1e2 / 0.9e1 * t527 * t606 * t40 * t644
  t782 = lax_cond(t779 < -0.66725e-1, 0, 0.66725e-1 + t779)
  t788 = lax_cond(0. < t775, t775, -t775)
  t795 = jnp.log(0.1e1 + 0.2698618307426597582e-1 * t78 * t782 * t721 * t19 * t398 * t660 / t788)
  res = t220 + (t227 + t232 - 0.2e1) * t43 * ((t260 / (0.1e1 + 0.193 * t280) + 0.69644166666666666665e-2 * t194) / (0.1e1 + 0.1875 * t209 - 0.4046875e-1 * t216) - t220) - s0 / r0 / tau0 * t297 * (t507 + t241 * ((t526 / (0.1e1 + 0.193 * t547) + 0.17411041666666666666e-2 * t475) / (0.1e1 + 0.9375e-1 * t491 - 0.101171875e-1 * t503) - t507)) / 0.16e2 - s2 / r1 / tau1 * t568 * (t756 + t241 * ((t775 / (0.1e1 + 0.193 * t795) + 0.17411041666666666666e-2 * t725) / (0.1e1 + 0.9375e-1 * t740 - 0.101171875e-1 * t752) - t756)) / 0.16e2
  return res


def unpol(p, r, s=None, l=None, tau=None):
  params = p.params
  r0, s0, l0, tau0 = r, s, l, tau
  t1 = jnp.cbrt(3)
  t2 = 0.1e1 / jnp.pi
  t3 = jnp.cbrt(t2)
  t5 = jnp.cbrt(4)
  t6 = t5 ** 2
  t7 = jnp.cbrt(r0)
  t8 = 0.1e1 / t7
  t10 = t1 * t3 * t6 * t8
  t13 = jnp.sqrt(t10)
  t16 = t10 ** 0.15e1
  t18 = t1 ** 2
  t19 = t3 ** 2
  t21 = t7 ** 2
  t22 = 0.1e1 / t21
  t24 = t18 * t19 * t5 * t22
  t30 = jnp.log(0.1e1 + 0.16081824322151104822e2 / (0.379785e1 * t13 + 0.8969 * t10 + 0.204775 * t16 + 0.123235 * t24))
  t32 = 0.62182e-1 * (0.1e1 + 0.53425e-1 * t10) * t30
  t33 = 0.1e1 <= p.zeta_threshold
  t34 = jnp.cbrt(p.zeta_threshold)
  t35 = t34 * p.zeta_threshold
  t36 = lax_cond(t33, t35, 1)
  t39 = jnp.cbrt(2)
  t42 = 0.1e1 / (0.2e1 * t39 - 0.2e1)
  t43 = (0.2e1 * t36 - 0.2e1) * t42
  t54 = jnp.log(0.1e1 + 0.29608574643216675549e2 / (0.51785e1 * t13 + 0.905775 * t10 + 0.1100325 * t16 + 0.1241775 * t24))
  t55 = (0.1e1 + 0.278125e-1 * t10) * t54
  t58 = -t32 + 0.19751789702565206229e-1 * t43 * t55
  t60 = jnp.cbrt(6)
  t61 = t60 ** 2
  t63 = jnp.pi ** 2
  t64 = jnp.cbrt(t63)
  t65 = 0.1e1 / t64
  t66 = t39 * t1
  t68 = t3 * t6 * t8
  t69 = t66 * t68
  t72 = jnp.sqrt(t69)
  t75 = t69 ** 0.15e1
  t77 = t39 ** 2
  t78 = t77 * t18
  t80 = t19 * t5 * t22
  t81 = t78 * t80
  t87 = jnp.log(0.1e1 + 0.16081824322151104822e2 / (0.379785e1 * t72 + 0.8969 * t69 + 0.204775 * t75 + 0.123235 * t81))
  t89 = 0.62182e-1 * (0.1e1 + 0.53425e-1 * t69) * t87
  t100 = jnp.log(0.1e1 + 0.29608574643216675549e2 / (0.51785e1 * t72 + 0.905775 * t69 + 0.1100325 * t75 + 0.1241775 * t81))
  t101 = (0.1e1 + 0.278125e-1 * t69) * t100
  t104 = -t89 + 0.19751789702565206229e-1 * t43 * t101
  t108 = 0.1e2 / 0.9e1 * t39 * t2 * t61 * t65 * t104 * t8
  t111 = lax_cond(t108 < -0.66725e-1, 0, 0.66725e-1 + t108)
  t113 = r0 ** 2
  t115 = 0.1e1 / t7 / t113
  t117 = t111 * t39 * s0 * t115
  t119 = t18 / t3
  t122 = lax_cond(0. < t58, t58, -t58)
  t129 = jnp.log(0.1e1 + 0.53972366148531951642e-1 * t117 * t119 * t5 / t122)
  t134 = 0.1e1 / t19
  t135 = t1 * t134
  t138 = 0.1e1 / t7 / r0
  t139 = 0.1e1 / r0
  t140 = t2 * t139
  t146 = 0.1e1 + t13 * (0.107924e1 + 0.3964e-1 * t13 + 0.123825e-1 * t10) / 0.2e1
  t147 = t146 ** 2
  t152 = t3 * t2
  t157 = t19 * t2
  t160 = 0.1e1 / t21 / r0
  t164 = 0.1e1 / t63
  t165 = 0.1e1 / t113
  t166 = t164 * t165
  t168 = t3 * t164
  t173 = -0.1878e-1 * t140 + 0.1317375e-2 * t1 * t152 * t6 * t138 - 0.23775e-3 * t18 * t157 * t5 * t160 + 0.639e-4 * t166 - 0.540140625e-6 * t1 * t168 * t6 * t115
  t175 = 0.367983135e-2 * t140 / t147 - t58 * t173
  t177 = 4 ** (0.1e1 / 0.6e1)
  t179 = t13 * t10
  t181 = 0.1e1 / t146
  t185 = t58 ** 2
  t188 = 0.1e1 / (0.19711288999999999999e-2 * t135 * t177 * t21 * t179 * t181 - 0.2e1 * t185)
  t191 = t135 * t6 * t138 * t175 * t188 * s0
  t194 = jnp.sqrt(0.4e1)
  t199 = t6 * t21
  t205 = s0 * t165
  t206 = (0.619125e-2 * t58 * t194 * t179 * t181 - 0.79593333333333333331e-1 * t135 * t199 * t173) * t188 * t205
  t209 = s0 ** 2
  t210 = t113 ** 2
  t212 = t209 / t210
  t213 = t175 * t188 * t212
  t217 = (t58 / (0.1e1 + 0.193 * t129) + 0.99491666666666666664e-2 * t191) / (0.1e1 + t206 / 0.8e1 - t213 / 0.64e2)
  t220 = lax_cond(0.2e1 <= p.zeta_threshold, t35, 0.2e1 * t39)
  t222 = lax_cond(0. <= p.zeta_threshold, t35, 0)
  t224 = (t220 + t222 - 0.2e1) * t42
  t235 = jnp.log(0.1e1 + 0.32164683177870697974e2 / (0.705945e1 * t13 + 0.1549425e1 * t10 + 0.420775 * t16 + 0.1562925 * t24))
  t243 = -t32 + t224 * (-0.3109e-1 * (0.1e1 + 0.5137e-1 * t10) * t235 + t32 - 0.19751789702565206229e-1 * t55) + 0.19751789702565206229e-1 * t224 * t55
  t248 = 0.1e2 / 0.9e1 * t2 * t61 * t65 * t58 * t8
  t251 = lax_cond(t248 < -0.66725e-1, 0, 0.66725e-1 + t248)
  t256 = lax_cond(0. < t243, t243, -t243)
  t263 = jnp.log(0.1e1 + 0.5397236614853195164e-1 * t251 * s0 * t115 * t119 * t5 / t256)
  t279 = lax_cond(t33, p.zeta_threshold, 1)
  t284 = t77 * t1 * t68
  t287 = jnp.sqrt(t284)
  t290 = t284 ** 0.15e1
  t293 = t39 * t18 * t80
  t299 = jnp.log(0.1e1 + 0.16081824322151104822e2 / (0.379785e1 * t287 + 0.8969 * t284 + 0.204775 * t290 + 0.24647 * t293))
  t312 = jnp.log(0.1e1 + 0.29608574643216675549e2 / (0.51785e1 * t287 + 0.905775 * t284 + 0.1100325 * t290 + 0.248355 * t293))
  t320 = 0.1e2 / 0.9e1 * t77 * t2 * t61 * t65 * (-0.62182e-1 * (0.1e1 + 0.53425e-1 * t284) * t299 + 0.19751789702565206229e-1 * t43 * (0.1e1 + 0.278125e-1 * t284) * t312) * t8
  t323 = lax_cond(t320 < -0.66725e-1, 0, 0.66725e-1 + t320)
  t329 = lax_cond(0. < t104, t104, -t104)
  t336 = jnp.log(0.1e1 + 0.53972366148531951642e-1 * t323 * s0 * t115 * t77 * t119 * t5 / t329)
  t348 = 0.1e1 + t72 * (0.107924e1 + 0.3964e-1 * t72 + 0.123825e-1 * t69) / 0.2e1
  t349 = t348 ** 2
  t367 = -0.3756e-1 * t140 + 0.263475e-2 * t66 * t152 * t6 * t138 - 0.4755e-3 * t78 * t157 * t5 * t160 + 0.2556e-3 * t166 - 0.21605625e-5 * t66 * t168 * t6 * t115
  t369 = 0.73596627e-2 * t140 / t349 - t104 * t367
  t371 = t66 * t134
  t375 = t72 * t69 / t348
  t379 = t104 ** 2
  t382 = 0.1e1 / (0.98556445e-3 * t371 * t177 * t21 * t375 - 0.2e1 * t379)
  t385 = t66 * t134 * t6 * t138 * t369 * t382 * s0
  t396 = (0.619125e-2 * t104 * t194 * t375 - 0.39796666666666666667e-1 * t371 * t199 * t367) * t382 * t205
  t399 = t369 * t382 * t212
  t403 = (t104 / (0.1e1 + 0.193 * t336) + 0.49745833333333333334e-2 * t385) / (0.1e1 + t396 / 0.8e1 - t399 / 0.64e2)
  t414 = jnp.log(0.1e1 + 0.32164683177870697974e2 / (0.705945e1 * t72 + 0.1549425e1 * t69 + 0.420775 * t75 + 0.1562925 * t81))
  t422 = -t89 + t224 * (-0.3109e-1 * (0.1e1 + 0.5137e-1 * t69) * t414 + t89 - 0.19751789702565206229e-1 * t101) + 0.19751789702565206229e-1 * t224 * t101
  t425 = lax_cond(0. < t422, t422, -t422)
  t432 = jnp.log(0.1e1 + 0.5397236614853195164e-1 * t117 * t119 * t5 / t425)
  res = t217 + t43 * ((t243 / (0.1e1 + 0.193 * t263) + 0.69644166666666666665e-2 * t191) / (0.1e1 + 0.1875 * t206 - 0.4046875e-1 * t213) - t217) - s0 * t139 / tau0 * t279 * (t403 + t224 * ((t422 / (0.1e1 + 0.193 * t432) + 0.34822083333333333334e-2 * t385) / (0.1e1 + 0.1875 * t396 - 0.4046875e-1 * t399) - t403)) / 0.8e1
  return res


def invoke(
  p: NamedTuple, rho: Callable, r: jnp.ndarray, mo: Optional[Callable] = None,
  deorbitalize: Optional[float] = None,
):
  args = rho_to_arguments(p, rho, r, mo, deorbitalize)
  code = pol if p.nspin == 2 else unpol
  dens = args[0] if p.nspin == 1 else sum(args[0])
  ret = lax.cond((dens < p.dens_threshold), lambda *_: 0.,
                 lambda *_: code(p, *args), None)
  return ret