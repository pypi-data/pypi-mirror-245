"""Generated from gga_c_gapc.mpl."""

import jax
import jax.lax as lax
import jax.numpy as jnp
from jax.numpy import array as array
from jax.numpy import int32 as int32
from jax.numpy import nan as nan
from typing import Callable, Optional
from .utils import *


def pol(p, r, s=(None, None, None), l=(None, None), tau=(None, None)):
  params = p.params
  (r0, r1), (s0, s1, s2), (l0, l1), (tau0, tau1) = r, s, l, tau
  t1 = jnp.cbrt(3)
  t2 = 0.1e1 / jnp.pi
  t3 = jnp.cbrt(t2)
  t5 = jnp.cbrt(4)
  t6 = t5 ** 2
  t7 = r0 + r1
  t8 = jnp.cbrt(t7)
  t11 = t1 * t3 * t6 / t8
  t14 = jnp.sqrt(t11)
  t17 = t11 ** 0.15e1
  t19 = t1 ** 2
  t20 = t3 ** 2
  t22 = t8 ** 2
  t25 = t19 * t20 * t5 / t22
  t31 = jnp.log(0.1e1 + 0.16081824322151104822e2 / (0.379785e1 * t14 + 0.8969 * t11 + 0.204775 * t17 + 0.123235 * t25))
  t33 = 0.62182e-1 * (0.1e1 + 0.53425e-1 * t11) * t31
  t34 = 0.1e1 <= p.zeta_threshold
  t35 = jnp.cbrt(p.zeta_threshold)
  t36 = t35 * p.zeta_threshold
  t37 = lax_cond(t34, t36, 1)
  t40 = jnp.cbrt(2)
  t43 = 0.1e1 / (0.2e1 * t40 - 0.2e1)
  t55 = jnp.log(0.1e1 + 0.29608574643216675549e2 / (0.51785e1 * t14 + 0.905775 * t11 + 0.1100325 * t17 + 0.1241775 * t25))
  t56 = (0.1e1 + 0.278125e-1 * t11) * t55
  t58 = 0.19751789702565206229e-1 * (0.2e1 * t37 - 0.2e1) * t43 * t56
  t61 = 0.1e1 / t22 / t7
  t62 = jnp.pi * t6 * t61
  t63 = 0.1e1 / t7
  t64 = t2 * t63
  t70 = 0.1e1 + t14 * (0.107924e1 + 0.3964e-1 * t14 + 0.123825e-1 * t11) / 0.2e1
  t71 = t70 ** 2
  t75 = -t33 + t58
  t82 = t1 * t3 * t2 * t6 / t8 / t7
  t87 = t19 * t20 * t2 * t5 * t61
  t89 = jnp.pi ** 2
  t90 = 0.1e1 / t89
  t91 = t7 ** 2
  t93 = t90 / t91
  t98 = 0.1e1 / t8 / t91
  t100 = t1 * t3 * t90 * t6 * t98
  t102 = -0.1878e-1 * t64 + 0.1317375e-2 * t82 - 0.23775e-3 * t87 + 0.639e-4 * t93 - 0.540140625e-6 * t100
  t104 = 0.367983135e-2 * t64 / t71 - t75 * t102
  t105 = 0.1e1 / t20
  t106 = t1 * t105
  t107 = 4 ** (0.1e1 / 0.6e1)
  t108 = t106 * t107
  t109 = t14 * t11
  t110 = t22 * t109
  t111 = 0.1e1 / t70
  t115 = t75 ** 2
  t118 = 0.1e1 / (0.19711288999999999999e-2 * t108 * t110 * t111 - 0.2e1 * t115)
  t119 = t104 * t118
  t120 = t35 ** 2
  t121 = lax_cond(t34, t120, 1)
  t125 = 0.1e1 + 0.25e-1 * t11
  t127 = 0.1e1 + 0.4445e-1 * t11
  t131 = s0 + 0.2e1 * s1 + s2
  t132 = t125 / t127 * t131
  t137 = jnp.log(t11 / 0.4e1)
  t138 = t6 / t22 / t91 * t137
  t139 = t121 ** 2
  t140 = 0.1e1 / t139
  t143 = 0.1e1 / t125 * t127
  t147 = 0.3e2 + 0.72806316506996704929e-2 * t138 * t131 * t140 * t143
  t148 = t131 * t98
  t150 = 0.1e1 / t3
  t154 = 0.3e2 + t148 * t140 * t19 * t150 / 0.48e2
  t157 = t106 * t6
  t162 = jnp.sqrt(0.4e1)
  t167 = t6 * t22
  t172 = (0.619125e-2 * t75 * t162 * t109 * t111 - 0.79593333333333333331e-1 * t106 * t167 * t102) * t118
  t174 = 0.79593333333333333331e-1 * t157 * t22 * t104 * t118 - t172 * t75
  t176 = t147 / t154 / t174
  t184 = t98 * t19 * t150
  t189 = t125 ** 2
  t190 = t127 ** 2
  t193 = t131 ** 2
  t194 = t189 / t190 * t193
  t196 = t91 ** 2
  t200 = 0.1e1 / t22 / t196 * t1 * t105
  t201 = t147 ** 2
  t202 = t154 ** 2
  t205 = t174 ** 2
  t213 = (-t33 + t58 + 0.33192683735458272399e-3 * t62 * t119 * t121 * t132 * t176) / (0.1e1 + 0.13900948042322754167e-2 * t172 * t121 * t132 * t184 * t176 - 0.57970906942607043474e-5 * t119 * t139 * t194 * t200 * t201 / t202 / t205)
  t215 = (r0 - r1) * t63
  t216 = 0.1e1 + t215
  t218 = jnp.cbrt(t216)
  t220 = lax_cond(t216 <= p.zeta_threshold, t36, t218 * t216)
  t221 = 0.1e1 - t215
  t223 = jnp.cbrt(t221)
  t225 = lax_cond(t221 <= p.zeta_threshold, t36, t223 * t221)
  t228 = 0.2e1 <= p.zeta_threshold
  t230 = lax_cond(t228, t36, 0.2e1 * t40)
  t231 = 0. <= p.zeta_threshold
  t232 = lax_cond(t231, t36, 0)
  t234 = (t230 + t232 - 0.2e1) * t43
  t245 = jnp.log(0.1e1 + 0.32164683177870697974e2 / (0.705945e1 * t14 + 0.1549425e1 * t11 + 0.420775 * t17 + 0.1562925 * t25))
  t250 = t234 * (-0.3109e-1 * (0.1e1 + 0.5137e-1 * t11) * t245 + t33 - 0.19751789702565206229e-1 * t56)
  t252 = 0.19751789702565206229e-1 * t234 * t56
  t258 = 0.1e1 + t14 * (0.149676e1 + 0.89527e-3 * t14 + 0.11799625e-1 * t11) / 0.2e1
  t259 = t258 ** 2
  t263 = -t33 + t250 + t252
  t269 = -0.24306825e-1 * t64 + 0.187495875e-2 * t82 - 0.362780625e-3 * t87 + 0.100753875e-3 * t93 - 0.8659659375e-6 * t100
  t271 = 0.3341547603375e-2 * t64 / t259 - t263 * t269
  t272 = 0.1e1 / t258
  t276 = t263 ** 2
  t279 = 0.1e1 / (0.50765919958333333334e-3 * t108 * t110 * t272 - 0.2e1 * t276)
  t280 = t271 * t279
  t281 = t40 ** 2
  t282 = lax_cond(t228, t120, t281)
  t283 = lax_cond(t231, t120, 0)
  t285 = t282 / 0.2e1 + t283 / 0.2e1
  t288 = t285 ** 2
  t289 = 0.1e1 / t288
  t294 = 0.3e2 + 0.36401987395106744013e-2 * t138 * t131 * t289 * t143
  t299 = 0.3e2 + t148 * t289 * t19 * t150 / 0.48e2
  t314 = (0.58998125e-2 * t263 * t162 * t109 * t272 - 0.21511666666666666667e-1 * t106 * t167 * t269) * t279
  t316 = 0.21511666666666666667e-1 * t157 * t22 * t271 * t279 - t314 * t263
  t318 = t294 / t299 / t316
  t330 = t294 ** 2
  t331 = t299 ** 2
  t334 = t316 ** 2
  res = t213 + (t220 + t225 - 0.2e1) * t43 * ((-t33 + t250 + t252 + 0.89709768191129894019e-4 * t62 * t280 * t285 * t132 * t318) / (0.1e1 + 0.13900948042322754167e-2 * t314 * t285 * t132 * t184 * t318 - 0.57970906942607043474e-5 * t280 * t288 * t194 * t200 * t330 / t331 / t334) - t213)
  return res


def unpol(p, r, s=None, l=None, tau=None):
  params = p.params
  r0, s0, l0, tau0 = r, s, l, tau
  t1 = jnp.cbrt(3)
  t2 = 0.1e1 / jnp.pi
  t3 = jnp.cbrt(t2)
  t5 = jnp.cbrt(4)
  t6 = t5 ** 2
  t7 = jnp.cbrt(r0)
  t10 = t1 * t3 * t6 / t7
  t13 = jnp.sqrt(t10)
  t16 = t10 ** 0.15e1
  t18 = t1 ** 2
  t19 = t3 ** 2
  t21 = t7 ** 2
  t24 = t18 * t19 * t5 / t21
  t30 = jnp.log(0.1e1 + 0.16081824322151104822e2 / (0.379785e1 * t13 + 0.8969 * t10 + 0.204775 * t16 + 0.123235 * t24))
  t32 = 0.62182e-1 * (0.1e1 + 0.53425e-1 * t10) * t30
  t33 = 0.1e1 <= p.zeta_threshold
  t34 = jnp.cbrt(p.zeta_threshold)
  t35 = t34 * p.zeta_threshold
  t36 = lax_cond(t33, t35, 1)
  t39 = jnp.cbrt(2)
  t42 = 0.1e1 / (0.2e1 * t39 - 0.2e1)
  t43 = (0.2e1 * t36 - 0.2e1) * t42
  t54 = jnp.log(0.1e1 + 0.29608574643216675549e2 / (0.51785e1 * t13 + 0.905775 * t10 + 0.1100325 * t16 + 0.1241775 * t24))
  t55 = (0.1e1 + 0.278125e-1 * t10) * t54
  t57 = 0.19751789702565206229e-1 * t43 * t55
  t60 = 0.1e1 / t21 / r0
  t61 = jnp.pi * t6 * t60
  t63 = t2 / r0
  t69 = 0.1e1 + t13 * (0.107924e1 + 0.3964e-1 * t13 + 0.123825e-1 * t10) / 0.2e1
  t70 = t69 ** 2
  t74 = -t32 + t57
  t81 = t1 * t3 * t2 * t6 / t7 / r0
  t86 = t18 * t19 * t2 * t5 * t60
  t88 = jnp.pi ** 2
  t89 = 0.1e1 / t88
  t90 = r0 ** 2
  t92 = t89 / t90
  t97 = 0.1e1 / t7 / t90
  t99 = t1 * t3 * t89 * t6 * t97
  t101 = -0.1878e-1 * t63 + 0.1317375e-2 * t81 - 0.23775e-3 * t86 + 0.639e-4 * t92 - 0.540140625e-6 * t99
  t103 = 0.367983135e-2 * t63 / t70 - t74 * t101
  t104 = 0.1e1 / t19
  t105 = t1 * t104
  t106 = 4 ** (0.1e1 / 0.6e1)
  t107 = t105 * t106
  t108 = t13 * t10
  t109 = t21 * t108
  t110 = 0.1e1 / t69
  t114 = t74 ** 2
  t117 = 0.1e1 / (0.19711288999999999999e-2 * t107 * t109 * t110 - 0.2e1 * t114)
  t118 = t103 * t117
  t119 = t34 ** 2
  t120 = lax_cond(t33, t119, 1)
  t124 = 0.1e1 + 0.25e-1 * t10
  t126 = 0.1e1 + 0.4445e-1 * t10
  t129 = t124 / t126 * s0
  t134 = jnp.log(t10 / 0.4e1)
  t135 = t6 / t21 / t90 * t134
  t136 = t120 ** 2
  t137 = 0.1e1 / t136
  t140 = 0.1e1 / t124 * t126
  t144 = 0.3e2 + 0.72806316506996704929e-2 * t135 * s0 * t137 * t140
  t145 = s0 * t97
  t147 = 0.1e1 / t3
  t151 = 0.3e2 + t145 * t137 * t18 * t147 / 0.48e2
  t154 = t105 * t6
  t159 = jnp.sqrt(0.4e1)
  t164 = t6 * t21
  t169 = (0.619125e-2 * t74 * t159 * t108 * t110 - 0.79593333333333333331e-1 * t105 * t164 * t101) * t117
  t171 = 0.79593333333333333331e-1 * t154 * t21 * t103 * t117 - t169 * t74
  t173 = t144 / t151 / t171
  t181 = t97 * t18 * t147
  t186 = t124 ** 2
  t187 = t126 ** 2
  t190 = s0 ** 2
  t191 = t186 / t187 * t190
  t193 = t90 ** 2
  t197 = 0.1e1 / t21 / t193 * t1 * t104
  t198 = t144 ** 2
  t199 = t151 ** 2
  t202 = t171 ** 2
  t210 = (-t32 + t57 + 0.33192683735458272399e-3 * t61 * t118 * t120 * t129 * t173) / (0.1e1 + 0.13900948042322754167e-2 * t169 * t120 * t129 * t181 * t173 - 0.57970906942607043474e-5 * t118 * t136 * t191 * t197 * t198 / t199 / t202)
  t211 = 0.2e1 <= p.zeta_threshold
  t213 = lax_cond(t211, t35, 0.2e1 * t39)
  t214 = 0. <= p.zeta_threshold
  t215 = lax_cond(t214, t35, 0)
  t217 = (t213 + t215 - 0.2e1) * t42
  t228 = jnp.log(0.1e1 + 0.32164683177870697974e2 / (0.705945e1 * t13 + 0.1549425e1 * t10 + 0.420775 * t16 + 0.1562925 * t24))
  t233 = t217 * (-0.3109e-1 * (0.1e1 + 0.5137e-1 * t10) * t228 + t32 - 0.19751789702565206229e-1 * t55)
  t235 = 0.19751789702565206229e-1 * t217 * t55
  t241 = 0.1e1 + t13 * (0.149676e1 + 0.89527e-3 * t13 + 0.11799625e-1 * t10) / 0.2e1
  t242 = t241 ** 2
  t246 = -t32 + t233 + t235
  t252 = -0.24306825e-1 * t63 + 0.187495875e-2 * t81 - 0.362780625e-3 * t86 + 0.100753875e-3 * t92 - 0.8659659375e-6 * t99
  t254 = 0.3341547603375e-2 * t63 / t242 - t246 * t252
  t255 = 0.1e1 / t241
  t259 = t246 ** 2
  t262 = 0.1e1 / (0.50765919958333333334e-3 * t107 * t109 * t255 - 0.2e1 * t259)
  t263 = t254 * t262
  t264 = t39 ** 2
  t265 = lax_cond(t211, t119, t264)
  t266 = lax_cond(t214, t119, 0)
  t268 = t265 / 0.2e1 + t266 / 0.2e1
  t271 = t268 ** 2
  t272 = 0.1e1 / t271
  t277 = 0.3e2 + 0.36401987395106744013e-2 * t135 * s0 * t272 * t140
  t282 = 0.3e2 + t145 * t272 * t18 * t147 / 0.48e2
  t297 = (0.58998125e-2 * t246 * t159 * t108 * t255 - 0.21511666666666666667e-1 * t105 * t164 * t252) * t262
  t299 = 0.21511666666666666667e-1 * t154 * t21 * t254 * t262 - t297 * t246
  t301 = t277 / t282 / t299
  t313 = t277 ** 2
  t314 = t282 ** 2
  t317 = t299 ** 2
  res = t210 + t43 * ((-t32 + t233 + t235 + 0.89709768191129894019e-4 * t61 * t263 * t268 * t129 * t301) / (0.1e1 + 0.13900948042322754167e-2 * t297 * t268 * t129 * t181 * t301 - 0.57970906942607043474e-5 * t263 * t271 * t191 * t197 * t313 / t314 / t317) - t210)
  return res


def invoke(
  p: NamedTuple, rho: Callable, r: jnp.ndarray, mo: Optional[Callable] = None,
  deorbitalize: Optional[float] = None,
):
  args = rho_to_arguments(p, rho, r, mo, deorbitalize)
  code = pol if p.nspin == 2 else unpol
  dens = args[0] if p.nspin == 1 else sum(args[0])
  ret = lax.cond((dens < p.dens_threshold), lambda *_: 0.,
                 lambda *_: code(p, *args), None)
  return ret