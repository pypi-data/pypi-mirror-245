[build-system]
requires = ["setuptools", "poetry_core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "python_pmpm"
version = "0.2.0"
description = "a package manager written in Python for manually installing a compiled stack"
license = "BSD-3-Clause"
keywords = [
    "package manager",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Build Tools",
    "License :: OSI Approved :: BSD License",
    "Operating System :: Unix",
    "Operating System :: POSIX",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
    "Topic :: Utilities",
]
homepage = "https://github.com/ickc/python-pmpm"
repository = "https://github.com/ickc/python-pmpm"
documentation = "https://ickc.github.io/python-pmpm"
authors = ["Kolen Cheung <christian.kolen@gmail.com>"]
readme = "docs/index.md"
packages = [
    { include = "pmpm", from = "src" },
]
include = [
    'LICENSE',
    'docs/index.md',
]

[tool.poetry.dependencies]
python = ">=3.10"
defopt = "^6"
custom-inherit = "^2.3"
psutil = "^5"
pyyaml = "^6"
yamlloader = "^1"

# extras
coloredlogs = {optional = true, version = ">=14,<16"}

# tests
coverage = {optional = true, version = "*"}
coveralls = {optional = true, version = "*"}
flake8 = {optional = true, version = "*"}
pytest = {optional = true, version = "*"}
pytest-cov = {optional = true, version = "*"}
pytest-parallel = {optional = true, version = "*"}
pytest-mpi = {optional = true, version = "*"}

# docs: sync this with tox.testenv.docs below
sphinx = {optional = true, version = "*"}
myst-parser = {optional = true, version = "*"}
furo = {optional = true, version = "*"}
sphinxcontrib-apidoc = {optional = true, version = "*"}
sphinx-autobuild = {optional = true, version = "*"}
linkify-it-py = {optional = true, version = "*"}
sphinx-last-updated-by-git = {optional = true, version = "*"}

# mpi
mpi4py = {optional = true, version = "^3"}

[tool.poetry.dev-dependencies]
tox = "*"
data-science-types = "*"

[tool.poetry.extras]
extras = [
    "coloredlogs",
]
tests = [
    "coverage",
    "coveralls",
    "flake8",
    "pytest",
    "pytest-cov",
    "pytest-parallel",
    "pytest-mpi",
]
docs = [
    "sphinx",
    "myst-parser",
    "furo",
    "sphinxcontrib-apidoc",
    "sphinx-autobuild",
    "linkify-it-py",
    "sphinx-last-updated-by-git",
]

mpi = [
    "mpi4py",
]

[tool.poetry.scripts]
pmpm = 'pmpm.core:cli'
pmpm_env_variant_generator = 'pmpm.env_variant_generator:cli'

[tool.bumpversion]
current_version = "0.2.0"
commit = true
tag = true

[[tool.bumpversion.files]]
filename = "makefile"
search = "v{current_version}"
replace = "v{new_version}"

[[tool.bumpversion.files]]
filename = "pyproject.toml"
search = 'version = "{current_version}"'
replace = 'version = "{new_version}"'

[[tool.bumpversion.files]]
filename = "docs/conf.py"
search = 'release = "{current_version}"'
replace = 'release = "{new_version}"'

[[tool.bumpversion.files]]
filename = "src/pmpm/__init__.py"
search = '__version__ = "{current_version}"'
replace = '__version__ = "{new_version}"'

[tool.coverage.paths]
source = [
    'src',
    '*/site-packages',
]

[tool.coverage.run]
branch = true
source = [
    'src',
    'tests',
]
parallel = true
relative_files = true

[tool.coverage.report]
show_missing = true
precision = 2

[tool.pytest.ini_options]

python_files = [
    'test_*.py',
    '*_test.py',
    'tests.py',
]

addopts = [
    '-ra',
    '--strict-markers',
    '--doctest-modules',
    '--doctest-glob=\*.rst',
    '--tb=short',
]

testpaths = [
    'tests',
]

[tool.isort]
line_length = 120
known_first_party = 'pmpm'
default_section = 'THIRDPARTY'
forced_separate = 'test_pmpm'
profile = 'black'
skip = [
    '.tox',
    '.eggs',
    'ci/templates',
    'build',
    'dist',
]

[tool.pylint.messages_control]
disable = "C0330, C0326"

[tool.pylint.format]
max-line-length = 120

[tool.black]
line-length = 120
target-version = ['py38']


[tool.mypy]
python_version = '3.10'
plugins = 'numpy.typing.mypy_plugin'
#* Import discovery
mypy_path = "src"
# files
# exclude
# namespace_packages
# explicit_package_bases
ignore_missing_imports = true
# follow_imports
# follow_imports_for_stubs
# python_executable
# no_site_packages
# no_silence_site_packages

#* Platform configuration...

#* Disallow dynamic typing
disallow_any_unimported = false
disallow_any_expr = false
disallow_any_decorated = false
disallow_any_explicit = false
disallow_any_generics = true
disallow_subclassing_any = false

#* Untyped definitions and calls
disallow_untyped_calls = false
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false

#* None and Optional handling
no_implicit_optional = true
strict_optional = true

#* Configuring warnings
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_return_any = false
warn_unreachable = true

#* Suppressing errors...

#* Miscellaneous strictness flags...

#* Configuring error messages
show_error_context = false
show_column_numbers = false
show_error_codes = true
pretty = false
color_output = true
error_summary = true
show_absolute_path = false

#* Incremental mode...

#* Advanced options...

#* Report generation...

#* Miscellaneous
# junit_xml
# scripts_are_modules
warn_unused_configs = true
# verbosity
