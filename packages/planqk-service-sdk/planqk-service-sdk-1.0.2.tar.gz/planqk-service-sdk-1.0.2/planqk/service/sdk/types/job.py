# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from .job_status import JobStatus
from ..core.datetime_utils import serialize_datetime


class Job(pydantic.BaseModel):
    id: typing.Optional[str]
    status: typing.Optional[JobStatus]
    created_at: typing.Optional[str] = pydantic.Field(alias="createdAt")
    started_at: typing.Optional[str] = pydantic.Field(alias="startedAt")
    ended_at: typing.Optional[str] = pydantic.Field(alias="endedAt")

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    def has_finished(self) -> bool:
        return (self.status == JobStatus.SUCCEEDED
                or self.status == JobStatus.FAILED
                or self.status == JobStatus.CANCELLED)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
