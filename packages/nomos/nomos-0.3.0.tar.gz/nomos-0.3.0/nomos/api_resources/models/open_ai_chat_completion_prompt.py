# coding: utf-8

"""
    Nomos API

    For more information on the Nomos API, please refer to the documentation at https://getnomos.com/docs/api.

    The version of the OpenAPI document: 0.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List
from pydantic import BaseModel, StrictStr, field_validator
from nomos.api_resources.models.open_ai_chat_completion_prompt_messages_inner import (
    OpenAIChatCompletionPromptMessagesInner,
)

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class OpenAIChatCompletionPrompt(BaseModel):
    """
    OpenAIChatCompletionPrompt
    """  # noqa: E501

    provider_name: StrictStr
    provider_function: StrictStr
    messages: List[OpenAIChatCompletionPromptMessagesInner]
    __properties: ClassVar[List[str]] = [
        "provider_name",
        "provider_function",
        "messages",
    ]

    @field_validator("provider_name")
    def provider_name_validate_enum(cls, value):
        """Validates the enum"""
        # Modified template below from using tuples to sets for better single string support
        # https://github.com/getnomos/nomos-postman/pull/27
        # https://github.com/OpenAPITools/openapi-generator/pull/17096
        if value not in set(["openai"]):
            raise ValueError("must be one of enum values ('openai')")
        return value

    @field_validator("provider_function")
    def provider_function_validate_enum(cls, value):
        """Validates the enum"""
        # Modified template below from using tuples to sets for better single string support
        # https://github.com/getnomos/nomos-postman/pull/27
        # https://github.com/OpenAPITools/openapi-generator/pull/17096
        if value not in set(["chat_completion"]):
            raise ValueError("must be one of enum values ('chat_completion')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of OpenAIChatCompletionPrompt from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in messages (list)
        _items = []
        if self.messages:
            for _item in self.messages:
                if _item:
                    _items.append(_item.to_dict())
            _dict["messages"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of OpenAIChatCompletionPrompt from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "provider_name": obj.get("provider_name"),
                "provider_function": obj.get("provider_function"),
                "messages": [
                    OpenAIChatCompletionPromptMessagesInner.from_dict(_item)
                    for _item in obj.get("messages")
                ]
                if obj.get("messages") is not None
                else None,
            }
        )
        return _obj
