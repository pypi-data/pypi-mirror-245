# coding: utf-8

"""
    Nomos API

    For more information on the Nomos API, please refer to the documentation at https://getnomos.com/docs/api.

    The version of the OpenAPI document: 0.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictStr
from pydantic import Field
from typing_extensions import Annotated

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class Log(BaseModel):
    """
    A log entry that was created.
    """  # noqa: E501

    id: StrictStr = Field(
        description="A unique ID referencing the log entry that was created."
    )
    created_at: Optional[datetime] = Field(
        default=None,
        description="A string indicating the creation time of the log entry in RFC 3339 format.",
    )
    updated_at: Optional[datetime] = Field(
        default=None,
        description="A string indicating the updated time of the log entry in RFC 3339 format.",
    )
    workspace_id: StrictStr = Field(
        description="The ID of the workspace that the log entry was created in."
    )
    group_id: StrictStr = Field(
        description="This ID should be generated by the client when using the log/create endpoint and should be used to group a collection of logs that are related to each other (e.g. for a chat conversation)."
    )
    provider: StrictStr = Field(
        description="The `provider` that the logged request is being attributed to."
    )
    model: StrictStr = Field(
        description="The name of the specific `model` used to execute the request."
    )
    request_path: StrictStr = Field(
        description="The `request_path` to where the request is being sent."
    )
    request_body: Union[str, Any] = Field(
        description="The raw request body that was sent to your provider for execution. This must include `model` and `prompt` at least for a text completion and `messages` instead of `prompt` for a chat completion."
    )
    response_status: Annotated[int, Field(le=599, strict=True, ge=100)] = Field(
        description="The HTTP status code returned by your provider."
    )
    response: Union[str, Any] = Field(
        description="The raw response received from your provider."
    )
    request_start_time: datetime = Field(
        description="A string indicating the start time of a request in RFC 3339 format."
    )
    request_end_time: datetime = Field(
        description="A string indicating the end time of a request in RFC 3339 format."
    )
    tags: Optional[Union[str, Any]] = Field(
        default=None,
        description="Map of string:string | number | boolean | null used as tags for the log, for organization purposes.",
    )
    project_id: Optional[StrictStr] = Field(
        default=None,
        description="The ID of Nomos project used (if applicable) for organization purposes, can be found on project dashboard.",
    )
    project_version_id: Optional[StrictStr] = Field(
        default=None,
        description="The ID indicating the specific version of the project used (if applicable) for organization purposes, can be found on project dashboard.",
    )
    variables_dataset_id: Optional[StrictStr] = Field(
        default=None,
        description="The ID indicating the variable dataset used for the project template (if applicable), can be found on project dashboard.",
    )
    parent_log_id: Optional[StrictStr] = Field(
        default=None,
        description="The `log_id` of the parent. Used to add additional requests to a chain (e.g., for a chat conversation). If you are logging a new request, this field should be blank.",
    )
    variables: Dict[str, StrictStr] = Field(
        description="A record of variables and their values."
    )
    __properties: ClassVar[List[str]] = [
        "id",
        "created_at",
        "updated_at",
        "workspace_id",
        "group_id",
        "provider",
        "model",
        "request_path",
        "request_body",
        "response_status",
        "response",
        "request_start_time",
        "request_end_time",
        "tags",
        "project_id",
        "project_version_id",
        "variables_dataset_id",
        "parent_log_id",
        "variables",
    ]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Log from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Log from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "created_at": obj.get("created_at"),
                "updated_at": obj.get("updated_at"),
                "workspace_id": obj.get("workspace_id"),
                "group_id": obj.get("group_id"),
                "provider": obj.get("provider"),
                "model": obj.get("model"),
                "request_path": obj.get("request_path"),
                "request_body": obj.get("request_body"),
                "response_status": obj.get("response_status"),
                "response": obj.get("response"),
                "request_start_time": obj.get("request_start_time"),
                "request_end_time": obj.get("request_end_time"),
                "tags": obj.get("tags"),
                "project_id": obj.get("project_id"),
                "project_version_id": obj.get("project_version_id"),
                "variables_dataset_id": obj.get("variables_dataset_id"),
                "parent_log_id": obj.get("parent_log_id"),
                "variables": obj.get("variables"),
            }
        )
        return _obj
