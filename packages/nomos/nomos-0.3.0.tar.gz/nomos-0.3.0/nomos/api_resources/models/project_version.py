# coding: utf-8

"""
    Nomos API

    For more information on the Nomos API, please refer to the documentation at https://getnomos.com/docs/api.

    The version of the OpenAPI document: 0.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
from typing_extensions import Annotated
from nomos.api_resources.models.task import Task

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class ProjectVersion(BaseModel):
    """
    A version of your Nomos project. Corresponds to a set of Tasks.
    """  # noqa: E501

    id: StrictStr
    project_id: StrictStr
    title: StrictStr
    description: Optional[StrictStr] = None
    tasks: Annotated[List[Task], Field(min_length=1)]
    __properties: ClassVar[List[str]] = [
        "id",
        "project_id",
        "title",
        "description",
        "tasks",
    ]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ProjectVersion from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in tasks (list)
        _items = []
        if self.tasks:
            for _item in self.tasks:
                if _item:
                    _items.append(_item.to_dict())
            _dict["tasks"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ProjectVersion from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "project_id": obj.get("project_id"),
                "title": obj.get("title"),
                "description": obj.get("description"),
                "tasks": [Task.from_dict(_item) for _item in obj.get("tasks")]
                if obj.get("tasks") is not None
                else None,
            }
        )
        return _obj
