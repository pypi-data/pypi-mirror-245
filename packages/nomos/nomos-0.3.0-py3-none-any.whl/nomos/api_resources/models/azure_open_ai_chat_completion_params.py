# coding: utf-8

"""
    Nomos API

    For more information on the Nomos API, please refer to the documentation at https://getnomos.com/docs/api.

    The version of the OpenAPI document: 0.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr, field_validator
from pydantic import Field
from typing_extensions import Annotated
from nomos.api_resources.models.open_ai_chat_completion_params_function_call import (
    OpenAIChatCompletionParamsFunctionCall,
)
from nomos.api_resources.models.open_ai_chat_completion_params_stop import (
    OpenAIChatCompletionParamsStop,
)
from nomos.api_resources.models.open_ai_function import OpenAIFunction

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class AzureOpenAIChatCompletionParams(BaseModel):
    """
    AzureOpenAIChatCompletionParams
    """  # noqa: E501

    provider_name: StrictStr
    provider_function: StrictStr
    deployment_name: StrictStr
    top_p: Optional[
        Union[
            Annotated[float, Field(multiple_of=0.1, le=1, strict=True, ge=0)],
            Annotated[int, Field(le=1, strict=True, ge=0)],
        ]
    ] = None
    temperature: Optional[
        Union[
            Annotated[float, Field(multiple_of=0.1, le=2, strict=True, ge=0)],
            Annotated[int, Field(le=2, strict=True, ge=0)],
        ]
    ] = None
    stop: Optional[OpenAIChatCompletionParamsStop] = None
    max_tokens: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    presence_penalty: Optional[
        Union[
            Annotated[float, Field(multiple_of=0.1, le=2, strict=True, ge=-2)],
            Annotated[int, Field(le=2, strict=True, ge=-2)],
        ]
    ] = None
    frequency_penalty: Optional[
        Union[
            Annotated[float, Field(multiple_of=0.1, le=2, strict=True, ge=-2)],
            Annotated[int, Field(le=2, strict=True, ge=-2)],
        ]
    ] = None
    logit_bias: Optional[Dict[str, Union[StrictFloat, StrictInt]]] = None
    function_call: Optional[OpenAIChatCompletionParamsFunctionCall] = None
    functions: Optional[List[OpenAIFunction]] = None
    user: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = [
        "provider_name",
        "provider_function",
        "deployment_name",
        "top_p",
        "temperature",
        "stop",
        "max_tokens",
        "presence_penalty",
        "frequency_penalty",
        "logit_bias",
        "function_call",
        "functions",
        "user",
    ]

    @field_validator("provider_name")
    def provider_name_validate_enum(cls, value):
        """Validates the enum"""
        # Modified template below from using tuples to sets for better single string support
        # https://github.com/getnomos/nomos-postman/pull/27
        # https://github.com/OpenAPITools/openapi-generator/pull/17096
        if value not in set(["azure_openai"]):
            raise ValueError("must be one of enum values ('azure_openai')")
        return value

    @field_validator("provider_function")
    def provider_function_validate_enum(cls, value):
        """Validates the enum"""
        # Modified template below from using tuples to sets for better single string support
        # https://github.com/getnomos/nomos-postman/pull/27
        # https://github.com/OpenAPITools/openapi-generator/pull/17096
        if value not in set(["chat_completion"]):
            raise ValueError("must be one of enum values ('chat_completion')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of AzureOpenAIChatCompletionParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of stop
        if self.stop:
            _dict["stop"] = self.stop.to_dict()
        # override the default output from pydantic by calling `to_dict()` of function_call
        if self.function_call:
            _dict["function_call"] = self.function_call.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in functions (list)
        _items = []
        if self.functions:
            for _item in self.functions:
                if _item:
                    _items.append(_item.to_dict())
            _dict["functions"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of AzureOpenAIChatCompletionParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "provider_name": obj.get("provider_name"),
                "provider_function": obj.get("provider_function"),
                "deployment_name": obj.get("deployment_name"),
                "top_p": obj.get("top_p"),
                "temperature": obj.get("temperature"),
                "stop": OpenAIChatCompletionParamsStop.from_dict(obj.get("stop"))
                if obj.get("stop") is not None
                else None,
                "max_tokens": obj.get("max_tokens"),
                "presence_penalty": obj.get("presence_penalty"),
                "frequency_penalty": obj.get("frequency_penalty"),
                "logit_bias": obj.get("logit_bias"),
                "function_call": OpenAIChatCompletionParamsFunctionCall.from_dict(
                    obj.get("function_call")
                )
                if obj.get("function_call") is not None
                else None,
                "functions": [
                    OpenAIFunction.from_dict(_item) for _item in obj.get("functions")
                ]
                if obj.get("functions") is not None
                else None,
                "user": obj.get("user"),
            }
        )
        return _obj
