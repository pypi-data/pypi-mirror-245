{"version":3,"file":"lib_index_js.25d01af58c7f20af18a1.js","mappings":"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","sources":["webpack://jupyterlab-broccoli-extension/./style/icons/blockly_logo.svg","webpack://jupyterlab-broccoli-extension/./src/icons.ts","webpack://jupyterlab-broccoli-extension/./src/index.ts"],"sourcesContent":["export default \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"no\\\"?>\\n<svg\\n   xmlns:dc=\\\"http://purl.org/dc/elements/1.1/\\\"\\n   xmlns:cc=\\\"http://creativecommons.org/ns#\\\"\\n   xmlns:rdf=\\\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\\\"\\n   xmlns:svg=\\\"http://www.w3.org/2000/svg\\\"\\n   xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n   xmlns:sodipodi=\\\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\\\"\\n   xmlns:inkscape=\\\"http://www.inkscape.org/namespaces/inkscape\\\"\\n   id=\\\"Layer_6\\\"\\n   data-name=\\\"Layer 6\\\"\\n   viewBox=\\\"0 0 192 192\\\"\\n   version=\\\"1.1\\\"\\n   sodipodi:docname=\\\"logo-only.svg\\\"\\n   inkscape:version=\\\"0.92.2pre0 (973e216, 2017-07-25)\\\"\\n   inkscape:export-filename=\\\"/usr/local/google/home/epastern/Documents/Blockly Logos/Square/logo-only.png\\\"\\n   inkscape:export-xdpi=\\\"96\\\"\\n   inkscape:export-ydpi=\\\"96\\\">\\n  <metadata\\n     id=\\\"metadata913\\\">\\n    <rdf:RDF>\\n      <cc:Work\\n         rdf:about=\\\"\\\">\\n        <dc:format>image/svg+xml</dc:format>\\n        <dc:type\\n           rdf:resource=\\\"http://purl.org/dc/dcmitype/StillImage\\\" />\\n        <dc:title>blockly-logo</dc:title>\\n      </cc:Work>\\n    </rdf:RDF>\\n  </metadata>\\n  <sodipodi:namedview\\n     pagecolor=\\\"#ffffff\\\"\\n     bordercolor=\\\"#666666\\\"\\n     borderopacity=\\\"1\\\"\\n     objecttolerance=\\\"10\\\"\\n     gridtolerance=\\\"10\\\"\\n     guidetolerance=\\\"10\\\"\\n     inkscape:pageopacity=\\\"0\\\"\\n     inkscape:pageshadow=\\\"2\\\"\\n     inkscape:window-width=\\\"2560\\\"\\n     inkscape:window-height=\\\"1379\\\"\\n     id=\\\"namedview911\\\"\\n     showgrid=\\\"false\\\"\\n     inkscape:zoom=\\\"2\\\"\\n     inkscape:cx=\\\"239.87642\\\"\\n     inkscape:cy=\\\"59.742687\\\"\\n     inkscape:window-x=\\\"0\\\"\\n     inkscape:window-y=\\\"0\\\"\\n     inkscape:window-maximized=\\\"1\\\"\\n     inkscape:current-layer=\\\"g1013\\\" />\\n  <defs\\n     id=\\\"defs902\\\">\\n    <style\\n       id=\\\"style900\\\">.cls-1{fill:#4285f4;}.cls-2{fill:#c8d1db;}</style>\\n  </defs>\\n  <title\\n     id=\\\"title904\\\">blockly-logo</title>\\n  <g\\n     id=\\\"g1013\\\"\\n     transform=\\\"translate(23.500002,-7.9121105)\\\"\\n     inkscape:export-xdpi=\\\"96\\\"\\n     inkscape:export-ydpi=\\\"96\\\">\\n    <path\\n       id=\\\"path906\\\"\\n       d=\\\"M 20.140625,32 C 13.433598,31.994468 7.9944684,37.433598 8,44.140625 V 148.85938 C 7.99447,155.56641 13.433598,161.00553 20.140625,161 h 4.726563 c 2.330826,8.74182 10.245751,14.82585 19.292968,14.83008 C 53.201562,175.81878 61.108176,169.73621 63.4375,161 h 4.841797 15.726562 c 4.418278,0 8,-3.58172 8,-8 V 40 l -8,-8 z\\\"\\n       style=\\\"fill:#4285f4\\\"\\n       inkscape:connector-curvature=\\\"0\\\"\\n       sodipodi:nodetypes=\\\"ccccccccssccc\\\" />\\n    <path\\n       sodipodi:nodetypes=\\\"ccccccccccccccccc\\\"\\n       inkscape:connector-curvature=\\\"0\\\"\\n       id=\\\"path908\\\"\\n       d=\\\"M 80.007812,31.994141 C 79.997147,49.696887 80,67.396525 80,85.109375 L 63.369141,75.710938 C 60.971784,74.358189 58.004891,76.087168 58,78.839844 v 40.621096 c 0.0049,2.75267 2.971786,4.48165 5.369141,3.1289 L 80,113.18945 v 37.5918 2.21875 8 h 8 1.425781 36.054689 c 6.36195,-2.6e-4 11.51927,-5.15758 11.51953,-11.51953 V 43.480469 C 136.97822,37.133775 131.8272,32.000222 125.48047,32 Z\\\"\\n       style=\\\"fill:#c8d1db\\\" />\\n  </g>\\n</svg>\\n\";","import { LabIcon } from '@jupyterlab/ui-components';\n\nimport blockly_logo from '/style/icons/blockly_logo.svg';\n\nexport const blockly_icon = new LabIcon({\n  name: 'blockly:icon/logo',\n  svgstr: blockly_logo\n});\n","import {\n  JupyterFrontEnd,\n  JupyterFrontEndPlugin,\n  ILayoutRestorer\n} from '@jupyterlab/application';\nimport { jsonIcon } from '@jupyterlab/ui-components';\nimport { WidgetTracker, ICommandPalette } from '@jupyterlab/apputils';\nimport { IRenderMimeRegistry } from '@jupyterlab/rendermime';\nimport { IEditorServices } from '@jupyterlab/codeeditor';\nimport { IFileBrowserFactory } from '@jupyterlab/filebrowser';\nimport { ILauncher } from '@jupyterlab/launcher';\nimport { ITranslator } from '@jupyterlab/translation';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { IKernelMenu, IMainMenu } from '@jupyterlab/mainmenu';\nimport { sessionContextDialogs } from '@jupyterlab/apputils';\nimport { IJupyterWidgetRegistry } from '@jupyter-widgets/base';\n\nimport { CodeCell } from '@jupyterlab/cells';\nimport {\n  WidgetRenderer,\n  registerWidgetManager\n} from '@jupyter-widgets/jupyterlab-manager';\n\nimport { BlocklyEditorFactory } from 'jupyterlab-broccoli';\nimport { BlocklyEditor } from 'jupyterlab-broccoli';\nimport { IBlocklyRegistry } from 'jupyterlab-broccoli';\n\nimport { blockly_icon } from './icons';\n\n/**\n * The name of the factory that creates the editor widgets.\n */\nconst FACTORY = 'Blockly editor';\n\nconst PALETTE_CATEGORY = 'Blockly editor';\n\nnamespace CommandIDs {\n  export const createNew = 'blockly:create-new-blockly-file';\n}\n\n/**\n * The id of the translation plugin.\n */\nconst PLUGIN_ID = '@jupyterlab/translation-extension:plugin';\n\n/**\n * Initialization data for the jupyterlab-broccoli extension.\n */\nconst plugin: JupyterFrontEndPlugin<IBlocklyRegistry> = {\n  id: 'jupyterlab-broccoli:plugin',\n  autoStart: true,\n  requires: [\n    ILayoutRestorer,\n    IRenderMimeRegistry,\n    IEditorServices,\n    IFileBrowserFactory,\n    ISettingRegistry,\n    ITranslator,\n  ],\n  optional: [ILauncher, ICommandPalette, IMainMenu, IJupyterWidgetRegistry],\n  provides: IBlocklyRegistry,\n  activate: (\n    app: JupyterFrontEnd,\n    restorer: ILayoutRestorer,\n    rendermime: IRenderMimeRegistry,\n    editorServices: IEditorServices,\n    browserFactory: IFileBrowserFactory,\n    settings: ISettingRegistry,\n    translator: ITranslator,\n    launcher: ILauncher | null,\n    palette: ICommandPalette | null,\n    mainMenu: IMainMenu | null,\n    widgetRegistry: IJupyterWidgetRegistry | null\n  ): IBlocklyRegistry => {\n    console.log('JupyterLab extension jupyterlab-broccoli is activated!');\n\n    // Namespace for the tracker\n    const namespace = 'jupyterlab-broccoli';\n\n    // Creating the tracker for the document\n    const tracker = new WidgetTracker<BlocklyEditor>({ namespace });\n\n    // Handle state restoration.\n    if (restorer) {\n      // When restoring the app, if the document was open, reopen it\n      restorer.restore(tracker, {\n        command: 'docmanager:open',\n        args: widget => ({ path: widget.context.path, factory: FACTORY }),\n        name: widget => widget.context.path\n      });\n    }\n\n    const trans = translator.load('jupyterlab');\n    const { commands } = app;\n\n    // Creating the widget factory to register it so the document manager knows about\n    // our new DocumentWidget\n    const widgetFactory = new BlocklyEditorFactory(app, {\n      name: FACTORY,\n      modelName: 'text',\n      fileTypes: ['blockly'],\n      defaultFor: ['blockly'],\n\n      // Kernel options, in this case we need to execute the code generated\n      // in the blockly editor. The best way would be to use kernels, for\n      // that reason, we tell the widget factory to start a kernel session\n      // when opening the editor, and close the session when closing the editor.\n      canStartKernel: true,\n      preferKernel: false,\n      shutdownOnClose: true,\n\n      // The rendermime instance, necessary to render the outputs\n      // after a code execution. And the mimeType service to get the\n      // mimeType from the kernel language\n      rendermime: rendermime,\n      mimetypeService: editorServices.mimeTypeService,\n\n      // The translator instance, used for the internalization of the plugin.\n      translator: translator\n    });\n\n    // Add the widget to the tracker when it's created\n    widgetFactory.widgetCreated.connect((sender, widget) => {\n      // Adding the Blockly icon for the widget so it appears next to the file name.\n      widget.title.icon = blockly_icon;\n\n      // Notify the instance tracker if restore data needs to update.\n      widget.context.pathChanged.connect(() => {\n        tracker.save(widget);\n      });\n      tracker.add(widget);\n    });\n    // Registering the file type\n    app.docRegistry.addFileType({\n      name: 'blockly',\n      displayName: 'Blockly',\n      contentType: 'file',\n      fileFormat: 'json',\n      extensions: ['.jpblockly'],\n      mimeTypes: ['application/json'],\n      icon: jsonIcon,\n      iconLabel: 'JupyterLab-Blockly'\n    });\n    // Registering the widget factory\n    app.docRegistry.addWidgetFactory(widgetFactory);\n\n    function getSetting(setting: ISettingRegistry.ISettings): string {\n      // Read the settings and convert to the correct type\n      const currentLocale: string = setting.get('locale').composite as string;\n      return currentLocale;\n    }\n\n    // Wait for the application to be restored and\n    // for the settings for this plugin to be loaded\n    settings.load(PLUGIN_ID).then(setting => {\n      // Read the settings\n      const currentLocale = getSetting(setting);\n\n      // Listen for our plugin setting changes using Signal\n      setting.changed.connect(getSetting);\n\n      // Get new language and call the function that modifies the language name accordingly.\n      // Also, make the transformation to have the name of the language package as in Blockly.\n      const language =\n        currentLocale[currentLocale.length - 2].toUpperCase() +\n        currentLocale[currentLocale.length - 1].toLowerCase();\n      console.log(`Current Language : '${language}'`);\n\n      // Transmitting the current language to the manager.\n      widgetFactory.registry.setlanguage(language);\n    });\n\n    commands.addCommand(CommandIDs.createNew, {\n      label: args =>\n        args['isPalette'] ? 'New Blockly Editor' : 'Blockly Editor',\n      caption: 'Create a new Blockly Editor',\n      icon: args => (args['isPalette'] ? null : blockly_icon),\n      execute: async args => {\n        // Get the directory in which the Blockly file must be created;\n        // otherwise take the current filebrowser directory\n        const cwd =\n          args['cwd'] || browserFactory.tracker.currentWidget.model.path;\n\n        // Create a new untitled Blockly file\n        const model = await commands.execute('docmanager:new-untitled', {\n          path: cwd,\n          type: 'file',\n          ext: '.jpblockly'\n        });\n\n        // Open the newly created file with the 'Editor'\n        return commands.execute('docmanager:open', {\n          path: model.path,\n          factory: FACTORY\n        });\n      }\n    });\n\n    // Add the command to the launcher\n    if (launcher) {\n      launcher.add({\n        command: CommandIDs.createNew,\n        category: trans.__('Other'),\n        rank: 1\n      });\n    }\n\n    // Add the command to the palette\n    if (palette) {\n      palette.addItem({\n        command: CommandIDs.createNew,\n        args: { isPalette: true },\n        category: PALETTE_CATEGORY\n      });\n    }\n\n    // Add the command to the main menu\n    if (mainMenu) {\n      mainMenu.kernelMenu.kernelUsers.add({\n        tracker,\n        interruptKernel: current => {\n          const kernel = current.context.sessionContext.session?.kernel;\n          if (kernel) {\n            return kernel.interrupt();\n          }\n          return Promise.resolve(void 0);\n        },\n        reconnectToKernel: current => {\n          const kernel = current.context.sessionContext.session?.kernel;\n          if (kernel) {\n            return kernel.reconnect();\n          }\n          return Promise.resolve(void 0);\n        },\n        restartKernel: current => {\n          sessionContextDialogs.restart(current.context.sessionContext, translator);\n          return Promise.resolve(void 0);\n        },\n        shutdownKernel: current => current.context.sessionContext.shutdown()\n      } as IKernelMenu.IKernelUser<BlocklyEditor>);\n    }\n\n    if (widgetRegistry) {\n      tracker.forEach(panel => {\n        registerWidgetManager(\n          panel.context as any,\n          panel.content.rendermime,\n          widgetRenderers([panel.content.cell])\n        );\n      });\n\n      tracker.widgetAdded.connect((sender, panel) => {\n        const kernel = panel.context.sessionContext.session?.kernel;\n        if (kernel) {\n          registerWidgetManager(\n            panel.context as any,\n            panel.content.rendermime,\n            widgetRenderers([panel.content.cell])\n          );\n        }\n      });\n    }\n\n    return widgetFactory.registry;\n  }\n};\n\nfunction* widgetRenderers(cells: CodeCell[]): IterableIterator<WidgetRenderer> {\n  for (const w of cells) {\n    if (w instanceof WidgetRenderer) {\n      yield w;\n    }\n  }\n}\n\n//\nconst plugins: JupyterFrontEndPlugin<any>[] = [\n  plugin,\n];\nexport default plugins;\n\n"],"names":[],"sourceRoot":""}