Metadata-Version: 2.1
Name: scoda
Version: 2.0b1
Summary: A MIDI and music data manipulation library
Author-email: Felix Schön <schoen@kr.tuwien.ac.at>
License: MIT License
        
        Copyright (c) 2023 Felix Schön
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Project-URL: Homepage, https://github.com/FelixSchoen/S-Coda
Project-URL: Bugtracker, https://github.com/FelixSchoen/S-Coda/issues
Keywords: midi,music
Requires-Python: >=3.10
Description-Content-Type: text/markdown
License-File: LICENSE.md
Requires-Dist: matplotlib >=3.7.1
Requires-Dist: pandas >=2.0.0
Requires-Dist: numpy >=1.24.3
Requires-Dist: mido >=1.2.10
Provides-Extra: dev
Requires-Dist: build >=1.0.3 ; extra == 'dev'
Requires-Dist: twine >=4.0.2 ; extra == 'dev'
Requires-Dist: pdoc3 >=0.10.0 ; extra == 'dev'
Provides-Extra: test
Requires-Dist: pytest >=7.3.1 ; extra == 'test'
Requires-Dist: pytest-xdist >=3.2.1 ; extra == 'test'

# S-Coda

[![Python](https://img.shields.io/badge/Python-3.10-blue)](
https://pypi.org/project/s-coda)
[![DOI](https://img.shields.io/badge/DOI-10.34726%2Fhss.2023.103585-blue)](
https://doi.org/10.34726/hss.2023.103585)
[![Test Suite](https://github.com/FelixSchoen/S-Coda/actions/workflows/pytest.yml/badge.svg?event=push)](https://github.com/FelixSchoen/S-Coda/actions/workflows/pytest.yml)

## Overview

S-Coda is a Python library for handling MIDI files.
S-Coda supports a plethora of different MIDI manipulation operations, such as:

- quantisation of notes
- quantisation of note lengths
- splitting sequences into bars
- transposing of sequences
- creating piano-roll visualisations of pieces
- judging the difficulty of pieces

S-Coda was used in our project [PAUL-2](https://github.com/FelixSchoen/PAUL-2) to process MIDI files.
For information about how to use S-Coda we refer to chapter 5 of the [thesis](https://doi.org/10.34726/hss.2023.103585) in which S-Coda was introduced.

## Changelog

See `CHANGELOG.md` for a detailed changelog.

## Usage

We refer to the aforementioned thesis for a more in-depth guide on how to use S-Coda.
We provide a short listing on how to use basic S-Coda functions:

```python
# Load sequence, choose correct track (often first track contains only meta messages)
sequence = Sequence.sequences_load(file_path=RESOURCE_BEETHOVEN)[1]

# Quantise the sequence to thirty-seconds and thirty-second triplets (standard values)
sequence.quantise()

# Split the sequence into bars based on the occurring time signatures
bars = Sequence.sequences_split_bars([sequence], meta_track_index=0)[0]

# Prepare tokeniser and output tokens
tokeniser = NotelikeTokeniser(running_value=True, running_time_sig=True)
tokens = []
difficulties = []

# Tokenise all bars in the sequence and calculate their difficulties
for bar in bars:
    tokens.extend(tokeniser.tokenise(bar.sequence))
    difficulties.append(bar.sequence.difficulty())

# (Conduct ML operations on tokens)
tokens = tokens

# Create sequence from tokens
detokenised_sequence = tokeniser.detokenise(tokens)

# Save sequence
detokenised_sequence.save("out/generated_sequence.mid")
```
