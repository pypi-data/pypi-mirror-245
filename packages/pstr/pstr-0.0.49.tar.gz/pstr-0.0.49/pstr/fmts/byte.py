# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/03_fmts/03_byte.ipynb.

# %% auto 0
__all__ = ['getidx', 'getexp', 'getsuf', 'getnum', 'fmtbyte']

# %% ../../nbs/03_fmts/03_byte.ipynb 4
from typing import Optional, Iterable

# %% ../../nbs/03_fmts/03_byte.ipynb 5
from ..nchr.core import SPACE
from ..nlit.byte import (BYTE_ABRVS as UNITS, BYTE, BYTES)

# %% ../../nbs/03_fmts/03_byte.ipynb 7
def getidx(size: int = 1, base: int = 1000, units: Iterable = UNITS) -> int:
    for idx in range(len(units)):
        if size < base ** (idx + 1): return idx
    return idx

def getexp(size: int = 1, base: int = 1000, units: Iterable = UNITS):
    idx = getidx(size, base, units)
    return base ** (idx + 1)

def getsuf(size: int = 1, base: int = 1000, units: Iterable = UNITS):
    idx = getidx(size, base, units)
    return units[idx]

def getnum(size: int = 1, base: int = 1000, precision: Optional[int] = 1, units: Iterable = UNITS):
    expo = getexp(size, base, units)
    numb = float(base * size / expo)
    prec = precision or len(str(numb))
    return round(numb, prec)

def fmtbyte(size: int = 1, base: int = 1000, sep: Optional[str] = SPACE, precision: Optional[int] = 1, units: Iterable = UNITS):
    sfix = getsuf(size, base, units)
    numb = getnum(size, base, precision, units)
    if size == 1: return f'{size} {BYTE}'
    elif size < base: return f'{size:,} {BYTES}'
    return f'{numb:,.{precision}f}{sep}{sfix}'
