# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/04_enum/03_path.ipynb.

# %% auto 0
__all__ = ['PType', 'EntryType', 'PathLibType']

# %% ../../nbs/04_enum/03_path.ipynb 4
from enum import Enum, StrEnum
from typing import Optional, Union, TypeAlias
import os, pathlib

# %% ../../nbs/04_enum/03_path.ipynb 5
from ..nlit.path import (DIR, FILE, PATH)

# %% ../../nbs/04_enum/03_path.ipynb 7
class EntryType(StrEnum):
    DIR = DIR
    FILE = FILE
    PATH = PATH
    @classmethod
    def kinds(cls) -> set: return set(m.value for m in cls)   

# %% ../../nbs/04_enum/03_path.ipynb 11
PType: TypeAlias = Optional[Union[str, 'PathLibType']]

# %% ../../nbs/04_enum/03_path.ipynb 12
class PathLibType(Enum):
    POSIX = pathlib.PosixPath
    WINDOWS = pathlib.WindowsPath
    
    def __str__(self) -> str: return str(self.name).casefold()    
    @classmethod
    def ostype(cls, osname: 'PathLibType' = None): return str(osname or os.name)
    @classmethod
    def oscomp(cls, oshave: 'PathLibType' = None, oswant: 'PathLibType' = None) -> bool: 
        return str(oshave) == str(cls.ostype(oswant))
    @classmethod
    def is_psx(cls, osn: 'PathLibType' = None) -> bool: return cls.oscomp(cls.ostype(osn), cls.POSIX)
    @classmethod
    def is_wdx(cls, osn: 'PathLibType' = None) -> bool: return cls.oscomp(cls.ostype(osn), cls.WINDOWS)    
    @classmethod
    def addcls(cls, pthcls):
        for member in cls:
            if pthcls in member.value.__bases__: continue
            member.value.__bases__ += (pthcls,)

    @classmethod
    def pthcls(cls, osname: PType = None) -> pathlib.Path:
        return pathlib.PosixPath if cls.is_psx(osname) else pathlib.WindowsPath
