# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/10_util.ipynb.

# %% auto 0
__all__ = ['todunder', 'getcard', 'iscard', 'is1char', 'pluralize']

# %% ../nbs/10_util.ipynb 4
from numbers import Number
from typing import Optional
import os, pathlib

# %% ../nbs/10_util.ipynb 5
from .nchr import DOT, NIL
from .filt import prepart
from .chck import isdunder

# %% ../nbs/10_util.ipynb 6
def todunder(s: str) -> str:
    return f'__{s}__' if not isdunder(s) else s

# %% ../nbs/10_util.ipynb 7
def getcard(s: str) -> int:
    '''Returns the cardinality of the set of characters for the string.'''
    return len(set(s))

def iscard(s: str, n: int = 1) -> bool:
    '''Checks if a string is composed of a set of `n` characters.'''
    return getcard(s) == n

def is1char(s: str) -> bool:
    '''Checks if a string is composed of a single unique character.'''
    return iscard(s, 1)

# %% ../nbs/10_util.ipynb 8
def pluralize(word: str, num: float) -> str:
    '''Convert a word to its plural form based on a numeric value.

    Parameters
    ----------
    word : str
        Word to potentially pluralize.
    num : float
        Numeric value to determine whether to pluralize.

    Returns
    -------
    str
        Original word or its plural form depending on the numeric value.

    Notes
    -----
    Returns the word in its original form if the number is 1. Otherwise, converts to plural.
    '''
    if num != 1:
        if word.endswith('y'): return word[:-1] + 'ies'
        else: return word + 's'
    return word
