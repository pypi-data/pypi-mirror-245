# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/05_util/02_path.ipynb.

# %% auto 0
__all__ = ['hasext', 'dropext', 'urljoin', 'getuser', 'hideuser']

# %% ../../nbs/05_util/02_path.ipynb 4
from typing import Optional
import os, pwd, pathlib

from urllib3.util.url import parse_url

# %% ../../nbs/05_util/02_path.ipynb 5
from nchr import DOT, NIL, SLASH, TILDE
from ..filt import prepart, stripjoin

# %% ../../nbs/05_util/02_path.ipynb 6
def hasext(file: str, ext: Optional[str] = None) -> bool:
    file = os.fspath(file) if isinstance(file, pathlib.Path) else file
    return ext in file and file.endswith(ext)

def dropext(file: str, ext: Optional[str] = None) -> str:
    '''
    Remove the file extension from a file path string or a pathlib.Path object.

    Parameters
    ----------
    file : str or pathlib.Path
        The full path or filename from which the extension should be removed.
    ext : Optional[str], default=None
        Specific extension to remove. If not provided, any extension will be removed.

    Returns
    -------
    str
        File path or filename without the specified extension.

    Notes
    -----
    If the `ext` parameter is not provided, the function will remove the last extension (after the last dot).
    '''
    file = os.fspath(file) if isinstance(file, pathlib.Path) else file
    file = os.path.basename(file)   
    file = prepart(file, DOT) if ext is None else file.replace(ext, NIL)
    return os.path.join(os.path.dirname(file), file)

# %% ../../nbs/05_util/02_path.ipynb 7
def urljoin(*parts: str) -> str:    
    return parse_url(stripjoin(*parts), SLASH).url

# %% ../../nbs/05_util/02_path.ipynb 8
def getuser() -> str:
    user = pwd.getpwuid(os.getuid())[0]
    return user

def hideuser(path: str) -> str:
    _, rest = path.split(getuser())
    return f'{TILDE}{rest}'
